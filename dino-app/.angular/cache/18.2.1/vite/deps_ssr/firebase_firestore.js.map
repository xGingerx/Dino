{
  "version": 3,
  "sources": ["../../../../../node_modules/@grpc/grpc-js/build/src/constants.js", "../../../../../node_modules/@grpc/grpc-js/package.json", "../../../../../node_modules/@grpc/grpc-js/build/src/logging.js", "../../../../../node_modules/@grpc/grpc-js/build/src/error.js", "../../../../../node_modules/@grpc/grpc-js/build/src/metadata.js", "../../../../../node_modules/@grpc/grpc-js/build/src/call-credentials.js", "../../../../../node_modules/@grpc/grpc-js/build/src/tls-helpers.js", "../../../../../node_modules/@grpc/grpc-js/build/src/channel-credentials.js", "../../../../../node_modules/@grpc/grpc-js/build/src/load-balancer.js", "../../../../../node_modules/@grpc/grpc-js/build/src/service-config.js", "../../../../../node_modules/@grpc/grpc-js/build/src/connectivity-state.js", "../../../../../node_modules/@grpc/grpc-js/build/src/uri-parser.js", "../../../../../node_modules/@grpc/grpc-js/build/src/resolver.js", "../../../../../node_modules/@grpc/grpc-js/build/src/picker.js", "../../../../../node_modules/@grpc/grpc-js/build/src/backoff-timeout.js", "../../../../../node_modules/@grpc/grpc-js/build/src/load-balancer-child-handler.js", "../../../../../node_modules/@grpc/grpc-js/build/src/resolving-load-balancer.js", "../../../../../node_modules/@grpc/grpc-js/build/src/channel-options.js", "../../../../../node_modules/@grpc/grpc-js/build/src/subchannel-address.js", "../../../../../node_modules/@grpc/grpc-js/build/src/admin.js", "../../../../../node_modules/events/events.js", "../../../../../node_modules/@grpc/grpc-js/build/src/call.js", "../../../../../node_modules/@grpc/grpc-js/build/src/call-interface.js", "../../../../../node_modules/@grpc/grpc-js/build/src/client-interceptors.js", "../../../../../node_modules/@grpc/grpc-js/build/src/client.js", "../../../../../node_modules/@grpc/grpc-js/build/src/make-client.js", "../../../../../node_modules/lodash.camelcase/index.js", "../../../../../node_modules/@protobufjs/aspromise/index.js", "../../../../../node_modules/@protobufjs/base64/index.js", "../../../../../node_modules/@protobufjs/eventemitter/index.js", "../../../../../node_modules/@protobufjs/float/index.js", "../../../../../node_modules/@protobufjs/inquire/index.js", "../../../../../node_modules/@protobufjs/utf8/index.js", "../../../../../node_modules/@protobufjs/pool/index.js", "../../../../../node_modules/protobufjs/src/util/longbits.js", "../../../../../node_modules/protobufjs/src/util/minimal.js", "../../../../../node_modules/protobufjs/src/writer.js", "../../../../../node_modules/protobufjs/src/writer_buffer.js", "../../../../../node_modules/protobufjs/src/reader.js", "../../../../../node_modules/protobufjs/src/reader_buffer.js", "../../../../../node_modules/protobufjs/src/rpc/service.js", "../../../../../node_modules/protobufjs/src/rpc.js", "../../../../../node_modules/protobufjs/src/roots.js", "../../../../../node_modules/protobufjs/src/index-minimal.js", "../../../../../node_modules/@protobufjs/codegen/index.js", "../../../../../node_modules/@protobufjs/fetch/index.js", "../../../../../node_modules/@protobufjs/path/index.js", "../../../../../node_modules/protobufjs/src/types.js", "../../../../../node_modules/protobufjs/src/field.js", "../../../../../node_modules/protobufjs/src/oneof.js", "../../../../../node_modules/protobufjs/src/namespace.js", "../../../../../node_modules/protobufjs/src/mapfield.js", "../../../../../node_modules/protobufjs/src/method.js", "../../../../../node_modules/protobufjs/src/service.js", "../../../../../node_modules/protobufjs/src/message.js", "../../../../../node_modules/protobufjs/src/decoder.js", "../../../../../node_modules/protobufjs/src/verifier.js", "../../../../../node_modules/protobufjs/src/converter.js", "../../../../../node_modules/protobufjs/src/wrappers.js", "../../../../../node_modules/protobufjs/src/type.js", "../../../../../node_modules/protobufjs/src/root.js", "../../../../../node_modules/protobufjs/src/util.js", "../../../../../node_modules/protobufjs/src/object.js", "../../../../../node_modules/protobufjs/src/enum.js", "../../../../../node_modules/protobufjs/src/encoder.js", "../../../../../node_modules/protobufjs/src/index-light.js", "../../../../../node_modules/protobufjs/src/tokenize.js", "../../../../../node_modules/protobufjs/src/parse.js", "../../../../../node_modules/protobufjs/src/common.js", "../../../../../node_modules/protobufjs/src/index.js", "../../../../../node_modules/protobufjs/index.js", "../../../../../node_modules/protobufjs/google/protobuf/descriptor.json", "../../../../../node_modules/protobufjs/ext/descriptor/index.js", "../../../../../node_modules/protobufjs/google/protobuf/api.json", "../../../../../node_modules/protobufjs/google/protobuf/source_context.json", "../../../../../node_modules/protobufjs/google/protobuf/type.json", "../../../../../node_modules/@grpc/proto-loader/build/src/util.js", "../../../../../node_modules/long/umd/index.js", "../../../../../node_modules/@grpc/proto-loader/build/src/index.js", "../../../../../node_modules/@grpc/grpc-js/build/src/channelz.js", "../../../../../node_modules/@grpc/grpc-js/build/src/subchannel.js", "../../../../../node_modules/@grpc/grpc-js/build/src/resolver-dns.js", "../../../../../node_modules/@grpc/grpc-js/build/src/http_proxy.js", "../../../../../node_modules/@grpc/grpc-js/build/src/stream-decoder.js", "../../../../../node_modules/@grpc/grpc-js/build/src/subchannel-call.js", "../../../../../node_modules/@grpc/grpc-js/build/src/call-number.js", "../../../../../node_modules/@grpc/grpc-js/build/src/transport.js", "../../../../../node_modules/@grpc/grpc-js/build/src/subchannel-pool.js", "../../../../../node_modules/@grpc/grpc-js/build/src/filter-stack.js", "../../../../../node_modules/@grpc/grpc-js/build/src/compression-algorithms.js", "../../../../../node_modules/@grpc/grpc-js/build/src/filter.js", "../../../../../node_modules/@grpc/grpc-js/build/src/compression-filter.js", "../../../../../node_modules/@grpc/grpc-js/build/src/deadline.js", "../../../../../node_modules/@grpc/grpc-js/build/src/control-plane-status.js", "../../../../../node_modules/@grpc/grpc-js/build/src/load-balancing-call.js", "../../../../../node_modules/@grpc/grpc-js/build/src/resolving-call.js", "../../../../../node_modules/@grpc/grpc-js/build/src/retrying-call.js", "../../../../../node_modules/@grpc/grpc-js/build/src/subchannel-interface.js", "../../../../../node_modules/@grpc/grpc-js/build/src/internal-channel.js", "../../../../../node_modules/@grpc/grpc-js/build/src/channel.js", "../../../../../node_modules/@grpc/grpc-js/build/src/server-call.js", "../../../../../node_modules/@grpc/grpc-js/build/src/server-credentials.js", "../../../../../node_modules/@grpc/grpc-js/build/src/server.js", "../../../../../node_modules/@grpc/grpc-js/build/src/status-builder.js", "../../../../../node_modules/@grpc/grpc-js/build/src/duration.js", "../../../../../node_modules/@grpc/grpc-js/build/src/load-balancer-outlier-detection.js", "../../../../../node_modules/@grpc/grpc-js/build/src/experimental.js", "../../../../../node_modules/@grpc/grpc-js/build/src/resolver-uds.js", "../../../../../node_modules/@grpc/grpc-js/build/src/resolver-ip.js", "../../../../../node_modules/@grpc/grpc-js/build/src/load-balancer-pick-first.js", "../../../../../node_modules/@grpc/grpc-js/build/src/load-balancer-round-robin.js", "../../../../../node_modules/@grpc/grpc-js/build/src/index.js", "../../../../../node_modules/@firebase/firestore/dist/index.node.mjs", "../../../../../node_modules/@firebase/webchannel-wrapper/dist/bloom-blob/esm/bloom_blob_es2018.js"],
  "sourcesContent": ["\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports.Propagate = exports.LogVerbosity = exports.Status = void 0;\nvar Status;\n(function (Status) {\n  Status[Status[\"OK\"] = 0] = \"OK\";\n  Status[Status[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  Status[Status[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  Status[Status[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  Status[Status[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  Status[Status[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  Status[Status[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  Status[Status[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  Status[Status[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  Status[Status[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  Status[Status[\"ABORTED\"] = 10] = \"ABORTED\";\n  Status[Status[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  Status[Status[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  Status[Status[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  Status[Status[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  Status[Status[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n  Status[Status[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n})(Status || (exports.Status = Status = {}));\nvar LogVerbosity;\n(function (LogVerbosity) {\n  LogVerbosity[LogVerbosity[\"DEBUG\"] = 0] = \"DEBUG\";\n  LogVerbosity[LogVerbosity[\"INFO\"] = 1] = \"INFO\";\n  LogVerbosity[LogVerbosity[\"ERROR\"] = 2] = \"ERROR\";\n  LogVerbosity[LogVerbosity[\"NONE\"] = 3] = \"NONE\";\n})(LogVerbosity || (exports.LogVerbosity = LogVerbosity = {}));\n/**\n * NOTE: This enum is not currently used in any implemented API in this\n * library. It is included only for type parity with the other implementation.\n */\nvar Propagate;\n(function (Propagate) {\n  Propagate[Propagate[\"DEADLINE\"] = 1] = \"DEADLINE\";\n  Propagate[Propagate[\"CENSUS_STATS_CONTEXT\"] = 2] = \"CENSUS_STATS_CONTEXT\";\n  Propagate[Propagate[\"CENSUS_TRACING_CONTEXT\"] = 4] = \"CENSUS_TRACING_CONTEXT\";\n  Propagate[Propagate[\"CANCELLATION\"] = 8] = \"CANCELLATION\";\n  // https://github.com/grpc/grpc/blob/master/include/grpc/impl/codegen/propagation_bits.h#L43\n  Propagate[Propagate[\"DEFAULTS\"] = 65535] = \"DEFAULTS\";\n})(Propagate || (exports.Propagate = Propagate = {}));\n// -1 means unlimited\nexports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;\n// 4 MB default\nexports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;\n", "{\n  \"name\": \"@grpc/grpc-js\",\n  \"version\": \"1.9.15\",\n  \"description\": \"gRPC Library for Node - pure JS implementation\",\n  \"homepage\": \"https://grpc.io/\",\n  \"repository\": \"https://github.com/grpc/grpc-node/tree/master/packages/grpc-js\",\n  \"main\": \"build/src/index.js\",\n  \"engines\": {\n    \"node\": \"^8.13.0 || >=10.10.0\"\n  },\n  \"keywords\": [],\n  \"author\": {\n    \"name\": \"Google Inc.\"\n  },\n  \"types\": \"build/src/index.d.ts\",\n  \"license\": \"Apache-2.0\",\n  \"devDependencies\": {\n    \"@types/gulp\": \"^4.0.6\",\n    \"@types/gulp-mocha\": \"0.0.32\",\n    \"@types/lodash\": \"^4.14.186\",\n    \"@types/mocha\": \"^5.2.6\",\n    \"@types/ncp\": \"^2.0.1\",\n    \"@types/pify\": \"^3.0.2\",\n    \"@types/semver\": \"^7.3.9\",\n    \"@typescript-eslint/eslint-plugin\": \"^5.59.11\",\n    \"@typescript-eslint/parser\": \"^5.59.11\",\n    \"@typescript-eslint/typescript-estree\": \"^5.59.11\",\n    \"clang-format\": \"^1.0.55\",\n    \"eslint\": \"^8.42.0\",\n    \"eslint-config-prettier\": \"^8.8.0\",\n    \"eslint-plugin-node\": \"^11.1.0\",\n    \"eslint-plugin-prettier\": \"^4.2.1\",\n    \"execa\": \"^2.0.3\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-mocha\": \"^6.0.0\",\n    \"lodash\": \"^4.17.4\",\n    \"madge\": \"^5.0.1\",\n    \"mocha-jenkins-reporter\": \"^0.4.1\",\n    \"ncp\": \"^2.0.0\",\n    \"pify\": \"^4.0.1\",\n    \"prettier\": \"^2.8.8\",\n    \"rimraf\": \"^3.0.2\",\n    \"semver\": \"^7.3.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^5.1.3\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Google Inc.\"\n    }\n  ],\n  \"scripts\": {\n    \"build\": \"npm run compile\",\n    \"clean\": \"rimraf ./build\",\n    \"compile\": \"tsc -p .\",\n    \"format\": \"clang-format -i -style=\\\"{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}\\\" src/*.ts test/*.ts\",\n    \"lint\": \"eslint src/*.ts test/*.ts\",\n    \"prepare\": \"npm run generate-types && npm run compile\",\n    \"test\": \"gulp test\",\n    \"check\": \"npm run lint\",\n    \"fix\": \"eslint --fix src/*.ts test/*.ts\",\n    \"pretest\": \"npm run generate-types && npm run generate-test-types && npm run compile\",\n    \"posttest\": \"npm run check && madge -c ./build/src\",\n    \"generate-types\": \"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --includeDirs proto/ --include-dirs test/fixtures/ -O src/generated/ --grpcLib ../index channelz.proto\",\n    \"generate-test-types\": \"proto-loader-gen-types --keepCase --longs String --enums String --defaults --oneofs --includeComments --include-dirs test/fixtures/ -O test/generated/ --grpcLib ../../src/index test_service.proto\"\n  },\n  \"dependencies\": {\n    \"@grpc/proto-loader\": \"^0.7.8\",\n    \"@types/node\": \">=12.12.47\"\n  },\n  \"files\": [\n    \"src/**/*.ts\",\n    \"build/src/**/*.{js,d.ts,js.map}\",\n    \"proto/*.proto\",\n    \"LICENSE\",\n    \"deps/envoy-api/envoy/api/v2/**/*.proto\",\n    \"deps/envoy-api/envoy/config/**/*.proto\",\n    \"deps/envoy-api/envoy/service/**/*.proto\",\n    \"deps/envoy-api/envoy/type/**/*.proto\",\n    \"deps/udpa/udpa/**/*.proto\",\n    \"deps/googleapis/google/api/*.proto\",\n    \"deps/googleapis/google/rpc/*.proto\",\n    \"deps/protoc-gen-validate/validate/**/*.proto\"\n  ]\n}\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a, _b, _c, _d;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isTracerEnabled = exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;\nconst constants_1 = require(\"./constants\");\nconst process_1 = require(\"process\");\nconst clientVersion = require('../../package.json').version;\nconst DEFAULT_LOGGER = {\n  error: (message, ...optionalParams) => {\n    console.error('E ' + message, ...optionalParams);\n  },\n  info: (message, ...optionalParams) => {\n    console.error('I ' + message, ...optionalParams);\n  },\n  debug: (message, ...optionalParams) => {\n    console.error('D ' + message, ...optionalParams);\n  }\n};\nlet _logger = DEFAULT_LOGGER;\nlet _logVerbosity = constants_1.LogVerbosity.ERROR;\nconst verbosityString = (_b = (_a = process.env.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : process.env.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : '';\nswitch (verbosityString.toUpperCase()) {\n  case 'DEBUG':\n    _logVerbosity = constants_1.LogVerbosity.DEBUG;\n    break;\n  case 'INFO':\n    _logVerbosity = constants_1.LogVerbosity.INFO;\n    break;\n  case 'ERROR':\n    _logVerbosity = constants_1.LogVerbosity.ERROR;\n    break;\n  case 'NONE':\n    _logVerbosity = constants_1.LogVerbosity.NONE;\n    break;\n  default:\n  // Ignore any other values\n}\nconst getLogger = () => {\n  return _logger;\n};\nexports.getLogger = getLogger;\nconst setLogger = logger => {\n  _logger = logger;\n};\nexports.setLogger = setLogger;\nconst setLoggerVerbosity = verbosity => {\n  _logVerbosity = verbosity;\n};\nexports.setLoggerVerbosity = setLoggerVerbosity;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst log = (severity, ...args) => {\n  let logFunction;\n  if (severity >= _logVerbosity) {\n    switch (severity) {\n      case constants_1.LogVerbosity.DEBUG:\n        logFunction = _logger.debug;\n        break;\n      case constants_1.LogVerbosity.INFO:\n        logFunction = _logger.info;\n        break;\n      case constants_1.LogVerbosity.ERROR:\n        logFunction = _logger.error;\n        break;\n    }\n    /* Fall back to _logger.error when other methods are not available for\n     * compatiblity with older behavior that always logged to _logger.error */\n    if (!logFunction) {\n      logFunction = _logger.error;\n    }\n    if (logFunction) {\n      logFunction.bind(_logger)(...args);\n    }\n  }\n};\nexports.log = log;\nconst tracersString = (_d = (_c = process.env.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : process.env.GRPC_TRACE) !== null && _d !== void 0 ? _d : '';\nconst enabledTracers = new Set();\nconst disabledTracers = new Set();\nfor (const tracerName of tracersString.split(',')) {\n  if (tracerName.startsWith('-')) {\n    disabledTracers.add(tracerName.substring(1));\n  } else {\n    enabledTracers.add(tracerName);\n  }\n}\nconst allEnabled = enabledTracers.has('all');\nfunction trace(severity, tracer, text) {\n  if (isTracerEnabled(tracer)) {\n    (0, exports.log)(severity, new Date().toISOString() + ' | v' + clientVersion + ' ' + process_1.pid + ' | ' + tracer + ' | ' + text);\n  }\n}\nexports.trace = trace;\nfunction isTracerEnabled(tracer) {\n  return !disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer));\n}\nexports.isTracerEnabled = isTracerEnabled;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getErrorCode = exports.getErrorMessage = void 0;\nfunction getErrorMessage(error) {\n  if (error instanceof Error) {\n    return error.message;\n  } else {\n    return String(error);\n  }\n}\nexports.getErrorMessage = getErrorMessage;\nfunction getErrorCode(error) {\n  if (typeof error === 'object' && error !== null && 'code' in error && typeof error.code === 'number') {\n    return error.code;\n  } else {\n    return null;\n  }\n}\nexports.getErrorCode = getErrorCode;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Metadata = void 0;\nconst logging_1 = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\nconst LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;\nconst LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;\nfunction isLegalKey(key) {\n  return LEGAL_KEY_REGEX.test(key);\n}\nfunction isLegalNonBinaryValue(value) {\n  return LEGAL_NON_BINARY_VALUE_REGEX.test(value);\n}\nfunction isBinaryKey(key) {\n  return key.endsWith('-bin');\n}\nfunction isCustomMetadata(key) {\n  return !key.startsWith('grpc-');\n}\nfunction normalizeKey(key) {\n  return key.toLowerCase();\n}\nfunction validate(key, value) {\n  if (!isLegalKey(key)) {\n    throw new Error('Metadata key \"' + key + '\" contains illegal characters');\n  }\n  if (value !== null && value !== undefined) {\n    if (isBinaryKey(key)) {\n      if (!Buffer.isBuffer(value)) {\n        throw new Error(\"keys that end with '-bin' must have Buffer values\");\n      }\n    } else {\n      if (Buffer.isBuffer(value)) {\n        throw new Error(\"keys that don't end with '-bin' must have String values\");\n      }\n      if (!isLegalNonBinaryValue(value)) {\n        throw new Error('Metadata string value \"' + value + '\" contains illegal characters');\n      }\n    }\n  }\n}\n/**\n * A class for storing metadata. Keys are normalized to lowercase ASCII.\n */\nclass Metadata {\n  constructor(options = {}) {\n    this.internalRepr = new Map();\n    this.options = options;\n  }\n  /**\n   * Sets the given value for the given key by replacing any other values\n   * associated with that key. Normalizes the key.\n   * @param key The key to whose value should be set.\n   * @param value The value to set. Must be a buffer if and only\n   *   if the normalized key ends with '-bin'.\n   */\n  set(key, value) {\n    key = normalizeKey(key);\n    validate(key, value);\n    this.internalRepr.set(key, [value]);\n  }\n  /**\n   * Adds the given value for the given key by appending to a list of previous\n   * values associated with that key. Normalizes the key.\n   * @param key The key for which a new value should be appended.\n   * @param value The value to add. Must be a buffer if and only\n   *   if the normalized key ends with '-bin'.\n   */\n  add(key, value) {\n    key = normalizeKey(key);\n    validate(key, value);\n    const existingValue = this.internalRepr.get(key);\n    if (existingValue === undefined) {\n      this.internalRepr.set(key, [value]);\n    } else {\n      existingValue.push(value);\n    }\n  }\n  /**\n   * Removes the given key and any associated values. Normalizes the key.\n   * @param key The key whose values should be removed.\n   */\n  remove(key) {\n    key = normalizeKey(key);\n    // validate(key);\n    this.internalRepr.delete(key);\n  }\n  /**\n   * Gets a list of all values associated with the key. Normalizes the key.\n   * @param key The key whose value should be retrieved.\n   * @return A list of values associated with the given key.\n   */\n  get(key) {\n    key = normalizeKey(key);\n    // validate(key);\n    return this.internalRepr.get(key) || [];\n  }\n  /**\n   * Gets a plain object mapping each key to the first value associated with it.\n   * This reflects the most common way that people will want to see metadata.\n   * @return A key/value mapping of the metadata.\n   */\n  getMap() {\n    const result = {};\n    for (const [key, values] of this.internalRepr) {\n      if (values.length > 0) {\n        const v = values[0];\n        result[key] = Buffer.isBuffer(v) ? Buffer.from(v) : v;\n      }\n    }\n    return result;\n  }\n  /**\n   * Clones the metadata object.\n   * @return The newly cloned object.\n   */\n  clone() {\n    const newMetadata = new Metadata(this.options);\n    const newInternalRepr = newMetadata.internalRepr;\n    for (const [key, value] of this.internalRepr) {\n      const clonedValue = value.map(v => {\n        if (Buffer.isBuffer(v)) {\n          return Buffer.from(v);\n        } else {\n          return v;\n        }\n      });\n      newInternalRepr.set(key, clonedValue);\n    }\n    return newMetadata;\n  }\n  /**\n   * Merges all key-value pairs from a given Metadata object into this one.\n   * If both this object and the given object have values in the same key,\n   * values from the other Metadata object will be appended to this object's\n   * values.\n   * @param other A Metadata object.\n   */\n  merge(other) {\n    for (const [key, values] of other.internalRepr) {\n      const mergedValue = (this.internalRepr.get(key) || []).concat(values);\n      this.internalRepr.set(key, mergedValue);\n    }\n  }\n  setOptions(options) {\n    this.options = options;\n  }\n  getOptions() {\n    return this.options;\n  }\n  /**\n   * Creates an OutgoingHttpHeaders object that can be used with the http2 API.\n   */\n  toHttp2Headers() {\n    // NOTE: Node <8.9 formats http2 headers incorrectly.\n    const result = {};\n    for (const [key, values] of this.internalRepr) {\n      // We assume that the user's interaction with this object is limited to\n      // through its public API (i.e. keys and values are already validated).\n      result[key] = values.map(bufToString);\n    }\n    return result;\n  }\n  /**\n   * This modifies the behavior of JSON.stringify to show an object\n   * representation of the metadata map.\n   */\n  toJSON() {\n    const result = {};\n    for (const [key, values] of this.internalRepr) {\n      result[key] = values;\n    }\n    return result;\n  }\n  /**\n   * Returns a new Metadata object based fields in a given IncomingHttpHeaders\n   * object.\n   * @param headers An IncomingHttpHeaders object.\n   */\n  static fromHttp2Headers(headers) {\n    const result = new Metadata();\n    for (const key of Object.keys(headers)) {\n      // Reserved headers (beginning with `:`) are not valid keys.\n      if (key.charAt(0) === ':') {\n        continue;\n      }\n      const values = headers[key];\n      try {\n        if (isBinaryKey(key)) {\n          if (Array.isArray(values)) {\n            values.forEach(value => {\n              result.add(key, Buffer.from(value, 'base64'));\n            });\n          } else if (values !== undefined) {\n            if (isCustomMetadata(key)) {\n              values.split(',').forEach(v => {\n                result.add(key, Buffer.from(v.trim(), 'base64'));\n              });\n            } else {\n              result.add(key, Buffer.from(values, 'base64'));\n            }\n          }\n        } else {\n          if (Array.isArray(values)) {\n            values.forEach(value => {\n              result.add(key, value);\n            });\n          } else if (values !== undefined) {\n            result.add(key, values);\n          }\n        }\n      } catch (error) {\n        const message = `Failed to add metadata entry ${key}: ${values}. ${(0, error_1.getErrorMessage)(error)}. For more information see https://github.com/grpc/grpc-node/issues/1173`;\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, message);\n      }\n    }\n    return result;\n  }\n}\nexports.Metadata = Metadata;\nconst bufToString = val => {\n  return Buffer.isBuffer(val) ? val.toString('base64') : val;\n};\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CallCredentials = void 0;\nconst metadata_1 = require(\"./metadata\");\nfunction isCurrentOauth2Client(client) {\n  return 'getRequestHeaders' in client && typeof client.getRequestHeaders === 'function';\n}\n/**\n * A class that represents a generic method of adding authentication-related\n * metadata on a per-request basis.\n */\nclass CallCredentials {\n  /**\n   * Creates a new CallCredentials object from a given function that generates\n   * Metadata objects.\n   * @param metadataGenerator A function that accepts a set of options, and\n   * generates a Metadata object based on these options, which is passed back\n   * to the caller via a supplied (err, metadata) callback.\n   */\n  static createFromMetadataGenerator(metadataGenerator) {\n    return new SingleCallCredentials(metadataGenerator);\n  }\n  /**\n   * Create a gRPC credential from a Google credential object.\n   * @param googleCredentials The authentication client to use.\n   * @return The resulting CallCredentials object.\n   */\n  static createFromGoogleCredential(googleCredentials) {\n    return CallCredentials.createFromMetadataGenerator((options, callback) => {\n      let getHeaders;\n      if (isCurrentOauth2Client(googleCredentials)) {\n        getHeaders = googleCredentials.getRequestHeaders(options.service_url);\n      } else {\n        getHeaders = new Promise((resolve, reject) => {\n          googleCredentials.getRequestMetadata(options.service_url, (err, headers) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            if (!headers) {\n              reject(new Error('Headers not set by metadata plugin'));\n              return;\n            }\n            resolve(headers);\n          });\n        });\n      }\n      getHeaders.then(headers => {\n        const metadata = new metadata_1.Metadata();\n        for (const key of Object.keys(headers)) {\n          metadata.add(key, headers[key]);\n        }\n        callback(null, metadata);\n      }, err => {\n        callback(err);\n      });\n    });\n  }\n  static createEmpty() {\n    return new EmptyCallCredentials();\n  }\n}\nexports.CallCredentials = CallCredentials;\nclass ComposedCallCredentials extends CallCredentials {\n  constructor(creds) {\n    super();\n    this.creds = creds;\n  }\n  async generateMetadata(options) {\n    const base = new metadata_1.Metadata();\n    const generated = await Promise.all(this.creds.map(cred => cred.generateMetadata(options)));\n    for (const gen of generated) {\n      base.merge(gen);\n    }\n    return base;\n  }\n  compose(other) {\n    return new ComposedCallCredentials(this.creds.concat([other]));\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof ComposedCallCredentials) {\n      return this.creds.every((value, index) => value._equals(other.creds[index]));\n    } else {\n      return false;\n    }\n  }\n}\nclass SingleCallCredentials extends CallCredentials {\n  constructor(metadataGenerator) {\n    super();\n    this.metadataGenerator = metadataGenerator;\n  }\n  generateMetadata(options) {\n    return new Promise((resolve, reject) => {\n      this.metadataGenerator(options, (err, metadata) => {\n        if (metadata !== undefined) {\n          resolve(metadata);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n  compose(other) {\n    return new ComposedCallCredentials([this, other]);\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof SingleCallCredentials) {\n      return this.metadataGenerator === other.metadataGenerator;\n    } else {\n      return false;\n    }\n  }\n}\nclass EmptyCallCredentials extends CallCredentials {\n  generateMetadata(options) {\n    return Promise.resolve(new metadata_1.Metadata());\n  }\n  compose(other) {\n    return other;\n  }\n  _equals(other) {\n    return other instanceof EmptyCallCredentials;\n  }\n}\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultRootsData = exports.CIPHER_SUITES = void 0;\nconst fs = require(\"fs\");\nexports.CIPHER_SUITES = process.env.GRPC_SSL_CIPHER_SUITES;\nconst DEFAULT_ROOTS_FILE_PATH = process.env.GRPC_DEFAULT_SSL_ROOTS_FILE_PATH;\nlet defaultRootsData = null;\nfunction getDefaultRootsData() {\n  if (DEFAULT_ROOTS_FILE_PATH) {\n    if (defaultRootsData === null) {\n      defaultRootsData = fs.readFileSync(DEFAULT_ROOTS_FILE_PATH);\n    }\n    return defaultRootsData;\n  }\n  return null;\n}\nexports.getDefaultRootsData = getDefaultRootsData;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChannelCredentials = void 0;\nconst tls_1 = require(\"tls\");\nconst call_credentials_1 = require(\"./call-credentials\");\nconst tls_helpers_1 = require(\"./tls-helpers\");\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction verifyIsBufferOrNull(obj, friendlyName) {\n  if (obj && !(obj instanceof Buffer)) {\n    throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);\n  }\n}\n/**\n * A class that contains credentials for communicating over a channel, as well\n * as a set of per-call credentials, which are applied to every method call made\n * over a channel initialized with an instance of this class.\n */\nclass ChannelCredentials {\n  constructor(callCredentials) {\n    this.callCredentials = callCredentials || call_credentials_1.CallCredentials.createEmpty();\n  }\n  /**\n   * Gets the set of per-call credentials associated with this instance.\n   */\n  _getCallCredentials() {\n    return this.callCredentials;\n  }\n  /**\n   * Return a new ChannelCredentials instance with a given set of credentials.\n   * The resulting instance can be used to construct a Channel that communicates\n   * over TLS.\n   * @param rootCerts The root certificate data.\n   * @param privateKey The client certificate private key, if available.\n   * @param certChain The client certificate key chain, if available.\n   * @param verifyOptions Additional options to modify certificate verification\n   */\n  static createSsl(rootCerts, privateKey, certChain, verifyOptions) {\n    var _a;\n    verifyIsBufferOrNull(rootCerts, 'Root certificate');\n    verifyIsBufferOrNull(privateKey, 'Private key');\n    verifyIsBufferOrNull(certChain, 'Certificate chain');\n    if (privateKey && !certChain) {\n      throw new Error('Private key must be given with accompanying certificate chain');\n    }\n    if (!privateKey && certChain) {\n      throw new Error('Certificate chain must be given with accompanying private key');\n    }\n    const secureContext = (0, tls_1.createSecureContext)({\n      ca: (_a = rootCerts !== null && rootCerts !== void 0 ? rootCerts : (0, tls_helpers_1.getDefaultRootsData)()) !== null && _a !== void 0 ? _a : undefined,\n      key: privateKey !== null && privateKey !== void 0 ? privateKey : undefined,\n      cert: certChain !== null && certChain !== void 0 ? certChain : undefined,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n    return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n  }\n  /**\n   * Return a new ChannelCredentials instance with credentials created using\n   * the provided secureContext. The resulting instances can be used to\n   * construct a Channel that communicates over TLS. gRPC will not override\n   * anything in the provided secureContext, so the environment variables\n   * GRPC_SSL_CIPHER_SUITES and GRPC_DEFAULT_SSL_ROOTS_FILE_PATH will\n   * not be applied.\n   * @param secureContext The return value of tls.createSecureContext()\n   * @param verifyOptions Additional options to modify certificate verification\n   */\n  static createFromSecureContext(secureContext, verifyOptions) {\n    return new SecureChannelCredentialsImpl(secureContext, verifyOptions !== null && verifyOptions !== void 0 ? verifyOptions : {});\n  }\n  /**\n   * Return a new ChannelCredentials instance with no credentials.\n   */\n  static createInsecure() {\n    return new InsecureChannelCredentialsImpl();\n  }\n}\nexports.ChannelCredentials = ChannelCredentials;\nclass InsecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(callCredentials) {\n    super(callCredentials);\n  }\n  compose(callCredentials) {\n    throw new Error('Cannot compose insecure credentials');\n  }\n  _getConnectionOptions() {\n    return null;\n  }\n  _isSecure() {\n    return false;\n  }\n  _equals(other) {\n    return other instanceof InsecureChannelCredentialsImpl;\n  }\n}\nclass SecureChannelCredentialsImpl extends ChannelCredentials {\n  constructor(secureContext, verifyOptions) {\n    super();\n    this.secureContext = secureContext;\n    this.verifyOptions = verifyOptions;\n    this.connectionOptions = {\n      secureContext\n    };\n    // Node asserts that this option is a function, so we cannot pass undefined\n    if (verifyOptions === null || verifyOptions === void 0 ? void 0 : verifyOptions.checkServerIdentity) {\n      this.connectionOptions.checkServerIdentity = verifyOptions.checkServerIdentity;\n    }\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    // Copy to prevent callers from mutating this.connectionOptions\n    return Object.assign({}, this.connectionOptions);\n  }\n  _isSecure() {\n    return true;\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof SecureChannelCredentialsImpl) {\n      return this.secureContext === other.secureContext && this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;\n    } else {\n      return false;\n    }\n  }\n}\nclass ComposedChannelCredentialsImpl extends ChannelCredentials {\n  constructor(channelCredentials, callCreds) {\n    super(callCreds);\n    this.channelCredentials = channelCredentials;\n  }\n  compose(callCredentials) {\n    const combinedCallCredentials = this.callCredentials.compose(callCredentials);\n    return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);\n  }\n  _getConnectionOptions() {\n    return this.channelCredentials._getConnectionOptions();\n  }\n  _isSecure() {\n    return true;\n  }\n  _equals(other) {\n    if (this === other) {\n      return true;\n    }\n    if (other instanceof ComposedChannelCredentialsImpl) {\n      return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);\n    } else {\n      return false;\n    }\n  }\n}\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.isLoadBalancerNameRegistered = exports.createLoadBalancer = exports.registerDefaultLoadBalancerType = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = void 0;\n/**\n * Create a child ChannelControlHelper that overrides some methods of the\n * parent while letting others pass through to the parent unmodified. This\n * allows other code to create these children without needing to know about\n * all of the methods to be passed through.\n * @param parent\n * @param overrides\n */\nfunction createChildChannelControlHelper(parent, overrides) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n  return {\n    createSubchannel: (_b = (_a = overrides.createSubchannel) === null || _a === void 0 ? void 0 : _a.bind(overrides)) !== null && _b !== void 0 ? _b : parent.createSubchannel.bind(parent),\n    updateState: (_d = (_c = overrides.updateState) === null || _c === void 0 ? void 0 : _c.bind(overrides)) !== null && _d !== void 0 ? _d : parent.updateState.bind(parent),\n    requestReresolution: (_f = (_e = overrides.requestReresolution) === null || _e === void 0 ? void 0 : _e.bind(overrides)) !== null && _f !== void 0 ? _f : parent.requestReresolution.bind(parent),\n    addChannelzChild: (_h = (_g = overrides.addChannelzChild) === null || _g === void 0 ? void 0 : _g.bind(overrides)) !== null && _h !== void 0 ? _h : parent.addChannelzChild.bind(parent),\n    removeChannelzChild: (_k = (_j = overrides.removeChannelzChild) === null || _j === void 0 ? void 0 : _j.bind(overrides)) !== null && _k !== void 0 ? _k : parent.removeChannelzChild.bind(parent)\n  };\n}\nexports.createChildChannelControlHelper = createChildChannelControlHelper;\nconst registeredLoadBalancerTypes = {};\nlet defaultLoadBalancerType = null;\nfunction registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {\n  registeredLoadBalancerTypes[typeName] = {\n    LoadBalancer: loadBalancerType,\n    LoadBalancingConfig: loadBalancingConfigType\n  };\n}\nexports.registerLoadBalancerType = registerLoadBalancerType;\nfunction registerDefaultLoadBalancerType(typeName) {\n  defaultLoadBalancerType = typeName;\n}\nexports.registerDefaultLoadBalancerType = registerDefaultLoadBalancerType;\nfunction createLoadBalancer(config, channelControlHelper) {\n  const typeName = config.getLoadBalancerName();\n  if (typeName in registeredLoadBalancerTypes) {\n    return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);\n  } else {\n    return null;\n  }\n}\nexports.createLoadBalancer = createLoadBalancer;\nfunction isLoadBalancerNameRegistered(typeName) {\n  return typeName in registeredLoadBalancerTypes;\n}\nexports.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;\nfunction getFirstUsableConfig(configs, fallbackTodefault = false) {\n  for (const config of configs) {\n    if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {\n      return config;\n    }\n  }\n  if (fallbackTodefault) {\n    if (defaultLoadBalancerType) {\n      return new registeredLoadBalancerTypes[defaultLoadBalancerType].LoadBalancingConfig();\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\nexports.getFirstUsableConfig = getFirstUsableConfig;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validateLoadBalancingConfig(obj) {\n  if (!(obj !== null && typeof obj === 'object')) {\n    throw new Error('Load balancing config must be an object');\n  }\n  const keys = Object.keys(obj);\n  if (keys.length !== 1) {\n    throw new Error('Provided load balancing config has multiple conflicting entries');\n  }\n  const typeName = keys[0];\n  if (typeName in registeredLoadBalancerTypes) {\n    return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);\n  } else {\n    throw new Error(`Unrecognized load balancing config name ${typeName}`);\n  }\n}\nexports.validateLoadBalancingConfig = validateLoadBalancingConfig;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.extractAndSelectServiceConfig = exports.validateServiceConfig = exports.validateRetryThrottling = void 0;\n/* This file implements gRFC A2 and the service config spec:\n * https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md\n * https://github.com/grpc/grpc/blob/master/doc/service_config.md. Each\n * function here takes an object with unknown structure and returns its\n * specific object type if the input has the right structure, and throws an\n * error otherwise. */\n/* The any type is purposely used here. All functions validate their input at\n * runtime */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst os = require(\"os\");\nconst constants_1 = require(\"./constants\");\nconst load_balancer_1 = require(\"./load-balancer\");\n/**\n * Recognizes a number with up to 9 digits after the decimal point, followed by\n * an \"s\", representing a number of seconds.\n */\nconst DURATION_REGEX = /^\\d+(\\.\\d{1,9})?s$/;\n/**\n * Client language name used for determining whether this client matches a\n * `ServiceConfigCanaryConfig`'s `clientLanguage` list.\n */\nconst CLIENT_LANGUAGE_STRING = 'node';\nfunction validateName(obj) {\n  // In this context, and unset field and '' are considered the same\n  if ('service' in obj && obj.service !== '') {\n    if (typeof obj.service !== 'string') {\n      throw new Error(`Invalid method config name: invalid service: expected type string, got ${typeof obj.service}`);\n    }\n    if ('method' in obj && obj.method !== '') {\n      if (typeof obj.method !== 'string') {\n        throw new Error(`Invalid method config name: invalid method: expected type string, got ${typeof obj.service}`);\n      }\n      return {\n        service: obj.service,\n        method: obj.method\n      };\n    } else {\n      return {\n        service: obj.service\n      };\n    }\n  } else {\n    if ('method' in obj && obj.method !== undefined) {\n      throw new Error(`Invalid method config name: method set with empty or unset service`);\n    }\n    return {};\n  }\n}\nfunction validateRetryPolicy(obj) {\n  if (!('maxAttempts' in obj) || !Number.isInteger(obj.maxAttempts) || obj.maxAttempts < 2) {\n    throw new Error('Invalid method config retry policy: maxAttempts must be an integer at least 2');\n  }\n  if (!('initialBackoff' in obj) || typeof obj.initialBackoff !== 'string' || !DURATION_REGEX.test(obj.initialBackoff)) {\n    throw new Error('Invalid method config retry policy: initialBackoff must be a string consisting of a positive integer followed by s');\n  }\n  if (!('maxBackoff' in obj) || typeof obj.maxBackoff !== 'string' || !DURATION_REGEX.test(obj.maxBackoff)) {\n    throw new Error('Invalid method config retry policy: maxBackoff must be a string consisting of a positive integer followed by s');\n  }\n  if (!('backoffMultiplier' in obj) || typeof obj.backoffMultiplier !== 'number' || obj.backoffMultiplier <= 0) {\n    throw new Error('Invalid method config retry policy: backoffMultiplier must be a number greater than 0');\n  }\n  if (!('retryableStatusCodes' in obj && Array.isArray(obj.retryableStatusCodes))) {\n    throw new Error('Invalid method config retry policy: retryableStatusCodes is required');\n  }\n  if (obj.retryableStatusCodes.length === 0) {\n    throw new Error('Invalid method config retry policy: retryableStatusCodes must be non-empty');\n  }\n  for (const value of obj.retryableStatusCodes) {\n    if (typeof value === 'number') {\n      if (!Object.values(constants_1.Status).includes(value)) {\n        throw new Error('Invalid method config retry policy: retryableStatusCodes value not in status code range');\n      }\n    } else if (typeof value === 'string') {\n      if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\n        throw new Error('Invalid method config retry policy: retryableStatusCodes value not a status code name');\n      }\n    } else {\n      throw new Error('Invalid method config retry policy: retryableStatusCodes value must be a string or number');\n    }\n  }\n  return {\n    maxAttempts: obj.maxAttempts,\n    initialBackoff: obj.initialBackoff,\n    maxBackoff: obj.maxBackoff,\n    backoffMultiplier: obj.backoffMultiplier,\n    retryableStatusCodes: obj.retryableStatusCodes\n  };\n}\nfunction validateHedgingPolicy(obj) {\n  if (!('maxAttempts' in obj) || !Number.isInteger(obj.maxAttempts) || obj.maxAttempts < 2) {\n    throw new Error('Invalid method config hedging policy: maxAttempts must be an integer at least 2');\n  }\n  if ('hedgingDelay' in obj && (typeof obj.hedgingDelay !== 'string' || !DURATION_REGEX.test(obj.hedgingDelay))) {\n    throw new Error('Invalid method config hedging policy: hedgingDelay must be a string consisting of a positive integer followed by s');\n  }\n  if ('nonFatalStatusCodes' in obj && Array.isArray(obj.nonFatalStatusCodes)) {\n    for (const value of obj.nonFatalStatusCodes) {\n      if (typeof value === 'number') {\n        if (!Object.values(constants_1.Status).includes(value)) {\n          throw new Error('Invlid method config hedging policy: nonFatalStatusCodes value not in status code range');\n        }\n      } else if (typeof value === 'string') {\n        if (!Object.values(constants_1.Status).includes(value.toUpperCase())) {\n          throw new Error('Invlid method config hedging policy: nonFatalStatusCodes value not a status code name');\n        }\n      } else {\n        throw new Error('Invlid method config hedging policy: nonFatalStatusCodes value must be a string or number');\n      }\n    }\n  }\n  const result = {\n    maxAttempts: obj.maxAttempts\n  };\n  if (obj.hedgingDelay) {\n    result.hedgingDelay = obj.hedgingDelay;\n  }\n  if (obj.nonFatalStatusCodes) {\n    result.nonFatalStatusCodes = obj.nonFatalStatusCodes;\n  }\n  return result;\n}\nfunction validateMethodConfig(obj) {\n  var _a;\n  const result = {\n    name: []\n  };\n  if (!('name' in obj) || !Array.isArray(obj.name)) {\n    throw new Error('Invalid method config: invalid name array');\n  }\n  for (const name of obj.name) {\n    result.name.push(validateName(name));\n  }\n  if ('waitForReady' in obj) {\n    if (typeof obj.waitForReady !== 'boolean') {\n      throw new Error('Invalid method config: invalid waitForReady');\n    }\n    result.waitForReady = obj.waitForReady;\n  }\n  if ('timeout' in obj) {\n    if (typeof obj.timeout === 'object') {\n      if (!('seconds' in obj.timeout) || !(typeof obj.timeout.seconds === 'number')) {\n        throw new Error('Invalid method config: invalid timeout.seconds');\n      }\n      if (!('nanos' in obj.timeout) || !(typeof obj.timeout.nanos === 'number')) {\n        throw new Error('Invalid method config: invalid timeout.nanos');\n      }\n      result.timeout = obj.timeout;\n    } else if (typeof obj.timeout === 'string' && DURATION_REGEX.test(obj.timeout)) {\n      const timeoutParts = obj.timeout.substring(0, obj.timeout.length - 1).split('.');\n      result.timeout = {\n        seconds: timeoutParts[0] | 0,\n        nanos: ((_a = timeoutParts[1]) !== null && _a !== void 0 ? _a : 0) | 0\n      };\n    } else {\n      throw new Error('Invalid method config: invalid timeout');\n    }\n  }\n  if ('maxRequestBytes' in obj) {\n    if (typeof obj.maxRequestBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n    result.maxRequestBytes = obj.maxRequestBytes;\n  }\n  if ('maxResponseBytes' in obj) {\n    if (typeof obj.maxResponseBytes !== 'number') {\n      throw new Error('Invalid method config: invalid maxRequestBytes');\n    }\n    result.maxResponseBytes = obj.maxResponseBytes;\n  }\n  if ('retryPolicy' in obj) {\n    if ('hedgingPolicy' in obj) {\n      throw new Error('Invalid method config: retryPolicy and hedgingPolicy cannot both be specified');\n    } else {\n      result.retryPolicy = validateRetryPolicy(obj.retryPolicy);\n    }\n  } else if ('hedgingPolicy' in obj) {\n    result.hedgingPolicy = validateHedgingPolicy(obj.hedgingPolicy);\n  }\n  return result;\n}\nfunction validateRetryThrottling(obj) {\n  if (!('maxTokens' in obj) || typeof obj.maxTokens !== 'number' || obj.maxTokens <= 0 || obj.maxTokens > 1000) {\n    throw new Error('Invalid retryThrottling: maxTokens must be a number in (0, 1000]');\n  }\n  if (!('tokenRatio' in obj) || typeof obj.tokenRatio !== 'number' || obj.tokenRatio <= 0) {\n    throw new Error('Invalid retryThrottling: tokenRatio must be a number greater than 0');\n  }\n  return {\n    maxTokens: +obj.maxTokens.toFixed(3),\n    tokenRatio: +obj.tokenRatio.toFixed(3)\n  };\n}\nexports.validateRetryThrottling = validateRetryThrottling;\nfunction validateServiceConfig(obj) {\n  const result = {\n    loadBalancingConfig: [],\n    methodConfig: []\n  };\n  if ('loadBalancingPolicy' in obj) {\n    if (typeof obj.loadBalancingPolicy === 'string') {\n      result.loadBalancingPolicy = obj.loadBalancingPolicy;\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingPolicy');\n    }\n  }\n  if ('loadBalancingConfig' in obj) {\n    if (Array.isArray(obj.loadBalancingConfig)) {\n      for (const config of obj.loadBalancingConfig) {\n        result.loadBalancingConfig.push((0, load_balancer_1.validateLoadBalancingConfig)(config));\n      }\n    } else {\n      throw new Error('Invalid service config: invalid loadBalancingConfig');\n    }\n  }\n  if ('methodConfig' in obj) {\n    if (Array.isArray(obj.methodConfig)) {\n      for (const methodConfig of obj.methodConfig) {\n        result.methodConfig.push(validateMethodConfig(methodConfig));\n      }\n    }\n  }\n  if ('retryThrottling' in obj) {\n    result.retryThrottling = validateRetryThrottling(obj.retryThrottling);\n  }\n  // Validate method name uniqueness\n  const seenMethodNames = [];\n  for (const methodConfig of result.methodConfig) {\n    for (const name of methodConfig.name) {\n      for (const seenName of seenMethodNames) {\n        if (name.service === seenName.service && name.method === seenName.method) {\n          throw new Error(`Invalid service config: duplicate name ${name.service}/${name.method}`);\n        }\n      }\n      seenMethodNames.push(name);\n    }\n  }\n  return result;\n}\nexports.validateServiceConfig = validateServiceConfig;\nfunction validateCanaryConfig(obj) {\n  if (!('serviceConfig' in obj)) {\n    throw new Error('Invalid service config choice: missing service config');\n  }\n  const result = {\n    serviceConfig: validateServiceConfig(obj.serviceConfig)\n  };\n  if ('clientLanguage' in obj) {\n    if (Array.isArray(obj.clientLanguage)) {\n      result.clientLanguage = [];\n      for (const lang of obj.clientLanguage) {\n        if (typeof lang === 'string') {\n          result.clientLanguage.push(lang);\n        } else {\n          throw new Error('Invalid service config choice: invalid clientLanguage');\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientLanguage');\n    }\n  }\n  if ('clientHostname' in obj) {\n    if (Array.isArray(obj.clientHostname)) {\n      result.clientHostname = [];\n      for (const lang of obj.clientHostname) {\n        if (typeof lang === 'string') {\n          result.clientHostname.push(lang);\n        } else {\n          throw new Error('Invalid service config choice: invalid clientHostname');\n        }\n      }\n    } else {\n      throw new Error('Invalid service config choice: invalid clientHostname');\n    }\n  }\n  if ('percentage' in obj) {\n    if (typeof obj.percentage === 'number' && 0 <= obj.percentage && obj.percentage <= 100) {\n      result.percentage = obj.percentage;\n    } else {\n      throw new Error('Invalid service config choice: invalid percentage');\n    }\n  }\n  // Validate that no unexpected fields are present\n  const allowedFields = ['clientLanguage', 'percentage', 'clientHostname', 'serviceConfig'];\n  for (const field in obj) {\n    if (!allowedFields.includes(field)) {\n      throw new Error(`Invalid service config choice: unexpected field ${field}`);\n    }\n  }\n  return result;\n}\nfunction validateAndSelectCanaryConfig(obj, percentage) {\n  if (!Array.isArray(obj)) {\n    throw new Error('Invalid service config list');\n  }\n  for (const config of obj) {\n    const validatedConfig = validateCanaryConfig(config);\n    /* For each field, we check if it is present, then only discard the\n     * config if the field value does not match the current client */\n    if (typeof validatedConfig.percentage === 'number' && percentage > validatedConfig.percentage) {\n      continue;\n    }\n    if (Array.isArray(validatedConfig.clientHostname)) {\n      let hostnameMatched = false;\n      for (const hostname of validatedConfig.clientHostname) {\n        if (hostname === os.hostname()) {\n          hostnameMatched = true;\n        }\n      }\n      if (!hostnameMatched) {\n        continue;\n      }\n    }\n    if (Array.isArray(validatedConfig.clientLanguage)) {\n      let languageMatched = false;\n      for (const language of validatedConfig.clientLanguage) {\n        if (language === CLIENT_LANGUAGE_STRING) {\n          languageMatched = true;\n        }\n      }\n      if (!languageMatched) {\n        continue;\n      }\n    }\n    return validatedConfig.serviceConfig;\n  }\n  throw new Error('No matching service config found');\n}\n/**\n * Find the \"grpc_config\" record among the TXT records, parse its value as JSON, validate its contents,\n * and select a service config with selection fields that all match this client. Most of these steps\n * can fail with an error; the caller must handle any errors thrown this way.\n * @param txtRecord The TXT record array that is output from a successful call to dns.resolveTxt\n * @param percentage A number chosen from the range [0, 100) that is used to select which config to use\n * @return The service configuration to use, given the percentage value, or null if the service config\n *     data has a valid format but none of the options match the current client.\n */\nfunction extractAndSelectServiceConfig(txtRecord, percentage) {\n  for (const record of txtRecord) {\n    if (record.length > 0 && record[0].startsWith('grpc_config=')) {\n      /* Treat the list of strings in this record as a single string and remove\n       * \"grpc_config=\" from the beginning. The rest should be a JSON string */\n      const recordString = record.join('').substring('grpc_config='.length);\n      const recordJson = JSON.parse(recordString);\n      return validateAndSelectCanaryConfig(recordJson, percentage);\n    }\n  }\n  return null;\n}\nexports.extractAndSelectServiceConfig = extractAndSelectServiceConfig;\n", "\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ConnectivityState = void 0;\nvar ConnectivityState;\n(function (ConnectivityState) {\n  ConnectivityState[ConnectivityState[\"IDLE\"] = 0] = \"IDLE\";\n  ConnectivityState[ConnectivityState[\"CONNECTING\"] = 1] = \"CONNECTING\";\n  ConnectivityState[ConnectivityState[\"READY\"] = 2] = \"READY\";\n  ConnectivityState[ConnectivityState[\"TRANSIENT_FAILURE\"] = 3] = \"TRANSIENT_FAILURE\";\n  ConnectivityState[ConnectivityState[\"SHUTDOWN\"] = 4] = \"SHUTDOWN\";\n})(ConnectivityState || (exports.ConnectivityState = ConnectivityState = {}));\n", "\"use strict\";\n\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.uriToString = exports.splitHostPort = exports.parseUri = void 0;\n/*\n * The groups correspond to URI parts as follows:\n * 1. scheme\n * 2. authority\n * 3. path\n */\nconst URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\\/\\/([^/]*)\\/)?(.+)$/;\nfunction parseUri(uriString) {\n  const parsedUri = URI_REGEX.exec(uriString);\n  if (parsedUri === null) {\n    return null;\n  }\n  return {\n    scheme: parsedUri[1],\n    authority: parsedUri[2],\n    path: parsedUri[3]\n  };\n}\nexports.parseUri = parseUri;\nconst NUMBER_REGEX = /^\\d+$/;\nfunction splitHostPort(path) {\n  if (path.startsWith('[')) {\n    const hostEnd = path.indexOf(']');\n    if (hostEnd === -1) {\n      return null;\n    }\n    const host = path.substring(1, hostEnd);\n    /* Only an IPv6 address should be in bracketed notation, and an IPv6\n     * address should have at least one colon */\n    if (host.indexOf(':') === -1) {\n      return null;\n    }\n    if (path.length > hostEnd + 1) {\n      if (path[hostEnd + 1] === ':') {\n        const portString = path.substring(hostEnd + 2);\n        if (NUMBER_REGEX.test(portString)) {\n          return {\n            host: host,\n            port: +portString\n          };\n        } else {\n          return null;\n        }\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host\n      };\n    }\n  } else {\n    const splitPath = path.split(':');\n    /* Exactly one colon means that this is host:port. Zero colons means that\n     * there is no port. And multiple colons means that this is a bare IPv6\n     * address with no port */\n    if (splitPath.length === 2) {\n      if (NUMBER_REGEX.test(splitPath[1])) {\n        return {\n          host: splitPath[0],\n          port: +splitPath[1]\n        };\n      } else {\n        return null;\n      }\n    } else {\n      return {\n        host: path\n      };\n    }\n  }\n}\nexports.splitHostPort = splitHostPort;\nfunction uriToString(uri) {\n  let result = '';\n  if (uri.scheme !== undefined) {\n    result += uri.scheme + ':';\n  }\n  if (uri.authority !== undefined) {\n    result += '//' + uri.authority + '/';\n  }\n  result += uri.path;\n  return result;\n}\nexports.uriToString = uriToString;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mapUriDefaultScheme = exports.getDefaultAuthority = exports.createResolver = exports.registerDefaultScheme = exports.registerResolver = void 0;\nconst uri_parser_1 = require(\"./uri-parser\");\nconst registeredResolvers = {};\nlet defaultScheme = null;\n/**\n * Register a resolver class to handle target names prefixed with the `prefix`\n * string. This prefix should correspond to a URI scheme name listed in the\n * [gRPC Name Resolution document](https://github.com/grpc/grpc/blob/master/doc/naming.md)\n * @param prefix\n * @param resolverClass\n */\nfunction registerResolver(scheme, resolverClass) {\n  registeredResolvers[scheme] = resolverClass;\n}\nexports.registerResolver = registerResolver;\n/**\n * Register a default resolver to handle target names that do not start with\n * any registered prefix.\n * @param resolverClass\n */\nfunction registerDefaultScheme(scheme) {\n  defaultScheme = scheme;\n}\nexports.registerDefaultScheme = registerDefaultScheme;\n/**\n * Create a name resolver for the specified target, if possible. Throws an\n * error if no such name resolver can be created.\n * @param target\n * @param listener\n */\nfunction createResolver(target, listener, options) {\n  if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n    return new registeredResolvers[target.scheme](target, listener, options);\n  } else {\n    throw new Error(`No resolver could be created for target ${(0, uri_parser_1.uriToString)(target)}`);\n  }\n}\nexports.createResolver = createResolver;\n/**\n * Get the default authority for the specified target, if possible. Throws an\n * error if no registered name resolver can parse that target string.\n * @param target\n */\nfunction getDefaultAuthority(target) {\n  if (target.scheme !== undefined && target.scheme in registeredResolvers) {\n    return registeredResolvers[target.scheme].getDefaultAuthority(target);\n  } else {\n    throw new Error(`Invalid target ${(0, uri_parser_1.uriToString)(target)}`);\n  }\n}\nexports.getDefaultAuthority = getDefaultAuthority;\nfunction mapUriDefaultScheme(target) {\n  if (target.scheme === undefined || !(target.scheme in registeredResolvers)) {\n    if (defaultScheme !== null) {\n      return {\n        scheme: defaultScheme,\n        authority: undefined,\n        path: (0, uri_parser_1.uriToString)(target)\n      };\n    } else {\n      return null;\n    }\n  }\n  return target;\n}\nexports.mapUriDefaultScheme = mapUriDefaultScheme;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.QueuePicker = exports.UnavailablePicker = exports.PickResultType = void 0;\nconst metadata_1 = require(\"./metadata\");\nconst constants_1 = require(\"./constants\");\nvar PickResultType;\n(function (PickResultType) {\n  PickResultType[PickResultType[\"COMPLETE\"] = 0] = \"COMPLETE\";\n  PickResultType[PickResultType[\"QUEUE\"] = 1] = \"QUEUE\";\n  PickResultType[PickResultType[\"TRANSIENT_FAILURE\"] = 2] = \"TRANSIENT_FAILURE\";\n  PickResultType[PickResultType[\"DROP\"] = 3] = \"DROP\";\n})(PickResultType || (exports.PickResultType = PickResultType = {}));\n/**\n * A standard picker representing a load balancer in the TRANSIENT_FAILURE\n * state. Always responds to every pick request with an UNAVAILABLE status.\n */\nclass UnavailablePicker {\n  constructor(status) {\n    this.status = Object.assign({\n      code: constants_1.Status.UNAVAILABLE,\n      details: 'No connection established',\n      metadata: new metadata_1.Metadata()\n    }, status);\n  }\n  pick(pickArgs) {\n    return {\n      pickResultType: PickResultType.TRANSIENT_FAILURE,\n      subchannel: null,\n      status: this.status,\n      onCallStarted: null,\n      onCallEnded: null\n    };\n  }\n}\nexports.UnavailablePicker = UnavailablePicker;\n/**\n * A standard picker representing a load balancer in the IDLE or CONNECTING\n * state. Always responds to every pick request with a QUEUE pick result\n * indicating that the pick should be tried again with the next `Picker`. Also\n * reports back to the load balancer that a connection should be established\n * once any pick is attempted.\n */\nclass QueuePicker {\n  // Constructed with a load balancer. Calls exitIdle on it the first time pick is called\n  constructor(loadBalancer) {\n    this.loadBalancer = loadBalancer;\n    this.calledExitIdle = false;\n  }\n  pick(pickArgs) {\n    if (!this.calledExitIdle) {\n      process.nextTick(() => {\n        this.loadBalancer.exitIdle();\n      });\n      this.calledExitIdle = true;\n    }\n    return {\n      pickResultType: PickResultType.QUEUE,\n      subchannel: null,\n      status: null,\n      onCallStarted: null,\n      onCallEnded: null\n    };\n  }\n}\nexports.QueuePicker = QueuePicker;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BackoffTimeout = void 0;\nconst INITIAL_BACKOFF_MS = 1000;\nconst BACKOFF_MULTIPLIER = 1.6;\nconst MAX_BACKOFF_MS = 120000;\nconst BACKOFF_JITTER = 0.2;\n/**\n * Get a number uniformly at random in the range [min, max)\n * @param min\n * @param max\n */\nfunction uniformRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\nclass BackoffTimeout {\n  constructor(callback, options) {\n    this.callback = callback;\n    /**\n     * The delay time at the start, and after each reset.\n     */\n    this.initialDelay = INITIAL_BACKOFF_MS;\n    /**\n     * The exponential backoff multiplier.\n     */\n    this.multiplier = BACKOFF_MULTIPLIER;\n    /**\n     * The maximum delay time\n     */\n    this.maxDelay = MAX_BACKOFF_MS;\n    /**\n     * The maximum fraction by which the delay time can randomly vary after\n     * applying the multiplier.\n     */\n    this.jitter = BACKOFF_JITTER;\n    /**\n     * Indicates whether the timer is currently running.\n     */\n    this.running = false;\n    /**\n     * Indicates whether the timer should keep the Node process running if no\n     * other async operation is doing so.\n     */\n    this.hasRef = true;\n    /**\n     * The time that the currently running timer was started. Only valid if\n     * running is true.\n     */\n    this.startTime = new Date();\n    /**\n     * The approximate time that the currently running timer will end. Only valid\n     * if running is true.\n     */\n    this.endTime = new Date();\n    if (options) {\n      if (options.initialDelay) {\n        this.initialDelay = options.initialDelay;\n      }\n      if (options.multiplier) {\n        this.multiplier = options.multiplier;\n      }\n      if (options.jitter) {\n        this.jitter = options.jitter;\n      }\n      if (options.maxDelay) {\n        this.maxDelay = options.maxDelay;\n      }\n    }\n    this.nextDelay = this.initialDelay;\n    this.timerId = setTimeout(() => {}, 0);\n    clearTimeout(this.timerId);\n  }\n  runTimer(delay) {\n    var _a, _b;\n    this.endTime = this.startTime;\n    this.endTime.setMilliseconds(this.endTime.getMilliseconds() + this.nextDelay);\n    clearTimeout(this.timerId);\n    this.timerId = setTimeout(() => {\n      this.callback();\n      this.running = false;\n    }, delay);\n    if (!this.hasRef) {\n      (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }\n  /**\n   * Call the callback after the current amount of delay time\n   */\n  runOnce() {\n    this.running = true;\n    this.startTime = new Date();\n    this.runTimer(this.nextDelay);\n    const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);\n    const jitterMagnitude = nextBackoff * this.jitter;\n    this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);\n  }\n  /**\n   * Stop the timer. The callback will not be called until `runOnce` is called\n   * again.\n   */\n  stop() {\n    clearTimeout(this.timerId);\n    this.running = false;\n  }\n  /**\n   * Reset the delay time to its initial value. If the timer is still running,\n   * retroactively apply that reset to the current timer.\n   */\n  reset() {\n    this.nextDelay = this.initialDelay;\n    if (this.running) {\n      const now = new Date();\n      const newEndTime = this.startTime;\n      newEndTime.setMilliseconds(newEndTime.getMilliseconds() + this.nextDelay);\n      clearTimeout(this.timerId);\n      if (now < newEndTime) {\n        this.runTimer(newEndTime.getTime() - now.getTime());\n      } else {\n        this.running = false;\n      }\n    }\n  }\n  /**\n   * Check whether the timer is currently running.\n   */\n  isRunning() {\n    return this.running;\n  }\n  /**\n   * Set that while the timer is running, it should keep the Node process\n   * running.\n   */\n  ref() {\n    var _a, _b;\n    this.hasRef = true;\n    (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  /**\n   * Set that while the timer is running, it should not keep the Node process\n   * running.\n   */\n  unref() {\n    var _a, _b;\n    this.hasRef = false;\n    (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  /**\n   * Get the approximate timestamp of when the timer will fire. Only valid if\n   * this.isRunning() is true.\n   */\n  getEndTime() {\n    return this.endTime;\n  }\n}\nexports.BackoffTimeout = BackoffTimeout;\n", "\"use strict\";\n\n/*\n * Copyright 2020 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChildLoadBalancerHandler = void 0;\nconst load_balancer_1 = require(\"./load-balancer\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst TYPE_NAME = 'child_load_balancer_helper';\nclass ChildLoadBalancerHandler {\n  constructor(channelControlHelper) {\n    this.channelControlHelper = channelControlHelper;\n    this.currentChild = null;\n    this.pendingChild = null;\n    this.latestConfig = null;\n    this.ChildPolicyHelper = class {\n      constructor(parent) {\n        this.parent = parent;\n        this.child = null;\n      }\n      createSubchannel(subchannelAddress, subchannelArgs) {\n        return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n      }\n      updateState(connectivityState, picker) {\n        var _a;\n        if (this.calledByPendingChild()) {\n          if (connectivityState === connectivity_state_1.ConnectivityState.CONNECTING) {\n            return;\n          }\n          (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();\n          this.parent.currentChild = this.parent.pendingChild;\n          this.parent.pendingChild = null;\n        } else if (!this.calledByCurrentChild()) {\n          return;\n        }\n        this.parent.channelControlHelper.updateState(connectivityState, picker);\n      }\n      requestReresolution() {\n        var _a;\n        const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;\n        if (this.child === latestChild) {\n          this.parent.channelControlHelper.requestReresolution();\n        }\n      }\n      setChild(newChild) {\n        this.child = newChild;\n      }\n      addChannelzChild(child) {\n        this.parent.channelControlHelper.addChannelzChild(child);\n      }\n      removeChannelzChild(child) {\n        this.parent.channelControlHelper.removeChannelzChild(child);\n      }\n      calledByPendingChild() {\n        return this.child === this.parent.pendingChild;\n      }\n      calledByCurrentChild() {\n        return this.child === this.parent.currentChild;\n      }\n    };\n  }\n  configUpdateRequiresNewPolicyInstance(oldConfig, newConfig) {\n    return oldConfig.getLoadBalancerName() !== newConfig.getLoadBalancerName();\n  }\n  /**\n   * Prerequisites: lbConfig !== null and lbConfig.name is registered\n   * @param addressList\n   * @param lbConfig\n   * @param attributes\n   */\n  updateAddressList(addressList, lbConfig, attributes) {\n    let childToUpdate;\n    if (this.currentChild === null || this.latestConfig === null || this.configUpdateRequiresNewPolicyInstance(this.latestConfig, lbConfig)) {\n      const newHelper = new this.ChildPolicyHelper(this);\n      const newChild = (0, load_balancer_1.createLoadBalancer)(lbConfig, newHelper);\n      newHelper.setChild(newChild);\n      if (this.currentChild === null) {\n        this.currentChild = newChild;\n        childToUpdate = this.currentChild;\n      } else {\n        if (this.pendingChild) {\n          this.pendingChild.destroy();\n        }\n        this.pendingChild = newChild;\n        childToUpdate = this.pendingChild;\n      }\n    } else {\n      if (this.pendingChild === null) {\n        childToUpdate = this.currentChild;\n      } else {\n        childToUpdate = this.pendingChild;\n      }\n    }\n    this.latestConfig = lbConfig;\n    childToUpdate.updateAddressList(addressList, lbConfig, attributes);\n  }\n  exitIdle() {\n    if (this.currentChild) {\n      this.currentChild.exitIdle();\n      if (this.pendingChild) {\n        this.pendingChild.exitIdle();\n      }\n    }\n  }\n  resetBackoff() {\n    if (this.currentChild) {\n      this.currentChild.resetBackoff();\n      if (this.pendingChild) {\n        this.pendingChild.resetBackoff();\n      }\n    }\n  }\n  destroy() {\n    /* Note: state updates are only propagated from the child balancer if that\n     * object is equal to this.currentChild or this.pendingChild. Since this\n     * function sets both of those to null, no further state updates will\n     * occur after this function returns. */\n    if (this.currentChild) {\n      this.currentChild.destroy();\n      this.currentChild = null;\n    }\n    if (this.pendingChild) {\n      this.pendingChild.destroy();\n      this.pendingChild = null;\n    }\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.ChildLoadBalancerHandler = ChildLoadBalancerHandler;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResolvingLoadBalancer = void 0;\nconst load_balancer_1 = require(\"./load-balancer\");\nconst service_config_1 = require(\"./service-config\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst resolver_1 = require(\"./resolver\");\nconst picker_1 = require(\"./picker\");\nconst backoff_timeout_1 = require(\"./backoff-timeout\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst logging = require(\"./logging\");\nconst constants_2 = require(\"./constants\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst load_balancer_child_handler_1 = require(\"./load-balancer-child-handler\");\nconst TRACER_NAME = 'resolving_load_balancer';\nfunction trace(text) {\n  logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * Name match levels in order from most to least specific. This is the order in\n * which searches will be performed.\n */\nconst NAME_MATCH_LEVEL_ORDER = ['SERVICE_AND_METHOD', 'SERVICE', 'EMPTY'];\nfunction hasMatchingName(service, method, methodConfig, matchLevel) {\n  for (const name of methodConfig.name) {\n    switch (matchLevel) {\n      case 'EMPTY':\n        if (!name.service && !name.method) {\n          return true;\n        }\n        break;\n      case 'SERVICE':\n        if (name.service === service && !name.method) {\n          return true;\n        }\n        break;\n      case 'SERVICE_AND_METHOD':\n        if (name.service === service && name.method === method) {\n          return true;\n        }\n    }\n  }\n  return false;\n}\nfunction findMatchingConfig(service, method, methodConfigs, matchLevel) {\n  for (const config of methodConfigs) {\n    if (hasMatchingName(service, method, config, matchLevel)) {\n      return config;\n    }\n  }\n  return null;\n}\nfunction getDefaultConfigSelector(serviceConfig) {\n  return function defaultConfigSelector(methodName, metadata) {\n    var _a, _b;\n    const splitName = methodName.split('/').filter(x => x.length > 0);\n    const service = (_a = splitName[0]) !== null && _a !== void 0 ? _a : '';\n    const method = (_b = splitName[1]) !== null && _b !== void 0 ? _b : '';\n    if (serviceConfig && serviceConfig.methodConfig) {\n      /* Check for the following in order, and return the first method\n       * config that matches:\n       * 1. A name that exactly matches the service and method\n       * 2. A name with no method set that matches the service\n       * 3. An empty name\n       */\n      for (const matchLevel of NAME_MATCH_LEVEL_ORDER) {\n        const matchingConfig = findMatchingConfig(service, method, serviceConfig.methodConfig, matchLevel);\n        if (matchingConfig) {\n          return {\n            methodConfig: matchingConfig,\n            pickInformation: {},\n            status: constants_1.Status.OK,\n            dynamicFilterFactories: []\n          };\n        }\n      }\n    }\n    return {\n      methodConfig: {\n        name: []\n      },\n      pickInformation: {},\n      status: constants_1.Status.OK,\n      dynamicFilterFactories: []\n    };\n  };\n}\nclass ResolvingLoadBalancer {\n  /**\n   * Wrapper class that behaves like a `LoadBalancer` and also handles name\n   * resolution internally.\n   * @param target The address of the backend to connect to.\n   * @param channelControlHelper `ChannelControlHelper` instance provided by\n   *     this load balancer's owner.\n   * @param defaultServiceConfig The default service configuration to be used\n   *     if none is provided by the name resolver. A `null` value indicates\n   *     that the default behavior should be the default unconfigured behavior.\n   *     In practice, that means using the \"pick first\" load balancer\n   *     implmentation\n   */\n  constructor(target, channelControlHelper, channelOptions, onSuccessfulResolution, onFailedResolution) {\n    this.target = target;\n    this.channelControlHelper = channelControlHelper;\n    this.onSuccessfulResolution = onSuccessfulResolution;\n    this.onFailedResolution = onFailedResolution;\n    this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\n    this.latestChildPicker = new picker_1.QueuePicker(this);\n    /**\n     * This resolving load balancer's current connectivity state.\n     */\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    /**\n     * The service config object from the last successful resolution, if\n     * available. A value of null indicates that we have not yet received a valid\n     * service config from the resolver.\n     */\n    this.previousServiceConfig = null;\n    /**\n     * Indicates whether we should attempt to resolve again after the backoff\n     * timer runs out.\n     */\n    this.continueResolving = false;\n    if (channelOptions['grpc.service_config']) {\n      this.defaultServiceConfig = (0, service_config_1.validateServiceConfig)(JSON.parse(channelOptions['grpc.service_config']));\n    } else {\n      this.defaultServiceConfig = {\n        loadBalancingConfig: [],\n        methodConfig: []\n      };\n    }\n    this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n    this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({\n      createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),\n      requestReresolution: () => {\n        /* If the backoffTimeout is running, we're still backing off from\n         * making resolve requests, so we shouldn't make another one here.\n         * In that case, the backoff timer callback will call\n         * updateResolution */\n        if (this.backoffTimeout.isRunning()) {\n          trace('requestReresolution delayed by backoff timer until ' + this.backoffTimeout.getEndTime().toISOString());\n          this.continueResolving = true;\n        } else {\n          this.updateResolution();\n        }\n      },\n      updateState: (newState, picker) => {\n        this.latestChildState = newState;\n        this.latestChildPicker = picker;\n        this.updateState(newState, picker);\n      },\n      addChannelzChild: channelControlHelper.addChannelzChild.bind(channelControlHelper),\n      removeChannelzChild: channelControlHelper.removeChannelzChild.bind(channelControlHelper)\n    });\n    this.innerResolver = (0, resolver_1.createResolver)(target, {\n      onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError, configSelector, attributes) => {\n        var _a;\n        this.backoffTimeout.stop();\n        this.backoffTimeout.reset();\n        let workingServiceConfig = null;\n        /* This first group of conditionals implements the algorithm described\n         * in https://github.com/grpc/proposal/blob/master/A21-service-config-error-handling.md\n         * in the section called \"Behavior on receiving a new gRPC Config\".\n         */\n        if (serviceConfig === null) {\n          // Step 4 and 5\n          if (serviceConfigError === null) {\n            // Step 5\n            this.previousServiceConfig = null;\n            workingServiceConfig = this.defaultServiceConfig;\n          } else {\n            // Step 4\n            if (this.previousServiceConfig === null) {\n              // Step 4.ii\n              this.handleResolutionFailure(serviceConfigError);\n            } else {\n              // Step 4.i\n              workingServiceConfig = this.previousServiceConfig;\n            }\n          }\n        } else {\n          // Step 3\n          workingServiceConfig = serviceConfig;\n          this.previousServiceConfig = serviceConfig;\n        }\n        const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];\n        const loadBalancingConfig = (0, load_balancer_1.getFirstUsableConfig)(workingConfigList, true);\n        if (loadBalancingConfig === null) {\n          // There were load balancing configs but none are supported. This counts as a resolution failure\n          this.handleResolutionFailure({\n            code: constants_1.Status.UNAVAILABLE,\n            details: 'All load balancer options in service config are not compatible',\n            metadata: new metadata_1.Metadata()\n          });\n          return;\n        }\n        this.childLoadBalancer.updateAddressList(addressList, loadBalancingConfig, attributes);\n        const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;\n        this.onSuccessfulResolution(finalServiceConfig, configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));\n      },\n      onError: error => {\n        this.handleResolutionFailure(error);\n      }\n    }, channelOptions);\n    const backoffOptions = {\n      initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n      maxDelay: channelOptions['grpc.max_reconnect_backoff_ms']\n    };\n    this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\n      if (this.continueResolving) {\n        this.updateResolution();\n        this.continueResolving = false;\n      } else {\n        this.updateState(this.latestChildState, this.latestChildPicker);\n      }\n    }, backoffOptions);\n    this.backoffTimeout.unref();\n  }\n  updateResolution() {\n    this.innerResolver.updateResolution();\n    if (this.currentState === connectivity_state_1.ConnectivityState.IDLE) {\n      this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n    }\n    this.backoffTimeout.runOnce();\n  }\n  updateState(connectivityState, picker) {\n    trace((0, uri_parser_1.uriToString)(this.target) + ' ' + connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[connectivityState]);\n    // Ensure that this.exitIdle() is called by the picker\n    if (connectivityState === connectivity_state_1.ConnectivityState.IDLE) {\n      picker = new picker_1.QueuePicker(this);\n    }\n    this.currentState = connectivityState;\n    this.channelControlHelper.updateState(connectivityState, picker);\n  }\n  handleResolutionFailure(error) {\n    if (this.latestChildState === connectivity_state_1.ConnectivityState.IDLE) {\n      this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error));\n      this.onFailedResolution(error);\n    }\n  }\n  exitIdle() {\n    if (this.currentState === connectivity_state_1.ConnectivityState.IDLE || this.currentState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n      if (this.backoffTimeout.isRunning()) {\n        this.continueResolving = true;\n      } else {\n        this.updateResolution();\n      }\n    }\n    this.childLoadBalancer.exitIdle();\n  }\n  updateAddressList(addressList, lbConfig) {\n    throw new Error('updateAddressList not supported on ResolvingLoadBalancer');\n  }\n  resetBackoff() {\n    this.backoffTimeout.reset();\n    this.childLoadBalancer.resetBackoff();\n  }\n  destroy() {\n    this.childLoadBalancer.destroy();\n    this.innerResolver.destroy();\n    this.backoffTimeout.reset();\n    this.backoffTimeout.stop();\n    this.latestChildState = connectivity_state_1.ConnectivityState.IDLE;\n    this.latestChildPicker = new picker_1.QueuePicker(this);\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    this.previousServiceConfig = null;\n    this.continueResolving = false;\n  }\n  getTypeName() {\n    return 'resolving_load_balancer';\n  }\n}\nexports.ResolvingLoadBalancer = ResolvingLoadBalancer;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.channelOptionsEqual = exports.recognizedOptions = void 0;\n/**\n * This is for checking provided options at runtime. This is an object for\n * easier membership checking.\n */\nexports.recognizedOptions = {\n  'grpc.ssl_target_name_override': true,\n  'grpc.primary_user_agent': true,\n  'grpc.secondary_user_agent': true,\n  'grpc.default_authority': true,\n  'grpc.keepalive_time_ms': true,\n  'grpc.keepalive_timeout_ms': true,\n  'grpc.keepalive_permit_without_calls': true,\n  'grpc.service_config': true,\n  'grpc.max_concurrent_streams': true,\n  'grpc.initial_reconnect_backoff_ms': true,\n  'grpc.max_reconnect_backoff_ms': true,\n  'grpc.use_local_subchannel_pool': true,\n  'grpc.max_send_message_length': true,\n  'grpc.max_receive_message_length': true,\n  'grpc.enable_http_proxy': true,\n  'grpc.enable_channelz': true,\n  'grpc.dns_min_time_between_resolutions_ms': true,\n  'grpc.enable_retries': true,\n  'grpc.per_rpc_retry_buffer_size': true,\n  'grpc.retry_buffer_size': true,\n  'grpc.max_connection_age_ms': true,\n  'grpc.max_connection_age_grace_ms': true,\n  'grpc-node.max_session_memory': true,\n  'grpc.service_config_disable_resolution': true,\n  'grpc.client_idle_timeout_ms': true,\n  'grpc-node.tls_enable_trace': true\n};\nfunction channelOptionsEqual(options1, options2) {\n  const keys1 = Object.keys(options1).sort();\n  const keys2 = Object.keys(options2).sort();\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (let i = 0; i < keys1.length; i += 1) {\n    if (keys1[i] !== keys2[i]) {\n      return false;\n    }\n    if (options1[keys1[i]] !== options2[keys2[i]]) {\n      return false;\n    }\n  }\n  return true;\n}\nexports.channelOptionsEqual = channelOptionsEqual;\n", "\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.stringToSubchannelAddress = exports.subchannelAddressToString = exports.subchannelAddressEqual = exports.isTcpSubchannelAddress = void 0;\nconst net_1 = require(\"net\");\nfunction isTcpSubchannelAddress(address) {\n  return 'port' in address;\n}\nexports.isTcpSubchannelAddress = isTcpSubchannelAddress;\nfunction subchannelAddressEqual(address1, address2) {\n  if (!address1 && !address2) {\n    return true;\n  }\n  if (!address1 || !address2) {\n    return false;\n  }\n  if (isTcpSubchannelAddress(address1)) {\n    return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;\n  } else {\n    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;\n  }\n}\nexports.subchannelAddressEqual = subchannelAddressEqual;\nfunction subchannelAddressToString(address) {\n  if (isTcpSubchannelAddress(address)) {\n    return address.host + ':' + address.port;\n  } else {\n    return address.path;\n  }\n}\nexports.subchannelAddressToString = subchannelAddressToString;\nconst DEFAULT_PORT = 443;\nfunction stringToSubchannelAddress(addressString, port) {\n  if ((0, net_1.isIP)(addressString)) {\n    return {\n      host: addressString,\n      port: port !== null && port !== void 0 ? port : DEFAULT_PORT\n    };\n  } else {\n    return {\n      path: addressString\n    };\n  }\n}\nexports.stringToSubchannelAddress = stringToSubchannelAddress;\n", "\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addAdminServicesToServer = exports.registerAdminService = void 0;\nconst registeredAdminServices = [];\nfunction registerAdminService(getServiceDefinition, getHandlers) {\n  registeredAdminServices.push({\n    getServiceDefinition,\n    getHandlers\n  });\n}\nexports.registerAdminService = registerAdminService;\nfunction addAdminServicesToServer(server) {\n  for (const {\n    getServiceDefinition,\n    getHandlers\n  } of registeredAdminServices) {\n    server.addService(getServiceDefinition(), getHandlers());\n  }\n}\nexports.addAdminServicesToServer = addAdminServicesToServer;\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply(target, receiver, args) {\n  return Function.prototype.apply.call(target, receiver, args);\n};\nvar ReflectOwnKeys;\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n};\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function () {\n    return defaultMaxListeners;\n  },\n  set: function (arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\nEventEmitter.init = function () {\n  if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = type === 'error';\n  var events = this._events;\n  if (events !== undefined) doError = doError && events.error === undefined;else if (!doError) return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0) er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n  var handler = events[type];\n  if (handler === undefined) return false;\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i) ReflectApply(listeners[i], this, args);\n  }\n  return true;\n};\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n  checkListener(listener);\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type, listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n  return target;\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.prependListener = function prependListener(type, listener) {\n  return _addListener(this, type, listener, true);\n};\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0) return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\nfunction _onceWrap(target, type, listener) {\n  var state = {\n    fired: false,\n    wrapFn: undefined,\n    target: target,\n    type: type,\n    listener: listener\n  };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n  checkListener(listener);\n  this.prependListener(type, _onceWrap(this, type, listener));\n  return this;\n};\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener = function removeListener(type, listener) {\n  var list, events, position, i, originalListener;\n  checkListener(listener);\n  events = this._events;\n  if (events === undefined) return this;\n  list = events[type];\n  if (list === undefined) return this;\n  if (list === listener || list.listener === listener) {\n    if (--this._eventsCount === 0) this._events = Object.create(null);else {\n      delete events[type];\n      if (events.removeListener) this.emit('removeListener', type, list.listener || listener);\n    }\n  } else if (typeof list !== 'function') {\n    position = -1;\n    for (i = list.length - 1; i >= 0; i--) {\n      if (list[i] === listener || list[i].listener === listener) {\n        originalListener = list[i].listener;\n        position = i;\n        break;\n      }\n    }\n    if (position < 0) return this;\n    if (position === 0) list.shift();else {\n      spliceOne(list, position);\n    }\n    if (list.length === 1) events[type] = list[0];\n    if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);\n  }\n  return this;\n};\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n  var listeners, events, i;\n  events = this._events;\n  if (events === undefined) return this;\n\n  // not listening for removeListener, no need to emit\n  if (events.removeListener === undefined) {\n    if (arguments.length === 0) {\n      this._events = Object.create(null);\n      this._eventsCount = 0;\n    } else if (events[type] !== undefined) {\n      if (--this._eventsCount === 0) this._events = Object.create(null);else delete events[type];\n    }\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    var keys = Object.keys(events);\n    var key;\n    for (i = 0; i < keys.length; ++i) {\n      key = keys[i];\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n    return this;\n  }\n  listeners = events[type];\n  if (typeof listeners === 'function') {\n    this.removeListener(type, listeners);\n  } else if (listeners !== undefined) {\n    // LIFO order\n    for (i = listeners.length - 1; i >= 0; i--) {\n      this.removeListener(type, listeners[i]);\n    }\n  }\n  return this;\n};\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n  if (events === undefined) return [];\n  var evlistener = events[type];\n  if (evlistener === undefined) return [];\n  if (typeof evlistener === 'function') return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n  return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\nEventEmitter.listenerCount = function (emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n  if (events !== undefined) {\n    var evlistener = events[type];\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n  return 0;\n}\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i) copy[i] = arr[i];\n  return copy;\n}\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++) list[index] = list[index + 1];\n  list.pop();\n}\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    }\n    ;\n    eventTargetAgnosticAddListener(emitter, name, resolver, {\n      once: true\n    });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, {\n        once: true\n      });\n    }\n  });\n}\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClientDuplexStreamImpl = exports.ClientWritableStreamImpl = exports.ClientReadableStreamImpl = exports.ClientUnaryCallImpl = exports.callErrorFromStatus = void 0;\nconst events_1 = require(\"events\");\nconst stream_1 = require(\"stream\");\nconst constants_1 = require(\"./constants\");\n/**\n * Construct a ServiceError from a StatusObject. This function exists primarily\n * as an attempt to make the error stack trace clearly communicate that the\n * error is not necessarily a problem in gRPC itself.\n * @param status\n */\nfunction callErrorFromStatus(status, callerStack) {\n  const message = `${status.code} ${constants_1.Status[status.code]}: ${status.details}`;\n  const error = new Error(message);\n  const stack = `${error.stack}\\nfor call at\\n${callerStack}`;\n  return Object.assign(new Error(message), status, {\n    stack\n  });\n}\nexports.callErrorFromStatus = callErrorFromStatus;\nclass ClientUnaryCallImpl extends events_1.EventEmitter {\n  constructor() {\n    super();\n  }\n  cancel() {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n}\nexports.ClientUnaryCallImpl = ClientUnaryCallImpl;\nclass ClientReadableStreamImpl extends stream_1.Readable {\n  constructor(deserialize) {\n    super({\n      objectMode: true\n    });\n    this.deserialize = deserialize;\n  }\n  cancel() {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n  _read(_size) {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n  }\n}\nexports.ClientReadableStreamImpl = ClientReadableStreamImpl;\nclass ClientWritableStreamImpl extends stream_1.Writable {\n  constructor(serialize) {\n    super({\n      objectMode: true\n    });\n    this.serialize = serialize;\n  }\n  cancel() {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n  _write(chunk, encoding, cb) {\n    var _a;\n    const context = {\n      callback: cb\n    };\n    const flags = Number(encoding);\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n  }\n  _final(cb) {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n    cb();\n  }\n}\nexports.ClientWritableStreamImpl = ClientWritableStreamImpl;\nclass ClientDuplexStreamImpl extends stream_1.Duplex {\n  constructor(serialize, deserialize) {\n    super({\n      objectMode: true\n    });\n    this.serialize = serialize;\n    this.deserialize = deserialize;\n  }\n  cancel() {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled on client');\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : 'unknown';\n  }\n  _read(_size) {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();\n  }\n  _write(chunk, encoding, cb) {\n    var _a;\n    const context = {\n      callback: cb\n    };\n    const flags = Number(encoding);\n    if (!Number.isNaN(flags)) {\n      context.flags = flags;\n    }\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);\n  }\n  _final(cb) {\n    var _a;\n    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();\n    cb();\n  }\n}\nexports.ClientDuplexStreamImpl = ClientDuplexStreamImpl;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InterceptingListenerImpl = exports.isInterceptingListener = void 0;\nfunction isInterceptingListener(listener) {\n  return listener.onReceiveMetadata !== undefined && listener.onReceiveMetadata.length === 1;\n}\nexports.isInterceptingListener = isInterceptingListener;\nclass InterceptingListenerImpl {\n  constructor(listener, nextListener) {\n    this.listener = listener;\n    this.nextListener = nextListener;\n    this.processingMetadata = false;\n    this.hasPendingMessage = false;\n    this.processingMessage = false;\n    this.pendingStatus = null;\n  }\n  processPendingMessage() {\n    if (this.hasPendingMessage) {\n      this.nextListener.onReceiveMessage(this.pendingMessage);\n      this.pendingMessage = null;\n      this.hasPendingMessage = false;\n    }\n  }\n  processPendingStatus() {\n    if (this.pendingStatus) {\n      this.nextListener.onReceiveStatus(this.pendingStatus);\n    }\n  }\n  onReceiveMetadata(metadata) {\n    this.processingMetadata = true;\n    this.listener.onReceiveMetadata(metadata, metadata => {\n      this.processingMetadata = false;\n      this.nextListener.onReceiveMetadata(metadata);\n      this.processPendingMessage();\n      this.processPendingStatus();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  onReceiveMessage(message) {\n    /* If this listener processes messages asynchronously, the last message may\n     * be reordered with respect to the status */\n    this.processingMessage = true;\n    this.listener.onReceiveMessage(message, msg => {\n      this.processingMessage = false;\n      if (this.processingMetadata) {\n        this.pendingMessage = msg;\n        this.hasPendingMessage = true;\n      } else {\n        this.nextListener.onReceiveMessage(msg);\n        this.processPendingStatus();\n      }\n    });\n  }\n  onReceiveStatus(status) {\n    this.listener.onReceiveStatus(status, processedStatus => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingStatus = processedStatus;\n      } else {\n        this.nextListener.onReceiveStatus(processedStatus);\n      }\n    });\n  }\n}\nexports.InterceptingListenerImpl = InterceptingListenerImpl;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getInterceptingCall = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.InterceptorConfigurationError = void 0;\nconst metadata_1 = require(\"./metadata\");\nconst call_interface_1 = require(\"./call-interface\");\nconst constants_1 = require(\"./constants\");\nconst error_1 = require(\"./error\");\n/**\n * Error class associated with passing both interceptors and interceptor\n * providers to a client constructor or as call options.\n */\nclass InterceptorConfigurationError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'InterceptorConfigurationError';\n    Error.captureStackTrace(this, InterceptorConfigurationError);\n  }\n}\nexports.InterceptorConfigurationError = InterceptorConfigurationError;\nclass ListenerBuilder {\n  constructor() {\n    this.metadata = undefined;\n    this.message = undefined;\n    this.status = undefined;\n  }\n  withOnReceiveMetadata(onReceiveMetadata) {\n    this.metadata = onReceiveMetadata;\n    return this;\n  }\n  withOnReceiveMessage(onReceiveMessage) {\n    this.message = onReceiveMessage;\n    return this;\n  }\n  withOnReceiveStatus(onReceiveStatus) {\n    this.status = onReceiveStatus;\n    return this;\n  }\n  build() {\n    return {\n      onReceiveMetadata: this.metadata,\n      onReceiveMessage: this.message,\n      onReceiveStatus: this.status\n    };\n  }\n}\nexports.ListenerBuilder = ListenerBuilder;\nclass RequesterBuilder {\n  constructor() {\n    this.start = undefined;\n    this.message = undefined;\n    this.halfClose = undefined;\n    this.cancel = undefined;\n  }\n  withStart(start) {\n    this.start = start;\n    return this;\n  }\n  withSendMessage(sendMessage) {\n    this.message = sendMessage;\n    return this;\n  }\n  withHalfClose(halfClose) {\n    this.halfClose = halfClose;\n    return this;\n  }\n  withCancel(cancel) {\n    this.cancel = cancel;\n    return this;\n  }\n  build() {\n    return {\n      start: this.start,\n      sendMessage: this.message,\n      halfClose: this.halfClose,\n      cancel: this.cancel\n    };\n  }\n}\nexports.RequesterBuilder = RequesterBuilder;\n/**\n * A Listener with a default pass-through implementation of each method. Used\n * for filling out Listeners with some methods omitted.\n */\nconst defaultListener = {\n  onReceiveMetadata: (metadata, next) => {\n    next(metadata);\n  },\n  onReceiveMessage: (message, next) => {\n    next(message);\n  },\n  onReceiveStatus: (status, next) => {\n    next(status);\n  }\n};\n/**\n * A Requester with a default pass-through implementation of each method. Used\n * for filling out Requesters with some methods omitted.\n */\nconst defaultRequester = {\n  start: (metadata, listener, next) => {\n    next(metadata, listener);\n  },\n  sendMessage: (message, next) => {\n    next(message);\n  },\n  halfClose: next => {\n    next();\n  },\n  cancel: next => {\n    next();\n  }\n};\nclass InterceptingCall {\n  constructor(nextCall, requester) {\n    var _a, _b, _c, _d;\n    this.nextCall = nextCall;\n    /**\n     * Indicates that metadata has been passed to the requester's start\n     * method but it has not been passed to the corresponding next callback\n     */\n    this.processingMetadata = false;\n    /**\n     * Message context for a pending message that is waiting for\n     */\n    this.pendingMessageContext = null;\n    /**\n     * Indicates that a message has been passed to the requester's sendMessage\n     * method but it has not been passed to the corresponding next callback\n     */\n    this.processingMessage = false;\n    /**\n     * Indicates that a status was received but could not be propagated because\n     * a message was still being processed.\n     */\n    this.pendingHalfClose = false;\n    if (requester) {\n      this.requester = {\n        start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,\n        sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,\n        halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,\n        cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel\n      };\n    } else {\n      this.requester = defaultRequester;\n    }\n  }\n  cancelWithStatus(status, details) {\n    this.requester.cancel(() => {\n      this.nextCall.cancelWithStatus(status, details);\n    });\n  }\n  getPeer() {\n    return this.nextCall.getPeer();\n  }\n  processPendingMessage() {\n    if (this.pendingMessageContext) {\n      this.nextCall.sendMessageWithContext(this.pendingMessageContext, this.pendingMessage);\n      this.pendingMessageContext = null;\n      this.pendingMessage = null;\n    }\n  }\n  processPendingHalfClose() {\n    if (this.pendingHalfClose) {\n      this.nextCall.halfClose();\n    }\n  }\n  start(metadata, interceptingListener) {\n    var _a, _b, _c, _d, _e, _f;\n    const fullInterceptingListener = {\n      onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : metadata => {},\n      onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : message => {},\n      onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : status => {}\n    };\n    this.processingMetadata = true;\n    this.requester.start(metadata, fullInterceptingListener, (md, listener) => {\n      var _a, _b, _c;\n      this.processingMetadata = false;\n      let finalInterceptingListener;\n      if ((0, call_interface_1.isInterceptingListener)(listener)) {\n        finalInterceptingListener = listener;\n      } else {\n        const fullListener = {\n          onReceiveMetadata: (_a = listener.onReceiveMetadata) !== null && _a !== void 0 ? _a : defaultListener.onReceiveMetadata,\n          onReceiveMessage: (_b = listener.onReceiveMessage) !== null && _b !== void 0 ? _b : defaultListener.onReceiveMessage,\n          onReceiveStatus: (_c = listener.onReceiveStatus) !== null && _c !== void 0 ? _c : defaultListener.onReceiveStatus\n        };\n        finalInterceptingListener = new call_interface_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);\n      }\n      this.nextCall.start(md, finalInterceptingListener);\n      this.processPendingMessage();\n      this.processPendingHalfClose();\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  sendMessageWithContext(context, message) {\n    this.processingMessage = true;\n    this.requester.sendMessage(message, finalMessage => {\n      this.processingMessage = false;\n      if (this.processingMetadata) {\n        this.pendingMessageContext = context;\n        this.pendingMessage = message;\n      } else {\n        this.nextCall.sendMessageWithContext(context, finalMessage);\n        this.processPendingHalfClose();\n      }\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  sendMessage(message) {\n    this.sendMessageWithContext({}, message);\n  }\n  startRead() {\n    this.nextCall.startRead();\n  }\n  halfClose() {\n    this.requester.halfClose(() => {\n      if (this.processingMetadata || this.processingMessage) {\n        this.pendingHalfClose = true;\n      } else {\n        this.nextCall.halfClose();\n      }\n    });\n  }\n}\nexports.InterceptingCall = InterceptingCall;\nfunction getCall(channel, path, options) {\n  var _a, _b;\n  const deadline = (_a = options.deadline) !== null && _a !== void 0 ? _a : Infinity;\n  const host = options.host;\n  const parent = (_b = options.parent) !== null && _b !== void 0 ? _b : null;\n  const propagateFlags = options.propagate_flags;\n  const credentials = options.credentials;\n  const call = channel.createCall(path, deadline, host, parent, propagateFlags);\n  if (credentials) {\n    call.setCredentials(credentials);\n  }\n  return call;\n}\n/**\n * InterceptingCall implementation that directly owns the underlying Call\n * object and handles serialization and deseraizliation.\n */\nclass BaseInterceptingCall {\n  constructor(call,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  methodDefinition) {\n    this.call = call;\n    this.methodDefinition = methodDefinition;\n  }\n  cancelWithStatus(status, details) {\n    this.call.cancelWithStatus(status, details);\n  }\n  getPeer() {\n    return this.call.getPeer();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  sendMessageWithContext(context, message) {\n    let serialized;\n    try {\n      serialized = this.methodDefinition.requestSerialize(message);\n    } catch (e) {\n      this.call.cancelWithStatus(constants_1.Status.INTERNAL, `Request message serialization failure: ${(0, error_1.getErrorMessage)(e)}`);\n      return;\n    }\n    this.call.sendMessageWithContext(context, serialized);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  sendMessage(message) {\n    this.sendMessageWithContext({}, message);\n  }\n  start(metadata, interceptingListener) {\n    let readError = null;\n    this.call.start(metadata, {\n      onReceiveMetadata: metadata => {\n        var _a;\n        (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata);\n      },\n      onReceiveMessage: message => {\n        var _a;\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let deserialized;\n        try {\n          deserialized = this.methodDefinition.responseDeserialize(message);\n        } catch (e) {\n          readError = {\n            code: constants_1.Status.INTERNAL,\n            details: `Response message parsing error: ${(0, error_1.getErrorMessage)(e)}`,\n            metadata: new metadata_1.Metadata()\n          };\n          this.call.cancelWithStatus(readError.code, readError.details);\n          return;\n        }\n        (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);\n      },\n      onReceiveStatus: status => {\n        var _a, _b;\n        if (readError) {\n          (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);\n        } else {\n          (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);\n        }\n      }\n    });\n  }\n  startRead() {\n    this.call.startRead();\n  }\n  halfClose() {\n    this.call.halfClose();\n  }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with unary\n * responses.\n */\nclass BaseUnaryInterceptingCall extends BaseInterceptingCall {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(call, methodDefinition) {\n    super(call, methodDefinition);\n  }\n  start(metadata, listener) {\n    var _a, _b;\n    let receivedMessage = false;\n    const wrapperListener = {\n      onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : metadata => {},\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage: message => {\n        var _a;\n        receivedMessage = true;\n        (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, message);\n      },\n      onReceiveStatus: status => {\n        var _a, _b;\n        if (!receivedMessage) {\n          (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(listener, null);\n        }\n        (_b = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(listener, status);\n      }\n    };\n    super.start(metadata, wrapperListener);\n    this.call.startRead();\n  }\n}\n/**\n * BaseInterceptingCall with special-cased behavior for methods with streaming\n * responses.\n */\nclass BaseStreamingInterceptingCall extends BaseInterceptingCall {}\nfunction getBottomInterceptingCall(channel, options,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition) {\n  const call = getCall(channel, methodDefinition.path, options);\n  if (methodDefinition.responseStream) {\n    return new BaseStreamingInterceptingCall(call, methodDefinition);\n  } else {\n    return new BaseUnaryInterceptingCall(call, methodDefinition);\n  }\n}\nfunction getInterceptingCall(interceptorArgs,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nmethodDefinition, options, channel) {\n  if (interceptorArgs.clientInterceptors.length > 0 && interceptorArgs.clientInterceptorProviders.length > 0) {\n    throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as options ' + 'to the client constructor. Only one of these is allowed.');\n  }\n  if (interceptorArgs.callInterceptors.length > 0 && interceptorArgs.callInterceptorProviders.length > 0) {\n    throw new InterceptorConfigurationError('Both interceptors and interceptor_providers were passed as call ' + 'options. Only one of these is allowed.');\n  }\n  let interceptors = [];\n  // Interceptors passed to the call override interceptors passed to the client constructor\n  if (interceptorArgs.callInterceptors.length > 0 || interceptorArgs.callInterceptorProviders.length > 0) {\n    interceptors = [].concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map(provider => provider(methodDefinition))).filter(interceptor => interceptor);\n    // Filter out falsy values when providers return nothing\n  } else {\n    interceptors = [].concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map(provider => provider(methodDefinition))).filter(interceptor => interceptor);\n    // Filter out falsy values when providers return nothing\n  }\n  const interceptorOptions = Object.assign({}, options, {\n    method_definition: methodDefinition\n  });\n  /* For each interceptor in the list, the nextCall function passed to it is\n   * based on the next interceptor in the list, using a nextCall function\n   * constructed with the following interceptor in the list, and so on. The\n   * initialValue, which is effectively at the end of the list, is a nextCall\n   * function that invokes getBottomInterceptingCall, the result of which\n   * handles (de)serialization and also gets the underlying call from the\n   * channel. */\n  const getCall = interceptors.reduceRight((nextCall, nextInterceptor) => {\n    return currentOptions => nextInterceptor(currentOptions, nextCall);\n  }, finalOptions => getBottomInterceptingCall(channel, finalOptions, methodDefinition));\n  return getCall(interceptorOptions);\n}\nexports.getInterceptingCall = getInterceptingCall;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\nconst call_1 = require(\"./call\");\nconst channel_1 = require(\"./channel\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst client_interceptors_1 = require(\"./client-interceptors\");\nconst CHANNEL_SYMBOL = Symbol();\nconst INTERCEPTOR_SYMBOL = Symbol();\nconst INTERCEPTOR_PROVIDER_SYMBOL = Symbol();\nconst CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nfunction getErrorStackString(error) {\n  return error.stack.split('\\n').slice(1).join('\\n');\n}\n/**\n * A generic gRPC client. Primarily useful as a base class for all generated\n * clients.\n */\nclass Client {\n  constructor(address, credentials, options = {}) {\n    var _a, _b;\n    options = Object.assign({}, options);\n    this[INTERCEPTOR_SYMBOL] = (_a = options.interceptors) !== null && _a !== void 0 ? _a : [];\n    delete options.interceptors;\n    this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options.interceptor_providers) !== null && _b !== void 0 ? _b : [];\n    delete options.interceptor_providers;\n    if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {\n      throw new Error('Both interceptors and interceptor_providers were passed as options ' + 'to the client constructor. Only one of these is allowed.');\n    }\n    this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options.callInvocationTransformer;\n    delete options.callInvocationTransformer;\n    if (options.channelOverride) {\n      this[CHANNEL_SYMBOL] = options.channelOverride;\n    } else if (options.channelFactoryOverride) {\n      const channelFactoryOverride = options.channelFactoryOverride;\n      delete options.channelFactoryOverride;\n      this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options);\n    } else {\n      this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options);\n    }\n  }\n  close() {\n    this[CHANNEL_SYMBOL].close();\n  }\n  getChannel() {\n    return this[CHANNEL_SYMBOL];\n  }\n  waitForReady(deadline, callback) {\n    const checkState = err => {\n      if (err) {\n        callback(new Error('Failed to connect before the deadline'));\n        return;\n      }\n      let newState;\n      try {\n        newState = this[CHANNEL_SYMBOL].getConnectivityState(true);\n      } catch (e) {\n        callback(new Error('The channel has been closed'));\n        return;\n      }\n      if (newState === connectivity_state_1.ConnectivityState.READY) {\n        callback();\n      } else {\n        try {\n          this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);\n        } catch (e) {\n          callback(new Error('The channel has been closed'));\n        }\n      }\n    };\n    setImmediate(checkState);\n  }\n  checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {\n    if (isFunction(arg1)) {\n      return {\n        metadata: new metadata_1.Metadata(),\n        options: {},\n        callback: arg1\n      };\n    } else if (isFunction(arg2)) {\n      if (arg1 instanceof metadata_1.Metadata) {\n        return {\n          metadata: arg1,\n          options: {},\n          callback: arg2\n        };\n      } else {\n        return {\n          metadata: new metadata_1.Metadata(),\n          options: arg1,\n          callback: arg2\n        };\n      }\n    } else {\n      if (!(arg1 instanceof metadata_1.Metadata && arg2 instanceof Object && isFunction(arg3))) {\n        throw new Error('Incorrect arguments passed');\n      }\n      return {\n        metadata: arg1,\n        options: arg2,\n        callback: arg3\n      };\n    }\n  }\n  makeUnaryRequest(method, serialize, deserialize, argument, metadata, options, callback) {\n    var _a, _b;\n    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n    const methodDefinition = {\n      path: method,\n      requestStream: false,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientUnaryCallImpl(),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const emitter = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    let responseMessage = null;\n    let receivedStatus = false;\n    let callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: metadata => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === constants_1.Status.OK) {\n          if (responseMessage === null) {\n            const callerStack = getErrorStackString(callerStackError);\n            callProperties.callback((0, call_1.callErrorFromStatus)({\n              code: constants_1.Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }, callerStack));\n          } else {\n            callProperties.callback(null, responseMessage);\n          }\n        } else {\n          const callerStack = getErrorStackString(callerStackError);\n          callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        /* Avoid retaining the callerStackError object in the call context of\n         * the status event handler. */\n        callerStackError = null;\n        emitter.emit('status', status);\n      }\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return emitter;\n  }\n  makeClientStreamRequest(method, serialize, deserialize, metadata, options, callback) {\n    var _a, _b;\n    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata, options, callback);\n    const methodDefinition = {\n      path: method,\n      requestStream: true,\n      responseStream: false,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientWritableStreamImpl(serialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options,\n      callback: checkedArguments.callback\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const emitter = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    emitter.call = call;\n    let responseMessage = null;\n    let receivedStatus = false;\n    let callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata: metadata => {\n        emitter.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        if (responseMessage !== null) {\n          call.cancelWithStatus(constants_1.Status.INTERNAL, 'Too many responses received');\n        }\n        responseMessage = message;\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        if (status.code === constants_1.Status.OK) {\n          if (responseMessage === null) {\n            const callerStack = getErrorStackString(callerStackError);\n            callProperties.callback((0, call_1.callErrorFromStatus)({\n              code: constants_1.Status.INTERNAL,\n              details: 'No message received',\n              metadata: status.metadata\n            }, callerStack));\n          } else {\n            callProperties.callback(null, responseMessage);\n          }\n        } else {\n          const callerStack = getErrorStackString(callerStackError);\n          callProperties.callback((0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        /* Avoid retaining the callerStackError object in the call context of\n         * the status event handler. */\n        callerStackError = null;\n        emitter.emit('status', status);\n      }\n    });\n    return emitter;\n  }\n  checkMetadataAndOptions(arg1, arg2) {\n    let metadata;\n    let options;\n    if (arg1 instanceof metadata_1.Metadata) {\n      metadata = arg1;\n      if (arg2) {\n        options = arg2;\n      } else {\n        options = {};\n      }\n    } else {\n      if (arg1) {\n        options = arg1;\n      } else {\n        options = {};\n      }\n      metadata = new metadata_1.Metadata();\n    }\n    return {\n      metadata,\n      options\n    };\n  }\n  makeServerStreamRequest(method, serialize, deserialize, argument, metadata, options) {\n    var _a, _b;\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition = {\n      path: method,\n      requestStream: false,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      argument: argument,\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientReadableStreamImpl(deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const stream = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    let receivedStatus = false;\n    let callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata) {\n        stream.emit('metadata', metadata);\n      },\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      onReceiveMessage(message) {\n        stream.push(message);\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== constants_1.Status.OK) {\n          const callerStack = getErrorStackString(callerStackError);\n          stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        /* Avoid retaining the callerStackError object in the call context of\n         * the status event handler. */\n        callerStackError = null;\n        stream.emit('status', status);\n      }\n    });\n    call.sendMessage(argument);\n    call.halfClose();\n    return stream;\n  }\n  makeBidiStreamRequest(method, serialize, deserialize, metadata, options) {\n    var _a, _b;\n    const checkedArguments = this.checkMetadataAndOptions(metadata, options);\n    const methodDefinition = {\n      path: method,\n      requestStream: true,\n      responseStream: true,\n      requestSerialize: serialize,\n      responseDeserialize: deserialize\n    };\n    let callProperties = {\n      metadata: checkedArguments.metadata,\n      call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),\n      channel: this[CHANNEL_SYMBOL],\n      methodDefinition: methodDefinition,\n      callOptions: checkedArguments.options\n    };\n    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {\n      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);\n    }\n    const stream = callProperties.call;\n    const interceptorArgs = {\n      clientInterceptors: this[INTERCEPTOR_SYMBOL],\n      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],\n      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],\n      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []\n    };\n    const call = (0, client_interceptors_1.getInterceptingCall)(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);\n    /* This needs to happen before the emitter is used. Unfortunately we can't\n     * enforce this with the type system. We need to construct this emitter\n     * before calling the CallInvocationTransformer, and we need to create the\n     * call after that. */\n    stream.call = call;\n    let receivedStatus = false;\n    let callerStackError = new Error();\n    call.start(callProperties.metadata, {\n      onReceiveMetadata(metadata) {\n        stream.emit('metadata', metadata);\n      },\n      onReceiveMessage(message) {\n        stream.push(message);\n      },\n      onReceiveStatus(status) {\n        if (receivedStatus) {\n          return;\n        }\n        receivedStatus = true;\n        stream.push(null);\n        if (status.code !== constants_1.Status.OK) {\n          const callerStack = getErrorStackString(callerStackError);\n          stream.emit('error', (0, call_1.callErrorFromStatus)(status, callerStack));\n        }\n        /* Avoid retaining the callerStackError object in the call context of\n         * the status event handler. */\n        callerStackError = null;\n        stream.emit('status', status);\n      }\n    });\n    return stream;\n  }\n}\nexports.Client = Client;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadPackageDefinition = exports.makeClientConstructor = void 0;\nconst client_1 = require(\"./client\");\n/**\n * Map with short names for each of the requester maker functions. Used in\n * makeClientConstructor\n * @private\n */\nconst requesterFuncs = {\n  unary: client_1.Client.prototype.makeUnaryRequest,\n  server_stream: client_1.Client.prototype.makeServerStreamRequest,\n  client_stream: client_1.Client.prototype.makeClientStreamRequest,\n  bidi: client_1.Client.prototype.makeBidiStreamRequest\n};\n/**\n * Returns true, if given key is included in the blacklisted\n * keys.\n * @param key key for check, string.\n */\nfunction isPrototypePolluted(key) {\n  return ['__proto__', 'prototype', 'constructor'].includes(key);\n}\n/**\n * Creates a constructor for a client with the given methods, as specified in\n * the methods argument. The resulting class will have an instance method for\n * each method in the service, which is a partial application of one of the\n * [Client]{@link grpc.Client} request methods, depending on `requestSerialize`\n * and `responseSerialize`, with the `method`, `serialize`, and `deserialize`\n * arguments predefined.\n * @param methods An object mapping method names to\n *     method attributes\n * @param serviceName The fully qualified name of the service\n * @param classOptions An options object.\n * @return New client constructor, which is a subclass of\n *     {@link grpc.Client}, and has the same arguments as that constructor.\n */\nfunction makeClientConstructor(methods, serviceName, classOptions) {\n  if (!classOptions) {\n    classOptions = {};\n  }\n  class ServiceClientImpl extends client_1.Client {}\n  Object.keys(methods).forEach(name => {\n    if (isPrototypePolluted(name)) {\n      return;\n    }\n    const attrs = methods[name];\n    let methodType;\n    // TODO(murgatroid99): Verify that we don't need this anymore\n    if (typeof name === 'string' && name.charAt(0) === '$') {\n      throw new Error('Method names cannot start with $');\n    }\n    if (attrs.requestStream) {\n      if (attrs.responseStream) {\n        methodType = 'bidi';\n      } else {\n        methodType = 'client_stream';\n      }\n    } else {\n      if (attrs.responseStream) {\n        methodType = 'server_stream';\n      } else {\n        methodType = 'unary';\n      }\n    }\n    const serialize = attrs.requestSerialize;\n    const deserialize = attrs.responseDeserialize;\n    const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);\n    ServiceClientImpl.prototype[name] = methodFunc;\n    // Associate all provided attributes with the method\n    Object.assign(ServiceClientImpl.prototype[name], attrs);\n    if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {\n      ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name];\n    }\n  });\n  ServiceClientImpl.service = methods;\n  ServiceClientImpl.serviceName = serviceName;\n  return ServiceClientImpl;\n}\nexports.makeClientConstructor = makeClientConstructor;\nfunction partial(fn, path, serialize, deserialize) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return function (...args) {\n    return fn.call(this, path, serialize, deserialize, ...args);\n  };\n}\nfunction isProtobufTypeDefinition(obj) {\n  return 'format' in obj;\n}\n/**\n * Load a gRPC package definition as a gRPC object hierarchy.\n * @param packageDef The package definition object.\n * @return The resulting gRPC object.\n */\nfunction loadPackageDefinition(packageDef) {\n  const result = {};\n  for (const serviceFqn in packageDef) {\n    if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {\n      const service = packageDef[serviceFqn];\n      const nameComponents = serviceFqn.split('.');\n      if (nameComponents.some(comp => isPrototypePolluted(comp))) {\n        continue;\n      }\n      const serviceName = nameComponents[nameComponents.length - 1];\n      let current = result;\n      for (const packageName of nameComponents.slice(0, -1)) {\n        if (!current[packageName]) {\n          current[packageName] = {};\n        }\n        current = current[packageName];\n      }\n      if (isProtobufTypeDefinition(service)) {\n        current[serviceName] = service;\n      } else {\n        current[serviceName] = makeClientConstructor(service, serviceName, {});\n      }\n    }\n  }\n  return result;\n}\nexports.loadPackageDefinition = loadPackageDefinition;\n", "/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match words composed of alphanumeric characters. */\nvar reAsciiWord = /[^\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\x7f]+/g;\n\n/** Used to match Latin Unicode letters (excluding mathematical operators). */\nvar reLatin = /[\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\xff\\u0100-\\u017f]/g;\n\n/** Used to compose unicode character classes. */\nvar rsAstralRange = '\\\\ud800-\\\\udfff',\n  rsComboMarksRange = '\\\\u0300-\\\\u036f\\\\ufe20-\\\\ufe23',\n  rsComboSymbolsRange = '\\\\u20d0-\\\\u20f0',\n  rsDingbatRange = '\\\\u2700-\\\\u27bf',\n  rsLowerRange = 'a-z\\\\xdf-\\\\xf6\\\\xf8-\\\\xff',\n  rsMathOpRange = '\\\\xac\\\\xb1\\\\xd7\\\\xf7',\n  rsNonCharRange = '\\\\x00-\\\\x2f\\\\x3a-\\\\x40\\\\x5b-\\\\x60\\\\x7b-\\\\xbf',\n  rsPunctuationRange = '\\\\u2000-\\\\u206f',\n  rsSpaceRange = ' \\\\t\\\\x0b\\\\f\\\\xa0\\\\ufeff\\\\n\\\\r\\\\u2028\\\\u2029\\\\u1680\\\\u180e\\\\u2000\\\\u2001\\\\u2002\\\\u2003\\\\u2004\\\\u2005\\\\u2006\\\\u2007\\\\u2008\\\\u2009\\\\u200a\\\\u202f\\\\u205f\\\\u3000',\n  rsUpperRange = 'A-Z\\\\xc0-\\\\xd6\\\\xd8-\\\\xde',\n  rsVarRange = '\\\\ufe0e\\\\ufe0f',\n  rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;\n\n/** Used to compose unicode capture groups. */\nvar rsApos = \"['\\u2019]\",\n  rsAstral = '[' + rsAstralRange + ']',\n  rsBreak = '[' + rsBreakRange + ']',\n  rsCombo = '[' + rsComboMarksRange + rsComboSymbolsRange + ']',\n  rsDigits = '\\\\d+',\n  rsDingbat = '[' + rsDingbatRange + ']',\n  rsLower = '[' + rsLowerRange + ']',\n  rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',\n  rsFitz = '\\\\ud83c[\\\\udffb-\\\\udfff]',\n  rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',\n  rsNonAstral = '[^' + rsAstralRange + ']',\n  rsRegional = '(?:\\\\ud83c[\\\\udde6-\\\\uddff]){2}',\n  rsSurrPair = '[\\\\ud800-\\\\udbff][\\\\udc00-\\\\udfff]',\n  rsUpper = '[' + rsUpperRange + ']',\n  rsZWJ = '\\\\u200d';\n\n/** Used to compose unicode regexes. */\nvar rsLowerMisc = '(?:' + rsLower + '|' + rsMisc + ')',\n  rsUpperMisc = '(?:' + rsUpper + '|' + rsMisc + ')',\n  rsOptLowerContr = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',\n  rsOptUpperContr = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',\n  reOptMod = rsModifier + '?',\n  rsOptVar = '[' + rsVarRange + ']?',\n  rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',\n  rsSeq = rsOptVar + reOptMod + rsOptJoin,\n  rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,\n  rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';\n\n/** Used to match apostrophes. */\nvar reApos = RegExp(rsApos, 'g');\n\n/**\n * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and\n * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).\n */\nvar reComboMark = RegExp(rsCombo, 'g');\n\n/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */\nvar reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');\n\n/** Used to match complex or compound words. */\nvar reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptLowerContr + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsUpperMisc + '+' + rsOptUpperContr + '(?=' + [rsBreak, rsUpper + rsLowerMisc, '$'].join('|') + ')', rsUpper + '?' + rsLowerMisc + '+' + rsOptLowerContr, rsUpper + '+' + rsOptUpperContr, rsDigits, rsEmoji].join('|'), 'g');\n\n/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */\nvar reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + ']');\n\n/** Used to detect strings that need a more robust regexp to match words. */\nvar reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;\n\n/** Used to map Latin Unicode letters to basic Latin letters. */\nvar deburredLetters = {\n  // Latin-1 Supplement block.\n  '\\xc0': 'A',\n  '\\xc1': 'A',\n  '\\xc2': 'A',\n  '\\xc3': 'A',\n  '\\xc4': 'A',\n  '\\xc5': 'A',\n  '\\xe0': 'a',\n  '\\xe1': 'a',\n  '\\xe2': 'a',\n  '\\xe3': 'a',\n  '\\xe4': 'a',\n  '\\xe5': 'a',\n  '\\xc7': 'C',\n  '\\xe7': 'c',\n  '\\xd0': 'D',\n  '\\xf0': 'd',\n  '\\xc8': 'E',\n  '\\xc9': 'E',\n  '\\xca': 'E',\n  '\\xcb': 'E',\n  '\\xe8': 'e',\n  '\\xe9': 'e',\n  '\\xea': 'e',\n  '\\xeb': 'e',\n  '\\xcc': 'I',\n  '\\xcd': 'I',\n  '\\xce': 'I',\n  '\\xcf': 'I',\n  '\\xec': 'i',\n  '\\xed': 'i',\n  '\\xee': 'i',\n  '\\xef': 'i',\n  '\\xd1': 'N',\n  '\\xf1': 'n',\n  '\\xd2': 'O',\n  '\\xd3': 'O',\n  '\\xd4': 'O',\n  '\\xd5': 'O',\n  '\\xd6': 'O',\n  '\\xd8': 'O',\n  '\\xf2': 'o',\n  '\\xf3': 'o',\n  '\\xf4': 'o',\n  '\\xf5': 'o',\n  '\\xf6': 'o',\n  '\\xf8': 'o',\n  '\\xd9': 'U',\n  '\\xda': 'U',\n  '\\xdb': 'U',\n  '\\xdc': 'U',\n  '\\xf9': 'u',\n  '\\xfa': 'u',\n  '\\xfb': 'u',\n  '\\xfc': 'u',\n  '\\xdd': 'Y',\n  '\\xfd': 'y',\n  '\\xff': 'y',\n  '\\xc6': 'Ae',\n  '\\xe6': 'ae',\n  '\\xde': 'Th',\n  '\\xfe': 'th',\n  '\\xdf': 'ss',\n  // Latin Extended-A block.\n  '\\u0100': 'A',\n  '\\u0102': 'A',\n  '\\u0104': 'A',\n  '\\u0101': 'a',\n  '\\u0103': 'a',\n  '\\u0105': 'a',\n  '\\u0106': 'C',\n  '\\u0108': 'C',\n  '\\u010a': 'C',\n  '\\u010c': 'C',\n  '\\u0107': 'c',\n  '\\u0109': 'c',\n  '\\u010b': 'c',\n  '\\u010d': 'c',\n  '\\u010e': 'D',\n  '\\u0110': 'D',\n  '\\u010f': 'd',\n  '\\u0111': 'd',\n  '\\u0112': 'E',\n  '\\u0114': 'E',\n  '\\u0116': 'E',\n  '\\u0118': 'E',\n  '\\u011a': 'E',\n  '\\u0113': 'e',\n  '\\u0115': 'e',\n  '\\u0117': 'e',\n  '\\u0119': 'e',\n  '\\u011b': 'e',\n  '\\u011c': 'G',\n  '\\u011e': 'G',\n  '\\u0120': 'G',\n  '\\u0122': 'G',\n  '\\u011d': 'g',\n  '\\u011f': 'g',\n  '\\u0121': 'g',\n  '\\u0123': 'g',\n  '\\u0124': 'H',\n  '\\u0126': 'H',\n  '\\u0125': 'h',\n  '\\u0127': 'h',\n  '\\u0128': 'I',\n  '\\u012a': 'I',\n  '\\u012c': 'I',\n  '\\u012e': 'I',\n  '\\u0130': 'I',\n  '\\u0129': 'i',\n  '\\u012b': 'i',\n  '\\u012d': 'i',\n  '\\u012f': 'i',\n  '\\u0131': 'i',\n  '\\u0134': 'J',\n  '\\u0135': 'j',\n  '\\u0136': 'K',\n  '\\u0137': 'k',\n  '\\u0138': 'k',\n  '\\u0139': 'L',\n  '\\u013b': 'L',\n  '\\u013d': 'L',\n  '\\u013f': 'L',\n  '\\u0141': 'L',\n  '\\u013a': 'l',\n  '\\u013c': 'l',\n  '\\u013e': 'l',\n  '\\u0140': 'l',\n  '\\u0142': 'l',\n  '\\u0143': 'N',\n  '\\u0145': 'N',\n  '\\u0147': 'N',\n  '\\u014a': 'N',\n  '\\u0144': 'n',\n  '\\u0146': 'n',\n  '\\u0148': 'n',\n  '\\u014b': 'n',\n  '\\u014c': 'O',\n  '\\u014e': 'O',\n  '\\u0150': 'O',\n  '\\u014d': 'o',\n  '\\u014f': 'o',\n  '\\u0151': 'o',\n  '\\u0154': 'R',\n  '\\u0156': 'R',\n  '\\u0158': 'R',\n  '\\u0155': 'r',\n  '\\u0157': 'r',\n  '\\u0159': 'r',\n  '\\u015a': 'S',\n  '\\u015c': 'S',\n  '\\u015e': 'S',\n  '\\u0160': 'S',\n  '\\u015b': 's',\n  '\\u015d': 's',\n  '\\u015f': 's',\n  '\\u0161': 's',\n  '\\u0162': 'T',\n  '\\u0164': 'T',\n  '\\u0166': 'T',\n  '\\u0163': 't',\n  '\\u0165': 't',\n  '\\u0167': 't',\n  '\\u0168': 'U',\n  '\\u016a': 'U',\n  '\\u016c': 'U',\n  '\\u016e': 'U',\n  '\\u0170': 'U',\n  '\\u0172': 'U',\n  '\\u0169': 'u',\n  '\\u016b': 'u',\n  '\\u016d': 'u',\n  '\\u016f': 'u',\n  '\\u0171': 'u',\n  '\\u0173': 'u',\n  '\\u0174': 'W',\n  '\\u0175': 'w',\n  '\\u0176': 'Y',\n  '\\u0177': 'y',\n  '\\u0178': 'Y',\n  '\\u0179': 'Z',\n  '\\u017b': 'Z',\n  '\\u017d': 'Z',\n  '\\u017a': 'z',\n  '\\u017c': 'z',\n  '\\u017e': 'z',\n  '\\u0132': 'IJ',\n  '\\u0133': 'ij',\n  '\\u0152': 'Oe',\n  '\\u0153': 'oe',\n  '\\u0149': \"'n\",\n  '\\u017f': 'ss'\n};\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n    length = array ? array.length : 0;\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * Converts an ASCII `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction asciiToArray(string) {\n  return string.split('');\n}\n\n/**\n * Splits an ASCII `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction asciiWords(string) {\n  return string.match(reAsciiWord) || [];\n}\n\n/**\n * The base implementation of `_.propertyOf` without support for deep paths.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyOf(object) {\n  return function (key) {\n    return object == null ? undefined : object[key];\n  };\n}\n\n/**\n * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A\n * letters to basic Latin letters.\n *\n * @private\n * @param {string} letter The matched letter to deburr.\n * @returns {string} Returns the deburred letter.\n */\nvar deburrLetter = basePropertyOf(deburredLetters);\n\n/**\n * Checks if `string` contains Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a symbol is found, else `false`.\n */\nfunction hasUnicode(string) {\n  return reHasUnicode.test(string);\n}\n\n/**\n * Checks if `string` contains a word composed of Unicode symbols.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {boolean} Returns `true` if a word is found, else `false`.\n */\nfunction hasUnicodeWord(string) {\n  return reHasUnicodeWord.test(string);\n}\n\n/**\n * Converts `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction stringToArray(string) {\n  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);\n}\n\n/**\n * Converts a Unicode `string` to an array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the converted array.\n */\nfunction unicodeToArray(string) {\n  return string.match(reUnicode) || [];\n}\n\n/**\n * Splits a Unicode `string` into an array of its words.\n *\n * @private\n * @param {string} The string to inspect.\n * @returns {Array} Returns the words of `string`.\n */\nfunction unicodeWords(string) {\n  return string.match(reUnicodeWord) || [];\n}\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n  symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.slice` without an iteratee call guard.\n *\n * @private\n * @param {Array} array The array to slice.\n * @param {number} [start=0] The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the slice of `array`.\n */\nfunction baseSlice(array, start, end) {\n  var index = -1,\n    length = array.length;\n  if (start < 0) {\n    start = -start > length ? 0 : length + start;\n  }\n  end = end > length ? length : end;\n  if (end < 0) {\n    end += length;\n  }\n  length = start > end ? 0 : end - start >>> 0;\n  start >>>= 0;\n  var result = Array(length);\n  while (++index < length) {\n    result[index] = array[index + start];\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\n/**\n * Casts `array` to a slice if it's needed.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {number} start The start position.\n * @param {number} [end=array.length] The end position.\n * @returns {Array} Returns the cast slice.\n */\nfunction castSlice(array, start, end) {\n  var length = array.length;\n  end = end === undefined ? length : end;\n  return !start && end >= length ? array : baseSlice(array, start, end);\n}\n\n/**\n * Creates a function like `_.lowerFirst`.\n *\n * @private\n * @param {string} methodName The name of the `String` case method to use.\n * @returns {Function} Returns the new case function.\n */\nfunction createCaseFirst(methodName) {\n  return function (string) {\n    string = toString(string);\n    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;\n    var chr = strSymbols ? strSymbols[0] : string.charAt(0);\n    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);\n    return chr[methodName]() + trailing;\n  };\n}\n\n/**\n * Creates a function like `_.camelCase`.\n *\n * @private\n * @param {Function} callback The function to combine each word.\n * @returns {Function} Returns the new compounder function.\n */\nfunction createCompounder(callback) {\n  return function (string) {\n    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');\n  };\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && objectToString.call(value) == symbolTag;\n}\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\n/**\n * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the camel cased string.\n * @example\n *\n * _.camelCase('Foo Bar');\n * // => 'fooBar'\n *\n * _.camelCase('--foo-bar--');\n * // => 'fooBar'\n *\n * _.camelCase('__FOO_BAR__');\n * // => 'fooBar'\n */\nvar camelCase = createCompounder(function (result, word, index) {\n  word = word.toLowerCase();\n  return result + (index ? capitalize(word) : word);\n});\n\n/**\n * Converts the first character of `string` to upper case and the remaining\n * to lower case.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to capitalize.\n * @returns {string} Returns the capitalized string.\n * @example\n *\n * _.capitalize('FRED');\n * // => 'Fred'\n */\nfunction capitalize(string) {\n  return upperFirst(toString(string).toLowerCase());\n}\n\n/**\n * Deburrs `string` by converting\n * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)\n * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)\n * letters to basic Latin letters and removing\n * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to deburr.\n * @returns {string} Returns the deburred string.\n * @example\n *\n * _.deburr('déjà vu');\n * // => 'deja vu'\n */\nfunction deburr(string) {\n  string = toString(string);\n  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');\n}\n\n/**\n * Converts the first character of `string` to upper case.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category String\n * @param {string} [string=''] The string to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.upperFirst('fred');\n * // => 'Fred'\n *\n * _.upperFirst('FRED');\n * // => 'FRED'\n */\nvar upperFirst = createCaseFirst('toUpperCase');\n\n/**\n * Splits `string` into an array of its words.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category String\n * @param {string} [string=''] The string to inspect.\n * @param {RegExp|string} [pattern] The pattern to match words.\n * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.\n * @returns {Array} Returns the words of `string`.\n * @example\n *\n * _.words('fred, barney, & pebbles');\n * // => ['fred', 'barney', 'pebbles']\n *\n * _.words('fred, barney, & pebbles', /[^, ]+/g);\n * // => ['fred', 'barney', '&', 'pebbles']\n */\nfunction words(string, pattern, guard) {\n  string = toString(string);\n  pattern = guard ? undefined : pattern;\n  if (pattern === undefined) {\n    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);\n  }\n  return string.match(pattern) || [];\n}\nmodule.exports = camelCase;", "\"use strict\";\n\nmodule.exports = asPromise;\n\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\nfunction asPromise(fn, ctx /*, varargs */) {\n  var params = new Array(arguments.length - 1),\n    offset = 0,\n    index = 2,\n    pending = true;\n  while (index < arguments.length) params[offset++] = arguments[index++];\n  return new Promise(function executor(resolve, reject) {\n    params[offset] = function callback(err /*, varargs */) {\n      if (pending) {\n        pending = false;\n        if (err) reject(err);else {\n          var params = new Array(arguments.length - 1),\n            offset = 0;\n          while (offset < params.length) params[offset++] = arguments[offset];\n          resolve.apply(null, params);\n        }\n      }\n    };\n    try {\n      fn.apply(ctx || null, params);\n    } catch (err) {\n      if (pending) {\n        pending = false;\n        reject(err);\n      }\n    }\n  });\n}", "\"use strict\";\n\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\nvar base64 = exports;\n\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\nbase64.length = function length(string) {\n  var p = string.length;\n  if (!p) return 0;\n  var n = 0;\n  while (--p % 4 > 1 && string.charAt(p) === \"=\") ++n;\n  return Math.ceil(string.length * 3) / 4 - n;\n};\n\n// Base64 encoding table\nvar b64 = new Array(64);\n\n// Base64 decoding table\nvar s64 = new Array(123);\n\n// 65..90, 97..122, 48..57, 43, 47\nfor (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\n\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\nbase64.encode = function encode(buffer, start, end) {\n  var parts = null,\n    chunk = [];\n  var i = 0,\n    // output index\n    j = 0,\n    // goto index\n    t; // temporary\n  while (start < end) {\n    var b = buffer[start++];\n    switch (j) {\n      case 0:\n        chunk[i++] = b64[b >> 2];\n        t = (b & 3) << 4;\n        j = 1;\n        break;\n      case 1:\n        chunk[i++] = b64[t | b >> 4];\n        t = (b & 15) << 2;\n        j = 2;\n        break;\n      case 2:\n        chunk[i++] = b64[t | b >> 6];\n        chunk[i++] = b64[b & 63];\n        j = 0;\n        break;\n    }\n    if (i > 8191) {\n      (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n      i = 0;\n    }\n  }\n  if (j) {\n    chunk[i++] = b64[t];\n    chunk[i++] = 61;\n    if (j === 1) chunk[i++] = 61;\n  }\n  if (parts) {\n    if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n    return parts.join(\"\");\n  }\n  return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\nvar invalidEncoding = \"invalid encoding\";\n\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\nbase64.decode = function decode(string, buffer, offset) {\n  var start = offset;\n  var j = 0,\n    // goto index\n    t; // temporary\n  for (var i = 0; i < string.length;) {\n    var c = string.charCodeAt(i++);\n    if (c === 61 && j > 1) break;\n    if ((c = s64[c]) === undefined) throw Error(invalidEncoding);\n    switch (j) {\n      case 0:\n        t = c;\n        j = 1;\n        break;\n      case 1:\n        buffer[offset++] = t << 2 | (c & 48) >> 4;\n        t = c;\n        j = 2;\n        break;\n      case 2:\n        buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n        t = c;\n        j = 3;\n        break;\n      case 3:\n        buffer[offset++] = (t & 3) << 6 | c;\n        j = 0;\n        break;\n    }\n  }\n  if (j === 1) throw Error(invalidEncoding);\n  return offset - start;\n};\n\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\nbase64.test = function test(string) {\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\n};", "\"use strict\";\n\nmodule.exports = EventEmitter;\n\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\nfunction EventEmitter() {\n  /**\r\n   * Registered listeners.\r\n   * @type {Object.<string,*>}\r\n   * @private\r\n   */\n  this._listeners = {};\n}\n\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\n  (this._listeners[evt] || (this._listeners[evt] = [])).push({\n    fn: fn,\n    ctx: ctx || this\n  });\n  return this;\n};\n\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.off = function off(evt, fn) {\n  if (evt === undefined) this._listeners = {};else {\n    if (fn === undefined) this._listeners[evt] = [];else {\n      var listeners = this._listeners[evt];\n      for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n    }\n  }\n  return this;\n};\n\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.emit = function emit(evt) {\n  var listeners = this._listeners[evt];\n  if (listeners) {\n    var args = [],\n      i = 1;\n    for (; i < arguments.length;) args.push(arguments[i++]);\n    for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n  }\n  return this;\n};", "\"use strict\";\n\nmodule.exports = factory(factory);\n\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n// Factory function for the purpose of node-based testing in modified global environments\nfunction factory(exports) {\n  // float: typed array\n  if (typeof Float32Array !== \"undefined\") (function () {\n    var f32 = new Float32Array([-0]),\n      f8b = new Uint8Array(f32.buffer),\n      le = f8b[3] === 128;\n    function writeFloat_f32_cpy(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n    }\n    function writeFloat_f32_rev(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[3];\n      buf[pos + 1] = f8b[2];\n      buf[pos + 2] = f8b[1];\n      buf[pos + 3] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n    function readFloat_f32_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      return f32[0];\n    }\n    function readFloat_f32_rev(buf, pos) {\n      f8b[3] = buf[pos];\n      f8b[2] = buf[pos + 1];\n      f8b[1] = buf[pos + 2];\n      f8b[0] = buf[pos + 3];\n      return f32[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n    // float: ieee754\n  })();else (function () {\n    function writeFloat_ieee754(writeUint, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38)\n        // +-Infinity\n        writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38)\n        // denormal\n        writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n        var exponent = Math.floor(Math.log(val) / Math.LN2),\n          mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n        writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n      }\n    }\n    exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n    exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n    function readFloat_ieee754(readUint, buf, pos) {\n      var uint = readUint(buf, pos),\n        sign = (uint >> 31) * 2 + 1,\n        exponent = uint >>> 23 & 255,\n        mantissa = uint & 8388607;\n      return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n    }\n    exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n    exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n  })();\n\n  // double: typed array\n  if (typeof Float64Array !== \"undefined\") (function () {\n    var f64 = new Float64Array([-0]),\n      f8b = new Uint8Array(f64.buffer),\n      le = f8b[7] === 128;\n    function writeDouble_f64_cpy(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n      buf[pos + 4] = f8b[4];\n      buf[pos + 5] = f8b[5];\n      buf[pos + 6] = f8b[6];\n      buf[pos + 7] = f8b[7];\n    }\n    function writeDouble_f64_rev(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[7];\n      buf[pos + 1] = f8b[6];\n      buf[pos + 2] = f8b[5];\n      buf[pos + 3] = f8b[4];\n      buf[pos + 4] = f8b[3];\n      buf[pos + 5] = f8b[2];\n      buf[pos + 6] = f8b[1];\n      buf[pos + 7] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n    function readDouble_f64_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      f8b[4] = buf[pos + 4];\n      f8b[5] = buf[pos + 5];\n      f8b[6] = buf[pos + 6];\n      f8b[7] = buf[pos + 7];\n      return f64[0];\n    }\n    function readDouble_f64_rev(buf, pos) {\n      f8b[7] = buf[pos];\n      f8b[6] = buf[pos + 1];\n      f8b[5] = buf[pos + 2];\n      f8b[4] = buf[pos + 3];\n      f8b[3] = buf[pos + 4];\n      f8b[2] = buf[pos + 5];\n      f8b[1] = buf[pos + 6];\n      f8b[0] = buf[pos + 7];\n      return f64[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n    // double: ieee754\n  })();else (function () {\n    function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) {\n        writeUint(0, buf, pos + off0);\n        writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n      } else if (isNaN(val)) {\n        writeUint(0, buf, pos + off0);\n        writeUint(2146959360, buf, pos + off1);\n      } else if (val > 1.7976931348623157e+308) {\n        // +-Infinity\n        writeUint(0, buf, pos + off0);\n        writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n      } else {\n        var mantissa;\n        if (val < 2.2250738585072014e-308) {\n          // denormal\n          mantissa = val / 5e-324;\n          writeUint(mantissa >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n        } else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2);\n          if (exponent === 1024) exponent = 1023;\n          mantissa = val * Math.pow(2, -exponent);\n          writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n        }\n      }\n    }\n    exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n    exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n    function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n      var lo = readUint(buf, pos + off0),\n        hi = readUint(buf, pos + off1);\n      var sign = (hi >> 31) * 2 + 1,\n        exponent = hi >>> 20 & 2047,\n        mantissa = 4294967296 * (hi & 1048575) + lo;\n      return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n    }\n    exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n    exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n  })();\n  return exports;\n}\n\n// uint helpers\n\nfunction writeUintLE(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\nfunction writeUintBE(val, buf, pos) {\n  buf[pos] = val >>> 24;\n  buf[pos + 1] = val >>> 16 & 255;\n  buf[pos + 2] = val >>> 8 & 255;\n  buf[pos + 3] = val & 255;\n}\nfunction readUintLE(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\nfunction readUintBE(buf, pos) {\n  return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n}", "\"use strict\";\n\nmodule.exports = inquire;\n\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\nfunction inquire(moduleName) {\n  try {\n    var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName); // eslint-disable-line no-eval\n    if (mod && (mod.length || Object.keys(mod).length)) return mod;\n  } catch (e) {} // eslint-disable-line no-empty\n  return null;\n}", "\"use strict\";\n\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\nvar utf8 = exports;\n\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\nutf8.length = function utf8_length(string) {\n  var len = 0,\n    c = 0;\n  for (var i = 0; i < string.length; ++i) {\n    c = string.charCodeAt(i);\n    if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n      ++i;\n      len += 4;\n    } else len += 3;\n  }\n  return len;\n};\n\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\nutf8.read = function utf8_read(buffer, start, end) {\n  var len = end - start;\n  if (len < 1) return \"\";\n  var parts = null,\n    chunk = [],\n    i = 0,\n    // char offset\n    t; // temporary\n  while (start < end) {\n    t = buffer[start++];\n    if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {\n      t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n      chunk[i++] = 0xD800 + (t >> 10);\n      chunk[i++] = 0xDC00 + (t & 1023);\n    } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n    if (i > 8191) {\n      (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n      i = 0;\n    }\n  }\n  if (parts) {\n    if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n    return parts.join(\"\");\n  }\n  return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\n\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\nutf8.write = function utf8_write(string, buffer, offset) {\n  var start = offset,\n    c1,\n    // character 1\n    c2; // character 2\n  for (var i = 0; i < string.length; ++i) {\n    c1 = string.charCodeAt(i);\n    if (c1 < 128) {\n      buffer[offset++] = c1;\n    } else if (c1 < 2048) {\n      buffer[offset++] = c1 >> 6 | 192;\n      buffer[offset++] = c1 & 63 | 128;\n    } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n      c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n      ++i;\n      buffer[offset++] = c1 >> 18 | 240;\n      buffer[offset++] = c1 >> 12 & 63 | 128;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    } else {\n      buffer[offset++] = c1 >> 12 | 224;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    }\n  }\n  return offset - start;\n};", "\"use strict\";\n\nmodule.exports = pool;\n\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\n\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\n\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\nfunction pool(alloc, slice, size) {\n  var SIZE = size || 8192;\n  var MAX = SIZE >>> 1;\n  var slab = null;\n  var offset = SIZE;\n  return function pool_alloc(size) {\n    if (size < 1 || size > MAX) return alloc(size);\n    if (offset + size > SIZE) {\n      slab = alloc(SIZE);\n      offset = 0;\n    }\n    var buf = slice.call(slab, offset, offset += size);\n    if (offset & 7)\n      // align to 32 bit\n      offset = (offset | 7) + 1;\n    return buf;\n  };\n}", "\"use strict\";\n\nmodule.exports = LongBits;\nvar util = require(\"../util/minimal\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n  // note that the casts below are theoretically unnecessary as of today, but older statically\n  // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n  /**\n   * Low bits.\n   * @type {number}\n   */\n  this.lo = lo >>> 0;\n\n  /**\n   * High bits.\n   * @type {number}\n   */\n  this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\nzero.toNumber = function () {\n  return 0;\n};\nzero.zzEncode = zero.zzDecode = function () {\n  return this;\n};\nzero.length = function () {\n  return 1;\n};\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n  if (value === 0) return zero;\n  var sign = value < 0;\n  if (sign) value = -value;\n  var lo = value >>> 0,\n    hi = (value - lo) / 4294967296 >>> 0;\n  if (sign) {\n    hi = ~hi >>> 0;\n    lo = ~lo >>> 0;\n    if (++lo > 4294967295) {\n      lo = 0;\n      if (++hi > 4294967295) hi = 0;\n    }\n  }\n  return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {Long|number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n  if (typeof value === \"number\") return LongBits.fromNumber(value);\n  if (util.isString(value)) {\n    /* istanbul ignore else */\n    if (util.Long) value = util.Long.fromString(value);else return LongBits.fromNumber(parseInt(value, 10));\n  }\n  return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n  if (!unsigned && this.hi >>> 31) {\n    var lo = ~this.lo + 1 >>> 0,\n      hi = ~this.hi >>> 0;\n    if (!lo) hi = hi + 1 >>> 0;\n    return -(lo + hi * 4294967296);\n  }\n  return this.lo + this.hi * 4294967296;\n};\n\n/**\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n  return util.Long ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n  /* istanbul ignore next */ : {\n    low: this.lo | 0,\n    high: this.hi | 0,\n    unsigned: Boolean(unsigned)\n  };\n};\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n  if (hash === zeroHash) return zero;\n  return new LongBits((charCodeAt.call(hash, 0) | charCodeAt.call(hash, 1) << 8 | charCodeAt.call(hash, 2) << 16 | charCodeAt.call(hash, 3) << 24) >>> 0, (charCodeAt.call(hash, 4) | charCodeAt.call(hash, 5) << 8 | charCodeAt.call(hash, 6) << 16 | charCodeAt.call(hash, 7) << 24) >>> 0);\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n  return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n  var mask = this.hi >> 31;\n  this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n  this.lo = (this.lo << 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n  var mask = -(this.lo & 1);\n  this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n  this.hi = (this.hi >>> 1 ^ mask) >>> 0;\n  return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n  var part0 = this.lo,\n    part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n    part2 = this.hi >>> 24;\n  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;\n};", "\"use strict\";\n\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = require(\"@protobufjs/aspromise\");\n\n// converts to / from base64 encoded strings\nutil.base64 = require(\"@protobufjs/base64\");\n\n// base class of rpc.Service\nutil.EventEmitter = require(\"@protobufjs/eventemitter\");\n\n// float handling accross browsers\nutil.float = require(\"@protobufjs/float\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = require(\"@protobufjs/inquire\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = require(\"@protobufjs/utf8\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = require(\"@protobufjs/pool\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = require(\"./longbits\");\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n */\nutil.isNode = Boolean(typeof global !== \"undefined\" && global && global.process && global.process.versions && global.process.versions.node);\n\n/**\n * Global object reference.\n * @memberof util\n * @type {Object}\n */\nutil.global = util.isNode && global || typeof window !== \"undefined\" && window || typeof self !== \"undefined\" && self || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */[]; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */{}; // used on prototypes\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */function isInteger(value) {\n  return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n  return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n  return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n  var value = obj[prop];\n  if (value != null && obj.hasOwnProperty(prop))\n    // eslint-disable-line eqeqeq, no-prototype-builtins\n    return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n  return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = function () {\n  try {\n    var Buffer = util.inquire(\"buffer\").Buffer;\n    // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n    return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */null;\n  } catch (e) {\n    /* istanbul ignore next */\n    return null;\n  }\n}();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n  /* istanbul ignore next */\n  return typeof sizeOrArray === \"number\" ? util.Buffer ? util._Buffer_allocUnsafe(sizeOrArray) : new util.Array(sizeOrArray) : util.Buffer ? util._Buffer_from(sizeOrArray) : typeof Uint8Array === \"undefined\" ? sizeOrArray : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/**\n * Any compatible Long instance.\n * This is a minimal stand-alone definition of a Long instance. The actual type is that exported by long.js.\n * @interface Long\n * @property {number} low Low bits\n * @property {number} high High bits\n * @property {boolean} unsigned Whether unsigned or not\n */\n\n/**\n * Long.js's Long class if available.\n * @type {Constructor<Long>}\n */\nutil.Long = /* istanbul ignore next */util.global.dcodeIO && /* istanbul ignore next */util.global.dcodeIO.Long || /* istanbul ignore next */util.global.Long || util.inquire(\"long\");\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/**\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n  return value ? util.LongBits.from(value).toHash() : util.LongBits.zeroHash;\n};\n\n/**\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n  var bits = util.LongBits.fromHash(hash);\n  if (util.Long) return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n  return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) {\n  // used by converters\n  for (var keys = Object.keys(src), i = 0; i < keys.length; ++i) if (dst[keys[i]] === undefined || !ifNotSet) dst[keys[i]] = src[keys[i]];\n  return dst;\n}\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n  return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n  function CustomError(message, properties) {\n    if (!(this instanceof CustomError)) return new CustomError(message, properties);\n\n    // Error.call(this, message);\n    // ^ just returns a new error instance because the ctor can be called as a function\n\n    Object.defineProperty(this, \"message\", {\n      get: function () {\n        return message;\n      }\n    });\n\n    /* istanbul ignore next */\n    if (Error.captureStackTrace)\n      // node\n      Error.captureStackTrace(this, CustomError);else Object.defineProperty(this, \"stack\", {\n      value: new Error().stack || \"\"\n    });\n    if (properties) merge(this, properties);\n  }\n  CustomError.prototype = Object.create(Error.prototype, {\n    constructor: {\n      value: CustomError,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    name: {\n      get: function get() {\n        return name;\n      },\n      set: undefined,\n      enumerable: false,\n      // configurable: false would accurately preserve the behavior of\n      // the original, but I'm guessing that was not intentional.\n      // For an actual error subclass, this property would\n      // be configurable.\n      configurable: true\n    },\n    toString: {\n      value: function value() {\n        return this.name + \": \" + this.message;\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  });\n  return CustomError;\n}\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n  var fieldMap = {};\n  for (var i = 0; i < fieldNames.length; ++i) fieldMap[fieldNames[i]] = 1;\n\n  /**\n   * @returns {string|undefined} Set field name, if any\n   * @this Object\n   * @ignore\n   */\n  return function () {\n    // eslint-disable-line consistent-return\n    for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i) if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null) return keys[i];\n  };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n  /**\n   * @param {string} name Field name\n   * @returns {undefined}\n   * @this Object\n   * @ignore\n   */\n  return function (name) {\n    for (var i = 0; i < fieldNames.length; ++i) if (fieldNames[i] !== name) delete this[fieldNames[i]];\n  };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function () {\n  var Buffer = util.Buffer;\n  /* istanbul ignore if */\n  if (!Buffer) {\n    util._Buffer_from = util._Buffer_allocUnsafe = null;\n    return;\n  }\n  // because node 4.x buffers are incompatible & immutable\n  // see: https://github.com/dcodeIO/protobuf.js/pull/665\n  util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from || /* istanbul ignore next */\n  function Buffer_from(value, encoding) {\n    return new Buffer(value, encoding);\n  };\n  util._Buffer_allocUnsafe = Buffer.allocUnsafe || /* istanbul ignore next */\n  function Buffer_allocUnsafe(size) {\n    return new Buffer(size);\n  };\n};", "\"use strict\";\n\nmodule.exports = Writer;\nvar util = require(\"./util/minimal\");\nvar BufferWriter; // cyclic\n\nvar LongBits = util.LongBits,\n  base64 = util.base64,\n  utf8 = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n  /**\n   * Function to call.\n   * @type {function(Uint8Array, number, *)}\n   */\n  this.fn = fn;\n\n  /**\n   * Value byte length.\n   * @type {number}\n   */\n  this.len = len;\n\n  /**\n   * Next operation.\n   * @type {Writer.Op|undefined}\n   */\n  this.next = undefined;\n\n  /**\n   * Value to write.\n   * @type {*}\n   */\n  this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n  /**\n   * Current head.\n   * @type {Writer.Op}\n   */\n  this.head = writer.head;\n\n  /**\n   * Current tail.\n   * @type {Writer.Op}\n   */\n  this.tail = writer.tail;\n\n  /**\n   * Current buffer length.\n   * @type {number}\n   */\n  this.len = writer.len;\n\n  /**\n   * Next state.\n   * @type {State|null}\n   */\n  this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n  /**\n   * Current length.\n   * @type {number}\n   */\n  this.len = 0;\n\n  /**\n   * Operations head.\n   * @type {Object}\n   */\n  this.head = new Op(noop, 0, 0);\n\n  /**\n   * Operations tail\n   * @type {Object}\n   */\n  this.tail = this.head;\n\n  /**\n   * Linked forked states.\n   * @type {Object|null}\n   */\n  this.states = null;\n\n  // When a value is written, the writer calculates its byte length and puts it into a linked\n  // list of operations to perform when finish() is called. This both allows us to allocate\n  // buffers of the exact required size and reduces the amount of work we have to do compared\n  // to first calculating over objects and then encoding over objects. In our case, the encoding\n  // part is just a linked list walk calling operations with already prepared values.\n}\nvar create = function create() {\n  return util.Buffer ? function create_buffer_setup() {\n    return (Writer.create = function create_buffer() {\n      return new BufferWriter();\n    })();\n  }\n  /* istanbul ignore next */ : function create_array() {\n    return new Writer();\n  };\n};\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = create();\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n  return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array) Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n  this.tail = this.tail.next = new Op(fn, len, val);\n  this.len += len;\n  return this;\n};\nfunction writeByte(val, buf, pos) {\n  buf[pos] = val & 255;\n}\nfunction writeVarint32(val, buf, pos) {\n  while (val > 127) {\n    buf[pos++] = val & 127 | 128;\n    val >>>= 7;\n  }\n  buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n  this.len = len;\n  this.next = undefined;\n  this.val = val;\n}\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n  // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n  // uint32 is by far the most frequently used operation and benefits significantly from this.\n  this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;\n  return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n  return value < 0 ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n  : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n  return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\nfunction writeVarint64(val, buf, pos) {\n  while (val.hi) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n    val.hi >>>= 7;\n  }\n  while (val.lo > 127) {\n    buf[pos++] = val.lo & 127 | 128;\n    val.lo = val.lo >>> 7;\n  }\n  buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n  var bits = LongBits.from(value);\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n  var bits = LongBits.from(value).zzEncode();\n  return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n  return this._push(writeByte, 1, value ? 1 : 0);\n};\nfunction writeFixed32(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n  return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n  var bits = LongBits.from(value);\n  return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {Long|number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n  return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n  return this._push(util.float.writeDoubleLE, 8, value);\n};\nvar writeBytes = util.Array.prototype.set ? function writeBytes_set(val, buf, pos) {\n  buf.set(val, pos); // also works for plain array values\n}\n/* istanbul ignore next */ : function writeBytes_for(val, buf, pos) {\n  for (var i = 0; i < val.length; ++i) buf[pos + i] = val[i];\n};\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n  var len = value.length >>> 0;\n  if (!len) return this._push(writeByte, 1, 0);\n  if (util.isString(value)) {\n    var buf = Writer.alloc(len = base64.length(value));\n    base64.decode(value, buf, 0);\n    value = buf;\n  }\n  return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n  var len = utf8.length(value);\n  return len ? this.uint32(len)._push(utf8.write, len, value) : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n  this.states = new State(this);\n  this.head = this.tail = new Op(noop, 0, 0);\n  this.len = 0;\n  return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n  if (this.states) {\n    this.head = this.states.head;\n    this.tail = this.states.tail;\n    this.len = this.states.len;\n    this.states = this.states.next;\n  } else {\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n  }\n  return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n  var head = this.head,\n    tail = this.tail,\n    len = this.len;\n  this.reset().uint32(len);\n  if (len) {\n    this.tail.next = head.next; // skip noop\n    this.tail = tail;\n    this.len += len;\n  }\n  return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n  var head = this.head.next,\n    // skip noop\n    buf = this.constructor.alloc(this.len),\n    pos = 0;\n  while (head) {\n    head.fn(head.val, buf, pos);\n    pos += head.len;\n    head = head.next;\n  }\n  // this.head = this.tail = null;\n  return buf;\n};\nWriter._configure = function (BufferWriter_) {\n  BufferWriter = BufferWriter_;\n  Writer.create = create();\n  BufferWriter._configure();\n};", "\"use strict\";\n\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = require(\"./writer\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n  Writer.call(this);\n}\nBufferWriter._configure = function () {\n  /**\n   * Allocates a buffer of the specified size.\n   * @function\n   * @param {number} size Buffer size\n   * @returns {Buffer} Buffer\n   */\n  BufferWriter.alloc = util._Buffer_allocUnsafe;\n  BufferWriter.writeBytesBuffer = util.Buffer && util.Buffer.prototype instanceof Uint8Array && util.Buffer.prototype.set.name === \"set\" ? function writeBytesBuffer_set(val, buf, pos) {\n    buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n    // also works for plain array values\n  }\n  /* istanbul ignore next */ : function writeBytesBuffer_copy(val, buf, pos) {\n    if (val.copy)\n      // Buffer values\n      val.copy(buf, pos, 0, val.length);else for (var i = 0; i < val.length;)\n    // plain array values\n    buf[pos++] = val[i++];\n  };\n};\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n  if (util.isString(value)) value = util._Buffer_from(value, \"base64\");\n  var len = value.length >>> 0;\n  this.uint32(len);\n  if (len) this._push(BufferWriter.writeBytesBuffer, len, value);\n  return this;\n};\nfunction writeStringBuffer(val, buf, pos) {\n  if (val.length < 40)\n    // plain js is faster for short strings (probably due to redundant assertions)\n    util.utf8.write(val, buf, pos);else if (buf.utf8Write) buf.utf8Write(val, pos);else buf.write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n  var len = util.Buffer.byteLength(value);\n  this.uint32(len);\n  if (len) this._push(writeStringBuffer, len, value);\n  return this;\n};\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n\nBufferWriter._configure();", "\"use strict\";\n\nmodule.exports = Reader;\nvar util = require(\"./util/minimal\");\nvar BufferReader; // cyclic\n\nvar LongBits = util.LongBits,\n  utf8 = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n  return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n  /**\n   * Read buffer.\n   * @type {Uint8Array}\n   */\n  this.buf = buffer;\n\n  /**\n   * Read buffer position.\n   * @type {number}\n   */\n  this.pos = 0;\n\n  /**\n   * Read buffer length.\n   * @type {number}\n   */\n  this.len = buffer.length;\n}\nvar create_array = typeof Uint8Array !== \"undefined\" ? function create_typed_array(buffer) {\n  if (buffer instanceof Uint8Array || Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n}\n/* istanbul ignore next */ : function create_array(buffer) {\n  if (Array.isArray(buffer)) return new Reader(buffer);\n  throw Error(\"illegal buffer\");\n};\nvar create = function create() {\n  return util.Buffer ? function create_buffer_setup(buffer) {\n    return (Reader.create = function create_buffer(buffer) {\n      return util.Buffer.isBuffer(buffer) ? new BufferReader(buffer)\n      /* istanbul ignore next */ : create_array(buffer);\n    })(buffer);\n  }\n  /* istanbul ignore next */ : create_array;\n};\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = create();\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = function read_uint32_setup() {\n  var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n  return function read_uint32() {\n    value = (this.buf[this.pos] & 127) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;\n    if (this.buf[this.pos++] < 128) return value;\n\n    /* istanbul ignore if */\n    if ((this.pos += 5) > this.len) {\n      this.pos = this.len;\n      throw indexOutOfRange(this, 10);\n    }\n    return value;\n  };\n}();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n  return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n  var value = this.uint32();\n  return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n  // tends to deopt with local vars for octet etc.\n  var bits = new LongBits(0, 0);\n  var i = 0;\n  if (this.len - this.pos > 4) {\n    // fast route (lo)\n    for (; i < 4; ++i) {\n      // 1st..4th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 5th\n    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n    bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;\n    if (this.buf[this.pos++] < 128) return bits;\n    i = 0;\n  } else {\n    for (; i < 3; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 1st..3th\n      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n    // 4th\n    bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n    return bits;\n  }\n  if (this.len - this.pos > 4) {\n    // fast route (hi)\n    for (; i < 5; ++i) {\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  } else {\n    for (; i < 5; ++i) {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n      // 6th..10th\n      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n      if (this.buf[this.pos++] < 128) return bits;\n    }\n  }\n  /* istanbul ignore next */\n  throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n  return this.uint32() !== 0;\n};\nfunction readFixed32_end(buf, end) {\n  // note that this uses `end`, not `pos`\n  return (buf[end - 4] | buf[end - 3] << 8 | buf[end - 2] << 16 | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64( /* this: Reader */\n) {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 8);\n  return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/**\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n  /* istanbul ignore if */\n  if (this.pos + 4 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readFloatLE(this.buf, this.pos);\n  this.pos += 4;\n  return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n  /* istanbul ignore if */\n  if (this.pos + 8 > this.len) throw indexOutOfRange(this, 4);\n  var value = util.float.readDoubleLE(this.buf, this.pos);\n  this.pos += 8;\n  return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n  var length = this.uint32(),\n    start = this.pos,\n    end = this.pos + length;\n\n  /* istanbul ignore if */\n  if (end > this.len) throw indexOutOfRange(this, length);\n  this.pos += length;\n  if (Array.isArray(this.buf))\n    // plain array\n    return this.buf.slice(start, end);\n  if (start === end) {\n    // fix for IE 10/Win8 and others' subarray returning array of size 1\n    var nativeBuffer = util.Buffer;\n    return nativeBuffer ? nativeBuffer.alloc(0) : new this.buf.constructor(0);\n  }\n  return this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n  var bytes = this.bytes();\n  return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n  if (typeof length === \"number\") {\n    /* istanbul ignore if */\n    if (this.pos + length > this.len) throw indexOutOfRange(this, length);\n    this.pos += length;\n  } else {\n    do {\n      /* istanbul ignore if */\n      if (this.pos >= this.len) throw indexOutOfRange(this);\n    } while (this.buf[this.pos++] & 128);\n  }\n  return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function (wireType) {\n  switch (wireType) {\n    case 0:\n      this.skip();\n      break;\n    case 1:\n      this.skip(8);\n      break;\n    case 2:\n      this.skip(this.uint32());\n      break;\n    case 3:\n      while ((wireType = this.uint32() & 7) !== 4) {\n        this.skipType(wireType);\n      }\n      break;\n    case 5:\n      this.skip(4);\n      break;\n\n    /* istanbul ignore next */\n    default:\n      throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n  }\n  return this;\n};\nReader._configure = function (BufferReader_) {\n  BufferReader = BufferReader_;\n  Reader.create = create();\n  BufferReader._configure();\n  var fn = util.Long ? \"toLong\" : /* istanbul ignore next */\"toNumber\";\n  util.merge(Reader.prototype, {\n    int64: function read_int64() {\n      return readLongVarint.call(this)[fn](false);\n    },\n    uint64: function read_uint64() {\n      return readLongVarint.call(this)[fn](true);\n    },\n    sint64: function read_sint64() {\n      return readLongVarint.call(this).zzDecode()[fn](false);\n    },\n    fixed64: function read_fixed64() {\n      return readFixed64.call(this)[fn](true);\n    },\n    sfixed64: function read_sfixed64() {\n      return readFixed64.call(this)[fn](false);\n    }\n  });\n};", "\"use strict\";\n\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = require(\"./reader\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n  Reader.call(this, buffer);\n\n  /**\n   * Read buffer.\n   * @name BufferReader#buf\n   * @type {Buffer}\n   */\n}\nBufferReader._configure = function () {\n  /* istanbul ignore else */\n  if (util.Buffer) BufferReader.prototype._slice = util.Buffer.prototype.slice;\n};\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n  var len = this.uint32(); // modifies pos\n  return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString(\"utf-8\", this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n\nBufferReader._configure();", "\"use strict\";\n\nmodule.exports = Service;\nvar util = require(\"../util/minimal\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n  if (typeof rpcImpl !== \"function\") throw TypeError(\"rpcImpl must be a function\");\n  util.EventEmitter.call(this);\n\n  /**\n   * RPC implementation. Becomes `null` once the service is ended.\n   * @type {RPCImpl|null}\n   */\n  this.rpcImpl = rpcImpl;\n\n  /**\n   * Whether requests are length-delimited.\n   * @type {boolean}\n   */\n  this.requestDelimited = Boolean(requestDelimited);\n\n  /**\n   * Whether responses are length-delimited.\n   * @type {boolean}\n   */\n  this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n  if (!request) throw TypeError(\"request must be specified\");\n  var self = this;\n  if (!callback) return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n  if (!self.rpcImpl) {\n    setTimeout(function () {\n      callback(Error(\"already ended\"));\n    }, 0);\n    return undefined;\n  }\n  try {\n    return self.rpcImpl(method, requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(), function rpcCallback(err, response) {\n      if (err) {\n        self.emit(\"error\", err, method);\n        return callback(err);\n      }\n      if (response === null) {\n        self.end( /* endedByRPC */true);\n        return undefined;\n      }\n      if (!(response instanceof responseCtor)) {\n        try {\n          response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n        } catch (err) {\n          self.emit(\"error\", err, method);\n          return callback(err);\n        }\n      }\n      self.emit(\"data\", response, method);\n      return callback(null, response);\n    });\n  } catch (err) {\n    self.emit(\"error\", err, method);\n    setTimeout(function () {\n      callback(err);\n    }, 0);\n    return undefined;\n  }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n  if (this.rpcImpl) {\n    if (!endedByRPC)\n      // signal end to rpcImpl\n      this.rpcImpl(null, null, null);\n    this.rpcImpl = null;\n    this.emit(\"end\").off();\n  }\n  return this;\n};", "\"use strict\";\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = require(\"./rpc/service\");", "\"use strict\";\n\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available across modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */", "\"use strict\";\n\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer = require(\"./writer\");\nprotobuf.BufferWriter = require(\"./writer_buffer\");\nprotobuf.Reader = require(\"./reader\");\nprotobuf.BufferReader = require(\"./reader_buffer\");\n\n// Utility\nprotobuf.util = require(\"./util/minimal\");\nprotobuf.rpc = require(\"./rpc\");\nprotobuf.roots = require(\"./roots\");\nprotobuf.configure = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n  protobuf.util._configure();\n  protobuf.Writer._configure(protobuf.BufferWriter);\n  protobuf.Reader._configure(protobuf.BufferReader);\n}\n\n// Set up buffer utility according to the environment\nconfigure();", "\"use strict\";\n\nmodule.exports = codegen;\n\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\nfunction codegen(functionParams, functionName) {\n  /* istanbul ignore if */\n  if (typeof functionParams === \"string\") {\n    functionName = functionParams;\n    functionParams = undefined;\n  }\n  var body = [];\n\n  /**\r\n   * Appends code to the function's body or finishes generation.\r\n   * @typedef Codegen\r\n   * @type {function}\r\n   * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n   * @param {...*} [formatParams] Format parameters\r\n   * @returns {Codegen|Function} Itself or the generated function if finished\r\n   * @throws {Error} If format parameter counts do not match\r\n   */\n\n  function Codegen(formatStringOrScope) {\n    // note that explicit array handling below makes this ~50% faster\n\n    // finish the function\n    if (typeof formatStringOrScope !== \"string\") {\n      var source = toString();\n      if (codegen.verbose) console.log(\"codegen: \" + source); // eslint-disable-line no-console\n      source = \"return \" + source;\n      if (formatStringOrScope) {\n        var scopeKeys = Object.keys(formatStringOrScope),\n          scopeParams = new Array(scopeKeys.length + 1),\n          scopeValues = new Array(scopeKeys.length),\n          scopeOffset = 0;\n        while (scopeOffset < scopeKeys.length) {\n          scopeParams[scopeOffset] = scopeKeys[scopeOffset];\n          scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\n        }\n        scopeParams[scopeOffset] = source;\n        return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\n      }\n      return Function(source)(); // eslint-disable-line no-new-func\n    }\n\n    // otherwise append to body\n    var formatParams = new Array(arguments.length - 1),\n      formatOffset = 0;\n    while (formatOffset < formatParams.length) formatParams[formatOffset] = arguments[++formatOffset];\n    formatOffset = 0;\n    formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\n      var value = formatParams[formatOffset++];\n      switch ($1) {\n        case \"d\":\n        case \"f\":\n          return String(Number(value));\n        case \"i\":\n          return String(Math.floor(value));\n        case \"j\":\n          return JSON.stringify(value);\n        case \"s\":\n          return String(value);\n      }\n      return \"%\";\n    });\n    if (formatOffset !== formatParams.length) throw Error(\"parameter count mismatch\");\n    body.push(formatStringOrScope);\n    return Codegen;\n  }\n  function toString(functionNameOverride) {\n    return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\n  }\n  Codegen.toString = toString;\n  return Codegen;\n}\n\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\n\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\ncodegen.verbose = false;", "\"use strict\";\n\nmodule.exports = fetch;\nvar asPromise = require(\"@protobufjs/aspromise\"),\n  inquire = require(\"@protobufjs/inquire\");\nvar fs = inquire(\"fs\");\n\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nfunction fetch(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (!options) options = {};\n  if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\n\n  // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\n  if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\n    return err && typeof XMLHttpRequest !== \"undefined\" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\n  });\n\n  // use the XHR version otherwise.\n  return fetch.xhr(filename, options, callback);\n}\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\n\n/**/\nfetch.xhr = function fetch_xhr(filename, options, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\n    if (xhr.readyState !== 4) return undefined;\n\n    // local cors security errors return status 0 / empty string, too. afaik this cannot be\n    // reliably distinguished from an actually empty file for security reasons. feel free\n    // to send a pull request if you are aware of a solution.\n    if (xhr.status !== 0 && xhr.status !== 200) return callback(Error(\"status \" + xhr.status));\n\n    // if binary data is expected, make sure that some sort of array is returned, even if\n    // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\n    if (options.binary) {\n      var buffer = xhr.response;\n      if (!buffer) {\n        buffer = [];\n        for (var i = 0; i < xhr.responseText.length; ++i) buffer.push(xhr.responseText.charCodeAt(i) & 255);\n      }\n      return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\n    }\n    return callback(null, xhr.responseText);\n  };\n  if (options.binary) {\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\n    if (\"overrideMimeType\" in xhr) xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    xhr.responseType = \"arraybuffer\";\n  }\n  xhr.open(\"GET\", filename);\n  xhr.send();\n};", "\"use strict\";\n\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\nvar path = exports;\nvar isAbsolute =\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\npath.isAbsolute = function isAbsolute(path) {\n  return /^(?:\\/|\\w+:)/.test(path);\n};\nvar normalize =\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\npath.normalize = function normalize(path) {\n  path = path.replace(/\\\\/g, \"/\").replace(/\\/{2,}/g, \"/\");\n  var parts = path.split(\"/\"),\n    absolute = isAbsolute(path),\n    prefix = \"\";\n  if (absolute) prefix = parts.shift() + \"/\";\n  for (var i = 0; i < parts.length;) {\n    if (parts[i] === \"..\") {\n      if (i > 0 && parts[i - 1] !== \"..\") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;\n    } else if (parts[i] === \".\") parts.splice(i, 1);else ++i;\n  }\n  return prefix + parts.join(\"/\");\n};\n\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\n  if (!alreadyNormalized) includePath = normalize(includePath);\n  if (isAbsolute(includePath)) return includePath;\n  if (!alreadyNormalized) originPath = normalize(originPath);\n  return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\n};", "\"use strict\";\n\n/**\n * Common type constants.\n * @namespace\n */\nvar types = exports;\nvar util = require(\"./util\");\nvar s = [\"double\",\n// 0\n\"float\",\n// 1\n\"int32\",\n// 2\n\"uint32\",\n// 3\n\"sint32\",\n// 4\n\"fixed32\",\n// 5\n\"sfixed32\",\n// 6\n\"int64\",\n// 7\n\"uint64\",\n// 8\n\"sint64\",\n// 9\n\"fixed64\",\n// 10\n\"sfixed64\",\n// 11\n\"bool\",\n// 12\n\"string\",\n// 13\n\"bytes\" // 14\n];\nfunction bake(values, offset) {\n  var i = 0,\n    o = {};\n  offset |= 0;\n  while (i < values.length) o[s[i + offset]] = values[i++];\n  return o;\n}\n\n/**\n * Basic type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n * @property {number} bytes=2 Ldelim wire type\n */\ntypes.basic = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2, /* bytes    */2]);\n\n/**\n * Basic type defaults.\n * @type {Object.<string,*>}\n * @const\n * @property {number} double=0 Double default\n * @property {number} float=0 Float default\n * @property {number} int32=0 Int32 default\n * @property {number} uint32=0 Uint32 default\n * @property {number} sint32=0 Sint32 default\n * @property {number} fixed32=0 Fixed32 default\n * @property {number} sfixed32=0 Sfixed32 default\n * @property {number} int64=0 Int64 default\n * @property {number} uint64=0 Uint64 default\n * @property {number} sint64=0 Sint32 default\n * @property {number} fixed64=0 Fixed64 default\n * @property {number} sfixed64=0 Sfixed64 default\n * @property {boolean} bool=false Bool default\n * @property {string} string=\"\" String default\n * @property {Array.<number>} bytes=Array(0) Bytes default\n * @property {null} message=null Message default\n */\ntypes.defaults = bake([/* double   */0, /* float    */0, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */0, /* sfixed32 */0, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */0, /* sfixed64 */0, /* bool     */false, /* string   */\"\", /* bytes    */util.emptyArray, /* message  */null]);\n\n/**\n * Basic long type wire types.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n */\ntypes.long = bake([/* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1], 7);\n\n/**\n * Allowed types for map keys with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n * @property {number} string=2 Ldelim wire type\n */\ntypes.mapKey = bake([/* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0, /* string   */2], 2);\n\n/**\n * Allowed types for packed repeated fields with their associated wire type.\n * @type {Object.<string,number>}\n * @const\n * @property {number} double=1 Fixed64 wire type\n * @property {number} float=5 Fixed32 wire type\n * @property {number} int32=0 Varint wire type\n * @property {number} uint32=0 Varint wire type\n * @property {number} sint32=0 Varint wire type\n * @property {number} fixed32=5 Fixed32 wire type\n * @property {number} sfixed32=5 Fixed32 wire type\n * @property {number} int64=0 Varint wire type\n * @property {number} uint64=0 Varint wire type\n * @property {number} sint64=0 Varint wire type\n * @property {number} fixed64=1 Fixed64 wire type\n * @property {number} sfixed64=1 Fixed64 wire type\n * @property {number} bool=0 Varint wire type\n */\ntypes.packed = bake([/* double   */1, /* float    */5, /* int32    */0, /* uint32   */0, /* sint32   */0, /* fixed32  */5, /* sfixed32 */5, /* int64    */0, /* uint64   */0, /* sint64   */0, /* fixed64  */1, /* sfixed64 */1, /* bool     */0]);", "\"use strict\";\n\nmodule.exports = Field;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Field.prototype = Object.create(ReflectionObject.prototype)).constructor = Field).className = \"Field\";\nvar Enum = require(\"./enum\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\nvar Type; // cyclic\n\nvar ruleRe = /^required|optional|repeated$/;\n\n/**\n * Constructs a new message field instance. Note that {@link MapField|map fields} have their own class.\n * @name Field\n * @classdesc Reflected message field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a field from a field descriptor.\n * @param {string} name Field name\n * @param {IField} json Field descriptor\n * @returns {Field} Created field\n * @throws {TypeError} If arguments are invalid\n */\nField.fromJSON = function fromJSON(name, json) {\n  return new Field(name, json.id, json.type, json.rule, json.extend, json.options, json.comment);\n};\n\n/**\n * Not an actual constructor. Use {@link Field} instead.\n * @classdesc Base class of all reflected message fields. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports FieldBase\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} type Value type\n * @param {string|Object.<string,*>} [rule=\"optional\"] Field rule\n * @param {string|Object.<string,*>} [extend] Extended type if different from parent\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction Field(name, id, type, rule, extend, options, comment) {\n  if (util.isObject(rule)) {\n    comment = extend;\n    options = rule;\n    rule = extend = undefined;\n  } else if (util.isObject(extend)) {\n    comment = options;\n    options = extend;\n    extend = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n  if (!util.isInteger(id) || id < 0) throw TypeError(\"id must be a non-negative integer\");\n  if (!util.isString(type)) throw TypeError(\"type must be a string\");\n  if (rule !== undefined && !ruleRe.test(rule = rule.toString().toLowerCase())) throw TypeError(\"rule must be a string rule\");\n  if (extend !== undefined && !util.isString(extend)) throw TypeError(\"extend must be a string\");\n\n  /**\n   * Field rule, if any.\n   * @type {string|undefined}\n   */\n  if (rule === \"proto3_optional\") {\n    rule = \"optional\";\n  }\n  this.rule = rule && rule !== \"optional\" ? rule : undefined; // toJSON\n\n  /**\n   * Field type.\n   * @type {string}\n   */\n  this.type = type; // toJSON\n\n  /**\n   * Unique field id.\n   * @type {number}\n   */\n  this.id = id; // toJSON, marker\n\n  /**\n   * Extended type if different from parent.\n   * @type {string|undefined}\n   */\n  this.extend = extend || undefined; // toJSON\n\n  /**\n   * Whether this field is required.\n   * @type {boolean}\n   */\n  this.required = rule === \"required\";\n\n  /**\n   * Whether this field is optional.\n   * @type {boolean}\n   */\n  this.optional = !this.required;\n\n  /**\n   * Whether this field is repeated.\n   * @type {boolean}\n   */\n  this.repeated = rule === \"repeated\";\n\n  /**\n   * Whether this field is a map or not.\n   * @type {boolean}\n   */\n  this.map = false;\n\n  /**\n   * Message this field belongs to.\n   * @type {Type|null}\n   */\n  this.message = null;\n\n  /**\n   * OneOf this field belongs to, if any,\n   * @type {OneOf|null}\n   */\n  this.partOf = null;\n\n  /**\n   * The field type's default value.\n   * @type {*}\n   */\n  this.typeDefault = null;\n\n  /**\n   * The field's default value on prototypes.\n   * @type {*}\n   */\n  this.defaultValue = null;\n\n  /**\n   * Whether this field's value should be treated as a long.\n   * @type {boolean}\n   */\n  this.long = util.Long ? types.long[type] !== undefined : /* istanbul ignore next */false;\n\n  /**\n   * Whether this field's value is a buffer.\n   * @type {boolean}\n   */\n  this.bytes = type === \"bytes\";\n\n  /**\n   * Resolved type if not a basic type.\n   * @type {Type|Enum|null}\n   */\n  this.resolvedType = null;\n\n  /**\n   * Sister-field within the extended type if a declaring extension field.\n   * @type {Field|null}\n   */\n  this.extensionField = null;\n\n  /**\n   * Sister-field within the declaring namespace if an extended field.\n   * @type {Field|null}\n   */\n  this.declaringField = null;\n\n  /**\n   * Internally remembers whether this field is packed.\n   * @type {boolean|null}\n   * @private\n   */\n  this._packed = null;\n\n  /**\n   * Comment for this field.\n   * @type {string|null}\n   */\n  this.comment = comment;\n}\n\n/**\n * Determines whether this field is packed. Only relevant when repeated and working with proto2.\n * @name Field#packed\n * @type {boolean}\n * @readonly\n */\nObject.defineProperty(Field.prototype, \"packed\", {\n  get: function () {\n    // defaults to packed=true if not explicity set to false\n    if (this._packed === null) this._packed = this.getOption(\"packed\") !== false;\n    return this._packed;\n  }\n});\n\n/**\n * @override\n */\nField.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (name === \"packed\")\n    // clear cached before setting\n    this._packed = null;\n  return ReflectionObject.prototype.setOption.call(this, name, value, ifNotSet);\n};\n\n/**\n * Field descriptor.\n * @interface IField\n * @property {string} [rule=\"optional\"] Field rule\n * @property {string} type Field type\n * @property {number} id Field id\n * @property {Object.<string,*>} [options] Field options\n */\n\n/**\n * Extension field descriptor.\n * @interface IExtensionField\n * @extends IField\n * @property {string} extend Extended type\n */\n\n/**\n * Converts this field to a field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IField} Field descriptor\n */\nField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"rule\", this.rule !== \"optional\" && this.rule || undefined, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Resolves this field's type references.\n * @returns {Field} `this`\n * @throws {Error} If any reference cannot be resolved\n */\nField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if ((this.typeDefault = types.defaults[this.type]) === undefined) {\n    // if not a basic type, resolve it\n    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);\n    if (this.resolvedType instanceof Type) this.typeDefault = null;else\n      // instanceof Enum\n      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]]; // first defined\n  } else if (this.options && this.options.proto3_optional) {\n    // proto3 scalar value marked optional; should default to null\n    this.typeDefault = null;\n  }\n\n  // use explicitly set default value if present\n  if (this.options && this.options[\"default\"] != null) {\n    this.typeDefault = this.options[\"default\"];\n    if (this.resolvedType instanceof Enum && typeof this.typeDefault === \"string\") this.typeDefault = this.resolvedType.values[this.typeDefault];\n  }\n\n  // remove unnecessary options\n  if (this.options) {\n    if (this.options.packed === true || this.options.packed !== undefined && this.resolvedType && !(this.resolvedType instanceof Enum)) delete this.options.packed;\n    if (!Object.keys(this.options).length) this.options = undefined;\n  }\n\n  // convert to internal data type if necesssary\n  if (this.long) {\n    this.typeDefault = util.Long.fromNumber(this.typeDefault, this.type.charAt(0) === \"u\");\n\n    /* istanbul ignore else */\n    if (Object.freeze) Object.freeze(this.typeDefault); // long instances are meant to be immutable anyway (i.e. use small int cache that even requires it)\n  } else if (this.bytes && typeof this.typeDefault === \"string\") {\n    var buf;\n    if (util.base64.test(this.typeDefault)) util.base64.decode(this.typeDefault, buf = util.newBuffer(util.base64.length(this.typeDefault)), 0);else util.utf8.write(this.typeDefault, buf = util.newBuffer(util.utf8.length(this.typeDefault)), 0);\n    this.typeDefault = buf;\n  }\n\n  // take special care of maps and repeated fields\n  if (this.map) this.defaultValue = util.emptyObject;else if (this.repeated) this.defaultValue = util.emptyArray;else this.defaultValue = this.typeDefault;\n\n  // ensure proper value on prototype\n  if (this.parent instanceof Type) this.parent.ctor.prototype[this.name] = this.defaultValue;\n  return ReflectionObject.prototype.resolve.call(this);\n};\n\n/**\n * Decorator function as returned by {@link Field.d} and {@link MapField.d} (TypeScript).\n * @typedef FieldDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} fieldName Field name\n * @returns {undefined}\n */\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"string\"|\"bool\"|\"bytes\"|Object} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @param {T} [defaultValue] Default value\n * @returns {FieldDecorator} Decorator function\n * @template T extends number | number[] | Long | Long[] | string | string[] | boolean | boolean[] | Uint8Array | Uint8Array[] | Buffer | Buffer[]\n */\nField.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {\n  // submessage: decorate the submessage and use its name as the type\n  if (typeof fieldType === \"function\") fieldType = util.decorateType(fieldType).name;\n\n  // enum reference: create a reflected copy of the enum and keep reuseing it\n  else if (fieldType && typeof fieldType === \"object\") fieldType = util.decorateEnum(fieldType).name;\n  return function fieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new Field(fieldName, fieldId, fieldType, fieldRule, {\n      \"default\": defaultValue\n    }));\n  };\n};\n\n/**\n * Field decorator (TypeScript).\n * @name Field.d\n * @function\n * @param {number} fieldId Field id\n * @param {Constructor<T>|string} fieldType Field type\n * @param {\"optional\"|\"required\"|\"repeated\"} [fieldRule=\"optional\"] Field rule\n * @returns {FieldDecorator} Decorator function\n * @template T extends Message<T>\n * @variation 2\n */\n// like Field.d but without a default value\n\n// Sets up cyclic dependencies (called in index-light)\nField._configure = function configure(Type_) {\n  Type = Type_;\n};", "\"use strict\";\n\nmodule.exports = OneOf;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((OneOf.prototype = Object.create(ReflectionObject.prototype)).constructor = OneOf).className = \"OneOf\";\nvar Field = require(\"./field\"),\n  util = require(\"./util\");\n\n/**\n * Constructs a new oneof instance.\n * @classdesc Reflected oneof.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Oneof name\n * @param {string[]|Object.<string,*>} [fieldNames] Field names\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction OneOf(name, fieldNames, options, comment) {\n  if (!Array.isArray(fieldNames)) {\n    options = fieldNames;\n    fieldNames = undefined;\n  }\n  ReflectionObject.call(this, name, options);\n\n  /* istanbul ignore if */\n  if (!(fieldNames === undefined || Array.isArray(fieldNames))) throw TypeError(\"fieldNames must be an Array\");\n\n  /**\n   * Field names that belong to this oneof.\n   * @type {string[]}\n   */\n  this.oneof = fieldNames || []; // toJSON, marker\n\n  /**\n   * Fields that belong to this oneof as an array for iteration.\n   * @type {Field[]}\n   * @readonly\n   */\n  this.fieldsArray = []; // declared readonly for conformance, possibly not yet added to parent\n\n  /**\n   * Comment for this field.\n   * @type {string|null}\n   */\n  this.comment = comment;\n}\n\n/**\n * Oneof descriptor.\n * @interface IOneOf\n * @property {Array.<string>} oneof Oneof field names\n * @property {Object.<string,*>} [options] Oneof options\n */\n\n/**\n * Constructs a oneof from a oneof descriptor.\n * @param {string} name Oneof name\n * @param {IOneOf} json Oneof descriptor\n * @returns {OneOf} Created oneof\n * @throws {TypeError} If arguments are invalid\n */\nOneOf.fromJSON = function fromJSON(name, json) {\n  return new OneOf(name, json.oneof, json.options, json.comment);\n};\n\n/**\n * Converts this oneof to a oneof descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IOneOf} Oneof descriptor\n */\nOneOf.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"oneof\", this.oneof, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Adds the fields of the specified oneof to the parent if not already done so.\n * @param {OneOf} oneof The oneof\n * @returns {undefined}\n * @inner\n * @ignore\n */\nfunction addFieldsToParent(oneof) {\n  if (oneof.parent) for (var i = 0; i < oneof.fieldsArray.length; ++i) if (!oneof.fieldsArray[i].parent) oneof.parent.add(oneof.fieldsArray[i]);\n}\n\n/**\n * Adds a field to this oneof and removes it from its current parent, if any.\n * @param {Field} field Field to add\n * @returns {OneOf} `this`\n */\nOneOf.prototype.add = function add(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  if (field.parent && field.parent !== this.parent) field.parent.remove(field);\n  this.oneof.push(field.name);\n  this.fieldsArray.push(field);\n  field.partOf = this; // field.parent remains null\n  addFieldsToParent(this);\n  return this;\n};\n\n/**\n * Removes a field from this oneof and puts it back to the oneof's parent.\n * @param {Field} field Field to remove\n * @returns {OneOf} `this`\n */\nOneOf.prototype.remove = function remove(field) {\n  /* istanbul ignore if */\n  if (!(field instanceof Field)) throw TypeError(\"field must be a Field\");\n  var index = this.fieldsArray.indexOf(field);\n\n  /* istanbul ignore if */\n  if (index < 0) throw Error(field + \" is not a member of \" + this);\n  this.fieldsArray.splice(index, 1);\n  index = this.oneof.indexOf(field.name);\n\n  /* istanbul ignore else */\n  if (index > -1)\n    // theoretical\n    this.oneof.splice(index, 1);\n  field.partOf = null;\n  return this;\n};\n\n/**\n * @override\n */\nOneOf.prototype.onAdd = function onAdd(parent) {\n  ReflectionObject.prototype.onAdd.call(this, parent);\n  var self = this;\n  // Collect present fields\n  for (var i = 0; i < this.oneof.length; ++i) {\n    var field = parent.get(this.oneof[i]);\n    if (field && !field.partOf) {\n      field.partOf = self;\n      self.fieldsArray.push(field);\n    }\n  }\n  // Add not yet present fields\n  addFieldsToParent(this);\n};\n\n/**\n * @override\n */\nOneOf.prototype.onRemove = function onRemove(parent) {\n  for (var i = 0, field; i < this.fieldsArray.length; ++i) if ((field = this.fieldsArray[i]).parent) field.parent.remove(field);\n  ReflectionObject.prototype.onRemove.call(this, parent);\n};\n\n/**\n * Decorator function as returned by {@link OneOf.d} (TypeScript).\n * @typedef OneOfDecorator\n * @type {function}\n * @param {Object} prototype Target prototype\n * @param {string} oneofName OneOf name\n * @returns {undefined}\n */\n\n/**\n * OneOf decorator (TypeScript).\n * @function\n * @param {...string} fieldNames Field names\n * @returns {OneOfDecorator} Decorator function\n * @template T extends string\n */\nOneOf.d = function decorateOneOf() {\n  var fieldNames = new Array(arguments.length),\n    index = 0;\n  while (index < arguments.length) fieldNames[index] = arguments[index++];\n  return function oneOfDecorator(prototype, oneofName) {\n    util.decorateType(prototype.constructor).add(new OneOf(oneofName, fieldNames));\n    Object.defineProperty(prototype, oneofName, {\n      get: util.oneOfGetter(fieldNames),\n      set: util.oneOfSetter(fieldNames)\n    });\n  };\n};", "\"use strict\";\n\nmodule.exports = Namespace;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Namespace.prototype = Object.create(ReflectionObject.prototype)).constructor = Namespace).className = \"Namespace\";\nvar Field = require(\"./field\"),\n  util = require(\"./util\"),\n  OneOf = require(\"./oneof\");\nvar Type,\n  // cyclic\n  Service, Enum;\n\n/**\n * Constructs a new namespace instance.\n * @name Namespace\n * @classdesc Reflected namespace.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n */\n\n/**\n * Constructs a namespace from JSON.\n * @memberof Namespace\n * @function\n * @param {string} name Namespace name\n * @param {Object.<string,*>} json JSON object\n * @returns {Namespace} Created namespace\n * @throws {TypeError} If arguments are invalid\n */\nNamespace.fromJSON = function fromJSON(name, json) {\n  return new Namespace(name, json.options).addJSON(json.nested);\n};\n\n/**\n * Converts an array of reflection objects to JSON.\n * @memberof Namespace\n * @param {ReflectionObject[]} array Object array\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {Object.<string,*>|undefined} JSON object or `undefined` when array is empty\n */\nfunction arrayToJSON(array, toJSONOptions) {\n  if (!(array && array.length)) return undefined;\n  var obj = {};\n  for (var i = 0; i < array.length; ++i) obj[array[i].name] = array[i].toJSON(toJSONOptions);\n  return obj;\n}\nNamespace.arrayToJSON = arrayToJSON;\n\n/**\n * Tests if the specified id is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedId = function isReservedId(reserved, id) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (typeof reserved[i] !== \"string\" && reserved[i][0] <= id && reserved[i][1] > id) return true;\n  return false;\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {Array.<number[]|string>|undefined} reserved Array of reserved ranges and names\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nNamespace.isReservedName = function isReservedName(reserved, name) {\n  if (reserved) for (var i = 0; i < reserved.length; ++i) if (reserved[i] === name) return true;\n  return false;\n};\n\n/**\n * Not an actual constructor. Use {@link Namespace} instead.\n * @classdesc Base class of all reflection objects containing nested objects. This is not an actual class but here for the sake of having consistent type definitions.\n * @exports NamespaceBase\n * @extends ReflectionObject\n * @abstract\n * @constructor\n * @param {string} name Namespace name\n * @param {Object.<string,*>} [options] Declared options\n * @see {@link Namespace}\n */\nfunction Namespace(name, options) {\n  ReflectionObject.call(this, name, options);\n\n  /**\n   * Nested objects by name.\n   * @type {Object.<string,ReflectionObject>|undefined}\n   */\n  this.nested = undefined; // toJSON\n\n  /**\n   * Cached nested objects as an array.\n   * @type {ReflectionObject[]|null}\n   * @private\n   */\n  this._nestedArray = null;\n}\nfunction clearCache(namespace) {\n  namespace._nestedArray = null;\n  return namespace;\n}\n\n/**\n * Nested objects of this namespace as an array for iteration.\n * @name NamespaceBase#nestedArray\n * @type {ReflectionObject[]}\n * @readonly\n */\nObject.defineProperty(Namespace.prototype, \"nestedArray\", {\n  get: function () {\n    return this._nestedArray || (this._nestedArray = util.toArray(this.nested));\n  }\n});\n\n/**\n * Namespace descriptor.\n * @interface INamespace\n * @property {Object.<string,*>} [options] Namespace options\n * @property {Object.<string,AnyNestedObject>} [nested] Nested object descriptors\n */\n\n/**\n * Any extension field descriptor.\n * @typedef AnyExtensionField\n * @type {IExtensionField|IExtensionMapField}\n */\n\n/**\n * Any nested object descriptor.\n * @typedef AnyNestedObject\n * @type {IEnum|IType|IService|AnyExtensionField|INamespace|IOneOf}\n */\n\n/**\n * Converts this namespace to a namespace descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {INamespace} Namespace descriptor\n */\nNamespace.prototype.toJSON = function toJSON(toJSONOptions) {\n  return util.toObject([\"options\", this.options, \"nested\", arrayToJSON(this.nestedArray, toJSONOptions)]);\n};\n\n/**\n * Adds nested objects to this namespace from nested object descriptors.\n * @param {Object.<string,AnyNestedObject>} nestedJson Any nested object descriptors\n * @returns {Namespace} `this`\n */\nNamespace.prototype.addJSON = function addJSON(nestedJson) {\n  var ns = this;\n  /* istanbul ignore else */\n  if (nestedJson) {\n    for (var names = Object.keys(nestedJson), i = 0, nested; i < names.length; ++i) {\n      nested = nestedJson[names[i]];\n      ns.add(\n      // most to least likely\n      (nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : nested.id !== undefined ? Field.fromJSON : Namespace.fromJSON)(names[i], nested));\n    }\n  }\n  return this;\n};\n\n/**\n * Gets the nested object of the specified name.\n * @param {string} name Nested object name\n * @returns {ReflectionObject|null} The reflection object or `null` if it doesn't exist\n */\nNamespace.prototype.get = function get(name) {\n  return this.nested && this.nested[name] || null;\n};\n\n/**\n * Gets the values of the nested {@link Enum|enum} of the specified name.\n * This methods differs from {@link Namespace#get|get} in that it returns an enum's values directly and throws instead of returning `null`.\n * @param {string} name Nested enum name\n * @returns {Object.<string,number>} Enum values\n * @throws {Error} If there is no such enum\n */\nNamespace.prototype.getEnum = function getEnum(name) {\n  if (this.nested && this.nested[name] instanceof Enum) return this.nested[name].values;\n  throw Error(\"no such enum: \" + name);\n};\n\n/**\n * Adds a nested object to this namespace.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name\n */\nNamespace.prototype.add = function add(object) {\n  if (!(object instanceof Field && object.extend !== undefined || object instanceof Type || object instanceof OneOf || object instanceof Enum || object instanceof Service || object instanceof Namespace)) throw TypeError(\"object must be a valid nested object\");\n  if (!this.nested) this.nested = {};else {\n    var prev = this.get(object.name);\n    if (prev) {\n      if (prev instanceof Namespace && object instanceof Namespace && !(prev instanceof Type || prev instanceof Service)) {\n        // replace plain namespace but keep existing nested elements and options\n        var nested = prev.nestedArray;\n        for (var i = 0; i < nested.length; ++i) object.add(nested[i]);\n        this.remove(prev);\n        if (!this.nested) this.nested = {};\n        object.setOptions(prev.options, true);\n      } else throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n    }\n  }\n  this.nested[object.name] = object;\n  object.onAdd(this);\n  return clearCache(this);\n};\n\n/**\n * Removes a nested object from this namespace.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Namespace} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this namespace\n */\nNamespace.prototype.remove = function remove(object) {\n  if (!(object instanceof ReflectionObject)) throw TypeError(\"object must be a ReflectionObject\");\n  if (object.parent !== this) throw Error(object + \" is not a member of \" + this);\n  delete this.nested[object.name];\n  if (!Object.keys(this.nested).length) this.nested = undefined;\n  object.onRemove(this);\n  return clearCache(this);\n};\n\n/**\n * Defines additial namespaces within this one if not yet existing.\n * @param {string|string[]} path Path to create\n * @param {*} [json] Nested types to create from JSON\n * @returns {Namespace} Pointer to the last namespace created or `this` if path is empty\n */\nNamespace.prototype.define = function define(path, json) {\n  if (util.isString(path)) path = path.split(\".\");else if (!Array.isArray(path)) throw TypeError(\"illegal path\");\n  if (path && path.length && path[0] === \"\") throw Error(\"path must be relative\");\n  var ptr = this;\n  while (path.length > 0) {\n    var part = path.shift();\n    if (ptr.nested && ptr.nested[part]) {\n      ptr = ptr.nested[part];\n      if (!(ptr instanceof Namespace)) throw Error(\"path conflicts with non-namespace objects\");\n    } else ptr.add(ptr = new Namespace(part));\n  }\n  if (json) ptr.addJSON(json);\n  return ptr;\n};\n\n/**\n * Resolves this namespace's and all its nested objects' type references. Useful to validate a reflection tree, but comes at a cost.\n * @returns {Namespace} `this`\n */\nNamespace.prototype.resolveAll = function resolveAll() {\n  var nested = this.nestedArray,\n    i = 0;\n  while (i < nested.length) if (nested[i] instanceof Namespace) nested[i++].resolveAll();else nested[i++].resolve();\n  return this.resolve();\n};\n\n/**\n * Recursively looks up the reflection object matching the specified path in the scope of this namespace.\n * @param {string|string[]} path Path to look up\n * @param {*|Array.<*>} filterTypes Filter types, any combination of the constructors of `protobuf.Type`, `protobuf.Enum`, `protobuf.Service` etc.\n * @param {boolean} [parentAlreadyChecked=false] If known, whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n */\nNamespace.prototype.lookup = function lookup(path, filterTypes, parentAlreadyChecked) {\n  /* istanbul ignore next */\n  if (typeof filterTypes === \"boolean\") {\n    parentAlreadyChecked = filterTypes;\n    filterTypes = undefined;\n  } else if (filterTypes && !Array.isArray(filterTypes)) filterTypes = [filterTypes];\n  if (util.isString(path) && path.length) {\n    if (path === \".\") return this.root;\n    path = path.split(\".\");\n  } else if (!path.length) return this;\n\n  // Start at root if path is absolute\n  if (path[0] === \"\") return this.root.lookup(path.slice(1), filterTypes);\n\n  // Test if the first part matches any nested object, and if so, traverse if path contains more\n  var found = this.get(path[0]);\n  if (found) {\n    if (path.length === 1) {\n      if (!filterTypes || filterTypes.indexOf(found.constructor) > -1) return found;\n    } else if (found instanceof Namespace && (found = found.lookup(path.slice(1), filterTypes, true))) return found;\n\n    // Otherwise try each nested namespace\n  } else for (var i = 0; i < this.nestedArray.length; ++i) if (this._nestedArray[i] instanceof Namespace && (found = this._nestedArray[i].lookup(path, filterTypes, true))) return found;\n\n  // If there hasn't been a match, try again at the parent\n  if (this.parent === null || parentAlreadyChecked) return null;\n  return this.parent.lookup(path, filterTypes);\n};\n\n/**\n * Looks up the reflection object at the specified path, relative to this namespace.\n * @name NamespaceBase#lookup\n * @function\n * @param {string|string[]} path Path to look up\n * @param {boolean} [parentAlreadyChecked=false] Whether the parent has already been checked\n * @returns {ReflectionObject|null} Looked up object or `null` if none could be found\n * @variation 2\n */\n// lookup(path: string, [parentAlreadyChecked: boolean])\n\n/**\n * Looks up the {@link Type|type} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type\n * @throws {Error} If `path` does not point to a type\n */\nNamespace.prototype.lookupType = function lookupType(path) {\n  var found = this.lookup(path, [Type]);\n  if (!found) throw Error(\"no such type: \" + path);\n  return found;\n};\n\n/**\n * Looks up the values of the {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Enum} Looked up enum\n * @throws {Error} If `path` does not point to an enum\n */\nNamespace.prototype.lookupEnum = function lookupEnum(path) {\n  var found = this.lookup(path, [Enum]);\n  if (!found) throw Error(\"no such Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\n * Looks up the {@link Type|type} or {@link Enum|enum} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Type} Looked up type or enum\n * @throws {Error} If `path` does not point to a type or enum\n */\nNamespace.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path) {\n  var found = this.lookup(path, [Type, Enum]);\n  if (!found) throw Error(\"no such Type or Enum '\" + path + \"' in \" + this);\n  return found;\n};\n\n/**\n * Looks up the {@link Service|service} at the specified path, relative to this namespace.\n * Besides its signature, this methods differs from {@link Namespace#lookup|lookup} in that it throws instead of returning `null`.\n * @param {string|string[]} path Path to look up\n * @returns {Service} Looked up service\n * @throws {Error} If `path` does not point to a service\n */\nNamespace.prototype.lookupService = function lookupService(path) {\n  var found = this.lookup(path, [Service]);\n  if (!found) throw Error(\"no such Service '\" + path + \"' in \" + this);\n  return found;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nNamespace._configure = function (Type_, Service_, Enum_) {\n  Type = Type_;\n  Service = Service_;\n  Enum = Enum_;\n};", "\"use strict\";\n\nmodule.exports = MapField;\n\n// extends Field\nvar Field = require(\"./field\");\n((MapField.prototype = Object.create(Field.prototype)).constructor = MapField).className = \"MapField\";\nvar types = require(\"./types\"),\n  util = require(\"./util\");\n\n/**\n * Constructs a new map field instance.\n * @classdesc Reflected map field.\n * @extends FieldBase\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {number} id Unique id within its namespace\n * @param {string} keyType Key type\n * @param {string} type Value type\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] Comment associated with this field\n */\nfunction MapField(name, id, keyType, type, options, comment) {\n  Field.call(this, name, id, type, undefined, undefined, options, comment);\n\n  /* istanbul ignore if */\n  if (!util.isString(keyType)) throw TypeError(\"keyType must be a string\");\n\n  /**\n   * Key type.\n   * @type {string}\n   */\n  this.keyType = keyType; // toJSON, marker\n\n  /**\n   * Resolved key type if not a basic type.\n   * @type {ReflectionObject|null}\n   */\n  this.resolvedKeyType = null;\n\n  // Overrides Field#map\n  this.map = true;\n}\n\n/**\n * Map field descriptor.\n * @interface IMapField\n * @extends {IField}\n * @property {string} keyType Key type\n */\n\n/**\n * Extension map field descriptor.\n * @interface IExtensionMapField\n * @extends IMapField\n * @property {string} extend Extended type\n */\n\n/**\n * Constructs a map field from a map field descriptor.\n * @param {string} name Field name\n * @param {IMapField} json Map field descriptor\n * @returns {MapField} Created map field\n * @throws {TypeError} If arguments are invalid\n */\nMapField.fromJSON = function fromJSON(name, json) {\n  return new MapField(name, json.id, json.keyType, json.type, json.options, json.comment);\n};\n\n/**\n * Converts this map field to a map field descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMapField} Map field descriptor\n */\nMapField.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"keyType\", this.keyType, \"type\", this.type, \"id\", this.id, \"extend\", this.extend, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * @override\n */\nMapField.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n\n  // Besides a value type, map fields have a key type that may be \"any scalar type except for floating point types and bytes\"\n  if (types.mapKey[this.keyType] === undefined) throw Error(\"invalid key type: \" + this.keyType);\n  return Field.prototype.resolve.call(this);\n};\n\n/**\n * Map field decorator (TypeScript).\n * @name MapField.d\n * @function\n * @param {number} fieldId Field id\n * @param {\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"} fieldKeyType Field key type\n * @param {\"double\"|\"float\"|\"int32\"|\"uint32\"|\"sint32\"|\"fixed32\"|\"sfixed32\"|\"int64\"|\"uint64\"|\"sint64\"|\"fixed64\"|\"sfixed64\"|\"bool\"|\"string\"|\"bytes\"|Object|Constructor<{}>} fieldValueType Field value type\n * @returns {FieldDecorator} Decorator function\n * @template T extends { [key: string]: number | Long | string | boolean | Uint8Array | Buffer | number[] | Message<{}> }\n */\nMapField.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {\n  // submessage value: decorate the submessage and use its name as the type\n  if (typeof fieldValueType === \"function\") fieldValueType = util.decorateType(fieldValueType).name;\n\n  // enum reference value: create a reflected copy of the enum and keep reuseing it\n  else if (fieldValueType && typeof fieldValueType === \"object\") fieldValueType = util.decorateEnum(fieldValueType).name;\n  return function mapFieldDecorator(prototype, fieldName) {\n    util.decorateType(prototype.constructor).add(new MapField(fieldName, fieldId, fieldKeyType, fieldValueType));\n  };\n};", "\"use strict\";\n\nmodule.exports = Method;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Method.prototype = Object.create(ReflectionObject.prototype)).constructor = Method).className = \"Method\";\nvar util = require(\"./util\");\n\n/**\n * Constructs a new service method instance.\n * @classdesc Reflected service method.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Method name\n * @param {string|undefined} type Method type, usually `\"rpc\"`\n * @param {string} requestType Request message type\n * @param {string} responseType Response message type\n * @param {boolean|Object.<string,*>} [requestStream] Whether the request is streamed\n * @param {boolean|Object.<string,*>} [responseStream] Whether the response is streamed\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this method\n * @param {Object.<string,*>} [parsedOptions] Declared options, properly parsed into an object\n */\nfunction Method(name, type, requestType, responseType, requestStream, responseStream, options, comment, parsedOptions) {\n  /* istanbul ignore next */\n  if (util.isObject(requestStream)) {\n    options = requestStream;\n    requestStream = responseStream = undefined;\n  } else if (util.isObject(responseStream)) {\n    options = responseStream;\n    responseStream = undefined;\n  }\n\n  /* istanbul ignore if */\n  if (!(type === undefined || util.isString(type))) throw TypeError(\"type must be a string\");\n\n  /* istanbul ignore if */\n  if (!util.isString(requestType)) throw TypeError(\"requestType must be a string\");\n\n  /* istanbul ignore if */\n  if (!util.isString(responseType)) throw TypeError(\"responseType must be a string\");\n  ReflectionObject.call(this, name, options);\n\n  /**\n   * Method type.\n   * @type {string}\n   */\n  this.type = type || \"rpc\"; // toJSON\n\n  /**\n   * Request type.\n   * @type {string}\n   */\n  this.requestType = requestType; // toJSON, marker\n\n  /**\n   * Whether requests are streamed or not.\n   * @type {boolean|undefined}\n   */\n  this.requestStream = requestStream ? true : undefined; // toJSON\n\n  /**\n   * Response type.\n   * @type {string}\n   */\n  this.responseType = responseType; // toJSON\n\n  /**\n   * Whether responses are streamed or not.\n   * @type {boolean|undefined}\n   */\n  this.responseStream = responseStream ? true : undefined; // toJSON\n\n  /**\n   * Resolved request type.\n   * @type {Type|null}\n   */\n  this.resolvedRequestType = null;\n\n  /**\n   * Resolved response type.\n   * @type {Type|null}\n   */\n  this.resolvedResponseType = null;\n\n  /**\n   * Comment for this method\n   * @type {string|null}\n   */\n  this.comment = comment;\n\n  /**\n   * Options properly parsed into an object\n   */\n  this.parsedOptions = parsedOptions;\n}\n\n/**\n * Method descriptor.\n * @interface IMethod\n * @property {string} [type=\"rpc\"] Method type\n * @property {string} requestType Request type\n * @property {string} responseType Response type\n * @property {boolean} [requestStream=false] Whether requests are streamed\n * @property {boolean} [responseStream=false] Whether responses are streamed\n * @property {Object.<string,*>} [options] Method options\n * @property {string} comment Method comments\n * @property {Object.<string,*>} [parsedOptions] Method options properly parsed into an object\n */\n\n/**\n * Constructs a method from a method descriptor.\n * @param {string} name Method name\n * @param {IMethod} json Method descriptor\n * @returns {Method} Created method\n * @throws {TypeError} If arguments are invalid\n */\nMethod.fromJSON = function fromJSON(name, json) {\n  return new Method(name, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);\n};\n\n/**\n * Converts this method to a method descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IMethod} Method descriptor\n */\nMethod.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"type\", this.type !== \"rpc\" && /* istanbul ignore next */this.type || undefined, \"requestType\", this.requestType, \"requestStream\", this.requestStream, \"responseType\", this.responseType, \"responseStream\", this.responseStream, \"options\", this.options, \"comment\", keepComments ? this.comment : undefined, \"parsedOptions\", this.parsedOptions]);\n};\n\n/**\n * @override\n */\nMethod.prototype.resolve = function resolve() {\n  /* istanbul ignore if */\n  if (this.resolved) return this;\n  this.resolvedRequestType = this.parent.lookupType(this.requestType);\n  this.resolvedResponseType = this.parent.lookupType(this.responseType);\n  return ReflectionObject.prototype.resolve.call(this);\n};", "\"use strict\";\n\nmodule.exports = Service;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Service.prototype = Object.create(Namespace.prototype)).constructor = Service).className = \"Service\";\nvar Method = require(\"./method\"),\n  util = require(\"./util\"),\n  rpc = require(\"./rpc\");\n\n/**\n * Constructs a new service instance.\n * @classdesc Reflected service.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Service name\n * @param {Object.<string,*>} [options] Service options\n * @throws {TypeError} If arguments are invalid\n */\nfunction Service(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Service methods.\n   * @type {Object.<string,Method>}\n   */\n  this.methods = {}; // toJSON, marker\n\n  /**\n   * Cached methods as an array.\n   * @type {Method[]|null}\n   * @private\n   */\n  this._methodsArray = null;\n}\n\n/**\n * Service descriptor.\n * @interface IService\n * @extends INamespace\n * @property {Object.<string,IMethod>} methods Method descriptors\n */\n\n/**\n * Constructs a service from a service descriptor.\n * @param {string} name Service name\n * @param {IService} json Service descriptor\n * @returns {Service} Created service\n * @throws {TypeError} If arguments are invalid\n */\nService.fromJSON = function fromJSON(name, json) {\n  var service = new Service(name, json.options);\n  /* istanbul ignore else */\n  if (json.methods) for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i) service.add(Method.fromJSON(names[i], json.methods[names[i]]));\n  if (json.nested) service.addJSON(json.nested);\n  service.comment = json.comment;\n  return service;\n};\n\n/**\n * Converts this service to a service descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IService} Service descriptor\n */\nService.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"methods\", Namespace.arrayToJSON(this.methodsArray, toJSONOptions) || /* istanbul ignore next */{}, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * Methods of this service as an array for iteration.\n * @name Service#methodsArray\n * @type {Method[]}\n * @readonly\n */\nObject.defineProperty(Service.prototype, \"methodsArray\", {\n  get: function () {\n    return this._methodsArray || (this._methodsArray = util.toArray(this.methods));\n  }\n});\nfunction clearCache(service) {\n  service._methodsArray = null;\n  return service;\n}\n\n/**\n * @override\n */\nService.prototype.get = function get(name) {\n  return this.methods[name] || Namespace.prototype.get.call(this, name);\n};\n\n/**\n * @override\n */\nService.prototype.resolveAll = function resolveAll() {\n  var methods = this.methodsArray;\n  for (var i = 0; i < methods.length; ++i) methods[i].resolve();\n  return Namespace.prototype.resolve.call(this);\n};\n\n/**\n * @override\n */\nService.prototype.add = function add(object) {\n  /* istanbul ignore if */\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Method) {\n    this.methods[object.name] = object;\n    object.parent = this;\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * @override\n */\nService.prototype.remove = function remove(object) {\n  if (object instanceof Method) {\n    /* istanbul ignore if */\n    if (this.methods[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.methods[object.name];\n    object.parent = null;\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Creates a runtime service using the specified rpc implementation.\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n * @returns {rpc.Service} RPC service. Useful where requests and/or responses are streamed.\n */\nService.prototype.create = function create(rpcImpl, requestDelimited, responseDelimited) {\n  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);\n  for (var i = 0, method; i < /* initializes */this.methodsArray.length; ++i) {\n    var methodName = util.lcFirst((method = this._methodsArray[i]).resolve().name).replace(/[^$\\w_]/g, \"\");\n    rpcService[methodName] = util.codegen([\"r\", \"c\"], util.isReserved(methodName) ? methodName + \"_\" : methodName)(\"return this.rpcCall(m,q,s,r,c)\")({\n      m: method,\n      q: method.resolvedRequestType.ctor,\n      s: method.resolvedResponseType.ctor\n    });\n  }\n  return rpcService;\n};", "\"use strict\";\n\nmodule.exports = Message;\nvar util = require(\"./util/minimal\");\n\n/**\n * Constructs a new message instance.\n * @classdesc Abstract runtime message.\n * @constructor\n * @param {Properties<T>} [properties] Properties to set\n * @template T extends object = object\n */\nfunction Message(properties) {\n  // not used internally\n  if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) this[keys[i]] = properties[keys[i]];\n}\n\n/**\n * Reference to the reflected type.\n * @name Message.$type\n * @type {Type}\n * @readonly\n */\n\n/**\n * Reference to the reflected type.\n * @name Message#$type\n * @type {Type}\n * @readonly\n */\n\n/*eslint-disable valid-jsdoc*/\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<T>} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.create = function create(properties) {\n  return this.$type.create(properties);\n};\n\n/**\n * Encodes a message of this type.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encode = function encode(message, writer) {\n  return this.$type.encode(message, writer);\n};\n\n/**\n * Encodes a message of this type preceeded by its length as a varint.\n * @param {T|Object.<string,*>} message Message to encode\n * @param {Writer} [writer] Writer to use\n * @returns {Writer} Writer\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.$type.encodeDelimited(message, writer);\n};\n\n/**\n * Decodes a message of this type.\n * @name Message.decode\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decode = function decode(reader) {\n  return this.$type.decode(reader);\n};\n\n/**\n * Decodes a message of this type preceeded by its length as a varint.\n * @name Message.decodeDelimited\n * @function\n * @param {Reader|Uint8Array} reader Reader or buffer to decode\n * @returns {T} Decoded message\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.decodeDelimited = function decodeDelimited(reader) {\n  return this.$type.decodeDelimited(reader);\n};\n\n/**\n * Verifies a message of this type.\n * @name Message.verify\n * @function\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {string|null} `null` if valid, otherwise the reason why it is not\n */\nMessage.verify = function verify(message) {\n  return this.$type.verify(message);\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object\n * @returns {T} Message instance\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.fromObject = function fromObject(object) {\n  return this.$type.fromObject(object);\n};\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {T} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @template T extends Message<T>\n * @this Constructor<T>\n */\nMessage.toObject = function toObject(message, options) {\n  return this.$type.toObject(message, options);\n};\n\n/**\n * Converts this message to JSON.\n * @returns {Object.<string,*>} JSON object\n */\nMessage.prototype.toJSON = function toJSON() {\n  return this.$type.toObject(this, util.toJSONOptions);\n};\n\n/*eslint-enable valid-jsdoc*/", "\"use strict\";\n\nmodule.exports = decoder;\nvar Enum = require(\"./enum\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\nfunction missing(field) {\n  return \"missing required '\" + field.name + \"'\";\n}\n\n/**\n * Generates a decoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction decoder(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"r\", \"l\"], mtype.name + \"$decode\")(\"if(!(r instanceof Reader))\")(\"r=Reader.create(r)\")(\"var c=l===undefined?r.len:r.pos+l,m=new this.ctor\" + (mtype.fieldsArray.filter(function (field) {\n    return field.map;\n  }).length ? \",k,value\" : \"\"))(\"while(r.pos<c){\")(\"var t=r.uint32()\");\n  if (mtype.group) gen(\"if((t&7)===4)\")(\"break\");\n  gen(\"switch(t>>>3){\");\n  var i = 0;\n  for (; i < /* initializes */mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n      type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n      ref = \"m\" + util.safeProp(field.name);\n    gen(\"case %i: {\", field.id);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(%s===util.emptyObject)\", ref)(\"%s={}\", ref)(\"var c2 = r.uint32()+r.pos\");\n      if (types.defaults[field.keyType] !== undefined) gen(\"k=%j\", types.defaults[field.keyType]);else gen(\"k=null\");\n      if (types.defaults[type] !== undefined) gen(\"value=%j\", types.defaults[type]);else gen(\"value=null\");\n      gen(\"while(r.pos<c2){\")(\"var tag2=r.uint32()\")(\"switch(tag2>>>3){\")(\"case 1: k=r.%s(); break\", field.keyType)(\"case 2:\");\n      if (types.basic[type] === undefined) gen(\"value=types[%i].decode(r,r.uint32())\", i); // can't be groups\n      else gen(\"value=r.%s()\", type);\n      gen(\"break\")(\"default:\")(\"r.skipType(tag2&7)\")(\"break\")(\"}\")(\"}\");\n      if (types.long[field.keyType] !== undefined) gen(\"%s[typeof k===\\\"object\\\"?util.longToHash(k):k]=value\", ref);else gen(\"%s[k]=value\", ref);\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!(%s&&%s.length))\", ref, ref)(\"%s=[]\", ref);\n\n      // Packable (always check for forward and backward compatiblity)\n      if (types.packed[type] !== undefined) gen(\"if((t&7)===2){\")(\"var c2=r.uint32()+r.pos\")(\"while(r.pos<c2)\")(\"%s.push(r.%s())\", ref, type)(\"}else\");\n\n      // Non-packed\n      if (types.basic[type] === undefined) gen(field.resolvedType.group ? \"%s.push(types[%i].decode(r))\" : \"%s.push(types[%i].decode(r,r.uint32()))\", ref, i);else gen(\"%s.push(r.%s())\", ref, type);\n\n      // Non-repeated\n    } else if (types.basic[type] === undefined) gen(field.resolvedType.group ? \"%s=types[%i].decode(r)\" : \"%s=types[%i].decode(r,r.uint32())\", ref, i);else gen(\"%s=r.%s()\", ref, type);\n    gen(\"break\")(\"}\");\n    // Unknown fields\n  }\n  gen(\"default:\")(\"r.skipType(t&7)\")(\"break\")(\"}\")(\"}\");\n\n  // Field presence\n  for (i = 0; i < mtype._fieldsArray.length; ++i) {\n    var rfield = mtype._fieldsArray[i];\n    if (rfield.required) gen(\"if(!m.hasOwnProperty(%j))\", rfield.name)(\"throw util.ProtocolError(%j,{instance:m})\", missing(rfield));\n  }\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline */\n}", "\"use strict\";\n\nmodule.exports = verifier;\nvar Enum = require(\"./enum\"),\n  util = require(\"./util\");\nfunction invalid(field, expected) {\n  return field.name + \": \" + expected + (field.repeated && expected !== \"array\" ? \"[]\" : field.map && expected !== \"object\" ? \"{k:\" + field.keyType + \"}\" : \"\") + \" expected\";\n}\n\n/**\n * Generates a partial value verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyValue(gen, field, fieldIndex, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(%s){\", ref)(\"default:\")(\"return%j\", invalid(field, \"enum value\"));\n      for (var keys = Object.keys(field.resolvedType.values), j = 0; j < keys.length; ++j) gen(\"case %i:\", field.resolvedType.values[keys[j]]);\n      gen(\"break\")(\"}\");\n    } else {\n      gen(\"{\")(\"var e=types[%i].verify(%s);\", fieldIndex, ref)(\"if(e)\")(\"return%j+e\", field.name + \".\")(\"}\");\n    }\n  } else {\n    switch (field.type) {\n      case \"int32\":\n      case \"uint32\":\n      case \"sint32\":\n      case \"fixed32\":\n      case \"sfixed32\":\n        gen(\"if(!util.isInteger(%s))\", ref)(\"return%j\", invalid(field, \"integer\"));\n        break;\n      case \"int64\":\n      case \"uint64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))\", ref, ref, ref, ref)(\"return%j\", invalid(field, \"integer|Long\"));\n        break;\n      case \"float\":\n      case \"double\":\n        gen(\"if(typeof %s!==\\\"number\\\")\", ref)(\"return%j\", invalid(field, \"number\"));\n        break;\n      case \"bool\":\n        gen(\"if(typeof %s!==\\\"boolean\\\")\", ref)(\"return%j\", invalid(field, \"boolean\"));\n        break;\n      case \"string\":\n        gen(\"if(!util.isString(%s))\", ref)(\"return%j\", invalid(field, \"string\"));\n        break;\n      case \"bytes\":\n        gen(\"if(!(%s&&typeof %s.length===\\\"number\\\"||util.isString(%s)))\", ref, ref, ref)(\"return%j\", invalid(field, \"buffer\"));\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a partial key verifier.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genVerifyKey(gen, field, ref) {\n  /* eslint-disable no-unexpected-multiline */\n  switch (field.keyType) {\n    case \"int32\":\n    case \"uint32\":\n    case \"sint32\":\n    case \"fixed32\":\n    case \"sfixed32\":\n      gen(\"if(!util.key32Re.test(%s))\", ref)(\"return%j\", invalid(field, \"integer key\"));\n      break;\n    case \"int64\":\n    case \"uint64\":\n    case \"sint64\":\n    case \"fixed64\":\n    case \"sfixed64\":\n      gen(\"if(!util.key64Re.test(%s))\", ref) // see comment above: x is ok, d is not\n      (\"return%j\", invalid(field, \"integer|Long key\"));\n      break;\n    case \"bool\":\n      gen(\"if(!util.key2Re.test(%s))\", ref)(\"return%j\", invalid(field, \"boolean key\"));\n      break;\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline */\n}\n\n/**\n * Generates a verifier specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction verifier(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n\n  var gen = util.codegen([\"m\"], mtype.name + \"$verify\")(\"if(typeof m!==\\\"object\\\"||m===null)\")(\"return%j\", \"object expected\");\n  var oneofs = mtype.oneofsArray,\n    seenFirstField = {};\n  if (oneofs.length) gen(\"var p={}\");\n  for (var i = 0; i < /* initializes */mtype.fieldsArray.length; ++i) {\n    var field = mtype._fieldsArray[i].resolve(),\n      ref = \"m\" + util.safeProp(field.name);\n    if (field.optional) gen(\"if(%s!=null&&m.hasOwnProperty(%j)){\", ref, field.name); // !== undefined && !== null\n\n    // map fields\n    if (field.map) {\n      gen(\"if(!util.isObject(%s))\", ref)(\"return%j\", invalid(field, \"object\"))(\"var k=Object.keys(%s)\", ref)(\"for(var i=0;i<k.length;++i){\");\n      genVerifyKey(gen, field, \"k[i]\");\n      genVerifyValue(gen, field, i, ref + \"[k[i]]\")(\"}\");\n\n      // repeated fields\n    } else if (field.repeated) {\n      gen(\"if(!Array.isArray(%s))\", ref)(\"return%j\", invalid(field, \"array\"))(\"for(var i=0;i<%s.length;++i){\", ref);\n      genVerifyValue(gen, field, i, ref + \"[i]\")(\"}\");\n\n      // required or present fields\n    } else {\n      if (field.partOf) {\n        var oneofProp = util.safeProp(field.partOf.name);\n        if (seenFirstField[field.partOf.name] === 1) gen(\"if(p%s===1)\", oneofProp)(\"return%j\", field.partOf.name + \": multiple values\");\n        seenFirstField[field.partOf.name] = 1;\n        gen(\"p%s=1\", oneofProp);\n      }\n      genVerifyValue(gen, field, i, ref);\n    }\n    if (field.optional) gen(\"}\");\n  }\n  return gen(\"return null\");\n  /* eslint-enable no-unexpected-multiline */\n}", "\"use strict\";\n\n/**\n * Runtime message from/to plain object converters.\n * @namespace\n */\nvar converter = exports;\nvar Enum = require(\"./enum\"),\n  util = require(\"./util\");\n\n/**\n * Generates a partial value fromObject conveter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_fromObject(gen, field, fieldIndex, prop) {\n  var defaultAlreadyEmitted = false;\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) {\n      gen(\"switch(d%s){\", prop);\n      for (var values = field.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {\n        // enum unknown values passthrough\n        if (values[keys[i]] === field.typeDefault && !defaultAlreadyEmitted) {\n          gen(\"default:\")(\"if(typeof(d%s)===\\\"number\\\"){m%s=d%s;break}\", prop, prop, prop);\n          if (!field.repeated) gen // fallback to default value only for\n          // arrays, to avoid leaving holes.\n          (\"break\"); // for non-repeated fields, just ignore\n          defaultAlreadyEmitted = true;\n        }\n        gen(\"case%j:\", keys[i])(\"case %i:\", values[keys[i]])(\"m%s=%j\", prop, values[keys[i]])(\"break\");\n      }\n      gen(\"}\");\n    } else gen(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s=types[%i].fromObject(d%s)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"m%s=Number(d%s)\", prop, prop); // also catches \"NaN\", \"Infinity\"\n        break;\n      case \"uint32\":\n      case \"fixed32\":\n        gen(\"m%s=d%s>>>0\", prop, prop);\n        break;\n      case \"int32\":\n      case \"sint32\":\n      case \"sfixed32\":\n        gen(\"m%s=d%s|0\", prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-next-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(util.Long)\")(\"(m%s=util.Long.fromValue(d%s)).unsigned=%j\", prop, prop, isUnsigned)(\"else if(typeof d%s===\\\"string\\\")\", prop)(\"m%s=parseInt(d%s,10)\", prop, prop)(\"else if(typeof d%s===\\\"number\\\")\", prop)(\"m%s=d%s\", prop, prop)(\"else if(typeof d%s===\\\"object\\\")\", prop)(\"m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)\", prop, prop, prop, isUnsigned ? \"true\" : \"\");\n        break;\n      case \"bytes\":\n        gen(\"if(typeof d%s===\\\"string\\\")\", prop)(\"util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)\", prop, prop, prop)(\"else if(d%s.length >= 0)\", prop)(\"m%s=d%s\", prop, prop);\n        break;\n      case \"string\":\n        gen(\"m%s=String(d%s)\", prop, prop);\n        break;\n      case \"bool\":\n        gen(\"m%s=Boolean(d%s)\", prop, prop);\n        break;\n      /* default: gen\n          (\"m%s=d%s\", prop, prop);\n          break; */\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a plain object to runtime message converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.fromObject = function fromObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray;\n  var gen = util.codegen([\"d\"], mtype.name + \"$fromObject\")(\"if(d instanceof this.ctor)\")(\"return d\");\n  if (!fields.length) return gen(\"return new this.ctor\");\n  gen(\"var m=new this.ctor\");\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n      prop = util.safeProp(field.name);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(d%s){\", prop)(\"if(typeof d%s!==\\\"object\\\")\", prop)(\"throw TypeError(%j)\", field.fullName + \": object expected\")(\"m%s={}\", prop)(\"for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[ks[i]]\")(\"}\")(\"}\");\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(d%s){\", prop)(\"if(!Array.isArray(d%s))\", prop)(\"throw TypeError(%j)\", field.fullName + \": array expected\")(\"m%s=[]\", prop)(\"for(var i=0;i<d%s.length;++i){\", prop);\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop + \"[i]\")(\"}\")(\"}\");\n\n      // Non-repeated fields\n    } else {\n      if (!(field.resolvedType instanceof Enum)) gen // no need to test for null/undefined if an enum (uses switch)\n      (\"if(d%s!=null){\", prop); // !== undefined && !== null\n      genValuePartial_fromObject(gen, field, /* not sorted */i, prop);\n      if (!(field.resolvedType instanceof Enum)) gen(\"}\");\n    }\n  }\n  return gen(\"return m\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};\n\n/**\n * Generates a partial value toObject converter.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} prop Property reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genValuePartial_toObject(gen, field, fieldIndex, prop) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  if (field.resolvedType) {\n    if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?(types[%i].values[m%s]===undefined?m%s:types[%i].values[m%s]):m%s\", prop, fieldIndex, prop, prop, fieldIndex, prop, prop);else gen(\"d%s=types[%i].toObject(m%s,o)\", prop, fieldIndex, prop);\n  } else {\n    var isUnsigned = false;\n    switch (field.type) {\n      case \"double\":\n      case \"float\":\n        gen(\"d%s=o.json&&!isFinite(m%s)?String(m%s):m%s\", prop, prop, prop, prop);\n        break;\n      case \"uint64\":\n        isUnsigned = true;\n      // eslint-disable-next-line no-fallthrough\n      case \"int64\":\n      case \"sint64\":\n      case \"fixed64\":\n      case \"sfixed64\":\n        gen(\"if(typeof m%s===\\\"number\\\")\", prop)(\"d%s=o.longs===String?String(m%s):m%s\", prop, prop, prop)(\"else\") // Long-like\n        (\"d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s\", prop, prop, prop, prop, isUnsigned ? \"true\" : \"\", prop);\n        break;\n      case \"bytes\":\n        gen(\"d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s\", prop, prop, prop, prop, prop);\n        break;\n      default:\n        gen(\"d%s=m%s\", prop, prop);\n        break;\n    }\n  }\n  return gen;\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}\n\n/**\n * Generates a runtime message to plain object converter specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nconverter.toObject = function toObject(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var fields = mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  if (!fields.length) return util.codegen()(\"return {}\");\n  var gen = util.codegen([\"m\", \"o\"], mtype.name + \"$toObject\")(\"if(!o)\")(\"o={}\")(\"var d={}\");\n  var repeatedFields = [],\n    mapFields = [],\n    normalFields = [],\n    i = 0;\n  for (; i < fields.length; ++i) if (!fields[i].partOf) (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);\n  if (repeatedFields.length) {\n    gen(\"if(o.arrays||o.defaults){\");\n    for (i = 0; i < repeatedFields.length; ++i) gen(\"d%s=[]\", util.safeProp(repeatedFields[i].name));\n    gen(\"}\");\n  }\n  if (mapFields.length) {\n    gen(\"if(o.objects||o.defaults){\");\n    for (i = 0; i < mapFields.length; ++i) gen(\"d%s={}\", util.safeProp(mapFields[i].name));\n    gen(\"}\");\n  }\n  if (normalFields.length) {\n    gen(\"if(o.defaults){\");\n    for (i = 0; i < normalFields.length; ++i) {\n      var field = normalFields[i],\n        prop = util.safeProp(field.name);\n      if (field.resolvedType instanceof Enum) gen(\"d%s=o.enums===String?%j:%j\", prop, field.resolvedType.valuesById[field.typeDefault], field.typeDefault);else if (field.long) gen(\"if(util.Long){\")(\"var n=new util.Long(%i,%i,%j)\", field.typeDefault.low, field.typeDefault.high, field.typeDefault.unsigned)(\"d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n\", prop)(\"}else\")(\"d%s=o.longs===String?%j:%i\", prop, field.typeDefault.toString(), field.typeDefault.toNumber());else if (field.bytes) {\n        var arrayDefault = \"[\" + Array.prototype.slice.call(field.typeDefault).join(\",\") + \"]\";\n        gen(\"if(o.bytes===String)d%s=%j\", prop, String.fromCharCode.apply(String, field.typeDefault))(\"else{\")(\"d%s=%s\", prop, arrayDefault)(\"if(o.bytes!==Array)d%s=util.newBuffer(d%s)\", prop, prop)(\"}\");\n      } else gen(\"d%s=%j\", prop, field.typeDefault); // also messages (=null)\n    }\n    gen(\"}\");\n  }\n  var hasKs2 = false;\n  for (i = 0; i < fields.length; ++i) {\n    var field = fields[i],\n      index = mtype._fieldsArray.indexOf(field),\n      prop = util.safeProp(field.name);\n    if (field.map) {\n      if (!hasKs2) {\n        hasKs2 = true;\n        gen(\"var ks2\");\n      }\n      gen(\"if(m%s&&(ks2=Object.keys(m%s)).length){\", prop, prop)(\"d%s={}\", prop)(\"for(var j=0;j<ks2.length;++j){\");\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[ks2[j]]\")(\"}\");\n    } else if (field.repeated) {\n      gen(\"if(m%s&&m%s.length){\", prop, prop)(\"d%s=[]\", prop)(\"for(var j=0;j<m%s.length;++j){\", prop);\n      genValuePartial_toObject(gen, field, /* sorted */index, prop + \"[j]\")(\"}\");\n    } else {\n      gen(\"if(m%s!=null&&m.hasOwnProperty(%j)){\", prop, field.name); // !== undefined && !== null\n      genValuePartial_toObject(gen, field, /* sorted */index, prop);\n      if (field.partOf) gen(\"if(o.oneofs)\")(\"d%s=%j\", util.safeProp(field.partOf.name), field.name);\n    }\n    gen(\"}\");\n  }\n  return gen(\"return d\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n};", "\"use strict\";\n\n/**\n * Wrappers for common types.\n * @type {Object.<string,IWrapper>}\n * @const\n */\nvar wrappers = exports;\nvar Message = require(\"./message\");\n\n/**\n * From object converter part of an {@link IWrapper}.\n * @typedef WrapperFromObjectConverter\n * @type {function}\n * @param {Object.<string,*>} object Plain object\n * @returns {Message<{}>} Message instance\n * @this Type\n */\n\n/**\n * To object converter part of an {@link IWrapper}.\n * @typedef WrapperToObjectConverter\n * @type {function}\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n * @this Type\n */\n\n/**\n * Common type wrapper part of {@link wrappers}.\n * @interface IWrapper\n * @property {WrapperFromObjectConverter} [fromObject] From object converter\n * @property {WrapperToObjectConverter} [toObject] To object converter\n */\n\n// Custom wrapper for Any\nwrappers[\".google.protobuf.Any\"] = {\n  fromObject: function (object) {\n    // unwrap value type if mapped\n    if (object && object[\"@type\"]) {\n      // Only use fully qualified type name after the last '/'\n      var name = object[\"@type\"].substring(object[\"@type\"].lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n      if (type) {\n        // type_url does not accept leading \".\"\n        var type_url = object[\"@type\"].charAt(0) === \".\" ? object[\"@type\"].slice(1) : object[\"@type\"];\n        // type_url prefix is optional, but path seperator is required\n        if (type_url.indexOf(\"/\") === -1) {\n          type_url = \"/\" + type_url;\n        }\n        return this.create({\n          type_url: type_url,\n          value: type.encode(type.fromObject(object)).finish()\n        });\n      }\n    }\n    return this.fromObject(object);\n  },\n  toObject: function (message, options) {\n    // Default prefix\n    var googleApi = \"type.googleapis.com/\";\n    var prefix = \"\";\n    var name = \"\";\n\n    // decode value if requested and unmapped\n    if (options && options.json && message.type_url && message.value) {\n      // Only use fully qualified type name after the last '/'\n      name = message.type_url.substring(message.type_url.lastIndexOf(\"/\") + 1);\n      // Separate the prefix used\n      prefix = message.type_url.substring(0, message.type_url.lastIndexOf(\"/\") + 1);\n      var type = this.lookup(name);\n      /* istanbul ignore else */\n      if (type) message = type.decode(message.value);\n    }\n\n    // wrap value if unmapped\n    if (!(message instanceof this.ctor) && message instanceof Message) {\n      var object = message.$type.toObject(message, options);\n      var messageName = message.$type.fullName[0] === \".\" ? message.$type.fullName.slice(1) : message.$type.fullName;\n      // Default to type.googleapis.com prefix if no prefix is used\n      if (prefix === \"\") {\n        prefix = googleApi;\n      }\n      name = prefix + messageName;\n      object[\"@type\"] = name;\n      return object;\n    }\n    return this.toObject(message, options);\n  }\n};", "\"use strict\";\n\nmodule.exports = Type;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Type.prototype = Object.create(Namespace.prototype)).constructor = Type).className = \"Type\";\nvar Enum = require(\"./enum\"),\n  OneOf = require(\"./oneof\"),\n  Field = require(\"./field\"),\n  MapField = require(\"./mapfield\"),\n  Service = require(\"./service\"),\n  Message = require(\"./message\"),\n  Reader = require(\"./reader\"),\n  Writer = require(\"./writer\"),\n  util = require(\"./util\"),\n  encoder = require(\"./encoder\"),\n  decoder = require(\"./decoder\"),\n  verifier = require(\"./verifier\"),\n  converter = require(\"./converter\"),\n  wrappers = require(\"./wrappers\");\n\n/**\n * Constructs a new reflected message type instance.\n * @classdesc Reflected message type.\n * @extends NamespaceBase\n * @constructor\n * @param {string} name Message name\n * @param {Object.<string,*>} [options] Declared options\n */\nfunction Type(name, options) {\n  Namespace.call(this, name, options);\n\n  /**\n   * Message fields.\n   * @type {Object.<string,Field>}\n   */\n  this.fields = {}; // toJSON, marker\n\n  /**\n   * Oneofs declared within this namespace, if any.\n   * @type {Object.<string,OneOf>}\n   */\n  this.oneofs = undefined; // toJSON\n\n  /**\n   * Extension ranges, if any.\n   * @type {number[][]}\n   */\n  this.extensions = undefined; // toJSON\n\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n  this.reserved = undefined; // toJSON\n\n  /*?\n   * Whether this type is a legacy group.\n   * @type {boolean|undefined}\n   */\n  this.group = undefined; // toJSON\n\n  /**\n   * Cached fields by id.\n   * @type {Object.<number,Field>|null}\n   * @private\n   */\n  this._fieldsById = null;\n\n  /**\n   * Cached fields as an array.\n   * @type {Field[]|null}\n   * @private\n   */\n  this._fieldsArray = null;\n\n  /**\n   * Cached oneofs as an array.\n   * @type {OneOf[]|null}\n   * @private\n   */\n  this._oneofsArray = null;\n\n  /**\n   * Cached constructor.\n   * @type {Constructor<{}>}\n   * @private\n   */\n  this._ctor = null;\n}\nObject.defineProperties(Type.prototype, {\n  /**\n   * Message fields by id.\n   * @name Type#fieldsById\n   * @type {Object.<number,Field>}\n   * @readonly\n   */\n  fieldsById: {\n    get: function () {\n      /* istanbul ignore if */\n      if (this._fieldsById) return this._fieldsById;\n      this._fieldsById = {};\n      for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {\n        var field = this.fields[names[i]],\n          id = field.id;\n\n        /* istanbul ignore if */\n        if (this._fieldsById[id]) throw Error(\"duplicate id \" + id + \" in \" + this);\n        this._fieldsById[id] = field;\n      }\n      return this._fieldsById;\n    }\n  },\n  /**\n   * Fields of this message as an array for iteration.\n   * @name Type#fieldsArray\n   * @type {Field[]}\n   * @readonly\n   */\n  fieldsArray: {\n    get: function () {\n      return this._fieldsArray || (this._fieldsArray = util.toArray(this.fields));\n    }\n  },\n  /**\n   * Oneofs of this message as an array for iteration.\n   * @name Type#oneofsArray\n   * @type {OneOf[]}\n   * @readonly\n   */\n  oneofsArray: {\n    get: function () {\n      return this._oneofsArray || (this._oneofsArray = util.toArray(this.oneofs));\n    }\n  },\n  /**\n   * The registered constructor, if any registered, otherwise a generic constructor.\n   * Assigning a function replaces the internal constructor. If the function does not extend {@link Message} yet, its prototype will be setup accordingly and static methods will be populated. If it already extends {@link Message}, it will just replace the internal constructor.\n   * @name Type#ctor\n   * @type {Constructor<{}>}\n   */\n  ctor: {\n    get: function () {\n      return this._ctor || (this.ctor = Type.generateConstructor(this)());\n    },\n    set: function (ctor) {\n      // Ensure proper prototype\n      var prototype = ctor.prototype;\n      if (!(prototype instanceof Message)) {\n        (ctor.prototype = new Message()).constructor = ctor;\n        util.merge(ctor.prototype, prototype);\n      }\n\n      // Classes and messages reference their reflected type\n      ctor.$type = ctor.prototype.$type = this;\n\n      // Mix in static methods\n      util.merge(ctor, Message, true);\n      this._ctor = ctor;\n\n      // Messages have non-enumerable default values on their prototype\n      var i = 0;\n      for (; i < /* initializes */this.fieldsArray.length; ++i) this._fieldsArray[i].resolve(); // ensures a proper value\n\n      // Messages have non-enumerable getters and setters for each virtual oneof field\n      var ctorProperties = {};\n      for (i = 0; i < /* initializes */this.oneofsArray.length; ++i) ctorProperties[this._oneofsArray[i].resolve().name] = {\n        get: util.oneOfGetter(this._oneofsArray[i].oneof),\n        set: util.oneOfSetter(this._oneofsArray[i].oneof)\n      };\n      if (i) Object.defineProperties(ctor.prototype, ctorProperties);\n    }\n  }\n});\n\n/**\n * Generates a constructor function for the specified type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nType.generateConstructor = function generateConstructor(mtype) {\n  /* eslint-disable no-unexpected-multiline */\n  var gen = util.codegen([\"p\"], mtype.name);\n  // explicitly initialize mutable object/array fields so that these aren't just inherited from the prototype\n  for (var i = 0, field; i < mtype.fieldsArray.length; ++i) if ((field = mtype._fieldsArray[i]).map) gen(\"this%s={}\", util.safeProp(field.name));else if (field.repeated) gen(\"this%s=[]\", util.safeProp(field.name));\n  return gen(\"if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)\") // omit undefined or null\n  (\"this[ks[i]]=p[ks[i]]\");\n  /* eslint-enable no-unexpected-multiline */\n};\nfunction clearCache(type) {\n  type._fieldsById = type._fieldsArray = type._oneofsArray = null;\n  delete type.encode;\n  delete type.decode;\n  delete type.verify;\n  return type;\n}\n\n/**\n * Message type descriptor.\n * @interface IType\n * @extends INamespace\n * @property {Object.<string,IOneOf>} [oneofs] Oneof descriptors\n * @property {Object.<string,IField>} fields Field descriptors\n * @property {number[][]} [extensions] Extension ranges\n * @property {Array.<number[]|string>} [reserved] Reserved ranges\n * @property {boolean} [group=false] Whether a legacy group or not\n */\n\n/**\n * Creates a message type from a message type descriptor.\n * @param {string} name Message name\n * @param {IType} json Message type descriptor\n * @returns {Type} Created message type\n */\nType.fromJSON = function fromJSON(name, json) {\n  var type = new Type(name, json.options);\n  type.extensions = json.extensions;\n  type.reserved = json.reserved;\n  var names = Object.keys(json.fields),\n    i = 0;\n  for (; i < names.length; ++i) type.add((typeof json.fields[names[i]].keyType !== \"undefined\" ? MapField.fromJSON : Field.fromJSON)(names[i], json.fields[names[i]]));\n  if (json.oneofs) for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i) type.add(OneOf.fromJSON(names[i], json.oneofs[names[i]]));\n  if (json.nested) for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {\n    var nested = json.nested[names[i]];\n    type.add(\n    // most to least likely\n    (nested.id !== undefined ? Field.fromJSON : nested.fields !== undefined ? Type.fromJSON : nested.values !== undefined ? Enum.fromJSON : nested.methods !== undefined ? Service.fromJSON : Namespace.fromJSON)(names[i], nested));\n  }\n  if (json.extensions && json.extensions.length) type.extensions = json.extensions;\n  if (json.reserved && json.reserved.length) type.reserved = json.reserved;\n  if (json.group) type.group = true;\n  if (json.comment) type.comment = json.comment;\n  return type;\n};\n\n/**\n * Converts this message type to a message type descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IType} Message type descriptor\n */\nType.prototype.toJSON = function toJSON(toJSONOptions) {\n  var inherited = Namespace.prototype.toJSON.call(this, toJSONOptions);\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", inherited && inherited.options || undefined, \"oneofs\", Namespace.arrayToJSON(this.oneofsArray, toJSONOptions), \"fields\", Namespace.arrayToJSON(this.fieldsArray.filter(function (obj) {\n    return !obj.declaringField;\n  }), toJSONOptions) || {}, \"extensions\", this.extensions && this.extensions.length ? this.extensions : undefined, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"group\", this.group || undefined, \"nested\", inherited && inherited.nested || undefined, \"comment\", keepComments ? this.comment : undefined]);\n};\n\n/**\n * @override\n */\nType.prototype.resolveAll = function resolveAll() {\n  var fields = this.fieldsArray,\n    i = 0;\n  while (i < fields.length) fields[i++].resolve();\n  var oneofs = this.oneofsArray;\n  i = 0;\n  while (i < oneofs.length) oneofs[i++].resolve();\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n/**\n * @override\n */\nType.prototype.get = function get(name) {\n  return this.fields[name] || this.oneofs && this.oneofs[name] || this.nested && this.nested[name] || null;\n};\n\n/**\n * Adds a nested object to this type.\n * @param {ReflectionObject} object Nested object to add\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a nested object with this name or, if a field, when there is already a field with this id\n */\nType.prototype.add = function add(object) {\n  if (this.get(object.name)) throw Error(\"duplicate name '\" + object.name + \"' in \" + this);\n  if (object instanceof Field && object.extend === undefined) {\n    // NOTE: Extension fields aren't actual fields on the declaring type, but nested objects.\n    // The root object takes care of adding distinct sister-fields to the respective extended\n    // type instead.\n\n    // avoids calling the getter if not absolutely necessary because it's called quite frequently\n    if (this._fieldsById ? /* istanbul ignore next */this._fieldsById[object.id] : this.fieldsById[object.id]) throw Error(\"duplicate id \" + object.id + \" in \" + this);\n    if (this.isReservedId(object.id)) throw Error(\"id \" + object.id + \" is reserved in \" + this);\n    if (this.isReservedName(object.name)) throw Error(\"name '\" + object.name + \"' is reserved in \" + this);\n    if (object.parent) object.parent.remove(object);\n    this.fields[object.name] = object;\n    object.message = this;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    if (!this.oneofs) this.oneofs = {};\n    this.oneofs[object.name] = object;\n    object.onAdd(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.add.call(this, object);\n};\n\n/**\n * Removes a nested object from this type.\n * @param {ReflectionObject} object Nested object to remove\n * @returns {Type} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `object` is not a member of this type\n */\nType.prototype.remove = function remove(object) {\n  if (object instanceof Field && object.extend === undefined) {\n    // See Type#add for the reason why extension fields are excluded here.\n\n    /* istanbul ignore if */\n    if (!this.fields || this.fields[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.fields[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  if (object instanceof OneOf) {\n    /* istanbul ignore if */\n    if (!this.oneofs || this.oneofs[object.name] !== object) throw Error(object + \" is not a member of \" + this);\n    delete this.oneofs[object.name];\n    object.parent = null;\n    object.onRemove(this);\n    return clearCache(this);\n  }\n  return Namespace.prototype.remove.call(this, object);\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nType.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};\n\n/**\n * Creates a new message of this type using the specified properties.\n * @param {Object.<string,*>} [properties] Properties to set\n * @returns {Message<{}>} Message instance\n */\nType.prototype.create = function create(properties) {\n  return new this.ctor(properties);\n};\n\n/**\n * Sets up {@link Type#encode|encode}, {@link Type#decode|decode} and {@link Type#verify|verify}.\n * @returns {Type} `this`\n */\nType.prototype.setup = function setup() {\n  // Sets up everything at once so that the prototype chain does not have to be re-evaluated\n  // multiple times (V8, soft-deopt prototype-check).\n\n  var fullName = this.fullName,\n    types = [];\n  for (var i = 0; i < /* initializes */this.fieldsArray.length; ++i) types.push(this._fieldsArray[i].resolve().resolvedType);\n\n  // Replace setup methods with type-specific generated functions\n  this.encode = encoder(this)({\n    Writer: Writer,\n    types: types,\n    util: util\n  });\n  this.decode = decoder(this)({\n    Reader: Reader,\n    types: types,\n    util: util\n  });\n  this.verify = verifier(this)({\n    types: types,\n    util: util\n  });\n  this.fromObject = converter.fromObject(this)({\n    types: types,\n    util: util\n  });\n  this.toObject = converter.toObject(this)({\n    types: types,\n    util: util\n  });\n\n  // Inject custom wrappers for common types\n  var wrapper = wrappers[fullName];\n  if (wrapper) {\n    var originalThis = Object.create(this);\n    // if (wrapper.fromObject) {\n    originalThis.fromObject = this.fromObject;\n    this.fromObject = wrapper.fromObject.bind(originalThis);\n    // }\n    // if (wrapper.toObject) {\n    originalThis.toObject = this.toObject;\n    this.toObject = wrapper.toObject.bind(originalThis);\n    // }\n  }\n  return this;\n};\n\n/**\n * Encodes a message of this type. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encode = function encode_setup(message, writer) {\n  return this.setup().encode(message, writer); // overrides this method\n};\n\n/**\n * Encodes a message of this type preceeded by its byte length as a varint. Does not implicitly {@link Type#verify|verify} messages.\n * @param {Message<{}>|Object.<string,*>} message Message instance or plain object\n * @param {Writer} [writer] Writer to encode to\n * @returns {Writer} writer\n */\nType.prototype.encodeDelimited = function encodeDelimited(message, writer) {\n  return this.encode(message, writer && writer.len ? writer.fork() : writer).ldelim();\n};\n\n/**\n * Decodes a message of this type.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @param {number} [length] Length of the message, if known beforehand\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError<{}>} If required fields are missing\n */\nType.prototype.decode = function decode_setup(reader, length) {\n  return this.setup().decode(reader, length); // overrides this method\n};\n\n/**\n * Decodes a message of this type preceeded by its byte length as a varint.\n * @param {Reader|Uint8Array} reader Reader or buffer to decode from\n * @returns {Message<{}>} Decoded message\n * @throws {Error} If the payload is not a reader or valid buffer\n * @throws {util.ProtocolError} If required fields are missing\n */\nType.prototype.decodeDelimited = function decodeDelimited(reader) {\n  if (!(reader instanceof Reader)) reader = Reader.create(reader);\n  return this.decode(reader, reader.uint32());\n};\n\n/**\n * Verifies that field values are valid and that required fields are present.\n * @param {Object.<string,*>} message Plain object to verify\n * @returns {null|string} `null` if valid, otherwise the reason why it is not\n */\nType.prototype.verify = function verify_setup(message) {\n  return this.setup().verify(message); // overrides this method\n};\n\n/**\n * Creates a new message of this type from a plain object. Also converts values to their respective internal types.\n * @param {Object.<string,*>} object Plain object to convert\n * @returns {Message<{}>} Message instance\n */\nType.prototype.fromObject = function fromObject(object) {\n  return this.setup().fromObject(object);\n};\n\n/**\n * Conversion options as used by {@link Type#toObject} and {@link Message.toObject}.\n * @interface IConversionOptions\n * @property {Function} [longs] Long conversion type.\n * Valid values are `String` and `Number` (the global types).\n * Defaults to copy the present value, which is a possibly unsafe number without and a {@link Long} with a long library.\n * @property {Function} [enums] Enum value conversion type.\n * Only valid value is `String` (the global type).\n * Defaults to copy the present value, which is the numeric id.\n * @property {Function} [bytes] Bytes value conversion type.\n * Valid values are `Array` and (a base64 encoded) `String` (the global types).\n * Defaults to copy the present value, which usually is a Buffer under node and an Uint8Array in the browser.\n * @property {boolean} [defaults=false] Also sets default values on the resulting object\n * @property {boolean} [arrays=false] Sets empty arrays for missing repeated fields even if `defaults=false`\n * @property {boolean} [objects=false] Sets empty objects for missing map fields even if `defaults=false`\n * @property {boolean} [oneofs=false] Includes virtual oneof properties set to the present field's name, if any\n * @property {boolean} [json=false] Performs additional JSON compatibility conversions, i.e. NaN and Infinity to strings\n */\n\n/**\n * Creates a plain object from a message of this type. Also converts values to other types if specified.\n * @param {Message<{}>} message Message instance\n * @param {IConversionOptions} [options] Conversion options\n * @returns {Object.<string,*>} Plain object\n */\nType.prototype.toObject = function toObject(message, options) {\n  return this.setup().toObject(message, options);\n};\n\n/**\n * Decorator function as returned by {@link Type.d} (TypeScript).\n * @typedef TypeDecorator\n * @type {function}\n * @param {Constructor<T>} target Target constructor\n * @returns {undefined}\n * @template T extends Message<T>\n */\n\n/**\n * Type decorator (TypeScript).\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {TypeDecorator<T>} Decorator function\n * @template T extends Message<T>\n */\nType.d = function decorateType(typeName) {\n  return function typeDecorator(target) {\n    util.decorateType(target, typeName);\n  };\n};", "\"use strict\";\n\nmodule.exports = Root;\n\n// extends Namespace\nvar Namespace = require(\"./namespace\");\n((Root.prototype = Object.create(Namespace.prototype)).constructor = Root).className = \"Root\";\nvar Field = require(\"./field\"),\n  Enum = require(\"./enum\"),\n  OneOf = require(\"./oneof\"),\n  util = require(\"./util\");\nvar Type,\n  // cyclic\n  parse,\n  // might be excluded\n  common; // \"\n\n/**\n * Constructs a new root namespace instance.\n * @classdesc Root namespace wrapping all types, enums, services, sub-namespaces etc. that belong together.\n * @extends NamespaceBase\n * @constructor\n * @param {Object.<string,*>} [options] Top level options\n */\nfunction Root(options) {\n  Namespace.call(this, \"\", options);\n\n  /**\n   * Deferred extension fields.\n   * @type {Field[]}\n   */\n  this.deferred = [];\n\n  /**\n   * Resolved file names of loaded files.\n   * @type {string[]}\n   */\n  this.files = [];\n}\n\n/**\n * Loads a namespace descriptor into a root namespace.\n * @param {INamespace} json Nameespace descriptor\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted\n * @returns {Root} Root namespace\n */\nRoot.fromJSON = function fromJSON(json, root) {\n  if (!root) root = new Root();\n  if (json.options) root.setOptions(json.options);\n  return root.addJSON(json.nested);\n};\n\n/**\n * Resolves the path of an imported file, relative to the importing origin.\n * This method exists so you can override it with your own logic in case your imports are scattered over multiple directories.\n * @function\n * @param {string} origin The file name of the importing file\n * @param {string} target The file name being imported\n * @returns {string|null} Resolved path to `target` or `null` to skip the file\n */\nRoot.prototype.resolvePath = util.path.resolve;\n\n/**\n * Fetch content from file path or url\n * This method exists so you can override it with your own logic.\n * @function\n * @param {string} path File path or url\n * @param {FetchCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.fetch = util.fetch;\n\n// A symbol-like function to safely signal synchronous loading\n/* istanbul ignore next */\nfunction SYNC() {} // eslint-disable-line no-empty-function\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} options Parse options\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n */\nRoot.prototype.load = function load(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = undefined;\n  }\n  var self = this;\n  if (!callback) return util.asPromise(load, self, filename, options);\n  var sync = callback === SYNC; // undocumented\n\n  // Finishes loading by calling the callback (exactly once)\n  function finish(err, root) {\n    /* istanbul ignore if */\n    if (!callback) return;\n    if (sync) throw err;\n    var cb = callback;\n    callback = null;\n    cb(err, root);\n  }\n\n  // Bundled definition existence checking\n  function getBundledFileName(filename) {\n    var idx = filename.lastIndexOf(\"google/protobuf/\");\n    if (idx > -1) {\n      var altname = filename.substring(idx);\n      if (altname in common) return altname;\n    }\n    return null;\n  }\n\n  // Processes a single file\n  function process(filename, source) {\n    try {\n      if (util.isString(source) && source.charAt(0) === \"{\") source = JSON.parse(source);\n      if (!util.isString(source)) self.setOptions(source.options).addJSON(source.nested);else {\n        parse.filename = filename;\n        var parsed = parse(source, self, options),\n          resolved,\n          i = 0;\n        if (parsed.imports) for (; i < parsed.imports.length; ++i) if (resolved = getBundledFileName(parsed.imports[i]) || self.resolvePath(filename, parsed.imports[i])) fetch(resolved);\n        if (parsed.weakImports) for (i = 0; i < parsed.weakImports.length; ++i) if (resolved = getBundledFileName(parsed.weakImports[i]) || self.resolvePath(filename, parsed.weakImports[i])) fetch(resolved, true);\n      }\n    } catch (err) {\n      finish(err);\n    }\n    if (!sync && !queued) finish(null, self); // only once anyway\n  }\n\n  // Fetches a single file\n  function fetch(filename, weak) {\n    filename = getBundledFileName(filename) || filename;\n\n    // Skip if already loaded / attempted\n    if (self.files.indexOf(filename) > -1) return;\n    self.files.push(filename);\n\n    // Shortcut bundled definitions\n    if (filename in common) {\n      if (sync) process(filename, common[filename]);else {\n        ++queued;\n        setTimeout(function () {\n          --queued;\n          process(filename, common[filename]);\n        });\n      }\n      return;\n    }\n\n    // Otherwise fetch from disk or network\n    if (sync) {\n      var source;\n      try {\n        source = util.fs.readFileSync(filename).toString(\"utf8\");\n      } catch (err) {\n        if (!weak) finish(err);\n        return;\n      }\n      process(filename, source);\n    } else {\n      ++queued;\n      self.fetch(filename, function (err, source) {\n        --queued;\n        /* istanbul ignore if */\n        if (!callback) return; // terminated meanwhile\n        if (err) {\n          /* istanbul ignore else */\n          if (!weak) finish(err);else if (!queued)\n            // can't be covered reliably\n            finish(null, self);\n          return;\n        }\n        process(filename, source);\n      });\n    }\n  }\n  var queued = 0;\n\n  // Assembling the root namespace doesn't require working type\n  // references anymore, so we can load everything in parallel\n  if (util.isString(filename)) filename = [filename];\n  for (var i = 0, resolved; i < filename.length; ++i) if (resolved = self.resolvePath(\"\", filename[i])) fetch(resolved);\n  if (sync) return self;\n  if (!queued) finish(null, self);\n  return undefined;\n};\n// function load(filename:string, options:IParseOptions, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and calls the callback.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into this root namespace and returns a promise.\n * @function Root#load\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Promise<Root>} Promise\n * @variation 3\n */\n// function load(filename:string, [options:IParseOptions]):Promise<Root>\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into this root namespace (node only).\n * @function Root#loadSync\n * @param {string|string[]} filename Names of one or multiple files to load\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n */\nRoot.prototype.loadSync = function loadSync(filename, options) {\n  if (!util.isNode) throw Error(\"not supported\");\n  return this.load(filename, options, SYNC);\n};\n\n/**\n * @override\n */\nRoot.prototype.resolveAll = function resolveAll() {\n  if (this.deferred.length) throw Error(\"unresolvable extensions: \" + this.deferred.map(function (field) {\n    return \"'extend \" + field.extend + \"' in \" + field.parent.fullName;\n  }).join(\", \"));\n  return Namespace.prototype.resolveAll.call(this);\n};\n\n// only uppercased (and thus conflict-free) children are exposed, see below\nvar exposeRe = /^[A-Z]/;\n\n/**\n * Handles a deferred declaring extension field by creating a sister field to represent it within its extended type.\n * @param {Root} root Root instance\n * @param {Field} field Declaring extension field witin the declaring type\n * @returns {boolean} `true` if successfully added to the extended type, `false` otherwise\n * @inner\n * @ignore\n */\nfunction tryHandleExtension(root, field) {\n  var extendedType = field.parent.lookup(field.extend);\n  if (extendedType) {\n    var sisterField = new Field(field.fullName, field.id, field.type, field.rule, undefined, field.options);\n    //do not allow to extend same field twice to prevent the error\n    if (extendedType.get(sisterField.name)) {\n      return true;\n    }\n    sisterField.declaringField = field;\n    field.extensionField = sisterField;\n    extendedType.add(sisterField);\n    return true;\n  }\n  return false;\n}\n\n/**\n * Called when any object is added to this root or its sub-namespaces.\n * @param {ReflectionObject} object Object added\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleAdd = function _handleAdd(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field (implies not part of a oneof) */object.extend !== undefined && /* not already handled */!object.extensionField) if (!tryHandleExtension(this, object)) this.deferred.push(object);\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) object.parent[object.name] = object.values; // expose enum values as property of its parent\n  } else if (!(object instanceof OneOf)) /* everything else is a namespace */{\n      if (object instanceof Type)\n        // Try to handle any deferred extensions\n        for (var i = 0; i < this.deferred.length;) if (tryHandleExtension(this, this.deferred[i])) this.deferred.splice(i, 1);else ++i;\n      for (var j = 0; j < /* initializes */object.nestedArray.length; ++j)\n      // recurse into the namespace\n      this._handleAdd(object._nestedArray[j]);\n      if (exposeRe.test(object.name)) object.parent[object.name] = object; // expose namespace as property of its parent\n    }\n\n  // The above also adds uppercased (and thus conflict-free) nested types, services and enums as\n  // properties of namespaces just like static code does. This allows using a .d.ts generated for\n  // a static module with reflection-based solutions where the condition is met.\n};\n\n/**\n * Called when any object is removed from this root or its sub-namespaces.\n * @param {ReflectionObject} object Object removed\n * @returns {undefined}\n * @private\n */\nRoot.prototype._handleRemove = function _handleRemove(object) {\n  if (object instanceof Field) {\n    if ( /* an extension field */object.extend !== undefined) {\n      if ( /* already handled */object.extensionField) {\n        // remove its sister field\n        object.extensionField.parent.remove(object.extensionField);\n        object.extensionField = null;\n      } else {\n        // cancel the extension\n        var index = this.deferred.indexOf(object);\n        /* istanbul ignore else */\n        if (index > -1) this.deferred.splice(index, 1);\n      }\n    }\n  } else if (object instanceof Enum) {\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose enum values\n  } else if (object instanceof Namespace) {\n    for (var i = 0; i < /* initializes */object.nestedArray.length; ++i)\n    // recurse into the namespace\n    this._handleRemove(object._nestedArray[i]);\n    if (exposeRe.test(object.name)) delete object.parent[object.name]; // unexpose namespaces\n  }\n};\n\n// Sets up cyclic dependencies (called in index-light)\nRoot._configure = function (Type_, parse_, common_) {\n  Type = Type_;\n  parse = parse_;\n  common = common_;\n};", "\"use strict\";\n\n/**\n * Various utility functions.\n * @namespace\n */\nvar util = module.exports = require(\"./util/minimal\");\nvar roots = require(\"./roots\");\nvar Type,\n  // cyclic\n  Enum;\nutil.codegen = require(\"@protobufjs/codegen\");\nutil.fetch = require(\"@protobufjs/fetch\");\nutil.path = require(\"@protobufjs/path\");\n\n/**\n * Node's fs module if available.\n * @type {Object.<string,*>}\n */\nutil.fs = util.inquire(\"fs\");\n\n/**\n * Converts an object's values to an array.\n * @param {Object.<string,*>} object Object to convert\n * @returns {Array.<*>} Converted array\n */\nutil.toArray = function toArray(object) {\n  if (object) {\n    var keys = Object.keys(object),\n      array = new Array(keys.length),\n      index = 0;\n    while (index < keys.length) array[index] = object[keys[index++]];\n    return array;\n  }\n  return [];\n};\n\n/**\n * Converts an array of keys immediately followed by their respective value to an object, omitting undefined values.\n * @param {Array.<*>} array Array to convert\n * @returns {Object.<string,*>} Converted object\n */\nutil.toObject = function toObject(array) {\n  var object = {},\n    index = 0;\n  while (index < array.length) {\n    var key = array[index++],\n      val = array[index++];\n    if (val !== undefined) object[key] = val;\n  }\n  return object;\n};\nvar safePropBackslashRe = /\\\\/g,\n  safePropQuoteRe = /\"/g;\n\n/**\n * Tests whether the specified name is a reserved word in JS.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nutil.isReserved = function isReserved(name) {\n  return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name);\n};\n\n/**\n * Returns a safe property accessor for the specified property name.\n * @param {string} prop Property name\n * @returns {string} Safe accessor\n */\nutil.safeProp = function safeProp(prop) {\n  if (!/^[$\\w_]+$/.test(prop) || util.isReserved(prop)) return \"[\\\"\" + prop.replace(safePropBackslashRe, \"\\\\\\\\\").replace(safePropQuoteRe, \"\\\\\\\"\") + \"\\\"]\";\n  return \".\" + prop;\n};\n\n/**\n * Converts the first character of a string to upper case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.ucFirst = function ucFirst(str) {\n  return str.charAt(0).toUpperCase() + str.substring(1);\n};\nvar camelCaseRe = /_([a-z])/g;\n\n/**\n * Converts a string to camel case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.camelCase = function camelCase(str) {\n  return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function ($0, $1) {\n    return $1.toUpperCase();\n  });\n};\n\n/**\n * Compares reflected fields by id.\n * @param {Field} a First field\n * @param {Field} b Second field\n * @returns {number} Comparison value\n */\nutil.compareFieldsById = function compareFieldsById(a, b) {\n  return a.id - b.id;\n};\n\n/**\n * Decorator helper for types (TypeScript).\n * @param {Constructor<T>} ctor Constructor function\n * @param {string} [typeName] Type name, defaults to the constructor's name\n * @returns {Type} Reflected type\n * @template T extends Message<T>\n * @property {Root} root Decorators root\n */\nutil.decorateType = function decorateType(ctor, typeName) {\n  /* istanbul ignore if */\n  if (ctor.$type) {\n    if (typeName && ctor.$type.name !== typeName) {\n      util.decorateRoot.remove(ctor.$type);\n      ctor.$type.name = typeName;\n      util.decorateRoot.add(ctor.$type);\n    }\n    return ctor.$type;\n  }\n\n  /* istanbul ignore next */\n  if (!Type) Type = require(\"./type\");\n  var type = new Type(typeName || ctor.name);\n  util.decorateRoot.add(type);\n  type.ctor = ctor; // sets up .encode, .decode etc.\n  Object.defineProperty(ctor, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  Object.defineProperty(ctor.prototype, \"$type\", {\n    value: type,\n    enumerable: false\n  });\n  return type;\n};\nvar decorateEnumIndex = 0;\n\n/**\n * Decorator helper for enums (TypeScript).\n * @param {Object} object Enum object\n * @returns {Enum} Reflected enum\n */\nutil.decorateEnum = function decorateEnum(object) {\n  /* istanbul ignore if */\n  if (object.$type) return object.$type;\n\n  /* istanbul ignore next */\n  if (!Enum) Enum = require(\"./enum\");\n  var enm = new Enum(\"Enum\" + decorateEnumIndex++, object);\n  util.decorateRoot.add(enm);\n  Object.defineProperty(object, \"$type\", {\n    value: enm,\n    enumerable: false\n  });\n  return enm;\n};\n\n/**\n * Sets the value of a property by property path. If a value already exists, it is turned to an array\n * @param {Object.<string,*>} dst Destination object\n * @param {string} path dot '.' delimited path of the property to set\n * @param {Object} value the value to set\n * @returns {Object.<string,*>} Destination object\n */\nutil.setProperty = function setProperty(dst, path, value) {\n  function setProp(dst, path, value) {\n    var part = path.shift();\n    if (part === \"__proto__\" || part === \"prototype\") {\n      return dst;\n    }\n    if (path.length > 0) {\n      dst[part] = setProp(dst[part] || {}, path, value);\n    } else {\n      var prevValue = dst[part];\n      if (prevValue) value = [].concat(prevValue).concat(value);\n      dst[part] = value;\n    }\n    return dst;\n  }\n  if (typeof dst !== \"object\") throw TypeError(\"dst must be an object\");\n  if (!path) throw TypeError(\"path must be specified\");\n  path = path.split(\".\");\n  return setProp(dst, path, value);\n};\n\n/**\n * Decorator root (TypeScript).\n * @name util.decorateRoot\n * @type {Root}\n * @readonly\n */\nObject.defineProperty(util, \"decorateRoot\", {\n  get: function () {\n    return roots[\"decorated\"] || (roots[\"decorated\"] = new (require(\"./root\"))());\n  }\n});", "\"use strict\";\n\nmodule.exports = ReflectionObject;\nReflectionObject.className = \"ReflectionObject\";\nvar util = require(\"./util\");\nvar Root; // cyclic\n\n/**\n * Constructs a new reflection object instance.\n * @classdesc Base class of all reflection objects.\n * @constructor\n * @param {string} name Object name\n * @param {Object.<string,*>} [options] Declared options\n * @abstract\n */\nfunction ReflectionObject(name, options) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (options && !util.isObject(options)) throw TypeError(\"options must be an object\");\n\n  /**\n   * Options.\n   * @type {Object.<string,*>|undefined}\n   */\n  this.options = options; // toJSON\n\n  /**\n   * Parsed Options.\n   * @type {Array.<Object.<string,*>>|undefined}\n   */\n  this.parsedOptions = null;\n\n  /**\n   * Unique name within its namespace.\n   * @type {string}\n   */\n  this.name = name;\n\n  /**\n   * Parent namespace.\n   * @type {Namespace|null}\n   */\n  this.parent = null;\n\n  /**\n   * Whether already resolved or not.\n   * @type {boolean}\n   */\n  this.resolved = false;\n\n  /**\n   * Comment text, if any.\n   * @type {string|null}\n   */\n  this.comment = null;\n\n  /**\n   * Defining file name.\n   * @type {string|null}\n   */\n  this.filename = null;\n}\nObject.defineProperties(ReflectionObject.prototype, {\n  /**\n   * Reference to the root namespace.\n   * @name ReflectionObject#root\n   * @type {Root}\n   * @readonly\n   */\n  root: {\n    get: function () {\n      var ptr = this;\n      while (ptr.parent !== null) ptr = ptr.parent;\n      return ptr;\n    }\n  },\n  /**\n   * Full name including leading dot.\n   * @name ReflectionObject#fullName\n   * @type {string}\n   * @readonly\n   */\n  fullName: {\n    get: function () {\n      var path = [this.name],\n        ptr = this.parent;\n      while (ptr) {\n        path.unshift(ptr.name);\n        ptr = ptr.parent;\n      }\n      return path.join(\".\");\n    }\n  }\n});\n\n/**\n * Converts this reflection object to its descriptor representation.\n * @returns {Object.<string,*>} Descriptor\n * @abstract\n */\nReflectionObject.prototype.toJSON = /* istanbul ignore next */function toJSON() {\n  throw Error(); // not implemented, shouldn't happen\n};\n\n/**\n * Called when this object is added to a parent.\n * @param {ReflectionObject} parent Parent added to\n * @returns {undefined}\n */\nReflectionObject.prototype.onAdd = function onAdd(parent) {\n  if (this.parent && this.parent !== parent) this.parent.remove(this);\n  this.parent = parent;\n  this.resolved = false;\n  var root = parent.root;\n  if (root instanceof Root) root._handleAdd(this);\n};\n\n/**\n * Called when this object is removed from a parent.\n * @param {ReflectionObject} parent Parent removed from\n * @returns {undefined}\n */\nReflectionObject.prototype.onRemove = function onRemove(parent) {\n  var root = parent.root;\n  if (root instanceof Root) root._handleRemove(this);\n  this.parent = null;\n  this.resolved = false;\n};\n\n/**\n * Resolves this objects type references.\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.resolve = function resolve() {\n  if (this.resolved) return this;\n  if (this.root instanceof Root) this.resolved = true; // only if part of a root\n  return this;\n};\n\n/**\n * Gets an option value.\n * @param {string} name Option name\n * @returns {*} Option value or `undefined` if not set\n */\nReflectionObject.prototype.getOption = function getOption(name) {\n  if (this.options) return this.options[name];\n  return undefined;\n};\n\n/**\n * Sets an option.\n * @param {string} name Option name\n * @param {*} value Option value\n * @param {boolean} [ifNotSet] Sets the option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOption = function setOption(name, value, ifNotSet) {\n  if (!ifNotSet || !this.options || this.options[name] === undefined) (this.options || (this.options = {}))[name] = value;\n  return this;\n};\n\n/**\n * Sets a parsed option.\n * @param {string} name parsed Option name\n * @param {*} value Option value\n * @param {string} propName dot '.' delimited full path of property within the option to set. if undefined\\empty, will add a new option with that value\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setParsedOption = function setParsedOption(name, value, propName) {\n  if (!this.parsedOptions) {\n    this.parsedOptions = [];\n  }\n  var parsedOptions = this.parsedOptions;\n  if (propName) {\n    // If setting a sub property of an option then try to merge it\n    // with an existing option\n    var opt = parsedOptions.find(function (opt) {\n      return Object.prototype.hasOwnProperty.call(opt, name);\n    });\n    if (opt) {\n      // If we found an existing option - just merge the property value\n      var newValue = opt[name];\n      util.setProperty(newValue, propName, value);\n    } else {\n      // otherwise, create a new option, set it's property and add it to the list\n      opt = {};\n      opt[name] = util.setProperty({}, propName, value);\n      parsedOptions.push(opt);\n    }\n  } else {\n    // Always create a new option when setting the value of the option itself\n    var newOpt = {};\n    newOpt[name] = value;\n    parsedOptions.push(newOpt);\n  }\n  return this;\n};\n\n/**\n * Sets multiple options.\n * @param {Object.<string,*>} options Options to set\n * @param {boolean} [ifNotSet] Sets an option only if it isn't currently set\n * @returns {ReflectionObject} `this`\n */\nReflectionObject.prototype.setOptions = function setOptions(options, ifNotSet) {\n  if (options) for (var keys = Object.keys(options), i = 0; i < keys.length; ++i) this.setOption(keys[i], options[keys[i]], ifNotSet);\n  return this;\n};\n\n/**\n * Converts this instance to its string representation.\n * @returns {string} Class name[, space, full name]\n */\nReflectionObject.prototype.toString = function toString() {\n  var className = this.constructor.className,\n    fullName = this.fullName;\n  if (fullName.length) return className + \" \" + fullName;\n  return className;\n};\n\n// Sets up cyclic dependencies (called in index-light)\nReflectionObject._configure = function (Root_) {\n  Root = Root_;\n};", "\"use strict\";\n\nmodule.exports = Enum;\n\n// extends ReflectionObject\nvar ReflectionObject = require(\"./object\");\n((Enum.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum).className = \"Enum\";\nvar Namespace = require(\"./namespace\"),\n  util = require(\"./util\");\n\n/**\n * Constructs a new enum instance.\n * @classdesc Reflected enum.\n * @extends ReflectionObject\n * @constructor\n * @param {string} name Unique name within its namespace\n * @param {Object.<string,number>} [values] Enum values as an object, by name\n * @param {Object.<string,*>} [options] Declared options\n * @param {string} [comment] The comment for this enum\n * @param {Object.<string,string>} [comments] The value comments for this enum\n * @param {Object.<string,Object<string,*>>|undefined} [valuesOptions] The value options for this enum\n */\nfunction Enum(name, values, options, comment, comments, valuesOptions) {\n  ReflectionObject.call(this, name, options);\n  if (values && typeof values !== \"object\") throw TypeError(\"values must be an object\");\n\n  /**\n   * Enum values by id.\n   * @type {Object.<number,string>}\n   */\n  this.valuesById = {};\n\n  /**\n   * Enum values by name.\n   * @type {Object.<string,number>}\n   */\n  this.values = Object.create(this.valuesById); // toJSON, marker\n\n  /**\n   * Enum comment text.\n   * @type {string|null}\n   */\n  this.comment = comment;\n\n  /**\n   * Value comment texts, if any.\n   * @type {Object.<string,string>}\n   */\n  this.comments = comments || {};\n\n  /**\n   * Values options, if any\n   * @type {Object<string, Object<string, *>>|undefined}\n   */\n  this.valuesOptions = valuesOptions;\n\n  /**\n   * Reserved ranges, if any.\n   * @type {Array.<number[]|string>}\n   */\n  this.reserved = undefined; // toJSON\n\n  // Note that values inherit valuesById on their prototype which makes them a TypeScript-\n  // compatible enum. This is used by pbts to write actual enum definitions that work for\n  // static and reflection code alike instead of emitting generic object definitions.\n\n  if (values) for (var keys = Object.keys(values), i = 0; i < keys.length; ++i) if (typeof values[keys[i]] === \"number\")\n    // use forward entries only\n    this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];\n}\n\n/**\n * Enum descriptor.\n * @interface IEnum\n * @property {Object.<string,number>} values Enum values\n * @property {Object.<string,*>} [options] Enum options\n */\n\n/**\n * Constructs an enum from an enum descriptor.\n * @param {string} name Enum name\n * @param {IEnum} json Enum descriptor\n * @returns {Enum} Created enum\n * @throws {TypeError} If arguments are invalid\n */\nEnum.fromJSON = function fromJSON(name, json) {\n  var enm = new Enum(name, json.values, json.options, json.comment, json.comments);\n  enm.reserved = json.reserved;\n  return enm;\n};\n\n/**\n * Converts this enum to an enum descriptor.\n * @param {IToJSONOptions} [toJSONOptions] JSON conversion options\n * @returns {IEnum} Enum descriptor\n */\nEnum.prototype.toJSON = function toJSON(toJSONOptions) {\n  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;\n  return util.toObject([\"options\", this.options, \"valuesOptions\", this.valuesOptions, \"values\", this.values, \"reserved\", this.reserved && this.reserved.length ? this.reserved : undefined, \"comment\", keepComments ? this.comment : undefined, \"comments\", keepComments ? this.comments : undefined]);\n};\n\n/**\n * Adds a value to this enum.\n * @param {string} name Value name\n * @param {number} id Value id\n * @param {string} [comment] Comment, if any\n * @param {Object.<string, *>|undefined} [options] Options, if any\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If there is already a value with this name or id\n */\nEnum.prototype.add = function add(name, id, comment, options) {\n  // utilized by the parser but not by .fromJSON\n\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  if (!util.isInteger(id)) throw TypeError(\"id must be an integer\");\n  if (this.values[name] !== undefined) throw Error(\"duplicate name '\" + name + \"' in \" + this);\n  if (this.isReservedId(id)) throw Error(\"id \" + id + \" is reserved in \" + this);\n  if (this.isReservedName(name)) throw Error(\"name '\" + name + \"' is reserved in \" + this);\n  if (this.valuesById[id] !== undefined) {\n    if (!(this.options && this.options.allow_alias)) throw Error(\"duplicate id \" + id + \" in \" + this);\n    this.values[name] = id;\n  } else this.valuesById[this.values[name] = id] = name;\n  if (options) {\n    if (this.valuesOptions === undefined) this.valuesOptions = {};\n    this.valuesOptions[name] = options || null;\n  }\n  this.comments[name] = comment || null;\n  return this;\n};\n\n/**\n * Removes a value from this enum\n * @param {string} name Value name\n * @returns {Enum} `this`\n * @throws {TypeError} If arguments are invalid\n * @throws {Error} If `name` is not a name of this enum\n */\nEnum.prototype.remove = function remove(name) {\n  if (!util.isString(name)) throw TypeError(\"name must be a string\");\n  var val = this.values[name];\n  if (val == null) throw Error(\"name '\" + name + \"' does not exist in \" + this);\n  delete this.valuesById[val];\n  delete this.values[name];\n  delete this.comments[name];\n  if (this.valuesOptions) delete this.valuesOptions[name];\n  return this;\n};\n\n/**\n * Tests if the specified id is reserved.\n * @param {number} id Id to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedId = function isReservedId(id) {\n  return Namespace.isReservedId(this.reserved, id);\n};\n\n/**\n * Tests if the specified name is reserved.\n * @param {string} name Name to test\n * @returns {boolean} `true` if reserved, otherwise `false`\n */\nEnum.prototype.isReservedName = function isReservedName(name) {\n  return Namespace.isReservedName(this.reserved, name);\n};", "\"use strict\";\n\nmodule.exports = encoder;\nvar Enum = require(\"./enum\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\n\n/**\n * Generates a partial message type encoder.\n * @param {Codegen} gen Codegen instance\n * @param {Field} field Reflected field\n * @param {number} fieldIndex Field index\n * @param {string} ref Variable reference\n * @returns {Codegen} Codegen instance\n * @ignore\n */\nfunction genTypePartial(gen, field, fieldIndex, ref) {\n  return field.resolvedType.group ? gen(\"types[%i].encode(%s,w.uint32(%i)).uint32(%i)\", fieldIndex, ref, (field.id << 3 | 3) >>> 0, (field.id << 3 | 4) >>> 0) : gen(\"types[%i].encode(%s,w.uint32(%i).fork()).ldelim()\", fieldIndex, ref, (field.id << 3 | 2) >>> 0);\n}\n\n/**\n * Generates an encoder specific to the specified message type.\n * @param {Type} mtype Message type\n * @returns {Codegen} Codegen instance\n */\nfunction encoder(mtype) {\n  /* eslint-disable no-unexpected-multiline, block-scoped-var, no-redeclare */\n  var gen = util.codegen([\"m\", \"w\"], mtype.name + \"$encode\")(\"if(!w)\")(\"w=Writer.create()\");\n  var i, ref;\n\n  // \"when a message is serialized its known fields should be written sequentially by field number\"\n  var fields = /* initializes */mtype.fieldsArray.slice().sort(util.compareFieldsById);\n  for (var i = 0; i < fields.length; ++i) {\n    var field = fields[i].resolve(),\n      index = mtype._fieldsArray.indexOf(field),\n      type = field.resolvedType instanceof Enum ? \"int32\" : field.type,\n      wireType = types.basic[type];\n    ref = \"m\" + util.safeProp(field.name);\n\n    // Map fields\n    if (field.map) {\n      gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j)){\", ref, field.name) // !== undefined && !== null\n      (\"for(var ks=Object.keys(%s),i=0;i<ks.length;++i){\", ref)(\"w.uint32(%i).fork().uint32(%i).%s(ks[i])\", (field.id << 3 | 2) >>> 0, 8 | types.mapKey[field.keyType], field.keyType);\n      if (wireType === undefined) gen(\"types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()\", index, ref); // can't be groups\n      else gen(\".uint32(%i).%s(%s[ks[i]]).ldelim()\", 16 | wireType, type, ref);\n      gen(\"}\")(\"}\");\n\n      // Repeated fields\n    } else if (field.repeated) {\n      gen(\"if(%s!=null&&%s.length){\", ref, ref); // !== undefined && !== null\n\n      // Packed repeated\n      if (field.packed && types.packed[type] !== undefined) {\n        gen(\"w.uint32(%i).fork()\", (field.id << 3 | 2) >>> 0)(\"for(var i=0;i<%s.length;++i)\", ref)(\"w.%s(%s[i])\", type, ref)(\"w.ldelim()\");\n\n        // Non-packed\n      } else {\n        gen(\"for(var i=0;i<%s.length;++i)\", ref);\n        if (wireType === undefined) genTypePartial(gen, field, index, ref + \"[i]\");else gen(\"w.uint32(%i).%s(%s[i])\", (field.id << 3 | wireType) >>> 0, type, ref);\n      }\n      gen(\"}\");\n\n      // Non-repeated\n    } else {\n      if (field.optional) gen(\"if(%s!=null&&Object.hasOwnProperty.call(m,%j))\", ref, field.name); // !== undefined && !== null\n\n      if (wireType === undefined) genTypePartial(gen, field, index, ref);else gen(\"w.uint32(%i).%s(%s)\", (field.id << 3 | wireType) >>> 0, type, ref);\n    }\n  }\n  return gen(\"return w\");\n  /* eslint-enable no-unexpected-multiline, block-scoped-var, no-redeclare */\n}", "\"use strict\";\n\nvar protobuf = module.exports = require(\"./index-minimal\");\nprotobuf.build = \"light\";\n\n/**\n * A node-style callback as used by {@link load} and {@link Root#load}.\n * @typedef LoadCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Root} [root] Root, if there hasn't been an error\n * @returns {undefined}\n */\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} root Root namespace, defaults to create a new one if omitted.\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n */\nfunction load(filename, root, callback) {\n  if (typeof root === \"function\") {\n    callback = root;\n    root = new protobuf.Root();\n  } else if (!root) root = new protobuf.Root();\n  return root.load(filename, callback);\n}\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and calls the callback.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {LoadCallback} callback Callback function\n * @returns {undefined}\n * @see {@link Root#load}\n * @variation 2\n */\n// function load(filename:string, callback:LoadCallback):undefined\n\n/**\n * Loads one or multiple .proto or preprocessed .json files into a common root namespace and returns a promise.\n * @name load\n * @function\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Promise<Root>} Promise\n * @see {@link Root#load}\n * @variation 3\n */\n// function load(filename:string, [root:Root]):Promise<Root>\n\nprotobuf.load = load;\n\n/**\n * Synchronously loads one or multiple .proto or preprocessed .json files into a common root namespace (node only).\n * @param {string|string[]} filename One or multiple files to load\n * @param {Root} [root] Root namespace, defaults to create a new one if omitted.\n * @returns {Root} Root namespace\n * @throws {Error} If synchronous fetching is not supported (i.e. in browsers) or if a file's syntax is invalid\n * @see {@link Root#loadSync}\n */\nfunction loadSync(filename, root) {\n  if (!root) root = new protobuf.Root();\n  return root.loadSync(filename);\n}\nprotobuf.loadSync = loadSync;\n\n// Serialization\nprotobuf.encoder = require(\"./encoder\");\nprotobuf.decoder = require(\"./decoder\");\nprotobuf.verifier = require(\"./verifier\");\nprotobuf.converter = require(\"./converter\");\n\n// Reflection\nprotobuf.ReflectionObject = require(\"./object\");\nprotobuf.Namespace = require(\"./namespace\");\nprotobuf.Root = require(\"./root\");\nprotobuf.Enum = require(\"./enum\");\nprotobuf.Type = require(\"./type\");\nprotobuf.Field = require(\"./field\");\nprotobuf.OneOf = require(\"./oneof\");\nprotobuf.MapField = require(\"./mapfield\");\nprotobuf.Service = require(\"./service\");\nprotobuf.Method = require(\"./method\");\n\n// Runtime\nprotobuf.Message = require(\"./message\");\nprotobuf.wrappers = require(\"./wrappers\");\n\n// Utility\nprotobuf.types = require(\"./types\");\nprotobuf.util = require(\"./util\");\n\n// Set up possibly cyclic reflection dependencies\nprotobuf.ReflectionObject._configure(protobuf.Root);\nprotobuf.Namespace._configure(protobuf.Type, protobuf.Service, protobuf.Enum);\nprotobuf.Root._configure(protobuf.Type);\nprotobuf.Field._configure(protobuf.Type);", "\"use strict\";\n\nmodule.exports = tokenize;\nvar delimRe = /[\\s{}=;:[\\],'\"()<>]/g,\n  stringDoubleRe = /(?:\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\")/g,\n  stringSingleRe = /(?:'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)')/g;\nvar setCommentRe = /^ *[*/]+ */,\n  setCommentAltRe = /^\\s*\\*?\\/*/,\n  setCommentSplitRe = /\\n/g,\n  whitespaceRe = /\\s/,\n  unescapeRe = /\\\\(.?)/g;\nvar unescapeMap = {\n  \"0\": \"\\0\",\n  \"r\": \"\\r\",\n  \"n\": \"\\n\",\n  \"t\": \"\\t\"\n};\n\n/**\n * Unescapes a string.\n * @param {string} str String to unescape\n * @returns {string} Unescaped string\n * @property {Object.<string,string>} map Special characters map\n * @memberof tokenize\n */\nfunction unescape(str) {\n  return str.replace(unescapeRe, function ($0, $1) {\n    switch ($1) {\n      case \"\\\\\":\n      case \"\":\n        return $1;\n      default:\n        return unescapeMap[$1] || \"\";\n    }\n  });\n}\ntokenize.unescape = unescape;\n\n/**\n * Gets the next token and advances.\n * @typedef TokenizerHandleNext\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Peeks for the next token.\n * @typedef TokenizerHandlePeek\n * @type {function}\n * @returns {string|null} Next token or `null` on eof\n */\n\n/**\n * Pushes a token back to the stack.\n * @typedef TokenizerHandlePush\n * @type {function}\n * @param {string} token Token\n * @returns {undefined}\n */\n\n/**\n * Skips the next token.\n * @typedef TokenizerHandleSkip\n * @type {function}\n * @param {string} expected Expected token\n * @param {boolean} [optional=false] If optional\n * @returns {boolean} Whether the token matched\n * @throws {Error} If the token didn't match and is not optional\n */\n\n/**\n * Gets the comment on the previous line or, alternatively, the line comment on the specified line.\n * @typedef TokenizerHandleCmnt\n * @type {function}\n * @param {number} [line] Line number\n * @returns {string|null} Comment text or `null` if none\n */\n\n/**\n * Handle object returned from {@link tokenize}.\n * @interface ITokenizerHandle\n * @property {TokenizerHandleNext} next Gets the next token and advances (`null` on eof)\n * @property {TokenizerHandlePeek} peek Peeks for the next token (`null` on eof)\n * @property {TokenizerHandlePush} push Pushes a token back to the stack\n * @property {TokenizerHandleSkip} skip Skips a token, returns its presence and advances or, if non-optional and not present, throws\n * @property {TokenizerHandleCmnt} cmnt Gets the comment on the previous line or the line comment on the specified line, if any\n * @property {number} line Current line number\n */\n\n/**\n * Tokenizes the given .proto source and returns an object with useful utility functions.\n * @param {string} source Source contents\n * @param {boolean} alternateCommentMode Whether we should activate alternate comment parsing mode.\n * @returns {ITokenizerHandle} Tokenizer handle\n */\nfunction tokenize(source, alternateCommentMode) {\n  /* eslint-disable callback-return */\n  source = source.toString();\n  var offset = 0,\n    length = source.length,\n    line = 1,\n    lastCommentLine = 0,\n    comments = {};\n  var stack = [];\n  var stringDelim = null;\n\n  /* istanbul ignore next */\n  /**\n   * Creates an error for illegal syntax.\n   * @param {string} subject Subject\n   * @returns {Error} Error created\n   * @inner\n   */\n  function illegal(subject) {\n    return Error(\"illegal \" + subject + \" (line \" + line + \")\");\n  }\n\n  /**\n   * Reads a string till its end.\n   * @returns {string} String read\n   * @inner\n   */\n  function readString() {\n    var re = stringDelim === \"'\" ? stringSingleRe : stringDoubleRe;\n    re.lastIndex = offset - 1;\n    var match = re.exec(source);\n    if (!match) throw illegal(\"string\");\n    offset = re.lastIndex;\n    push(stringDelim);\n    stringDelim = null;\n    return unescape(match[1]);\n  }\n\n  /**\n   * Gets the character at `pos` within the source.\n   * @param {number} pos Position\n   * @returns {string} Character\n   * @inner\n   */\n  function charAt(pos) {\n    return source.charAt(pos);\n  }\n\n  /**\n   * Sets the current comment text.\n   * @param {number} start Start offset\n   * @param {number} end End offset\n   * @param {boolean} isLeading set if a leading comment\n   * @returns {undefined}\n   * @inner\n   */\n  function setComment(start, end, isLeading) {\n    var comment = {\n      type: source.charAt(start++),\n      lineEmpty: false,\n      leading: isLeading\n    };\n    var lookback;\n    if (alternateCommentMode) {\n      lookback = 2; // alternate comment parsing: \"//\" or \"/*\"\n    } else {\n      lookback = 3; // \"///\" or \"/**\"\n    }\n    var commentOffset = start - lookback,\n      c;\n    do {\n      if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === \"\\n\") {\n        comment.lineEmpty = true;\n        break;\n      }\n    } while (c === \" \" || c === \"\\t\");\n    var lines = source.substring(start, end).split(setCommentSplitRe);\n    for (var i = 0; i < lines.length; ++i) lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, \"\").trim();\n    comment.text = lines.join(\"\\n\").trim();\n    comments[line] = comment;\n    lastCommentLine = line;\n  }\n  function isDoubleSlashCommentLine(startOffset) {\n    var endOffset = findEndOfLine(startOffset);\n\n    // see if remaining line matches comment pattern\n    var lineText = source.substring(startOffset, endOffset);\n    var isComment = /^\\s*\\/\\//.test(lineText);\n    return isComment;\n  }\n  function findEndOfLine(cursor) {\n    // find end of cursor's line\n    var endOffset = cursor;\n    while (endOffset < length && charAt(endOffset) !== \"\\n\") {\n      endOffset++;\n    }\n    return endOffset;\n  }\n\n  /**\n   * Obtains the next token.\n   * @returns {string|null} Next token or `null` on eof\n   * @inner\n   */\n  function next() {\n    if (stack.length > 0) return stack.shift();\n    if (stringDelim) return readString();\n    var repeat,\n      prev,\n      curr,\n      start,\n      isDoc,\n      isLeadingComment = offset === 0;\n    do {\n      if (offset === length) return null;\n      repeat = false;\n      while (whitespaceRe.test(curr = charAt(offset))) {\n        if (curr === \"\\n\") {\n          isLeadingComment = true;\n          ++line;\n        }\n        if (++offset === length) return null;\n      }\n      if (charAt(offset) === \"/\") {\n        if (++offset === length) {\n          throw illegal(\"comment\");\n        }\n        if (charAt(offset) === \"/\") {\n          // Line\n          if (!alternateCommentMode) {\n            // check for triple-slash comment\n            isDoc = charAt(start = offset + 1) === \"/\";\n            while (charAt(++offset) !== \"\\n\") {\n              if (offset === length) {\n                return null;\n              }\n            }\n            ++offset;\n            if (isDoc) {\n              setComment(start, offset - 1, isLeadingComment);\n              // Trailing comment cannot not be multi-line,\n              // so leading comment state should be reset to handle potential next comments\n              isLeadingComment = true;\n            }\n            ++line;\n            repeat = true;\n          } else {\n            // check for double-slash comments, consolidating consecutive lines\n            start = offset;\n            isDoc = false;\n            if (isDoubleSlashCommentLine(offset - 1)) {\n              isDoc = true;\n              do {\n                offset = findEndOfLine(offset);\n                if (offset === length) {\n                  break;\n                }\n                offset++;\n                if (!isLeadingComment) {\n                  // Trailing comment cannot not be multi-line\n                  break;\n                }\n              } while (isDoubleSlashCommentLine(offset));\n            } else {\n              offset = Math.min(length, findEndOfLine(offset) + 1);\n            }\n            if (isDoc) {\n              setComment(start, offset, isLeadingComment);\n              isLeadingComment = true;\n            }\n            line++;\n            repeat = true;\n          }\n        } else if ((curr = charAt(offset)) === \"*\") {\n          /* Block */\n          // check for /** (regular comment mode) or /* (alternate comment mode)\n          start = offset + 1;\n          isDoc = alternateCommentMode || charAt(start) === \"*\";\n          do {\n            if (curr === \"\\n\") {\n              ++line;\n            }\n            if (++offset === length) {\n              throw illegal(\"comment\");\n            }\n            prev = curr;\n            curr = charAt(offset);\n          } while (prev !== \"*\" || curr !== \"/\");\n          ++offset;\n          if (isDoc) {\n            setComment(start, offset - 2, isLeadingComment);\n            isLeadingComment = true;\n          }\n          repeat = true;\n        } else {\n          return \"/\";\n        }\n      }\n    } while (repeat);\n\n    // offset !== length if we got here\n\n    var end = offset;\n    delimRe.lastIndex = 0;\n    var delim = delimRe.test(charAt(end++));\n    if (!delim) while (end < length && !delimRe.test(charAt(end))) ++end;\n    var token = source.substring(offset, offset = end);\n    if (token === \"\\\"\" || token === \"'\") stringDelim = token;\n    return token;\n  }\n\n  /**\n   * Pushes a token back to the stack.\n   * @param {string} token Token\n   * @returns {undefined}\n   * @inner\n   */\n  function push(token) {\n    stack.push(token);\n  }\n\n  /**\n   * Peeks for the next token.\n   * @returns {string|null} Token or `null` on eof\n   * @inner\n   */\n  function peek() {\n    if (!stack.length) {\n      var token = next();\n      if (token === null) return null;\n      push(token);\n    }\n    return stack[0];\n  }\n\n  /**\n   * Skips a token.\n   * @param {string} expected Expected token\n   * @param {boolean} [optional=false] Whether the token is optional\n   * @returns {boolean} `true` when skipped, `false` if not\n   * @throws {Error} When a required token is not present\n   * @inner\n   */\n  function skip(expected, optional) {\n    var actual = peek(),\n      equals = actual === expected;\n    if (equals) {\n      next();\n      return true;\n    }\n    if (!optional) throw illegal(\"token '\" + actual + \"', '\" + expected + \"' expected\");\n    return false;\n  }\n\n  /**\n   * Gets a comment.\n   * @param {number} [trailingLine] Line number if looking for a trailing comment\n   * @returns {string|null} Comment text\n   * @inner\n   */\n  function cmnt(trailingLine) {\n    var ret = null;\n    var comment;\n    if (trailingLine === undefined) {\n      comment = comments[line - 1];\n      delete comments[line - 1];\n      if (comment && (alternateCommentMode || comment.type === \"*\" || comment.lineEmpty)) {\n        ret = comment.leading ? comment.text : null;\n      }\n    } else {\n      /* istanbul ignore else */\n      if (lastCommentLine < trailingLine) {\n        peek();\n      }\n      comment = comments[trailingLine];\n      delete comments[trailingLine];\n      if (comment && !comment.lineEmpty && (alternateCommentMode || comment.type === \"/\")) {\n        ret = comment.leading ? null : comment.text;\n      }\n    }\n    return ret;\n  }\n  return Object.defineProperty({\n    next: next,\n    peek: peek,\n    push: push,\n    skip: skip,\n    cmnt: cmnt\n  }, \"line\", {\n    get: function () {\n      return line;\n    }\n  });\n  /* eslint-enable callback-return */\n}", "\"use strict\";\n\nmodule.exports = parse;\nparse.filename = null;\nparse.defaults = {\n  keepCase: false\n};\nvar tokenize = require(\"./tokenize\"),\n  Root = require(\"./root\"),\n  Type = require(\"./type\"),\n  Field = require(\"./field\"),\n  MapField = require(\"./mapfield\"),\n  OneOf = require(\"./oneof\"),\n  Enum = require(\"./enum\"),\n  Service = require(\"./service\"),\n  Method = require(\"./method\"),\n  types = require(\"./types\"),\n  util = require(\"./util\");\nvar base10Re = /^[1-9][0-9]*$/,\n  base10NegRe = /^-?[1-9][0-9]*$/,\n  base16Re = /^0[x][0-9a-fA-F]+$/,\n  base16NegRe = /^-?0[x][0-9a-fA-F]+$/,\n  base8Re = /^0[0-7]+$/,\n  base8NegRe = /^-?0[0-7]+$/,\n  numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/,\n  nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/,\n  typeRefRe = /^(?:\\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)*$/,\n  fqTypeRefRe = /^(?:\\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;\n\n/**\n * Result object returned from {@link parse}.\n * @interface IParserResult\n * @property {string|undefined} package Package name, if declared\n * @property {string[]|undefined} imports Imports, if any\n * @property {string[]|undefined} weakImports Weak imports, if any\n * @property {string|undefined} syntax Syntax, if specified (either `\"proto2\"` or `\"proto3\"`)\n * @property {Root} root Populated root instance\n */\n\n/**\n * Options modifying the behavior of {@link parse}.\n * @interface IParseOptions\n * @property {boolean} [keepCase=false] Keeps field casing instead of converting to camel case\n * @property {boolean} [alternateCommentMode=false] Recognize double-slash comments in addition to doc-block comments.\n * @property {boolean} [preferTrailingComment=false] Use trailing comment when both leading comment and trailing comment exist.\n */\n\n/**\n * Options modifying the behavior of JSON serialization.\n * @interface IToJSONOptions\n * @property {boolean} [keepComments=false] Serializes comments.\n */\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @param {string} source Source contents\n * @param {Root} root Root to populate\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n */\nfunction parse(source, root, options) {\n  /* eslint-disable callback-return */\n  if (!(root instanceof Root)) {\n    options = root;\n    root = new Root();\n  }\n  if (!options) options = parse.defaults;\n  var preferTrailingComment = options.preferTrailingComment || false;\n  var tn = tokenize(source, options.alternateCommentMode || false),\n    next = tn.next,\n    push = tn.push,\n    peek = tn.peek,\n    skip = tn.skip,\n    cmnt = tn.cmnt;\n  var head = true,\n    pkg,\n    imports,\n    weakImports,\n    syntax,\n    isProto3 = false;\n  var ptr = root;\n  var applyCase = options.keepCase ? function (name) {\n    return name;\n  } : util.camelCase;\n\n  /* istanbul ignore next */\n  function illegal(token, name, insideTryCatch) {\n    var filename = parse.filename;\n    if (!insideTryCatch) parse.filename = null;\n    return Error(\"illegal \" + (name || \"token\") + \" '\" + token + \"' (\" + (filename ? filename + \", \" : \"\") + \"line \" + tn.line + \")\");\n  }\n  function readString() {\n    var values = [],\n      token;\n    do {\n      /* istanbul ignore if */\n      if ((token = next()) !== \"\\\"\" && token !== \"'\") throw illegal(token);\n      values.push(next());\n      skip(token);\n      token = peek();\n    } while (token === \"\\\"\" || token === \"'\");\n    return values.join(\"\");\n  }\n  function readValue(acceptTypeRef) {\n    var token = next();\n    switch (token) {\n      case \"'\":\n      case \"\\\"\":\n        push(token);\n        return readString();\n      case \"true\":\n      case \"TRUE\":\n        return true;\n      case \"false\":\n      case \"FALSE\":\n        return false;\n    }\n    try {\n      return parseNumber(token, /* insideTryCatch */true);\n    } catch (e) {\n      /* istanbul ignore else */\n      if (acceptTypeRef && typeRefRe.test(token)) return token;\n\n      /* istanbul ignore next */\n      throw illegal(token, \"value\");\n    }\n  }\n  function readRanges(target, acceptStrings) {\n    var token, start;\n    do {\n      if (acceptStrings && ((token = peek()) === \"\\\"\" || token === \"'\")) target.push(readString());else target.push([start = parseId(next()), skip(\"to\", true) ? parseId(next()) : start]);\n    } while (skip(\",\", true));\n    var dummy = {\n      options: undefined\n    };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseRange_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseRange_line() {\n      parseInlineOptions(dummy); // skip\n    });\n  }\n  function parseNumber(token, insideTryCatch) {\n    var sign = 1;\n    if (token.charAt(0) === \"-\") {\n      sign = -1;\n      token = token.substring(1);\n    }\n    switch (token) {\n      case \"inf\":\n      case \"INF\":\n      case \"Inf\":\n        return sign * Infinity;\n      case \"nan\":\n      case \"NAN\":\n      case \"Nan\":\n      case \"NaN\":\n        return NaN;\n      case \"0\":\n        return 0;\n    }\n    if (base10Re.test(token)) return sign * parseInt(token, 10);\n    if (base16Re.test(token)) return sign * parseInt(token, 16);\n    if (base8Re.test(token)) return sign * parseInt(token, 8);\n\n    /* istanbul ignore else */\n    if (numberRe.test(token)) return sign * parseFloat(token);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"number\", insideTryCatch);\n  }\n  function parseId(token, acceptNegative) {\n    switch (token) {\n      case \"max\":\n      case \"MAX\":\n      case \"Max\":\n        return 536870911;\n      case \"0\":\n        return 0;\n    }\n\n    /* istanbul ignore if */\n    if (!acceptNegative && token.charAt(0) === \"-\") throw illegal(token, \"id\");\n    if (base10NegRe.test(token)) return parseInt(token, 10);\n    if (base16NegRe.test(token)) return parseInt(token, 16);\n\n    /* istanbul ignore else */\n    if (base8NegRe.test(token)) return parseInt(token, 8);\n\n    /* istanbul ignore next */\n    throw illegal(token, \"id\");\n  }\n  function parsePackage() {\n    /* istanbul ignore if */\n    if (pkg !== undefined) throw illegal(\"package\");\n    pkg = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(pkg)) throw illegal(pkg, \"name\");\n    ptr = ptr.define(pkg);\n    skip(\";\");\n  }\n  function parseImport() {\n    var token = peek();\n    var whichImports;\n    switch (token) {\n      case \"weak\":\n        whichImports = weakImports || (weakImports = []);\n        next();\n        break;\n      case \"public\":\n        next();\n      // eslint-disable-next-line no-fallthrough\n      default:\n        whichImports = imports || (imports = []);\n        break;\n    }\n    token = readString();\n    skip(\";\");\n    whichImports.push(token);\n  }\n  function parseSyntax() {\n    skip(\"=\");\n    syntax = readString();\n    isProto3 = syntax === \"proto3\";\n\n    /* istanbul ignore if */\n    if (!isProto3 && syntax !== \"proto2\") throw illegal(syntax, \"syntax\");\n\n    // Syntax is needed to understand the meaning of the optional field rule\n    // Otherwise the meaning is ambiguous between proto2 and proto3\n    root.setOption(\"syntax\", syntax);\n    skip(\";\");\n  }\n  function parseCommon(parent, token) {\n    switch (token) {\n      case \"option\":\n        parseOption(parent, token);\n        skip(\";\");\n        return true;\n      case \"message\":\n        parseType(parent, token);\n        return true;\n      case \"enum\":\n        parseEnum(parent, token);\n        return true;\n      case \"service\":\n        parseService(parent, token);\n        return true;\n      case \"extend\":\n        parseExtension(parent, token);\n        return true;\n    }\n    return false;\n  }\n  function ifBlock(obj, fnIf, fnElse) {\n    var trailingLine = tn.line;\n    if (obj) {\n      if (typeof obj.comment !== \"string\") {\n        obj.comment = cmnt(); // try block-type comment\n      }\n      obj.filename = parse.filename;\n    }\n    if (skip(\"{\", true)) {\n      var token;\n      while ((token = next()) !== \"}\") fnIf(token);\n      skip(\";\", true);\n    } else {\n      if (fnElse) fnElse();\n      skip(\";\");\n      if (obj && (typeof obj.comment !== \"string\" || preferTrailingComment)) obj.comment = cmnt(trailingLine) || obj.comment; // try line-type comment\n    }\n  }\n  function parseType(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"type name\");\n    var type = new Type(token);\n    ifBlock(type, function parseType_block(token) {\n      if (parseCommon(type, token)) return;\n      switch (token) {\n        case \"map\":\n          parseMapField(type, token);\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"oneof\":\n          parseOneOf(type, token);\n          break;\n        case \"extensions\":\n          readRanges(type.extensions || (type.extensions = []));\n          break;\n        case \"reserved\":\n          readRanges(type.reserved || (type.reserved = []), true);\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(type, \"optional\");\n          break;\n      }\n    });\n    parent.add(type);\n  }\n  function parseField(parent, rule, extend) {\n    var type = next();\n    if (type === \"group\") {\n      parseGroup(parent, rule);\n      return;\n    }\n    // Type names can consume multiple tokens, in multiple variants:\n    //    package.subpackage   field       tokens: \"package.subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package . subpackage field       tokens: \"package\" \".\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package.  subpackage field       tokens: \"package.\" \"subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    //    package  .subpackage field       tokens: \"package\" \".subpackage\" [TYPE NAME ENDS HERE] \"field\"\n    // Keep reading tokens until we get a type name with no period at the end,\n    // and the next token does not start with a period.\n    while (type.endsWith(\".\") || peek().startsWith(\".\")) {\n      type += next();\n    }\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(type)) throw illegal(type, \"type\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    name = applyCase(name);\n    skip(\"=\");\n    var field = new Field(name, parseId(next()), type, rule, extend);\n    ifBlock(field, function parseField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseField_line() {\n      parseInlineOptions(field);\n    });\n    if (rule === \"proto3_optional\") {\n      // for proto3 optional fields, we create a single-member Oneof to mimic \"optional\" behavior\n      var oneof = new OneOf(\"_\" + name);\n      field.setOption(\"proto3_optional\", true);\n      oneof.add(field);\n      parent.add(oneof);\n    } else {\n      parent.add(field);\n    }\n\n    // JSON defaults to packed=true if not set so we have to set packed=false explicity when\n    // parsing proto2 descriptors without the option, where applicable. This must be done for\n    // all known packable types and anything that could be an enum (= is not a basic type).\n    if (!isProto3 && field.repeated && (types.packed[type] !== undefined || types.basic[type] === undefined)) field.setOption(\"packed\", false, /* ifNotSet */true);\n  }\n  function parseGroup(parent, rule) {\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    var fieldName = util.lcFirst(name);\n    if (name === fieldName) name = util.ucFirst(name);\n    skip(\"=\");\n    var id = parseId(next());\n    var type = new Type(name);\n    type.group = true;\n    var field = new Field(fieldName, id, name, rule);\n    field.filename = parse.filename;\n    ifBlock(type, function parseGroup_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(type, token);\n          skip(\";\");\n          break;\n        case \"required\":\n        case \"repeated\":\n          parseField(type, token);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(type, \"proto3_optional\");\n          } else {\n            parseField(type, \"optional\");\n          }\n          break;\n        case \"message\":\n          parseType(type, token);\n          break;\n        case \"enum\":\n          parseEnum(type, token);\n          break;\n\n        /* istanbul ignore next */\n        default:\n          throw illegal(token);\n        // there are no groups with proto3 semantics\n      }\n    });\n    parent.add(type).add(field);\n  }\n  function parseMapField(parent) {\n    skip(\"<\");\n    var keyType = next();\n\n    /* istanbul ignore if */\n    if (types.mapKey[keyType] === undefined) throw illegal(keyType, \"type\");\n    skip(\",\");\n    var valueType = next();\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(valueType)) throw illegal(valueType, \"type\");\n    skip(\">\");\n    var name = next();\n\n    /* istanbul ignore if */\n    if (!nameRe.test(name)) throw illegal(name, \"name\");\n    skip(\"=\");\n    var field = new MapField(applyCase(name), parseId(next()), keyType, valueType);\n    ifBlock(field, function parseMapField_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(field, token);\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseMapField_line() {\n      parseInlineOptions(field);\n    });\n    parent.add(field);\n  }\n  function parseOneOf(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var oneof = new OneOf(applyCase(token));\n    ifBlock(oneof, function parseOneOf_block(token) {\n      if (token === \"option\") {\n        parseOption(oneof, token);\n        skip(\";\");\n      } else {\n        push(token);\n        parseField(oneof, \"optional\");\n      }\n    });\n    parent.add(oneof);\n  }\n  function parseEnum(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var enm = new Enum(token);\n    ifBlock(enm, function parseEnum_block(token) {\n      switch (token) {\n        case \"option\":\n          parseOption(enm, token);\n          skip(\";\");\n          break;\n        case \"reserved\":\n          readRanges(enm.reserved || (enm.reserved = []), true);\n          break;\n        default:\n          parseEnumValue(enm, token);\n      }\n    });\n    parent.add(enm);\n  }\n  function parseEnumValue(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token)) throw illegal(token, \"name\");\n    skip(\"=\");\n    var value = parseId(next(), true),\n      dummy = {\n        options: undefined\n      };\n    dummy.setOption = function (name, value) {\n      if (this.options === undefined) this.options = {};\n      this.options[name] = value;\n    };\n    ifBlock(dummy, function parseEnumValue_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(dummy, token); // skip\n        skip(\";\");\n      } else throw illegal(token);\n    }, function parseEnumValue_line() {\n      parseInlineOptions(dummy); // skip\n    });\n    parent.add(token, value, dummy.comment, dummy.options);\n  }\n  function parseOption(parent, token) {\n    var isCustom = skip(\"(\", true);\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token;\n    var option = name;\n    var propName;\n    if (isCustom) {\n      skip(\")\");\n      name = \"(\" + name + \")\";\n      option = name;\n      token = peek();\n      if (fqTypeRefRe.test(token)) {\n        propName = token.slice(1); //remove '.' before property name\n        name += token;\n        next();\n      }\n    }\n    skip(\"=\");\n    var optionValue = parseOptionValue(parent, name);\n    setParsedOption(parent, option, optionValue, propName);\n  }\n  function parseOptionValue(parent, name) {\n    // { a: \"foo\" b { c: \"bar\" } }\n    if (skip(\"{\", true)) {\n      var objectResult = {};\n      while (!skip(\"}\", true)) {\n        /* istanbul ignore if */\n        if (!nameRe.test(token = next())) {\n          throw illegal(token, \"name\");\n        }\n        if (token === null) {\n          throw illegal(token, \"end of input\");\n        }\n        var value;\n        var propName = token;\n        skip(\":\", true);\n        if (peek() === \"{\") value = parseOptionValue(parent, name + \".\" + token);else if (peek() === \"[\") {\n          // option (my_option) = {\n          //     repeated_value: [ \"foo\", \"bar\" ]\n          // };\n          value = [];\n          var lastValue;\n          if (skip(\"[\", true)) {\n            do {\n              lastValue = readValue(true);\n              value.push(lastValue);\n            } while (skip(\",\", true));\n            skip(\"]\");\n            if (typeof lastValue !== \"undefined\") {\n              setOption(parent, name + \".\" + token, lastValue);\n            }\n          }\n        } else {\n          value = readValue(true);\n          setOption(parent, name + \".\" + token, value);\n        }\n        var prevValue = objectResult[propName];\n        if (prevValue) value = [].concat(prevValue).concat(value);\n        objectResult[propName] = value;\n\n        // Semicolons and commas can be optional\n        skip(\",\", true);\n        skip(\";\", true);\n      }\n      return objectResult;\n    }\n    var simpleValue = readValue(true);\n    setOption(parent, name, simpleValue);\n    return simpleValue;\n    // Does not enforce a delimiter to be universal\n  }\n  function setOption(parent, name, value) {\n    if (parent.setOption) parent.setOption(name, value);\n  }\n  function setParsedOption(parent, name, value, propName) {\n    if (parent.setParsedOption) parent.setParsedOption(name, value, propName);\n  }\n  function parseInlineOptions(parent) {\n    if (skip(\"[\", true)) {\n      do {\n        parseOption(parent, \"option\");\n      } while (skip(\",\", true));\n      skip(\"]\");\n    }\n    return parent;\n  }\n  function parseService(parent, token) {\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"service name\");\n    var service = new Service(token);\n    ifBlock(service, function parseService_block(token) {\n      if (parseCommon(service, token)) return;\n\n      /* istanbul ignore else */\n      if (token === \"rpc\") parseMethod(service, token);else throw illegal(token);\n    });\n    parent.add(service);\n  }\n  function parseMethod(parent, token) {\n    // Get the comment of the preceding line now (if one exists) in case the\n    // method is defined across multiple lines.\n    var commentText = cmnt();\n    var type = token;\n\n    /* istanbul ignore if */\n    if (!nameRe.test(token = next())) throw illegal(token, \"name\");\n    var name = token,\n      requestType,\n      requestStream,\n      responseType,\n      responseStream;\n    skip(\"(\");\n    if (skip(\"stream\", true)) requestStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    requestType = token;\n    skip(\")\");\n    skip(\"returns\");\n    skip(\"(\");\n    if (skip(\"stream\", true)) responseStream = true;\n\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token);\n    responseType = token;\n    skip(\")\");\n    var method = new Method(name, type, requestType, responseType, requestStream, responseStream);\n    method.comment = commentText;\n    ifBlock(method, function parseMethod_block(token) {\n      /* istanbul ignore else */\n      if (token === \"option\") {\n        parseOption(method, token);\n        skip(\";\");\n      } else throw illegal(token);\n    });\n    parent.add(method);\n  }\n  function parseExtension(parent, token) {\n    /* istanbul ignore if */\n    if (!typeRefRe.test(token = next())) throw illegal(token, \"reference\");\n    var reference = token;\n    ifBlock(null, function parseExtension_block(token) {\n      switch (token) {\n        case \"required\":\n        case \"repeated\":\n          parseField(parent, token, reference);\n          break;\n        case \"optional\":\n          /* istanbul ignore if */\n          if (isProto3) {\n            parseField(parent, \"proto3_optional\", reference);\n          } else {\n            parseField(parent, \"optional\", reference);\n          }\n          break;\n        default:\n          /* istanbul ignore if */\n          if (!isProto3 || !typeRefRe.test(token)) throw illegal(token);\n          push(token);\n          parseField(parent, \"optional\", reference);\n          break;\n      }\n    });\n  }\n  var token;\n  while ((token = next()) !== null) {\n    switch (token) {\n      case \"package\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parsePackage();\n        break;\n      case \"import\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseImport();\n        break;\n      case \"syntax\":\n        /* istanbul ignore if */\n        if (!head) throw illegal(token);\n        parseSyntax();\n        break;\n      case \"option\":\n        parseOption(ptr, token);\n        skip(\";\");\n        break;\n      default:\n        /* istanbul ignore else */\n        if (parseCommon(ptr, token)) {\n          head = false;\n          continue;\n        }\n\n        /* istanbul ignore next */\n        throw illegal(token);\n    }\n  }\n  parse.filename = null;\n  return {\n    \"package\": pkg,\n    \"imports\": imports,\n    weakImports: weakImports,\n    syntax: syntax,\n    root: root\n  };\n}\n\n/**\n * Parses the given .proto source and returns an object with the parsed contents.\n * @name parse\n * @function\n * @param {string} source Source contents\n * @param {IParseOptions} [options] Parse options. Defaults to {@link parse.defaults} when omitted.\n * @returns {IParserResult} Parser result\n * @property {string} filename=null Currently processing file name for error reporting, if known\n * @property {IParseOptions} defaults Default {@link IParseOptions}\n * @variation 2\n */", "\"use strict\";\n\nmodule.exports = common;\nvar commonRe = /\\/|\\./;\n\n/**\n * Provides common type definitions.\n * Can also be used to provide additional google types or your own custom types.\n * @param {string} name Short name as in `google/protobuf/[name].proto` or full file name\n * @param {Object.<string,*>} json JSON definition within `google.protobuf` if a short name, otherwise the file's root definition\n * @returns {undefined}\n * @property {INamespace} google/protobuf/any.proto Any\n * @property {INamespace} google/protobuf/duration.proto Duration\n * @property {INamespace} google/protobuf/empty.proto Empty\n * @property {INamespace} google/protobuf/field_mask.proto FieldMask\n * @property {INamespace} google/protobuf/struct.proto Struct, Value, NullValue and ListValue\n * @property {INamespace} google/protobuf/timestamp.proto Timestamp\n * @property {INamespace} google/protobuf/wrappers.proto Wrappers\n * @example\n * // manually provides descriptor.proto (assumes google/protobuf/ namespace and .proto extension)\n * protobuf.common(\"descriptor\", descriptorJson);\n *\n * // manually provides a custom definition (uses my.foo namespace)\n * protobuf.common(\"my/foo/bar.proto\", myFooBarJson);\n */\nfunction common(name, json) {\n  if (!commonRe.test(name)) {\n    name = \"google/protobuf/\" + name + \".proto\";\n    json = {\n      nested: {\n        google: {\n          nested: {\n            protobuf: {\n              nested: json\n            }\n          }\n        }\n      }\n    };\n  }\n  common[name] = json;\n}\n\n// Not provided because of limited use (feel free to discuss or to provide yourself):\n//\n// google/protobuf/descriptor.proto\n// google/protobuf/source_context.proto\n// google/protobuf/type.proto\n//\n// Stripped and pre-parsed versions of these non-bundled files are instead available as part of\n// the repository or package within the google/protobuf directory.\n\ncommon(\"any\", {\n  /**\n   * Properties of a google.protobuf.Any message.\n   * @interface IAny\n   * @type {Object}\n   * @property {string} [typeUrl]\n   * @property {Uint8Array} [bytes]\n   * @memberof common\n   */\n  Any: {\n    fields: {\n      type_url: {\n        type: \"string\",\n        id: 1\n      },\n      value: {\n        type: \"bytes\",\n        id: 2\n      }\n    }\n  }\n});\nvar timeType;\ncommon(\"duration\", {\n  /**\n   * Properties of a google.protobuf.Duration message.\n   * @interface IDuration\n   * @type {Object}\n   * @property {number|Long} [seconds]\n   * @property {number} [nanos]\n   * @memberof common\n   */\n  Duration: timeType = {\n    fields: {\n      seconds: {\n        type: \"int64\",\n        id: 1\n      },\n      nanos: {\n        type: \"int32\",\n        id: 2\n      }\n    }\n  }\n});\ncommon(\"timestamp\", {\n  /**\n   * Properties of a google.protobuf.Timestamp message.\n   * @interface ITimestamp\n   * @type {Object}\n   * @property {number|Long} [seconds]\n   * @property {number} [nanos]\n   * @memberof common\n   */\n  Timestamp: timeType\n});\ncommon(\"empty\", {\n  /**\n   * Properties of a google.protobuf.Empty message.\n   * @interface IEmpty\n   * @memberof common\n   */\n  Empty: {\n    fields: {}\n  }\n});\ncommon(\"struct\", {\n  /**\n   * Properties of a google.protobuf.Struct message.\n   * @interface IStruct\n   * @type {Object}\n   * @property {Object.<string,IValue>} [fields]\n   * @memberof common\n   */\n  Struct: {\n    fields: {\n      fields: {\n        keyType: \"string\",\n        type: \"Value\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.Value message.\n   * @interface IValue\n   * @type {Object}\n   * @property {string} [kind]\n   * @property {0} [nullValue]\n   * @property {number} [numberValue]\n   * @property {string} [stringValue]\n   * @property {boolean} [boolValue]\n   * @property {IStruct} [structValue]\n   * @property {IListValue} [listValue]\n   * @memberof common\n   */\n  Value: {\n    oneofs: {\n      kind: {\n        oneof: [\"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\"]\n      }\n    },\n    fields: {\n      nullValue: {\n        type: \"NullValue\",\n        id: 1\n      },\n      numberValue: {\n        type: \"double\",\n        id: 2\n      },\n      stringValue: {\n        type: \"string\",\n        id: 3\n      },\n      boolValue: {\n        type: \"bool\",\n        id: 4\n      },\n      structValue: {\n        type: \"Struct\",\n        id: 5\n      },\n      listValue: {\n        type: \"ListValue\",\n        id: 6\n      }\n    }\n  },\n  NullValue: {\n    values: {\n      NULL_VALUE: 0\n    }\n  },\n  /**\n   * Properties of a google.protobuf.ListValue message.\n   * @interface IListValue\n   * @type {Object}\n   * @property {Array.<IValue>} [values]\n   * @memberof common\n   */\n  ListValue: {\n    fields: {\n      values: {\n        rule: \"repeated\",\n        type: \"Value\",\n        id: 1\n      }\n    }\n  }\n});\ncommon(\"wrappers\", {\n  /**\n   * Properties of a google.protobuf.DoubleValue message.\n   * @interface IDoubleValue\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  DoubleValue: {\n    fields: {\n      value: {\n        type: \"double\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.FloatValue message.\n   * @interface IFloatValue\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  FloatValue: {\n    fields: {\n      value: {\n        type: \"float\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.Int64Value message.\n   * @interface IInt64Value\n   * @type {Object}\n   * @property {number|Long} [value]\n   * @memberof common\n   */\n  Int64Value: {\n    fields: {\n      value: {\n        type: \"int64\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.UInt64Value message.\n   * @interface IUInt64Value\n   * @type {Object}\n   * @property {number|Long} [value]\n   * @memberof common\n   */\n  UInt64Value: {\n    fields: {\n      value: {\n        type: \"uint64\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.Int32Value message.\n   * @interface IInt32Value\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  Int32Value: {\n    fields: {\n      value: {\n        type: \"int32\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.UInt32Value message.\n   * @interface IUInt32Value\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  UInt32Value: {\n    fields: {\n      value: {\n        type: \"uint32\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.BoolValue message.\n   * @interface IBoolValue\n   * @type {Object}\n   * @property {boolean} [value]\n   * @memberof common\n   */\n  BoolValue: {\n    fields: {\n      value: {\n        type: \"bool\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.StringValue message.\n   * @interface IStringValue\n   * @type {Object}\n   * @property {string} [value]\n   * @memberof common\n   */\n  StringValue: {\n    fields: {\n      value: {\n        type: \"string\",\n        id: 1\n      }\n    }\n  },\n  /**\n   * Properties of a google.protobuf.BytesValue message.\n   * @interface IBytesValue\n   * @type {Object}\n   * @property {Uint8Array} [value]\n   * @memberof common\n   */\n  BytesValue: {\n    fields: {\n      value: {\n        type: \"bytes\",\n        id: 1\n      }\n    }\n  }\n});\ncommon(\"field_mask\", {\n  /**\n   * Properties of a google.protobuf.FieldMask message.\n   * @interface IDoubleValue\n   * @type {Object}\n   * @property {number} [value]\n   * @memberof common\n   */\n  FieldMask: {\n    fields: {\n      paths: {\n        rule: \"repeated\",\n        type: \"string\",\n        id: 1\n      }\n    }\n  }\n});\n\n/**\n * Gets the root definition of the specified common proto file.\n *\n * Bundled definitions are:\n * - google/protobuf/any.proto\n * - google/protobuf/duration.proto\n * - google/protobuf/empty.proto\n * - google/protobuf/field_mask.proto\n * - google/protobuf/struct.proto\n * - google/protobuf/timestamp.proto\n * - google/protobuf/wrappers.proto\n *\n * @param {string} file Proto file name\n * @returns {INamespace|null} Root definition or `null` if not defined\n */\ncommon.get = function get(file) {\n  return common[file] || null;\n};", "\"use strict\";\n\nvar protobuf = module.exports = require(\"./index-light\");\nprotobuf.build = \"full\";\n\n// Parser\nprotobuf.tokenize = require(\"./tokenize\");\nprotobuf.parse = require(\"./parse\");\nprotobuf.common = require(\"./common\");\n\n// Configure parser\nprotobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);", "// full library entry point.\n\n\"use strict\";\n\nmodule.exports = require(\"./src/index\");", "{\n  \"nested\": {\n    \"google\": {\n      \"nested\": {\n        \"protobuf\": {\n          \"nested\": {\n            \"FileDescriptorSet\": {\n              \"fields\": {\n                \"file\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"FileDescriptorProto\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"FileDescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"package\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"dependency\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"string\",\n                  \"id\": 3\n                },\n                \"publicDependency\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"int32\",\n                  \"id\": 10,\n                  \"options\": {\n                    \"packed\": false\n                  }\n                },\n                \"weakDependency\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"int32\",\n                  \"id\": 11,\n                  \"options\": {\n                    \"packed\": false\n                  }\n                },\n                \"messageType\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"DescriptorProto\",\n                  \"id\": 4\n                },\n                \"enumType\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"EnumDescriptorProto\",\n                  \"id\": 5\n                },\n                \"service\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"ServiceDescriptorProto\",\n                  \"id\": 6\n                },\n                \"extension\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"FieldDescriptorProto\",\n                  \"id\": 7\n                },\n                \"options\": {\n                  \"type\": \"FileOptions\",\n                  \"id\": 8\n                },\n                \"sourceCodeInfo\": {\n                  \"type\": \"SourceCodeInfo\",\n                  \"id\": 9\n                },\n                \"syntax\": {\n                  \"type\": \"string\",\n                  \"id\": 12\n                }\n              }\n            },\n            \"DescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"field\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"FieldDescriptorProto\",\n                  \"id\": 2\n                },\n                \"extension\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"FieldDescriptorProto\",\n                  \"id\": 6\n                },\n                \"nestedType\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"DescriptorProto\",\n                  \"id\": 3\n                },\n                \"enumType\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"EnumDescriptorProto\",\n                  \"id\": 4\n                },\n                \"extensionRange\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"ExtensionRange\",\n                  \"id\": 5\n                },\n                \"oneofDecl\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"OneofDescriptorProto\",\n                  \"id\": 8\n                },\n                \"options\": {\n                  \"type\": \"MessageOptions\",\n                  \"id\": 7\n                },\n                \"reservedRange\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"ReservedRange\",\n                  \"id\": 9\n                },\n                \"reservedName\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"string\",\n                  \"id\": 10\n                }\n              },\n              \"nested\": {\n                \"ExtensionRange\": {\n                  \"fields\": {\n                    \"start\": {\n                      \"type\": \"int32\",\n                      \"id\": 1\n                    },\n                    \"end\": {\n                      \"type\": \"int32\",\n                      \"id\": 2\n                    }\n                  }\n                },\n                \"ReservedRange\": {\n                  \"fields\": {\n                    \"start\": {\n                      \"type\": \"int32\",\n                      \"id\": 1\n                    },\n                    \"end\": {\n                      \"type\": \"int32\",\n                      \"id\": 2\n                    }\n                  }\n                }\n              }\n            },\n            \"FieldDescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"number\": {\n                  \"type\": \"int32\",\n                  \"id\": 3\n                },\n                \"label\": {\n                  \"type\": \"Label\",\n                  \"id\": 4\n                },\n                \"type\": {\n                  \"type\": \"Type\",\n                  \"id\": 5\n                },\n                \"typeName\": {\n                  \"type\": \"string\",\n                  \"id\": 6\n                },\n                \"extendee\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"defaultValue\": {\n                  \"type\": \"string\",\n                  \"id\": 7\n                },\n                \"oneofIndex\": {\n                  \"type\": \"int32\",\n                  \"id\": 9\n                },\n                \"jsonName\": {\n                  \"type\": \"string\",\n                  \"id\": 10\n                },\n                \"options\": {\n                  \"type\": \"FieldOptions\",\n                  \"id\": 8\n                }\n              },\n              \"nested\": {\n                \"Type\": {\n                  \"values\": {\n                    \"TYPE_DOUBLE\": 1,\n                    \"TYPE_FLOAT\": 2,\n                    \"TYPE_INT64\": 3,\n                    \"TYPE_UINT64\": 4,\n                    \"TYPE_INT32\": 5,\n                    \"TYPE_FIXED64\": 6,\n                    \"TYPE_FIXED32\": 7,\n                    \"TYPE_BOOL\": 8,\n                    \"TYPE_STRING\": 9,\n                    \"TYPE_GROUP\": 10,\n                    \"TYPE_MESSAGE\": 11,\n                    \"TYPE_BYTES\": 12,\n                    \"TYPE_UINT32\": 13,\n                    \"TYPE_ENUM\": 14,\n                    \"TYPE_SFIXED32\": 15,\n                    \"TYPE_SFIXED64\": 16,\n                    \"TYPE_SINT32\": 17,\n                    \"TYPE_SINT64\": 18\n                  }\n                },\n                \"Label\": {\n                  \"values\": {\n                    \"LABEL_OPTIONAL\": 1,\n                    \"LABEL_REQUIRED\": 2,\n                    \"LABEL_REPEATED\": 3\n                  }\n                }\n              }\n            },\n            \"OneofDescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"options\": {\n                  \"type\": \"OneofOptions\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"EnumDescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"EnumValueDescriptorProto\",\n                  \"id\": 2\n                },\n                \"options\": {\n                  \"type\": \"EnumOptions\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"EnumValueDescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"number\": {\n                  \"type\": \"int32\",\n                  \"id\": 2\n                },\n                \"options\": {\n                  \"type\": \"EnumValueOptions\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"ServiceDescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"method\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"MethodDescriptorProto\",\n                  \"id\": 2\n                },\n                \"options\": {\n                  \"type\": \"ServiceOptions\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"MethodDescriptorProto\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"inputType\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"outputType\": {\n                  \"type\": \"string\",\n                  \"id\": 3\n                },\n                \"options\": {\n                  \"type\": \"MethodOptions\",\n                  \"id\": 4\n                },\n                \"clientStreaming\": {\n                  \"type\": \"bool\",\n                  \"id\": 5\n                },\n                \"serverStreaming\": {\n                  \"type\": \"bool\",\n                  \"id\": 6\n                }\n              }\n            },\n            \"FileOptions\": {\n              \"fields\": {\n                \"javaPackage\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"javaOuterClassname\": {\n                  \"type\": \"string\",\n                  \"id\": 8\n                },\n                \"javaMultipleFiles\": {\n                  \"type\": \"bool\",\n                  \"id\": 10\n                },\n                \"javaGenerateEqualsAndHash\": {\n                  \"type\": \"bool\",\n                  \"id\": 20,\n                  \"options\": {\n                    \"deprecated\": true\n                  }\n                },\n                \"javaStringCheckUtf8\": {\n                  \"type\": \"bool\",\n                  \"id\": 27\n                },\n                \"optimizeFor\": {\n                  \"type\": \"OptimizeMode\",\n                  \"id\": 9,\n                  \"options\": {\n                    \"default\": \"SPEED\"\n                  }\n                },\n                \"goPackage\": {\n                  \"type\": \"string\",\n                  \"id\": 11\n                },\n                \"ccGenericServices\": {\n                  \"type\": \"bool\",\n                  \"id\": 16\n                },\n                \"javaGenericServices\": {\n                  \"type\": \"bool\",\n                  \"id\": 17\n                },\n                \"pyGenericServices\": {\n                  \"type\": \"bool\",\n                  \"id\": 18\n                },\n                \"deprecated\": {\n                  \"type\": \"bool\",\n                  \"id\": 23\n                },\n                \"ccEnableArenas\": {\n                  \"type\": \"bool\",\n                  \"id\": 31\n                },\n                \"objcClassPrefix\": {\n                  \"type\": \"string\",\n                  \"id\": 36\n                },\n                \"csharpNamespace\": {\n                  \"type\": \"string\",\n                  \"id\": 37\n                },\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ],\n              \"reserved\": [\n                [\n                  38,\n                  38\n                ]\n              ],\n              \"nested\": {\n                \"OptimizeMode\": {\n                  \"values\": {\n                    \"SPEED\": 1,\n                    \"CODE_SIZE\": 2,\n                    \"LITE_RUNTIME\": 3\n                  }\n                }\n              }\n            },\n            \"MessageOptions\": {\n              \"fields\": {\n                \"messageSetWireFormat\": {\n                  \"type\": \"bool\",\n                  \"id\": 1\n                },\n                \"noStandardDescriptorAccessor\": {\n                  \"type\": \"bool\",\n                  \"id\": 2\n                },\n                \"deprecated\": {\n                  \"type\": \"bool\",\n                  \"id\": 3\n                },\n                \"mapEntry\": {\n                  \"type\": \"bool\",\n                  \"id\": 7\n                },\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ],\n              \"reserved\": [\n                [\n                  8,\n                  8\n                ]\n              ]\n            },\n            \"FieldOptions\": {\n              \"fields\": {\n                \"ctype\": {\n                  \"type\": \"CType\",\n                  \"id\": 1,\n                  \"options\": {\n                    \"default\": \"STRING\"\n                  }\n                },\n                \"packed\": {\n                  \"type\": \"bool\",\n                  \"id\": 2\n                },\n                \"jstype\": {\n                  \"type\": \"JSType\",\n                  \"id\": 6,\n                  \"options\": {\n                    \"default\": \"JS_NORMAL\"\n                  }\n                },\n                \"lazy\": {\n                  \"type\": \"bool\",\n                  \"id\": 5\n                },\n                \"deprecated\": {\n                  \"type\": \"bool\",\n                  \"id\": 3\n                },\n                \"weak\": {\n                  \"type\": \"bool\",\n                  \"id\": 10\n                },\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ],\n              \"reserved\": [\n                [\n                  4,\n                  4\n                ]\n              ],\n              \"nested\": {\n                \"CType\": {\n                  \"values\": {\n                    \"STRING\": 0,\n                    \"CORD\": 1,\n                    \"STRING_PIECE\": 2\n                  }\n                },\n                \"JSType\": {\n                  \"values\": {\n                    \"JS_NORMAL\": 0,\n                    \"JS_STRING\": 1,\n                    \"JS_NUMBER\": 2\n                  }\n                }\n              }\n            },\n            \"OneofOptions\": {\n              \"fields\": {\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ]\n            },\n            \"EnumOptions\": {\n              \"fields\": {\n                \"allowAlias\": {\n                  \"type\": \"bool\",\n                  \"id\": 2\n                },\n                \"deprecated\": {\n                  \"type\": \"bool\",\n                  \"id\": 3\n                },\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ]\n            },\n            \"EnumValueOptions\": {\n              \"fields\": {\n                \"deprecated\": {\n                  \"type\": \"bool\",\n                  \"id\": 1\n                },\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ]\n            },\n            \"ServiceOptions\": {\n              \"fields\": {\n                \"deprecated\": {\n                  \"type\": \"bool\",\n                  \"id\": 33\n                },\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ]\n            },\n            \"MethodOptions\": {\n              \"fields\": {\n                \"deprecated\": {\n                  \"type\": \"bool\",\n                  \"id\": 33\n                },\n                \"uninterpretedOption\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"UninterpretedOption\",\n                  \"id\": 999\n                }\n              },\n              \"extensions\": [\n                [\n                  1000,\n                  536870911\n                ]\n              ]\n            },\n            \"UninterpretedOption\": {\n              \"fields\": {\n                \"name\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"NamePart\",\n                  \"id\": 2\n                },\n                \"identifierValue\": {\n                  \"type\": \"string\",\n                  \"id\": 3\n                },\n                \"positiveIntValue\": {\n                  \"type\": \"uint64\",\n                  \"id\": 4\n                },\n                \"negativeIntValue\": {\n                  \"type\": \"int64\",\n                  \"id\": 5\n                },\n                \"doubleValue\": {\n                  \"type\": \"double\",\n                  \"id\": 6\n                },\n                \"stringValue\": {\n                  \"type\": \"bytes\",\n                  \"id\": 7\n                },\n                \"aggregateValue\": {\n                  \"type\": \"string\",\n                  \"id\": 8\n                }\n              },\n              \"nested\": {\n                \"NamePart\": {\n                  \"fields\": {\n                    \"namePart\": {\n                      \"rule\": \"required\",\n                      \"type\": \"string\",\n                      \"id\": 1\n                    },\n                    \"isExtension\": {\n                      \"rule\": \"required\",\n                      \"type\": \"bool\",\n                      \"id\": 2\n                    }\n                  }\n                }\n              }\n            },\n            \"SourceCodeInfo\": {\n              \"fields\": {\n                \"location\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Location\",\n                  \"id\": 1\n                }\n              },\n              \"nested\": {\n                \"Location\": {\n                  \"fields\": {\n                    \"path\": {\n                      \"rule\": \"repeated\",\n                      \"type\": \"int32\",\n                      \"id\": 1\n                    },\n                    \"span\": {\n                      \"rule\": \"repeated\",\n                      \"type\": \"int32\",\n                      \"id\": 2\n                    },\n                    \"leadingComments\": {\n                      \"type\": \"string\",\n                      \"id\": 3\n                    },\n                    \"trailingComments\": {\n                      \"type\": \"string\",\n                      \"id\": 4\n                    },\n                    \"leadingDetachedComments\": {\n                      \"rule\": \"repeated\",\n                      \"type\": \"string\",\n                      \"id\": 6\n                    }\n                  }\n                }\n              }\n            },\n            \"GeneratedCodeInfo\": {\n              \"fields\": {\n                \"annotation\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Annotation\",\n                  \"id\": 1\n                }\n              },\n              \"nested\": {\n                \"Annotation\": {\n                  \"fields\": {\n                    \"path\": {\n                      \"rule\": \"repeated\",\n                      \"type\": \"int32\",\n                      \"id\": 1\n                    },\n                    \"sourceFile\": {\n                      \"type\": \"string\",\n                      \"id\": 2\n                    },\n                    \"begin\": {\n                      \"type\": \"int32\",\n                      \"id\": 3\n                    },\n                    \"end\": {\n                      \"type\": \"int32\",\n                      \"id\": 4\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}", "\"use strict\";\n\nvar $protobuf = require(\"../..\");\nmodule.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(require(\"../../google/protobuf/descriptor.json\")).lookup(\".google.protobuf\");\nvar Namespace = $protobuf.Namespace,\n  Root = $protobuf.Root,\n  Enum = $protobuf.Enum,\n  Type = $protobuf.Type,\n  Field = $protobuf.Field,\n  MapField = $protobuf.MapField,\n  OneOf = $protobuf.OneOf,\n  Service = $protobuf.Service,\n  Method = $protobuf.Method;\n\n// --- Root ---\n\n/**\n * Properties of a FileDescriptorSet message.\n * @interface IFileDescriptorSet\n * @property {IFileDescriptorProto[]} file Files\n */\n\n/**\n * Properties of a FileDescriptorProto message.\n * @interface IFileDescriptorProto\n * @property {string} [name] File name\n * @property {string} [package] Package\n * @property {*} [dependency] Not supported\n * @property {*} [publicDependency] Not supported\n * @property {*} [weakDependency] Not supported\n * @property {IDescriptorProto[]} [messageType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IServiceDescriptorProto[]} [service] Nested services\n * @property {IFieldDescriptorProto[]} [extension] Nested extension fields\n * @property {IFileOptions} [options] Options\n * @property {*} [sourceCodeInfo] Not supported\n * @property {string} [syntax=\"proto2\"] Syntax\n */\n\n/**\n * Properties of a FileOptions message.\n * @interface IFileOptions\n * @property {string} [javaPackage]\n * @property {string} [javaOuterClassname]\n * @property {boolean} [javaMultipleFiles]\n * @property {boolean} [javaGenerateEqualsAndHash]\n * @property {boolean} [javaStringCheckUtf8]\n * @property {IFileOptionsOptimizeMode} [optimizeFor=1]\n * @property {string} [goPackage]\n * @property {boolean} [ccGenericServices]\n * @property {boolean} [javaGenericServices]\n * @property {boolean} [pyGenericServices]\n * @property {boolean} [deprecated]\n * @property {boolean} [ccEnableArenas]\n * @property {string} [objcClassPrefix]\n * @property {string} [csharpNamespace]\n */\n\n/**\n * Values of he FileOptions.OptimizeMode enum.\n * @typedef IFileOptionsOptimizeMode\n * @type {number}\n * @property {number} SPEED=1\n * @property {number} CODE_SIZE=2\n * @property {number} LITE_RUNTIME=3\n */\n\n/**\n * Creates a root from a descriptor set.\n * @param {IFileDescriptorSet|Reader|Uint8Array} descriptor Descriptor\n * @returns {Root} Root instance\n */\nRoot.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.FileDescriptorSet.decode(descriptor);\n  var root = new Root();\n  if (descriptor.file) {\n    var fileDescriptor, filePackage;\n    for (var j = 0, i; j < descriptor.file.length; ++j) {\n      filePackage = root;\n      if ((fileDescriptor = descriptor.file[j])[\"package\"] && fileDescriptor[\"package\"].length) filePackage = root.define(fileDescriptor[\"package\"]);\n      if (fileDescriptor.name && fileDescriptor.name.length) root.files.push(filePackage.filename = fileDescriptor.name);\n      if (fileDescriptor.messageType) for (i = 0; i < fileDescriptor.messageType.length; ++i) filePackage.add(Type.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));\n      if (fileDescriptor.enumType) for (i = 0; i < fileDescriptor.enumType.length; ++i) filePackage.add(Enum.fromDescriptor(fileDescriptor.enumType[i]));\n      if (fileDescriptor.extension) for (i = 0; i < fileDescriptor.extension.length; ++i) filePackage.add(Field.fromDescriptor(fileDescriptor.extension[i]));\n      if (fileDescriptor.service) for (i = 0; i < fileDescriptor.service.length; ++i) filePackage.add(Service.fromDescriptor(fileDescriptor.service[i]));\n      var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);\n      if (opts) {\n        var ks = Object.keys(opts);\n        for (i = 0; i < ks.length; ++i) filePackage.setOption(ks[i], opts[ks[i]]);\n      }\n    }\n  }\n  return root;\n};\n\n/**\n * Converts a root to a descriptor set.\n * @returns {Message<IFileDescriptorSet>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */\nRoot.prototype.toDescriptor = function toDescriptor(syntax) {\n  var set = exports.FileDescriptorSet.create();\n  Root_toDescriptorRecursive(this, set.file, syntax);\n  return set;\n};\n\n// Traverses a namespace and assembles the descriptor set\nfunction Root_toDescriptorRecursive(ns, files, syntax) {\n  // Create a new file\n  var file = exports.FileDescriptorProto.create({\n    name: ns.filename || (ns.fullName.substring(1).replace(/\\./g, \"_\") || \"root\") + \".proto\"\n  });\n  if (syntax) file.syntax = syntax;\n  if (!(ns instanceof Root)) file[\"package\"] = ns.fullName.substring(1);\n\n  // Add nested types\n  for (var i = 0, nested; i < ns.nestedArray.length; ++i) if ((nested = ns._nestedArray[i]) instanceof Type) file.messageType.push(nested.toDescriptor(syntax));else if (nested instanceof Enum) file.enumType.push(nested.toDescriptor());else if (nested instanceof Field) file.extension.push(nested.toDescriptor(syntax));else if (nested instanceof Service) file.service.push(nested.toDescriptor());else if (nested instanceof /* plain */Namespace) Root_toDescriptorRecursive(nested, files, syntax); // requires new file\n\n  // Keep package-level options\n  file.options = toDescriptorOptions(ns.options, exports.FileOptions);\n\n  // And keep the file only if there is at least one nested object\n  if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length) files.push(file);\n}\n\n// --- Type ---\n\n/**\n * Properties of a DescriptorProto message.\n * @interface IDescriptorProto\n * @property {string} [name] Message type name\n * @property {IFieldDescriptorProto[]} [field] Fields\n * @property {IFieldDescriptorProto[]} [extension] Extension fields\n * @property {IDescriptorProto[]} [nestedType] Nested message types\n * @property {IEnumDescriptorProto[]} [enumType] Nested enums\n * @property {IDescriptorProtoExtensionRange[]} [extensionRange] Extension ranges\n * @property {IOneofDescriptorProto[]} [oneofDecl] Oneofs\n * @property {IMessageOptions} [options] Not supported\n * @property {IDescriptorProtoReservedRange[]} [reservedRange] Reserved ranges\n * @property {string[]} [reservedName] Reserved names\n */\n\n/**\n * Properties of a MessageOptions message.\n * @interface IMessageOptions\n * @property {boolean} [mapEntry=false] Whether this message is a map entry\n */\n\n/**\n * Properties of an ExtensionRange message.\n * @interface IDescriptorProtoExtensionRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */\n\n/**\n * Properties of a ReservedRange message.\n * @interface IDescriptorProtoReservedRange\n * @property {number} [start] Start field id\n * @property {number} [end] End field id\n */\n\nvar unnamedMessageIndex = 0;\n\n/**\n * Creates a type from a descriptor.\n * @param {IDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n * @returns {Type} Type instance\n */\nType.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n\n  // Create the message type\n  var type = new Type(descriptor.name.length ? descriptor.name : \"Type\" + unnamedMessageIndex++, fromDescriptorOptions(descriptor.options, exports.MessageOptions)),\n    i;\n\n  /* Oneofs */\n  if (descriptor.oneofDecl) for (i = 0; i < descriptor.oneofDecl.length; ++i) type.add(OneOf.fromDescriptor(descriptor.oneofDecl[i]));\n  /* Fields */\n  if (descriptor.field) for (i = 0; i < descriptor.field.length; ++i) {\n    var field = Field.fromDescriptor(descriptor.field[i], syntax);\n    type.add(field);\n    if (descriptor.field[i].hasOwnProperty(\"oneofIndex\"))\n      // eslint-disable-line no-prototype-builtins\n      type.oneofsArray[descriptor.field[i].oneofIndex].add(field);\n  }\n  /* Extension fields */\n  if (descriptor.extension) for (i = 0; i < descriptor.extension.length; ++i) type.add(Field.fromDescriptor(descriptor.extension[i], syntax));\n  /* Nested types */\n  if (descriptor.nestedType) for (i = 0; i < descriptor.nestedType.length; ++i) {\n    type.add(Type.fromDescriptor(descriptor.nestedType[i], syntax));\n    if (descriptor.nestedType[i].options && descriptor.nestedType[i].options.mapEntry) type.setOption(\"map_entry\", true);\n  }\n  /* Nested enums */\n  if (descriptor.enumType) for (i = 0; i < descriptor.enumType.length; ++i) type.add(Enum.fromDescriptor(descriptor.enumType[i]));\n  /* Extension ranges */\n  if (descriptor.extensionRange && descriptor.extensionRange.length) {\n    type.extensions = [];\n    for (i = 0; i < descriptor.extensionRange.length; ++i) type.extensions.push([descriptor.extensionRange[i].start, descriptor.extensionRange[i].end]);\n  }\n  /* Reserved... */\n  if (descriptor.reservedRange && descriptor.reservedRange.length || descriptor.reservedName && descriptor.reservedName.length) {\n    type.reserved = [];\n    /* Ranges */\n    if (descriptor.reservedRange) for (i = 0; i < descriptor.reservedRange.length; ++i) type.reserved.push([descriptor.reservedRange[i].start, descriptor.reservedRange[i].end]);\n    /* Names */\n    if (descriptor.reservedName) for (i = 0; i < descriptor.reservedName.length; ++i) type.reserved.push(descriptor.reservedName[i]);\n  }\n  return type;\n};\n\n/**\n * Converts a type to a descriptor.\n * @returns {Message<IDescriptorProto>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */\nType.prototype.toDescriptor = function toDescriptor(syntax) {\n  var descriptor = exports.DescriptorProto.create({\n      name: this.name\n    }),\n    i;\n\n  /* Fields */\n  for (i = 0; i < this.fieldsArray.length; ++i) {\n    var fieldDescriptor;\n    descriptor.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));\n    if (this._fieldsArray[i] instanceof MapField) {\n      // map fields are repeated FieldNameEntry\n      var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType),\n        valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType),\n        valueTypeName = valueType === /* type */11 || valueType === /* enum */14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : undefined;\n      descriptor.nestedType.push(exports.DescriptorProto.create({\n        name: fieldDescriptor.typeName,\n        field: [exports.FieldDescriptorProto.create({\n          name: \"key\",\n          number: 1,\n          label: 1,\n          type: keyType\n        }),\n        // can't reference a type or enum\n        exports.FieldDescriptorProto.create({\n          name: \"value\",\n          number: 2,\n          label: 1,\n          type: valueType,\n          typeName: valueTypeName\n        })],\n        options: exports.MessageOptions.create({\n          mapEntry: true\n        })\n      }));\n    }\n  }\n  /* Oneofs */\n  for (i = 0; i < this.oneofsArray.length; ++i) descriptor.oneofDecl.push(this._oneofsArray[i].toDescriptor());\n  /* Nested... */\n  for (i = 0; i < this.nestedArray.length; ++i) {\n    /* Extension fields */if (this._nestedArray[i] instanceof Field) descriptor.field.push(this._nestedArray[i].toDescriptor(syntax));\n    /* Types */else if (this._nestedArray[i] instanceof Type) descriptor.nestedType.push(this._nestedArray[i].toDescriptor(syntax));\n    /* Enums */else if (this._nestedArray[i] instanceof Enum) descriptor.enumType.push(this._nestedArray[i].toDescriptor());\n    // plain nested namespaces become packages instead in Root#toDescriptor\n  }\n  /* Extension ranges */\n  if (this.extensions) for (i = 0; i < this.extensions.length; ++i) descriptor.extensionRange.push(exports.DescriptorProto.ExtensionRange.create({\n    start: this.extensions[i][0],\n    end: this.extensions[i][1]\n  }));\n  /* Reserved... */\n  if (this.reserved) for (i = 0; i < this.reserved.length; ++i) /* Names */if (typeof this.reserved[i] === \"string\") descriptor.reservedName.push(this.reserved[i]);\n  /* Ranges */else descriptor.reservedRange.push(exports.DescriptorProto.ReservedRange.create({\n    start: this.reserved[i][0],\n    end: this.reserved[i][1]\n  }));\n  descriptor.options = toDescriptorOptions(this.options, exports.MessageOptions);\n  return descriptor;\n};\n\n// --- Field ---\n\n/**\n * Properties of a FieldDescriptorProto message.\n * @interface IFieldDescriptorProto\n * @property {string} [name] Field name\n * @property {number} [number] Field id\n * @property {IFieldDescriptorProtoLabel} [label] Field rule\n * @property {IFieldDescriptorProtoType} [type] Field basic type\n * @property {string} [typeName] Field type name\n * @property {string} [extendee] Extended type name\n * @property {string} [defaultValue] Literal default value\n * @property {number} [oneofIndex] Oneof index if part of a oneof\n * @property {*} [jsonName] Not supported\n * @property {IFieldOptions} [options] Field options\n */\n\n/**\n * Values of the FieldDescriptorProto.Label enum.\n * @typedef IFieldDescriptorProtoLabel\n * @type {number}\n * @property {number} LABEL_OPTIONAL=1\n * @property {number} LABEL_REQUIRED=2\n * @property {number} LABEL_REPEATED=3\n */\n\n/**\n * Values of the FieldDescriptorProto.Type enum.\n * @typedef IFieldDescriptorProtoType\n * @type {number}\n * @property {number} TYPE_DOUBLE=1\n * @property {number} TYPE_FLOAT=2\n * @property {number} TYPE_INT64=3\n * @property {number} TYPE_UINT64=4\n * @property {number} TYPE_INT32=5\n * @property {number} TYPE_FIXED64=6\n * @property {number} TYPE_FIXED32=7\n * @property {number} TYPE_BOOL=8\n * @property {number} TYPE_STRING=9\n * @property {number} TYPE_GROUP=10\n * @property {number} TYPE_MESSAGE=11\n * @property {number} TYPE_BYTES=12\n * @property {number} TYPE_UINT32=13\n * @property {number} TYPE_ENUM=14\n * @property {number} TYPE_SFIXED32=15\n * @property {number} TYPE_SFIXED64=16\n * @property {number} TYPE_SINT32=17\n * @property {number} TYPE_SINT64=18\n */\n\n/**\n * Properties of a FieldOptions message.\n * @interface IFieldOptions\n * @property {boolean} [packed] Whether packed or not (defaults to `false` for proto2 and `true` for proto3)\n * @property {IFieldOptionsJSType} [jstype] JavaScript value type (not used by protobuf.js)\n */\n\n/**\n * Values of the FieldOptions.JSType enum.\n * @typedef IFieldOptionsJSType\n * @type {number}\n * @property {number} JS_NORMAL=0\n * @property {number} JS_STRING=1\n * @property {number} JS_NUMBER=2\n */\n\n// copied here from parse.js\nvar numberRe = /^(?![eE])[0-9]*(?:\\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;\n\n/**\n * Creates a field from a descriptor.\n * @param {IFieldDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n * @returns {Field} Field instance\n */\nField.fromDescriptor = function fromDescriptor(descriptor, syntax) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.DescriptorProto.decode(descriptor);\n  if (typeof descriptor.number !== \"number\") throw Error(\"missing field id\");\n\n  // Rewire field type\n  var fieldType;\n  if (descriptor.typeName && descriptor.typeName.length) fieldType = descriptor.typeName;else fieldType = fromDescriptorType(descriptor.type);\n\n  // Rewire field rule\n  var fieldRule;\n  switch (descriptor.label) {\n    // 0 is reserved for errors\n    case 1:\n      fieldRule = undefined;\n      break;\n    case 2:\n      fieldRule = \"required\";\n      break;\n    case 3:\n      fieldRule = \"repeated\";\n      break;\n    default:\n      throw Error(\"illegal label: \" + descriptor.label);\n  }\n  var extendee = descriptor.extendee;\n  if (descriptor.extendee !== undefined) {\n    extendee = extendee.length ? extendee : undefined;\n  }\n  var field = new Field(descriptor.name.length ? descriptor.name : \"field\" + descriptor.number, descriptor.number, fieldType, fieldRule, extendee);\n  field.options = fromDescriptorOptions(descriptor.options, exports.FieldOptions);\n  if (descriptor.defaultValue && descriptor.defaultValue.length) {\n    var defaultValue = descriptor.defaultValue;\n    switch (defaultValue) {\n      case \"true\":\n      case \"TRUE\":\n        defaultValue = true;\n        break;\n      case \"false\":\n      case \"FALSE\":\n        defaultValue = false;\n        break;\n      default:\n        var match = numberRe.exec(defaultValue);\n        if (match) defaultValue = parseInt(defaultValue); // eslint-disable-line radix\n        break;\n    }\n    field.setOption(\"default\", defaultValue);\n  }\n  if (packableDescriptorType(descriptor.type)) {\n    if (syntax === \"proto3\") {\n      // defaults to packed=true (internal preset is packed=true)\n      if (descriptor.options && !descriptor.options.packed) field.setOption(\"packed\", false);\n    } else if (!(descriptor.options && descriptor.options.packed))\n      // defaults to packed=false\n      field.setOption(\"packed\", false);\n  }\n  return field;\n};\n\n/**\n * Converts a field to a descriptor.\n * @returns {Message<IFieldDescriptorProto>} Descriptor\n * @param {string} [syntax=\"proto2\"] Syntax\n */\nField.prototype.toDescriptor = function toDescriptor(syntax) {\n  var descriptor = exports.FieldDescriptorProto.create({\n    name: this.name,\n    number: this.id\n  });\n  if (this.map) {\n    descriptor.type = 11; // message\n    descriptor.typeName = $protobuf.util.ucFirst(this.name); // fieldName -> FieldNameEntry (built in Type#toDescriptor)\n    descriptor.label = 3; // repeated\n  } else {\n    // Rewire field type\n    switch (descriptor.type = toDescriptorType(this.type, this.resolve().resolvedType)) {\n      case 10: // group\n      case 11: // type\n      case 14:\n        // enum\n        descriptor.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;\n        break;\n    }\n\n    // Rewire field rule\n    switch (this.rule) {\n      case \"repeated\":\n        descriptor.label = 3;\n        break;\n      case \"required\":\n        descriptor.label = 2;\n        break;\n      default:\n        descriptor.label = 1;\n        break;\n    }\n  }\n\n  // Handle extension field\n  descriptor.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;\n\n  // Handle part of oneof\n  if (this.partOf) if ((descriptor.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0) throw Error(\"missing oneof\");\n  if (this.options) {\n    descriptor.options = toDescriptorOptions(this.options, exports.FieldOptions);\n    if (this.options[\"default\"] != null) descriptor.defaultValue = String(this.options[\"default\"]);\n  }\n  if (syntax === \"proto3\") {\n    // defaults to packed=true\n    if (!this.packed) (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = false;\n  } else if (this.packed)\n    // defaults to packed=false\n    (descriptor.options || (descriptor.options = exports.FieldOptions.create())).packed = true;\n  return descriptor;\n};\n\n// --- Enum ---\n\n/**\n * Properties of an EnumDescriptorProto message.\n * @interface IEnumDescriptorProto\n * @property {string} [name] Enum name\n * @property {IEnumValueDescriptorProto[]} [value] Enum values\n * @property {IEnumOptions} [options] Enum options\n */\n\n/**\n * Properties of an EnumValueDescriptorProto message.\n * @interface IEnumValueDescriptorProto\n * @property {string} [name] Name\n * @property {number} [number] Value\n * @property {*} [options] Not supported\n */\n\n/**\n * Properties of an EnumOptions message.\n * @interface IEnumOptions\n * @property {boolean} [allowAlias] Whether aliases are allowed\n * @property {boolean} [deprecated]\n */\n\nvar unnamedEnumIndex = 0;\n\n/**\n * Creates an enum from a descriptor.\n * @param {IEnumDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Enum} Enum instance\n */\nEnum.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.EnumDescriptorProto.decode(descriptor);\n\n  // Construct values object\n  var values = {};\n  if (descriptor.value) for (var i = 0; i < descriptor.value.length; ++i) {\n    var name = descriptor.value[i].name,\n      value = descriptor.value[i].number || 0;\n    values[name && name.length ? name : \"NAME\" + value] = value;\n  }\n  return new Enum(descriptor.name && descriptor.name.length ? descriptor.name : \"Enum\" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor.options, exports.EnumOptions));\n};\n\n/**\n * Converts an enum to a descriptor.\n * @returns {Message<IEnumDescriptorProto>} Descriptor\n */\nEnum.prototype.toDescriptor = function toDescriptor() {\n  // Values\n  var values = [];\n  for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i) values.push(exports.EnumValueDescriptorProto.create({\n    name: ks[i],\n    number: this.values[ks[i]]\n  }));\n  return exports.EnumDescriptorProto.create({\n    name: this.name,\n    value: values,\n    options: toDescriptorOptions(this.options, exports.EnumOptions)\n  });\n};\n\n// --- OneOf ---\n\n/**\n * Properties of a OneofDescriptorProto message.\n * @interface IOneofDescriptorProto\n * @property {string} [name] Oneof name\n * @property {*} [options] Not supported\n */\n\nvar unnamedOneofIndex = 0;\n\n/**\n * Creates a oneof from a descriptor.\n * @param {IOneofDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {OneOf} OneOf instance\n */\nOneOf.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.OneofDescriptorProto.decode(descriptor);\n  return new OneOf(\n  // unnamedOneOfIndex is global, not per type, because we have no ref to a type here\n  descriptor.name && descriptor.name.length ? descriptor.name : \"oneof\" + unnamedOneofIndex++\n  // fromDescriptorOptions(descriptor.options, exports.OneofOptions) - only uninterpreted_option\n  );\n};\n\n/**\n * Converts a oneof to a descriptor.\n * @returns {Message<IOneofDescriptorProto>} Descriptor\n */\nOneOf.prototype.toDescriptor = function toDescriptor() {\n  return exports.OneofDescriptorProto.create({\n    name: this.name\n    // options: toDescriptorOptions(this.options, exports.OneofOptions) - only uninterpreted_option\n  });\n};\n\n// --- Service ---\n\n/**\n * Properties of a ServiceDescriptorProto message.\n * @interface IServiceDescriptorProto\n * @property {string} [name] Service name\n * @property {IMethodDescriptorProto[]} [method] Methods\n * @property {IServiceOptions} [options] Options\n */\n\n/**\n * Properties of a ServiceOptions message.\n * @interface IServiceOptions\n * @property {boolean} [deprecated]\n */\n\nvar unnamedServiceIndex = 0;\n\n/**\n * Creates a service from a descriptor.\n * @param {IServiceDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Service} Service instance\n */\nService.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.ServiceDescriptorProto.decode(descriptor);\n  var service = new Service(descriptor.name && descriptor.name.length ? descriptor.name : \"Service\" + unnamedServiceIndex++, fromDescriptorOptions(descriptor.options, exports.ServiceOptions));\n  if (descriptor.method) for (var i = 0; i < descriptor.method.length; ++i) service.add(Method.fromDescriptor(descriptor.method[i]));\n  return service;\n};\n\n/**\n * Converts a service to a descriptor.\n * @returns {Message<IServiceDescriptorProto>} Descriptor\n */\nService.prototype.toDescriptor = function toDescriptor() {\n  // Methods\n  var methods = [];\n  for (var i = 0; i < this.methodsArray.length; ++i) methods.push(this._methodsArray[i].toDescriptor());\n  return exports.ServiceDescriptorProto.create({\n    name: this.name,\n    method: methods,\n    options: toDescriptorOptions(this.options, exports.ServiceOptions)\n  });\n};\n\n// --- Method ---\n\n/**\n * Properties of a MethodDescriptorProto message.\n * @interface IMethodDescriptorProto\n * @property {string} [name] Method name\n * @property {string} [inputType] Request type name\n * @property {string} [outputType] Response type name\n * @property {IMethodOptions} [options] Not supported\n * @property {boolean} [clientStreaming=false] Whether requests are streamed\n * @property {boolean} [serverStreaming=false] Whether responses are streamed\n */\n\n/**\n * Properties of a MethodOptions message.\n * @interface IMethodOptions\n * @property {boolean} [deprecated]\n */\n\nvar unnamedMethodIndex = 0;\n\n/**\n * Creates a method from a descriptor.\n * @param {IMethodDescriptorProto|Reader|Uint8Array} descriptor Descriptor\n * @returns {Method} Reflected method instance\n */\nMethod.fromDescriptor = function fromDescriptor(descriptor) {\n  // Decode the descriptor message if specified as a buffer:\n  if (typeof descriptor.length === \"number\") descriptor = exports.MethodDescriptorProto.decode(descriptor);\n  return new Method(\n  // unnamedMethodIndex is global, not per service, because we have no ref to a service here\n  descriptor.name && descriptor.name.length ? descriptor.name : \"Method\" + unnamedMethodIndex++, \"rpc\", descriptor.inputType, descriptor.outputType, Boolean(descriptor.clientStreaming), Boolean(descriptor.serverStreaming), fromDescriptorOptions(descriptor.options, exports.MethodOptions));\n};\n\n/**\n * Converts a method to a descriptor.\n * @returns {Message<IMethodDescriptorProto>} Descriptor\n */\nMethod.prototype.toDescriptor = function toDescriptor() {\n  return exports.MethodDescriptorProto.create({\n    name: this.name,\n    inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,\n    outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,\n    clientStreaming: this.requestStream,\n    serverStreaming: this.responseStream,\n    options: toDescriptorOptions(this.options, exports.MethodOptions)\n  });\n};\n\n// --- utility ---\n\n// Converts a descriptor type to a protobuf.js basic type\nfunction fromDescriptorType(type) {\n  switch (type) {\n    // 0 is reserved for errors\n    case 1:\n      return \"double\";\n    case 2:\n      return \"float\";\n    case 3:\n      return \"int64\";\n    case 4:\n      return \"uint64\";\n    case 5:\n      return \"int32\";\n    case 6:\n      return \"fixed64\";\n    case 7:\n      return \"fixed32\";\n    case 8:\n      return \"bool\";\n    case 9:\n      return \"string\";\n    case 12:\n      return \"bytes\";\n    case 13:\n      return \"uint32\";\n    case 15:\n      return \"sfixed32\";\n    case 16:\n      return \"sfixed64\";\n    case 17:\n      return \"sint32\";\n    case 18:\n      return \"sint64\";\n  }\n  throw Error(\"illegal type: \" + type);\n}\n\n// Tests if a descriptor type is packable\nfunction packableDescriptorType(type) {\n  switch (type) {\n    case 1: // double\n    case 2: // float\n    case 3: // int64\n    case 4: // uint64\n    case 5: // int32\n    case 6: // fixed64\n    case 7: // fixed32\n    case 8: // bool\n    case 13: // uint32\n    case 14: // enum (!)\n    case 15: // sfixed32\n    case 16: // sfixed64\n    case 17: // sint32\n    case 18:\n      // sint64\n      return true;\n  }\n  return false;\n}\n\n// Converts a protobuf.js basic type to a descriptor type\nfunction toDescriptorType(type, resolvedType) {\n  switch (type) {\n    // 0 is reserved for errors\n    case \"double\":\n      return 1;\n    case \"float\":\n      return 2;\n    case \"int64\":\n      return 3;\n    case \"uint64\":\n      return 4;\n    case \"int32\":\n      return 5;\n    case \"fixed64\":\n      return 6;\n    case \"fixed32\":\n      return 7;\n    case \"bool\":\n      return 8;\n    case \"string\":\n      return 9;\n    case \"bytes\":\n      return 12;\n    case \"uint32\":\n      return 13;\n    case \"sfixed32\":\n      return 15;\n    case \"sfixed64\":\n      return 16;\n    case \"sint32\":\n      return 17;\n    case \"sint64\":\n      return 18;\n  }\n  if (resolvedType instanceof Enum) return 14;\n  if (resolvedType instanceof Type) return resolvedType.group ? 10 : 11;\n  throw Error(\"illegal type: \" + type);\n}\n\n// Converts descriptor options to an options object\nfunction fromDescriptorOptions(options, type) {\n  if (!options) return undefined;\n  var out = [];\n  for (var i = 0, field, key, val; i < type.fieldsArray.length; ++i) if ((key = (field = type._fieldsArray[i]).name) !== \"uninterpretedOption\") if (options.hasOwnProperty(key)) {\n    // eslint-disable-line no-prototype-builtins\n    val = options[key];\n    if (field.resolvedType instanceof Enum && typeof val === \"number\" && field.resolvedType.valuesById[val] !== undefined) val = field.resolvedType.valuesById[val];\n    out.push(underScore(key), val);\n  }\n  return out.length ? $protobuf.util.toObject(out) : undefined;\n}\n\n// Converts an options object to descriptor options\nfunction toDescriptorOptions(options, type) {\n  if (!options) return undefined;\n  var out = [];\n  for (var i = 0, ks = Object.keys(options), key, val; i < ks.length; ++i) {\n    val = options[key = ks[i]];\n    if (key === \"default\") continue;\n    var field = type.fields[key];\n    if (!field && !(field = type.fields[key = $protobuf.util.camelCase(key)])) continue;\n    out.push(key, val);\n  }\n  return out.length ? type.fromObject($protobuf.util.toObject(out)) : undefined;\n}\n\n// Calculates the shortest relative path from `from` to `to`.\nfunction shortname(from, to) {\n  var fromPath = from.fullName.split(\".\"),\n    toPath = to.fullName.split(\".\"),\n    i = 0,\n    j = 0,\n    k = toPath.length - 1;\n  if (!(from instanceof Root) && to instanceof Namespace) while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {\n    var other = to.lookup(fromPath[i++], true);\n    if (other !== null && other !== to) break;\n    ++j;\n  } else for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j);\n  return toPath.slice(j).join(\".\");\n}\n\n// copied here from cli/targets/proto.js\nfunction underScore(str) {\n  return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function ($0, $1) {\n    return \"_\" + $1.toLowerCase();\n  });\n}\n\n// --- exports ---\n\n/**\n * Reflected file descriptor set.\n * @name FileDescriptorSet\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected file descriptor proto.\n * @name FileDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected descriptor proto.\n * @name DescriptorProto\n * @type {Type}\n * @property {Type} ExtensionRange\n * @property {Type} ReservedRange\n * @const\n * @tstype $protobuf.Type & {\n *     ExtensionRange: $protobuf.Type,\n *     ReservedRange: $protobuf.Type\n * }\n */\n\n/**\n * Reflected field descriptor proto.\n * @name FieldDescriptorProto\n * @type {Type}\n * @property {Enum} Label\n * @property {Enum} Type\n * @const\n * @tstype $protobuf.Type & {\n *     Label: $protobuf.Enum,\n *     Type: $protobuf.Enum\n * }\n */\n\n/**\n * Reflected oneof descriptor proto.\n * @name OneofDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum descriptor proto.\n * @name EnumDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected service descriptor proto.\n * @name ServiceDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum value descriptor proto.\n * @name EnumValueDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected method descriptor proto.\n * @name MethodDescriptorProto\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected file options.\n * @name FileOptions\n * @type {Type}\n * @property {Enum} OptimizeMode\n * @const\n * @tstype $protobuf.Type & {\n *     OptimizeMode: $protobuf.Enum\n * }\n */\n\n/**\n * Reflected message options.\n * @name MessageOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected field options.\n * @name FieldOptions\n * @type {Type}\n * @property {Enum} CType\n * @property {Enum} JSType\n * @const\n * @tstype $protobuf.Type & {\n *     CType: $protobuf.Enum,\n *     JSType: $protobuf.Enum\n * }\n */\n\n/**\n * Reflected oneof options.\n * @name OneofOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum options.\n * @name EnumOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected enum value options.\n * @name EnumValueOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected service options.\n * @name ServiceOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected method options.\n * @name MethodOptions\n * @type {Type}\n * @const\n * @tstype $protobuf.Type\n */\n\n/**\n * Reflected uninterpretet option.\n * @name UninterpretedOption\n * @type {Type}\n * @property {Type} NamePart\n * @const\n * @tstype $protobuf.Type & {\n *     NamePart: $protobuf.Type\n * }\n */\n\n/**\n * Reflected source code info.\n * @name SourceCodeInfo\n * @type {Type}\n * @property {Type} Location\n * @const\n * @tstype $protobuf.Type & {\n *     Location: $protobuf.Type\n * }\n */\n\n/**\n * Reflected generated code info.\n * @name GeneratedCodeInfo\n * @type {Type}\n * @property {Type} Annotation\n * @const\n * @tstype $protobuf.Type & {\n *     Annotation: $protobuf.Type\n * }\n */", "{\n  \"nested\": {\n    \"google\": {\n      \"nested\": {\n        \"protobuf\": {\n          \"nested\": {\n            \"Api\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"methods\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Method\",\n                  \"id\": 2\n                },\n                \"options\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Option\",\n                  \"id\": 3\n                },\n                \"version\": {\n                  \"type\": \"string\",\n                  \"id\": 4\n                },\n                \"sourceContext\": {\n                  \"type\": \"SourceContext\",\n                  \"id\": 5\n                },\n                \"mixins\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Mixin\",\n                  \"id\": 6\n                },\n                \"syntax\": {\n                  \"type\": \"Syntax\",\n                  \"id\": 7\n                }\n              }\n            },\n            \"Method\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"requestTypeUrl\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"requestStreaming\": {\n                  \"type\": \"bool\",\n                  \"id\": 3\n                },\n                \"responseTypeUrl\": {\n                  \"type\": \"string\",\n                  \"id\": 4\n                },\n                \"responseStreaming\": {\n                  \"type\": \"bool\",\n                  \"id\": 5\n                },\n                \"options\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Option\",\n                  \"id\": 6\n                },\n                \"syntax\": {\n                  \"type\": \"Syntax\",\n                  \"id\": 7\n                }\n              }\n            },\n            \"Mixin\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"root\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"SourceContext\": {\n              \"fields\": {\n                \"fileName\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Option\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"type\": \"Any\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Syntax\": {\n              \"values\": {\n                \"SYNTAX_PROTO2\": 0,\n                \"SYNTAX_PROTO3\": 1\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}", "{\n  \"nested\": {\n    \"google\": {\n      \"nested\": {\n        \"protobuf\": {\n          \"nested\": {\n            \"SourceContext\": {\n              \"fields\": {\n                \"fileName\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}", "{\n  \"nested\": {\n    \"google\": {\n      \"nested\": {\n        \"protobuf\": {\n          \"nested\": {\n            \"Type\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"fields\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Field\",\n                  \"id\": 2\n                },\n                \"oneofs\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"string\",\n                  \"id\": 3\n                },\n                \"options\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Option\",\n                  \"id\": 4\n                },\n                \"sourceContext\": {\n                  \"type\": \"SourceContext\",\n                  \"id\": 5\n                },\n                \"syntax\": {\n                  \"type\": \"Syntax\",\n                  \"id\": 6\n                }\n              }\n            },\n            \"Field\": {\n              \"fields\": {\n                \"kind\": {\n                  \"type\": \"Kind\",\n                  \"id\": 1\n                },\n                \"cardinality\": {\n                  \"type\": \"Cardinality\",\n                  \"id\": 2\n                },\n                \"number\": {\n                  \"type\": \"int32\",\n                  \"id\": 3\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 4\n                },\n                \"typeUrl\": {\n                  \"type\": \"string\",\n                  \"id\": 6\n                },\n                \"oneofIndex\": {\n                  \"type\": \"int32\",\n                  \"id\": 7\n                },\n                \"packed\": {\n                  \"type\": \"bool\",\n                  \"id\": 8\n                },\n                \"options\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Option\",\n                  \"id\": 9\n                },\n                \"jsonName\": {\n                  \"type\": \"string\",\n                  \"id\": 10\n                },\n                \"defaultValue\": {\n                  \"type\": \"string\",\n                  \"id\": 11\n                }\n              },\n              \"nested\": {\n                \"Kind\": {\n                  \"values\": {\n                    \"TYPE_UNKNOWN\": 0,\n                    \"TYPE_DOUBLE\": 1,\n                    \"TYPE_FLOAT\": 2,\n                    \"TYPE_INT64\": 3,\n                    \"TYPE_UINT64\": 4,\n                    \"TYPE_INT32\": 5,\n                    \"TYPE_FIXED64\": 6,\n                    \"TYPE_FIXED32\": 7,\n                    \"TYPE_BOOL\": 8,\n                    \"TYPE_STRING\": 9,\n                    \"TYPE_GROUP\": 10,\n                    \"TYPE_MESSAGE\": 11,\n                    \"TYPE_BYTES\": 12,\n                    \"TYPE_UINT32\": 13,\n                    \"TYPE_ENUM\": 14,\n                    \"TYPE_SFIXED32\": 15,\n                    \"TYPE_SFIXED64\": 16,\n                    \"TYPE_SINT32\": 17,\n                    \"TYPE_SINT64\": 18\n                  }\n                },\n                \"Cardinality\": {\n                  \"values\": {\n                    \"CARDINALITY_UNKNOWN\": 0,\n                    \"CARDINALITY_OPTIONAL\": 1,\n                    \"CARDINALITY_REQUIRED\": 2,\n                    \"CARDINALITY_REPEATED\": 3\n                  }\n                }\n              }\n            },\n            \"Enum\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"enumvalue\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"EnumValue\",\n                  \"id\": 2\n                },\n                \"options\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Option\",\n                  \"id\": 3\n                },\n                \"sourceContext\": {\n                  \"type\": \"SourceContext\",\n                  \"id\": 4\n                },\n                \"syntax\": {\n                  \"type\": \"Syntax\",\n                  \"id\": 5\n                }\n              }\n            },\n            \"EnumValue\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"number\": {\n                  \"type\": \"int32\",\n                  \"id\": 2\n                },\n                \"options\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Option\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"Option\": {\n              \"fields\": {\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"type\": \"Any\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Syntax\": {\n              \"values\": {\n                \"SYNTAX_PROTO2\": 0,\n                \"SYNTAX_PROTO3\": 1\n              }\n            },\n            \"Any\": {\n              \"fields\": {\n                \"type_url\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"value\": {\n                  \"type\": \"bytes\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"SourceContext\": {\n              \"fields\": {\n                \"fileName\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}", "\"use strict\";\n\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.addCommonProtos = exports.loadProtosWithOptionsSync = exports.loadProtosWithOptions = void 0;\nconst fs = require(\"fs\");\nconst path = require(\"path\");\nconst Protobuf = require(\"protobufjs\");\nfunction addIncludePathResolver(root, includePaths) {\n  const originalResolvePath = root.resolvePath;\n  root.resolvePath = (origin, target) => {\n    if (path.isAbsolute(target)) {\n      return target;\n    }\n    for (const directory of includePaths) {\n      const fullPath = path.join(directory, target);\n      try {\n        fs.accessSync(fullPath, fs.constants.R_OK);\n        return fullPath;\n      } catch (err) {\n        continue;\n      }\n    }\n    process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);\n    return originalResolvePath(origin, target);\n  };\n}\nasync function loadProtosWithOptions(filename, options) {\n  const root = new Protobuf.Root();\n  options = options || {};\n  if (!!options.includeDirs) {\n    if (!Array.isArray(options.includeDirs)) {\n      return Promise.reject(new Error('The includeDirs option must be an array'));\n    }\n    addIncludePathResolver(root, options.includeDirs);\n  }\n  const loadedRoot = await root.load(filename, options);\n  loadedRoot.resolveAll();\n  return loadedRoot;\n}\nexports.loadProtosWithOptions = loadProtosWithOptions;\nfunction loadProtosWithOptionsSync(filename, options) {\n  const root = new Protobuf.Root();\n  options = options || {};\n  if (!!options.includeDirs) {\n    if (!Array.isArray(options.includeDirs)) {\n      throw new Error('The includeDirs option must be an array');\n    }\n    addIncludePathResolver(root, options.includeDirs);\n  }\n  const loadedRoot = root.loadSync(filename, options);\n  loadedRoot.resolveAll();\n  return loadedRoot;\n}\nexports.loadProtosWithOptionsSync = loadProtosWithOptionsSync;\n/**\n * Load Google's well-known proto files that aren't exposed by Protobuf.js.\n */\nfunction addCommonProtos() {\n  // Protobuf.js exposes: any, duration, empty, field_mask, struct, timestamp,\n  // and wrappers. compiler/plugin is excluded in Protobuf.js and here.\n  // Using constant strings for compatibility with tools like Webpack\n  const apiDescriptor = require('protobufjs/google/protobuf/api.json');\n  const descriptorDescriptor = require('protobufjs/google/protobuf/descriptor.json');\n  const sourceContextDescriptor = require('protobufjs/google/protobuf/source_context.json');\n  const typeDescriptor = require('protobufjs/google/protobuf/type.json');\n  Protobuf.common('api', apiDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('descriptor', descriptorDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('source_context', sourceContextDescriptor.nested.google.nested.protobuf.nested);\n  Protobuf.common('type', typeDescriptor.nested.google.nested.protobuf.nested);\n}\nexports.addCommonProtos = addCommonProtos;\n", "// GENERATED FILE. DO NOT EDIT.\nvar Long = function (exports) {\n  \"use strict\";\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = void 0;\n\n  /**\n   * @license\n   * Copyright 2009 The Closure Library Authors\n   * Copyright 2020 Daniel Wirtz / The long.js Authors.\n   *\n   * Licensed under the Apache License, Version 2.0 (the \"License\");\n   * you may not use this file except in compliance with the License.\n   * You may obtain a copy of the License at\n   *\n   *     http://www.apache.org/licenses/LICENSE-2.0\n   *\n   * Unless required by applicable law or agreed to in writing, software\n   * distributed under the License is distributed on an \"AS IS\" BASIS,\n   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   * See the License for the specific language governing permissions and\n   * limitations under the License.\n   *\n   * SPDX-License-Identifier: Apache-2.0\n   */\n  // WebAssembly optimizations to do native i64 multiplication and divide\n  var wasm = null;\n  try {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11])), {}).exports;\n  } catch (e) {// no wasm support :(\n  }\n  /**\n   * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n   *  See the from* functions below for more convenient ways of constructing Longs.\n   * @exports Long\n   * @class A Long class for representing a 64 bit two's-complement integer value.\n   * @param {number} low The low (signed) 32 bits of the long\n   * @param {number} high The high (signed) 32 bits of the long\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @constructor\n   */\n\n  function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n\n    this.unsigned = !!unsigned;\n  } // The internal representation of a long is the two given signed, 32-bit values.\n  // We use 32-bit pieces because these are the size of integers on which\n  // Javascript performs bit-operations.  For operations like addition and\n  // multiplication, we split each number into 16 bit pieces, which can easily be\n  // multiplied within Javascript's floating-point representation without overflow\n  // or change in sign.\n  //\n  // In the algorithms below, we frequently reduce the negative case to the\n  // positive case by negating the input(s) and then post-processing the result.\n  // Note that we must ALWAYS check specially whether those values are MIN_VALUE\n  // (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n  // a positive number, it overflows back into a negative).  Not handling this\n  // case would often result in infinite recursion.\n  //\n  // Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n  // methods on which they depend.\n\n  /**\n   * An indicator used to reliably determine if an object is a Long or not.\n   * @type {boolean}\n   * @const\n   * @private\n   */\n\n  Long.prototype.__isLong__;\n  Object.defineProperty(Long.prototype, \"__isLong__\", {\n    value: true\n  });\n  /**\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   * @inner\n   */\n\n  function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n  }\n  /**\n   * @function\n   * @param {*} value number\n   * @returns {number}\n   * @inner\n   */\n\n  function ctz32(value) {\n    var c = Math.clz32(value & -value);\n    return value ? 31 - c : c;\n  }\n  /**\n   * Tests if the specified object is a Long.\n   * @function\n   * @param {*} obj Object\n   * @returns {boolean}\n   */\n\n  Long.isLong = isLong;\n  /**\n   * A cache of the Long representations of small integer values.\n   * @type {!Object}\n   * @inner\n   */\n\n  var INT_CACHE = {};\n  /**\n   * A cache of the Long representations of small unsigned integer values.\n   * @type {!Object}\n   * @inner\n   */\n\n  var UINT_CACHE = {};\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n      value >>>= 0;\n      if (cache = 0 <= value && value < 256) {\n        cachedObj = UINT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, 0, true);\n      if (cache) UINT_CACHE[value] = obj;\n      return obj;\n    } else {\n      value |= 0;\n      if (cache = -128 <= value && value < 128) {\n        cachedObj = INT_CACHE[value];\n        if (cachedObj) return cachedObj;\n      }\n      obj = fromBits(value, value < 0 ? -1 : 0, false);\n      if (cache) INT_CACHE[value] = obj;\n      return obj;\n    }\n  }\n  /**\n   * Returns a Long representing the given 32 bit integer value.\n   * @function\n   * @param {number} value The 32 bit integer in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n\n  Long.fromInt = fromInt;\n  /**\n   * @param {number} value\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromNumber(value, unsigned) {\n    if (isNaN(value)) return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n      if (value < 0) return UZERO;\n      if (value >= TWO_PWR_64_DBL) return MAX_UNSIGNED_VALUE;\n    } else {\n      if (value <= -TWO_PWR_63_DBL) return MIN_VALUE;\n      if (value + 1 >= TWO_PWR_63_DBL) return MAX_VALUE;\n    }\n    if (value < 0) return fromNumber(-value, unsigned).neg();\n    return fromBits(value % TWO_PWR_32_DBL | 0, value / TWO_PWR_32_DBL | 0, unsigned);\n  }\n  /**\n   * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n   * @function\n   * @param {number} value The number in question\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n\n  Long.fromNumber = fromNumber;\n  /**\n   * @param {number} lowBits\n   * @param {number} highBits\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n  }\n  /**\n   * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n   *  assumed to use 32 bits.\n   * @function\n   * @param {number} lowBits The low 32 bits\n   * @param {number} highBits The high 32 bits\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long} The corresponding Long value\n   */\n\n  Long.fromBits = fromBits;\n  /**\n   * @function\n   * @param {number} base\n   * @param {number} exponent\n   * @returns {number}\n   * @inner\n   */\n\n  var pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n\n  /**\n   * @param {string} str\n   * @param {(boolean|number)=} unsigned\n   * @param {number=} radix\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromString(str, unsigned, radix) {\n    if (str.length === 0) throw Error('empty string');\n    if (typeof unsigned === 'number') {\n      // For goog.math.long compatibility\n      radix = unsigned;\n      unsigned = false;\n    } else {\n      unsigned = !!unsigned;\n    }\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\") return unsigned ? UZERO : ZERO;\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    var p;\n    if ((p = str.indexOf('-')) > 0) throw Error('interior hyphen');else if (p === 0) {\n      return fromString(str.substring(1), unsigned, radix).neg();\n    } // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n      var size = Math.min(8, str.length - i),\n        value = parseInt(str.substring(i, i + size), radix);\n      if (size < 8) {\n        var power = fromNumber(pow_dbl(radix, size));\n        result = result.mul(power).add(fromNumber(value));\n      } else {\n        result = result.mul(radixToPower);\n        result = result.add(fromNumber(value));\n      }\n    }\n    result.unsigned = unsigned;\n    return result;\n  }\n  /**\n   * Returns a Long representation of the given string, written using the specified radix.\n   * @function\n   * @param {string} str The textual representation of the Long\n   * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n   * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n   * @returns {!Long} The corresponding Long value\n   */\n\n  Long.fromString = fromString;\n  /**\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n   * @param {boolean=} unsigned\n   * @returns {!Long}\n   * @inner\n   */\n\n  function fromValue(val, unsigned) {\n    if (typeof val === 'number') return fromNumber(val, unsigned);\n    if (typeof val === 'string') return fromString(val, unsigned); // Throws for non-objects, converts non-instanceof Long:\n\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n  }\n  /**\n   * Converts the specified value to a Long using the appropriate from* function for its type.\n   * @function\n   * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {!Long}\n   */\n\n  Long.fromValue = fromValue; // NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n  // no runtime penalty for these.\n\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_16_DBL = 1 << 16;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_24_DBL = 1 << 24;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n  /**\n   * @type {number}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n  /**\n   * @type {!Long}\n   * @const\n   * @inner\n   */\n\n  var TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var ZERO = fromInt(0);\n  /**\n   * Signed zero.\n   * @type {!Long}\n   */\n\n  Long.ZERO = ZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var UZERO = fromInt(0, true);\n  /**\n   * Unsigned zero.\n   * @type {!Long}\n   */\n\n  Long.UZERO = UZERO;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var ONE = fromInt(1);\n  /**\n   * Signed one.\n   * @type {!Long}\n   */\n\n  Long.ONE = ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var UONE = fromInt(1, true);\n  /**\n   * Unsigned one.\n   * @type {!Long}\n   */\n\n  Long.UONE = UONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var NEG_ONE = fromInt(-1);\n  /**\n   * Signed negative one.\n   * @type {!Long}\n   */\n\n  Long.NEG_ONE = NEG_ONE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n  /**\n   * Maximum signed value.\n   * @type {!Long}\n   */\n\n  Long.MAX_VALUE = MAX_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n  /**\n   * Maximum unsigned value.\n   * @type {!Long}\n   */\n\n  Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n  /**\n   * @type {!Long}\n   * @inner\n   */\n\n  var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n  /**\n   * Minimum signed value.\n   * @type {!Long}\n   */\n\n  Long.MIN_VALUE = MIN_VALUE;\n  /**\n   * @alias Long.prototype\n   * @inner\n   */\n\n  var LongPrototype = Long.prototype;\n  /**\n   * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n   * @this {!Long}\n   * @returns {number}\n   */\n\n  LongPrototype.toInt = function toInt() {\n    return this.unsigned ? this.low >>> 0 : this.low;\n  };\n  /**\n   * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n   * @this {!Long}\n   * @returns {number}\n   */\n\n  LongPrototype.toNumber = function toNumber() {\n    if (this.unsigned) return (this.high >>> 0) * TWO_PWR_32_DBL + (this.low >>> 0);\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\n  };\n  /**\n   * Converts the Long to a string written in the specified radix.\n   * @this {!Long}\n   * @param {number=} radix Radix (2-36), defaults to 10\n   * @returns {string}\n   * @override\n   * @throws {RangeError} If `radix` is out of range\n   */\n\n  LongPrototype.toString = function toString(radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix) throw RangeError('radix');\n    if (this.isZero()) return '0';\n    if (this.isNegative()) {\n      // Unsigned Longs are never negative\n      if (this.eq(MIN_VALUE)) {\n        // We need to change the Long value before it can be negated, so we remove\n        // the bottom-most digit in this base and then recurse to do the rest.\n        var radixLong = fromNumber(radix),\n          div = this.div(radixLong),\n          rem1 = div.mul(radixLong).sub(this);\n        return div.toString(radix) + rem1.toInt().toString(radix);\n      } else return '-' + this.neg().toString(radix);\n    } // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\n      rem = this;\n    var result = '';\n    while (true) {\n      var remDiv = rem.div(radixToPower),\n        intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\n        digits = intval.toString(radix);\n      rem = remDiv;\n      if (rem.isZero()) return digits + result;else {\n        while (digits.length < 6) digits = '0' + digits;\n        result = '' + digits + result;\n      }\n    }\n  };\n  /**\n   * Gets the high 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed high bits\n   */\n\n  LongPrototype.getHighBits = function getHighBits() {\n    return this.high;\n  };\n  /**\n   * Gets the high 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned high bits\n   */\n\n  LongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\n    return this.high >>> 0;\n  };\n  /**\n   * Gets the low 32 bits as a signed integer.\n   * @this {!Long}\n   * @returns {number} Signed low bits\n   */\n\n  LongPrototype.getLowBits = function getLowBits() {\n    return this.low;\n  };\n  /**\n   * Gets the low 32 bits as an unsigned integer.\n   * @this {!Long}\n   * @returns {number} Unsigned low bits\n   */\n\n  LongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\n    return this.low >>> 0;\n  };\n  /**\n   * Gets the number of bits needed to represent the absolute value of this Long.\n   * @this {!Long}\n   * @returns {number}\n   */\n\n  LongPrototype.getNumBitsAbs = function getNumBitsAbs() {\n    if (this.isNegative())\n      // Unsigned Longs are never negative\n      return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\n    var val = this.high != 0 ? this.high : this.low;\n    for (var bit = 31; bit > 0; bit--) if ((val & 1 << bit) != 0) break;\n    return this.high != 0 ? bit + 33 : bit + 1;\n  };\n  /**\n   * Tests if this Long's value equals zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n  LongPrototype.isZero = function isZero() {\n    return this.high === 0 && this.low === 0;\n  };\n  /**\n   * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n   * @returns {boolean}\n   */\n\n  LongPrototype.eqz = LongPrototype.isZero;\n  /**\n   * Tests if this Long's value is negative.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n  LongPrototype.isNegative = function isNegative() {\n    return !this.unsigned && this.high < 0;\n  };\n  /**\n   * Tests if this Long's value is positive or zero.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n  LongPrototype.isPositive = function isPositive() {\n    return this.unsigned || this.high >= 0;\n  };\n  /**\n   * Tests if this Long's value is odd.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n  LongPrototype.isOdd = function isOdd() {\n    return (this.low & 1) === 1;\n  };\n  /**\n   * Tests if this Long's value is even.\n   * @this {!Long}\n   * @returns {boolean}\n   */\n\n  LongPrototype.isEven = function isEven() {\n    return (this.low & 1) === 0;\n  };\n  /**\n   * Tests if this Long's value equals the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.equals = function equals(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.unsigned !== other.unsigned && this.high >>> 31 === 1 && other.high >>> 31 === 1) return false;\n    return this.high === other.high && this.low === other.low;\n  };\n  /**\n   * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.eq = LongPrototype.equals;\n  /**\n   * Tests if this Long's value differs from the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.notEquals = function notEquals(other) {\n    return !this.eq( /* validates */\n    other);\n  };\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.neq = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.ne = LongPrototype.notEquals;\n  /**\n   * Tests if this Long's value is less than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.lessThan = function lessThan(other) {\n    return this.comp( /* validates */\n    other) < 0;\n  };\n  /**\n   * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.lt = LongPrototype.lessThan;\n  /**\n   * Tests if this Long's value is less than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\n    return this.comp( /* validates */\n    other) <= 0;\n  };\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.lte = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.le = LongPrototype.lessThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.greaterThan = function greaterThan(other) {\n    return this.comp( /* validates */\n    other) > 0;\n  };\n  /**\n   * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.gt = LongPrototype.greaterThan;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\n    return this.comp( /* validates */\n    other) >= 0;\n  };\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n  /**\n   * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {boolean}\n   */\n\n  LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n  /**\n   * Compares this Long's value with the specified's.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n\n  LongPrototype.compare = function compare(other) {\n    if (!isLong(other)) other = fromValue(other);\n    if (this.eq(other)) return 0;\n    var thisNeg = this.isNegative(),\n      otherNeg = other.isNegative();\n    if (thisNeg && !otherNeg) return -1;\n    if (!thisNeg && otherNeg) return 1; // At this point the sign bits are the same\n\n    if (!this.unsigned) return this.sub(other).isNegative() ? -1 : 1; // Both are positive if at least one is unsigned\n\n    return other.high >>> 0 > this.high >>> 0 || other.high === this.high && other.low >>> 0 > this.low >>> 0 ? -1 : 1;\n  };\n  /**\n   * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n   * @function\n   * @param {!Long|number|string} other Other value\n   * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n   *  if the given one is greater\n   */\n\n  LongPrototype.comp = LongPrototype.compare;\n  /**\n   * Negates this Long's value.\n   * @this {!Long}\n   * @returns {!Long} Negated Long\n   */\n\n  LongPrototype.negate = function negate() {\n    if (!this.unsigned && this.eq(MIN_VALUE)) return MIN_VALUE;\n    return this.not().add(ONE);\n  };\n  /**\n   * Negates this Long's value. This is an alias of {@link Long#negate}.\n   * @function\n   * @returns {!Long} Negated Long\n   */\n\n  LongPrototype.neg = LongPrototype.negate;\n  /**\n   * Returns the sum of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} addend Addend\n   * @returns {!Long} Sum\n   */\n\n  LongPrototype.add = function add(addend) {\n    if (!isLong(addend)) addend = fromValue(addend); // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the difference of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n\n  LongPrototype.subtract = function subtract(subtrahend) {\n    if (!isLong(subtrahend)) subtrahend = fromValue(subtrahend);\n    return this.add(subtrahend.neg());\n  };\n  /**\n   * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n   * @function\n   * @param {!Long|number|string} subtrahend Subtrahend\n   * @returns {!Long} Difference\n   */\n\n  LongPrototype.sub = LongPrototype.subtract;\n  /**\n   * Returns the product of this and the specified Long.\n   * @this {!Long}\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n\n  LongPrototype.multiply = function multiply(multiplier) {\n    if (this.isZero()) return this;\n    if (!isLong(multiplier)) multiplier = fromValue(multiplier); // use wasm support if present\n\n    if (wasm) {\n      var low = wasm[\"mul\"](this.low, this.high, multiplier.low, multiplier.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    if (multiplier.isZero()) return this.unsigned ? UZERO : ZERO;\n    if (this.eq(MIN_VALUE)) return multiplier.isOdd() ? MIN_VALUE : ZERO;\n    if (multiplier.eq(MIN_VALUE)) return this.isOdd() ? MIN_VALUE : ZERO;\n    if (this.isNegative()) {\n      if (multiplier.isNegative()) return this.neg().mul(multiplier.neg());else return this.neg().mul(multiplier).neg();\n    } else if (multiplier.isNegative()) return this.mul(multiplier.neg()).neg(); // If both longs are small, use float multiplication\n\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24)) return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned); // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n\n    var a48 = this.high >>> 16;\n    var a32 = this.high & 0xFFFF;\n    var a16 = this.low >>> 16;\n    var a00 = this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0,\n      c32 = 0,\n      c16 = 0,\n      c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits(c16 << 16 | c00, c48 << 16 | c32, this.unsigned);\n  };\n  /**\n   * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n   * @function\n   * @param {!Long|number|string} multiplier Multiplier\n   * @returns {!Long} Product\n   */\n\n  LongPrototype.mul = LongPrototype.multiply;\n  /**\n   * Returns this Long divided by the specified. The result is signed if this Long is signed or\n   *  unsigned if this Long is unsigned.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n\n  LongPrototype.divide = function divide(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor);\n    if (divisor.isZero()) throw Error('division by zero'); // use wasm support if present\n\n    if (wasm) {\n      // guard against signed division overflow: the largest\n      // negative number / -1 would be 1 larger than the largest\n      // positive number, due to two's complement.\n      if (!this.unsigned && this.high === -0x80000000 && divisor.low === -1 && divisor.high === -1) {\n        // be consistent with non-wasm code path\n        return this;\n      }\n      var low = (this.unsigned ? wasm[\"div_u\"] : wasm[\"div_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    if (this.isZero()) return this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!this.unsigned) {\n      // This section is only relevant for signed longs and is derived from the\n      // closure library as a whole.\n      if (this.eq(MIN_VALUE)) {\n        if (divisor.eq(ONE) || divisor.eq(NEG_ONE)) return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n        else if (divisor.eq(MIN_VALUE)) return ONE;else {\n          // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n          var halfThis = this.shr(1);\n          approx = halfThis.div(divisor).shl(1);\n          if (approx.eq(ZERO)) {\n            return divisor.isNegative() ? ONE : NEG_ONE;\n          } else {\n            rem = this.sub(divisor.mul(approx));\n            res = approx.add(rem.div(divisor));\n            return res;\n          }\n        }\n      } else if (divisor.eq(MIN_VALUE)) return this.unsigned ? UZERO : ZERO;\n      if (this.isNegative()) {\n        if (divisor.isNegative()) return this.neg().div(divisor.neg());\n        return this.neg().div(divisor).neg();\n      } else if (divisor.isNegative()) return this.div(divisor.neg()).neg();\n      res = ZERO;\n    } else {\n      // The algorithm below has not been made for unsigned longs. It's therefore\n      // required to take special care of the MSB prior to running it.\n      if (!divisor.unsigned) divisor = divisor.toUnsigned();\n      if (divisor.gt(this)) return UZERO;\n      if (divisor.gt(this.shru(1)))\n        // 15 >>> 1 = 7 ; with divisor = 8 ; true\n        return UONE;\n      res = UZERO;\n    } // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n\n    rem = this;\n    while (rem.gte(divisor)) {\n      // Approximate the result of division. This may be a little greater or\n      // smaller than the actual value.\n      approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber())); // We will tweak the approximate result by changing it in the 48-th digit or\n      // the smallest non-fractional digit, whichever is larger.\n\n      var log2 = Math.ceil(Math.log(approx) / Math.LN2),\n        delta = log2 <= 48 ? 1 : pow_dbl(2, log2 - 48),\n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx),\n        approxRem = approxRes.mul(divisor);\n      while (approxRem.isNegative() || approxRem.gt(rem)) {\n        approx -= delta;\n        approxRes = fromNumber(approx, this.unsigned);\n        approxRem = approxRes.mul(divisor);\n      } // We know the answer can't be zero... and actually, zero would cause\n      // infinite recursion since we would make no progress.\n\n      if (approxRes.isZero()) approxRes = ONE;\n      res = res.add(approxRes);\n      rem = rem.sub(approxRem);\n    }\n    return res;\n  };\n  /**\n   * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Quotient\n   */\n\n  LongPrototype.div = LongPrototype.divide;\n  /**\n   * Returns this Long modulo the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n\n  LongPrototype.modulo = function modulo(divisor) {\n    if (!isLong(divisor)) divisor = fromValue(divisor); // use wasm support if present\n\n    if (wasm) {\n      var low = (this.unsigned ? wasm[\"rem_u\"] : wasm[\"rem_s\"])(this.low, this.high, divisor.low, divisor.high);\n      return fromBits(low, wasm[\"get_high\"](), this.unsigned);\n    }\n    return this.sub(this.div(divisor).mul(divisor));\n  };\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n\n  LongPrototype.mod = LongPrototype.modulo;\n  /**\n   * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n   * @function\n   * @param {!Long|number|string} divisor Divisor\n   * @returns {!Long} Remainder\n   */\n\n  LongPrototype.rem = LongPrototype.modulo;\n  /**\n   * Returns the bitwise NOT of this Long.\n   * @this {!Long}\n   * @returns {!Long}\n   */\n\n  LongPrototype.not = function not() {\n    return fromBits(~this.low, ~this.high, this.unsigned);\n  };\n  /**\n   * Returns count leading zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n\n  LongPrototype.countLeadingZeros = function countLeadingZeros() {\n    return this.high ? Math.clz32(this.high) : Math.clz32(this.low) + 32;\n  };\n  /**\n   * Returns count leading zeros. This is an alias of {@link Long#countLeadingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n\n  LongPrototype.clz = LongPrototype.countLeadingZeros;\n  /**\n   * Returns count trailing zeros of this Long.\n   * @this {!Long}\n   * @returns {!number}\n   */\n\n  LongPrototype.countTrailingZeros = function countTrailingZeros() {\n    return this.low ? ctz32(this.low) : ctz32(this.high) + 32;\n  };\n  /**\n   * Returns count trailing zeros. This is an alias of {@link Long#countTrailingZeros}.\n   * @function\n   * @param {!Long}\n   * @returns {!number}\n   */\n\n  LongPrototype.ctz = LongPrototype.countTrailingZeros;\n  /**\n   * Returns the bitwise AND of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n  LongPrototype.and = function and(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise OR of this Long and the specified.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n  LongPrototype.or = function or(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\n  };\n  /**\n   * Returns the bitwise XOR of this Long and the given one.\n   * @this {!Long}\n   * @param {!Long|number|string} other Other Long\n   * @returns {!Long}\n   */\n\n  LongPrototype.xor = function xor(other) {\n    if (!isLong(other)) other = fromValue(other);\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shiftLeft = function shiftLeft(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low << numBits, this.high << numBits | this.low >>> 32 - numBits, this.unsigned);else return fromBits(0, this.low << numBits - 32, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shl = LongPrototype.shiftLeft;\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shiftRight = function shiftRight(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;else if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >> numBits, this.unsigned);else return fromBits(this.high >> numBits - 32, this.high >= 0 ? 0 : -1, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shr = LongPrototype.shiftRight;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits < 32) return fromBits(this.low >>> numBits | this.high << 32 - numBits, this.high >>> numBits, this.unsigned);\n    if (numBits === 32) return fromBits(this.high, 0, this.unsigned);\n    return fromBits(this.high >>> numBits - 32, 0, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Shifted Long\n   */\n\n  LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n  /**\n   * Returns this Long with bits rotated to the left by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n  LongPrototype.rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.low << numBits | this.high >>> b, this.high << numBits | this.low >>> b, this.unsigned);\n    }\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.high << numBits | this.low >>> b, this.low << numBits | this.high >>> b, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n  LongPrototype.rotl = LongPrototype.rotateLeft;\n  /**\n   * Returns this Long with bits rotated to the right by the given amount.\n   * @this {!Long}\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n  LongPrototype.rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits)) numBits = numBits.toInt();\n    if ((numBits &= 63) === 0) return this;\n    if (numBits === 32) return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n      b = 32 - numBits;\n      return fromBits(this.high << b | this.low >>> numBits, this.low << b | this.high >>> numBits, this.unsigned);\n    }\n    numBits -= 32;\n    b = 32 - numBits;\n    return fromBits(this.low << b | this.high >>> numBits, this.high << b | this.low >>> numBits, this.unsigned);\n  };\n  /**\n   * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n   * @function\n   * @param {number|!Long} numBits Number of bits\n   * @returns {!Long} Rotated Long\n   */\n\n  LongPrototype.rotr = LongPrototype.rotateRight;\n  /**\n   * Converts this Long to signed.\n   * @this {!Long}\n   * @returns {!Long} Signed long\n   */\n\n  LongPrototype.toSigned = function toSigned() {\n    if (!this.unsigned) return this;\n    return fromBits(this.low, this.high, false);\n  };\n  /**\n   * Converts this Long to unsigned.\n   * @this {!Long}\n   * @returns {!Long} Unsigned long\n   */\n\n  LongPrototype.toUnsigned = function toUnsigned() {\n    if (this.unsigned) return this;\n    return fromBits(this.low, this.high, true);\n  };\n  /**\n   * Converts this Long to its byte representation.\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @this {!Long}\n   * @returns {!Array.<number>} Byte representation\n   */\n\n  LongPrototype.toBytes = function toBytes(le) {\n    return le ? this.toBytesLE() : this.toBytesBE();\n  };\n  /**\n   * Converts this Long to its little endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Little endian byte representation\n   */\n\n  LongPrototype.toBytesLE = function toBytesLE() {\n    var hi = this.high,\n      lo = this.low;\n    return [lo & 0xff, lo >>> 8 & 0xff, lo >>> 16 & 0xff, lo >>> 24, hi & 0xff, hi >>> 8 & 0xff, hi >>> 16 & 0xff, hi >>> 24];\n  };\n  /**\n   * Converts this Long to its big endian byte representation.\n   * @this {!Long}\n   * @returns {!Array.<number>} Big endian byte representation\n   */\n\n  LongPrototype.toBytesBE = function toBytesBE() {\n    var hi = this.high,\n      lo = this.low;\n    return [hi >>> 24, hi >>> 16 & 0xff, hi >>> 8 & 0xff, hi & 0xff, lo >>> 24, lo >>> 16 & 0xff, lo >>> 8 & 0xff, lo & 0xff];\n  };\n  /**\n   * Creates a Long from its byte representation.\n   * @param {!Array.<number>} bytes Byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @param {boolean=} le Whether little or big endian, defaults to big endian\n   * @returns {Long} The corresponding Long value\n   */\n\n  Long.fromBytes = function fromBytes(bytes, unsigned, le) {\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\n  };\n  /**\n   * Creates a Long from its little endian byte representation.\n   * @param {!Array.<number>} bytes Little endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n\n  Long.fromBytesLE = function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] | bytes[1] << 8 | bytes[2] << 16 | bytes[3] << 24, bytes[4] | bytes[5] << 8 | bytes[6] << 16 | bytes[7] << 24, unsigned);\n  };\n  /**\n   * Creates a Long from its big endian byte representation.\n   * @param {!Array.<number>} bytes Big endian byte representation\n   * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n   * @returns {Long} The corresponding Long value\n   */\n\n  Long.fromBytesBE = function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 | bytes[5] << 16 | bytes[6] << 8 | bytes[7], bytes[0] << 24 | bytes[1] << 16 | bytes[2] << 8 | bytes[3], unsigned);\n  };\n  var _default = Long;\n  exports.default = _default;\n  return \"default\" in exports ? exports.default : exports;\n}({});\nif (typeof define === 'function' && define.amd) define([], function () {\n  return Long;\n});else if (typeof module === 'object' && typeof exports === 'object') module.exports = Long;", "\"use strict\";\n\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.IdempotencyLevel = exports.isAnyExtension = exports.Long = void 0;\nconst camelCase = require(\"lodash.camelcase\");\nconst Protobuf = require(\"protobufjs\");\nconst descriptor = require(\"protobufjs/ext/descriptor\");\nconst util_1 = require(\"./util\");\nconst Long = require(\"long\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n  return '@type' in obj && typeof obj['@type'] === 'string';\n}\nexports.isAnyExtension = isAnyExtension;\nvar IdempotencyLevel;\n(function (IdempotencyLevel) {\n  IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = \"IDEMPOTENCY_UNKNOWN\";\n  IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = \"NO_SIDE_EFFECTS\";\n  IdempotencyLevel[\"IDEMPOTENT\"] = \"IDEMPOTENT\";\n})(IdempotencyLevel = exports.IdempotencyLevel || (exports.IdempotencyLevel = {}));\nconst descriptorOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  defaults: true,\n  oneofs: true,\n  json: true\n};\nfunction joinName(baseName, name) {\n  if (baseName === '') {\n    return name;\n  } else {\n    return baseName + '.' + name;\n  }\n}\nfunction isHandledReflectionObject(obj) {\n  return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;\n}\nfunction isNamespaceBase(obj) {\n  return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n  const objName = joinName(parentName, obj.name);\n  if (isHandledReflectionObject(obj)) {\n    return [[objName, obj]];\n  } else {\n    if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {\n      return Object.keys(obj.nested).map(name => {\n        return getAllHandledReflectionObjects(obj.nested[name], objName);\n      }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\n    }\n  }\n  return [];\n}\nfunction createDeserializer(cls, options) {\n  return function deserialize(argBuf) {\n    return cls.toObject(cls.decode(argBuf), options);\n  };\n}\nfunction createSerializer(cls) {\n  return function serialize(arg) {\n    if (Array.isArray(arg)) {\n      throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n    }\n    const message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n}\nfunction mapMethodOptions(options) {\n  return (options || []).reduce((obj, item) => {\n    for (const [key, value] of Object.entries(item)) {\n      switch (key) {\n        case 'uninterpreted_option':\n          obj.uninterpreted_option.push(item.uninterpreted_option);\n          break;\n        default:\n          obj[key] = value;\n      }\n    }\n    return obj;\n  }, {\n    deprecated: false,\n    idempotency_level: IdempotencyLevel.IDEMPOTENCY_UNKNOWN,\n    uninterpreted_option: []\n  });\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n  /* This is only ever called after the corresponding root.resolveAll(), so we\n   * can assume that the resolved request and response types are non-null */\n  const requestType = method.resolvedRequestType;\n  const responseType = method.resolvedResponseType;\n  return {\n    path: '/' + serviceName + '/' + method.name,\n    requestStream: !!method.requestStream,\n    responseStream: !!method.responseStream,\n    requestSerialize: createSerializer(requestType),\n    requestDeserialize: createDeserializer(requestType, options),\n    responseSerialize: createSerializer(responseType),\n    responseDeserialize: createDeserializer(responseType, options),\n    // TODO(murgatroid99): Find a better way to handle this\n    originalName: camelCase(method.name),\n    requestType: createMessageDefinition(requestType, fileDescriptors),\n    responseType: createMessageDefinition(responseType, fileDescriptors),\n    options: mapMethodOptions(method.parsedOptions)\n  };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n  const def = {};\n  for (const method of service.methodsArray) {\n    def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n  }\n  return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n  const messageDescriptor = message.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 DescriptorProto',\n    type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n  const enumDescriptor = enumType.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 EnumDescriptorProto',\n    type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */\nfunction createDefinition(obj, name, options, fileDescriptors) {\n  if (obj instanceof Protobuf.Service) {\n    return createServiceDefinition(obj, name, options, fileDescriptors);\n  } else if (obj instanceof Protobuf.Type) {\n    return createMessageDefinition(obj, fileDescriptors);\n  } else if (obj instanceof Protobuf.Enum) {\n    return createEnumDefinition(obj, fileDescriptors);\n  } else {\n    throw new Error('Type mismatch in reflection object handling');\n  }\n}\nfunction createPackageDefinition(root, options) {\n  const def = {};\n  root.resolveAll();\n  const descriptorList = root.toDescriptor('proto3').file;\n  const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n  for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {\n    def[name] = createDefinition(obj, name, options, bufferList);\n  }\n  return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n  options = options || {};\n  const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n  root.resolveAll();\n  return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\nfunction load(filename, options) {\n  return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {\n    return createPackageDefinition(loadedRoot, options);\n  });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n  const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n  options = options || {};\n  const loadedRoot = Protobuf.Root.fromJSON(json);\n  loadedRoot.resolveAll();\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\n(0, util_1.addCommonProtos)();\n", "\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.getChannelzServiceDefinition = exports.getChannelzHandlers = exports.unregisterChannelzRef = exports.registerChannelzSocket = exports.registerChannelzServer = exports.registerChannelzSubchannel = exports.registerChannelzChannel = exports.ChannelzCallTracker = exports.ChannelzChildrenTracker = exports.ChannelzTrace = void 0;\nconst net_1 = require(\"net\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst admin_1 = require(\"./admin\");\nconst make_client_1 = require(\"./make-client\");\nfunction channelRefToMessage(ref) {\n  return {\n    channel_id: ref.id,\n    name: ref.name\n  };\n}\nfunction subchannelRefToMessage(ref) {\n  return {\n    subchannel_id: ref.id,\n    name: ref.name\n  };\n}\nfunction serverRefToMessage(ref) {\n  return {\n    server_id: ref.id\n  };\n}\nfunction socketRefToMessage(ref) {\n  return {\n    socket_id: ref.id,\n    name: ref.name\n  };\n}\n/**\n * The loose upper bound on the number of events that should be retained in a\n * trace. This may be exceeded by up to a factor of 2. Arbitrarily chosen as a\n * number that should be large enough to contain the recent relevant\n * information, but small enough to not use excessive memory.\n */\nconst TARGET_RETAINED_TRACES = 32;\nclass ChannelzTrace {\n  constructor() {\n    this.events = [];\n    this.eventsLogged = 0;\n    this.creationTimestamp = new Date();\n  }\n  addTrace(severity, description, child) {\n    const timestamp = new Date();\n    this.events.push({\n      description: description,\n      severity: severity,\n      timestamp: timestamp,\n      childChannel: (child === null || child === void 0 ? void 0 : child.kind) === 'channel' ? child : undefined,\n      childSubchannel: (child === null || child === void 0 ? void 0 : child.kind) === 'subchannel' ? child : undefined\n    });\n    // Whenever the trace array gets too large, discard the first half\n    if (this.events.length >= TARGET_RETAINED_TRACES * 2) {\n      this.events = this.events.slice(TARGET_RETAINED_TRACES);\n    }\n    this.eventsLogged += 1;\n  }\n  getTraceMessage() {\n    return {\n      creation_timestamp: dateToProtoTimestamp(this.creationTimestamp),\n      num_events_logged: this.eventsLogged,\n      events: this.events.map(event => {\n        return {\n          description: event.description,\n          severity: event.severity,\n          timestamp: dateToProtoTimestamp(event.timestamp),\n          channel_ref: event.childChannel ? channelRefToMessage(event.childChannel) : null,\n          subchannel_ref: event.childSubchannel ? subchannelRefToMessage(event.childSubchannel) : null\n        };\n      })\n    };\n  }\n}\nexports.ChannelzTrace = ChannelzTrace;\nclass ChannelzChildrenTracker {\n  constructor() {\n    this.channelChildren = new Map();\n    this.subchannelChildren = new Map();\n    this.socketChildren = new Map();\n  }\n  refChild(child) {\n    var _a, _b, _c;\n    switch (child.kind) {\n      case 'channel':\n        {\n          const trackedChild = (_a = this.channelChildren.get(child.id)) !== null && _a !== void 0 ? _a : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.channelChildren.set(child.id, trackedChild);\n          break;\n        }\n      case 'subchannel':\n        {\n          const trackedChild = (_b = this.subchannelChildren.get(child.id)) !== null && _b !== void 0 ? _b : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.subchannelChildren.set(child.id, trackedChild);\n          break;\n        }\n      case 'socket':\n        {\n          const trackedChild = (_c = this.socketChildren.get(child.id)) !== null && _c !== void 0 ? _c : {\n            ref: child,\n            count: 0\n          };\n          trackedChild.count += 1;\n          this.socketChildren.set(child.id, trackedChild);\n          break;\n        }\n    }\n  }\n  unrefChild(child) {\n    switch (child.kind) {\n      case 'channel':\n        {\n          const trackedChild = this.channelChildren.get(child.id);\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n              this.channelChildren.delete(child.id);\n            } else {\n              this.channelChildren.set(child.id, trackedChild);\n            }\n          }\n          break;\n        }\n      case 'subchannel':\n        {\n          const trackedChild = this.subchannelChildren.get(child.id);\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n              this.subchannelChildren.delete(child.id);\n            } else {\n              this.subchannelChildren.set(child.id, trackedChild);\n            }\n          }\n          break;\n        }\n      case 'socket':\n        {\n          const trackedChild = this.socketChildren.get(child.id);\n          if (trackedChild !== undefined) {\n            trackedChild.count -= 1;\n            if (trackedChild.count === 0) {\n              this.socketChildren.delete(child.id);\n            } else {\n              this.socketChildren.set(child.id, trackedChild);\n            }\n          }\n          break;\n        }\n    }\n  }\n  getChildLists() {\n    const channels = [];\n    for (const {\n      ref\n    } of this.channelChildren.values()) {\n      channels.push(ref);\n    }\n    const subchannels = [];\n    for (const {\n      ref\n    } of this.subchannelChildren.values()) {\n      subchannels.push(ref);\n    }\n    const sockets = [];\n    for (const {\n      ref\n    } of this.socketChildren.values()) {\n      sockets.push(ref);\n    }\n    return {\n      channels,\n      subchannels,\n      sockets\n    };\n  }\n}\nexports.ChannelzChildrenTracker = ChannelzChildrenTracker;\nclass ChannelzCallTracker {\n  constructor() {\n    this.callsStarted = 0;\n    this.callsSucceeded = 0;\n    this.callsFailed = 0;\n    this.lastCallStartedTimestamp = null;\n  }\n  addCallStarted() {\n    this.callsStarted += 1;\n    this.lastCallStartedTimestamp = new Date();\n  }\n  addCallSucceeded() {\n    this.callsSucceeded += 1;\n  }\n  addCallFailed() {\n    this.callsFailed += 1;\n  }\n}\nexports.ChannelzCallTracker = ChannelzCallTracker;\nlet nextId = 1;\nfunction getNextId() {\n  return nextId++;\n}\nconst channels = [];\nconst subchannels = [];\nconst servers = [];\nconst sockets = [];\nfunction registerChannelzChannel(name, getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'channel'\n  };\n  if (channelzEnabled) {\n    channels[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzChannel = registerChannelzChannel;\nfunction registerChannelzSubchannel(name, getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'subchannel'\n  };\n  if (channelzEnabled) {\n    subchannels[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzSubchannel = registerChannelzSubchannel;\nfunction registerChannelzServer(getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    kind: 'server'\n  };\n  if (channelzEnabled) {\n    servers[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzServer = registerChannelzServer;\nfunction registerChannelzSocket(name, getInfo, channelzEnabled) {\n  const id = getNextId();\n  const ref = {\n    id,\n    name,\n    kind: 'socket'\n  };\n  if (channelzEnabled) {\n    sockets[id] = {\n      ref,\n      getInfo\n    };\n  }\n  return ref;\n}\nexports.registerChannelzSocket = registerChannelzSocket;\nfunction unregisterChannelzRef(ref) {\n  switch (ref.kind) {\n    case 'channel':\n      delete channels[ref.id];\n      return;\n    case 'subchannel':\n      delete subchannels[ref.id];\n      return;\n    case 'server':\n      delete servers[ref.id];\n      return;\n    case 'socket':\n      delete sockets[ref.id];\n      return;\n  }\n}\nexports.unregisterChannelzRef = unregisterChannelzRef;\n/**\n * Parse a single section of an IPv6 address as two bytes\n * @param addressSection A hexadecimal string of length up to 4\n * @returns The pair of bytes representing this address section\n */\nfunction parseIPv6Section(addressSection) {\n  const numberValue = Number.parseInt(addressSection, 16);\n  return [numberValue / 256 | 0, numberValue % 256];\n}\n/**\n * Parse a chunk of an IPv6 address string to some number of bytes\n * @param addressChunk Some number of segments of up to 4 hexadecimal\n *   characters each, joined by colons.\n * @returns The list of bytes representing this address chunk\n */\nfunction parseIPv6Chunk(addressChunk) {\n  if (addressChunk === '') {\n    return [];\n  }\n  const bytePairs = addressChunk.split(':').map(section => parseIPv6Section(section));\n  const result = [];\n  return result.concat(...bytePairs);\n}\n/**\n * Converts an IPv4 or IPv6 address from string representation to binary\n * representation\n * @param ipAddress an IP address in standard IPv4 or IPv6 text format\n * @returns\n */\nfunction ipAddressStringToBuffer(ipAddress) {\n  if ((0, net_1.isIPv4)(ipAddress)) {\n    return Buffer.from(Uint8Array.from(ipAddress.split('.').map(segment => Number.parseInt(segment))));\n  } else if ((0, net_1.isIPv6)(ipAddress)) {\n    let leftSection;\n    let rightSection;\n    const doubleColonIndex = ipAddress.indexOf('::');\n    if (doubleColonIndex === -1) {\n      leftSection = ipAddress;\n      rightSection = '';\n    } else {\n      leftSection = ipAddress.substring(0, doubleColonIndex);\n      rightSection = ipAddress.substring(doubleColonIndex + 2);\n    }\n    const leftBuffer = Buffer.from(parseIPv6Chunk(leftSection));\n    const rightBuffer = Buffer.from(parseIPv6Chunk(rightSection));\n    const middleBuffer = Buffer.alloc(16 - leftBuffer.length - rightBuffer.length, 0);\n    return Buffer.concat([leftBuffer, middleBuffer, rightBuffer]);\n  } else {\n    return null;\n  }\n}\nfunction connectivityStateToMessage(state) {\n  switch (state) {\n    case connectivity_state_1.ConnectivityState.CONNECTING:\n      return {\n        state: 'CONNECTING'\n      };\n    case connectivity_state_1.ConnectivityState.IDLE:\n      return {\n        state: 'IDLE'\n      };\n    case connectivity_state_1.ConnectivityState.READY:\n      return {\n        state: 'READY'\n      };\n    case connectivity_state_1.ConnectivityState.SHUTDOWN:\n      return {\n        state: 'SHUTDOWN'\n      };\n    case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n      return {\n        state: 'TRANSIENT_FAILURE'\n      };\n    default:\n      return {\n        state: 'UNKNOWN'\n      };\n  }\n}\nfunction dateToProtoTimestamp(date) {\n  if (!date) {\n    return null;\n  }\n  const millisSinceEpoch = date.getTime();\n  return {\n    seconds: millisSinceEpoch / 1000 | 0,\n    nanos: millisSinceEpoch % 1000 * 1000000\n  };\n}\nfunction getChannelMessage(channelEntry) {\n  const resolvedInfo = channelEntry.getInfo();\n  return {\n    ref: channelRefToMessage(channelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    channel_ref: resolvedInfo.children.channels.map(ref => channelRefToMessage(ref)),\n    subchannel_ref: resolvedInfo.children.subchannels.map(ref => subchannelRefToMessage(ref))\n  };\n}\nfunction GetChannel(call, callback) {\n  const channelId = Number.parseInt(call.request.channel_id);\n  const channelEntry = channels[channelId];\n  if (channelEntry === undefined) {\n    callback({\n      code: constants_1.Status.NOT_FOUND,\n      details: 'No channel data found for id ' + channelId\n    });\n    return;\n  }\n  callback(null, {\n    channel: getChannelMessage(channelEntry)\n  });\n}\nfunction GetTopChannels(call, callback) {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList = [];\n  let i = Number.parseInt(call.request.start_channel_id);\n  for (; i < channels.length; i++) {\n    const channelEntry = channels[i];\n    if (channelEntry === undefined) {\n      continue;\n    }\n    resultList.push(getChannelMessage(channelEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    channel: resultList,\n    end: i >= servers.length\n  });\n}\nfunction getServerMessage(serverEntry) {\n  const resolvedInfo = serverEntry.getInfo();\n  return {\n    ref: serverRefToMessage(serverEntry.ref),\n    data: {\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    listen_socket: resolvedInfo.listenerChildren.sockets.map(ref => socketRefToMessage(ref))\n  };\n}\nfunction GetServer(call, callback) {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      code: constants_1.Status.NOT_FOUND,\n      details: 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  callback(null, {\n    server: getServerMessage(serverEntry)\n  });\n}\nfunction GetServers(call, callback) {\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resultList = [];\n  let i = Number.parseInt(call.request.start_server_id);\n  for (; i < servers.length; i++) {\n    const serverEntry = servers[i];\n    if (serverEntry === undefined) {\n      continue;\n    }\n    resultList.push(getServerMessage(serverEntry));\n    if (resultList.length >= maxResults) {\n      break;\n    }\n  }\n  callback(null, {\n    server: resultList,\n    end: i >= servers.length\n  });\n}\nfunction GetSubchannel(call, callback) {\n  const subchannelId = Number.parseInt(call.request.subchannel_id);\n  const subchannelEntry = subchannels[subchannelId];\n  if (subchannelEntry === undefined) {\n    callback({\n      code: constants_1.Status.NOT_FOUND,\n      details: 'No subchannel data found for id ' + subchannelId\n    });\n    return;\n  }\n  const resolvedInfo = subchannelEntry.getInfo();\n  const subchannelMessage = {\n    ref: subchannelRefToMessage(subchannelEntry.ref),\n    data: {\n      target: resolvedInfo.target,\n      state: connectivityStateToMessage(resolvedInfo.state),\n      calls_started: resolvedInfo.callTracker.callsStarted,\n      calls_succeeded: resolvedInfo.callTracker.callsSucceeded,\n      calls_failed: resolvedInfo.callTracker.callsFailed,\n      last_call_started_timestamp: dateToProtoTimestamp(resolvedInfo.callTracker.lastCallStartedTimestamp),\n      trace: resolvedInfo.trace.getTraceMessage()\n    },\n    socket_ref: resolvedInfo.children.sockets.map(ref => socketRefToMessage(ref))\n  };\n  callback(null, {\n    subchannel: subchannelMessage\n  });\n}\nfunction subchannelAddressToAddressMessage(subchannelAddress) {\n  var _a;\n  if ((0, subchannel_address_1.isTcpSubchannelAddress)(subchannelAddress)) {\n    return {\n      address: 'tcpip_address',\n      tcpip_address: {\n        ip_address: (_a = ipAddressStringToBuffer(subchannelAddress.host)) !== null && _a !== void 0 ? _a : undefined,\n        port: subchannelAddress.port\n      }\n    };\n  } else {\n    return {\n      address: 'uds_address',\n      uds_address: {\n        filename: subchannelAddress.path\n      }\n    };\n  }\n}\nfunction GetSocket(call, callback) {\n  var _a, _b, _c, _d, _e;\n  const socketId = Number.parseInt(call.request.socket_id);\n  const socketEntry = sockets[socketId];\n  if (socketEntry === undefined) {\n    callback({\n      code: constants_1.Status.NOT_FOUND,\n      details: 'No socket data found for id ' + socketId\n    });\n    return;\n  }\n  const resolvedInfo = socketEntry.getInfo();\n  const securityMessage = resolvedInfo.security ? {\n    model: 'tls',\n    tls: {\n      cipher_suite: resolvedInfo.security.cipherSuiteStandardName ? 'standard_name' : 'other_name',\n      standard_name: (_a = resolvedInfo.security.cipherSuiteStandardName) !== null && _a !== void 0 ? _a : undefined,\n      other_name: (_b = resolvedInfo.security.cipherSuiteOtherName) !== null && _b !== void 0 ? _b : undefined,\n      local_certificate: (_c = resolvedInfo.security.localCertificate) !== null && _c !== void 0 ? _c : undefined,\n      remote_certificate: (_d = resolvedInfo.security.remoteCertificate) !== null && _d !== void 0 ? _d : undefined\n    }\n  } : null;\n  const socketMessage = {\n    ref: socketRefToMessage(socketEntry.ref),\n    local: resolvedInfo.localAddress ? subchannelAddressToAddressMessage(resolvedInfo.localAddress) : null,\n    remote: resolvedInfo.remoteAddress ? subchannelAddressToAddressMessage(resolvedInfo.remoteAddress) : null,\n    remote_name: (_e = resolvedInfo.remoteName) !== null && _e !== void 0 ? _e : undefined,\n    security: securityMessage,\n    data: {\n      keep_alives_sent: resolvedInfo.keepAlivesSent,\n      streams_started: resolvedInfo.streamsStarted,\n      streams_succeeded: resolvedInfo.streamsSucceeded,\n      streams_failed: resolvedInfo.streamsFailed,\n      last_local_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastLocalStreamCreatedTimestamp),\n      last_remote_stream_created_timestamp: dateToProtoTimestamp(resolvedInfo.lastRemoteStreamCreatedTimestamp),\n      messages_received: resolvedInfo.messagesReceived,\n      messages_sent: resolvedInfo.messagesSent,\n      last_message_received_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageReceivedTimestamp),\n      last_message_sent_timestamp: dateToProtoTimestamp(resolvedInfo.lastMessageSentTimestamp),\n      local_flow_control_window: resolvedInfo.localFlowControlWindow ? {\n        value: resolvedInfo.localFlowControlWindow\n      } : null,\n      remote_flow_control_window: resolvedInfo.remoteFlowControlWindow ? {\n        value: resolvedInfo.remoteFlowControlWindow\n      } : null\n    }\n  };\n  callback(null, {\n    socket: socketMessage\n  });\n}\nfunction GetServerSockets(call, callback) {\n  const serverId = Number.parseInt(call.request.server_id);\n  const serverEntry = servers[serverId];\n  if (serverEntry === undefined) {\n    callback({\n      code: constants_1.Status.NOT_FOUND,\n      details: 'No server data found for id ' + serverId\n    });\n    return;\n  }\n  const startId = Number.parseInt(call.request.start_socket_id);\n  const maxResults = Number.parseInt(call.request.max_results);\n  const resolvedInfo = serverEntry.getInfo();\n  // If we wanted to include listener sockets in the result, this line would\n  // instead say\n  // const allSockets = resolvedInfo.listenerChildren.sockets.concat(resolvedInfo.sessionChildren.sockets).sort((ref1, ref2) => ref1.id - ref2.id);\n  const allSockets = resolvedInfo.sessionChildren.sockets.sort((ref1, ref2) => ref1.id - ref2.id);\n  const resultList = [];\n  let i = 0;\n  for (; i < allSockets.length; i++) {\n    if (allSockets[i].id >= startId) {\n      resultList.push(socketRefToMessage(allSockets[i]));\n      if (resultList.length >= maxResults) {\n        break;\n      }\n    }\n  }\n  callback(null, {\n    socket_ref: resultList,\n    end: i >= allSockets.length\n  });\n}\nfunction getChannelzHandlers() {\n  return {\n    GetChannel,\n    GetTopChannels,\n    GetServer,\n    GetServers,\n    GetSubchannel,\n    GetSocket,\n    GetServerSockets\n  };\n}\nexports.getChannelzHandlers = getChannelzHandlers;\nlet loadedChannelzDefinition = null;\nfunction getChannelzServiceDefinition() {\n  if (loadedChannelzDefinition) {\n    return loadedChannelzDefinition;\n  }\n  /* The purpose of this complexity is to avoid loading @grpc/proto-loader at\n   * runtime for users who will not use/enable channelz. */\n  const loaderLoadSync = require('@grpc/proto-loader').loadSync;\n  const loadedProto = loaderLoadSync('channelz.proto', {\n    keepCase: true,\n    longs: String,\n    enums: String,\n    defaults: true,\n    oneofs: true,\n    includeDirs: [`${__dirname}/../../proto`]\n  });\n  const channelzGrpcObject = (0, make_client_1.loadPackageDefinition)(loadedProto);\n  loadedChannelzDefinition = channelzGrpcObject.grpc.channelz.v1.Channelz.service;\n  return loadedChannelzDefinition;\n}\nexports.getChannelzServiceDefinition = getChannelzServiceDefinition;\nfunction setup() {\n  (0, admin_1.registerAdminService)(getChannelzServiceDefinition, getChannelzHandlers);\n}\nexports.setup = setup;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Subchannel = void 0;\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst backoff_timeout_1 = require(\"./backoff-timeout\");\nconst logging = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst channelz_1 = require(\"./channelz\");\nconst TRACER_NAME = 'subchannel';\n/* setInterval and setTimeout only accept signed 32 bit integers. JS doesn't\n * have a constant for the max signed 32 bit integer, so this is a simple way\n * to calculate it */\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nclass Subchannel {\n  /**\n   * A class representing a connection to a single backend.\n   * @param channelTarget The target string for the channel as a whole\n   * @param subchannelAddress The address for the backend that this subchannel\n   *     will connect to\n   * @param options The channel options, plus any specific subchannel options\n   *     for this subchannel\n   * @param credentials The channel credentials used to establish this\n   *     connection\n   */\n  constructor(channelTarget, subchannelAddress, options, credentials, connector) {\n    var _a;\n    this.channelTarget = channelTarget;\n    this.subchannelAddress = subchannelAddress;\n    this.options = options;\n    this.credentials = credentials;\n    this.connector = connector;\n    /**\n     * The subchannel's current connectivity state. Invariant: `session` === `null`\n     * if and only if `connectivityState` is IDLE or TRANSIENT_FAILURE.\n     */\n    this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n    /**\n     * The underlying http2 session used to make requests.\n     */\n    this.transport = null;\n    /**\n     * Indicates that the subchannel should transition from TRANSIENT_FAILURE to\n     * CONNECTING instead of IDLE when the backoff timeout ends.\n     */\n    this.continueConnecting = false;\n    /**\n     * A list of listener functions that will be called whenever the connectivity\n     * state changes. Will be modified by `addConnectivityStateListener` and\n     * `removeConnectivityStateListener`\n     */\n    this.stateListeners = new Set();\n    /**\n     * Tracks channels and subchannel pools with references to this subchannel\n     */\n    this.refcount = 0;\n    // Channelz info\n    this.channelzEnabled = true;\n    this.callTracker = new channelz_1.ChannelzCallTracker();\n    this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n    // Channelz socket info\n    this.streamTracker = new channelz_1.ChannelzCallTracker();\n    const backoffOptions = {\n      initialDelay: options['grpc.initial_reconnect_backoff_ms'],\n      maxDelay: options['grpc.max_reconnect_backoff_ms']\n    };\n    this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {\n      this.handleBackoffTimer();\n    }, backoffOptions);\n    this.backoffTimeout.unref();\n    this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\n    this.keepaliveTime = (_a = options['grpc.keepalive_time_ms']) !== null && _a !== void 0 ? _a : -1;\n    if (options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzTrace = new channelz_1.ChannelzTrace();\n    this.channelzRef = (0, channelz_1.registerChannelzSubchannel)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Subchannel created');\n    }\n    this.trace('Subchannel constructed with options ' + JSON.stringify(options, undefined, 2));\n  }\n  getChannelzInfo() {\n    return {\n      state: this.connectivityState,\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      children: this.childrenTracker.getChildLists(),\n      target: this.subchannelAddressString\n    };\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n  }\n  refTrace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, 'subchannel_refcount', '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n  }\n  handleBackoffTimer() {\n    if (this.continueConnecting) {\n      this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\n    } else {\n      this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.IDLE);\n    }\n  }\n  /**\n   * Start a backoff timer with the current nextBackoff timeout\n   */\n  startBackoff() {\n    this.backoffTimeout.runOnce();\n  }\n  stopBackoff() {\n    this.backoffTimeout.stop();\n    this.backoffTimeout.reset();\n  }\n  startConnectingInternal() {\n    let options = this.options;\n    if (options['grpc.keepalive_time_ms']) {\n      const adjustedKeepaliveTime = Math.min(this.keepaliveTime, KEEPALIVE_MAX_TIME_MS);\n      options = Object.assign(Object.assign({}, options), {\n        'grpc.keepalive_time_ms': adjustedKeepaliveTime\n      });\n    }\n    this.connector.connect(this.subchannelAddress, this.credentials, options).then(transport => {\n      if (this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.READY)) {\n        this.transport = transport;\n        if (this.channelzEnabled) {\n          this.childrenTracker.refChild(transport.getChannelzRef());\n        }\n        transport.addDisconnectListener(tooManyPings => {\n          this.transitionToState([connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\n          if (tooManyPings && this.keepaliveTime > 0) {\n            this.keepaliveTime *= 2;\n            logging.log(constants_1.LogVerbosity.ERROR, `Connection to ${(0, uri_parser_1.uriToString)(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTime} ms`);\n          }\n        });\n      } else {\n        /* If we can't transition from CONNECTING to READY here, we will\n         * not be using this transport, so release its resources. */\n        transport.shutdown();\n      }\n    }, error => {\n      this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING], connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, `${error}`);\n    });\n  }\n  /**\n   * Initiate a state transition from any element of oldStates to the new\n   * state. If the current connectivityState is not in oldStates, do nothing.\n   * @param oldStates The set of states to transition from\n   * @param newState The state to transition to\n   * @returns True if the state changed, false otherwise\n   */\n  transitionToState(oldStates, newState, errorMessage) {\n    var _a, _b;\n    if (oldStates.indexOf(this.connectivityState) === -1) {\n      return false;\n    }\n    this.trace(connectivity_state_1.ConnectivityState[this.connectivityState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\n    }\n    const previousState = this.connectivityState;\n    this.connectivityState = newState;\n    switch (newState) {\n      case connectivity_state_1.ConnectivityState.READY:\n        this.stopBackoff();\n        break;\n      case connectivity_state_1.ConnectivityState.CONNECTING:\n        this.startBackoff();\n        this.startConnectingInternal();\n        this.continueConnecting = false;\n        break;\n      case connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE:\n        if (this.channelzEnabled && this.transport) {\n          this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n        }\n        (_a = this.transport) === null || _a === void 0 ? void 0 : _a.shutdown();\n        this.transport = null;\n        /* If the backoff timer has already ended by the time we get to the\n         * TRANSIENT_FAILURE state, we want to immediately transition out of\n         * TRANSIENT_FAILURE as though the backoff timer is ending right now */\n        if (!this.backoffTimeout.isRunning()) {\n          process.nextTick(() => {\n            this.handleBackoffTimer();\n          });\n        }\n        break;\n      case connectivity_state_1.ConnectivityState.IDLE:\n        if (this.channelzEnabled && this.transport) {\n          this.childrenTracker.unrefChild(this.transport.getChannelzRef());\n        }\n        (_b = this.transport) === null || _b === void 0 ? void 0 : _b.shutdown();\n        this.transport = null;\n        break;\n      default:\n        throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);\n    }\n    for (const listener of this.stateListeners) {\n      listener(this, previousState, newState, this.keepaliveTime, errorMessage);\n    }\n    return true;\n  }\n  ref() {\n    this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount + 1));\n    this.refcount += 1;\n  }\n  unref() {\n    this.refTrace('refcount ' + this.refcount + ' -> ' + (this.refcount - 1));\n    this.refcount -= 1;\n    if (this.refcount === 0) {\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Shutting down');\n      }\n      if (this.channelzEnabled) {\n        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n      }\n      process.nextTick(() => {\n        this.transitionToState([connectivity_state_1.ConnectivityState.CONNECTING, connectivity_state_1.ConnectivityState.READY], connectivity_state_1.ConnectivityState.IDLE);\n      });\n    }\n  }\n  unrefIfOneRef() {\n    if (this.refcount === 1) {\n      this.unref();\n      return true;\n    }\n    return false;\n  }\n  createCall(metadata, host, method, listener) {\n    if (!this.transport) {\n      throw new Error('Cannot create call, subchannel not READY');\n    }\n    let statsTracker;\n    if (this.channelzEnabled) {\n      this.callTracker.addCallStarted();\n      this.streamTracker.addCallStarted();\n      statsTracker = {\n        onCallEnd: status => {\n          if (status.code === constants_1.Status.OK) {\n            this.callTracker.addCallSucceeded();\n          } else {\n            this.callTracker.addCallFailed();\n          }\n        }\n      };\n    } else {\n      statsTracker = {};\n    }\n    return this.transport.createCall(metadata, host, method, listener, statsTracker);\n  }\n  /**\n   * If the subchannel is currently IDLE, start connecting and switch to the\n   * CONNECTING state. If the subchannel is current in TRANSIENT_FAILURE,\n   * the next time it would transition to IDLE, start connecting again instead.\n   * Otherwise, do nothing.\n   */\n  startConnecting() {\n    process.nextTick(() => {\n      /* First, try to transition from IDLE to connecting. If that doesn't happen\n       * because the state is not currently IDLE, check if it is\n       * TRANSIENT_FAILURE, and if so indicate that it should go back to\n       * connecting after the backoff timer ends. Otherwise do nothing */\n      if (!this.transitionToState([connectivity_state_1.ConnectivityState.IDLE], connectivity_state_1.ConnectivityState.CONNECTING)) {\n        if (this.connectivityState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n          this.continueConnecting = true;\n        }\n      }\n    });\n  }\n  /**\n   * Get the subchannel's current connectivity state.\n   */\n  getConnectivityState() {\n    return this.connectivityState;\n  }\n  /**\n   * Add a listener function to be called whenever the subchannel's\n   * connectivity state changes.\n   * @param listener\n   */\n  addConnectivityStateListener(listener) {\n    this.stateListeners.add(listener);\n  }\n  /**\n   * Remove a listener previously added with `addConnectivityStateListener`\n   * @param listener A reference to a function previously passed to\n   *     `addConnectivityStateListener`\n   */\n  removeConnectivityStateListener(listener) {\n    this.stateListeners.delete(listener);\n  }\n  /**\n   * Reset the backoff timeout, and immediately start connecting if in backoff.\n   */\n  resetBackoff() {\n    process.nextTick(() => {\n      this.backoffTimeout.reset();\n      this.transitionToState([connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE], connectivity_state_1.ConnectivityState.CONNECTING);\n    });\n  }\n  getAddress() {\n    return this.subchannelAddressString;\n  }\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n  getRealSubchannel() {\n    return this;\n  }\n  realSubchannelEquals(other) {\n    return other.getRealSubchannel() === this;\n  }\n  throttleKeepalive(newKeepaliveTime) {\n    if (newKeepaliveTime > this.keepaliveTime) {\n      this.keepaliveTime = newKeepaliveTime;\n    }\n  }\n}\nexports.Subchannel = Subchannel;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.DEFAULT_PORT = void 0;\nconst resolver_1 = require(\"./resolver\");\nconst dns = require(\"dns\");\nconst util = require(\"util\");\nconst service_config_1 = require(\"./service-config\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst logging = require(\"./logging\");\nconst constants_2 = require(\"./constants\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst net_1 = require(\"net\");\nconst backoff_timeout_1 = require(\"./backoff-timeout\");\nconst TRACER_NAME = 'dns_resolver';\nfunction trace(text) {\n  logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nexports.DEFAULT_PORT = 443;\nconst DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS = 30000;\nconst resolveTxtPromise = util.promisify(dns.resolveTxt);\nconst dnsLookupPromise = util.promisify(dns.lookup);\n/**\n * Merge any number of arrays into a single alternating array\n * @param arrays\n */\nfunction mergeArrays(...arrays) {\n  const result = [];\n  for (let i = 0; i < Math.max.apply(null, arrays.map(array => array.length)); i++) {\n    for (const array of arrays) {\n      if (i < array.length) {\n        result.push(array[i]);\n      }\n    }\n  }\n  return result;\n}\n/**\n * Resolver implementation that handles DNS names and IP addresses.\n */\nclass DnsResolver {\n  constructor(target, listener, channelOptions) {\n    var _a, _b, _c;\n    this.target = target;\n    this.listener = listener;\n    this.pendingLookupPromise = null;\n    this.pendingTxtPromise = null;\n    this.latestLookupResult = null;\n    this.latestServiceConfig = null;\n    this.latestServiceConfigError = null;\n    this.continueResolving = false;\n    this.isNextResolutionTimerRunning = false;\n    this.isServiceConfigEnabled = true;\n    this.returnedIpResult = false;\n    trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n    const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n    if (hostPort === null) {\n      this.ipResult = null;\n      this.dnsHostname = null;\n      this.port = null;\n    } else {\n      if ((0, net_1.isIPv4)(hostPort.host) || (0, net_1.isIPv6)(hostPort.host)) {\n        this.ipResult = [{\n          host: hostPort.host,\n          port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : exports.DEFAULT_PORT\n        }];\n        this.dnsHostname = null;\n        this.port = null;\n      } else {\n        this.ipResult = null;\n        this.dnsHostname = hostPort.host;\n        this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : exports.DEFAULT_PORT;\n      }\n    }\n    this.percentage = Math.random() * 100;\n    if (channelOptions['grpc.service_config_disable_resolution'] === 1) {\n      this.isServiceConfigEnabled = false;\n    }\n    this.defaultResolutionError = {\n      code: constants_1.Status.UNAVAILABLE,\n      details: `Name resolution failed for target ${(0, uri_parser_1.uriToString)(this.target)}`,\n      metadata: new metadata_1.Metadata()\n    };\n    const backoffOptions = {\n      initialDelay: channelOptions['grpc.initial_reconnect_backoff_ms'],\n      maxDelay: channelOptions['grpc.max_reconnect_backoff_ms']\n    };\n    this.backoff = new backoff_timeout_1.BackoffTimeout(() => {\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, backoffOptions);\n    this.backoff.unref();\n    this.minTimeBetweenResolutionsMs = (_c = channelOptions['grpc.dns_min_time_between_resolutions_ms']) !== null && _c !== void 0 ? _c : DEFAULT_MIN_TIME_BETWEEN_RESOLUTIONS_MS;\n    this.nextResolutionTimer = setTimeout(() => {}, 0);\n    clearTimeout(this.nextResolutionTimer);\n  }\n  /**\n   * If the target is an IP address, just provide that address as a result.\n   * Otherwise, initiate A, AAAA, and TXT lookups\n   */\n  startResolution() {\n    if (this.ipResult !== null) {\n      if (!this.returnedIpResult) {\n        trace('Returning IP address for target ' + (0, uri_parser_1.uriToString)(this.target));\n        setImmediate(() => {\n          this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});\n        });\n        this.returnedIpResult = true;\n      }\n      this.backoff.stop();\n      this.backoff.reset();\n      this.stopNextResolutionTimer();\n      return;\n    }\n    if (this.dnsHostname === null) {\n      trace('Failed to parse DNS address ' + (0, uri_parser_1.uriToString)(this.target));\n      setImmediate(() => {\n        this.listener.onError({\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse DNS address ${(0, uri_parser_1.uriToString)(this.target)}`,\n          metadata: new metadata_1.Metadata()\n        });\n      });\n      this.stopNextResolutionTimer();\n    } else {\n      if (this.pendingLookupPromise !== null) {\n        return;\n      }\n      trace('Looking up DNS hostname ' + this.dnsHostname);\n      /* We clear out latestLookupResult here to ensure that it contains the\n       * latest result since the last time we started resolving. That way, the\n       * TXT resolution handler can use it, but only if it finishes second. We\n       * don't clear out any previous service config results because it's\n       * better to use a service config that's slightly out of date than to\n       * revert to an effectively blank one. */\n      this.latestLookupResult = null;\n      const hostname = this.dnsHostname;\n      /* We lookup both address families here and then split them up later\n       * because when looking up a single family, dns.lookup outputs an error\n       * if the name exists but there are no records for that family, and that\n       * error is indistinguishable from other kinds of errors */\n      this.pendingLookupPromise = dnsLookupPromise(hostname, {\n        all: true\n      });\n      this.pendingLookupPromise.then(addressList => {\n        if (this.pendingLookupPromise === null) {\n          return;\n        }\n        this.pendingLookupPromise = null;\n        this.backoff.reset();\n        this.backoff.stop();\n        const ip4Addresses = addressList.filter(addr => addr.family === 4);\n        const ip6Addresses = addressList.filter(addr => addr.family === 6);\n        this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map(addr => ({\n          host: addr.address,\n          port: +this.port\n        }));\n        const allAddressesString = '[' + this.latestLookupResult.map(addr => addr.host + ':' + addr.port).join(',') + ']';\n        trace('Resolved addresses for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + allAddressesString);\n        if (this.latestLookupResult.length === 0) {\n          this.listener.onError(this.defaultResolutionError);\n          return;\n        }\n        /* If the TXT lookup has not yet finished, both of the last two\n         * arguments will be null, which is the equivalent of getting an\n         * empty TXT response. When the TXT lookup does finish, its handler\n         * can update the service config by using the same address list */\n        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n      }, err => {\n        if (this.pendingLookupPromise === null) {\n          return;\n        }\n        trace('Resolution error for target ' + (0, uri_parser_1.uriToString)(this.target) + ': ' + err.message);\n        this.pendingLookupPromise = null;\n        this.stopNextResolutionTimer();\n        this.listener.onError(this.defaultResolutionError);\n      });\n      /* If there already is a still-pending TXT resolution, we can just use\n       * that result when it comes in */\n      if (this.isServiceConfigEnabled && this.pendingTxtPromise === null) {\n        /* We handle the TXT query promise differently than the others because\n         * the name resolution attempt as a whole is a success even if the TXT\n         * lookup fails */\n        this.pendingTxtPromise = resolveTxtPromise(hostname);\n        this.pendingTxtPromise.then(txtRecord => {\n          if (this.pendingTxtPromise === null) {\n            return;\n          }\n          this.pendingTxtPromise = null;\n          try {\n            this.latestServiceConfig = (0, service_config_1.extractAndSelectServiceConfig)(txtRecord, this.percentage);\n          } catch (err) {\n            this.latestServiceConfigError = {\n              code: constants_1.Status.UNAVAILABLE,\n              details: `Parsing service config failed with error ${err.message}`,\n              metadata: new metadata_1.Metadata()\n            };\n          }\n          if (this.latestLookupResult !== null) {\n            /* We rely here on the assumption that calling this function with\n             * identical parameters will be essentialy idempotent, and calling\n             * it with the same address list and a different service config\n             * should result in a fast and seamless switchover. */\n            this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});\n          }\n        }, err => {\n          /* If TXT lookup fails we should do nothing, which means that we\n           * continue to use the result of the most recent successful lookup,\n           * or the default null config object if there has never been a\n           * successful lookup. We do not set the latestServiceConfigError\n           * here because that is specifically used for response validation\n           * errors. We still need to handle this error so that it does not\n           * bubble up as an unhandled promise rejection. */\n        });\n      }\n    }\n  }\n  startNextResolutionTimer() {\n    var _a, _b;\n    clearTimeout(this.nextResolutionTimer);\n    this.nextResolutionTimer = (_b = (_a = setTimeout(() => {\n      this.stopNextResolutionTimer();\n      if (this.continueResolving) {\n        this.startResolutionWithBackoff();\n      }\n    }, this.minTimeBetweenResolutionsMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    this.isNextResolutionTimerRunning = true;\n  }\n  stopNextResolutionTimer() {\n    clearTimeout(this.nextResolutionTimer);\n    this.isNextResolutionTimerRunning = false;\n  }\n  startResolutionWithBackoff() {\n    if (this.pendingLookupPromise === null) {\n      this.continueResolving = false;\n      this.backoff.runOnce();\n      this.startNextResolutionTimer();\n      this.startResolution();\n    }\n  }\n  updateResolution() {\n    /* If there is a pending lookup, just let it finish. Otherwise, if the\n     * nextResolutionTimer or backoff timer is running, set the\n     * continueResolving flag to resolve when whichever of those timers\n     * fires. Otherwise, start resolving immediately. */\n    if (this.pendingLookupPromise === null) {\n      if (this.isNextResolutionTimerRunning || this.backoff.isRunning()) {\n        if (this.isNextResolutionTimerRunning) {\n          trace('resolution update delayed by \"min time between resolutions\" rate limit');\n        } else {\n          trace('resolution update delayed by backoff timer until ' + this.backoff.getEndTime().toISOString());\n        }\n        this.continueResolving = true;\n      } else {\n        this.startResolutionWithBackoff();\n      }\n    }\n  }\n  /**\n   * Reset the resolver to the same state it had when it was created. In-flight\n   * DNS requests cannot be cancelled, but they are discarded and their results\n   * will be ignored.\n   */\n  destroy() {\n    this.continueResolving = false;\n    this.backoff.reset();\n    this.backoff.stop();\n    this.stopNextResolutionTimer();\n    this.pendingLookupPromise = null;\n    this.pendingTxtPromise = null;\n    this.latestLookupResult = null;\n    this.latestServiceConfig = null;\n    this.latestServiceConfigError = null;\n    this.returnedIpResult = false;\n  }\n  /**\n   * Get the default authority for the given target. For IP targets, that is\n   * the IP address. For DNS targets, it is the hostname.\n   * @param target\n   */\n  static getDefaultAuthority(target) {\n    return target.path;\n  }\n}\n/**\n * Set up the DNS resolver class by registering it as the handler for the\n * \"dns:\" prefix and as the default resolver.\n */\nfunction setup() {\n  (0, resolver_1.registerResolver)('dns', DnsResolver);\n  (0, resolver_1.registerDefaultScheme)('dns');\n}\nexports.setup = setup;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getProxiedConnection = exports.mapProxyName = void 0;\nconst logging_1 = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst resolver_1 = require(\"./resolver\");\nconst http = require(\"http\");\nconst tls = require(\"tls\");\nconst logging = require(\"./logging\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst url_1 = require(\"url\");\nconst resolver_dns_1 = require(\"./resolver-dns\");\nconst TRACER_NAME = 'proxy';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nfunction getProxyInfo() {\n  let proxyEnv = '';\n  let envVar = '';\n  /* Prefer using 'grpc_proxy'. Fallback on 'http_proxy' if it is not set.\n   * Also prefer using 'https_proxy' with fallback on 'http_proxy'. The\n   * fallback behavior can be removed if there's a demand for it.\n   */\n  if (process.env.grpc_proxy) {\n    envVar = 'grpc_proxy';\n    proxyEnv = process.env.grpc_proxy;\n  } else if (process.env.https_proxy) {\n    envVar = 'https_proxy';\n    proxyEnv = process.env.https_proxy;\n  } else if (process.env.http_proxy) {\n    envVar = 'http_proxy';\n    proxyEnv = process.env.http_proxy;\n  } else {\n    return {};\n  }\n  let proxyUrl;\n  try {\n    proxyUrl = new url_1.URL(proxyEnv);\n  } catch (e) {\n    (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `cannot parse value of \"${envVar}\" env var`);\n    return {};\n  }\n  if (proxyUrl.protocol !== 'http:') {\n    (0, logging_1.log)(constants_1.LogVerbosity.ERROR, `\"${proxyUrl.protocol}\" scheme not supported in proxy URI`);\n    return {};\n  }\n  let userCred = null;\n  if (proxyUrl.username) {\n    if (proxyUrl.password) {\n      (0, logging_1.log)(constants_1.LogVerbosity.INFO, 'userinfo found in proxy URI');\n      userCred = `${proxyUrl.username}:${proxyUrl.password}`;\n    } else {\n      userCred = proxyUrl.username;\n    }\n  }\n  const hostname = proxyUrl.hostname;\n  let port = proxyUrl.port;\n  /* The proxy URL uses the scheme \"http:\", which has a default port number of\n   * 80. We need to set that explicitly here if it is omitted because otherwise\n   * it will use gRPC's default port 443. */\n  if (port === '') {\n    port = '80';\n  }\n  const result = {\n    address: `${hostname}:${port}`\n  };\n  if (userCred) {\n    result.creds = userCred;\n  }\n  trace('Proxy server ' + result.address + ' set by environment variable ' + envVar);\n  return result;\n}\nfunction getNoProxyHostList() {\n  /* Prefer using 'no_grpc_proxy'. Fallback on 'no_proxy' if it is not set. */\n  let noProxyStr = process.env.no_grpc_proxy;\n  let envVar = 'no_grpc_proxy';\n  if (!noProxyStr) {\n    noProxyStr = process.env.no_proxy;\n    envVar = 'no_proxy';\n  }\n  if (noProxyStr) {\n    trace('No proxy server list set by environment variable ' + envVar);\n    return noProxyStr.split(',');\n  } else {\n    return [];\n  }\n}\nfunction mapProxyName(target, options) {\n  var _a;\n  const noProxyResult = {\n    target: target,\n    extraOptions: {}\n  };\n  if (((_a = options['grpc.enable_http_proxy']) !== null && _a !== void 0 ? _a : 1) === 0) {\n    return noProxyResult;\n  }\n  if (target.scheme === 'unix') {\n    return noProxyResult;\n  }\n  const proxyInfo = getProxyInfo();\n  if (!proxyInfo.address) {\n    return noProxyResult;\n  }\n  const hostPort = (0, uri_parser_1.splitHostPort)(target.path);\n  if (!hostPort) {\n    return noProxyResult;\n  }\n  const serverHost = hostPort.host;\n  for (const host of getNoProxyHostList()) {\n    if (host === serverHost) {\n      trace('Not using proxy for target in no_proxy list: ' + (0, uri_parser_1.uriToString)(target));\n      return noProxyResult;\n    }\n  }\n  const extraOptions = {\n    'grpc.http_connect_target': (0, uri_parser_1.uriToString)(target)\n  };\n  if (proxyInfo.creds) {\n    extraOptions['grpc.http_connect_creds'] = proxyInfo.creds;\n  }\n  return {\n    target: {\n      scheme: 'dns',\n      path: proxyInfo.address\n    },\n    extraOptions: extraOptions\n  };\n}\nexports.mapProxyName = mapProxyName;\nfunction getProxiedConnection(address, channelOptions, connectionOptions) {\n  var _a;\n  if (!('grpc.http_connect_target' in channelOptions)) {\n    return Promise.resolve({});\n  }\n  const realTarget = channelOptions['grpc.http_connect_target'];\n  const parsedTarget = (0, uri_parser_1.parseUri)(realTarget);\n  if (parsedTarget === null) {\n    return Promise.resolve({});\n  }\n  const splitHostPost = (0, uri_parser_1.splitHostPort)(parsedTarget.path);\n  if (splitHostPost === null) {\n    return Promise.resolve({});\n  }\n  const hostPort = `${splitHostPost.host}:${(_a = splitHostPost.port) !== null && _a !== void 0 ? _a : resolver_dns_1.DEFAULT_PORT}`;\n  const options = {\n    method: 'CONNECT',\n    path: hostPort\n  };\n  const headers = {\n    Host: hostPort\n  };\n  // Connect to the subchannel address as a proxy\n  if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {\n    options.host = address.host;\n    options.port = address.port;\n  } else {\n    options.socketPath = address.path;\n  }\n  if ('grpc.http_connect_creds' in channelOptions) {\n    headers['Proxy-Authorization'] = 'Basic ' + Buffer.from(channelOptions['grpc.http_connect_creds']).toString('base64');\n  }\n  options.headers = headers;\n  const proxyAddressString = (0, subchannel_address_1.subchannelAddressToString)(address);\n  trace('Using proxy ' + proxyAddressString + ' to connect to ' + options.path);\n  return new Promise((resolve, reject) => {\n    const request = http.request(options);\n    request.once('connect', (res, socket, head) => {\n      var _a;\n      request.removeAllListeners();\n      socket.removeAllListeners();\n      if (res.statusCode === 200) {\n        trace('Successfully connected to ' + options.path + ' through proxy ' + proxyAddressString);\n        if ('secureContext' in connectionOptions) {\n          /* The proxy is connecting to a TLS server, so upgrade this socket\n           * connection to a TLS connection.\n           * This is a workaround for https://github.com/nodejs/node/issues/32922\n           * See https://github.com/grpc/grpc-node/pull/1369 for more info. */\n          const targetPath = (0, resolver_1.getDefaultAuthority)(parsedTarget);\n          const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\n          const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;\n          const cts = tls.connect(Object.assign({\n            host: remoteHost,\n            servername: remoteHost,\n            socket: socket\n          }, connectionOptions), () => {\n            trace('Successfully established a TLS connection to ' + options.path + ' through proxy ' + proxyAddressString);\n            resolve({\n              socket: cts,\n              realTarget: parsedTarget\n            });\n          });\n          cts.on('error', error => {\n            trace('Failed to establish a TLS connection to ' + options.path + ' through proxy ' + proxyAddressString + ' with error ' + error.message);\n            reject();\n          });\n        } else {\n          trace('Successfully established a plaintext connection to ' + options.path + ' through proxy ' + proxyAddressString);\n          resolve({\n            socket,\n            realTarget: parsedTarget\n          });\n        }\n      } else {\n        (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to ' + options.path + ' through proxy ' + proxyAddressString + ' with status ' + res.statusCode);\n        reject();\n      }\n    });\n    request.once('error', err => {\n      request.removeAllListeners();\n      (0, logging_1.log)(constants_1.LogVerbosity.ERROR, 'Failed to connect to proxy ' + proxyAddressString + ' with error ' + err.message);\n      reject();\n    });\n    request.end();\n  });\n}\nexports.getProxiedConnection = getProxiedConnection;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StreamDecoder = void 0;\nvar ReadState;\n(function (ReadState) {\n  ReadState[ReadState[\"NO_DATA\"] = 0] = \"NO_DATA\";\n  ReadState[ReadState[\"READING_SIZE\"] = 1] = \"READING_SIZE\";\n  ReadState[ReadState[\"READING_MESSAGE\"] = 2] = \"READING_MESSAGE\";\n})(ReadState || (ReadState = {}));\nclass StreamDecoder {\n  constructor(maxReadMessageLength) {\n    this.maxReadMessageLength = maxReadMessageLength;\n    this.readState = ReadState.NO_DATA;\n    this.readCompressFlag = Buffer.alloc(1);\n    this.readPartialSize = Buffer.alloc(4);\n    this.readSizeRemaining = 4;\n    this.readMessageSize = 0;\n    this.readPartialMessage = [];\n    this.readMessageRemaining = 0;\n  }\n  write(data) {\n    let readHead = 0;\n    let toRead;\n    const result = [];\n    while (readHead < data.length) {\n      switch (this.readState) {\n        case ReadState.NO_DATA:\n          this.readCompressFlag = data.slice(readHead, readHead + 1);\n          readHead += 1;\n          this.readState = ReadState.READING_SIZE;\n          this.readPartialSize.fill(0);\n          this.readSizeRemaining = 4;\n          this.readMessageSize = 0;\n          this.readMessageRemaining = 0;\n          this.readPartialMessage = [];\n          break;\n        case ReadState.READING_SIZE:\n          toRead = Math.min(data.length - readHead, this.readSizeRemaining);\n          data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);\n          this.readSizeRemaining -= toRead;\n          readHead += toRead;\n          // readSizeRemaining >=0 here\n          if (this.readSizeRemaining === 0) {\n            this.readMessageSize = this.readPartialSize.readUInt32BE(0);\n            if (this.maxReadMessageLength !== -1 && this.readMessageSize > this.maxReadMessageLength) {\n              throw new Error(`Received message larger than max (${this.readMessageSize} vs ${this.maxReadMessageLength})`);\n            }\n            this.readMessageRemaining = this.readMessageSize;\n            if (this.readMessageRemaining > 0) {\n              this.readState = ReadState.READING_MESSAGE;\n            } else {\n              const message = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);\n              this.readState = ReadState.NO_DATA;\n              result.push(message);\n            }\n          }\n          break;\n        case ReadState.READING_MESSAGE:\n          toRead = Math.min(data.length - readHead, this.readMessageRemaining);\n          this.readPartialMessage.push(data.slice(readHead, readHead + toRead));\n          this.readMessageRemaining -= toRead;\n          readHead += toRead;\n          // readMessageRemaining >=0 here\n          if (this.readMessageRemaining === 0) {\n            // At this point, we have read a full message\n            const framedMessageBuffers = [this.readCompressFlag, this.readPartialSize].concat(this.readPartialMessage);\n            const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);\n            this.readState = ReadState.NO_DATA;\n            result.push(framedMessage);\n          }\n          break;\n        default:\n          throw new Error('Unexpected read state');\n      }\n    }\n    return result;\n  }\n}\nexports.StreamDecoder = StreamDecoder;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Http2SubchannelCall = void 0;\nconst http2 = require(\"http2\");\nconst os = require(\"os\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst stream_decoder_1 = require(\"./stream-decoder\");\nconst logging = require(\"./logging\");\nconst constants_2 = require(\"./constants\");\nconst TRACER_NAME = 'subchannel_call';\n/**\n * Should do approximately the same thing as util.getSystemErrorName but the\n * TypeScript types don't have that function for some reason so I just made my\n * own.\n * @param errno\n */\nfunction getSystemErrorName(errno) {\n  for (const [name, num] of Object.entries(os.constants.errno)) {\n    if (num === errno) {\n      return name;\n    }\n  }\n  return 'Unknown system error ' + errno;\n}\nclass Http2SubchannelCall {\n  constructor(http2Stream, callEventTracker, listener, transport, callId) {\n    var _a;\n    this.http2Stream = http2Stream;\n    this.callEventTracker = callEventTracker;\n    this.listener = listener;\n    this.transport = transport;\n    this.callId = callId;\n    this.isReadFilterPending = false;\n    this.isPushPending = false;\n    this.canPush = false;\n    /**\n     * Indicates that an 'end' event has come from the http2 stream, so there\n     * will be no more data events.\n     */\n    this.readsClosed = false;\n    this.statusOutput = false;\n    this.unpushedReadMessages = [];\n    // Status code mapped from :status. To be used if grpc-status is not received\n    this.mappedStatusCode = constants_1.Status.UNKNOWN;\n    // This is populated (non-null) if and only if the call has ended\n    this.finalStatus = null;\n    this.internalError = null;\n    const maxReceiveMessageLength = (_a = transport.getOptions()['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n    this.decoder = new stream_decoder_1.StreamDecoder(maxReceiveMessageLength);\n    http2Stream.on('response', (headers, flags) => {\n      let headersString = '';\n      for (const header of Object.keys(headers)) {\n        headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n      }\n      this.trace('Received server headers:\\n' + headersString);\n      switch (headers[':status']) {\n        // TODO(murgatroid99): handle 100 and 101\n        case 400:\n          this.mappedStatusCode = constants_1.Status.INTERNAL;\n          break;\n        case 401:\n          this.mappedStatusCode = constants_1.Status.UNAUTHENTICATED;\n          break;\n        case 403:\n          this.mappedStatusCode = constants_1.Status.PERMISSION_DENIED;\n          break;\n        case 404:\n          this.mappedStatusCode = constants_1.Status.UNIMPLEMENTED;\n          break;\n        case 429:\n        case 502:\n        case 503:\n        case 504:\n          this.mappedStatusCode = constants_1.Status.UNAVAILABLE;\n          break;\n        default:\n          this.mappedStatusCode = constants_1.Status.UNKNOWN;\n      }\n      if (flags & http2.constants.NGHTTP2_FLAG_END_STREAM) {\n        this.handleTrailers(headers);\n      } else {\n        let metadata;\n        try {\n          metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n        } catch (error) {\n          this.endCall({\n            code: constants_1.Status.UNKNOWN,\n            details: error.message,\n            metadata: new metadata_1.Metadata()\n          });\n          return;\n        }\n        this.listener.onReceiveMetadata(metadata);\n      }\n    });\n    http2Stream.on('trailers', headers => {\n      this.handleTrailers(headers);\n    });\n    http2Stream.on('data', data => {\n      /* If the status has already been output, allow the http2 stream to\n       * drain without processing the data. */\n      if (this.statusOutput) {\n        return;\n      }\n      this.trace('receive HTTP/2 data frame of length ' + data.length);\n      let messages;\n      try {\n        messages = this.decoder.write(data);\n      } catch (e) {\n        this.cancelWithStatus(constants_1.Status.RESOURCE_EXHAUSTED, e.message);\n        return;\n      }\n      for (const message of messages) {\n        this.trace('parsed message of length ' + message.length);\n        this.callEventTracker.addMessageReceived();\n        this.tryPush(message);\n      }\n    });\n    http2Stream.on('end', () => {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n    });\n    http2Stream.on('close', () => {\n      /* Use process.next tick to ensure that this code happens after any\n       * \"error\" event that may be emitted at about the same time, so that\n       * we can bubble up the error message from that event. */\n      process.nextTick(() => {\n        var _a;\n        this.trace('HTTP/2 stream closed with code ' + http2Stream.rstCode);\n        /* If we have a final status with an OK status code, that means that\n         * we have received all of the messages and we have processed the\n         * trailers and the call completed successfully, so it doesn't matter\n         * how the stream ends after that */\n        if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n          return;\n        }\n        let code;\n        let details = '';\n        switch (http2Stream.rstCode) {\n          case http2.constants.NGHTTP2_NO_ERROR:\n            /* If we get a NO_ERROR code and we already have a status, the\n             * stream completed properly and we just haven't fully processed\n             * it yet */\n            if (this.finalStatus !== null) {\n              return;\n            }\n            code = constants_1.Status.INTERNAL;\n            details = `Received RST_STREAM with code ${http2Stream.rstCode}`;\n            break;\n          case http2.constants.NGHTTP2_REFUSED_STREAM:\n            code = constants_1.Status.UNAVAILABLE;\n            details = 'Stream refused by server';\n            break;\n          case http2.constants.NGHTTP2_CANCEL:\n            code = constants_1.Status.CANCELLED;\n            details = 'Call cancelled';\n            break;\n          case http2.constants.NGHTTP2_ENHANCE_YOUR_CALM:\n            code = constants_1.Status.RESOURCE_EXHAUSTED;\n            details = 'Bandwidth exhausted or memory limit exceeded';\n            break;\n          case http2.constants.NGHTTP2_INADEQUATE_SECURITY:\n            code = constants_1.Status.PERMISSION_DENIED;\n            details = 'Protocol not secure enough';\n            break;\n          case http2.constants.NGHTTP2_INTERNAL_ERROR:\n            code = constants_1.Status.INTERNAL;\n            if (this.internalError === null) {\n              /* This error code was previously handled in the default case, and\n               * there are several instances of it online, so I wanted to\n               * preserve the original error message so that people find existing\n               * information in searches, but also include the more recognizable\n               * \"Internal server error\" message. */\n              details = `Received RST_STREAM with code ${http2Stream.rstCode} (Internal server error)`;\n            } else {\n              if (this.internalError.code === 'ECONNRESET' || this.internalError.code === 'ETIMEDOUT') {\n                code = constants_1.Status.UNAVAILABLE;\n                details = this.internalError.message;\n              } else {\n                /* The \"Received RST_STREAM with code ...\" error is preserved\n                 * here for continuity with errors reported online, but the\n                 * error message at the end will probably be more relevant in\n                 * most cases. */\n                details = `Received RST_STREAM with code ${http2Stream.rstCode} triggered by internal client error: ${this.internalError.message}`;\n              }\n            }\n            break;\n          default:\n            code = constants_1.Status.INTERNAL;\n            details = `Received RST_STREAM with code ${http2Stream.rstCode}`;\n        }\n        // This is a no-op if trailers were received at all.\n        // This is OK, because status codes emitted here correspond to more\n        // catastrophic issues that prevent us from receiving trailers in the\n        // first place.\n        this.endCall({\n          code,\n          details,\n          metadata: new metadata_1.Metadata(),\n          rstCode: http2Stream.rstCode\n        });\n      });\n    });\n    http2Stream.on('error', err => {\n      /* We need an error handler here to stop \"Uncaught Error\" exceptions\n       * from bubbling up. However, errors here should all correspond to\n       * \"close\" events, where we will handle the error more granularly */\n      /* Specifically looking for stream errors that were *not* constructed\n       * from a RST_STREAM response here:\n       * https://github.com/nodejs/node/blob/8b8620d580314050175983402dfddf2674e8e22a/lib/internal/http2/core.js#L2267\n       */\n      if (err.code !== 'ERR_HTTP2_STREAM_ERROR') {\n        this.trace('Node error event: message=' + err.message + ' code=' + err.code + ' errno=' + getSystemErrorName(err.errno) + ' syscall=' + err.syscall);\n        this.internalError = err;\n      }\n      this.callEventTracker.onStreamEnd(false);\n    });\n  }\n  onDisconnect() {\n    this.endCall({\n      code: constants_1.Status.UNAVAILABLE,\n      details: 'Connection dropped',\n      metadata: new metadata_1.Metadata()\n    });\n  }\n  outputStatus() {\n    /* Precondition: this.finalStatus !== null */\n    if (!this.statusOutput) {\n      this.statusOutput = true;\n      this.trace('ended with status: code=' + this.finalStatus.code + ' details=\"' + this.finalStatus.details + '\"');\n      this.callEventTracker.onCallEnd(this.finalStatus);\n      /* We delay the actual action of bubbling up the status to insulate the\n       * cleanup code in this class from any errors that may be thrown in the\n       * upper layers as a result of bubbling up the status. In particular,\n       * if the status is not OK, the \"error\" event may be emitted\n       * synchronously at the top level, which will result in a thrown error if\n       * the user does not handle that event. */\n      process.nextTick(() => {\n        this.listener.onReceiveStatus(this.finalStatus);\n      });\n      /* Leave the http2 stream in flowing state to drain incoming messages, to\n       * ensure that the stream closure completes. The call stream already does\n       * not push more messages after the status is output, so the messages go\n       * nowhere either way. */\n      this.http2Stream.resume();\n    }\n  }\n  trace(text) {\n    logging.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callId + '] ' + text);\n  }\n  /**\n   * On first call, emits a 'status' event with the given StatusObject.\n   * Subsequent calls are no-ops.\n   * @param status The status of the call.\n   */\n  endCall(status) {\n    /* If the status is OK and a new status comes in (e.g. from a\n     * deserialization failure), that new status takes priority */\n    if (this.finalStatus === null || this.finalStatus.code === constants_1.Status.OK) {\n      this.finalStatus = status;\n      this.maybeOutputStatus();\n    }\n    this.destroyHttp2Stream();\n  }\n  maybeOutputStatus() {\n    if (this.finalStatus !== null) {\n      /* The combination check of readsClosed and that the two message buffer\n       * arrays are empty checks that there all incoming data has been fully\n       * processed */\n      if (this.finalStatus.code !== constants_1.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && !this.isReadFilterPending && !this.isPushPending) {\n        this.outputStatus();\n      }\n    }\n  }\n  push(message) {\n    this.trace('pushing to reader message of length ' + (message instanceof Buffer ? message.length : null));\n    this.canPush = false;\n    this.isPushPending = true;\n    process.nextTick(() => {\n      this.isPushPending = false;\n      /* If we have already output the status any later messages should be\n       * ignored, and can cause out-of-order operation errors higher up in the\n       * stack. Checking as late as possible here to avoid any race conditions.\n       */\n      if (this.statusOutput) {\n        return;\n      }\n      this.listener.onReceiveMessage(message);\n      this.maybeOutputStatus();\n    });\n  }\n  tryPush(messageBytes) {\n    if (this.canPush) {\n      this.http2Stream.pause();\n      this.push(messageBytes);\n    } else {\n      this.trace('unpushedReadMessages.push message of length ' + messageBytes.length);\n      this.unpushedReadMessages.push(messageBytes);\n    }\n  }\n  handleTrailers(headers) {\n    this.callEventTracker.onStreamEnd(true);\n    let headersString = '';\n    for (const header of Object.keys(headers)) {\n      headersString += '\\t\\t' + header + ': ' + headers[header] + '\\n';\n    }\n    this.trace('Received server trailers:\\n' + headersString);\n    let metadata;\n    try {\n      metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n    } catch (e) {\n      metadata = new metadata_1.Metadata();\n    }\n    const metadataMap = metadata.getMap();\n    let code = this.mappedStatusCode;\n    if (code === constants_1.Status.UNKNOWN && typeof metadataMap['grpc-status'] === 'string') {\n      const receivedStatus = Number(metadataMap['grpc-status']);\n      if (receivedStatus in constants_1.Status) {\n        code = receivedStatus;\n        this.trace('received status code ' + receivedStatus + ' from server');\n      }\n      metadata.remove('grpc-status');\n    }\n    let details = '';\n    if (typeof metadataMap['grpc-message'] === 'string') {\n      try {\n        details = decodeURI(metadataMap['grpc-message']);\n      } catch (e) {\n        details = metadataMap['grpc-message'];\n      }\n      metadata.remove('grpc-message');\n      this.trace('received status details string \"' + details + '\" from server');\n    }\n    const status = {\n      code,\n      details,\n      metadata\n    };\n    // This is a no-op if the call was already ended when handling headers.\n    this.endCall(status);\n  }\n  destroyHttp2Stream() {\n    var _a;\n    // The http2 stream could already have been destroyed if cancelWithStatus\n    // is called in response to an internal http2 error.\n    if (!this.http2Stream.destroyed) {\n      /* If the call has ended with an OK status, communicate that when closing\n       * the stream, partly to avoid a situation in which we detect an error\n       * RST_STREAM as a result after we have the status */\n      let code;\n      if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1.Status.OK) {\n        code = http2.constants.NGHTTP2_NO_ERROR;\n      } else {\n        code = http2.constants.NGHTTP2_CANCEL;\n      }\n      this.trace('close http2 stream with code ' + code);\n      this.http2Stream.close(code);\n    }\n  }\n  cancelWithStatus(status, details) {\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    this.endCall({\n      code: status,\n      details,\n      metadata: new metadata_1.Metadata()\n    });\n  }\n  getStatus() {\n    return this.finalStatus;\n  }\n  getPeer() {\n    return this.transport.getPeerName();\n  }\n  getCallNumber() {\n    return this.callId;\n  }\n  startRead() {\n    /* If the stream has ended with an error, we should not emit any more\n     * messages and we should communicate that the stream has ended */\n    if (this.finalStatus !== null && this.finalStatus.code !== constants_1.Status.OK) {\n      this.readsClosed = true;\n      this.maybeOutputStatus();\n      return;\n    }\n    this.canPush = true;\n    if (this.unpushedReadMessages.length > 0) {\n      const nextMessage = this.unpushedReadMessages.shift();\n      this.push(nextMessage);\n      return;\n    }\n    /* Only resume reading from the http2Stream if we don't have any pending\n     * messages to emit */\n    this.http2Stream.resume();\n  }\n  sendMessageWithContext(context, message) {\n    this.trace('write() called with message of length ' + message.length);\n    const cb = error => {\n      /* nextTick here ensures that no stream action can be taken in the call\n       * stack of the write callback, in order to hopefully work around\n       * https://github.com/nodejs/node/issues/49147 */\n      process.nextTick(() => {\n        var _a;\n        let code = constants_1.Status.UNAVAILABLE;\n        if ((error === null || error === void 0 ? void 0 : error.code) === 'ERR_STREAM_WRITE_AFTER_END') {\n          code = constants_1.Status.INTERNAL;\n        }\n        if (error) {\n          this.cancelWithStatus(code, `Write error: ${error.message}`);\n        }\n        (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\n      });\n    };\n    this.trace('sending data chunk of length ' + message.length);\n    this.callEventTracker.addMessageSent();\n    try {\n      this.http2Stream.write(message, cb);\n    } catch (error) {\n      this.endCall({\n        code: constants_1.Status.UNAVAILABLE,\n        details: `Write failed with error ${error.message}`,\n        metadata: new metadata_1.Metadata()\n      });\n    }\n  }\n  halfClose() {\n    this.trace('end() called');\n    this.trace('calling end() on HTTP/2 stream');\n    this.http2Stream.end();\n  }\n}\nexports.Http2SubchannelCall = Http2SubchannelCall;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getNextCallNumber = void 0;\nlet nextCallNumber = 0;\nfunction getNextCallNumber() {\n  return nextCallNumber++;\n}\nexports.getNextCallNumber = getNextCallNumber;\n", "\"use strict\";\n\n/*\n * Copyright 2023 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Http2SubchannelConnector = void 0;\nconst http2 = require(\"http2\");\nconst tls_1 = require(\"tls\");\nconst channelz_1 = require(\"./channelz\");\nconst constants_1 = require(\"./constants\");\nconst http_proxy_1 = require(\"./http_proxy\");\nconst logging = require(\"./logging\");\nconst resolver_1 = require(\"./resolver\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst net = require(\"net\");\nconst subchannel_call_1 = require(\"./subchannel-call\");\nconst call_number_1 = require(\"./call-number\");\nconst TRACER_NAME = 'transport';\nconst FLOW_CONTROL_TRACER_NAME = 'transport_flowctrl';\nconst clientVersion = require('../../package.json').version;\nconst {\n  HTTP2_HEADER_AUTHORITY,\n  HTTP2_HEADER_CONTENT_TYPE,\n  HTTP2_HEADER_METHOD,\n  HTTP2_HEADER_PATH,\n  HTTP2_HEADER_TE,\n  HTTP2_HEADER_USER_AGENT\n} = http2.constants;\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst tooManyPingsData = Buffer.from('too_many_pings', 'ascii');\nclass Http2Transport {\n  constructor(session, subchannelAddress, options,\n  /**\n   * Name of the remote server, if it is not the same as the subchannel\n   * address, i.e. if connecting through an HTTP CONNECT proxy.\n   */\n  remoteName) {\n    this.session = session;\n    this.options = options;\n    this.remoteName = remoteName;\n    /**\n     * The amount of time in between sending pings\n     */\n    this.keepaliveTimeMs = -1;\n    /**\n     * The amount of time to wait for an acknowledgement after sending a ping\n     */\n    this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;\n    /**\n     * Timer reference for timeout that indicates when to send the next ping\n     */\n    this.keepaliveTimerId = null;\n    /**\n     * Indicates that the keepalive timer ran out while there were no active\n     * calls, and a ping should be sent the next time a call starts.\n     */\n    this.pendingSendKeepalivePing = false;\n    /**\n     * Timer reference tracking when the most recent ping will be considered lost\n     */\n    this.keepaliveTimeoutId = null;\n    /**\n     * Indicates whether keepalive pings should be sent without any active calls\n     */\n    this.keepaliveWithoutCalls = false;\n    this.activeCalls = new Set();\n    this.disconnectListeners = [];\n    this.disconnectHandled = false;\n    this.channelzEnabled = true;\n    this.streamTracker = new channelz_1.ChannelzCallTracker();\n    this.keepalivesSent = 0;\n    this.messagesSent = 0;\n    this.messagesReceived = 0;\n    this.lastMessageSentTimestamp = null;\n    this.lastMessageReceivedTimestamp = null;\n    /* Populate subchannelAddressString and channelzRef before doing anything\n     * else, because they are used in the trace methods. */\n    this.subchannelAddressString = (0, subchannel_address_1.subchannelAddressToString)(subchannelAddress);\n    if (options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzRef = (0, channelz_1.registerChannelzSocket)(this.subchannelAddressString, () => this.getChannelzInfo(), this.channelzEnabled);\n    // Build user-agent string.\n    this.userAgent = [options['grpc.primary_user_agent'], `grpc-node-js/${clientVersion}`, options['grpc.secondary_user_agent']].filter(e => e).join(' '); // remove falsey values first\n    if ('grpc.keepalive_time_ms' in options) {\n      this.keepaliveTimeMs = options['grpc.keepalive_time_ms'];\n    }\n    if ('grpc.keepalive_timeout_ms' in options) {\n      this.keepaliveTimeoutMs = options['grpc.keepalive_timeout_ms'];\n    }\n    if ('grpc.keepalive_permit_without_calls' in options) {\n      this.keepaliveWithoutCalls = options['grpc.keepalive_permit_without_calls'] === 1;\n    } else {\n      this.keepaliveWithoutCalls = false;\n    }\n    session.once('close', () => {\n      this.trace('session closed');\n      this.stopKeepalivePings();\n      this.handleDisconnect();\n    });\n    session.once('goaway', (errorCode, lastStreamID, opaqueData) => {\n      let tooManyPings = false;\n      /* See the last paragraph of\n       * https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md#basic-keepalive */\n      if (errorCode === http2.constants.NGHTTP2_ENHANCE_YOUR_CALM && opaqueData && opaqueData.equals(tooManyPingsData)) {\n        tooManyPings = true;\n      }\n      this.trace('connection closed by GOAWAY with code ' + errorCode + ' and data ' + (opaqueData === null || opaqueData === void 0 ? void 0 : opaqueData.toString()));\n      this.reportDisconnectToOwner(tooManyPings);\n    });\n    session.once('error', error => {\n      /* Do nothing here. Any error should also trigger a close event, which is\n       * where we want to handle that.  */\n      this.trace('connection closed with error ' + error.message);\n    });\n    if (logging.isTracerEnabled(TRACER_NAME)) {\n      session.on('remoteSettings', settings => {\n        this.trace('new settings received' + (this.session !== session ? ' on the old connection' : '') + ': ' + JSON.stringify(settings));\n      });\n      session.on('localSettings', settings => {\n        this.trace('local settings acknowledged by remote' + (this.session !== session ? ' on the old connection' : '') + ': ' + JSON.stringify(settings));\n      });\n    }\n    /* Start the keepalive timer last, because this can trigger trace logs,\n     * which should only happen after everything else is set up. */\n    if (this.keepaliveWithoutCalls) {\n      this.maybeStartKeepalivePingTimer();\n    }\n  }\n  getChannelzInfo() {\n    var _a, _b, _c;\n    const sessionSocket = this.session.socket;\n    const remoteAddress = sessionSocket.remoteAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n    const localAddress = sessionSocket.localAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort) : null;\n    let tlsInfo;\n    if (this.session.encrypted) {\n      const tlsSocket = sessionSocket;\n      const cipherInfo = tlsSocket.getCipher();\n      const certificate = tlsSocket.getCertificate();\n      const peerCertificate = tlsSocket.getPeerCertificate();\n      tlsInfo = {\n        cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n        cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n        localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\n        remoteCertificate: peerCertificate && 'raw' in peerCertificate ? peerCertificate.raw : null\n      };\n    } else {\n      tlsInfo = null;\n    }\n    const socketInfo = {\n      remoteAddress: remoteAddress,\n      localAddress: localAddress,\n      security: tlsInfo,\n      remoteName: this.remoteName,\n      streamsStarted: this.streamTracker.callsStarted,\n      streamsSucceeded: this.streamTracker.callsSucceeded,\n      streamsFailed: this.streamTracker.callsFailed,\n      messagesSent: this.messagesSent,\n      messagesReceived: this.messagesReceived,\n      keepAlivesSent: this.keepalivesSent,\n      lastLocalStreamCreatedTimestamp: this.streamTracker.lastCallStartedTimestamp,\n      lastRemoteStreamCreatedTimestamp: null,\n      lastMessageSentTimestamp: this.lastMessageSentTimestamp,\n      lastMessageReceivedTimestamp: this.lastMessageReceivedTimestamp,\n      localFlowControlWindow: (_b = this.session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n      remoteFlowControlWindow: (_c = this.session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n    };\n    return socketInfo;\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n  }\n  keepaliveTrace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, 'keepalive', '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n  }\n  flowControlTrace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, FLOW_CONTROL_TRACER_NAME, '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n  }\n  internalsTrace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, 'transport_internals', '(' + this.channelzRef.id + ') ' + this.subchannelAddressString + ' ' + text);\n  }\n  /**\n   * Indicate to the owner of this object that this transport should no longer\n   * be used. That happens if the connection drops, or if the server sends a\n   * GOAWAY.\n   * @param tooManyPings If true, this was triggered by a GOAWAY with data\n   * indicating that the session was closed becaues the client sent too many\n   * pings.\n   * @returns\n   */\n  reportDisconnectToOwner(tooManyPings) {\n    if (this.disconnectHandled) {\n      return;\n    }\n    this.disconnectHandled = true;\n    this.disconnectListeners.forEach(listener => listener(tooManyPings));\n  }\n  /**\n   * Handle connection drops, but not GOAWAYs.\n   */\n  handleDisconnect() {\n    this.reportDisconnectToOwner(false);\n    /* Give calls an event loop cycle to finish naturally before reporting the\n     * disconnnection to them. */\n    setImmediate(() => {\n      for (const call of this.activeCalls) {\n        call.onDisconnect();\n      }\n    });\n  }\n  addDisconnectListener(listener) {\n    this.disconnectListeners.push(listener);\n  }\n  clearKeepaliveTimer() {\n    if (!this.keepaliveTimerId) {\n      return;\n    }\n    clearTimeout(this.keepaliveTimerId);\n    this.keepaliveTimerId = null;\n  }\n  clearKeepaliveTimeout() {\n    if (!this.keepaliveTimeoutId) {\n      return;\n    }\n    clearTimeout(this.keepaliveTimeoutId);\n    this.keepaliveTimeoutId = null;\n  }\n  canSendPing() {\n    return this.keepaliveTimeMs > 0 && (this.keepaliveWithoutCalls || this.activeCalls.size > 0);\n  }\n  maybeSendPing() {\n    var _a, _b;\n    this.clearKeepaliveTimer();\n    if (!this.canSendPing()) {\n      this.pendingSendKeepalivePing = true;\n      return;\n    }\n    if (this.channelzEnabled) {\n      this.keepalivesSent += 1;\n    }\n    this.keepaliveTrace('Sending ping with timeout ' + this.keepaliveTimeoutMs + 'ms');\n    if (!this.keepaliveTimeoutId) {\n      this.keepaliveTimeoutId = setTimeout(() => {\n        this.keepaliveTrace('Ping timeout passed without response');\n        this.handleDisconnect();\n      }, this.keepaliveTimeoutMs);\n      (_b = (_a = this.keepaliveTimeoutId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    try {\n      this.session.ping((err, duration, payload) => {\n        if (err) {\n          this.keepaliveTrace('Ping failed with error ' + err.message);\n          this.handleDisconnect();\n        }\n        this.keepaliveTrace('Received ping response');\n        this.clearKeepaliveTimeout();\n        this.maybeStartKeepalivePingTimer();\n      });\n    } catch (e) {\n      /* If we fail to send a ping, the connection is no longer functional, so\n       * we should discard it. */\n      this.handleDisconnect();\n    }\n  }\n  /**\n   * Starts the keepalive ping timer if appropriate. If the timer already ran\n   * out while there were no active requests, instead send a ping immediately.\n   * If the ping timer is already running or a ping is currently in flight,\n   * instead do nothing and wait for them to resolve.\n   */\n  maybeStartKeepalivePingTimer() {\n    var _a, _b;\n    if (!this.canSendPing()) {\n      return;\n    }\n    if (this.pendingSendKeepalivePing) {\n      this.pendingSendKeepalivePing = false;\n      this.maybeSendPing();\n    } else if (!this.keepaliveTimerId && !this.keepaliveTimeoutId) {\n      this.keepaliveTrace('Starting keepalive timer for ' + this.keepaliveTimeMs + 'ms');\n      this.keepaliveTimerId = (_b = (_a = setTimeout(() => {\n        this.maybeSendPing();\n      }, this.keepaliveTimeMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n    /* Otherwise, there is already either a keepalive timer or a ping pending,\n     * wait for those to resolve. */\n  }\n  stopKeepalivePings() {\n    if (this.keepaliveTimerId) {\n      clearTimeout(this.keepaliveTimerId);\n      this.keepaliveTimerId = null;\n    }\n    this.clearKeepaliveTimeout();\n  }\n  removeActiveCall(call) {\n    this.activeCalls.delete(call);\n    if (this.activeCalls.size === 0) {\n      this.session.unref();\n    }\n  }\n  addActiveCall(call) {\n    this.activeCalls.add(call);\n    if (this.activeCalls.size === 1) {\n      this.session.ref();\n      if (!this.keepaliveWithoutCalls) {\n        this.maybeStartKeepalivePingTimer();\n      }\n    }\n  }\n  createCall(metadata, host, method, listener, subchannelCallStatsTracker) {\n    const headers = metadata.toHttp2Headers();\n    headers[HTTP2_HEADER_AUTHORITY] = host;\n    headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;\n    headers[HTTP2_HEADER_CONTENT_TYPE] = 'application/grpc';\n    headers[HTTP2_HEADER_METHOD] = 'POST';\n    headers[HTTP2_HEADER_PATH] = method;\n    headers[HTTP2_HEADER_TE] = 'trailers';\n    let http2Stream;\n    /* In theory, if an error is thrown by session.request because session has\n     * become unusable (e.g. because it has received a goaway), this subchannel\n     * should soon see the corresponding close or goaway event anyway and leave\n     * READY. But we have seen reports that this does not happen\n     * (https://github.com/googleapis/nodejs-firestore/issues/1023#issuecomment-653204096)\n     * so for defense in depth, we just discard the session when we see an\n     * error here.\n     */\n    try {\n      http2Stream = this.session.request(headers);\n    } catch (e) {\n      this.handleDisconnect();\n      throw e;\n    }\n    this.flowControlTrace('local window size: ' + this.session.state.localWindowSize + ' remote window size: ' + this.session.state.remoteWindowSize);\n    this.internalsTrace('session.closed=' + this.session.closed + ' session.destroyed=' + this.session.destroyed + ' session.socket.destroyed=' + this.session.socket.destroyed);\n    let eventTracker;\n    // eslint-disable-next-line prefer-const\n    let call;\n    if (this.channelzEnabled) {\n      this.streamTracker.addCallStarted();\n      eventTracker = {\n        addMessageSent: () => {\n          var _a;\n          this.messagesSent += 1;\n          this.lastMessageSentTimestamp = new Date();\n          (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n        },\n        addMessageReceived: () => {\n          var _a;\n          this.messagesReceived += 1;\n          this.lastMessageReceivedTimestamp = new Date();\n          (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n        },\n        onCallEnd: status => {\n          var _a;\n          (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\n          this.removeActiveCall(call);\n        },\n        onStreamEnd: success => {\n          var _a;\n          if (success) {\n            this.streamTracker.addCallSucceeded();\n          } else {\n            this.streamTracker.addCallFailed();\n          }\n          (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\n        }\n      };\n    } else {\n      eventTracker = {\n        addMessageSent: () => {\n          var _a;\n          (_a = subchannelCallStatsTracker.addMessageSent) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n        },\n        addMessageReceived: () => {\n          var _a;\n          (_a = subchannelCallStatsTracker.addMessageReceived) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker);\n        },\n        onCallEnd: status => {\n          var _a;\n          (_a = subchannelCallStatsTracker.onCallEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, status);\n          this.removeActiveCall(call);\n        },\n        onStreamEnd: success => {\n          var _a;\n          (_a = subchannelCallStatsTracker.onStreamEnd) === null || _a === void 0 ? void 0 : _a.call(subchannelCallStatsTracker, success);\n        }\n      };\n    }\n    call = new subchannel_call_1.Http2SubchannelCall(http2Stream, eventTracker, listener, this, (0, call_number_1.getNextCallNumber)());\n    this.addActiveCall(call);\n    return call;\n  }\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n  getPeerName() {\n    return this.subchannelAddressString;\n  }\n  getOptions() {\n    return this.options;\n  }\n  shutdown() {\n    this.session.close();\n    (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n  }\n}\nclass Http2SubchannelConnector {\n  constructor(channelTarget) {\n    this.channelTarget = channelTarget;\n    this.session = null;\n    this.isShutdown = false;\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, (0, uri_parser_1.uriToString)(this.channelTarget) + ' ' + text);\n  }\n  createSession(address, credentials, options, proxyConnectionResult) {\n    if (this.isShutdown) {\n      return Promise.reject();\n    }\n    return new Promise((resolve, reject) => {\n      var _a, _b, _c;\n      let remoteName;\n      if (proxyConnectionResult.realTarget) {\n        remoteName = (0, uri_parser_1.uriToString)(proxyConnectionResult.realTarget);\n        this.trace('creating HTTP/2 session through proxy to ' + (0, uri_parser_1.uriToString)(proxyConnectionResult.realTarget));\n      } else {\n        remoteName = null;\n        this.trace('creating HTTP/2 session to ' + (0, subchannel_address_1.subchannelAddressToString)(address));\n      }\n      const targetAuthority = (0, resolver_1.getDefaultAuthority)((_a = proxyConnectionResult.realTarget) !== null && _a !== void 0 ? _a : this.channelTarget);\n      let connectionOptions = credentials._getConnectionOptions() || {};\n      connectionOptions.maxSendHeaderBlockLength = Number.MAX_SAFE_INTEGER;\n      if ('grpc-node.max_session_memory' in options) {\n        connectionOptions.maxSessionMemory = options['grpc-node.max_session_memory'];\n      } else {\n        /* By default, set a very large max session memory limit, to effectively\n         * disable enforcement of the limit. Some testing indicates that Node's\n         * behavior degrades badly when this limit is reached, so we solve that\n         * by disabling the check entirely. */\n        connectionOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n      }\n      let addressScheme = 'http://';\n      if ('secureContext' in connectionOptions) {\n        addressScheme = 'https://';\n        // If provided, the value of grpc.ssl_target_name_override should be used\n        // to override the target hostname when checking server identity.\n        // This option is used for testing only.\n        if (options['grpc.ssl_target_name_override']) {\n          const sslTargetNameOverride = options['grpc.ssl_target_name_override'];\n          connectionOptions.checkServerIdentity = (host, cert) => {\n            return (0, tls_1.checkServerIdentity)(sslTargetNameOverride, cert);\n          };\n          connectionOptions.servername = sslTargetNameOverride;\n        } else {\n          const authorityHostname = (_c = (_b = (0, uri_parser_1.splitHostPort)(targetAuthority)) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : 'localhost';\n          // We want to always set servername to support SNI\n          connectionOptions.servername = authorityHostname;\n        }\n        if (proxyConnectionResult.socket) {\n          /* This is part of the workaround for\n           * https://github.com/nodejs/node/issues/32922. Without that bug,\n           * proxyConnectionResult.socket would always be a plaintext socket and\n           * this would say\n           * connectionOptions.socket = proxyConnectionResult.socket; */\n          connectionOptions.createConnection = (authority, option) => {\n            return proxyConnectionResult.socket;\n          };\n        }\n      } else {\n        /* In all but the most recent versions of Node, http2.connect does not use\n         * the options when establishing plaintext connections, so we need to\n         * establish that connection explicitly. */\n        connectionOptions.createConnection = (authority, option) => {\n          if (proxyConnectionResult.socket) {\n            return proxyConnectionResult.socket;\n          } else {\n            /* net.NetConnectOpts is declared in a way that is more restrictive\n             * than what net.connect will actually accept, so we use the type\n             * assertion to work around that. */\n            return net.connect(address);\n          }\n        };\n      }\n      connectionOptions = Object.assign(Object.assign(Object.assign({}, connectionOptions), address), {\n        enableTrace: options['grpc-node.tls_enable_trace'] === 1\n      });\n      /* http2.connect uses the options here:\n       * https://github.com/nodejs/node/blob/70c32a6d190e2b5d7b9ff9d5b6a459d14e8b7d59/lib/internal/http2/core.js#L3028-L3036\n       * The spread operator overides earlier values with later ones, so any port\n       * or host values in the options will be used rather than any values extracted\n       * from the first argument. In addition, the path overrides the host and port,\n       * as documented for plaintext connections here:\n       * https://nodejs.org/api/net.html#net_socket_connect_options_connectlistener\n       * and for TLS connections here:\n       * https://nodejs.org/api/tls.html#tls_tls_connect_options_callback. In\n       * earlier versions of Node, http2.connect passes these options to\n       * tls.connect but not net.connect, so in the insecure case we still need\n       * to set the createConnection option above to create the connection\n       * explicitly. We cannot do that in the TLS case because http2.connect\n       * passes necessary additional options to tls.connect.\n       * The first argument just needs to be parseable as a URL and the scheme\n       * determines whether the connection will be established over TLS or not.\n       */\n      const session = http2.connect(addressScheme + targetAuthority, connectionOptions);\n      this.session = session;\n      let errorMessage = 'Failed to connect';\n      session.unref();\n      session.once('connect', () => {\n        session.removeAllListeners();\n        resolve(new Http2Transport(session, address, options, remoteName));\n        this.session = null;\n      });\n      session.once('close', () => {\n        this.session = null;\n        // Leave time for error event to happen before rejecting\n        setImmediate(() => {\n          reject(`${errorMessage} (${new Date().toISOString()})`);\n        });\n      });\n      session.once('error', error => {\n        errorMessage = error.message;\n        this.trace('connection failed with error ' + errorMessage);\n      });\n    });\n  }\n  connect(address, credentials, options) {\n    var _a, _b;\n    if (this.isShutdown) {\n      return Promise.reject();\n    }\n    /* Pass connection options through to the proxy so that it's able to\n     * upgrade it's connection to support tls if needed.\n     * This is a workaround for https://github.com/nodejs/node/issues/32922\n     * See https://github.com/grpc/grpc-node/pull/1369 for more info. */\n    const connectionOptions = credentials._getConnectionOptions() || {};\n    if ('secureContext' in connectionOptions) {\n      connectionOptions.ALPNProtocols = ['h2'];\n      // If provided, the value of grpc.ssl_target_name_override should be used\n      // to override the target hostname when checking server identity.\n      // This option is used for testing only.\n      if (options['grpc.ssl_target_name_override']) {\n        const sslTargetNameOverride = options['grpc.ssl_target_name_override'];\n        connectionOptions.checkServerIdentity = (host, cert) => {\n          return (0, tls_1.checkServerIdentity)(sslTargetNameOverride, cert);\n        };\n        connectionOptions.servername = sslTargetNameOverride;\n      } else {\n        if ('grpc.http_connect_target' in options) {\n          /* This is more or less how servername will be set in createSession\n           * if a connection is successfully established through the proxy.\n           * If the proxy is not used, these connectionOptions are discarded\n           * anyway */\n          const targetPath = (0, resolver_1.getDefaultAuthority)((_a = (0, uri_parser_1.parseUri)(options['grpc.http_connect_target'])) !== null && _a !== void 0 ? _a : {\n            path: 'localhost'\n          });\n          const hostPort = (0, uri_parser_1.splitHostPort)(targetPath);\n          connectionOptions.servername = (_b = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _b !== void 0 ? _b : targetPath;\n        }\n      }\n      if (options['grpc-node.tls_enable_trace']) {\n        connectionOptions.enableTrace = true;\n      }\n    }\n    return (0, http_proxy_1.getProxiedConnection)(address, options, connectionOptions).then(result => this.createSession(address, credentials, options, result));\n  }\n  shutdown() {\n    var _a;\n    this.isShutdown = true;\n    (_a = this.session) === null || _a === void 0 ? void 0 : _a.close();\n    this.session = null;\n  }\n}\nexports.Http2SubchannelConnector = Http2SubchannelConnector;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getSubchannelPool = exports.SubchannelPool = void 0;\nconst channel_options_1 = require(\"./channel-options\");\nconst subchannel_1 = require(\"./subchannel\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst transport_1 = require(\"./transport\");\n// 10 seconds in milliseconds. This value is arbitrary.\n/**\n * The amount of time in between checks for dropping subchannels that have no\n * other references\n */\nconst REF_CHECK_INTERVAL = 10000;\nclass SubchannelPool {\n  /**\n   * A pool of subchannels use for making connections. Subchannels with the\n   * exact same parameters will be reused.\n   */\n  constructor() {\n    this.pool = Object.create(null);\n    /**\n     * A timer of a task performing a periodic subchannel cleanup.\n     */\n    this.cleanupTimer = null;\n  }\n  /**\n   * Unrefs all unused subchannels and cancels the cleanup task if all\n   * subchannels have been unrefed.\n   */\n  unrefUnusedSubchannels() {\n    let allSubchannelsUnrefed = true;\n    /* These objects are created with Object.create(null), so they do not\n     * have a prototype, which means that for (... in ...) loops over them\n     * do not need to be filtered */\n    // eslint-disable-disable-next-line:forin\n    for (const channelTarget in this.pool) {\n      const subchannelObjArray = this.pool[channelTarget];\n      const refedSubchannels = subchannelObjArray.filter(value => !value.subchannel.unrefIfOneRef());\n      if (refedSubchannels.length > 0) {\n        allSubchannelsUnrefed = false;\n      }\n      /* For each subchannel in the pool, try to unref it if it has\n       * exactly one ref (which is the ref from the pool itself). If that\n       * does happen, remove the subchannel from the pool */\n      this.pool[channelTarget] = refedSubchannels;\n    }\n    /* Currently we do not delete keys with empty values. If that results\n     * in significant memory usage we should change it. */\n    // Cancel the cleanup task if all subchannels have been unrefed.\n    if (allSubchannelsUnrefed && this.cleanupTimer !== null) {\n      clearInterval(this.cleanupTimer);\n      this.cleanupTimer = null;\n    }\n  }\n  /**\n   * Ensures that the cleanup task is spawned.\n   */\n  ensureCleanupTask() {\n    var _a, _b;\n    if (this.cleanupTimer === null) {\n      this.cleanupTimer = setInterval(() => {\n        this.unrefUnusedSubchannels();\n      }, REF_CHECK_INTERVAL);\n      // Unref because this timer should not keep the event loop running.\n      // Call unref only if it exists to address electron/electron#21162\n      (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }\n  /**\n   * Get a subchannel if one already exists with exactly matching parameters.\n   * Otherwise, create and save a subchannel with those parameters.\n   * @param channelTarget\n   * @param subchannelTarget\n   * @param channelArguments\n   * @param channelCredentials\n   */\n  getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials) {\n    this.ensureCleanupTask();\n    const channelTarget = (0, uri_parser_1.uriToString)(channelTargetUri);\n    if (channelTarget in this.pool) {\n      const subchannelObjArray = this.pool[channelTarget];\n      for (const subchannelObj of subchannelObjArray) {\n        if ((0, subchannel_address_1.subchannelAddressEqual)(subchannelTarget, subchannelObj.subchannelAddress) && (0, channel_options_1.channelOptionsEqual)(channelArguments, subchannelObj.channelArguments) && channelCredentials._equals(subchannelObj.channelCredentials)) {\n          return subchannelObj.subchannel;\n        }\n      }\n    }\n    // If we get here, no matching subchannel was found\n    const subchannel = new subchannel_1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials, new transport_1.Http2SubchannelConnector(channelTargetUri));\n    if (!(channelTarget in this.pool)) {\n      this.pool[channelTarget] = [];\n    }\n    this.pool[channelTarget].push({\n      subchannelAddress: subchannelTarget,\n      channelArguments,\n      channelCredentials,\n      subchannel\n    });\n    subchannel.ref();\n    return subchannel;\n  }\n}\nexports.SubchannelPool = SubchannelPool;\nconst globalSubchannelPool = new SubchannelPool();\n/**\n * Get either the global subchannel pool, or a new subchannel pool.\n * @param global\n */\nfunction getSubchannelPool(global) {\n  if (global) {\n    return globalSubchannelPool;\n  } else {\n    return new SubchannelPool();\n  }\n}\nexports.getSubchannelPool = getSubchannelPool;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FilterStackFactory = exports.FilterStack = void 0;\nclass FilterStack {\n  constructor(filters) {\n    this.filters = filters;\n  }\n  sendMetadata(metadata) {\n    let result = metadata;\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMetadata(result);\n    }\n    return result;\n  }\n  receiveMetadata(metadata) {\n    let result = metadata;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMetadata(result);\n    }\n    return result;\n  }\n  sendMessage(message) {\n    let result = message;\n    for (let i = 0; i < this.filters.length; i++) {\n      result = this.filters[i].sendMessage(result);\n    }\n    return result;\n  }\n  receiveMessage(message) {\n    let result = message;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveMessage(result);\n    }\n    return result;\n  }\n  receiveTrailers(status) {\n    let result = status;\n    for (let i = this.filters.length - 1; i >= 0; i--) {\n      result = this.filters[i].receiveTrailers(result);\n    }\n    return result;\n  }\n  push(filters) {\n    this.filters.unshift(...filters);\n  }\n  getFilters() {\n    return this.filters;\n  }\n}\nexports.FilterStack = FilterStack;\nclass FilterStackFactory {\n  constructor(factories) {\n    this.factories = factories;\n  }\n  push(filterFactories) {\n    this.factories.unshift(...filterFactories);\n  }\n  clone() {\n    return new FilterStackFactory([...this.factories]);\n  }\n  createFilter() {\n    return new FilterStack(this.factories.map(factory => factory.createFilter()));\n  }\n}\nexports.FilterStackFactory = FilterStackFactory;\n", "\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompressionAlgorithms = void 0;\nvar CompressionAlgorithms;\n(function (CompressionAlgorithms) {\n  CompressionAlgorithms[CompressionAlgorithms[\"identity\"] = 0] = \"identity\";\n  CompressionAlgorithms[CompressionAlgorithms[\"deflate\"] = 1] = \"deflate\";\n  CompressionAlgorithms[CompressionAlgorithms[\"gzip\"] = 2] = \"gzip\";\n})(CompressionAlgorithms || (exports.CompressionAlgorithms = CompressionAlgorithms = {}));\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseFilter = void 0;\nclass BaseFilter {\n  async sendMetadata(metadata) {\n    return metadata;\n  }\n  receiveMetadata(metadata) {\n    return metadata;\n  }\n  async sendMessage(message) {\n    return message;\n  }\n  async receiveMessage(message) {\n    return message;\n  }\n  receiveTrailers(status) {\n    return status;\n  }\n}\nexports.BaseFilter = BaseFilter;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CompressionFilterFactory = exports.CompressionFilter = void 0;\nconst zlib = require(\"zlib\");\nconst compression_algorithms_1 = require(\"./compression-algorithms\");\nconst constants_1 = require(\"./constants\");\nconst filter_1 = require(\"./filter\");\nconst logging = require(\"./logging\");\nconst isCompressionAlgorithmKey = key => {\n  return typeof key === 'number' && typeof compression_algorithms_1.CompressionAlgorithms[key] === 'string';\n};\nclass CompressionHandler {\n  /**\n   * @param message Raw uncompressed message bytes\n   * @param compress Indicates whether the message should be compressed\n   * @return Framed message, compressed if applicable\n   */\n  async writeMessage(message, compress) {\n    let messageBuffer = message;\n    if (compress) {\n      messageBuffer = await this.compressMessage(messageBuffer);\n    }\n    const output = Buffer.allocUnsafe(messageBuffer.length + 5);\n    output.writeUInt8(compress ? 1 : 0, 0);\n    output.writeUInt32BE(messageBuffer.length, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n  /**\n   * @param data Framed message, possibly compressed\n   * @return Uncompressed message\n   */\n  async readMessage(data) {\n    const compressed = data.readUInt8(0) === 1;\n    let messageBuffer = data.slice(5);\n    if (compressed) {\n      messageBuffer = await this.decompressMessage(messageBuffer);\n    }\n    return messageBuffer;\n  }\n}\nclass IdentityHandler extends CompressionHandler {\n  async compressMessage(message) {\n    return message;\n  }\n  async writeMessage(message, compress) {\n    const output = Buffer.allocUnsafe(message.length + 5);\n    /* With \"identity\" compression, messages should always be marked as\n     * uncompressed */\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(message.length, 1);\n    message.copy(output, 5);\n    return output;\n  }\n  decompressMessage(message) {\n    return Promise.reject(new Error('Received compressed message but \"grpc-encoding\" header was identity'));\n  }\n}\nclass DeflateHandler extends CompressionHandler {\n  constructor(maxRecvMessageLength) {\n    super();\n    this.maxRecvMessageLength = maxRecvMessageLength;\n  }\n  compressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.deflate(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n  decompressMessage(message) {\n    return new Promise((resolve, reject) => {\n      let totalLength = 0;\n      const messageParts = [];\n      const decompresser = zlib.createInflate();\n      decompresser.on('data', chunk => {\n        messageParts.push(chunk);\n        totalLength += chunk.byteLength;\n        if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n          decompresser.destroy();\n          reject({\n            code: constants_1.Status.RESOURCE_EXHAUSTED,\n            details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n          });\n        }\n      });\n      decompresser.on('end', () => {\n        resolve(Buffer.concat(messageParts));\n      });\n      decompresser.write(message);\n      decompresser.end();\n    });\n  }\n}\nclass GzipHandler extends CompressionHandler {\n  constructor(maxRecvMessageLength) {\n    super();\n    this.maxRecvMessageLength = maxRecvMessageLength;\n  }\n  compressMessage(message) {\n    return new Promise((resolve, reject) => {\n      zlib.gzip(message, (err, output) => {\n        if (err) {\n          reject(err);\n        } else {\n          resolve(output);\n        }\n      });\n    });\n  }\n  decompressMessage(message) {\n    return new Promise((resolve, reject) => {\n      let totalLength = 0;\n      const messageParts = [];\n      const decompresser = zlib.createGunzip();\n      decompresser.on('data', chunk => {\n        messageParts.push(chunk);\n        totalLength += chunk.byteLength;\n        if (this.maxRecvMessageLength !== -1 && totalLength > this.maxRecvMessageLength) {\n          decompresser.destroy();\n          reject({\n            code: constants_1.Status.RESOURCE_EXHAUSTED,\n            details: `Received message that decompresses to a size larger than ${this.maxRecvMessageLength}`\n          });\n        }\n      });\n      decompresser.on('end', () => {\n        resolve(Buffer.concat(messageParts));\n      });\n      decompresser.write(message);\n      decompresser.end();\n    });\n  }\n}\nclass UnknownHandler extends CompressionHandler {\n  constructor(compressionName) {\n    super();\n    this.compressionName = compressionName;\n  }\n  compressMessage(message) {\n    return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));\n  }\n  decompressMessage(message) {\n    // This should be unreachable\n    return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));\n  }\n}\nfunction getCompressionHandler(compressionName, maxReceiveMessageSize) {\n  switch (compressionName) {\n    case 'identity':\n      return new IdentityHandler();\n    case 'deflate':\n      return new DeflateHandler(maxReceiveMessageSize);\n    case 'gzip':\n      return new GzipHandler(maxReceiveMessageSize);\n    default:\n      return new UnknownHandler(compressionName);\n  }\n}\nclass CompressionFilter extends filter_1.BaseFilter {\n  constructor(channelOptions, sharedFilterConfig) {\n    var _a, _b;\n    super();\n    this.sharedFilterConfig = sharedFilterConfig;\n    this.sendCompression = new IdentityHandler();\n    this.receiveCompression = new IdentityHandler();\n    this.currentCompressionAlgorithm = 'identity';\n    const compressionAlgorithmKey = channelOptions['grpc.default_compression_algorithm'];\n    this.maxReceiveMessageLength = (_a = channelOptions['grpc.max_receive_message_length']) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n    if (compressionAlgorithmKey !== undefined) {\n      if (isCompressionAlgorithmKey(compressionAlgorithmKey)) {\n        const clientSelectedEncoding = compression_algorithms_1.CompressionAlgorithms[compressionAlgorithmKey];\n        const serverSupportedEncodings = (_b = sharedFilterConfig.serverSupportedEncodingHeader) === null || _b === void 0 ? void 0 : _b.split(',');\n        /**\n         * There are two possible situations here:\n         * 1) We don't have any info yet from the server about what compression it supports\n         *    In that case we should just use what the client tells us to use\n         * 2) We've previously received a response from the server including a grpc-accept-encoding header\n         *    In that case we only want to use the encoding chosen by the client if the server supports it\n         */\n        if (!serverSupportedEncodings || serverSupportedEncodings.includes(clientSelectedEncoding)) {\n          this.currentCompressionAlgorithm = clientSelectedEncoding;\n          this.sendCompression = getCompressionHandler(this.currentCompressionAlgorithm, -1);\n        }\n      } else {\n        logging.log(constants_1.LogVerbosity.ERROR, `Invalid value provided for grpc.default_compression_algorithm option: ${compressionAlgorithmKey}`);\n      }\n    }\n  }\n  async sendMetadata(metadata) {\n    const headers = await metadata;\n    headers.set('grpc-accept-encoding', 'identity,deflate,gzip');\n    headers.set('accept-encoding', 'identity');\n    // No need to send the header if it's \"identity\" -  behavior is identical; save the bandwidth\n    if (this.currentCompressionAlgorithm === 'identity') {\n      headers.remove('grpc-encoding');\n    } else {\n      headers.set('grpc-encoding', this.currentCompressionAlgorithm);\n    }\n    return headers;\n  }\n  receiveMetadata(metadata) {\n    const receiveEncoding = metadata.get('grpc-encoding');\n    if (receiveEncoding.length > 0) {\n      const encoding = receiveEncoding[0];\n      if (typeof encoding === 'string') {\n        this.receiveCompression = getCompressionHandler(encoding, this.maxReceiveMessageLength);\n      }\n    }\n    metadata.remove('grpc-encoding');\n    /* Check to see if the compression we're using to send messages is supported by the server\n     * If not, reset the sendCompression filter and have it use the default IdentityHandler */\n    const serverSupportedEncodingsHeader = metadata.get('grpc-accept-encoding')[0];\n    if (serverSupportedEncodingsHeader) {\n      this.sharedFilterConfig.serverSupportedEncodingHeader = serverSupportedEncodingsHeader;\n      const serverSupportedEncodings = serverSupportedEncodingsHeader.split(',');\n      if (!serverSupportedEncodings.includes(this.currentCompressionAlgorithm)) {\n        this.sendCompression = new IdentityHandler();\n        this.currentCompressionAlgorithm = 'identity';\n      }\n    }\n    metadata.remove('grpc-accept-encoding');\n    return metadata;\n  }\n  async sendMessage(message) {\n    var _a;\n    /* This filter is special. The input message is the bare message bytes,\n     * and the output is a framed and possibly compressed message. For this\n     * reason, this filter should be at the bottom of the filter stack */\n    const resolvedMessage = await message;\n    let compress;\n    if (this.sendCompression instanceof IdentityHandler) {\n      compress = false;\n    } else {\n      compress = (((_a = resolvedMessage.flags) !== null && _a !== void 0 ? _a : 0) & 2 /* WriteFlags.NoCompress */) === 0;\n    }\n    return {\n      message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),\n      flags: resolvedMessage.flags\n    };\n  }\n  async receiveMessage(message) {\n    /* This filter is also special. The input message is framed and possibly\n     * compressed, and the output message is deframed and uncompressed. So\n     * this is another reason that this filter should be at the bottom of the\n     * filter stack. */\n    return this.receiveCompression.readMessage(await message);\n  }\n}\nexports.CompressionFilter = CompressionFilter;\nclass CompressionFilterFactory {\n  constructor(channel, options) {\n    this.options = options;\n    this.sharedFilterConfig = {};\n  }\n  createFilter() {\n    return new CompressionFilter(this.options, this.sharedFilterConfig);\n  }\n}\nexports.CompressionFilterFactory = CompressionFilterFactory;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deadlineToString = exports.getRelativeTimeout = exports.getDeadlineTimeoutString = exports.minDeadline = void 0;\nfunction minDeadline(...deadlineList) {\n  let minValue = Infinity;\n  for (const deadline of deadlineList) {\n    const deadlineMsecs = deadline instanceof Date ? deadline.getTime() : deadline;\n    if (deadlineMsecs < minValue) {\n      minValue = deadlineMsecs;\n    }\n  }\n  return minValue;\n}\nexports.minDeadline = minDeadline;\nconst units = [['m', 1], ['S', 1000], ['M', 60 * 1000], ['H', 60 * 60 * 1000]];\nfunction getDeadlineTimeoutString(deadline) {\n  const now = new Date().getTime();\n  if (deadline instanceof Date) {\n    deadline = deadline.getTime();\n  }\n  const timeoutMs = Math.max(deadline - now, 0);\n  for (const [unit, factor] of units) {\n    const amount = timeoutMs / factor;\n    if (amount < 1e8) {\n      return String(Math.ceil(amount)) + unit;\n    }\n  }\n  throw new Error('Deadline is too far in the future');\n}\nexports.getDeadlineTimeoutString = getDeadlineTimeoutString;\n/**\n * See https://nodejs.org/api/timers.html#settimeoutcallback-delay-args\n * In particular, \"When delay is larger than 2147483647 or less than 1, the\n * delay will be set to 1. Non-integer delays are truncated to an integer.\"\n * This number of milliseconds is almost 25 days.\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\n/**\n * Get the timeout value that should be passed to setTimeout now for the timer\n * to end at the deadline. For any deadline before now, the timer should end\n * immediately, represented by a value of 0. For any deadline more than\n * MAX_TIMEOUT_TIME milliseconds in the future, a timer cannot be set that will\n * end at that time, so it is treated as infinitely far in the future.\n * @param deadline\n * @returns\n */\nfunction getRelativeTimeout(deadline) {\n  const deadlineMs = deadline instanceof Date ? deadline.getTime() : deadline;\n  const now = new Date().getTime();\n  const timeout = deadlineMs - now;\n  if (timeout < 0) {\n    return 0;\n  } else if (timeout > MAX_TIMEOUT_TIME) {\n    return Infinity;\n  } else {\n    return timeout;\n  }\n}\nexports.getRelativeTimeout = getRelativeTimeout;\nfunction deadlineToString(deadline) {\n  if (deadline instanceof Date) {\n    return deadline.toISOString();\n  } else {\n    const dateDeadline = new Date(deadline);\n    if (Number.isNaN(dateDeadline.getTime())) {\n      return '' + deadline;\n    } else {\n      return dateDeadline.toISOString();\n    }\n  }\n}\nexports.deadlineToString = deadlineToString;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.restrictControlPlaneStatusCode = void 0;\nconst constants_1 = require(\"./constants\");\nconst INAPPROPRIATE_CONTROL_PLANE_CODES = [constants_1.Status.OK, constants_1.Status.INVALID_ARGUMENT, constants_1.Status.NOT_FOUND, constants_1.Status.ALREADY_EXISTS, constants_1.Status.FAILED_PRECONDITION, constants_1.Status.ABORTED, constants_1.Status.OUT_OF_RANGE, constants_1.Status.DATA_LOSS];\nfunction restrictControlPlaneStatusCode(code, details) {\n  if (INAPPROPRIATE_CONTROL_PLANE_CODES.includes(code)) {\n    return {\n      code: constants_1.Status.INTERNAL,\n      details: `Invalid status from control plane: ${code} ${constants_1.Status[code]} ${details}`\n    };\n  } else {\n    return {\n      code,\n      details\n    };\n  }\n}\nexports.restrictControlPlaneStatusCode = restrictControlPlaneStatusCode;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoadBalancingCall = void 0;\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst deadline_1 = require(\"./deadline\");\nconst metadata_1 = require(\"./metadata\");\nconst picker_1 = require(\"./picker\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst logging = require(\"./logging\");\nconst control_plane_status_1 = require(\"./control-plane-status\");\nconst http2 = require(\"http2\");\nconst TRACER_NAME = 'load_balancing_call';\nclass LoadBalancingCall {\n  constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber) {\n    var _a, _b;\n    this.channel = channel;\n    this.callConfig = callConfig;\n    this.methodName = methodName;\n    this.host = host;\n    this.credentials = credentials;\n    this.deadline = deadline;\n    this.callNumber = callNumber;\n    this.child = null;\n    this.readPending = false;\n    this.pendingMessage = null;\n    this.pendingHalfClose = false;\n    this.ended = false;\n    this.metadata = null;\n    this.listener = null;\n    this.onCallEnded = null;\n    const splitPath = this.methodName.split('/');\n    let serviceName = '';\n    /* The standard path format is \"/{serviceName}/{methodName}\", so if we split\n     * by '/', the first item should be empty and the second should be the\n     * service name */\n    if (splitPath.length >= 2) {\n      serviceName = splitPath[1];\n    }\n    const hostname = (_b = (_a = (0, uri_parser_1.splitHostPort)(this.host)) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : 'localhost';\n    /* Currently, call credentials are only allowed on HTTPS connections, so we\n     * can assume that the scheme is \"https\" */\n    this.serviceUrl = `https://${hostname}/${serviceName}`;\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  outputStatus(status, progress) {\n    var _a, _b;\n    if (!this.ended) {\n      this.ended = true;\n      this.trace('ended with status: code=' + status.code + ' details=\"' + status.details + '\"');\n      const finalStatus = Object.assign(Object.assign({}, status), {\n        progress\n      });\n      (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(finalStatus);\n      (_b = this.onCallEnded) === null || _b === void 0 ? void 0 : _b.call(this, finalStatus.code);\n    }\n  }\n  doPick() {\n    var _a, _b;\n    if (this.ended) {\n      return;\n    }\n    if (!this.metadata) {\n      throw new Error('doPick called before start');\n    }\n    this.trace('Pick called');\n    const pickResult = this.channel.doPick(this.metadata, this.callConfig.pickInformation);\n    const subchannelString = pickResult.subchannel ? '(' + pickResult.subchannel.getChannelzRef().id + ') ' + pickResult.subchannel.getAddress() : '' + pickResult.subchannel;\n    this.trace('Pick result: ' + picker_1.PickResultType[pickResult.pickResultType] + ' subchannel: ' + subchannelString + ' status: ' + ((_a = pickResult.status) === null || _a === void 0 ? void 0 : _a.code) + ' ' + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.details));\n    switch (pickResult.pickResultType) {\n      case picker_1.PickResultType.COMPLETE:\n        this.credentials.generateMetadata({\n          service_url: this.serviceUrl\n        }).then(credsMetadata => {\n          var _a, _b, _c;\n          /* If this call was cancelled (e.g. by the deadline) before\n           * metadata generation finished, we shouldn't do anything with\n           * it. */\n          if (this.ended) {\n            this.trace('Credentials metadata generation finished after call ended');\n            return;\n          }\n          const finalMetadata = this.metadata.clone();\n          finalMetadata.merge(credsMetadata);\n          if (finalMetadata.get('authorization').length > 1) {\n            this.outputStatus({\n              code: constants_1.Status.INTERNAL,\n              details: '\"authorization\" metadata cannot have multiple values',\n              metadata: new metadata_1.Metadata()\n            }, 'PROCESSED');\n          }\n          if (pickResult.subchannel.getConnectivityState() !== connectivity_state_1.ConnectivityState.READY) {\n            this.trace('Picked subchannel ' + subchannelString + ' has state ' + connectivity_state_1.ConnectivityState[pickResult.subchannel.getConnectivityState()] + ' after getting credentials metadata. Retrying pick');\n            this.doPick();\n            return;\n          }\n          if (this.deadline !== Infinity) {\n            finalMetadata.set('grpc-timeout', (0, deadline_1.getDeadlineTimeoutString)(this.deadline));\n          }\n          try {\n            this.child = pickResult.subchannel.getRealSubchannel().createCall(finalMetadata, this.host, this.methodName, {\n              onReceiveMetadata: metadata => {\n                this.trace('Received metadata');\n                this.listener.onReceiveMetadata(metadata);\n              },\n              onReceiveMessage: message => {\n                this.trace('Received message');\n                this.listener.onReceiveMessage(message);\n              },\n              onReceiveStatus: status => {\n                this.trace('Received status');\n                if (status.rstCode === http2.constants.NGHTTP2_REFUSED_STREAM) {\n                  this.outputStatus(status, 'REFUSED');\n                } else {\n                  this.outputStatus(status, 'PROCESSED');\n                }\n              }\n            });\n          } catch (error) {\n            this.trace('Failed to start call on picked subchannel ' + subchannelString + ' with error ' + error.message);\n            this.outputStatus({\n              code: constants_1.Status.INTERNAL,\n              details: 'Failed to start HTTP/2 stream with error ' + error.message,\n              metadata: new metadata_1.Metadata()\n            }, 'NOT_STARTED');\n            return;\n          }\n          (_b = (_a = this.callConfig).onCommitted) === null || _b === void 0 ? void 0 : _b.call(_a);\n          (_c = pickResult.onCallStarted) === null || _c === void 0 ? void 0 : _c.call(pickResult);\n          this.onCallEnded = pickResult.onCallEnded;\n          this.trace('Created child call [' + this.child.getCallNumber() + ']');\n          if (this.readPending) {\n            this.child.startRead();\n          }\n          if (this.pendingMessage) {\n            this.child.sendMessageWithContext(this.pendingMessage.context, this.pendingMessage.message);\n          }\n          if (this.pendingHalfClose) {\n            this.child.halfClose();\n          }\n        }, error => {\n          // We assume the error code isn't 0 (Status.OK)\n          const {\n            code,\n            details\n          } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(typeof error.code === 'number' ? error.code : constants_1.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error.message}`);\n          this.outputStatus({\n            code: code,\n            details: details,\n            metadata: new metadata_1.Metadata()\n          }, 'PROCESSED');\n        });\n        break;\n      case picker_1.PickResultType.DROP:\n        const {\n          code,\n          details\n        } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n        setImmediate(() => {\n          this.outputStatus({\n            code,\n            details,\n            metadata: pickResult.status.metadata\n          }, 'DROP');\n        });\n        break;\n      case picker_1.PickResultType.TRANSIENT_FAILURE:\n        if (this.metadata.getOptions().waitForReady) {\n          this.channel.queueCallForPick(this);\n        } else {\n          const {\n            code,\n            details\n          } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(pickResult.status.code, pickResult.status.details);\n          setImmediate(() => {\n            this.outputStatus({\n              code,\n              details,\n              metadata: pickResult.status.metadata\n            }, 'PROCESSED');\n          });\n        }\n        break;\n      case picker_1.PickResultType.QUEUE:\n        this.channel.queueCallForPick(this);\n    }\n  }\n  cancelWithStatus(status, details) {\n    var _a;\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\n    this.outputStatus({\n      code: status,\n      details: details,\n      metadata: new metadata_1.Metadata()\n    }, 'PROCESSED');\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n  }\n  start(metadata, listener) {\n    this.trace('start called');\n    this.listener = listener;\n    this.metadata = metadata;\n    this.doPick();\n  }\n  sendMessageWithContext(context, message) {\n    this.trace('write() called with message of length ' + message.length);\n    if (this.child) {\n      this.child.sendMessageWithContext(context, message);\n    } else {\n      this.pendingMessage = {\n        context,\n        message\n      };\n    }\n  }\n  startRead() {\n    this.trace('startRead called');\n    if (this.child) {\n      this.child.startRead();\n    } else {\n      this.readPending = true;\n    }\n  }\n  halfClose() {\n    this.trace('halfClose called');\n    if (this.child) {\n      this.child.halfClose();\n    } else {\n      this.pendingHalfClose = true;\n    }\n  }\n  setCredentials(credentials) {\n    throw new Error('Method not implemented.');\n  }\n  getCallNumber() {\n    return this.callNumber;\n  }\n}\nexports.LoadBalancingCall = LoadBalancingCall;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ResolvingCall = void 0;\nconst constants_1 = require(\"./constants\");\nconst deadline_1 = require(\"./deadline\");\nconst metadata_1 = require(\"./metadata\");\nconst logging = require(\"./logging\");\nconst control_plane_status_1 = require(\"./control-plane-status\");\nconst TRACER_NAME = 'resolving_call';\nclass ResolvingCall {\n  constructor(channel, method, options, filterStackFactory, credentials, callNumber) {\n    this.channel = channel;\n    this.method = method;\n    this.filterStackFactory = filterStackFactory;\n    this.credentials = credentials;\n    this.callNumber = callNumber;\n    this.child = null;\n    this.readPending = false;\n    this.pendingMessage = null;\n    this.pendingHalfClose = false;\n    this.ended = false;\n    this.readFilterPending = false;\n    this.writeFilterPending = false;\n    this.pendingChildStatus = null;\n    this.metadata = null;\n    this.listener = null;\n    this.statusWatchers = [];\n    this.deadlineTimer = setTimeout(() => {}, 0);\n    this.filterStack = null;\n    this.deadline = options.deadline;\n    this.host = options.host;\n    if (options.parentCall) {\n      if (options.flags & constants_1.Propagate.CANCELLATION) {\n        options.parentCall.on('cancelled', () => {\n          this.cancelWithStatus(constants_1.Status.CANCELLED, 'Cancelled by parent call');\n        });\n      }\n      if (options.flags & constants_1.Propagate.DEADLINE) {\n        this.trace('Propagating deadline from parent: ' + options.parentCall.getDeadline());\n        this.deadline = (0, deadline_1.minDeadline)(this.deadline, options.parentCall.getDeadline());\n      }\n    }\n    this.trace('Created');\n    this.runDeadlineTimer();\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  runDeadlineTimer() {\n    clearTimeout(this.deadlineTimer);\n    this.trace('Deadline: ' + (0, deadline_1.deadlineToString)(this.deadline));\n    const timeout = (0, deadline_1.getRelativeTimeout)(this.deadline);\n    if (timeout !== Infinity) {\n      this.trace('Deadline will be reached in ' + timeout + 'ms');\n      const handleDeadline = () => {\n        this.cancelWithStatus(constants_1.Status.DEADLINE_EXCEEDED, 'Deadline exceeded');\n      };\n      if (timeout <= 0) {\n        process.nextTick(handleDeadline);\n      } else {\n        this.deadlineTimer = setTimeout(handleDeadline, timeout);\n      }\n    }\n  }\n  outputStatus(status) {\n    if (!this.ended) {\n      this.ended = true;\n      if (!this.filterStack) {\n        this.filterStack = this.filterStackFactory.createFilter();\n      }\n      clearTimeout(this.deadlineTimer);\n      const filteredStatus = this.filterStack.receiveTrailers(status);\n      this.trace('ended with status: code=' + filteredStatus.code + ' details=\"' + filteredStatus.details + '\"');\n      this.statusWatchers.forEach(watcher => watcher(filteredStatus));\n      process.nextTick(() => {\n        var _a;\n        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);\n      });\n    }\n  }\n  sendMessageOnChild(context, message) {\n    if (!this.child) {\n      throw new Error('sendMessageonChild called with child not populated');\n    }\n    const child = this.child;\n    this.writeFilterPending = true;\n    this.filterStack.sendMessage(Promise.resolve({\n      message: message,\n      flags: context.flags\n    })).then(filteredMessage => {\n      this.writeFilterPending = false;\n      child.sendMessageWithContext(context, filteredMessage.message);\n      if (this.pendingHalfClose) {\n        child.halfClose();\n      }\n    }, status => {\n      this.cancelWithStatus(status.code, status.details);\n    });\n  }\n  getConfig() {\n    if (this.ended) {\n      return;\n    }\n    if (!this.metadata || !this.listener) {\n      throw new Error('getConfig called before start');\n    }\n    const configResult = this.channel.getConfig(this.method, this.metadata);\n    if (configResult.type === 'NONE') {\n      this.channel.queueCallForConfig(this);\n      return;\n    } else if (configResult.type === 'ERROR') {\n      if (this.metadata.getOptions().waitForReady) {\n        this.channel.queueCallForConfig(this);\n      } else {\n        this.outputStatus(configResult.error);\n      }\n      return;\n    }\n    // configResult.type === 'SUCCESS'\n    const config = configResult.config;\n    if (config.status !== constants_1.Status.OK) {\n      const {\n        code,\n        details\n      } = (0, control_plane_status_1.restrictControlPlaneStatusCode)(config.status, 'Failed to route call to method ' + this.method);\n      this.outputStatus({\n        code: code,\n        details: details,\n        metadata: new metadata_1.Metadata()\n      });\n      return;\n    }\n    if (config.methodConfig.timeout) {\n      const configDeadline = new Date();\n      configDeadline.setSeconds(configDeadline.getSeconds() + config.methodConfig.timeout.seconds);\n      configDeadline.setMilliseconds(configDeadline.getMilliseconds() + config.methodConfig.timeout.nanos / 1000000);\n      this.deadline = (0, deadline_1.minDeadline)(this.deadline, configDeadline);\n      this.runDeadlineTimer();\n    }\n    this.filterStackFactory.push(config.dynamicFilterFactories);\n    this.filterStack = this.filterStackFactory.createFilter();\n    this.filterStack.sendMetadata(Promise.resolve(this.metadata)).then(filteredMetadata => {\n      this.child = this.channel.createInnerCall(config, this.method, this.host, this.credentials, this.deadline);\n      this.trace('Created child [' + this.child.getCallNumber() + ']');\n      this.child.start(filteredMetadata, {\n        onReceiveMetadata: metadata => {\n          this.trace('Received metadata');\n          this.listener.onReceiveMetadata(this.filterStack.receiveMetadata(metadata));\n        },\n        onReceiveMessage: message => {\n          this.trace('Received message');\n          this.readFilterPending = true;\n          this.filterStack.receiveMessage(message).then(filteredMesssage => {\n            this.trace('Finished filtering received message');\n            this.readFilterPending = false;\n            this.listener.onReceiveMessage(filteredMesssage);\n            if (this.pendingChildStatus) {\n              this.outputStatus(this.pendingChildStatus);\n            }\n          }, status => {\n            this.cancelWithStatus(status.code, status.details);\n          });\n        },\n        onReceiveStatus: status => {\n          this.trace('Received status');\n          if (this.readFilterPending) {\n            this.pendingChildStatus = status;\n          } else {\n            this.outputStatus(status);\n          }\n        }\n      });\n      if (this.readPending) {\n        this.child.startRead();\n      }\n      if (this.pendingMessage) {\n        this.sendMessageOnChild(this.pendingMessage.context, this.pendingMessage.message);\n      } else if (this.pendingHalfClose) {\n        this.child.halfClose();\n      }\n    }, status => {\n      this.outputStatus(status);\n    });\n  }\n  reportResolverError(status) {\n    var _a;\n    if ((_a = this.metadata) === null || _a === void 0 ? void 0 : _a.getOptions().waitForReady) {\n      this.channel.queueCallForConfig(this);\n    } else {\n      this.outputStatus(status);\n    }\n  }\n  cancelWithStatus(status, details) {\n    var _a;\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    (_a = this.child) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(status, details);\n    this.outputStatus({\n      code: status,\n      details: details,\n      metadata: new metadata_1.Metadata()\n    });\n  }\n  getPeer() {\n    var _a, _b;\n    return (_b = (_a = this.child) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : this.channel.getTarget();\n  }\n  start(metadata, listener) {\n    this.trace('start called');\n    this.metadata = metadata.clone();\n    this.listener = listener;\n    this.getConfig();\n  }\n  sendMessageWithContext(context, message) {\n    this.trace('write() called with message of length ' + message.length);\n    if (this.child) {\n      this.sendMessageOnChild(context, message);\n    } else {\n      this.pendingMessage = {\n        context,\n        message\n      };\n    }\n  }\n  startRead() {\n    this.trace('startRead called');\n    if (this.child) {\n      this.child.startRead();\n    } else {\n      this.readPending = true;\n    }\n  }\n  halfClose() {\n    this.trace('halfClose called');\n    if (this.child && !this.writeFilterPending) {\n      this.child.halfClose();\n    } else {\n      this.pendingHalfClose = true;\n    }\n  }\n  setCredentials(credentials) {\n    this.credentials = this.credentials.compose(credentials);\n  }\n  addStatusWatcher(watcher) {\n    this.statusWatchers.push(watcher);\n  }\n  getCallNumber() {\n    return this.callNumber;\n  }\n}\nexports.ResolvingCall = ResolvingCall;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.RetryingCall = exports.MessageBufferTracker = exports.RetryThrottler = void 0;\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'retrying_call';\nclass RetryThrottler {\n  constructor(maxTokens, tokenRatio, previousRetryThrottler) {\n    this.maxTokens = maxTokens;\n    this.tokenRatio = tokenRatio;\n    if (previousRetryThrottler) {\n      /* When carrying over tokens from a previous config, rescale them to the\n       * new max value */\n      this.tokens = previousRetryThrottler.tokens * (maxTokens / previousRetryThrottler.maxTokens);\n    } else {\n      this.tokens = maxTokens;\n    }\n  }\n  addCallSucceeded() {\n    this.tokens = Math.max(this.tokens + this.tokenRatio, this.maxTokens);\n  }\n  addCallFailed() {\n    this.tokens = Math.min(this.tokens - 1, 0);\n  }\n  canRetryCall() {\n    return this.tokens > this.maxTokens / 2;\n  }\n}\nexports.RetryThrottler = RetryThrottler;\nclass MessageBufferTracker {\n  constructor(totalLimit, limitPerCall) {\n    this.totalLimit = totalLimit;\n    this.limitPerCall = limitPerCall;\n    this.totalAllocated = 0;\n    this.allocatedPerCall = new Map();\n  }\n  allocate(size, callId) {\n    var _a;\n    const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n    if (this.limitPerCall - currentPerCall < size || this.totalLimit - this.totalAllocated < size) {\n      return false;\n    }\n    this.allocatedPerCall.set(callId, currentPerCall + size);\n    this.totalAllocated += size;\n    return true;\n  }\n  free(size, callId) {\n    var _a;\n    if (this.totalAllocated < size) {\n      throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > total allocated ${this.totalAllocated}`);\n    }\n    this.totalAllocated -= size;\n    const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n    if (currentPerCall < size) {\n      throw new Error(`Invalid buffer allocation state: call ${callId} freed ${size} > allocated for call ${currentPerCall}`);\n    }\n    this.allocatedPerCall.set(callId, currentPerCall - size);\n  }\n  freeAll(callId) {\n    var _a;\n    const currentPerCall = (_a = this.allocatedPerCall.get(callId)) !== null && _a !== void 0 ? _a : 0;\n    if (this.totalAllocated < currentPerCall) {\n      throw new Error(`Invalid buffer allocation state: call ${callId} allocated ${currentPerCall} > total allocated ${this.totalAllocated}`);\n    }\n    this.totalAllocated -= currentPerCall;\n    this.allocatedPerCall.delete(callId);\n  }\n}\nexports.MessageBufferTracker = MessageBufferTracker;\nconst PREVIONS_RPC_ATTEMPTS_METADATA_KEY = 'grpc-previous-rpc-attempts';\nclass RetryingCall {\n  constructor(channel, callConfig, methodName, host, credentials, deadline, callNumber, bufferTracker, retryThrottler) {\n    this.channel = channel;\n    this.callConfig = callConfig;\n    this.methodName = methodName;\n    this.host = host;\n    this.credentials = credentials;\n    this.deadline = deadline;\n    this.callNumber = callNumber;\n    this.bufferTracker = bufferTracker;\n    this.retryThrottler = retryThrottler;\n    this.listener = null;\n    this.initialMetadata = null;\n    this.underlyingCalls = [];\n    this.writeBuffer = [];\n    /**\n     * The offset of message indices in the writeBuffer. For example, if\n     * writeBufferOffset is 10, message 10 is in writeBuffer[0] and message 15\n     * is in writeBuffer[5].\n     */\n    this.writeBufferOffset = 0;\n    /**\n     * Tracks whether a read has been started, so that we know whether to start\n     * reads on new child calls. This only matters for the first read, because\n     * once a message comes in the child call becomes committed and there will\n     * be no new child calls.\n     */\n    this.readStarted = false;\n    this.transparentRetryUsed = false;\n    /**\n     * Number of attempts so far\n     */\n    this.attempts = 0;\n    this.hedgingTimer = null;\n    this.committedCallIndex = null;\n    this.initialRetryBackoffSec = 0;\n    this.nextRetryBackoffSec = 0;\n    if (callConfig.methodConfig.retryPolicy) {\n      this.state = 'RETRY';\n      const retryPolicy = callConfig.methodConfig.retryPolicy;\n      this.nextRetryBackoffSec = this.initialRetryBackoffSec = Number(retryPolicy.initialBackoff.substring(0, retryPolicy.initialBackoff.length - 1));\n    } else if (callConfig.methodConfig.hedgingPolicy) {\n      this.state = 'HEDGING';\n    } else {\n      this.state = 'TRANSPARENT_ONLY';\n    }\n  }\n  getCallNumber() {\n    return this.callNumber;\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '[' + this.callNumber + '] ' + text);\n  }\n  reportStatus(statusObject) {\n    this.trace('ended with status: code=' + statusObject.code + ' details=\"' + statusObject.details + '\"');\n    this.bufferTracker.freeAll(this.callNumber);\n    this.writeBufferOffset = this.writeBufferOffset + this.writeBuffer.length;\n    this.writeBuffer = [];\n    process.nextTick(() => {\n      var _a;\n      // Explicitly construct status object to remove progress field\n      (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus({\n        code: statusObject.code,\n        details: statusObject.details,\n        metadata: statusObject.metadata\n      });\n    });\n  }\n  cancelWithStatus(status, details) {\n    this.trace('cancelWithStatus code: ' + status + ' details: \"' + details + '\"');\n    this.reportStatus({\n      code: status,\n      details,\n      metadata: new metadata_1.Metadata()\n    });\n    for (const {\n      call\n    } of this.underlyingCalls) {\n      call.cancelWithStatus(status, details);\n    }\n  }\n  getPeer() {\n    if (this.committedCallIndex !== null) {\n      return this.underlyingCalls[this.committedCallIndex].call.getPeer();\n    } else {\n      return 'unknown';\n    }\n  }\n  getBufferEntry(messageIndex) {\n    var _a;\n    return (_a = this.writeBuffer[messageIndex - this.writeBufferOffset]) !== null && _a !== void 0 ? _a : {\n      entryType: 'FREED',\n      allocated: false\n    };\n  }\n  getNextBufferIndex() {\n    return this.writeBufferOffset + this.writeBuffer.length;\n  }\n  clearSentMessages() {\n    if (this.state !== 'COMMITTED') {\n      return;\n    }\n    const earliestNeededMessageIndex = this.underlyingCalls[this.committedCallIndex].nextMessageToSend;\n    for (let messageIndex = this.writeBufferOffset; messageIndex < earliestNeededMessageIndex; messageIndex++) {\n      const bufferEntry = this.getBufferEntry(messageIndex);\n      if (bufferEntry.allocated) {\n        this.bufferTracker.free(bufferEntry.message.message.length, this.callNumber);\n      }\n    }\n    this.writeBuffer = this.writeBuffer.slice(earliestNeededMessageIndex - this.writeBufferOffset);\n    this.writeBufferOffset = earliestNeededMessageIndex;\n  }\n  commitCall(index) {\n    if (this.state === 'COMMITTED') {\n      return;\n    }\n    if (this.underlyingCalls[index].state === 'COMPLETED') {\n      return;\n    }\n    this.trace('Committing call [' + this.underlyingCalls[index].call.getCallNumber() + '] at index ' + index);\n    this.state = 'COMMITTED';\n    this.committedCallIndex = index;\n    for (let i = 0; i < this.underlyingCalls.length; i++) {\n      if (i === index) {\n        continue;\n      }\n      if (this.underlyingCalls[i].state === 'COMPLETED') {\n        continue;\n      }\n      this.underlyingCalls[i].state = 'COMPLETED';\n      this.underlyingCalls[i].call.cancelWithStatus(constants_1.Status.CANCELLED, 'Discarded in favor of other hedged attempt');\n    }\n    this.clearSentMessages();\n  }\n  commitCallWithMostMessages() {\n    if (this.state === 'COMMITTED') {\n      return;\n    }\n    let mostMessages = -1;\n    let callWithMostMessages = -1;\n    for (const [index, childCall] of this.underlyingCalls.entries()) {\n      if (childCall.state === 'ACTIVE' && childCall.nextMessageToSend > mostMessages) {\n        mostMessages = childCall.nextMessageToSend;\n        callWithMostMessages = index;\n      }\n    }\n    if (callWithMostMessages === -1) {\n      /* There are no active calls, disable retries to force the next call that\n       * is started to be committed. */\n      this.state = 'TRANSPARENT_ONLY';\n    } else {\n      this.commitCall(callWithMostMessages);\n    }\n  }\n  isStatusCodeInList(list, code) {\n    return list.some(value => value === code || value.toString().toLowerCase() === constants_1.Status[code].toLowerCase());\n  }\n  getNextRetryBackoffMs() {\n    var _a;\n    const retryPolicy = (_a = this.callConfig) === null || _a === void 0 ? void 0 : _a.methodConfig.retryPolicy;\n    if (!retryPolicy) {\n      return 0;\n    }\n    const nextBackoffMs = Math.random() * this.nextRetryBackoffSec * 1000;\n    const maxBackoffSec = Number(retryPolicy.maxBackoff.substring(0, retryPolicy.maxBackoff.length - 1));\n    this.nextRetryBackoffSec = Math.min(this.nextRetryBackoffSec * retryPolicy.backoffMultiplier, maxBackoffSec);\n    return nextBackoffMs;\n  }\n  maybeRetryCall(pushback, callback) {\n    if (this.state !== 'RETRY') {\n      callback(false);\n      return;\n    }\n    const retryPolicy = this.callConfig.methodConfig.retryPolicy;\n    if (this.attempts >= Math.min(retryPolicy.maxAttempts, 5)) {\n      callback(false);\n      return;\n    }\n    let retryDelayMs;\n    if (pushback === null) {\n      retryDelayMs = this.getNextRetryBackoffMs();\n    } else if (pushback < 0) {\n      this.state = 'TRANSPARENT_ONLY';\n      callback(false);\n      return;\n    } else {\n      retryDelayMs = pushback;\n      this.nextRetryBackoffSec = this.initialRetryBackoffSec;\n    }\n    setTimeout(() => {\n      var _a, _b;\n      if (this.state !== 'RETRY') {\n        callback(false);\n        return;\n      }\n      if ((_b = (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.canRetryCall()) !== null && _b !== void 0 ? _b : true) {\n        callback(true);\n        this.attempts += 1;\n        this.startNewAttempt();\n      }\n    }, retryDelayMs);\n  }\n  countActiveCalls() {\n    let count = 0;\n    for (const call of this.underlyingCalls) {\n      if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE') {\n        count += 1;\n      }\n    }\n    return count;\n  }\n  handleProcessedStatus(status, callIndex, pushback) {\n    var _a, _b, _c;\n    switch (this.state) {\n      case 'COMMITTED':\n      case 'TRANSPARENT_ONLY':\n        this.commitCall(callIndex);\n        this.reportStatus(status);\n        break;\n      case 'HEDGING':\n        if (this.isStatusCodeInList((_a = this.callConfig.methodConfig.hedgingPolicy.nonFatalStatusCodes) !== null && _a !== void 0 ? _a : [], status.code)) {\n          (_b = this.retryThrottler) === null || _b === void 0 ? void 0 : _b.addCallFailed();\n          let delayMs;\n          if (pushback === null) {\n            delayMs = 0;\n          } else if (pushback < 0) {\n            this.state = 'TRANSPARENT_ONLY';\n            this.commitCall(callIndex);\n            this.reportStatus(status);\n            return;\n          } else {\n            delayMs = pushback;\n          }\n          setTimeout(() => {\n            this.maybeStartHedgingAttempt();\n            // If after trying to start a call there are no active calls, this was the last one\n            if (this.countActiveCalls() === 0) {\n              this.commitCall(callIndex);\n              this.reportStatus(status);\n            }\n          }, delayMs);\n        } else {\n          this.commitCall(callIndex);\n          this.reportStatus(status);\n        }\n        break;\n      case 'RETRY':\n        if (this.isStatusCodeInList(this.callConfig.methodConfig.retryPolicy.retryableStatusCodes, status.code)) {\n          (_c = this.retryThrottler) === null || _c === void 0 ? void 0 : _c.addCallFailed();\n          this.maybeRetryCall(pushback, retried => {\n            if (!retried) {\n              this.commitCall(callIndex);\n              this.reportStatus(status);\n            }\n          });\n        } else {\n          this.commitCall(callIndex);\n          this.reportStatus(status);\n        }\n        break;\n    }\n  }\n  getPushback(metadata) {\n    const mdValue = metadata.get('grpc-retry-pushback-ms');\n    if (mdValue.length === 0) {\n      return null;\n    }\n    try {\n      return parseInt(mdValue[0]);\n    } catch (e) {\n      return -1;\n    }\n  }\n  handleChildStatus(status, callIndex) {\n    var _a;\n    if (this.underlyingCalls[callIndex].state === 'COMPLETED') {\n      return;\n    }\n    this.trace('state=' + this.state + ' handling status with progress ' + status.progress + ' from child [' + this.underlyingCalls[callIndex].call.getCallNumber() + '] in state ' + this.underlyingCalls[callIndex].state);\n    this.underlyingCalls[callIndex].state = 'COMPLETED';\n    if (status.code === constants_1.Status.OK) {\n      (_a = this.retryThrottler) === null || _a === void 0 ? void 0 : _a.addCallSucceeded();\n      this.commitCall(callIndex);\n      this.reportStatus(status);\n      return;\n    }\n    if (this.state === 'COMMITTED') {\n      this.reportStatus(status);\n      return;\n    }\n    const pushback = this.getPushback(status.metadata);\n    switch (status.progress) {\n      case 'NOT_STARTED':\n        // RPC never leaves the client, always safe to retry\n        this.startNewAttempt();\n        break;\n      case 'REFUSED':\n        // RPC reaches the server library, but not the server application logic\n        if (this.transparentRetryUsed) {\n          this.handleProcessedStatus(status, callIndex, pushback);\n        } else {\n          this.transparentRetryUsed = true;\n          this.startNewAttempt();\n        }\n        break;\n      case 'DROP':\n        this.commitCall(callIndex);\n        this.reportStatus(status);\n        break;\n      case 'PROCESSED':\n        this.handleProcessedStatus(status, callIndex, pushback);\n        break;\n    }\n  }\n  maybeStartHedgingAttempt() {\n    if (this.state !== 'HEDGING') {\n      return;\n    }\n    if (!this.callConfig.methodConfig.hedgingPolicy) {\n      return;\n    }\n    const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;\n    if (this.attempts >= Math.min(hedgingPolicy.maxAttempts, 5)) {\n      return;\n    }\n    this.attempts += 1;\n    this.startNewAttempt();\n    this.maybeStartHedgingTimer();\n  }\n  maybeStartHedgingTimer() {\n    var _a, _b, _c;\n    if (this.hedgingTimer) {\n      clearTimeout(this.hedgingTimer);\n    }\n    if (this.state !== 'HEDGING') {\n      return;\n    }\n    if (!this.callConfig.methodConfig.hedgingPolicy) {\n      return;\n    }\n    const hedgingPolicy = this.callConfig.methodConfig.hedgingPolicy;\n    if (this.attempts >= Math.min(hedgingPolicy.maxAttempts, 5)) {\n      return;\n    }\n    const hedgingDelayString = (_a = hedgingPolicy.hedgingDelay) !== null && _a !== void 0 ? _a : '0s';\n    const hedgingDelaySec = Number(hedgingDelayString.substring(0, hedgingDelayString.length - 1));\n    this.hedgingTimer = setTimeout(() => {\n      this.maybeStartHedgingAttempt();\n    }, hedgingDelaySec * 1000);\n    (_c = (_b = this.hedgingTimer).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  startNewAttempt() {\n    const child = this.channel.createLoadBalancingCall(this.callConfig, this.methodName, this.host, this.credentials, this.deadline);\n    this.trace('Created child call [' + child.getCallNumber() + '] for attempt ' + this.attempts);\n    const index = this.underlyingCalls.length;\n    this.underlyingCalls.push({\n      state: 'ACTIVE',\n      call: child,\n      nextMessageToSend: 0\n    });\n    const previousAttempts = this.attempts - 1;\n    const initialMetadata = this.initialMetadata.clone();\n    if (previousAttempts > 0) {\n      initialMetadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n    }\n    let receivedMetadata = false;\n    child.start(initialMetadata, {\n      onReceiveMetadata: metadata => {\n        this.trace('Received metadata from child [' + child.getCallNumber() + ']');\n        this.commitCall(index);\n        receivedMetadata = true;\n        if (previousAttempts > 0) {\n          metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n        }\n        if (this.underlyingCalls[index].state === 'ACTIVE') {\n          this.listener.onReceiveMetadata(metadata);\n        }\n      },\n      onReceiveMessage: message => {\n        this.trace('Received message from child [' + child.getCallNumber() + ']');\n        this.commitCall(index);\n        if (this.underlyingCalls[index].state === 'ACTIVE') {\n          this.listener.onReceiveMessage(message);\n        }\n      },\n      onReceiveStatus: status => {\n        this.trace('Received status from child [' + child.getCallNumber() + ']');\n        if (!receivedMetadata && previousAttempts > 0) {\n          status.metadata.set(PREVIONS_RPC_ATTEMPTS_METADATA_KEY, `${previousAttempts}`);\n        }\n        this.handleChildStatus(status, index);\n      }\n    });\n    this.sendNextChildMessage(index);\n    if (this.readStarted) {\n      child.startRead();\n    }\n  }\n  start(metadata, listener) {\n    this.trace('start called');\n    this.listener = listener;\n    this.initialMetadata = metadata;\n    this.attempts += 1;\n    this.startNewAttempt();\n    this.maybeStartHedgingTimer();\n  }\n  handleChildWriteCompleted(childIndex) {\n    var _a, _b;\n    const childCall = this.underlyingCalls[childIndex];\n    const messageIndex = childCall.nextMessageToSend;\n    (_b = (_a = this.getBufferEntry(messageIndex)).callback) === null || _b === void 0 ? void 0 : _b.call(_a);\n    this.clearSentMessages();\n    childCall.nextMessageToSend += 1;\n    this.sendNextChildMessage(childIndex);\n  }\n  sendNextChildMessage(childIndex) {\n    const childCall = this.underlyingCalls[childIndex];\n    if (childCall.state === 'COMPLETED') {\n      return;\n    }\n    if (this.getBufferEntry(childCall.nextMessageToSend)) {\n      const bufferEntry = this.getBufferEntry(childCall.nextMessageToSend);\n      switch (bufferEntry.entryType) {\n        case 'MESSAGE':\n          childCall.call.sendMessageWithContext({\n            callback: error => {\n              // Ignore error\n              this.handleChildWriteCompleted(childIndex);\n            }\n          }, bufferEntry.message.message);\n          break;\n        case 'HALF_CLOSE':\n          childCall.nextMessageToSend += 1;\n          childCall.call.halfClose();\n          break;\n        case 'FREED':\n          // Should not be possible\n          break;\n      }\n    }\n  }\n  sendMessageWithContext(context, message) {\n    var _a;\n    this.trace('write() called with message of length ' + message.length);\n    const writeObj = {\n      message,\n      flags: context.flags\n    };\n    const messageIndex = this.getNextBufferIndex();\n    const bufferEntry = {\n      entryType: 'MESSAGE',\n      message: writeObj,\n      allocated: this.bufferTracker.allocate(message.length, this.callNumber)\n    };\n    this.writeBuffer.push(bufferEntry);\n    if (bufferEntry.allocated) {\n      (_a = context.callback) === null || _a === void 0 ? void 0 : _a.call(context);\n      for (const [callIndex, call] of this.underlyingCalls.entries()) {\n        if (call.state === 'ACTIVE' && call.nextMessageToSend === messageIndex) {\n          call.call.sendMessageWithContext({\n            callback: error => {\n              // Ignore error\n              this.handleChildWriteCompleted(callIndex);\n            }\n          }, message);\n        }\n      }\n    } else {\n      this.commitCallWithMostMessages();\n      // commitCallWithMostMessages can fail if we are between ping attempts\n      if (this.committedCallIndex === null) {\n        return;\n      }\n      const call = this.underlyingCalls[this.committedCallIndex];\n      bufferEntry.callback = context.callback;\n      if (call.state === 'ACTIVE' && call.nextMessageToSend === messageIndex) {\n        call.call.sendMessageWithContext({\n          callback: error => {\n            // Ignore error\n            this.handleChildWriteCompleted(this.committedCallIndex);\n          }\n        }, message);\n      }\n    }\n  }\n  startRead() {\n    this.trace('startRead called');\n    this.readStarted = true;\n    for (const underlyingCall of this.underlyingCalls) {\n      if ((underlyingCall === null || underlyingCall === void 0 ? void 0 : underlyingCall.state) === 'ACTIVE') {\n        underlyingCall.call.startRead();\n      }\n    }\n  }\n  halfClose() {\n    this.trace('halfClose called');\n    const halfCloseIndex = this.getNextBufferIndex();\n    this.writeBuffer.push({\n      entryType: 'HALF_CLOSE',\n      allocated: false\n    });\n    for (const call of this.underlyingCalls) {\n      if ((call === null || call === void 0 ? void 0 : call.state) === 'ACTIVE' && call.nextMessageToSend === halfCloseIndex) {\n        call.nextMessageToSend += 1;\n        call.call.halfClose();\n      }\n    }\n  }\n  setCredentials(newCredentials) {\n    throw new Error('Method not implemented.');\n  }\n  getMethod() {\n    return this.methodName;\n  }\n  getHost() {\n    return this.host;\n  }\n}\nexports.RetryingCall = RetryingCall;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BaseSubchannelWrapper = void 0;\nclass BaseSubchannelWrapper {\n  constructor(child) {\n    this.child = child;\n  }\n  getConnectivityState() {\n    return this.child.getConnectivityState();\n  }\n  addConnectivityStateListener(listener) {\n    this.child.addConnectivityStateListener(listener);\n  }\n  removeConnectivityStateListener(listener) {\n    this.child.removeConnectivityStateListener(listener);\n  }\n  startConnecting() {\n    this.child.startConnecting();\n  }\n  getAddress() {\n    return this.child.getAddress();\n  }\n  throttleKeepalive(newKeepaliveTime) {\n    this.child.throttleKeepalive(newKeepaliveTime);\n  }\n  ref() {\n    this.child.ref();\n  }\n  unref() {\n    this.child.unref();\n  }\n  getChannelzRef() {\n    return this.child.getChannelzRef();\n  }\n  getRealSubchannel() {\n    return this.child.getRealSubchannel();\n  }\n  realSubchannelEquals(other) {\n    return this.getRealSubchannel() === other.getRealSubchannel();\n  }\n}\nexports.BaseSubchannelWrapper = BaseSubchannelWrapper;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InternalChannel = void 0;\nconst channel_credentials_1 = require(\"./channel-credentials\");\nconst resolving_load_balancer_1 = require(\"./resolving-load-balancer\");\nconst subchannel_pool_1 = require(\"./subchannel-pool\");\nconst picker_1 = require(\"./picker\");\nconst constants_1 = require(\"./constants\");\nconst filter_stack_1 = require(\"./filter-stack\");\nconst compression_filter_1 = require(\"./compression-filter\");\nconst resolver_1 = require(\"./resolver\");\nconst logging_1 = require(\"./logging\");\nconst http_proxy_1 = require(\"./http_proxy\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst channelz_1 = require(\"./channelz\");\nconst load_balancing_call_1 = require(\"./load-balancing-call\");\nconst deadline_1 = require(\"./deadline\");\nconst resolving_call_1 = require(\"./resolving-call\");\nconst call_number_1 = require(\"./call-number\");\nconst control_plane_status_1 = require(\"./control-plane-status\");\nconst retrying_call_1 = require(\"./retrying-call\");\nconst subchannel_interface_1 = require(\"./subchannel-interface\");\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\nconst MIN_IDLE_TIMEOUT_MS = 1000;\n// 30 minutes\nconst DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;\nconst RETRY_THROTTLER_MAP = new Map();\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\nclass ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n  constructor(childSubchannel, channel) {\n    super(childSubchannel);\n    this.channel = channel;\n    this.refCount = 0;\n    this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {\n      channel.throttleKeepalive(keepaliveTime);\n    };\n    childSubchannel.addConnectivityStateListener(this.subchannelStateListener);\n  }\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      this.child.removeConnectivityStateListener(this.subchannelStateListener);\n      this.channel.removeWrappedSubchannel(this);\n    }\n  }\n}\nclass InternalChannel {\n  constructor(target, credentials, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.credentials = credentials;\n    this.options = options;\n    this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n    this.currentPicker = new picker_1.UnavailablePicker();\n    /**\n     * Calls queued up to get a call config. Should only be populated before the\n     * first time the resolver returns a result, which includes the ConfigSelector.\n     */\n    this.configSelectionQueue = [];\n    this.pickQueue = [];\n    this.connectivityStateWatchers = [];\n    this.configSelector = null;\n    /**\n     * This is the error from the name resolver if it failed most recently. It\n     * is only used to end calls that start while there is no config selector\n     * and the name resolver is in backoff, so it should be nulled if\n     * configSelector becomes set or the channel state becomes anything other\n     * than TRANSIENT_FAILURE.\n     */\n    this.currentResolutionError = null;\n    this.wrappedSubchannels = new Set();\n    this.callCount = 0;\n    this.idleTimer = null;\n    // Channelz info\n    this.channelzEnabled = true;\n    this.callTracker = new channelz_1.ChannelzCallTracker();\n    this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n    if (typeof target !== 'string') {\n      throw new TypeError('Channel target must be a string');\n    }\n    if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n      throw new TypeError('Channel credentials must be a ChannelCredentials object');\n    }\n    if (options) {\n      if (typeof options !== 'object') {\n        throw new TypeError('Channel options must be an object');\n      }\n    }\n    this.originalTarget = target;\n    const originalTargetUri = (0, uri_parser_1.parseUri)(target);\n    if (originalTargetUri === null) {\n      throw new Error(`Could not parse target name \"${target}\"`);\n    }\n    /* This ensures that the target has a scheme that is registered with the\n     * resolver */\n    const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);\n    if (defaultSchemeMapResult === null) {\n      throw new Error(`Could not find a default scheme for target name \"${target}\"`);\n    }\n    this.callRefTimer = setInterval(() => {}, MAX_TIMEOUT_TIME);\n    (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzTrace = new channelz_1.ChannelzTrace();\n    this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, () => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Channel created');\n    }\n    if (this.options['grpc.default_authority']) {\n      this.defaultAuthority = this.options['grpc.default_authority'];\n    } else {\n      this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);\n    }\n    const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);\n    this.target = proxyMapResult.target;\n    this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n    /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n     * the grpc.use_local_subchannel_pool channel option means. */\n    this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_c = options['grpc.use_local_subchannel_pool']) !== null && _c !== void 0 ? _c : 0) === 0);\n    this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_d = options['grpc.retry_buffer_size']) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_e = options['grpc.per_rpc_retry_buffer_size']) !== null && _e !== void 0 ? _e : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);\n    this.keepaliveTime = (_f = options['grpc.keepalive_time_ms']) !== null && _f !== void 0 ? _f : -1;\n    this.idleTimeoutMs = Math.max((_g = options['grpc.client_idle_timeout_ms']) !== null && _g !== void 0 ? _g : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);\n    const channelControlHelper = {\n      createSubchannel: (subchannelAddress, subchannelArgs) => {\n        const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);\n        subchannel.throttleKeepalive(this.keepaliveTime);\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());\n        }\n        const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\n        this.wrappedSubchannels.add(wrappedSubchannel);\n        return wrappedSubchannel;\n      },\n      updateState: (connectivityState, picker) => {\n        this.currentPicker = picker;\n        const queueCopy = this.pickQueue.slice();\n        this.pickQueue = [];\n        if (queueCopy.length > 0) {\n          this.callRefTimerUnref();\n        }\n        for (const call of queueCopy) {\n          call.doPick();\n        }\n        this.updateState(connectivityState);\n      },\n      requestReresolution: () => {\n        // This should never be called.\n        throw new Error('Resolving load balancer should never call requestReresolution');\n      },\n      addChannelzChild: child => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.refChild(child);\n        }\n      },\n      removeChannelzChild: child => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.unrefChild(child);\n        }\n      }\n    };\n    this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options, (serviceConfig, configSelector) => {\n      if (serviceConfig.retryThrottling) {\n        RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\n      } else {\n        RETRY_THROTTLER_MAP.delete(this.getTarget());\n      }\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Address resolution succeeded');\n      }\n      this.configSelector = configSelector;\n      this.currentResolutionError = null;\n      /* We process the queue asynchronously to ensure that the corresponding\n       * load balancer update has completed. */\n      process.nextTick(() => {\n        const localQueue = this.configSelectionQueue;\n        this.configSelectionQueue = [];\n        if (localQueue.length > 0) {\n          this.callRefTimerUnref();\n        }\n        for (const call of localQueue) {\n          call.getConfig();\n        }\n      });\n    }, status => {\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_WARNING', 'Address resolution failed with code ' + status.code + ' and details \"' + status.details + '\"');\n      }\n      if (this.configSelectionQueue.length > 0) {\n        this.trace('Name resolution failed with calls queued for config selection');\n      }\n      if (this.configSelector === null) {\n        this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), {\n          metadata: status.metadata\n        });\n      }\n      const localQueue = this.configSelectionQueue;\n      this.configSelectionQueue = [];\n      if (localQueue.length > 0) {\n        this.callRefTimerUnref();\n      }\n      for (const call of localQueue) {\n        call.reportResolverError(status);\n      }\n    });\n    this.filterStackFactory = new filter_stack_1.FilterStackFactory([new compression_filter_1.CompressionFilterFactory(this, this.options)]);\n    this.trace('Channel constructed with options ' + JSON.stringify(options, undefined, 2));\n    const error = new Error();\n    (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'channel_stacktrace', '(' + this.channelzRef.id + ') ' + 'Channel constructed \\n' + ((_h = error.stack) === null || _h === void 0 ? void 0 : _h.substring(error.stack.indexOf('\\n') + 1)));\n    this.lastActivityTimestamp = new Date();\n  }\n  getChannelzInfo() {\n    return {\n      target: this.originalTarget,\n      state: this.connectivityState,\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      children: this.childrenTracker.getChildLists()\n    };\n  }\n  trace(text, verbosityOverride) {\n    (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + text);\n  }\n  callRefTimerRef() {\n    var _a, _b, _c, _d;\n    // If the hasRef function does not exist, always run the code\n    if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n      this.trace('callRefTimer.ref | configSelectionQueue.length=' + this.configSelectionQueue.length + ' pickQueue.length=' + this.pickQueue.length);\n      (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n  }\n  callRefTimerUnref() {\n    var _a, _b;\n    // If the hasRef function does not exist, always run the code\n    if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {\n      this.trace('callRefTimer.unref | configSelectionQueue.length=' + this.configSelectionQueue.length + ' pickQueue.length=' + this.pickQueue.length);\n      (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }\n  removeConnectivityStateWatcher(watcherObject) {\n    const watcherIndex = this.connectivityStateWatchers.findIndex(value => value === watcherObject);\n    if (watcherIndex >= 0) {\n      this.connectivityStateWatchers.splice(watcherIndex, 1);\n    }\n  }\n  updateState(newState) {\n    (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'connectivity_state', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + connectivity_state_1.ConnectivityState[this.connectivityState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\n    }\n    this.connectivityState = newState;\n    const watchersCopy = this.connectivityStateWatchers.slice();\n    for (const watcherObject of watchersCopy) {\n      if (newState !== watcherObject.currentState) {\n        if (watcherObject.timer) {\n          clearTimeout(watcherObject.timer);\n        }\n        this.removeConnectivityStateWatcher(watcherObject);\n        watcherObject.callback();\n      }\n    }\n    if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n      this.currentResolutionError = null;\n    }\n  }\n  throttleKeepalive(newKeepaliveTime) {\n    if (newKeepaliveTime > this.keepaliveTime) {\n      this.keepaliveTime = newKeepaliveTime;\n      for (const wrappedSubchannel of this.wrappedSubchannels) {\n        wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\n      }\n    }\n  }\n  removeWrappedSubchannel(wrappedSubchannel) {\n    this.wrappedSubchannels.delete(wrappedSubchannel);\n  }\n  doPick(metadata, extraPickInfo) {\n    return this.currentPicker.pick({\n      metadata: metadata,\n      extraPickInfo: extraPickInfo\n    });\n  }\n  queueCallForPick(call) {\n    this.pickQueue.push(call);\n    this.callRefTimerRef();\n  }\n  getConfig(method, metadata) {\n    this.resolvingLoadBalancer.exitIdle();\n    if (this.configSelector) {\n      return {\n        type: 'SUCCESS',\n        config: this.configSelector(method, metadata)\n      };\n    } else {\n      if (this.currentResolutionError) {\n        return {\n          type: 'ERROR',\n          error: this.currentResolutionError\n        };\n      } else {\n        return {\n          type: 'NONE'\n        };\n      }\n    }\n  }\n  queueCallForConfig(call) {\n    this.configSelectionQueue.push(call);\n    this.callRefTimerRef();\n  }\n  enterIdle() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(connectivity_state_1.ConnectivityState.IDLE);\n    this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n  }\n  startIdleTimeout(timeoutMs) {\n    var _a, _b;\n    this.idleTimer = setTimeout(() => {\n      if (this.callCount > 0) {\n        /* If there is currently a call, the channel will not go idle for a\n         * period of at least idleTimeoutMs, so check again after that time.\n         */\n        this.startIdleTimeout(this.idleTimeoutMs);\n        return;\n      }\n      const now = new Date();\n      const timeSinceLastActivity = now.valueOf() - this.lastActivityTimestamp.valueOf();\n      if (timeSinceLastActivity >= this.idleTimeoutMs) {\n        this.trace('Idle timer triggered after ' + this.idleTimeoutMs + 'ms of inactivity');\n        this.enterIdle();\n      } else {\n        /* Whenever the timer fires with the latest activity being too recent,\n         * set the timer again for the time when the time since the last\n         * activity is equal to the timeout. This should result in the timer\n         * firing no more than once every idleTimeoutMs/2 on average. */\n        this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);\n      }\n    }, timeoutMs);\n    (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  maybeStartIdleTimer() {\n    if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN && !this.idleTimer) {\n      this.startIdleTimeout(this.idleTimeoutMs);\n    }\n  }\n  onCallStart() {\n    if (this.channelzEnabled) {\n      this.callTracker.addCallStarted();\n    }\n    this.callCount += 1;\n  }\n  onCallEnd(status) {\n    if (this.channelzEnabled) {\n      if (status.code === constants_1.Status.OK) {\n        this.callTracker.addCallSucceeded();\n      } else {\n        this.callTracker.addCallFailed();\n      }\n    }\n    this.callCount -= 1;\n    this.lastActivityTimestamp = new Date();\n    this.maybeStartIdleTimer();\n  }\n  createLoadBalancingCall(callConfig, method, host, credentials, deadline) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createLoadBalancingCall [' + callNumber + '] method=\"' + method + '\"');\n    return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\n  }\n  createRetryingCall(callConfig, method, host, credentials, deadline) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createRetryingCall [' + callNumber + '] method=\"' + method + '\"');\n    return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));\n  }\n  createInnerCall(callConfig, method, host, credentials, deadline) {\n    // Create a RetryingCall if retries are enabled\n    if (this.options['grpc.enable_retries'] === 0) {\n      return this.createLoadBalancingCall(callConfig, method, host, credentials, deadline);\n    } else {\n      return this.createRetryingCall(callConfig, method, host, credentials, deadline);\n    }\n  }\n  createResolvingCall(method, deadline, host, parentCall, propagateFlags) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createResolvingCall [' + callNumber + '] method=\"' + method + '\", deadline=' + (0, deadline_1.deadlineToString)(deadline));\n    const finalOptions = {\n      deadline: deadline,\n      flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\n      host: host !== null && host !== void 0 ? host : this.defaultAuthority,\n      parentCall: parentCall\n    };\n    const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), this.credentials._getCallCredentials(), callNumber);\n    this.onCallStart();\n    call.addStatusWatcher(status => {\n      this.onCallEnd(status);\n    });\n    return call;\n  }\n  close() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\n    clearInterval(this.callRefTimer);\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n    }\n    if (this.channelzEnabled) {\n      (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n    }\n    this.subchannelPool.unrefUnusedSubchannels();\n  }\n  getTarget() {\n    return (0, uri_parser_1.uriToString)(this.target);\n  }\n  getConnectivityState(tryToConnect) {\n    const connectivityState = this.connectivityState;\n    if (tryToConnect) {\n      this.resolvingLoadBalancer.exitIdle();\n      this.lastActivityTimestamp = new Date();\n      this.maybeStartIdleTimer();\n    }\n    return connectivityState;\n  }\n  watchConnectivityState(currentState, deadline, callback) {\n    if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    let timer = null;\n    if (deadline !== Infinity) {\n      const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\n      const now = new Date();\n      if (deadline === -Infinity || deadlineDate <= now) {\n        process.nextTick(callback, new Error('Deadline passed without connectivity state change'));\n        return;\n      }\n      timer = setTimeout(() => {\n        this.removeConnectivityStateWatcher(watcherObject);\n        callback(new Error('Deadline passed without connectivity state change'));\n      }, deadlineDate.getTime() - now.getTime());\n    }\n    const watcherObject = {\n      currentState,\n      callback,\n      timer\n    };\n    this.connectivityStateWatchers.push(watcherObject);\n  }\n  /**\n   * Get the channelz reference object for this channel. The returned value is\n   * garbage if channelz is disabled for this channel.\n   * @returns\n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n  createCall(method, deadline, host, parentCall, propagateFlags) {\n    if (typeof method !== 'string') {\n      throw new TypeError('Channel#createCall: method must be a string');\n    }\n    if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n      throw new TypeError('Channel#createCall: deadline must be a number or Date');\n    }\n    if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\n  }\n}\nexports.InternalChannel = InternalChannel;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ChannelImplementation = void 0;\nconst channel_credentials_1 = require(\"./channel-credentials\");\nconst internal_channel_1 = require(\"./internal-channel\");\nclass ChannelImplementation {\n  constructor(target, credentials, options) {\n    if (typeof target !== 'string') {\n      throw new TypeError('Channel target must be a string');\n    }\n    if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n      throw new TypeError('Channel credentials must be a ChannelCredentials object');\n    }\n    if (options) {\n      if (typeof options !== 'object') {\n        throw new TypeError('Channel options must be an object');\n      }\n    }\n    this.internalChannel = new internal_channel_1.InternalChannel(target, credentials, options);\n  }\n  close() {\n    this.internalChannel.close();\n  }\n  getTarget() {\n    return this.internalChannel.getTarget();\n  }\n  getConnectivityState(tryToConnect) {\n    return this.internalChannel.getConnectivityState(tryToConnect);\n  }\n  watchConnectivityState(currentState, deadline, callback) {\n    this.internalChannel.watchConnectivityState(currentState, deadline, callback);\n  }\n  /**\n   * Get the channelz reference object for this channel. The returned value is\n   * garbage if channelz is disabled for this channel.\n   * @returns\n   */\n  getChannelzRef() {\n    return this.internalChannel.getChannelzRef();\n  }\n  createCall(method, deadline, host, parentCall, propagateFlags) {\n    if (typeof method !== 'string') {\n      throw new TypeError('Channel#createCall: method must be a string');\n    }\n    if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n      throw new TypeError('Channel#createCall: deadline must be a number or Date');\n    }\n    return this.internalChannel.createCall(method, deadline, host, parentCall, propagateFlags);\n  }\n}\nexports.ChannelImplementation = ChannelImplementation;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Http2ServerCallStream = exports.ServerDuplexStreamImpl = exports.ServerWritableStreamImpl = exports.ServerReadableStreamImpl = exports.ServerUnaryCallImpl = void 0;\nconst events_1 = require(\"events\");\nconst http2 = require(\"http2\");\nconst stream_1 = require(\"stream\");\nconst zlib = require(\"zlib\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst stream_decoder_1 = require(\"./stream-decoder\");\nconst logging = require(\"./logging\");\nconst error_1 = require(\"./error\");\nconst TRACER_NAME = 'server_call';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst GRPC_ACCEPT_ENCODING_HEADER = 'grpc-accept-encoding';\nconst GRPC_ENCODING_HEADER = 'grpc-encoding';\nconst GRPC_MESSAGE_HEADER = 'grpc-message';\nconst GRPC_STATUS_HEADER = 'grpc-status';\nconst GRPC_TIMEOUT_HEADER = 'grpc-timeout';\nconst DEADLINE_REGEX = /(\\d{1,8})\\s*([HMSmun])/;\nconst deadlineUnitsToMs = {\n  H: 3600000,\n  M: 60000,\n  S: 1000,\n  m: 1,\n  u: 0.001,\n  n: 0.000001\n};\nconst defaultCompressionHeaders = {\n  // TODO(cjihrig): Remove these encoding headers from the default response\n  // once compression is integrated.\n  [GRPC_ACCEPT_ENCODING_HEADER]: 'identity,deflate,gzip',\n  [GRPC_ENCODING_HEADER]: 'identity'\n};\nconst defaultResponseHeaders = {\n  [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_OK,\n  [http2.constants.HTTP2_HEADER_CONTENT_TYPE]: 'application/grpc+proto'\n};\nconst defaultResponseOptions = {\n  waitForTrailers: true\n};\nclass ServerUnaryCallImpl extends events_1.EventEmitter {\n  constructor(call, metadata, request) {\n    super();\n    this.call = call;\n    this.metadata = metadata;\n    this.request = request;\n    this.cancelled = false;\n    this.call.setupSurfaceCall(this);\n  }\n  getPeer() {\n    return this.call.getPeer();\n  }\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n  getDeadline() {\n    return this.call.getDeadline();\n  }\n  getPath() {\n    return this.call.getPath();\n  }\n}\nexports.ServerUnaryCallImpl = ServerUnaryCallImpl;\nclass ServerReadableStreamImpl extends stream_1.Readable {\n  constructor(call, metadata, deserialize, encoding) {\n    super({\n      objectMode: true\n    });\n    this.call = call;\n    this.metadata = metadata;\n    this.deserialize = deserialize;\n    this.cancelled = false;\n    this.call.setupSurfaceCall(this);\n    this.call.setupReadable(this, encoding);\n  }\n  _read(size) {\n    if (!this.call.consumeUnpushedMessages(this)) {\n      return;\n    }\n    this.call.resume();\n  }\n  getPeer() {\n    return this.call.getPeer();\n  }\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n  getDeadline() {\n    return this.call.getDeadline();\n  }\n  getPath() {\n    return this.call.getPath();\n  }\n}\nexports.ServerReadableStreamImpl = ServerReadableStreamImpl;\nclass ServerWritableStreamImpl extends stream_1.Writable {\n  constructor(call, metadata, serialize, request) {\n    super({\n      objectMode: true\n    });\n    this.call = call;\n    this.metadata = metadata;\n    this.serialize = serialize;\n    this.request = request;\n    this.cancelled = false;\n    this.trailingMetadata = new metadata_1.Metadata();\n    this.call.setupSurfaceCall(this);\n    this.on('error', err => {\n      this.call.sendError(err);\n      this.end();\n    });\n  }\n  getPeer() {\n    return this.call.getPeer();\n  }\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n  getDeadline() {\n    return this.call.getDeadline();\n  }\n  getPath() {\n    return this.call.getPath();\n  }\n  _write(chunk, encoding,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback) {\n    try {\n      const response = this.call.serializeMessage(chunk);\n      if (!this.call.write(response)) {\n        this.call.once('drain', callback);\n        return;\n      }\n    } catch (err) {\n      this.emit('error', {\n        details: (0, error_1.getErrorMessage)(err),\n        code: constants_1.Status.INTERNAL\n      });\n    }\n    callback();\n  }\n  _final(callback) {\n    this.call.sendStatus({\n      code: constants_1.Status.OK,\n      details: 'OK',\n      metadata: this.trailingMetadata\n    });\n    callback(null);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  end(metadata) {\n    if (metadata) {\n      this.trailingMetadata = metadata;\n    }\n    return super.end();\n  }\n}\nexports.ServerWritableStreamImpl = ServerWritableStreamImpl;\nclass ServerDuplexStreamImpl extends stream_1.Duplex {\n  constructor(call, metadata, serialize, deserialize, encoding) {\n    super({\n      objectMode: true\n    });\n    this.call = call;\n    this.metadata = metadata;\n    this.serialize = serialize;\n    this.deserialize = deserialize;\n    this.cancelled = false;\n    this.trailingMetadata = new metadata_1.Metadata();\n    this.call.setupSurfaceCall(this);\n    this.call.setupReadable(this, encoding);\n    this.on('error', err => {\n      this.call.sendError(err);\n      this.end();\n    });\n  }\n  getPeer() {\n    return this.call.getPeer();\n  }\n  sendMetadata(responseMetadata) {\n    this.call.sendMetadata(responseMetadata);\n  }\n  getDeadline() {\n    return this.call.getDeadline();\n  }\n  getPath() {\n    return this.call.getPath();\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  end(metadata) {\n    if (metadata) {\n      this.trailingMetadata = metadata;\n    }\n    return super.end();\n  }\n}\nexports.ServerDuplexStreamImpl = ServerDuplexStreamImpl;\nServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;\nServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;\nServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final;\n// Internal class that wraps the HTTP2 request.\nclass Http2ServerCallStream extends events_1.EventEmitter {\n  constructor(stream, handler, options) {\n    super();\n    this.stream = stream;\n    this.handler = handler;\n    this.cancelled = false;\n    this.deadlineTimer = null;\n    this.statusSent = false;\n    this.deadline = Infinity;\n    this.wantTrailers = false;\n    this.metadataSent = false;\n    this.canPush = false;\n    this.isPushPending = false;\n    this.bufferedMessages = [];\n    this.messagesToPush = [];\n    this.maxSendMessageSize = constants_1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;\n    this.maxReceiveMessageSize = constants_1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;\n    this.stream.once('error', err => {\n      /* We need an error handler to avoid uncaught error event exceptions, but\n       * there is nothing we can reasonably do here. Any error event should\n       * have a corresponding close event, which handles emitting the cancelled\n       * event. And the stream is now in a bad state, so we can't reasonably\n       * expect to be able to send an error over it. */\n    });\n    this.stream.once('close', () => {\n      var _a;\n      trace('Request to method ' + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + ' stream closed with rstCode ' + this.stream.rstCode);\n      if (!this.statusSent) {\n        this.cancelled = true;\n        this.emit('cancelled', 'cancelled');\n        this.emit('streamEnd', false);\n        this.sendStatus({\n          code: constants_1.Status.CANCELLED,\n          details: 'Cancelled by client',\n          metadata: null\n        });\n        if (this.deadlineTimer) clearTimeout(this.deadlineTimer);\n      }\n    });\n    this.stream.on('drain', () => {\n      this.emit('drain');\n    });\n    if ('grpc.max_send_message_length' in options) {\n      this.maxSendMessageSize = options['grpc.max_send_message_length'];\n    }\n    if ('grpc.max_receive_message_length' in options) {\n      this.maxReceiveMessageSize = options['grpc.max_receive_message_length'];\n    }\n  }\n  checkCancelled() {\n    /* In some cases the stream can become destroyed before the close event\n     * fires. That creates a race condition that this check works around */\n    if (this.stream.destroyed || this.stream.closed) {\n      this.cancelled = true;\n    }\n    return this.cancelled;\n  }\n  getDecompressedMessage(message, encoding) {\n    const messageContents = message.subarray(5);\n    if (encoding === 'identity') {\n      return messageContents;\n    } else if (encoding === 'deflate' || encoding === 'gzip') {\n      let decompresser;\n      if (encoding === 'deflate') {\n        decompresser = zlib.createInflate();\n      } else {\n        decompresser = zlib.createGunzip();\n      }\n      return new Promise((resolve, reject) => {\n        let totalLength = 0;\n        const messageParts = [];\n        decompresser.on('data', chunk => {\n          messageParts.push(chunk);\n          totalLength += chunk.byteLength;\n          if (this.maxReceiveMessageSize !== -1 && totalLength > this.maxReceiveMessageSize) {\n            decompresser.destroy();\n            reject({\n              code: constants_1.Status.RESOURCE_EXHAUSTED,\n              details: `Received message that decompresses to a size larger than ${this.maxReceiveMessageSize}`\n            });\n          }\n        });\n        decompresser.on('end', () => {\n          resolve(Buffer.concat(messageParts));\n        });\n        decompresser.write(messageContents);\n        decompresser.end();\n      });\n    } else {\n      return Promise.reject({\n        code: constants_1.Status.UNIMPLEMENTED,\n        details: `Received message compressed with unsupported encoding \"${encoding}\"`\n      });\n    }\n  }\n  sendMetadata(customMetadata) {\n    if (this.checkCancelled()) {\n      return;\n    }\n    if (this.metadataSent) {\n      return;\n    }\n    this.metadataSent = true;\n    const custom = customMetadata ? customMetadata.toHttp2Headers() : null;\n    // TODO(cjihrig): Include compression headers.\n    const headers = Object.assign(Object.assign(Object.assign({}, defaultResponseHeaders), defaultCompressionHeaders), custom);\n    this.stream.respond(headers, defaultResponseOptions);\n  }\n  receiveMetadata(headers) {\n    const metadata = metadata_1.Metadata.fromHttp2Headers(headers);\n    if (logging.isTracerEnabled(TRACER_NAME)) {\n      trace('Request to ' + this.handler.path + ' received headers ' + JSON.stringify(metadata.toJSON()));\n    }\n    // TODO(cjihrig): Receive compression metadata.\n    const timeoutHeader = metadata.get(GRPC_TIMEOUT_HEADER);\n    if (timeoutHeader.length > 0) {\n      const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);\n      if (match === null) {\n        const err = new Error('Invalid deadline');\n        err.code = constants_1.Status.OUT_OF_RANGE;\n        this.sendError(err);\n        return metadata;\n      }\n      const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;\n      const now = new Date();\n      this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);\n      this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);\n      metadata.remove(GRPC_TIMEOUT_HEADER);\n    }\n    // Remove several headers that should not be propagated to the application\n    metadata.remove(http2.constants.HTTP2_HEADER_ACCEPT_ENCODING);\n    metadata.remove(http2.constants.HTTP2_HEADER_TE);\n    metadata.remove(http2.constants.HTTP2_HEADER_CONTENT_TYPE);\n    metadata.remove('grpc-accept-encoding');\n    return metadata;\n  }\n  receiveUnaryMessage(encoding) {\n    return new Promise((resolve, reject) => {\n      const {\n        stream\n      } = this;\n      let receivedLength = 0;\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const call = this;\n      const body = [];\n      const limit = this.maxReceiveMessageSize;\n      this.stream.on('data', onData);\n      this.stream.on('end', onEnd);\n      this.stream.on('error', onEnd);\n      function onData(chunk) {\n        receivedLength += chunk.byteLength;\n        if (limit !== -1 && receivedLength > limit) {\n          stream.removeListener('data', onData);\n          stream.removeListener('end', onEnd);\n          stream.removeListener('error', onEnd);\n          reject({\n            code: constants_1.Status.RESOURCE_EXHAUSTED,\n            details: `Received message larger than max (${receivedLength} vs. ${limit})`\n          });\n          return;\n        }\n        body.push(chunk);\n      }\n      function onEnd(err) {\n        stream.removeListener('data', onData);\n        stream.removeListener('end', onEnd);\n        stream.removeListener('error', onEnd);\n        if (err !== undefined) {\n          reject({\n            code: constants_1.Status.INTERNAL,\n            details: err.message\n          });\n          return;\n        }\n        if (receivedLength === 0) {\n          reject({\n            code: constants_1.Status.INTERNAL,\n            details: 'received empty unary message'\n          });\n          return;\n        }\n        call.emit('receiveMessage');\n        const requestBytes = Buffer.concat(body, receivedLength);\n        const compressed = requestBytes.readUInt8(0) === 1;\n        const compressedMessageEncoding = compressed ? encoding : 'identity';\n        const decompressedMessage = call.getDecompressedMessage(requestBytes, compressedMessageEncoding);\n        if (Buffer.isBuffer(decompressedMessage)) {\n          resolve(call.deserializeMessageWithInternalError(decompressedMessage));\n          return;\n        }\n        decompressedMessage.then(decompressed => resolve(call.deserializeMessageWithInternalError(decompressed)), err => reject(err.code ? err : {\n          code: constants_1.Status.INTERNAL,\n          details: `Received \"grpc-encoding\" header \"${encoding}\" but ${encoding} decompression failed`\n        }));\n      }\n    });\n  }\n  async deserializeMessageWithInternalError(buffer) {\n    try {\n      return this.deserializeMessage(buffer);\n    } catch (err) {\n      throw {\n        details: (0, error_1.getErrorMessage)(err),\n        code: constants_1.Status.INTERNAL\n      };\n    }\n  }\n  serializeMessage(value) {\n    const messageBuffer = this.handler.serialize(value);\n    // TODO(cjihrig): Call compression aware serializeMessage().\n    const byteLength = messageBuffer.byteLength;\n    const output = Buffer.allocUnsafe(byteLength + 5);\n    output.writeUInt8(0, 0);\n    output.writeUInt32BE(byteLength, 1);\n    messageBuffer.copy(output, 5);\n    return output;\n  }\n  deserializeMessage(bytes) {\n    return this.handler.deserialize(bytes);\n  }\n  async sendUnaryMessage(err, value, metadata, flags) {\n    if (this.checkCancelled()) {\n      return;\n    }\n    if (metadata === undefined) {\n      metadata = null;\n    }\n    if (err) {\n      if (!Object.prototype.hasOwnProperty.call(err, 'metadata') && metadata) {\n        err.metadata = metadata;\n      }\n      this.sendError(err);\n      return;\n    }\n    try {\n      const response = this.serializeMessage(value);\n      this.write(response);\n      this.sendStatus({\n        code: constants_1.Status.OK,\n        details: 'OK',\n        metadata\n      });\n    } catch (err) {\n      this.sendError({\n        details: (0, error_1.getErrorMessage)(err),\n        code: constants_1.Status.INTERNAL\n      });\n    }\n  }\n  sendStatus(statusObj) {\n    var _a, _b;\n    this.emit('callEnd', statusObj.code);\n    this.emit('streamEnd', statusObj.code === constants_1.Status.OK);\n    if (this.checkCancelled()) {\n      return;\n    }\n    trace('Request to method ' + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + ' ended with status code: ' + constants_1.Status[statusObj.code] + ' details: ' + statusObj.details);\n    if (this.deadlineTimer) clearTimeout(this.deadlineTimer);\n    if (this.stream.headersSent) {\n      if (!this.wantTrailers) {\n        this.wantTrailers = true;\n        this.stream.once('wantTrailers', () => {\n          var _a;\n          const trailersToSend = Object.assign({\n            [GRPC_STATUS_HEADER]: statusObj.code,\n            [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)\n          }, (_a = statusObj.metadata) === null || _a === void 0 ? void 0 : _a.toHttp2Headers());\n          this.stream.sendTrailers(trailersToSend);\n          this.statusSent = true;\n        });\n        this.stream.end();\n      }\n    } else {\n      // Trailers-only response\n      const trailersToSend = Object.assign(Object.assign({\n        [GRPC_STATUS_HEADER]: statusObj.code,\n        [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)\n      }, defaultResponseHeaders), (_b = statusObj.metadata) === null || _b === void 0 ? void 0 : _b.toHttp2Headers());\n      this.stream.respond(trailersToSend, {\n        endStream: true\n      });\n      this.statusSent = true;\n    }\n  }\n  sendError(error) {\n    const status = {\n      code: constants_1.Status.UNKNOWN,\n      details: 'message' in error ? error.message : 'Unknown Error',\n      metadata: 'metadata' in error && error.metadata !== undefined ? error.metadata : null\n    };\n    if ('code' in error && typeof error.code === 'number' && Number.isInteger(error.code)) {\n      status.code = error.code;\n      if ('details' in error && typeof error.details === 'string') {\n        status.details = error.details;\n      }\n    }\n    this.sendStatus(status);\n  }\n  write(chunk) {\n    if (this.checkCancelled()) {\n      return;\n    }\n    if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {\n      this.sendError({\n        code: constants_1.Status.RESOURCE_EXHAUSTED,\n        details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`\n      });\n      return;\n    }\n    this.sendMetadata();\n    this.emit('sendMessage');\n    return this.stream.write(chunk);\n  }\n  resume() {\n    this.stream.resume();\n  }\n  setupSurfaceCall(call) {\n    this.once('cancelled', reason => {\n      call.cancelled = true;\n      call.emit('cancelled', reason);\n    });\n    this.once('callEnd', status => call.emit('callEnd', status));\n  }\n  setupReadable(readable, encoding) {\n    const decoder = new stream_decoder_1.StreamDecoder(this.maxReceiveMessageSize);\n    let readsDone = false;\n    let pendingMessageProcessing = false;\n    let pushedEnd = false;\n    const maybePushEnd = async () => {\n      if (!pushedEnd && readsDone && !pendingMessageProcessing) {\n        pushedEnd = true;\n        await this.pushOrBufferMessage(readable, null);\n      }\n    };\n    this.stream.on('data', async data => {\n      let messages;\n      try {\n        messages = decoder.write(data);\n      } catch (e) {\n        this.sendError({\n          code: constants_1.Status.RESOURCE_EXHAUSTED,\n          details: e.message\n        });\n        return;\n      }\n      pendingMessageProcessing = true;\n      this.stream.pause();\n      for (const message of messages) {\n        this.emit('receiveMessage');\n        const compressed = message.readUInt8(0) === 1;\n        const compressedMessageEncoding = compressed ? encoding : 'identity';\n        let decompressedMessage;\n        try {\n          decompressedMessage = await this.getDecompressedMessage(message, compressedMessageEncoding);\n        } catch (e) {\n          this.sendError(e);\n          return;\n        }\n        // Encountered an error with decompression; it'll already have been propogated back\n        // Just return early\n        if (!decompressedMessage) return;\n        await this.pushOrBufferMessage(readable, decompressedMessage);\n      }\n      pendingMessageProcessing = false;\n      this.stream.resume();\n      await maybePushEnd();\n    });\n    this.stream.once('end', async () => {\n      readsDone = true;\n      await maybePushEnd();\n    });\n  }\n  consumeUnpushedMessages(readable) {\n    this.canPush = true;\n    while (this.messagesToPush.length > 0) {\n      const nextMessage = this.messagesToPush.shift();\n      const canPush = readable.push(nextMessage);\n      if (nextMessage === null || canPush === false) {\n        this.canPush = false;\n        break;\n      }\n    }\n    return this.canPush;\n  }\n  async pushOrBufferMessage(readable, messageBytes) {\n    if (this.isPushPending) {\n      this.bufferedMessages.push(messageBytes);\n    } else {\n      await this.pushMessage(readable, messageBytes);\n    }\n  }\n  async pushMessage(readable, messageBytes) {\n    if (messageBytes === null) {\n      trace('Received end of stream');\n      if (this.canPush) {\n        readable.push(null);\n      } else {\n        this.messagesToPush.push(null);\n      }\n      return;\n    }\n    trace('Received message of length ' + messageBytes.length);\n    this.isPushPending = true;\n    try {\n      const deserialized = await this.deserializeMessage(messageBytes);\n      if (this.canPush) {\n        if (!readable.push(deserialized)) {\n          this.canPush = false;\n          this.stream.pause();\n        }\n      } else {\n        this.messagesToPush.push(deserialized);\n      }\n    } catch (error) {\n      // Ignore any remaining messages when errors occur.\n      this.bufferedMessages.length = 0;\n      let code = (0, error_1.getErrorCode)(error);\n      if (code === null || code < constants_1.Status.OK || code > constants_1.Status.UNAUTHENTICATED) {\n        code = constants_1.Status.INTERNAL;\n      }\n      readable.emit('error', {\n        details: (0, error_1.getErrorMessage)(error),\n        code: code\n      });\n    }\n    this.isPushPending = false;\n    if (this.bufferedMessages.length > 0) {\n      await this.pushMessage(readable, this.bufferedMessages.shift());\n    }\n  }\n  getPeer() {\n    var _a;\n    const socket = (_a = this.stream.session) === null || _a === void 0 ? void 0 : _a.socket;\n    if (socket === null || socket === void 0 ? void 0 : socket.remoteAddress) {\n      if (socket.remotePort) {\n        return `${socket.remoteAddress}:${socket.remotePort}`;\n      } else {\n        return socket.remoteAddress;\n      }\n    } else {\n      return 'unknown';\n    }\n  }\n  getDeadline() {\n    return this.deadline;\n  }\n  getPath() {\n    return this.handler.path;\n  }\n}\nexports.Http2ServerCallStream = Http2ServerCallStream;\nfunction handleExpiredDeadline(call) {\n  const err = new Error('Deadline exceeded');\n  err.code = constants_1.Status.DEADLINE_EXCEEDED;\n  call.sendError(err);\n  call.cancelled = true;\n  call.emit('cancelled', 'deadline');\n}\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCredentials = void 0;\nconst tls_helpers_1 = require(\"./tls-helpers\");\nclass ServerCredentials {\n  static createInsecure() {\n    return new InsecureServerCredentials();\n  }\n  static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {\n    if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {\n      throw new TypeError('rootCerts must be null or a Buffer');\n    }\n    if (!Array.isArray(keyCertPairs)) {\n      throw new TypeError('keyCertPairs must be an array');\n    }\n    if (typeof checkClientCertificate !== 'boolean') {\n      throw new TypeError('checkClientCertificate must be a boolean');\n    }\n    const cert = [];\n    const key = [];\n    for (let i = 0; i < keyCertPairs.length; i++) {\n      const pair = keyCertPairs[i];\n      if (pair === null || typeof pair !== 'object') {\n        throw new TypeError(`keyCertPair[${i}] must be an object`);\n      }\n      if (!Buffer.isBuffer(pair.private_key)) {\n        throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);\n      }\n      if (!Buffer.isBuffer(pair.cert_chain)) {\n        throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);\n      }\n      cert.push(pair.cert_chain);\n      key.push(pair.private_key);\n    }\n    return new SecureServerCredentials({\n      ca: rootCerts || (0, tls_helpers_1.getDefaultRootsData)() || undefined,\n      cert,\n      key,\n      requestCert: checkClientCertificate,\n      ciphers: tls_helpers_1.CIPHER_SUITES\n    });\n  }\n}\nexports.ServerCredentials = ServerCredentials;\nclass InsecureServerCredentials extends ServerCredentials {\n  _isSecure() {\n    return false;\n  }\n  _getSettings() {\n    return null;\n  }\n}\nclass SecureServerCredentials extends ServerCredentials {\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n  _isSecure() {\n    return true;\n  }\n  _getSettings() {\n    return this.options;\n  }\n}\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Server = void 0;\nconst http2 = require(\"http2\");\nconst constants_1 = require(\"./constants\");\nconst server_call_1 = require(\"./server-call\");\nconst server_credentials_1 = require(\"./server-credentials\");\nconst resolver_1 = require(\"./resolver\");\nconst logging = require(\"./logging\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst channelz_1 = require(\"./channelz\");\nconst UNLIMITED_CONNECTION_AGE_MS = ~(1 << 31);\nconst KEEPALIVE_MAX_TIME_MS = ~(1 << 31);\nconst KEEPALIVE_TIMEOUT_MS = 20000;\nconst {\n  HTTP2_HEADER_PATH\n} = http2.constants;\nconst TRACER_NAME = 'server';\nfunction noop() {}\nfunction getUnimplementedStatusResponse(methodName) {\n  return {\n    code: constants_1.Status.UNIMPLEMENTED,\n    details: `The server does not implement the method ${methodName}`\n  };\n}\nfunction getDefaultHandler(handlerType, methodName) {\n  const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);\n  switch (handlerType) {\n    case 'unary':\n      return (call, callback) => {\n        callback(unimplementedStatusResponse, null);\n      };\n    case 'clientStream':\n      return (call, callback) => {\n        callback(unimplementedStatusResponse, null);\n      };\n    case 'serverStream':\n      return call => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    case 'bidi':\n      return call => {\n        call.emit('error', unimplementedStatusResponse);\n      };\n    default:\n      throw new Error(`Invalid handlerType ${handlerType}`);\n  }\n}\nclass Server {\n  constructor(options) {\n    var _a, _b, _c, _d;\n    this.http2ServerList = [];\n    this.handlers = new Map();\n    this.sessions = new Map();\n    this.started = false;\n    this.shutdown = false;\n    this.serverAddressString = 'null';\n    // Channelz Info\n    this.channelzEnabled = true;\n    this.channelzTrace = new channelz_1.ChannelzTrace();\n    this.callTracker = new channelz_1.ChannelzCallTracker();\n    this.listenerChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n    this.sessionChildrenTracker = new channelz_1.ChannelzChildrenTracker();\n    this.options = options !== null && options !== void 0 ? options : {};\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzRef = (0, channelz_1.registerChannelzServer)(() => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Server created');\n    }\n    this.maxConnectionAgeMs = (_a = this.options['grpc.max_connection_age_ms']) !== null && _a !== void 0 ? _a : UNLIMITED_CONNECTION_AGE_MS;\n    this.maxConnectionAgeGraceMs = (_b = this.options['grpc.max_connection_age_grace_ms']) !== null && _b !== void 0 ? _b : UNLIMITED_CONNECTION_AGE_MS;\n    this.keepaliveTimeMs = (_c = this.options['grpc.keepalive_time_ms']) !== null && _c !== void 0 ? _c : KEEPALIVE_MAX_TIME_MS;\n    this.keepaliveTimeoutMs = (_d = this.options['grpc.keepalive_timeout_ms']) !== null && _d !== void 0 ? _d : KEEPALIVE_TIMEOUT_MS;\n    this.trace('Server constructed');\n  }\n  getChannelzInfo() {\n    return {\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      listenerChildren: this.listenerChildrenTracker.getChildLists(),\n      sessionChildren: this.sessionChildrenTracker.getChildLists()\n    };\n  }\n  getChannelzSessionInfoGetter(session) {\n    return () => {\n      var _a, _b, _c;\n      const sessionInfo = this.sessions.get(session);\n      const sessionSocket = session.socket;\n      const remoteAddress = sessionSocket.remoteAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.remoteAddress, sessionSocket.remotePort) : null;\n      const localAddress = sessionSocket.localAddress ? (0, subchannel_address_1.stringToSubchannelAddress)(sessionSocket.localAddress, sessionSocket.localPort) : null;\n      let tlsInfo;\n      if (session.encrypted) {\n        const tlsSocket = sessionSocket;\n        const cipherInfo = tlsSocket.getCipher();\n        const certificate = tlsSocket.getCertificate();\n        const peerCertificate = tlsSocket.getPeerCertificate();\n        tlsInfo = {\n          cipherSuiteStandardName: (_a = cipherInfo.standardName) !== null && _a !== void 0 ? _a : null,\n          cipherSuiteOtherName: cipherInfo.standardName ? null : cipherInfo.name,\n          localCertificate: certificate && 'raw' in certificate ? certificate.raw : null,\n          remoteCertificate: peerCertificate && 'raw' in peerCertificate ? peerCertificate.raw : null\n        };\n      } else {\n        tlsInfo = null;\n      }\n      const socketInfo = {\n        remoteAddress: remoteAddress,\n        localAddress: localAddress,\n        security: tlsInfo,\n        remoteName: null,\n        streamsStarted: sessionInfo.streamTracker.callsStarted,\n        streamsSucceeded: sessionInfo.streamTracker.callsSucceeded,\n        streamsFailed: sessionInfo.streamTracker.callsFailed,\n        messagesSent: sessionInfo.messagesSent,\n        messagesReceived: sessionInfo.messagesReceived,\n        keepAlivesSent: 0,\n        lastLocalStreamCreatedTimestamp: null,\n        lastRemoteStreamCreatedTimestamp: sessionInfo.streamTracker.lastCallStartedTimestamp,\n        lastMessageSentTimestamp: sessionInfo.lastMessageSentTimestamp,\n        lastMessageReceivedTimestamp: sessionInfo.lastMessageReceivedTimestamp,\n        localFlowControlWindow: (_b = session.state.localWindowSize) !== null && _b !== void 0 ? _b : null,\n        remoteFlowControlWindow: (_c = session.state.remoteWindowSize) !== null && _c !== void 0 ? _c : null\n      };\n      return socketInfo;\n    };\n  }\n  trace(text) {\n    logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, '(' + this.channelzRef.id + ') ' + text);\n  }\n  addProtoService() {\n    throw new Error('Not implemented. Use addService() instead');\n  }\n  addService(service, implementation) {\n    if (service === null || typeof service !== 'object' || implementation === null || typeof implementation !== 'object') {\n      throw new Error('addService() requires two objects as arguments');\n    }\n    const serviceKeys = Object.keys(service);\n    if (serviceKeys.length === 0) {\n      throw new Error('Cannot add an empty service to a server');\n    }\n    serviceKeys.forEach(name => {\n      const attrs = service[name];\n      let methodType;\n      if (attrs.requestStream) {\n        if (attrs.responseStream) {\n          methodType = 'bidi';\n        } else {\n          methodType = 'clientStream';\n        }\n      } else {\n        if (attrs.responseStream) {\n          methodType = 'serverStream';\n        } else {\n          methodType = 'unary';\n        }\n      }\n      let implFn = implementation[name];\n      let impl;\n      if (implFn === undefined && typeof attrs.originalName === 'string') {\n        implFn = implementation[attrs.originalName];\n      }\n      if (implFn !== undefined) {\n        impl = implFn.bind(implementation);\n      } else {\n        impl = getDefaultHandler(methodType, name);\n      }\n      const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);\n      if (success === false) {\n        throw new Error(`Method handler for ${attrs.path} already provided.`);\n      }\n    });\n  }\n  removeService(service) {\n    if (service === null || typeof service !== 'object') {\n      throw new Error('removeService() requires object as argument');\n    }\n    const serviceKeys = Object.keys(service);\n    serviceKeys.forEach(name => {\n      const attrs = service[name];\n      this.unregister(attrs.path);\n    });\n  }\n  bind(port, creds) {\n    throw new Error('Not implemented. Use bindAsync() instead');\n  }\n  bindAsync(port, creds, callback) {\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n    if (this.shutdown) {\n      throw new Error('bindAsync called after shutdown');\n    }\n    if (typeof port !== 'string') {\n      throw new TypeError('port must be a string');\n    }\n    if (creds === null || !(creds instanceof server_credentials_1.ServerCredentials)) {\n      throw new TypeError('creds must be a ServerCredentials object');\n    }\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    const initialPortUri = (0, uri_parser_1.parseUri)(port);\n    if (initialPortUri === null) {\n      throw new Error(`Could not parse port \"${port}\"`);\n    }\n    const portUri = (0, resolver_1.mapUriDefaultScheme)(initialPortUri);\n    if (portUri === null) {\n      throw new Error(`Could not get a default scheme for port \"${port}\"`);\n    }\n    const serverOptions = {\n      maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER\n    };\n    if ('grpc-node.max_session_memory' in this.options) {\n      serverOptions.maxSessionMemory = this.options['grpc-node.max_session_memory'];\n    } else {\n      /* By default, set a very large max session memory limit, to effectively\n       * disable enforcement of the limit. Some testing indicates that Node's\n       * behavior degrades badly when this limit is reached, so we solve that\n       * by disabling the check entirely. */\n      serverOptions.maxSessionMemory = Number.MAX_SAFE_INTEGER;\n    }\n    if ('grpc.max_concurrent_streams' in this.options) {\n      serverOptions.settings = {\n        maxConcurrentStreams: this.options['grpc.max_concurrent_streams']\n      };\n    }\n    const deferredCallback = (error, port) => {\n      process.nextTick(() => callback(error, port));\n    };\n    const setupServer = () => {\n      let http2Server;\n      if (creds._isSecure()) {\n        const secureServerOptions = Object.assign(serverOptions, creds._getSettings());\n        secureServerOptions.enableTrace = this.options['grpc-node.tls_enable_trace'] === 1;\n        http2Server = http2.createSecureServer(secureServerOptions);\n        http2Server.on('secureConnection', socket => {\n          /* These errors need to be handled by the user of Http2SecureServer,\n           * according to https://github.com/nodejs/node/issues/35824 */\n          socket.on('error', e => {\n            this.trace('An incoming TLS connection closed with error: ' + e.message);\n          });\n        });\n      } else {\n        http2Server = http2.createServer(serverOptions);\n      }\n      http2Server.setTimeout(0, noop);\n      this._setupHandlers(http2Server);\n      return http2Server;\n    };\n    const bindSpecificPort = (addressList, portNum, previousCount) => {\n      if (addressList.length === 0) {\n        return Promise.resolve({\n          port: portNum,\n          count: previousCount\n        });\n      }\n      return Promise.all(addressList.map(address => {\n        this.trace('Attempting to bind ' + (0, subchannel_address_1.subchannelAddressToString)(address));\n        let addr;\n        if ((0, subchannel_address_1.isTcpSubchannelAddress)(address)) {\n          addr = {\n            host: address.host,\n            port: portNum\n          };\n        } else {\n          addr = address;\n        }\n        const http2Server = setupServer();\n        return new Promise((resolve, reject) => {\n          const onError = err => {\n            this.trace('Failed to bind ' + (0, subchannel_address_1.subchannelAddressToString)(address) + ' with error ' + err.message);\n            resolve(err);\n          };\n          http2Server.once('error', onError);\n          http2Server.listen(addr, () => {\n            if (this.shutdown) {\n              http2Server.close();\n              resolve(new Error('bindAsync failed because server is shutdown'));\n              return;\n            }\n            const boundAddress = http2Server.address();\n            let boundSubchannelAddress;\n            if (typeof boundAddress === 'string') {\n              boundSubchannelAddress = {\n                path: boundAddress\n              };\n            } else {\n              boundSubchannelAddress = {\n                host: boundAddress.address,\n                port: boundAddress.port\n              };\n            }\n            const channelzRef = (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress), () => {\n              return {\n                localAddress: boundSubchannelAddress,\n                remoteAddress: null,\n                security: null,\n                remoteName: null,\n                streamsStarted: 0,\n                streamsSucceeded: 0,\n                streamsFailed: 0,\n                messagesSent: 0,\n                messagesReceived: 0,\n                keepAlivesSent: 0,\n                lastLocalStreamCreatedTimestamp: null,\n                lastRemoteStreamCreatedTimestamp: null,\n                lastMessageSentTimestamp: null,\n                lastMessageReceivedTimestamp: null,\n                localFlowControlWindow: null,\n                remoteFlowControlWindow: null\n              };\n            }, this.channelzEnabled);\n            if (this.channelzEnabled) {\n              this.listenerChildrenTracker.refChild(channelzRef);\n            }\n            this.http2ServerList.push({\n              server: http2Server,\n              channelzRef: channelzRef\n            });\n            this.trace('Successfully bound ' + (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));\n            resolve('port' in boundSubchannelAddress ? boundSubchannelAddress.port : portNum);\n            http2Server.removeListener('error', onError);\n          });\n        });\n      })).then(results => {\n        let count = 0;\n        for (const result of results) {\n          if (typeof result === 'number') {\n            count += 1;\n            if (result !== portNum) {\n              throw new Error('Invalid state: multiple port numbers added from single address');\n            }\n          }\n        }\n        return {\n          port: portNum,\n          count: count + previousCount\n        };\n      });\n    };\n    const bindWildcardPort = addressList => {\n      if (addressList.length === 0) {\n        return Promise.resolve({\n          port: 0,\n          count: 0\n        });\n      }\n      const address = addressList[0];\n      const http2Server = setupServer();\n      return new Promise((resolve, reject) => {\n        const onError = err => {\n          this.trace('Failed to bind ' + (0, subchannel_address_1.subchannelAddressToString)(address) + ' with error ' + err.message);\n          resolve(bindWildcardPort(addressList.slice(1)));\n        };\n        http2Server.once('error', onError);\n        http2Server.listen(address, () => {\n          if (this.shutdown) {\n            http2Server.close();\n            resolve({\n              port: 0,\n              count: 0\n            });\n            return;\n          }\n          const boundAddress = http2Server.address();\n          const boundSubchannelAddress = {\n            host: boundAddress.address,\n            port: boundAddress.port\n          };\n          const channelzRef = (0, channelz_1.registerChannelzSocket)((0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress), () => {\n            return {\n              localAddress: boundSubchannelAddress,\n              remoteAddress: null,\n              security: null,\n              remoteName: null,\n              streamsStarted: 0,\n              streamsSucceeded: 0,\n              streamsFailed: 0,\n              messagesSent: 0,\n              messagesReceived: 0,\n              keepAlivesSent: 0,\n              lastLocalStreamCreatedTimestamp: null,\n              lastRemoteStreamCreatedTimestamp: null,\n              lastMessageSentTimestamp: null,\n              lastMessageReceivedTimestamp: null,\n              localFlowControlWindow: null,\n              remoteFlowControlWindow: null\n            };\n          }, this.channelzEnabled);\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.refChild(channelzRef);\n          }\n          this.http2ServerList.push({\n            server: http2Server,\n            channelzRef: channelzRef\n          });\n          this.trace('Successfully bound ' + (0, subchannel_address_1.subchannelAddressToString)(boundSubchannelAddress));\n          resolve(bindSpecificPort(addressList.slice(1), boundAddress.port, 1));\n          http2Server.removeListener('error', onError);\n        });\n      });\n    };\n    const resolverListener = {\n      onSuccessfulResolution: (addressList, serviceConfig, serviceConfigError) => {\n        // We only want one resolution result. Discard all future results\n        resolverListener.onSuccessfulResolution = () => {};\n        if (this.shutdown) {\n          deferredCallback(new Error(`bindAsync failed because server is shutdown`), 0);\n        }\n        if (addressList.length === 0) {\n          deferredCallback(new Error(`No addresses resolved for port ${port}`), 0);\n          return;\n        }\n        let bindResultPromise;\n        if ((0, subchannel_address_1.isTcpSubchannelAddress)(addressList[0])) {\n          if (addressList[0].port === 0) {\n            bindResultPromise = bindWildcardPort(addressList);\n          } else {\n            bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);\n          }\n        } else {\n          // Use an arbitrary non-zero port for non-TCP addresses\n          bindResultPromise = bindSpecificPort(addressList, 1, 0);\n        }\n        bindResultPromise.then(bindResult => {\n          if (bindResult.count === 0) {\n            const errorString = `No address added out of total ${addressList.length} resolved`;\n            logging.log(constants_1.LogVerbosity.ERROR, errorString);\n            deferredCallback(new Error(errorString), 0);\n          } else {\n            if (bindResult.count < addressList.length) {\n              logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);\n            }\n            deferredCallback(null, bindResult.port);\n          }\n        }, error => {\n          const errorString = `No address added out of total ${addressList.length} resolved`;\n          logging.log(constants_1.LogVerbosity.ERROR, errorString);\n          deferredCallback(new Error(errorString), 0);\n        });\n      },\n      onError: error => {\n        deferredCallback(new Error(error.details), 0);\n      }\n    };\n    const resolver = (0, resolver_1.createResolver)(portUri, resolverListener, this.options);\n    resolver.updateResolution();\n  }\n  forceShutdown() {\n    // Close the server if it is still running.\n    for (const {\n      server: http2Server,\n      channelzRef: ref\n    } of this.http2ServerList) {\n      if (http2Server.listening) {\n        http2Server.close(() => {\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.unrefChild(ref);\n            (0, channelz_1.unregisterChannelzRef)(ref);\n          }\n        });\n      }\n    }\n    this.started = false;\n    this.shutdown = true;\n    // Always destroy any available sessions. It's possible that one or more\n    // tryShutdown() calls are in progress. Don't wait on them to finish.\n    this.sessions.forEach((channelzInfo, session) => {\n      // Cast NGHTTP2_CANCEL to any because TypeScript doesn't seem to\n      // recognize destroy(code) as a valid signature.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      session.destroy(http2.constants.NGHTTP2_CANCEL);\n    });\n    this.sessions.clear();\n    if (this.channelzEnabled) {\n      (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n    }\n  }\n  register(name, handler, serialize, deserialize, type) {\n    if (this.handlers.has(name)) {\n      return false;\n    }\n    this.handlers.set(name, {\n      func: handler,\n      serialize,\n      deserialize,\n      type,\n      path: name\n    });\n    return true;\n  }\n  unregister(name) {\n    return this.handlers.delete(name);\n  }\n  start() {\n    if (this.http2ServerList.length === 0 || this.http2ServerList.every(({\n      server: http2Server\n    }) => http2Server.listening !== true)) {\n      throw new Error('server must be bound in order to start');\n    }\n    if (this.started === true) {\n      throw new Error('server is already started');\n    }\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Starting');\n    }\n    this.started = true;\n  }\n  tryShutdown(callback) {\n    const wrappedCallback = error => {\n      if (this.channelzEnabled) {\n        (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n      }\n      callback(error);\n    };\n    let pendingChecks = 0;\n    function maybeCallback() {\n      pendingChecks--;\n      if (pendingChecks === 0) {\n        wrappedCallback();\n      }\n    }\n    // Close the server if necessary.\n    this.started = false;\n    this.shutdown = true;\n    for (const {\n      server: http2Server,\n      channelzRef: ref\n    } of this.http2ServerList) {\n      if (http2Server.listening) {\n        pendingChecks++;\n        http2Server.close(() => {\n          if (this.channelzEnabled) {\n            this.listenerChildrenTracker.unrefChild(ref);\n            (0, channelz_1.unregisterChannelzRef)(ref);\n          }\n          maybeCallback();\n        });\n      }\n    }\n    this.sessions.forEach((channelzInfo, session) => {\n      if (!session.closed) {\n        pendingChecks += 1;\n        session.close(maybeCallback);\n      }\n    });\n    if (pendingChecks === 0) {\n      wrappedCallback();\n    }\n  }\n  addHttp2Port() {\n    throw new Error('Not yet implemented');\n  }\n  /**\n   * Get the channelz reference object for this server. The returned value is\n   * garbage if channelz is disabled for this server.\n   * @returns\n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n  _verifyContentType(stream, headers) {\n    const contentType = headers[http2.constants.HTTP2_HEADER_CONTENT_TYPE];\n    if (typeof contentType !== 'string' || !contentType.startsWith('application/grpc')) {\n      stream.respond({\n        [http2.constants.HTTP2_HEADER_STATUS]: http2.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE\n      }, {\n        endStream: true\n      });\n      return false;\n    }\n    return true;\n  }\n  _retrieveHandler(path) {\n    this.trace('Received call to method ' + path + ' at address ' + this.serverAddressString);\n    const handler = this.handlers.get(path);\n    if (handler === undefined) {\n      this.trace('No handler registered for method ' + path + '. Sending UNIMPLEMENTED status.');\n      return null;\n    }\n    return handler;\n  }\n  _respondWithError(err, stream, channelzSessionInfo = null) {\n    const call = new server_call_1.Http2ServerCallStream(stream, null, this.options);\n    if (err.code === undefined) {\n      err.code = constants_1.Status.INTERNAL;\n    }\n    if (this.channelzEnabled) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n    }\n    call.sendError(err);\n  }\n  _channelzHandler(stream, headers) {\n    const channelzSessionInfo = this.sessions.get(stream.session);\n    this.callTracker.addCallStarted();\n    channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallStarted();\n    if (!this._verifyContentType(stream, headers)) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n      return;\n    }\n    const path = headers[HTTP2_HEADER_PATH];\n    const handler = this._retrieveHandler(path);\n    if (!handler) {\n      this._respondWithError(getUnimplementedStatusResponse(path), stream, channelzSessionInfo);\n      return;\n    }\n    const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n    call.once('callEnd', code => {\n      if (code === constants_1.Status.OK) {\n        this.callTracker.addCallSucceeded();\n      } else {\n        this.callTracker.addCallFailed();\n      }\n    });\n    if (channelzSessionInfo) {\n      call.once('streamEnd', success => {\n        if (success) {\n          channelzSessionInfo.streamTracker.addCallSucceeded();\n        } else {\n          channelzSessionInfo.streamTracker.addCallFailed();\n        }\n      });\n      call.on('sendMessage', () => {\n        channelzSessionInfo.messagesSent += 1;\n        channelzSessionInfo.lastMessageSentTimestamp = new Date();\n      });\n      call.on('receiveMessage', () => {\n        channelzSessionInfo.messagesReceived += 1;\n        channelzSessionInfo.lastMessageReceivedTimestamp = new Date();\n      });\n    }\n    if (!this._runHandlerForCall(call, handler, headers)) {\n      this.callTracker.addCallFailed();\n      channelzSessionInfo === null || channelzSessionInfo === void 0 ? void 0 : channelzSessionInfo.streamTracker.addCallFailed();\n      call.sendError({\n        code: constants_1.Status.INTERNAL,\n        details: `Unknown handler type: ${handler.type}`\n      });\n    }\n  }\n  _streamHandler(stream, headers) {\n    if (this._verifyContentType(stream, headers) !== true) {\n      return;\n    }\n    const path = headers[HTTP2_HEADER_PATH];\n    const handler = this._retrieveHandler(path);\n    if (!handler) {\n      this._respondWithError(getUnimplementedStatusResponse(path), stream, null);\n      return;\n    }\n    const call = new server_call_1.Http2ServerCallStream(stream, handler, this.options);\n    if (!this._runHandlerForCall(call, handler, headers)) {\n      call.sendError({\n        code: constants_1.Status.INTERNAL,\n        details: `Unknown handler type: ${handler.type}`\n      });\n    }\n  }\n  _runHandlerForCall(call, handler, headers) {\n    var _a;\n    const metadata = call.receiveMetadata(headers);\n    const encoding = (_a = metadata.get('grpc-encoding')[0]) !== null && _a !== void 0 ? _a : 'identity';\n    metadata.remove('grpc-encoding');\n    const {\n      type\n    } = handler;\n    if (type === 'unary') {\n      handleUnary(call, handler, metadata, encoding);\n    } else if (type === 'clientStream') {\n      handleClientStreaming(call, handler, metadata, encoding);\n    } else if (type === 'serverStream') {\n      handleServerStreaming(call, handler, metadata, encoding);\n    } else if (type === 'bidi') {\n      handleBidiStreaming(call, handler, metadata, encoding);\n    } else {\n      return false;\n    }\n    return true;\n  }\n  _setupHandlers(http2Server) {\n    if (http2Server === null) {\n      return;\n    }\n    const serverAddress = http2Server.address();\n    let serverAddressString = 'null';\n    if (serverAddress) {\n      if (typeof serverAddress === 'string') {\n        serverAddressString = serverAddress;\n      } else {\n        serverAddressString = serverAddress.address + ':' + serverAddress.port;\n      }\n    }\n    this.serverAddressString = serverAddressString;\n    const handler = this.channelzEnabled ? this._channelzHandler : this._streamHandler;\n    http2Server.on('stream', handler.bind(this));\n    http2Server.on('session', session => {\n      var _a, _b, _c, _d, _e;\n      if (!this.started) {\n        session.destroy();\n        return;\n      }\n      const channelzRef = (0, channelz_1.registerChannelzSocket)((_a = session.socket.remoteAddress) !== null && _a !== void 0 ? _a : 'unknown', this.getChannelzSessionInfoGetter(session), this.channelzEnabled);\n      const channelzSessionInfo = {\n        ref: channelzRef,\n        streamTracker: new channelz_1.ChannelzCallTracker(),\n        messagesSent: 0,\n        messagesReceived: 0,\n        lastMessageSentTimestamp: null,\n        lastMessageReceivedTimestamp: null\n      };\n      this.sessions.set(session, channelzSessionInfo);\n      const clientAddress = session.socket.remoteAddress;\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Connection established by client ' + clientAddress);\n        this.sessionChildrenTracker.refChild(channelzRef);\n      }\n      let connectionAgeTimer = null;\n      let connectionAgeGraceTimer = null;\n      let sessionClosedByServer = false;\n      if (this.maxConnectionAgeMs !== UNLIMITED_CONNECTION_AGE_MS) {\n        // Apply a random jitter within a +/-10% range\n        const jitterMagnitude = this.maxConnectionAgeMs / 10;\n        const jitter = Math.random() * jitterMagnitude * 2 - jitterMagnitude;\n        connectionAgeTimer = (_c = (_b = setTimeout(() => {\n          var _a, _b;\n          sessionClosedByServer = true;\n          if (this.channelzEnabled) {\n            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by max connection age from ' + clientAddress);\n          }\n          try {\n            session.goaway(http2.constants.NGHTTP2_NO_ERROR, ~(1 << 31), Buffer.from('max_age'));\n          } catch (e) {\n            // The goaway can't be sent because the session is already closed\n            session.destroy();\n            return;\n          }\n          session.close();\n          /* Allow a grace period after sending the GOAWAY before forcibly\n           * closing the connection. */\n          if (this.maxConnectionAgeGraceMs !== UNLIMITED_CONNECTION_AGE_MS) {\n            connectionAgeGraceTimer = (_b = (_a = setTimeout(() => {\n              session.destroy();\n            }, this.maxConnectionAgeGraceMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n          }\n        }, this.maxConnectionAgeMs + jitter)).unref) === null || _c === void 0 ? void 0 : _c.call(_b);\n      }\n      const keeapliveTimeTimer = (_e = (_d = setInterval(() => {\n        var _a, _b;\n        const timeoutTImer = (_b = (_a = setTimeout(() => {\n          sessionClosedByServer = true;\n          if (this.channelzEnabled) {\n            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by keepalive timeout from ' + clientAddress);\n          }\n          session.close();\n        }, this.keepaliveTimeoutMs)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n        try {\n          session.ping((err, duration, payload) => {\n            clearTimeout(timeoutTImer);\n          });\n        } catch (e) {\n          // The ping can't be sent because the session is already closed\n          session.destroy();\n        }\n      }, this.keepaliveTimeMs)).unref) === null || _e === void 0 ? void 0 : _e.call(_d);\n      session.on('close', () => {\n        if (this.channelzEnabled) {\n          if (!sessionClosedByServer) {\n            this.channelzTrace.addTrace('CT_INFO', 'Connection dropped by client ' + clientAddress);\n          }\n          this.sessionChildrenTracker.unrefChild(channelzRef);\n          (0, channelz_1.unregisterChannelzRef)(channelzRef);\n        }\n        if (connectionAgeTimer) {\n          clearTimeout(connectionAgeTimer);\n        }\n        if (connectionAgeGraceTimer) {\n          clearTimeout(connectionAgeGraceTimer);\n        }\n        if (keeapliveTimeTimer) {\n          clearTimeout(keeapliveTimeTimer);\n        }\n        this.sessions.delete(session);\n      });\n    });\n  }\n}\nexports.Server = Server;\nasync function handleUnary(call, handler, metadata, encoding) {\n  try {\n    const request = await call.receiveUnaryMessage(encoding);\n    if (request === undefined || call.cancelled) {\n      return;\n    }\n    const emitter = new server_call_1.ServerUnaryCallImpl(call, metadata, request);\n    handler.func(emitter, (err, value, trailer, flags) => {\n      call.sendUnaryMessage(err, value, trailer, flags);\n    });\n  } catch (err) {\n    call.sendError(err);\n  }\n}\nfunction handleClientStreaming(call, handler, metadata, encoding) {\n  const stream = new server_call_1.ServerReadableStreamImpl(call, metadata, handler.deserialize, encoding);\n  function respond(err, value, trailer, flags) {\n    stream.destroy();\n    call.sendUnaryMessage(err, value, trailer, flags);\n  }\n  if (call.cancelled) {\n    return;\n  }\n  stream.on('error', respond);\n  handler.func(stream, respond);\n}\nasync function handleServerStreaming(call, handler, metadata, encoding) {\n  try {\n    const request = await call.receiveUnaryMessage(encoding);\n    if (request === undefined || call.cancelled) {\n      return;\n    }\n    const stream = new server_call_1.ServerWritableStreamImpl(call, metadata, handler.serialize, request);\n    handler.func(stream);\n  } catch (err) {\n    call.sendError(err);\n  }\n}\nfunction handleBidiStreaming(call, handler, metadata, encoding) {\n  const stream = new server_call_1.ServerDuplexStreamImpl(call, metadata, handler.serialize, handler.deserialize, encoding);\n  if (call.cancelled) {\n    return;\n  }\n  handler.func(stream);\n}\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StatusBuilder = void 0;\n/**\n * A builder for gRPC status objects.\n */\nclass StatusBuilder {\n  constructor() {\n    this.code = null;\n    this.details = null;\n    this.metadata = null;\n  }\n  /**\n   * Adds a status code to the builder.\n   */\n  withCode(code) {\n    this.code = code;\n    return this;\n  }\n  /**\n   * Adds details to the builder.\n   */\n  withDetails(details) {\n    this.details = details;\n    return this;\n  }\n  /**\n   * Adds metadata to the builder.\n   */\n  withMetadata(metadata) {\n    this.metadata = metadata;\n    return this;\n  }\n  /**\n   * Builds the status object.\n   */\n  build() {\n    const status = {};\n    if (this.code !== null) {\n      status.code = this.code;\n    }\n    if (this.details !== null) {\n      status.details = this.details;\n    }\n    if (this.metadata !== null) {\n      status.metadata = this.metadata;\n    }\n    return status;\n  }\n}\nexports.StatusBuilder = StatusBuilder;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isDuration = exports.durationToMs = exports.msToDuration = void 0;\nfunction msToDuration(millis) {\n  return {\n    seconds: millis / 1000 | 0,\n    nanos: millis % 1000 * 1000000 | 0\n  };\n}\nexports.msToDuration = msToDuration;\nfunction durationToMs(duration) {\n  return duration.seconds * 1000 + duration.nanos / 1000000 | 0;\n}\nexports.durationToMs = durationToMs;\nfunction isDuration(value) {\n  return typeof value.seconds === 'number' && typeof value.nanos === 'number';\n}\nexports.isDuration = isDuration;\n", "\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst duration_1 = require(\"./duration\");\nconst experimental_1 = require(\"./experimental\");\nconst load_balancer_1 = require(\"./load-balancer\");\nconst load_balancer_child_handler_1 = require(\"./load-balancer-child-handler\");\nconst picker_1 = require(\"./picker\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst subchannel_interface_1 = require(\"./subchannel-interface\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'outlier_detection';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'outlier_detection';\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : 'true') === 'true';\nconst defaultSuccessRateEjectionConfig = {\n  stdev_factor: 1900,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 100\n};\nconst defaultFailurePercentageEjectionConfig = {\n  threshold: 85,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 50\n};\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\n  if (fieldName in obj && typeof obj[fieldName] !== expectedType) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\n  }\n}\nfunction validatePositiveDuration(obj, fieldName, objectName) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  if (fieldName in obj) {\n    if (!(0, duration_1.isDuration)(obj[fieldName])) {\n      throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\n    }\n    if (!(obj[fieldName].seconds >= 0 && obj[fieldName].seconds <= 315576000000 && obj[fieldName].nanos >= 0 && obj[fieldName].nanos <= 999999999)) {\n      throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\n    }\n  }\n}\nfunction validatePercentage(obj, fieldName, objectName) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  validateFieldType(obj, fieldName, 'number', objectName);\n  if (fieldName in obj && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\n    throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\n  }\n}\nclass OutlierDetectionLoadBalancingConfig {\n  constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {\n    this.childPolicy = childPolicy;\n    if (childPolicy.length > 0 && childPolicy[0].getLoadBalancerName() === 'pick_first') {\n      throw new Error('outlier_detection LB policy cannot have a pick_first child policy');\n    }\n    this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\n    this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\n    this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\n    this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\n    this.successRateEjection = successRateEjection ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\n    this.failurePercentageEjection = failurePercentageEjection ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\n  }\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  toJsonObject() {\n    return {\n      interval: (0, duration_1.msToDuration)(this.intervalMs),\n      base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),\n      max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),\n      max_ejection_percent: this.maxEjectionPercent,\n      success_rate_ejection: this.successRateEjection,\n      failure_percentage_ejection: this.failurePercentageEjection,\n      child_policy: this.childPolicy.map(policy => policy.toJsonObject())\n    };\n  }\n  getIntervalMs() {\n    return this.intervalMs;\n  }\n  getBaseEjectionTimeMs() {\n    return this.baseEjectionTimeMs;\n  }\n  getMaxEjectionTimeMs() {\n    return this.maxEjectionTimeMs;\n  }\n  getMaxEjectionPercent() {\n    return this.maxEjectionPercent;\n  }\n  getSuccessRateEjectionConfig() {\n    return this.successRateEjection;\n  }\n  getFailurePercentageEjectionConfig() {\n    return this.failurePercentageEjection;\n  }\n  getChildPolicy() {\n    return this.childPolicy;\n  }\n  copyWithChildPolicy(childPolicy) {\n    return new OutlierDetectionLoadBalancingConfig(this.intervalMs, this.baseEjectionTimeMs, this.maxEjectionTimeMs, this.maxEjectionPercent, this.successRateEjection, this.failurePercentageEjection, childPolicy);\n  }\n  static createFromJson(obj) {\n    var _a;\n    validatePositiveDuration(obj, 'interval');\n    validatePositiveDuration(obj, 'base_ejection_time');\n    validatePositiveDuration(obj, 'max_ejection_time');\n    validatePercentage(obj, 'max_ejection_percent');\n    if ('success_rate_ejection' in obj) {\n      if (typeof obj.success_rate_ejection !== 'object') {\n        throw new Error('outlier detection config success_rate_ejection must be an object');\n      }\n      validateFieldType(obj.success_rate_ejection, 'stdev_factor', 'number', 'success_rate_ejection');\n      validatePercentage(obj.success_rate_ejection, 'enforcement_percentage', 'success_rate_ejection');\n      validateFieldType(obj.success_rate_ejection, 'minimum_hosts', 'number', 'success_rate_ejection');\n      validateFieldType(obj.success_rate_ejection, 'request_volume', 'number', 'success_rate_ejection');\n    }\n    if ('failure_percentage_ejection' in obj) {\n      if (typeof obj.failure_percentage_ejection !== 'object') {\n        throw new Error('outlier detection config failure_percentage_ejection must be an object');\n      }\n      validatePercentage(obj.failure_percentage_ejection, 'threshold', 'failure_percentage_ejection');\n      validatePercentage(obj.failure_percentage_ejection, 'enforcement_percentage', 'failure_percentage_ejection');\n      validateFieldType(obj.failure_percentage_ejection, 'minimum_hosts', 'number', 'failure_percentage_ejection');\n      validateFieldType(obj.failure_percentage_ejection, 'request_volume', 'number', 'failure_percentage_ejection');\n    }\n    return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, obj.child_policy.map(load_balancer_1.validateLoadBalancingConfig));\n  }\n}\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n  constructor(childSubchannel, mapEntry) {\n    super(childSubchannel);\n    this.mapEntry = mapEntry;\n    this.stateListeners = [];\n    this.ejected = false;\n    this.refCount = 0;\n    this.childSubchannelState = childSubchannel.getConnectivityState();\n    childSubchannel.addConnectivityStateListener((subchannel, previousState, newState, keepaliveTime) => {\n      this.childSubchannelState = newState;\n      if (!this.ejected) {\n        for (const listener of this.stateListeners) {\n          listener(this, previousState, newState, keepaliveTime);\n        }\n      }\n    });\n  }\n  getConnectivityState() {\n    if (this.ejected) {\n      return connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE;\n    } else {\n      return this.childSubchannelState;\n    }\n  }\n  /**\n   * Add a listener function to be called whenever the wrapper's\n   * connectivity state changes.\n   * @param listener\n   */\n  addConnectivityStateListener(listener) {\n    this.stateListeners.push(listener);\n  }\n  /**\n   * Remove a listener previously added with `addConnectivityStateListener`\n   * @param listener A reference to a function previously passed to\n   *     `addConnectivityStateListener`\n   */\n  removeConnectivityStateListener(listener) {\n    const listenerIndex = this.stateListeners.indexOf(listener);\n    if (listenerIndex > -1) {\n      this.stateListeners.splice(listenerIndex, 1);\n    }\n  }\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      if (this.mapEntry) {\n        const index = this.mapEntry.subchannelWrappers.indexOf(this);\n        if (index >= 0) {\n          this.mapEntry.subchannelWrappers.splice(index, 1);\n        }\n      }\n    }\n  }\n  eject() {\n    this.ejected = true;\n    for (const listener of this.stateListeners) {\n      listener(this, this.childSubchannelState, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, -1);\n    }\n  }\n  uneject() {\n    this.ejected = false;\n    for (const listener of this.stateListeners) {\n      listener(this, connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, this.childSubchannelState, -1);\n    }\n  }\n  getMapEntry() {\n    return this.mapEntry;\n  }\n  getWrappedSubchannel() {\n    return this.child;\n  }\n}\nfunction createEmptyBucket() {\n  return {\n    success: 0,\n    failure: 0\n  };\n}\nclass CallCounter {\n  constructor() {\n    this.activeBucket = createEmptyBucket();\n    this.inactiveBucket = createEmptyBucket();\n  }\n  addSuccess() {\n    this.activeBucket.success += 1;\n  }\n  addFailure() {\n    this.activeBucket.failure += 1;\n  }\n  switchBuckets() {\n    this.inactiveBucket = this.activeBucket;\n    this.activeBucket = createEmptyBucket();\n  }\n  getLastSuccesses() {\n    return this.inactiveBucket.success;\n  }\n  getLastFailures() {\n    return this.inactiveBucket.failure;\n  }\n}\nclass OutlierDetectionPicker {\n  constructor(wrappedPicker, countCalls) {\n    this.wrappedPicker = wrappedPicker;\n    this.countCalls = countCalls;\n  }\n  pick(pickArgs) {\n    const wrappedPick = this.wrappedPicker.pick(pickArgs);\n    if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\n      const subchannelWrapper = wrappedPick.subchannel;\n      const mapEntry = subchannelWrapper.getMapEntry();\n      if (mapEntry) {\n        let onCallEnded = wrappedPick.onCallEnded;\n        if (this.countCalls) {\n          onCallEnded = statusCode => {\n            var _a;\n            if (statusCode === constants_1.Status.OK) {\n              mapEntry.counter.addSuccess();\n            } else {\n              mapEntry.counter.addFailure();\n            }\n            (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);\n          };\n        }\n        return Object.assign(Object.assign({}, wrappedPick), {\n          subchannel: subchannelWrapper.getWrappedSubchannel(),\n          onCallEnded: onCallEnded\n        });\n      } else {\n        return Object.assign(Object.assign({}, wrappedPick), {\n          subchannel: subchannelWrapper.getWrappedSubchannel()\n        });\n      }\n    } else {\n      return wrappedPick;\n    }\n  }\n}\nclass OutlierDetectionLoadBalancer {\n  constructor(channelControlHelper) {\n    this.addressMap = new Map();\n    this.latestConfig = null;\n    this.timerStartTime = null;\n    this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {\n      createSubchannel: (subchannelAddress, subchannelArgs) => {\n        const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n        const mapEntry = this.addressMap.get((0, subchannel_address_1.subchannelAddressToString)(subchannelAddress));\n        const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\n        if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\n          // If the address is ejected, propagate that to the new subchannel wrapper\n          subchannelWrapper.eject();\n        }\n        mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\n        return subchannelWrapper;\n      },\n      updateState: (connectivityState, picker) => {\n        if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\n          channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()));\n        } else {\n          channelControlHelper.updateState(connectivityState, picker);\n        }\n      }\n    }));\n    this.ejectionTimer = setInterval(() => {}, 0);\n    clearInterval(this.ejectionTimer);\n  }\n  isCountingEnabled() {\n    return this.latestConfig !== null && (this.latestConfig.getSuccessRateEjectionConfig() !== null || this.latestConfig.getFailurePercentageEjectionConfig() !== null);\n  }\n  getCurrentEjectionPercent() {\n    let ejectionCount = 0;\n    for (const mapEntry of this.addressMap.values()) {\n      if (mapEntry.currentEjectionTimestamp !== null) {\n        ejectionCount += 1;\n      }\n    }\n    return ejectionCount * 100 / this.addressMap.size;\n  }\n  runSuccessRateCheck(ejectionTimestamp) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n    if (!successRateConfig) {\n      return;\n    }\n    trace('Running success rate check');\n    // Step 1\n    const targetRequestVolume = successRateConfig.request_volume;\n    let addresesWithTargetVolume = 0;\n    const successRates = [];\n    for (const [address, mapEntry] of this.addressMap) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Stats for ' + address + ': successes=' + successes + ' failures=' + failures + ' targetRequestVolume=' + targetRequestVolume);\n      if (successes + failures >= targetRequestVolume) {\n        addresesWithTargetVolume += 1;\n        successRates.push(successes / (successes + failures));\n      }\n    }\n    trace('Found ' + addresesWithTargetVolume + ' success rate candidates; currentEjectionPercent=' + this.getCurrentEjectionPercent() + ' successRates=[' + successRates + ']');\n    if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n      return;\n    }\n    // Step 2\n    const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;\n    let successRateDeviationSum = 0;\n    for (const rate of successRates) {\n      const deviation = rate - successRateMean;\n      successRateDeviationSum += deviation * deviation;\n    }\n    const successRateVariance = successRateDeviationSum / successRates.length;\n    const successRateStdev = Math.sqrt(successRateVariance);\n    const ejectionThreshold = successRateMean - successRateStdev * (successRateConfig.stdev_factor / 1000);\n    trace('stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold);\n    // Step 3\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      // Step 3.i\n      if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n        break;\n      }\n      // Step 3.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures < targetRequestVolume) {\n        continue;\n      }\n      // Step 3.iii\n      const successRate = successes / (successes + failures);\n      trace('Checking candidate ' + address + ' successRate=' + successRate);\n      if (successRate < ejectionThreshold) {\n        const randomNumber = Math.random() * 100;\n        trace('Candidate ' + address + ' randomNumber=' + randomNumber + ' enforcement_percentage=' + successRateConfig.enforcement_percentage);\n        if (randomNumber < successRateConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n  runFailurePercentageCheck(ejectionTimestamp) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\n    if (!failurePercentageConfig) {\n      return;\n    }\n    trace('Running failure percentage check. threshold=' + failurePercentageConfig.threshold + ' request volume threshold=' + failurePercentageConfig.request_volume);\n    // Step 1\n    let addressesWithTargetVolume = 0;\n    for (const mapEntry of this.addressMap.values()) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures >= failurePercentageConfig.request_volume) {\n        addressesWithTargetVolume += 1;\n      }\n    }\n    if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n      return;\n    }\n    // Step 2\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      // Step 2.i\n      if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n        break;\n      }\n      // Step 2.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Candidate successes=' + successes + ' failures=' + failures);\n      if (successes + failures < failurePercentageConfig.request_volume) {\n        continue;\n      }\n      // Step 2.iii\n      const failurePercentage = failures * 100 / (failures + successes);\n      if (failurePercentage > failurePercentageConfig.threshold) {\n        const randomNumber = Math.random() * 100;\n        trace('Candidate ' + address + ' randomNumber=' + randomNumber + ' enforcement_percentage=' + failurePercentageConfig.enforcement_percentage);\n        if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n  eject(mapEntry, ejectionTimestamp) {\n    mapEntry.currentEjectionTimestamp = new Date();\n    mapEntry.ejectionTimeMultiplier += 1;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.eject();\n    }\n  }\n  uneject(mapEntry) {\n    mapEntry.currentEjectionTimestamp = null;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.uneject();\n    }\n  }\n  switchAllBuckets() {\n    for (const mapEntry of this.addressMap.values()) {\n      mapEntry.counter.switchBuckets();\n    }\n  }\n  startTimer(delayMs) {\n    var _a, _b;\n    this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\n    (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  runChecks() {\n    const ejectionTimestamp = new Date();\n    trace('Ejection timer running');\n    this.switchAllBuckets();\n    if (!this.latestConfig) {\n      return;\n    }\n    this.timerStartTime = ejectionTimestamp;\n    this.startTimer(this.latestConfig.getIntervalMs());\n    this.runSuccessRateCheck(ejectionTimestamp);\n    this.runFailurePercentageCheck(ejectionTimestamp);\n    for (const [address, mapEntry] of this.addressMap.entries()) {\n      if (mapEntry.currentEjectionTimestamp === null) {\n        if (mapEntry.ejectionTimeMultiplier > 0) {\n          mapEntry.ejectionTimeMultiplier -= 1;\n        }\n      } else {\n        const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n        const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n        const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\n        returnTime.setMilliseconds(returnTime.getMilliseconds() + Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\n        if (returnTime < new Date()) {\n          trace('Unejecting ' + address);\n          this.uneject(mapEntry);\n        }\n      }\n    }\n  }\n  updateAddressList(addressList, lbConfig, attributes) {\n    if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n      return;\n    }\n    const subchannelAddresses = new Set();\n    for (const address of addressList) {\n      subchannelAddresses.add((0, subchannel_address_1.subchannelAddressToString)(address));\n    }\n    for (const address of subchannelAddresses) {\n      if (!this.addressMap.has(address)) {\n        trace('Adding map entry for ' + address);\n        this.addressMap.set(address, {\n          counter: new CallCounter(),\n          currentEjectionTimestamp: null,\n          ejectionTimeMultiplier: 0,\n          subchannelWrappers: []\n        });\n      }\n    }\n    for (const key of this.addressMap.keys()) {\n      if (!subchannelAddresses.has(key)) {\n        trace('Removing map entry for ' + key);\n        this.addressMap.delete(key);\n      }\n    }\n    const childPolicy = (0, load_balancer_1.getFirstUsableConfig)(lbConfig.getChildPolicy(), true);\n    this.childBalancer.updateAddressList(addressList, childPolicy, attributes);\n    if (lbConfig.getSuccessRateEjectionConfig() || lbConfig.getFailurePercentageEjectionConfig()) {\n      if (this.timerStartTime) {\n        trace('Previous timer existed. Replacing timer');\n        clearTimeout(this.ejectionTimer);\n        const remainingDelay = lbConfig.getIntervalMs() - (new Date().getTime() - this.timerStartTime.getTime());\n        this.startTimer(remainingDelay);\n      } else {\n        trace('Starting new timer');\n        this.timerStartTime = new Date();\n        this.startTimer(lbConfig.getIntervalMs());\n        this.switchAllBuckets();\n      }\n    } else {\n      trace('Counting disabled. Cancelling timer.');\n      this.timerStartTime = null;\n      clearTimeout(this.ejectionTimer);\n      for (const mapEntry of this.addressMap.values()) {\n        this.uneject(mapEntry);\n        mapEntry.ejectionTimeMultiplier = 0;\n      }\n    }\n    this.latestConfig = lbConfig;\n  }\n  exitIdle() {\n    this.childBalancer.exitIdle();\n  }\n  resetBackoff() {\n    this.childBalancer.resetBackoff();\n  }\n  destroy() {\n    clearTimeout(this.ejectionTimer);\n    this.childBalancer.destroy();\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\nfunction setup() {\n  if (OUTLIER_DETECTION_ENABLED) {\n    (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\n  }\n}\nexports.setup = setup;\n", "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OutlierDetectionLoadBalancingConfig = exports.BaseSubchannelWrapper = exports.registerAdminService = exports.FilterStackFactory = exports.BaseFilter = exports.PickResultType = exports.QueuePicker = exports.UnavailablePicker = exports.ChildLoadBalancerHandler = exports.subchannelAddressToString = exports.validateLoadBalancingConfig = exports.getFirstUsableConfig = exports.registerLoadBalancerType = exports.createChildChannelControlHelper = exports.BackoffTimeout = exports.durationToMs = exports.uriToString = exports.createResolver = exports.registerResolver = exports.log = exports.trace = void 0;\nvar logging_1 = require(\"./logging\");\nObject.defineProperty(exports, \"trace\", {\n  enumerable: true,\n  get: function () {\n    return logging_1.trace;\n  }\n});\nObject.defineProperty(exports, \"log\", {\n  enumerable: true,\n  get: function () {\n    return logging_1.log;\n  }\n});\nvar resolver_1 = require(\"./resolver\");\nObject.defineProperty(exports, \"registerResolver\", {\n  enumerable: true,\n  get: function () {\n    return resolver_1.registerResolver;\n  }\n});\nObject.defineProperty(exports, \"createResolver\", {\n  enumerable: true,\n  get: function () {\n    return resolver_1.createResolver;\n  }\n});\nvar uri_parser_1 = require(\"./uri-parser\");\nObject.defineProperty(exports, \"uriToString\", {\n  enumerable: true,\n  get: function () {\n    return uri_parser_1.uriToString;\n  }\n});\nvar duration_1 = require(\"./duration\");\nObject.defineProperty(exports, \"durationToMs\", {\n  enumerable: true,\n  get: function () {\n    return duration_1.durationToMs;\n  }\n});\nvar backoff_timeout_1 = require(\"./backoff-timeout\");\nObject.defineProperty(exports, \"BackoffTimeout\", {\n  enumerable: true,\n  get: function () {\n    return backoff_timeout_1.BackoffTimeout;\n  }\n});\nvar load_balancer_1 = require(\"./load-balancer\");\nObject.defineProperty(exports, \"createChildChannelControlHelper\", {\n  enumerable: true,\n  get: function () {\n    return load_balancer_1.createChildChannelControlHelper;\n  }\n});\nObject.defineProperty(exports, \"registerLoadBalancerType\", {\n  enumerable: true,\n  get: function () {\n    return load_balancer_1.registerLoadBalancerType;\n  }\n});\nObject.defineProperty(exports, \"getFirstUsableConfig\", {\n  enumerable: true,\n  get: function () {\n    return load_balancer_1.getFirstUsableConfig;\n  }\n});\nObject.defineProperty(exports, \"validateLoadBalancingConfig\", {\n  enumerable: true,\n  get: function () {\n    return load_balancer_1.validateLoadBalancingConfig;\n  }\n});\nvar subchannel_address_1 = require(\"./subchannel-address\");\nObject.defineProperty(exports, \"subchannelAddressToString\", {\n  enumerable: true,\n  get: function () {\n    return subchannel_address_1.subchannelAddressToString;\n  }\n});\nvar load_balancer_child_handler_1 = require(\"./load-balancer-child-handler\");\nObject.defineProperty(exports, \"ChildLoadBalancerHandler\", {\n  enumerable: true,\n  get: function () {\n    return load_balancer_child_handler_1.ChildLoadBalancerHandler;\n  }\n});\nvar picker_1 = require(\"./picker\");\nObject.defineProperty(exports, \"UnavailablePicker\", {\n  enumerable: true,\n  get: function () {\n    return picker_1.UnavailablePicker;\n  }\n});\nObject.defineProperty(exports, \"QueuePicker\", {\n  enumerable: true,\n  get: function () {\n    return picker_1.QueuePicker;\n  }\n});\nObject.defineProperty(exports, \"PickResultType\", {\n  enumerable: true,\n  get: function () {\n    return picker_1.PickResultType;\n  }\n});\nvar filter_1 = require(\"./filter\");\nObject.defineProperty(exports, \"BaseFilter\", {\n  enumerable: true,\n  get: function () {\n    return filter_1.BaseFilter;\n  }\n});\nvar filter_stack_1 = require(\"./filter-stack\");\nObject.defineProperty(exports, \"FilterStackFactory\", {\n  enumerable: true,\n  get: function () {\n    return filter_stack_1.FilterStackFactory;\n  }\n});\nvar admin_1 = require(\"./admin\");\nObject.defineProperty(exports, \"registerAdminService\", {\n  enumerable: true,\n  get: function () {\n    return admin_1.registerAdminService;\n  }\n});\nvar subchannel_interface_1 = require(\"./subchannel-interface\");\nObject.defineProperty(exports, \"BaseSubchannelWrapper\", {\n  enumerable: true,\n  get: function () {\n    return subchannel_interface_1.BaseSubchannelWrapper;\n  }\n});\nvar load_balancer_outlier_detection_1 = require(\"./load-balancer-outlier-detection\");\nObject.defineProperty(exports, \"OutlierDetectionLoadBalancingConfig\", {\n  enumerable: true,\n  get: function () {\n    return load_balancer_outlier_detection_1.OutlierDetectionLoadBalancingConfig;\n  }\n});\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\nconst resolver_1 = require(\"./resolver\");\nclass UdsResolver {\n  constructor(target, listener, channelOptions) {\n    this.listener = listener;\n    this.addresses = [];\n    this.hasReturnedResult = false;\n    let path;\n    if (target.authority === '') {\n      path = '/' + target.path;\n    } else {\n      path = target.path;\n    }\n    this.addresses = [{\n      path\n    }];\n  }\n  updateResolution() {\n    if (!this.hasReturnedResult) {\n      this.hasReturnedResult = true;\n      process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});\n    }\n  }\n  destroy() {\n    // This resolver owns no resources, so we do nothing here.\n  }\n  static getDefaultAuthority(target) {\n    return 'localhost';\n  }\n}\nfunction setup() {\n  (0, resolver_1.registerResolver)('unix', UdsResolver);\n}\nexports.setup = setup;\n", "\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\nconst net_1 = require(\"net\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst resolver_1 = require(\"./resolver\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'ip_resolver';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nclass IpResolver {\n  constructor(target, listener, channelOptions) {\n    var _a;\n    this.listener = listener;\n    this.addresses = [];\n    this.error = null;\n    this.hasReturnedResult = false;\n    trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n    const addresses = [];\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new metadata_1.Metadata()\n      };\n      return;\n    }\n    const pathList = target.path.split(',');\n    for (const path of pathList) {\n      const hostPort = (0, uri_parser_1.splitHostPort)(path);\n      if (hostPort === null) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      if (target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host) || target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host)) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      addresses.push({\n        host: hostPort.host,\n        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n      });\n    }\n    this.addresses = addresses;\n    trace('Parsed ' + target.scheme + ' address list ' + this.addresses);\n  }\n  updateResolution() {\n    if (!this.hasReturnedResult) {\n      this.hasReturnedResult = true;\n      process.nextTick(() => {\n        if (this.error) {\n          this.listener.onError(this.error);\n        } else {\n          this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});\n        }\n      });\n    }\n  }\n  destroy() {\n    this.hasReturnedResult = false;\n  }\n  static getDefaultAuthority(target) {\n    return target.path.split(',')[0];\n  }\n}\nfunction setup() {\n  (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);\n  (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);\n}\nexports.setup = setup;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.PickFirstLoadBalancer = exports.shuffled = exports.PickFirstLoadBalancingConfig = void 0;\nconst load_balancer_1 = require(\"./load-balancer\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst picker_1 = require(\"./picker\");\nconst logging = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst TRACER_NAME = 'pick_first';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'pick_first';\n/**\n * Delay after starting a connection on a subchannel before starting a\n * connection on the next subchannel in the list, for Happy Eyeballs algorithm.\n */\nconst CONNECTION_DELAY_INTERVAL_MS = 250;\nclass PickFirstLoadBalancingConfig {\n  constructor(shuffleAddressList) {\n    this.shuffleAddressList = shuffleAddressList;\n  }\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  toJsonObject() {\n    return {\n      [TYPE_NAME]: {\n        shuffleAddressList: this.shuffleAddressList\n      }\n    };\n  }\n  getShuffleAddressList() {\n    return this.shuffleAddressList;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static createFromJson(obj) {\n    if ('shuffleAddressList' in obj && !(typeof obj.shuffleAddressList === 'boolean')) {\n      throw new Error('pick_first config field shuffleAddressList must be a boolean if provided');\n    }\n    return new PickFirstLoadBalancingConfig(obj.shuffleAddressList === true);\n  }\n}\nexports.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;\n/**\n * Picker for a `PickFirstLoadBalancer` in the READY state. Always returns the\n * picked subchannel.\n */\nclass PickFirstPicker {\n  constructor(subchannel) {\n    this.subchannel = subchannel;\n  }\n  pick(pickArgs) {\n    return {\n      pickResultType: picker_1.PickResultType.COMPLETE,\n      subchannel: this.subchannel,\n      status: null,\n      onCallStarted: null,\n      onCallEnded: null\n    };\n  }\n}\n/**\n * Return a new array with the elements of the input array in a random order\n * @param list The input array\n * @returns A shuffled array of the elements of list\n */\nfunction shuffled(list) {\n  const result = list.slice();\n  for (let i = result.length - 1; i > 1; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = result[i];\n    result[i] = result[j];\n    result[j] = temp;\n  }\n  return result;\n}\nexports.shuffled = shuffled;\nclass PickFirstLoadBalancer {\n  /**\n   * Load balancer that attempts to connect to each backend in the address list\n   * in order, and picks the first one that connects, using it for every\n   * request.\n   * @param channelControlHelper `ChannelControlHelper` instance provided by\n   *     this load balancer's owner.\n   */\n  constructor(channelControlHelper) {\n    this.channelControlHelper = channelControlHelper;\n    /**\n     * The list of subchannels this load balancer is currently attempting to\n     * connect to.\n     */\n    this.children = [];\n    /**\n     * The current connectivity state of the load balancer.\n     */\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    /**\n     * The index within the `subchannels` array of the subchannel with the most\n     * recently started connection attempt.\n     */\n    this.currentSubchannelIndex = 0;\n    /**\n     * The currently picked subchannel used for making calls. Populated if\n     * and only if the load balancer's current state is READY. In that case,\n     * the subchannel's current state is also READY.\n     */\n    this.currentPick = null;\n    /**\n     * Listener callback attached to each subchannel in the `subchannels` list\n     * while establishing a connection.\n     */\n    this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {\n      this.onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage);\n    };\n    this.triedAllSubchannels = false;\n    /**\n     * The LB policy enters sticky TRANSIENT_FAILURE mode when all\n     * subchannels have failed to connect at least once, and it stays in that\n     * mode until a connection attempt is successful. While in sticky TF mode,\n     * the LB policy continuously attempts to connect to all of its subchannels.\n     */\n    this.stickyTransientFailureMode = false;\n    /**\n     * Indicates whether we called channelControlHelper.requestReresolution since\n     * the last call to updateAddressList\n     */\n    this.requestedResolutionSinceLastUpdate = false;\n    /**\n     * The most recent error reported by any subchannel as it transitioned to\n     * TRANSIENT_FAILURE.\n     */\n    this.lastError = null;\n    this.latestAddressList = null;\n    this.connectionDelayTimeout = setTimeout(() => {}, 0);\n    clearTimeout(this.connectionDelayTimeout);\n  }\n  allChildrenHaveReportedTF() {\n    return this.children.every(child => child.hasReportedTransientFailure);\n  }\n  calculateAndReportNewState() {\n    if (this.currentPick) {\n      this.updateState(connectivity_state_1.ConnectivityState.READY, new PickFirstPicker(this.currentPick));\n    } else if (this.children.length === 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n    } else {\n      if (this.stickyTransientFailureMode) {\n        this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n          details: `No connection established. Last error: ${this.lastError}`\n        }));\n      } else {\n        this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n      }\n    }\n  }\n  requestReresolution() {\n    this.requestedResolutionSinceLastUpdate = true;\n    this.channelControlHelper.requestReresolution();\n  }\n  maybeEnterStickyTransientFailureMode() {\n    if (!this.allChildrenHaveReportedTF()) {\n      return;\n    }\n    if (!this.requestedResolutionSinceLastUpdate) {\n      /* Each time we get an update we reset each subchannel's\n       * hasReportedTransientFailure flag, so the next time we get to this\n       * point after that, each subchannel has reported TRANSIENT_FAILURE\n       * at least once since then. That is the trigger for requesting\n       * reresolution, whether or not the LB policy is already in sticky TF\n       * mode. */\n      this.requestReresolution();\n    }\n    if (this.stickyTransientFailureMode) {\n      return;\n    }\n    this.stickyTransientFailureMode = true;\n    for (const {\n      subchannel\n    } of this.children) {\n      subchannel.startConnecting();\n    }\n    this.calculateAndReportNewState();\n  }\n  removeCurrentPick() {\n    if (this.currentPick !== null) {\n      /* Unref can cause a state change, which can cause a change in the value\n       * of this.currentPick, so we hold a local reference to make sure that\n       * does not impact this function. */\n      const currentPick = this.currentPick;\n      this.currentPick = null;\n      currentPick.unref();\n      currentPick.removeConnectivityStateListener(this.subchannelStateListener);\n      this.channelControlHelper.removeChannelzChild(currentPick.getChannelzRef());\n    }\n  }\n  onSubchannelStateUpdate(subchannel, previousState, newState, errorMessage) {\n    var _a;\n    if ((_a = this.currentPick) === null || _a === void 0 ? void 0 : _a.realSubchannelEquals(subchannel)) {\n      if (newState !== connectivity_state_1.ConnectivityState.READY) {\n        this.removeCurrentPick();\n        this.calculateAndReportNewState();\n        this.requestReresolution();\n      }\n      return;\n    }\n    for (const [index, child] of this.children.entries()) {\n      if (subchannel.realSubchannelEquals(child.subchannel)) {\n        if (newState === connectivity_state_1.ConnectivityState.READY) {\n          this.pickSubchannel(child.subchannel);\n        }\n        if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n          child.hasReportedTransientFailure = true;\n          if (errorMessage) {\n            this.lastError = errorMessage;\n          }\n          this.maybeEnterStickyTransientFailureMode();\n          if (index === this.currentSubchannelIndex) {\n            this.startNextSubchannelConnecting(index + 1);\n          }\n        }\n        child.subchannel.startConnecting();\n        return;\n      }\n    }\n  }\n  startNextSubchannelConnecting(startIndex) {\n    clearTimeout(this.connectionDelayTimeout);\n    if (this.triedAllSubchannels) {\n      return;\n    }\n    for (const [index, child] of this.children.entries()) {\n      if (index >= startIndex) {\n        const subchannelState = child.subchannel.getConnectivityState();\n        if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.CONNECTING) {\n          this.startConnecting(index);\n          return;\n        }\n      }\n    }\n    this.triedAllSubchannels = true;\n    this.maybeEnterStickyTransientFailureMode();\n  }\n  /**\n   * Have a single subchannel in the `subchannels` list start connecting.\n   * @param subchannelIndex The index into the `subchannels` list.\n   */\n  startConnecting(subchannelIndex) {\n    var _a, _b;\n    clearTimeout(this.connectionDelayTimeout);\n    this.currentSubchannelIndex = subchannelIndex;\n    if (this.children[subchannelIndex].subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.IDLE) {\n      trace('Start connecting to subchannel with address ' + this.children[subchannelIndex].subchannel.getAddress());\n      process.nextTick(() => {\n        var _a;\n        (_a = this.children[subchannelIndex]) === null || _a === void 0 ? void 0 : _a.subchannel.startConnecting();\n      });\n    }\n    this.connectionDelayTimeout = (_b = (_a = setTimeout(() => {\n      this.startNextSubchannelConnecting(subchannelIndex + 1);\n    }, CONNECTION_DELAY_INTERVAL_MS)).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  pickSubchannel(subchannel) {\n    if (this.currentPick && subchannel.realSubchannelEquals(this.currentPick)) {\n      return;\n    }\n    trace('Pick subchannel with address ' + subchannel.getAddress());\n    this.stickyTransientFailureMode = false;\n    if (this.currentPick !== null) {\n      this.currentPick.unref();\n      this.channelControlHelper.removeChannelzChild(this.currentPick.getChannelzRef());\n      this.currentPick.removeConnectivityStateListener(this.subchannelStateListener);\n    }\n    this.currentPick = subchannel;\n    subchannel.ref();\n    this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n    this.resetSubchannelList();\n    clearTimeout(this.connectionDelayTimeout);\n    this.calculateAndReportNewState();\n  }\n  updateState(newState, picker) {\n    trace(connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker);\n  }\n  resetSubchannelList() {\n    for (const child of this.children) {\n      if (!(this.currentPick && child.subchannel.realSubchannelEquals(this.currentPick))) {\n        /* The connectivity state listener is the same whether the subchannel\n         * is in the list of children or it is the currentPick, so if it is in\n         * both, removing it here would cause problems. In particular, that\n         * always happens immediately after the subchannel is picked. */\n        child.subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n      }\n      /* Refs are counted independently for the children list and the\n       * currentPick, so we call unref whether or not the child is the\n       * currentPick. Channelz child references are also refcounted, so\n       * removeChannelzChild can be handled the same way. */\n      child.subchannel.unref();\n      this.channelControlHelper.removeChannelzChild(child.subchannel.getChannelzRef());\n    }\n    this.currentSubchannelIndex = 0;\n    this.children = [];\n    this.triedAllSubchannels = false;\n    this.requestedResolutionSinceLastUpdate = false;\n  }\n  connectToAddressList(addressList) {\n    const newChildrenList = addressList.map(address => ({\n      subchannel: this.channelControlHelper.createSubchannel(address, {}),\n      hasReportedTransientFailure: false\n    }));\n    /* Ref each subchannel before resetting the list, to ensure that\n     * subchannels shared between the list don't drop to 0 refs during the\n     * transition. */\n    for (const {\n      subchannel\n    } of newChildrenList) {\n      subchannel.ref();\n      this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n    }\n    this.resetSubchannelList();\n    this.children = newChildrenList;\n    for (const {\n      subchannel\n    } of this.children) {\n      subchannel.addConnectivityStateListener(this.subchannelStateListener);\n      if (subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY) {\n        this.pickSubchannel(subchannel);\n        return;\n      }\n    }\n    for (const child of this.children) {\n      if (child.subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n        child.hasReportedTransientFailure = true;\n      }\n    }\n    this.startNextSubchannelConnecting(0);\n    this.calculateAndReportNewState();\n  }\n  updateAddressList(addressList, lbConfig) {\n    if (!(lbConfig instanceof PickFirstLoadBalancingConfig)) {\n      return;\n    }\n    /* Previously, an update would be discarded if it was identical to the\n     * previous update, to minimize churn. Now the DNS resolver is\n     * rate-limited, so that is less of a concern. */\n    if (lbConfig.getShuffleAddressList()) {\n      addressList = shuffled(addressList);\n    }\n    this.latestAddressList = addressList;\n    this.connectToAddressList(addressList);\n  }\n  exitIdle() {\n    if (this.currentState === connectivity_state_1.ConnectivityState.IDLE && this.latestAddressList) {\n      this.connectToAddressList(this.latestAddressList);\n    }\n  }\n  resetBackoff() {\n    /* The pick first load balancer does not have a connection backoff, so this\n     * does nothing */\n  }\n  destroy() {\n    this.resetSubchannelList();\n    this.removeCurrentPick();\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.PickFirstLoadBalancer = PickFirstLoadBalancer;\nfunction setup() {\n  (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);\n  (0, load_balancer_1.registerDefaultLoadBalancerType)(TYPE_NAME);\n}\nexports.setup = setup;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.RoundRobinLoadBalancer = void 0;\nconst load_balancer_1 = require(\"./load-balancer\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst picker_1 = require(\"./picker\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst logging = require(\"./logging\");\nconst constants_1 = require(\"./constants\");\nconst TRACER_NAME = 'round_robin';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'round_robin';\nclass RoundRobinLoadBalancingConfig {\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  constructor() {}\n  toJsonObject() {\n    return {\n      [TYPE_NAME]: {}\n    };\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static createFromJson(obj) {\n    return new RoundRobinLoadBalancingConfig();\n  }\n}\nclass RoundRobinPicker {\n  constructor(subchannelList, nextIndex = 0) {\n    this.subchannelList = subchannelList;\n    this.nextIndex = nextIndex;\n  }\n  pick(pickArgs) {\n    const pickedSubchannel = this.subchannelList[this.nextIndex];\n    this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;\n    return {\n      pickResultType: picker_1.PickResultType.COMPLETE,\n      subchannel: pickedSubchannel,\n      status: null,\n      onCallStarted: null,\n      onCallEnded: null\n    };\n  }\n  /**\n   * Check what the next subchannel returned would be. Used by the load\n   * balancer implementation to preserve this part of the picker state if\n   * possible when a subchannel connects or disconnects.\n   */\n  peekNextSubchannel() {\n    return this.subchannelList[this.nextIndex];\n  }\n}\nclass RoundRobinLoadBalancer {\n  constructor(channelControlHelper) {\n    this.channelControlHelper = channelControlHelper;\n    this.subchannels = [];\n    this.currentState = connectivity_state_1.ConnectivityState.IDLE;\n    this.currentReadyPicker = null;\n    this.lastError = null;\n    this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime, errorMessage) => {\n      this.calculateAndUpdateState();\n      if (newState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE || newState === connectivity_state_1.ConnectivityState.IDLE) {\n        if (errorMessage) {\n          this.lastError = errorMessage;\n        }\n        this.channelControlHelper.requestReresolution();\n        subchannel.startConnecting();\n      }\n    };\n  }\n  countSubchannelsWithState(state) {\n    return this.subchannels.filter(subchannel => subchannel.getConnectivityState() === state).length;\n  }\n  calculateAndUpdateState() {\n    if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.READY) > 0) {\n      const readySubchannels = this.subchannels.filter(subchannel => subchannel.getConnectivityState() === connectivity_state_1.ConnectivityState.READY);\n      let index = 0;\n      if (this.currentReadyPicker !== null) {\n        index = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());\n        if (index < 0) {\n          index = 0;\n        }\n      }\n      this.updateState(connectivity_state_1.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index));\n    } else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.CONNECTING) > 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));\n    } else if (this.countSubchannelsWithState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) > 0) {\n      this.updateState(connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker({\n        details: `No connection established. Last error: ${this.lastError}`\n      }));\n    } else {\n      this.updateState(connectivity_state_1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));\n    }\n  }\n  updateState(newState, picker) {\n    trace(connectivity_state_1.ConnectivityState[this.currentState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    if (newState === connectivity_state_1.ConnectivityState.READY) {\n      this.currentReadyPicker = picker;\n    } else {\n      this.currentReadyPicker = null;\n    }\n    this.currentState = newState;\n    this.channelControlHelper.updateState(newState, picker);\n  }\n  resetSubchannelList() {\n    for (const subchannel of this.subchannels) {\n      subchannel.removeConnectivityStateListener(this.subchannelStateListener);\n      subchannel.unref();\n      this.channelControlHelper.removeChannelzChild(subchannel.getChannelzRef());\n    }\n    this.subchannels = [];\n  }\n  updateAddressList(addressList, lbConfig) {\n    this.resetSubchannelList();\n    trace('Connect to address list ' + addressList.map(address => (0, subchannel_address_1.subchannelAddressToString)(address)));\n    this.subchannels = addressList.map(address => this.channelControlHelper.createSubchannel(address, {}));\n    for (const subchannel of this.subchannels) {\n      subchannel.ref();\n      subchannel.addConnectivityStateListener(this.subchannelStateListener);\n      this.channelControlHelper.addChannelzChild(subchannel.getChannelzRef());\n      const subchannelState = subchannel.getConnectivityState();\n      if (subchannelState === connectivity_state_1.ConnectivityState.IDLE || subchannelState === connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n        subchannel.startConnecting();\n      }\n    }\n    this.calculateAndUpdateState();\n  }\n  exitIdle() {\n    for (const subchannel of this.subchannels) {\n      subchannel.startConnecting();\n    }\n  }\n  resetBackoff() {\n    /* The pick first load balancer does not have a connection backoff, so this\n     * does nothing */\n  }\n  destroy() {\n    this.resetSubchannelList();\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.RoundRobinLoadBalancer = RoundRobinLoadBalancer;\nfunction setup() {\n  (0, load_balancer_1.registerLoadBalancerType)(TYPE_NAME, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);\n}\nexports.setup = setup;\n", "\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimental = exports.addAdminServicesToServer = exports.getChannelzHandlers = exports.getChannelzServiceDefinition = exports.InterceptorConfigurationError = exports.InterceptingCall = exports.RequesterBuilder = exports.ListenerBuilder = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.compressionAlgorithms = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;\nconst call_credentials_1 = require(\"./call-credentials\");\nObject.defineProperty(exports, \"CallCredentials\", {\n  enumerable: true,\n  get: function () {\n    return call_credentials_1.CallCredentials;\n  }\n});\nconst channel_1 = require(\"./channel\");\nObject.defineProperty(exports, \"Channel\", {\n  enumerable: true,\n  get: function () {\n    return channel_1.ChannelImplementation;\n  }\n});\nconst compression_algorithms_1 = require(\"./compression-algorithms\");\nObject.defineProperty(exports, \"compressionAlgorithms\", {\n  enumerable: true,\n  get: function () {\n    return compression_algorithms_1.CompressionAlgorithms;\n  }\n});\nconst connectivity_state_1 = require(\"./connectivity-state\");\nObject.defineProperty(exports, \"connectivityState\", {\n  enumerable: true,\n  get: function () {\n    return connectivity_state_1.ConnectivityState;\n  }\n});\nconst channel_credentials_1 = require(\"./channel-credentials\");\nObject.defineProperty(exports, \"ChannelCredentials\", {\n  enumerable: true,\n  get: function () {\n    return channel_credentials_1.ChannelCredentials;\n  }\n});\nconst client_1 = require(\"./client\");\nObject.defineProperty(exports, \"Client\", {\n  enumerable: true,\n  get: function () {\n    return client_1.Client;\n  }\n});\nconst constants_1 = require(\"./constants\");\nObject.defineProperty(exports, \"logVerbosity\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.LogVerbosity;\n  }\n});\nObject.defineProperty(exports, \"status\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Status;\n  }\n});\nObject.defineProperty(exports, \"propagate\", {\n  enumerable: true,\n  get: function () {\n    return constants_1.Propagate;\n  }\n});\nconst logging = require(\"./logging\");\nconst make_client_1 = require(\"./make-client\");\nObject.defineProperty(exports, \"loadPackageDefinition\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.loadPackageDefinition;\n  }\n});\nObject.defineProperty(exports, \"makeClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\nObject.defineProperty(exports, \"makeGenericClientConstructor\", {\n  enumerable: true,\n  get: function () {\n    return make_client_1.makeClientConstructor;\n  }\n});\nconst metadata_1 = require(\"./metadata\");\nObject.defineProperty(exports, \"Metadata\", {\n  enumerable: true,\n  get: function () {\n    return metadata_1.Metadata;\n  }\n});\nconst server_1 = require(\"./server\");\nObject.defineProperty(exports, \"Server\", {\n  enumerable: true,\n  get: function () {\n    return server_1.Server;\n  }\n});\nconst server_credentials_1 = require(\"./server-credentials\");\nObject.defineProperty(exports, \"ServerCredentials\", {\n  enumerable: true,\n  get: function () {\n    return server_credentials_1.ServerCredentials;\n  }\n});\nconst status_builder_1 = require(\"./status-builder\");\nObject.defineProperty(exports, \"StatusBuilder\", {\n  enumerable: true,\n  get: function () {\n    return status_builder_1.StatusBuilder;\n  }\n});\n/**** Client Credentials ****/\n// Using assign only copies enumerable properties, which is what we want\nexports.credentials = {\n  /**\n   * Combine a ChannelCredentials with any number of CallCredentials into a\n   * single ChannelCredentials object.\n   * @param channelCredentials The ChannelCredentials object.\n   * @param callCredentials Any number of CallCredentials objects.\n   * @return The resulting ChannelCredentials object.\n   */\n  combineChannelCredentials: (channelCredentials, ...callCredentials) => {\n    return callCredentials.reduce((acc, other) => acc.compose(other), channelCredentials);\n  },\n  /**\n   * Combine any number of CallCredentials into a single CallCredentials\n   * object.\n   * @param first The first CallCredentials object.\n   * @param additional Any number of additional CallCredentials objects.\n   * @return The resulting CallCredentials object.\n   */\n  combineCallCredentials: (first, ...additional) => {\n    return additional.reduce((acc, other) => acc.compose(other), first);\n  },\n  // from channel-credentials.ts\n  createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,\n  createSsl: channel_credentials_1.ChannelCredentials.createSsl,\n  createFromSecureContext: channel_credentials_1.ChannelCredentials.createFromSecureContext,\n  // from call-credentials.ts\n  createFromMetadataGenerator: call_credentials_1.CallCredentials.createFromMetadataGenerator,\n  createFromGoogleCredential: call_credentials_1.CallCredentials.createFromGoogleCredential,\n  createEmpty: call_credentials_1.CallCredentials.createEmpty\n};\n/**\n * Close a Client object.\n * @param client The client to close.\n */\nconst closeClient = client => client.close();\nexports.closeClient = closeClient;\nconst waitForClientReady = (client, deadline, callback) => client.waitForReady(deadline, callback);\nexports.waitForClientReady = waitForClientReady;\n/* eslint-enable @typescript-eslint/no-explicit-any */\n/**** Unimplemented function stubs ****/\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst loadObject = (value, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.loadObject = loadObject;\nconst load = (filename, format, options) => {\n  throw new Error('Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead');\n};\nexports.load = load;\nconst setLogger = logger => {\n  logging.setLogger(logger);\n};\nexports.setLogger = setLogger;\nconst setLogVerbosity = verbosity => {\n  logging.setLoggerVerbosity(verbosity);\n};\nexports.setLogVerbosity = setLogVerbosity;\nconst getClientChannel = client => {\n  return client_1.Client.prototype.getChannel.call(client);\n};\nexports.getClientChannel = getClientChannel;\nvar client_interceptors_1 = require(\"./client-interceptors\");\nObject.defineProperty(exports, \"ListenerBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.ListenerBuilder;\n  }\n});\nObject.defineProperty(exports, \"RequesterBuilder\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.RequesterBuilder;\n  }\n});\nObject.defineProperty(exports, \"InterceptingCall\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptingCall;\n  }\n});\nObject.defineProperty(exports, \"InterceptorConfigurationError\", {\n  enumerable: true,\n  get: function () {\n    return client_interceptors_1.InterceptorConfigurationError;\n  }\n});\nvar channelz_1 = require(\"./channelz\");\nObject.defineProperty(exports, \"getChannelzServiceDefinition\", {\n  enumerable: true,\n  get: function () {\n    return channelz_1.getChannelzServiceDefinition;\n  }\n});\nObject.defineProperty(exports, \"getChannelzHandlers\", {\n  enumerable: true,\n  get: function () {\n    return channelz_1.getChannelzHandlers;\n  }\n});\nvar admin_1 = require(\"./admin\");\nObject.defineProperty(exports, \"addAdminServicesToServer\", {\n  enumerable: true,\n  get: function () {\n    return admin_1.addAdminServicesToServer;\n  }\n});\nconst experimental = require(\"./experimental\");\nexports.experimental = experimental;\nconst resolver_dns = require(\"./resolver-dns\");\nconst resolver_uds = require(\"./resolver-uds\");\nconst resolver_ip = require(\"./resolver-ip\");\nconst load_balancer_pick_first = require(\"./load-balancer-pick-first\");\nconst load_balancer_round_robin = require(\"./load-balancer-round-robin\");\nconst load_balancer_outlier_detection = require(\"./load-balancer-outlier-detection\");\nconst channelz = require(\"./channelz\");\n(() => {\n  resolver_dns.setup();\n  resolver_uds.setup();\n  resolver_ip.setup();\n  load_balancer_pick_first.setup();\n  load_balancer_round_robin.setup();\n  load_balancer_outlier_detection.setup();\n  channelz.setup();\n})();\n", "import { _getProvider, getApp, _removeServiceInstance, _registerComponent, registerVersion, SDK_VERSION as SDK_VERSION$1 } from '@firebase/app';\nimport { Component } from '@firebase/component';\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { inspect, TextEncoder, TextDecoder } from 'util';\nimport { FirebaseError, createMockUserToken, getModularInstance, deepEqual, getDefaultEmulatorHostnameAndPort, getUA, isIndexedDBAvailable, isSafari } from '@firebase/util';\nimport { randomBytes as randomBytes$1 } from 'crypto';\nimport { Integer, Md5 } from '@firebase/webchannel-wrapper/bloom-blob';\nimport * as grpc from '@grpc/grpc-js';\nimport * as protoLoader from '@grpc/proto-loader';\nconst name = \"@firebase/firestore\";\nconst version$1 = \"4.7.1\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Simple wrapper around a nullable UID. Mostly exists to make code more\r\n * readable.\r\n */\nclass User {\n  constructor(uid) {\n    this.uid = uid;\n  }\n  isAuthenticated() {\n    return this.uid != null;\n  }\n  /**\r\n   * Returns a key representing this user, suitable for inclusion in a\r\n   * dictionary.\r\n   */\n  toKey() {\n    if (this.isAuthenticated()) {\n      return 'uid:' + this.uid;\n    } else {\n      return 'anonymous-user';\n    }\n  }\n  isEqual(otherUser) {\n    return otherUser.uid === this.uid;\n  }\n}\n/** A user with a null UID. */\nUser.UNAUTHENTICATED = new User(null);\n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nUser.GOOGLE_CREDENTIALS = new User('google-credentials-uid');\nUser.FIRST_PARTY = new User('first-party-uid');\nUser.MOCK_USER = new User('mock-user');\nconst version = \"10.13.1\";\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nlet SDK_VERSION = version;\nfunction setSDKVersion(version) {\n  SDK_VERSION = version;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Formats an object as a JSON string, suitable for logging. */\nfunction formatJSON(value) {\n  // util.inspect() results in much more readable output than JSON.stringify()\n  return inspect(value, {\n    depth: 100\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst logClient = new Logger('@firebase/firestore');\n// Helper methods are needed because variables can't be exported as read/write\nfunction getLogLevel() {\n  return logClient.logLevel;\n}\n/**\r\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\r\n *\r\n * @param logLevel - The verbosity you set for activity and error logging. Can\r\n *   be any of the following values:\r\n *\r\n *   <ul>\r\n *     <li>`debug` for the most verbose logging level, primarily for\r\n *     debugging.</li>\r\n *     <li>`error` to log errors only.</li>\r\n *     <li><code>`silent` to turn off logging.</li>\r\n *   </ul>\r\n */\nfunction setLogLevel(logLevel) {\n  logClient.setLogLevel(logLevel);\n}\nfunction logDebug(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.DEBUG) {\n    const args = obj.map(argToString);\n    logClient.debug(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\nfunction logError(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.ERROR) {\n    const args = obj.map(argToString);\n    logClient.error(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n/**\r\n * @internal\r\n */\nfunction logWarn(msg, ...obj) {\n  if (logClient.logLevel <= LogLevel.WARN) {\n    const args = obj.map(argToString);\n    logClient.warn(`Firestore (${SDK_VERSION}): ${msg}`, ...args);\n  }\n}\n/**\r\n * Converts an additional log parameter to a string representation.\r\n */\nfunction argToString(obj) {\n  if (typeof obj === 'string') {\n    return obj;\n  } else {\n    try {\n      return formatJSON(obj);\n    } catch (e) {\n      // Converting to JSON failed, just log the object directly\n      return obj;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Unconditionally fails, throwing an Error with the given message.\r\n * Messages are stripped in production builds.\r\n *\r\n * Returns `never` and can be used in expressions:\r\n * @example\r\n * let futureVar = fail('not implemented yet');\r\n */\nfunction fail(failure = 'Unexpected state') {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  const message = `FIRESTORE (${SDK_VERSION}) INTERNAL ASSERTION FAILED: ` + failure;\n  logError(message);\n  // NOTE: We don't use FirestoreError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * Messages are stripped in production builds.\r\n */\nfunction hardAssert(assertion, message) {\n  if (!assertion) {\n    fail();\n  }\n}\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * The code of callsites invoking this function are stripped out in production\r\n * builds. Any side-effects of code within the debugAssert() invocation will not\r\n * happen in this case.\r\n *\r\n * @internal\r\n */\nfunction debugAssert(assertion, message) {\n  if (!assertion) {\n    fail();\n  }\n}\n/**\r\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\r\n * instance of `T` before casting.\r\n */\nfunction debugCast(obj,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconstructor) {\n  return obj;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst Code = {\n  // Causes are copied from:\n  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n  /** Not an error; returned on success. */\n  OK: 'ok',\n  /** The operation was cancelled (typically by the caller). */\n  CANCELLED: 'cancelled',\n  /** Unknown error or an error from a different error domain. */\n  UNKNOWN: 'unknown',\n  /**\r\n   * Client specified an invalid argument. Note that this differs from\r\n   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are\r\n   * problematic regardless of the state of the system (e.g., a malformed file\r\n   * name).\r\n   */\n  INVALID_ARGUMENT: 'invalid-argument',\n  /**\r\n   * Deadline expired before operation could complete. For operations that\r\n   * change the state of the system, this error may be returned even if the\r\n   * operation has completed successfully. For example, a successful response\r\n   * from a server could have been delayed long enough for the deadline to\r\n   * expire.\r\n   */\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  /** Some requested entity (e.g., file or directory) was not found. */\n  NOT_FOUND: 'not-found',\n  /**\r\n   * Some entity that we attempted to create (e.g., file or directory) already\r\n   * exists.\r\n   */\n  ALREADY_EXISTS: 'already-exists',\n  /**\r\n   * The caller does not have permission to execute the specified operation.\r\n   * PERMISSION_DENIED must not be used for rejections caused by exhausting\r\n   * some resource (use RESOURCE_EXHAUSTED instead for those errors).\r\n   * PERMISSION_DENIED must not be used if the caller cannot be identified\r\n   * (use UNAUTHENTICATED instead for those errors).\r\n   */\n  PERMISSION_DENIED: 'permission-denied',\n  /**\r\n   * The request does not have valid authentication credentials for the\r\n   * operation.\r\n   */\n  UNAUTHENTICATED: 'unauthenticated',\n  /**\r\n   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the\r\n   * entire file system is out of space.\r\n   */\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  /**\r\n   * Operation was rejected because the system is not in a state required for\r\n   * the operation's execution. For example, directory to be deleted may be\r\n   * non-empty, an rmdir operation is applied to a non-directory, etc.\r\n   *\r\n   * A litmus test that may help a service implementor in deciding\r\n   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:\r\n   *  (a) Use UNAVAILABLE if the client can retry just the failing call.\r\n   *  (b) Use ABORTED if the client should retry at a higher-level\r\n   *      (e.g., restarting a read-modify-write sequence).\r\n   *  (c) Use FAILED_PRECONDITION if the client should not retry until\r\n   *      the system state has been explicitly fixed. E.g., if an \"rmdir\"\r\n   *      fails because the directory is non-empty, FAILED_PRECONDITION\r\n   *      should be returned since the client should not retry unless\r\n   *      they have first fixed up the directory by deleting files from it.\r\n   *  (d) Use FAILED_PRECONDITION if the client performs conditional\r\n   *      REST Get/Update/Delete on a resource and the resource on the\r\n   *      server does not match the condition. E.g., conflicting\r\n   *      read-modify-write on the same resource.\r\n   */\n  FAILED_PRECONDITION: 'failed-precondition',\n  /**\r\n   * The operation was aborted, typically due to a concurrency issue like\r\n   * sequencer check failures, transaction aborts, etc.\r\n   *\r\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n   * and UNAVAILABLE.\r\n   */\n  ABORTED: 'aborted',\n  /**\r\n   * Operation was attempted past the valid range. E.g., seeking or reading\r\n   * past end of file.\r\n   *\r\n   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed\r\n   * if the system state changes. For example, a 32-bit file system will\r\n   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the\r\n   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from\r\n   * an offset past the current file size.\r\n   *\r\n   * There is a fair bit of overlap between FAILED_PRECONDITION and\r\n   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)\r\n   * when it applies so that callers who are iterating through a space can\r\n   * easily look for an OUT_OF_RANGE error to detect when they are done.\r\n   */\n  OUT_OF_RANGE: 'out-of-range',\n  /** Operation is not implemented or not supported/enabled in this service. */\n  UNIMPLEMENTED: 'unimplemented',\n  /**\r\n   * Internal errors. Means some invariants expected by underlying System has\r\n   * been broken. If you see one of these errors, Something is very broken.\r\n   */\n  INTERNAL: 'internal',\n  /**\r\n   * The service is currently unavailable. This is a most likely a transient\r\n   * condition and may be corrected by retrying with a backoff.\r\n   *\r\n   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,\r\n   * and UNAVAILABLE.\r\n   */\n  UNAVAILABLE: 'unavailable',\n  /** Unrecoverable data loss or corruption. */\n  DATA_LOSS: 'data-loss'\n};\n/** An error returned by a Firestore operation. */\nclass FirestoreError extends FirebaseError {\n  /** @hideconstructor */\n  constructor(\n  /**\r\n   * The backend error code associated with this error.\r\n   */\n  code,\n  /**\r\n   * A custom error description.\r\n   */\n  message) {\n    super(code, message);\n    this.code = code;\n    this.message = message;\n    // HACK: We write a toString property directly because Error is not a real\n    // class and so inheritance does not work correctly. We could alternatively\n    // do the same \"back-door inheritance\" trick that FirebaseError does.\n    this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Deferred {\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass OAuthToken {\n  constructor(value, user) {\n    this.user = user;\n    this.type = 'OAuth';\n    this.headers = new Map();\n    this.headers.set('Authorization', `Bearer ${value}`);\n  }\n}\n/**\r\n * A CredentialsProvider that always yields an empty token.\r\n * @internal\r\n */\nclass EmptyAuthCredentialsProvider {\n  getToken() {\n    return Promise.resolve(null);\n  }\n  invalidateToken() {}\n  start(asyncQueue, changeListener) {\n    // Fire with initial user.\n    asyncQueue.enqueueRetryable(() => changeListener(User.UNAUTHENTICATED));\n  }\n  shutdown() {}\n}\n/**\r\n * A CredentialsProvider that always returns a constant token. Used for\r\n * emulator token mocking.\r\n */\nclass EmulatorAuthCredentialsProvider {\n  constructor(token) {\n    this.token = token;\n    /**\r\n     * Stores the listener registered with setChangeListener()\r\n     * This isn't actually necessary since the UID never changes, but we use this\r\n     * to verify the listen contract is adhered to in tests.\r\n     */\n    this.changeListener = null;\n  }\n  getToken() {\n    return Promise.resolve(this.token);\n  }\n  invalidateToken() {}\n  start(asyncQueue, changeListener) {\n    this.changeListener = changeListener;\n    // Fire with initial user.\n    asyncQueue.enqueueRetryable(() => changeListener(this.token.user));\n  }\n  shutdown() {\n    this.changeListener = null;\n  }\n}\nclass FirebaseAuthCredentialsProvider {\n  constructor(authProvider) {\n    this.authProvider = authProvider;\n    /** Tracks the current User. */\n    this.currentUser = User.UNAUTHENTICATED;\n    /**\r\n     * Counter used to detect if the token changed while a getToken request was\r\n     * outstanding.\r\n     */\n    this.tokenCounter = 0;\n    this.forceRefresh = false;\n    this.auth = null;\n  }\n  start(asyncQueue, changeListener) {\n    let lastTokenId = this.tokenCounter;\n    // A change listener that prevents double-firing for the same token change.\n    const guardedChangeListener = user => {\n      if (this.tokenCounter !== lastTokenId) {\n        lastTokenId = this.tokenCounter;\n        return changeListener(user);\n      } else {\n        return Promise.resolve();\n      }\n    };\n    // A promise that can be waited on to block on the next token change.\n    // This promise is re-created after each change.\n    let nextToken = new Deferred();\n    this.tokenListener = () => {\n      this.tokenCounter++;\n      this.currentUser = this.getUser();\n      nextToken.resolve();\n      nextToken = new Deferred();\n      asyncQueue.enqueueRetryable(() => guardedChangeListener(this.currentUser));\n    };\n    const awaitNextToken = () => {\n      const currentTokenAttempt = nextToken;\n      asyncQueue.enqueueRetryable(async () => {\n        await currentTokenAttempt.promise;\n        await guardedChangeListener(this.currentUser);\n      });\n    };\n    const registerAuth = auth => {\n      logDebug('FirebaseAuthCredentialsProvider', 'Auth detected');\n      this.auth = auth;\n      this.auth.addAuthTokenListener(this.tokenListener);\n      awaitNextToken();\n    };\n    this.authProvider.onInit(auth => registerAuth(auth));\n    // Our users can initialize Auth right after Firestore, so we give it\n    // a chance to register itself with the component framework before we\n    // determine whether to start up in unauthenticated mode.\n    setTimeout(() => {\n      if (!this.auth) {\n        const auth = this.authProvider.getImmediate({\n          optional: true\n        });\n        if (auth) {\n          registerAuth(auth);\n        } else {\n          // If auth is still not available, proceed with `null` user\n          logDebug('FirebaseAuthCredentialsProvider', 'Auth not yet detected');\n          nextToken.resolve();\n          nextToken = new Deferred();\n        }\n      }\n    }, 0);\n    awaitNextToken();\n  }\n  getToken() {\n    // Take note of the current value of the tokenCounter so that this method\n    // can fail (with an ABORTED error) if there is a token change while the\n    // request is outstanding.\n    const initialTokenCounter = this.tokenCounter;\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n    if (!this.auth) {\n      return Promise.resolve(null);\n    }\n    return this.auth.getToken(forceRefresh).then(tokenData => {\n      // Cancel the request since the token changed while the request was\n      // outstanding so the response is potentially for a previous user (which\n      // user, we can't be sure).\n      if (this.tokenCounter !== initialTokenCounter) {\n        logDebug('FirebaseAuthCredentialsProvider', 'getToken aborted due to token change.');\n        return this.getToken();\n      } else {\n        if (tokenData) {\n          hardAssert(typeof tokenData.accessToken === 'string');\n          return new OAuthToken(tokenData.accessToken, this.currentUser);\n        } else {\n          return null;\n        }\n      }\n    });\n  }\n  invalidateToken() {\n    this.forceRefresh = true;\n  }\n  shutdown() {\n    if (this.auth) {\n      this.auth.removeAuthTokenListener(this.tokenListener);\n    }\n  }\n  // Auth.getUid() can return null even with a user logged in. It is because\n  // getUid() is synchronous, but the auth code populating Uid is asynchronous.\n  // This method should only be called in the AuthTokenListener callback\n  // to guarantee to get the actual user.\n  getUser() {\n    const currentUid = this.auth && this.auth.getUid();\n    hardAssert(currentUid === null || typeof currentUid === 'string');\n    return new User(currentUid);\n  }\n}\n/*\r\n * FirstPartyToken provides a fresh token each time its value\r\n * is requested, because if the token is too old, requests will be rejected.\r\n * Technically this may no longer be necessary since the SDK should gracefully\r\n * recover from unauthenticated errors (see b/33147818 for context), but it's\r\n * safer to keep the implementation as-is.\r\n */\nclass FirstPartyToken {\n  constructor(sessionIndex, iamToken, authTokenFactory) {\n    this.sessionIndex = sessionIndex;\n    this.iamToken = iamToken;\n    this.authTokenFactory = authTokenFactory;\n    this.type = 'FirstParty';\n    this.user = User.FIRST_PARTY;\n    this._headers = new Map();\n  }\n  /**\r\n   * Gets an authorization token, using a provided factory function, or return\r\n   * null.\r\n   */\n  getAuthToken() {\n    if (this.authTokenFactory) {\n      return this.authTokenFactory();\n    } else {\n      return null;\n    }\n  }\n  get headers() {\n    this._headers.set('X-Goog-AuthUser', this.sessionIndex);\n    // Use array notation to prevent minification\n    const authHeaderTokenValue = this.getAuthToken();\n    if (authHeaderTokenValue) {\n      this._headers.set('Authorization', authHeaderTokenValue);\n    }\n    if (this.iamToken) {\n      this._headers.set('X-Goog-Iam-Authorization-Token', this.iamToken);\n    }\n    return this._headers;\n  }\n}\n/*\r\n * Provides user credentials required for the Firestore JavaScript SDK\r\n * to authenticate the user, using technique that is only available\r\n * to applications hosted by Google.\r\n */\nclass FirstPartyAuthCredentialsProvider {\n  constructor(sessionIndex, iamToken, authTokenFactory) {\n    this.sessionIndex = sessionIndex;\n    this.iamToken = iamToken;\n    this.authTokenFactory = authTokenFactory;\n  }\n  getToken() {\n    return Promise.resolve(new FirstPartyToken(this.sessionIndex, this.iamToken, this.authTokenFactory));\n  }\n  start(asyncQueue, changeListener) {\n    // Fire with initial uid.\n    asyncQueue.enqueueRetryable(() => changeListener(User.FIRST_PARTY));\n  }\n  shutdown() {}\n  invalidateToken() {}\n}\nclass AppCheckToken {\n  constructor(value) {\n    this.value = value;\n    this.type = 'AppCheck';\n    this.headers = new Map();\n    if (value && value.length > 0) {\n      this.headers.set('x-firebase-appcheck', this.value);\n    }\n  }\n}\nclass FirebaseAppCheckTokenProvider {\n  constructor(appCheckProvider) {\n    this.appCheckProvider = appCheckProvider;\n    this.forceRefresh = false;\n    this.appCheck = null;\n    this.latestAppCheckToken = null;\n  }\n  start(asyncQueue, changeListener) {\n    const onTokenChanged = tokenResult => {\n      if (tokenResult.error != null) {\n        logDebug('FirebaseAppCheckTokenProvider', `Error getting App Check token; using placeholder token instead. Error: ${tokenResult.error.message}`);\n      }\n      const tokenUpdated = tokenResult.token !== this.latestAppCheckToken;\n      this.latestAppCheckToken = tokenResult.token;\n      logDebug('FirebaseAppCheckTokenProvider', `Received ${tokenUpdated ? 'new' : 'existing'} token.`);\n      return tokenUpdated ? changeListener(tokenResult.token) : Promise.resolve();\n    };\n    this.tokenListener = tokenResult => {\n      asyncQueue.enqueueRetryable(() => onTokenChanged(tokenResult));\n    };\n    const registerAppCheck = appCheck => {\n      logDebug('FirebaseAppCheckTokenProvider', 'AppCheck detected');\n      this.appCheck = appCheck;\n      this.appCheck.addTokenListener(this.tokenListener);\n    };\n    this.appCheckProvider.onInit(appCheck => registerAppCheck(appCheck));\n    // Our users can initialize AppCheck after Firestore, so we give it\n    // a chance to register itself with the component framework.\n    setTimeout(() => {\n      if (!this.appCheck) {\n        const appCheck = this.appCheckProvider.getImmediate({\n          optional: true\n        });\n        if (appCheck) {\n          registerAppCheck(appCheck);\n        } else {\n          // If AppCheck is still not available, proceed without it.\n          logDebug('FirebaseAppCheckTokenProvider', 'AppCheck not yet detected');\n        }\n      }\n    }, 0);\n  }\n  getToken() {\n    const forceRefresh = this.forceRefresh;\n    this.forceRefresh = false;\n    if (!this.appCheck) {\n      return Promise.resolve(null);\n    }\n    return this.appCheck.getToken(forceRefresh).then(tokenResult => {\n      if (tokenResult) {\n        hardAssert(typeof tokenResult.token === 'string');\n        this.latestAppCheckToken = tokenResult.token;\n        return new AppCheckToken(tokenResult.token);\n      } else {\n        return null;\n      }\n    });\n  }\n  invalidateToken() {\n    this.forceRefresh = true;\n  }\n  shutdown() {\n    if (this.appCheck) {\n      this.appCheck.removeTokenListener(this.tokenListener);\n    }\n  }\n}\n/**\r\n * An AppCheck token provider that always yields an empty token.\r\n * @internal\r\n */\nclass EmptyAppCheckTokenProvider {\n  getToken() {\n    return Promise.resolve(new AppCheckToken(''));\n  }\n  invalidateToken() {}\n  start(asyncQueue, changeListener) {}\n  shutdown() {}\n}\n/**\r\n * Builds a CredentialsProvider depending on the type of\r\n * the credentials passed in.\r\n */\nfunction makeAuthCredentialsProvider(credentials) {\n  if (!credentials) {\n    return new EmptyAuthCredentialsProvider();\n  }\n  switch (credentials['type']) {\n    case 'firstParty':\n      return new FirstPartyAuthCredentialsProvider(credentials['sessionIndex'] || '0', credentials['iamToken'] || null, credentials['authTokenFactory'] || null);\n    case 'provider':\n      return credentials['client'];\n    default:\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeAuthCredentialsProvider failed due to invalid credential type');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Generates `nBytes` of random bytes.\r\n *\r\n * If `nBytes < 0` , an error will be thrown.\r\n */\nfunction randomBytes(nBytes) {\n  return randomBytes$1(nBytes);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A utility class for generating unique alphanumeric IDs of a specified length.\r\n *\r\n * @internal\r\n * Exported internally for testing purposes.\r\n */\nclass AutoId {\n  static newId() {\n    // Alphanumeric characters\n    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    // The largest byte value that is a multiple of `char.length`.\n    const maxMultiple = Math.floor(256 / chars.length) * chars.length;\n    let autoId = '';\n    const targetLength = 20;\n    while (autoId.length < targetLength) {\n      const bytes = randomBytes(40);\n      for (let i = 0; i < bytes.length; ++i) {\n        // Only accept values that are [0, maxMultiple), this ensures they can\n        // be evenly mapped to indices of `chars` via a modulo operation.\n        if (autoId.length < targetLength && bytes[i] < maxMultiple) {\n          autoId += chars.charAt(bytes[i] % chars.length);\n        }\n      }\n    }\n    return autoId;\n  }\n}\nfunction primitiveComparator(left, right) {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\n/** Helper to compare arrays using isEqual(). */\nfunction arrayEquals(left, right, comparator) {\n  if (left.length !== right.length) {\n    return false;\n  }\n  return left.every((value, index) => comparator(value, right[index]));\n}\n/**\r\n * Returns the immediate lexicographically-following string. This is useful to\r\n * construct an inclusive range for indexeddb iterators.\r\n */\nfunction immediateSuccessor(s) {\n  // Return the input string, with an additional NUL byte appended.\n  return s + '\\0';\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\nconst MIN_SECONDS = -62135596800;\n// Number of nanoseconds in a millisecond.\nconst MS_TO_NANOS = 1e6;\n/**\r\n * A `Timestamp` represents a point in time independent of any time zone or\r\n * calendar, represented as seconds and fractions of seconds at nanosecond\r\n * resolution in UTC Epoch time.\r\n *\r\n * It is encoded using the Proleptic Gregorian Calendar which extends the\r\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\r\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\r\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\r\n * 9999-12-31T23:59:59.999999999Z.\r\n *\r\n * For examples and further specifications, refer to the\r\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\r\n */\nclass Timestamp {\n  /**\r\n   * Creates a new timestamp.\r\n   *\r\n   * @param seconds - The number of seconds of UTC time since Unix epoch\r\n   *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\r\n   *     9999-12-31T23:59:59Z inclusive.\r\n   * @param nanoseconds - The non-negative fractions of a second at nanosecond\r\n   *     resolution. Negative second values with fractions must still have\r\n   *     non-negative nanoseconds values that count forward in time. Must be\r\n   *     from 0 to 999,999,999 inclusive.\r\n   */\n  constructor(\n  /**\r\n   * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\r\n   */\n  seconds,\n  /**\r\n   * The fractions of a second at nanosecond resolution.*\r\n   */\n  nanoseconds) {\n    this.seconds = seconds;\n    this.nanoseconds = nanoseconds;\n    if (nanoseconds < 0) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\n    }\n    if (nanoseconds >= 1e9) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);\n    }\n    if (seconds < MIN_SECONDS) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\n    }\n    // This will break in the year 10,000.\n    if (seconds >= 253402300800) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);\n    }\n  }\n  /**\r\n   * Creates a new timestamp with the current date, with millisecond precision.\r\n   *\r\n   * @returns a new timestamp representing the current date.\r\n   */\n  static now() {\n    return Timestamp.fromMillis(Date.now());\n  }\n  /**\r\n   * Creates a new timestamp from the given date.\r\n   *\r\n   * @param date - The date to initialize the `Timestamp` from.\r\n   * @returns A new `Timestamp` representing the same point in time as the given\r\n   *     date.\r\n   */\n  static fromDate(date) {\n    return Timestamp.fromMillis(date.getTime());\n  }\n  /**\r\n   * Creates a new timestamp from the given number of milliseconds.\r\n   *\r\n   * @param milliseconds - Number of milliseconds since Unix epoch\r\n   *     1970-01-01T00:00:00Z.\r\n   * @returns A new `Timestamp` representing the same point in time as the given\r\n   *     number of milliseconds.\r\n   */\n  static fromMillis(milliseconds) {\n    const seconds = Math.floor(milliseconds / 1000);\n    const nanos = Math.floor((milliseconds - seconds * 1000) * MS_TO_NANOS);\n    return new Timestamp(seconds, nanos);\n  }\n  /**\r\n   * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\r\n   * causes a loss of precision since `Date` objects only support millisecond\r\n   * precision.\r\n   *\r\n   * @returns JavaScript `Date` object representing the same point in time as\r\n   *     this `Timestamp`, with millisecond precision.\r\n   */\n  toDate() {\n    return new Date(this.toMillis());\n  }\n  /**\r\n   * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\r\n   * epoch). This operation causes a loss of precision.\r\n   *\r\n   * @returns The point in time corresponding to this timestamp, represented as\r\n   *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\r\n   */\n  toMillis() {\n    return this.seconds * 1000 + this.nanoseconds / MS_TO_NANOS;\n  }\n  _compareTo(other) {\n    if (this.seconds === other.seconds) {\n      return primitiveComparator(this.nanoseconds, other.nanoseconds);\n    }\n    return primitiveComparator(this.seconds, other.seconds);\n  }\n  /**\r\n   * Returns true if this `Timestamp` is equal to the provided one.\r\n   *\r\n   * @param other - The `Timestamp` to compare against.\r\n   * @returns true if this `Timestamp` is equal to the provided one.\r\n   */\n  isEqual(other) {\n    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;\n  }\n  /** Returns a textual representation of this `Timestamp`. */\n  toString() {\n    return 'Timestamp(seconds=' + this.seconds + ', nanoseconds=' + this.nanoseconds + ')';\n  }\n  /** Returns a JSON-serializable representation of this `Timestamp`. */\n  toJSON() {\n    return {\n      seconds: this.seconds,\n      nanoseconds: this.nanoseconds\n    };\n  }\n  /**\r\n   * Converts this object to a primitive string, which allows `Timestamp` objects\r\n   * to be compared using the `>`, `<=`, `>=` and `>` operators.\r\n   */\n  valueOf() {\n    // This method returns a string of the form <seconds>.<nanoseconds> where\n    // <seconds> is translated to have a non-negative value and both <seconds>\n    // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n    // Strings with this format then have a lexicographical ordering that matches\n    // the expected ordering. The <seconds> translation is done to avoid having\n    // a leading negative sign (i.e. a leading '-' character) in its string\n    // representation, which would affect its lexicographical ordering.\n    const adjustedSeconds = this.seconds - MIN_SECONDS;\n    // Note: Up to 12 decimal digits are required to represent all valid\n    // 'seconds' values.\n    const formattedSeconds = String(adjustedSeconds).padStart(12, '0');\n    const formattedNanoseconds = String(this.nanoseconds).padStart(9, '0');\n    return formattedSeconds + '.' + formattedNanoseconds;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A version of a document in Firestore. This corresponds to the version\r\n * timestamp, such as update_time or read_time.\r\n */\nclass SnapshotVersion {\n  constructor(timestamp) {\n    this.timestamp = timestamp;\n  }\n  static fromTimestamp(value) {\n    return new SnapshotVersion(value);\n  }\n  static min() {\n    return new SnapshotVersion(new Timestamp(0, 0));\n  }\n  static max() {\n    return new SnapshotVersion(new Timestamp(253402300799, 1e9 - 1));\n  }\n  compareTo(other) {\n    return this.timestamp._compareTo(other.timestamp);\n  }\n  isEqual(other) {\n    return this.timestamp.isEqual(other.timestamp);\n  }\n  /** Returns a number representation of the version for use in spec tests. */\n  toMicroseconds() {\n    // Convert to microseconds.\n    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;\n  }\n  toString() {\n    return 'SnapshotVersion(' + this.timestamp.toString() + ')';\n  }\n  toTimestamp() {\n    return this.timestamp;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DOCUMENT_KEY_NAME = '__name__';\n/**\r\n * Path represents an ordered sequence of string segments.\r\n */\nclass BasePath {\n  constructor(segments, offset, length) {\n    if (offset === undefined) {\n      offset = 0;\n    } else if (offset > segments.length) {\n      fail();\n    }\n    if (length === undefined) {\n      length = segments.length - offset;\n    } else if (length > segments.length - offset) {\n      fail();\n    }\n    this.segments = segments;\n    this.offset = offset;\n    this.len = length;\n  }\n  get length() {\n    return this.len;\n  }\n  isEqual(other) {\n    return BasePath.comparator(this, other) === 0;\n  }\n  child(nameOrPath) {\n    const segments = this.segments.slice(this.offset, this.limit());\n    if (nameOrPath instanceof BasePath) {\n      nameOrPath.forEach(segment => {\n        segments.push(segment);\n      });\n    } else {\n      segments.push(nameOrPath);\n    }\n    return this.construct(segments);\n  }\n  /** The index of one past the last segment of the path. */\n  limit() {\n    return this.offset + this.length;\n  }\n  popFirst(size) {\n    size = size === undefined ? 1 : size;\n    return this.construct(this.segments, this.offset + size, this.length - size);\n  }\n  popLast() {\n    return this.construct(this.segments, this.offset, this.length - 1);\n  }\n  firstSegment() {\n    return this.segments[this.offset];\n  }\n  lastSegment() {\n    return this.get(this.length - 1);\n  }\n  get(index) {\n    return this.segments[this.offset + index];\n  }\n  isEmpty() {\n    return this.length === 0;\n  }\n  isPrefixOf(other) {\n    if (other.length < this.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== other.get(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  isImmediateParentOf(potentialChild) {\n    if (this.length + 1 !== potentialChild.length) {\n      return false;\n    }\n    for (let i = 0; i < this.length; i++) {\n      if (this.get(i) !== potentialChild.get(i)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  forEach(fn) {\n    for (let i = this.offset, end = this.limit(); i < end; i++) {\n      fn(this.segments[i]);\n    }\n  }\n  toArray() {\n    return this.segments.slice(this.offset, this.limit());\n  }\n  static comparator(p1, p2) {\n    const len = Math.min(p1.length, p2.length);\n    for (let i = 0; i < len; i++) {\n      const left = p1.get(i);\n      const right = p2.get(i);\n      if (left < right) {\n        return -1;\n      }\n      if (left > right) {\n        return 1;\n      }\n    }\n    if (p1.length < p2.length) {\n      return -1;\n    }\n    if (p1.length > p2.length) {\n      return 1;\n    }\n    return 0;\n  }\n}\n/**\r\n * A slash-separated path for navigating resources (documents and collections)\r\n * within Firestore.\r\n *\r\n * @internal\r\n */\nclass ResourcePath extends BasePath {\n  construct(segments, offset, length) {\n    return new ResourcePath(segments, offset, length);\n  }\n  canonicalString() {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    return this.toArray().join('/');\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\r\n   * Returns a string representation of this path\r\n   * where each path segment has been encoded with\r\n   * `encodeURIComponent`.\r\n   */\n  toUriEncodedString() {\n    return this.toArray().map(encodeURIComponent).join('/');\n  }\n  /**\r\n   * Creates a resource path from the given slash-delimited string. If multiple\r\n   * arguments are provided, all components are combined. Leading and trailing\r\n   * slashes from all components are ignored.\r\n   */\n  static fromString(...pathComponents) {\n    // NOTE: The client is ignorant of any path segments containing escape\n    // sequences (e.g. __id123__) and just passes them through raw (they exist\n    // for legacy reasons and should not be used frequently).\n    const segments = [];\n    for (const path of pathComponents) {\n      if (path.indexOf('//') >= 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid segment (${path}). Paths must not contain // in them.`);\n      }\n      // Strip leading and trailing slashed.\n      segments.push(...path.split('/').filter(segment => segment.length > 0));\n    }\n    return new ResourcePath(segments);\n  }\n  static emptyPath() {\n    return new ResourcePath([]);\n  }\n}\nconst identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\r\n * A dot-separated path for navigating sub-objects within a document.\r\n * @internal\r\n */\nclass FieldPath$1 extends BasePath {\n  construct(segments, offset, length) {\n    return new FieldPath$1(segments, offset, length);\n  }\n  /**\r\n   * Returns true if the string could be used as a segment in a field path\r\n   * without escaping.\r\n   */\n  static isValidIdentifier(segment) {\n    return identifierRegExp.test(segment);\n  }\n  canonicalString() {\n    return this.toArray().map(str => {\n      str = str.replace(/\\\\/g, '\\\\\\\\').replace(/`/g, '\\\\`');\n      if (!FieldPath$1.isValidIdentifier(str)) {\n        str = '`' + str + '`';\n      }\n      return str;\n    }).join('.');\n  }\n  toString() {\n    return this.canonicalString();\n  }\n  /**\r\n   * Returns true if this field references the key of a document.\r\n   */\n  isKeyField() {\n    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;\n  }\n  /**\r\n   * The field designating the key of a document.\r\n   */\n  static keyField() {\n    return new FieldPath$1([DOCUMENT_KEY_NAME]);\n  }\n  /**\r\n   * Parses a field string from the given server-formatted string.\r\n   *\r\n   * - Splitting the empty string is not allowed (for now at least).\r\n   * - Empty segments within the string (e.g. if there are two consecutive\r\n   *   separators) are not allowed.\r\n   *\r\n   * TODO(b/37244157): we should make this more strict. Right now, it allows\r\n   * non-identifier path components, even if they aren't escaped.\r\n   */\n  static fromServerFormat(path) {\n    const segments = [];\n    let current = '';\n    let i = 0;\n    const addCurrentSegment = () => {\n      if (current.length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid field path (${path}). Paths must not be empty, begin ` + `with '.', end with '.', or contain '..'`);\n      }\n      segments.push(current);\n      current = '';\n    };\n    let inBackticks = false;\n    while (i < path.length) {\n      const c = path[i];\n      if (c === '\\\\') {\n        if (i + 1 === path.length) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);\n        }\n        const next = path[i + 1];\n        if (!(next === '\\\\' || next === '.' || next === '`')) {\n          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);\n        }\n        current += next;\n        i += 2;\n      } else if (c === '`') {\n        inBackticks = !inBackticks;\n        i++;\n      } else if (c === '.' && !inBackticks) {\n        addCurrentSegment();\n        i++;\n      } else {\n        current += c;\n        i++;\n      }\n    }\n    addCurrentSegment();\n    if (inBackticks) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);\n    }\n    return new FieldPath$1(segments);\n  }\n  static emptyPath() {\n    return new FieldPath$1([]);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n */\nclass DocumentKey {\n  constructor(path) {\n    this.path = path;\n  }\n  static fromPath(path) {\n    return new DocumentKey(ResourcePath.fromString(path));\n  }\n  static fromName(name) {\n    return new DocumentKey(ResourcePath.fromString(name).popFirst(5));\n  }\n  static empty() {\n    return new DocumentKey(ResourcePath.emptyPath());\n  }\n  get collectionGroup() {\n    return this.path.popLast().lastSegment();\n  }\n  /** Returns true if the document is in the specified collectionId. */\n  hasCollectionId(collectionId) {\n    return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;\n  }\n  /** Returns the collection group (i.e. the name of the parent collection) for this key. */\n  getCollectionGroup() {\n    return this.path.get(this.path.length - 2);\n  }\n  /** Returns the fully qualified path to the parent collection. */\n  getCollectionPath() {\n    return this.path.popLast();\n  }\n  isEqual(other) {\n    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;\n  }\n  toString() {\n    return this.path.toString();\n  }\n  static comparator(k1, k2) {\n    return ResourcePath.comparator(k1.path, k2.path);\n  }\n  static isDocumentKey(path) {\n    return path.length % 2 === 0;\n  }\n  /**\r\n   * Creates and returns a new document key with the given segments.\r\n   *\r\n   * @param segments - The segments of the path to the document\r\n   * @returns A new instance of DocumentKey\r\n   */\n  static fromSegments(segments) {\n    return new DocumentKey(new ResourcePath(segments.slice()));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The initial mutation batch id for each index. Gets updated during index\r\n * backfill.\r\n */\nconst INITIAL_LARGEST_BATCH_ID = -1;\n/**\r\n * The initial sequence number for each index. Gets updated during index\r\n * backfill.\r\n */\nconst INITIAL_SEQUENCE_NUMBER = 0;\n/**\r\n * An index definition for field indexes in Firestore.\r\n *\r\n * Every index is associated with a collection. The definition contains a list\r\n * of fields and their index kind (which can be `ASCENDING`, `DESCENDING` or\r\n * `CONTAINS` for ArrayContains/ArrayContainsAny queries).\r\n *\r\n * Unlike the backend, the SDK does not differentiate between collection or\r\n * collection group-scoped indices. Every index can be used for both single\r\n * collection and collection group queries.\r\n */\nclass FieldIndex {\n  constructor(\n  /**\r\n   * The index ID. Returns -1 if the index ID is not available (e.g. the index\r\n   * has not yet been persisted).\r\n   */\n  indexId, /** The collection ID this index applies to. */\n  collectionGroup, /** The field segments for this index. */\n  fields, /** Shows how up-to-date the index is for the current user. */\n  indexState) {\n    this.indexId = indexId;\n    this.collectionGroup = collectionGroup;\n    this.fields = fields;\n    this.indexState = indexState;\n  }\n}\n/** An ID for an index that has not yet been added to persistence.  */\nFieldIndex.UNKNOWN_ID = -1;\n/** Returns the ArrayContains/ArrayContainsAny segment for this index. */\nfunction fieldIndexGetArraySegment(fieldIndex) {\n  return fieldIndex.fields.find(s => s.kind === 2 /* IndexKind.CONTAINS */);\n}\n/** Returns all directional (ascending/descending) segments for this index. */\nfunction fieldIndexGetDirectionalSegments(fieldIndex) {\n  return fieldIndex.fields.filter(s => s.kind !== 2 /* IndexKind.CONTAINS */);\n}\n/**\r\n * Returns the order of the document key component for the given index.\r\n *\r\n * PORTING NOTE: This is only used in the Web IndexedDb implementation.\r\n */\nfunction fieldIndexGetKeyOrder(fieldIndex) {\n  const directionalSegments = fieldIndexGetDirectionalSegments(fieldIndex);\n  return directionalSegments.length === 0 ? 0 /* IndexKind.ASCENDING */ : directionalSegments[directionalSegments.length - 1].kind;\n}\n/**\r\n * Compares indexes by collection group and segments. Ignores update time and\r\n * index ID.\r\n */\nfunction fieldIndexSemanticComparator(left, right) {\n  let cmp = primitiveComparator(left.collectionGroup, right.collectionGroup);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  for (let i = 0; i < Math.min(left.fields.length, right.fields.length); ++i) {\n    cmp = indexSegmentComparator(left.fields[i], right.fields[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  return primitiveComparator(left.fields.length, right.fields.length);\n}\n/** Returns a debug representation of the field index */\nfunction fieldIndexToString(fieldIndex) {\n  return `id=${fieldIndex.indexId}|cg=${fieldIndex.collectionGroup}|f=${fieldIndex.fields.map(f => `${f.fieldPath}:${f.kind}`).join(',')}`;\n}\n/** An index component consisting of field path and index type.  */\nclass IndexSegment {\n  constructor( /** The field path of the component. */\n  fieldPath, /** The fields sorting order. */\n  kind) {\n    this.fieldPath = fieldPath;\n    this.kind = kind;\n  }\n}\nfunction indexSegmentComparator(left, right) {\n  const cmp = FieldPath$1.comparator(left.fieldPath, right.fieldPath);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  return primitiveComparator(left.kind, right.kind);\n}\n/**\r\n * Stores the \"high water mark\" that indicates how updated the Index is for the\r\n * current user.\r\n */\nclass IndexState {\n  constructor(\n  /**\r\n   * Indicates when the index was last updated (relative to other indexes).\r\n   */\n  sequenceNumber, /** The the latest indexed read time, document and batch id. */\n  offset) {\n    this.sequenceNumber = sequenceNumber;\n    this.offset = offset;\n  }\n  /** The state of an index that has not yet been backfilled. */\n  static empty() {\n    return new IndexState(INITIAL_SEQUENCE_NUMBER, IndexOffset.min());\n  }\n}\n/**\r\n * Creates an offset that matches all documents with a read time higher than\r\n * `readTime`.\r\n */\nfunction newIndexOffsetSuccessorFromReadTime(readTime, largestBatchId) {\n  // We want to create an offset that matches all documents with a read time\n  // greater than the provided read time. To do so, we technically need to\n  // create an offset for `(readTime, MAX_DOCUMENT_KEY)`. While we could use\n  // Unicode codepoints to generate MAX_DOCUMENT_KEY, it is much easier to use\n  // `(readTime + 1, DocumentKey.empty())` since `> DocumentKey.empty()` matches\n  // all valid document IDs.\n  const successorSeconds = readTime.toTimestamp().seconds;\n  const successorNanos = readTime.toTimestamp().nanoseconds + 1;\n  const successor = SnapshotVersion.fromTimestamp(successorNanos === 1e9 ? new Timestamp(successorSeconds + 1, 0) : new Timestamp(successorSeconds, successorNanos));\n  return new IndexOffset(successor, DocumentKey.empty(), largestBatchId);\n}\n/** Creates a new offset based on the provided document. */\nfunction newIndexOffsetFromDocument(document) {\n  return new IndexOffset(document.readTime, document.key, INITIAL_LARGEST_BATCH_ID);\n}\n/**\r\n * Stores the latest read time, document and batch ID that were processed for an\r\n * index.\r\n */\nclass IndexOffset {\n  constructor(\n  /**\r\n   * The latest read time version that has been indexed by Firestore for this\r\n   * field index.\r\n   */\n  readTime,\n  /**\r\n   * The key of the last document that was indexed for this query. Use\r\n   * `DocumentKey.empty()` if no document has been indexed.\r\n   */\n  documentKey,\n  /*\r\n   * The largest mutation batch id that's been processed by Firestore.\r\n   */\n  largestBatchId) {\n    this.readTime = readTime;\n    this.documentKey = documentKey;\n    this.largestBatchId = largestBatchId;\n  }\n  /** Returns an offset that sorts before all regular offsets. */\n  static min() {\n    return new IndexOffset(SnapshotVersion.min(), DocumentKey.empty(), INITIAL_LARGEST_BATCH_ID);\n  }\n  /** Returns an offset that sorts after all regular offsets. */\n  static max() {\n    return new IndexOffset(SnapshotVersion.max(), DocumentKey.empty(), INITIAL_LARGEST_BATCH_ID);\n  }\n}\nfunction indexOffsetComparator(left, right) {\n  let cmp = left.readTime.compareTo(right.readTime);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  cmp = DocumentKey.comparator(left.documentKey, right.documentKey);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  return primitiveComparator(left.largestBatchId, right.largestBatchId);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' + 'It might be necessary to refresh the browser tab.';\n/**\r\n * A base class representing a persistence transaction, encapsulating both the\r\n * transaction's sequence numbers as well as a list of onCommitted listeners.\r\n *\r\n * When you call Persistence.runTransaction(), it will create a transaction and\r\n * pass it to your callback. You then pass it to any method that operates\r\n * on persistence.\r\n */\nclass PersistenceTransaction {\n  constructor() {\n    this.onCommittedListeners = [];\n  }\n  addOnCommittedListener(listener) {\n    this.onCommittedListeners.push(listener);\n  }\n  raiseOnCommittedEvent() {\n    this.onCommittedListeners.forEach(listener => listener());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Verifies the error thrown by a LocalStore operation. If a LocalStore\r\n * operation fails because the primary lease has been taken by another client,\r\n * we ignore the error (the persistence layer will immediately call\r\n * `applyPrimaryLease` to propagate the primary state change). All other errors\r\n * are re-thrown.\r\n *\r\n * @param err - An error returned by a LocalStore operation.\r\n * @returns A Promise that resolves after we recovered, or the original error.\r\n */\nasync function ignoreIfPrimaryLeaseLoss(err) {\n  if (err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {\n    logDebug('LocalStore', 'Unexpectedly lost primary lease');\n  } else {\n    throw err;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * PersistencePromise is essentially a re-implementation of Promise except\r\n * it has a .next() method instead of .then() and .next() and .catch() callbacks\r\n * are executed synchronously when a PersistencePromise resolves rather than\r\n * asynchronously (Promise implementations use setImmediate() or similar).\r\n *\r\n * This is necessary to interoperate with IndexedDB which will automatically\r\n * commit transactions if control is returned to the event loop without\r\n * synchronously initiating another operation on the transaction.\r\n *\r\n * NOTE: .then() and .catch() only allow a single consumer, unlike normal\r\n * Promises.\r\n */\nclass PersistencePromise {\n  constructor(callback) {\n    // NOTE: next/catchCallback will always point to our own wrapper functions,\n    // not the user's raw next() or catch() callbacks.\n    this.nextCallback = null;\n    this.catchCallback = null;\n    // When the operation resolves, we'll set result or error and mark isDone.\n    this.result = undefined;\n    this.error = undefined;\n    this.isDone = false;\n    // Set to true when .then() or .catch() are called and prevents additional\n    // chaining.\n    this.callbackAttached = false;\n    callback(value => {\n      this.isDone = true;\n      this.result = value;\n      if (this.nextCallback) {\n        // value should be defined unless T is Void, but we can't express\n        // that in the type system.\n        this.nextCallback(value);\n      }\n    }, error => {\n      this.isDone = true;\n      this.error = error;\n      if (this.catchCallback) {\n        this.catchCallback(error);\n      }\n    });\n  }\n  catch(fn) {\n    return this.next(undefined, fn);\n  }\n  next(nextFn, catchFn) {\n    if (this.callbackAttached) {\n      fail();\n    }\n    this.callbackAttached = true;\n    if (this.isDone) {\n      if (!this.error) {\n        return this.wrapSuccess(nextFn, this.result);\n      } else {\n        return this.wrapFailure(catchFn, this.error);\n      }\n    } else {\n      return new PersistencePromise((resolve, reject) => {\n        this.nextCallback = value => {\n          this.wrapSuccess(nextFn, value).next(resolve, reject);\n        };\n        this.catchCallback = error => {\n          this.wrapFailure(catchFn, error).next(resolve, reject);\n        };\n      });\n    }\n  }\n  toPromise() {\n    return new Promise((resolve, reject) => {\n      this.next(resolve, reject);\n    });\n  }\n  wrapUserFunction(fn) {\n    try {\n      const result = fn();\n      if (result instanceof PersistencePromise) {\n        return result;\n      } else {\n        return PersistencePromise.resolve(result);\n      }\n    } catch (e) {\n      return PersistencePromise.reject(e);\n    }\n  }\n  wrapSuccess(nextFn, value) {\n    if (nextFn) {\n      return this.wrapUserFunction(() => nextFn(value));\n    } else {\n      // If there's no nextFn, then R must be the same as T\n      return PersistencePromise.resolve(value);\n    }\n  }\n  wrapFailure(catchFn, error) {\n    if (catchFn) {\n      return this.wrapUserFunction(() => catchFn(error));\n    } else {\n      return PersistencePromise.reject(error);\n    }\n  }\n  static resolve(result) {\n    return new PersistencePromise((resolve, reject) => {\n      resolve(result);\n    });\n  }\n  static reject(error) {\n    return new PersistencePromise((resolve, reject) => {\n      reject(error);\n    });\n  }\n  static waitFor(\n  // Accept all Promise types in waitFor().\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  all) {\n    return new PersistencePromise((resolve, reject) => {\n      let expectedCount = 0;\n      let resolvedCount = 0;\n      let done = false;\n      all.forEach(element => {\n        ++expectedCount;\n        element.next(() => {\n          ++resolvedCount;\n          if (done && resolvedCount === expectedCount) {\n            resolve();\n          }\n        }, err => reject(err));\n      });\n      done = true;\n      if (resolvedCount === expectedCount) {\n        resolve();\n      }\n    });\n  }\n  /**\r\n   * Given an array of predicate functions that asynchronously evaluate to a\r\n   * boolean, implements a short-circuiting `or` between the results. Predicates\r\n   * will be evaluated until one of them returns `true`, then stop. The final\r\n   * result will be whether any of them returned `true`.\r\n   */\n  static or(predicates) {\n    let p = PersistencePromise.resolve(false);\n    for (const predicate of predicates) {\n      p = p.next(isTrue => {\n        if (isTrue) {\n          return PersistencePromise.resolve(isTrue);\n        } else {\n          return predicate();\n        }\n      });\n    }\n    return p;\n  }\n  static forEach(collection, f) {\n    const promises = [];\n    collection.forEach((r, s) => {\n      promises.push(f.call(this, r, s));\n    });\n    return this.waitFor(promises);\n  }\n  /**\r\n   * Concurrently map all array elements through asynchronous function.\r\n   */\n  static mapArray(array, f) {\n    return new PersistencePromise((resolve, reject) => {\n      const expectedCount = array.length;\n      const results = new Array(expectedCount);\n      let resolvedCount = 0;\n      for (let i = 0; i < expectedCount; i++) {\n        const current = i;\n        f(array[current]).next(result => {\n          results[current] = result;\n          ++resolvedCount;\n          if (resolvedCount === expectedCount) {\n            resolve(results);\n          }\n        }, err => reject(err));\n      }\n    });\n  }\n  /**\r\n   * An alternative to recursive PersistencePromise calls, that avoids\r\n   * potential memory problems from unbounded chains of promises.\r\n   *\r\n   * The `action` will be called repeatedly while `condition` is true.\r\n   */\n  static doWhile(condition, action) {\n    return new PersistencePromise((resolve, reject) => {\n      const process = () => {\n        if (condition() === true) {\n          action().next(() => {\n            process();\n          }, reject);\n        } else {\n          resolve();\n        }\n      };\n      process();\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// References to `window` are guarded by SimpleDb.isAvailable()\n/* eslint-disable no-restricted-globals */\nconst LOG_TAG$i = 'SimpleDb';\n/**\r\n * The maximum number of retry attempts for an IndexedDb transaction that fails\r\n * with a DOMException.\r\n */\nconst TRANSACTION_RETRY_COUNT = 3;\n/**\r\n * Wraps an IDBTransaction and exposes a store() method to get a handle to a\r\n * specific object store.\r\n */\nclass SimpleDbTransaction {\n  constructor(action, transaction) {\n    this.action = action;\n    this.transaction = transaction;\n    this.aborted = false;\n    /**\r\n     * A `Promise` that resolves with the result of the IndexedDb transaction.\r\n     */\n    this.completionDeferred = new Deferred();\n    this.transaction.oncomplete = () => {\n      this.completionDeferred.resolve();\n    };\n    this.transaction.onabort = () => {\n      if (transaction.error) {\n        this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));\n      } else {\n        this.completionDeferred.resolve();\n      }\n    };\n    this.transaction.onerror = event => {\n      const error = checkForAndReportiOSError(event.target.error);\n      this.completionDeferred.reject(new IndexedDbTransactionError(action, error));\n    };\n  }\n  static open(db, action, mode, objectStoreNames) {\n    try {\n      return new SimpleDbTransaction(action, db.transaction(objectStoreNames, mode));\n    } catch (e) {\n      throw new IndexedDbTransactionError(action, e);\n    }\n  }\n  get completionPromise() {\n    return this.completionDeferred.promise;\n  }\n  abort(error) {\n    if (error) {\n      this.completionDeferred.reject(error);\n    }\n    if (!this.aborted) {\n      logDebug(LOG_TAG$i, 'Aborting transaction:', error ? error.message : 'Client-initiated abort');\n      this.aborted = true;\n      this.transaction.abort();\n    }\n  }\n  maybeCommit() {\n    // If the browser supports V3 IndexedDB, we invoke commit() explicitly to\n    // speed up index DB processing if the event loop remains blocks.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const maybeV3IndexedDb = this.transaction;\n    if (!this.aborted && typeof maybeV3IndexedDb.commit === 'function') {\n      maybeV3IndexedDb.commit();\n    }\n  }\n  /**\r\n   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All\r\n   * operations performed on the SimpleDbStore happen within the context of this\r\n   * transaction and it cannot be used anymore once the transaction is\r\n   * completed.\r\n   *\r\n   * Note that we can't actually enforce that the KeyType and ValueType are\r\n   * correct, but they allow type safety through the rest of the consuming code.\r\n   */\n  store(storeName) {\n    const store = this.transaction.objectStore(storeName);\n    return new SimpleDbStore(store);\n  }\n}\n/**\r\n * Provides a wrapper around IndexedDb with a simplified interface that uses\r\n * Promise-like return values to chain operations. Real promises cannot be used\r\n * since .then() continuations are executed asynchronously (e.g. via\r\n * .setImmediate), which would cause IndexedDB to end the transaction.\r\n * See PersistencePromise for more details.\r\n */\nclass SimpleDb {\n  /*\r\n   * Creates a new SimpleDb wrapper for IndexedDb database `name`.\r\n   *\r\n   * Note that `version` must not be a downgrade. IndexedDB does not support\r\n   * downgrading the schema version. We currently do not support any way to do\r\n   * versioning outside of IndexedDB's versioning mechanism, as only\r\n   * version-upgrade transactions are allowed to do things like create\r\n   * objectstores.\r\n   */\n  constructor(name, version, schemaConverter) {\n    this.name = name;\n    this.version = version;\n    this.schemaConverter = schemaConverter;\n    const iOSVersion = SimpleDb.getIOSVersion(getUA());\n    // NOTE: According to https://bugs.webkit.org/show_bug.cgi?id=197050, the\n    // bug we're checking for should exist in iOS >= 12.2 and < 13, but for\n    // whatever reason it's much harder to hit after 12.2 so we only proactively\n    // log on 12.2.\n    if (iOSVersion === 12.2) {\n      logError('Firestore persistence suffers from a bug in iOS 12.2 ' + 'Safari that may cause your app to stop working. See ' + 'https://stackoverflow.com/q/56496296/110915 for details ' + 'and a potential workaround.');\n    }\n  }\n  /** Deletes the specified database. */\n  static delete(name) {\n    logDebug(LOG_TAG$i, 'Removing database:', name);\n    return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();\n  }\n  /** Returns true if IndexedDB is available in the current environment. */\n  static isAvailable() {\n    if (!isIndexedDBAvailable()) {\n      return false;\n    }\n    if (SimpleDb.isMockPersistence()) {\n      return true;\n    }\n    // We extensively use indexed array values and compound keys,\n    // which IE and Edge do not support. However, they still have indexedDB\n    // defined on the window, so we need to check for them here and make sure\n    // to return that persistence is not enabled for those browsers.\n    // For tracking support of this feature, see here:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/\n    // Check the UA string to find out the browser.\n    const ua = getUA();\n    // IE 10\n    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';\n    // IE 11\n    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';\n    // Edge\n    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,\n    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';\n    // iOS Safari: Disable for users running iOS version < 10.\n    const iOSVersion = SimpleDb.getIOSVersion(ua);\n    const isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;\n    // Android browser: Disable for users running version < 4.5.\n    const androidVersion = getAndroidVersion(ua);\n    const isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;\n    if (ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0 || isUnsupportedIOS || isUnsupportedAndroid) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  /**\r\n   * Returns true if the backing IndexedDB store is the Node IndexedDBShim\r\n   * (see https://github.com/axemclion/IndexedDBShim).\r\n   */\n  static isMockPersistence() {\n    var _a;\n    return typeof process !== 'undefined' && ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === 'YES';\n  }\n  /** Helper to get a typed SimpleDbStore from a transaction. */\n  static getStore(txn, store) {\n    return txn.store(store);\n  }\n  // visible for testing\n  /** Parse User Agent to determine iOS version. Returns -1 if not found. */\n  static getIOSVersion(ua) {\n    const iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\\d_]+)/i);\n    const version = iOSVersionRegex ? iOSVersionRegex[1].split('_').slice(0, 2).join('.') : '-1';\n    return Number(version);\n  }\n  /**\r\n   * Opens the specified database, creating or upgrading it if necessary.\r\n   */\n  async ensureDb(action) {\n    if (!this.db) {\n      logDebug(LOG_TAG$i, 'Opening database:', this.name);\n      this.db = await new Promise((resolve, reject) => {\n        // TODO(mikelehen): Investigate browser compatibility.\n        // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\n        // suggests IE9 and older WebKit browsers handle upgrade\n        // differently. They expect setVersion, as described here:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion\n        const request = indexedDB.open(this.name, this.version);\n        request.onsuccess = event => {\n          const db = event.target.result;\n          resolve(db);\n        };\n        request.onblocked = () => {\n          reject(new IndexedDbTransactionError(action, 'Cannot upgrade IndexedDB schema while another tab is open. ' + 'Close all tabs that access Firestore and reload this page to proceed.'));\n        };\n        request.onerror = event => {\n          const error = event.target.error;\n          if (error.name === 'VersionError') {\n            reject(new FirestoreError(Code.FAILED_PRECONDITION, 'A newer version of the Firestore SDK was previously used and so the persisted ' + 'data is not compatible with the version of the SDK you are now using. The SDK ' + 'will operate with persistence disabled. If you need persistence, please ' + 're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' + 'data for your app to start fresh.'));\n          } else if (error.name === 'InvalidStateError') {\n            reject(new FirestoreError(Code.FAILED_PRECONDITION, 'Unable to open an IndexedDB connection. This could be due to running in a ' + 'private browsing session on a browser whose private browsing sessions do not ' + 'support IndexedDB: ' + error));\n          } else {\n            reject(new IndexedDbTransactionError(action, error));\n          }\n        };\n        request.onupgradeneeded = event => {\n          logDebug(LOG_TAG$i, 'Database \"' + this.name + '\" requires upgrade from version:', event.oldVersion);\n          const db = event.target.result;\n          this.schemaConverter.createOrUpgrade(db, request.transaction, event.oldVersion, this.version).next(() => {\n            logDebug(LOG_TAG$i, 'Database upgrade to version ' + this.version + ' complete');\n          });\n        };\n      });\n    }\n    if (this.versionchangelistener) {\n      this.db.onversionchange = event => this.versionchangelistener(event);\n    }\n    return this.db;\n  }\n  setVersionChangeListener(versionChangeListener) {\n    this.versionchangelistener = versionChangeListener;\n    if (this.db) {\n      this.db.onversionchange = event => {\n        return versionChangeListener(event);\n      };\n    }\n  }\n  async runTransaction(action, mode, objectStores, transactionFn) {\n    const readonly = mode === 'readonly';\n    let attemptNumber = 0;\n    while (true) {\n      ++attemptNumber;\n      try {\n        this.db = await this.ensureDb(action);\n        const transaction = SimpleDbTransaction.open(this.db, action, readonly ? 'readonly' : 'readwrite', objectStores);\n        const transactionFnResult = transactionFn(transaction).next(result => {\n          transaction.maybeCommit();\n          return result;\n        }).catch(error => {\n          // Abort the transaction if there was an error.\n          transaction.abort(error);\n          // We cannot actually recover, and calling `abort()` will cause the transaction's\n          // completion promise to be rejected. This in turn means that we won't use\n          // `transactionFnResult` below. We return a rejection here so that we don't add the\n          // possibility of returning `void` to the type of `transactionFnResult`.\n          return PersistencePromise.reject(error);\n        }).toPromise();\n        // As noted above, errors are propagated by aborting the transaction. So\n        // we swallow any error here to avoid the browser logging it as unhandled.\n        transactionFnResult.catch(() => {});\n        // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to\n        // fire), but still return the original transactionFnResult back to the\n        // caller.\n        await transaction.completionPromise;\n        return transactionFnResult;\n      } catch (e) {\n        const error = e;\n        // TODO(schmidt-sebastian): We could probably be smarter about this and\n        // not retry exceptions that are likely unrecoverable (such as quota\n        // exceeded errors).\n        // Note: We cannot use an instanceof check for FirestoreException, since the\n        // exception is wrapped in a generic error by our async/await handling.\n        const retryable = error.name !== 'FirebaseError' && attemptNumber < TRANSACTION_RETRY_COUNT;\n        logDebug(LOG_TAG$i, 'Transaction failed with error:', error.message, 'Retrying:', retryable);\n        this.close();\n        if (!retryable) {\n          return Promise.reject(error);\n        }\n      }\n    }\n  }\n  close() {\n    if (this.db) {\n      this.db.close();\n    }\n    this.db = undefined;\n  }\n}\n/** Parse User Agent to determine Android version. Returns -1 if not found. */\nfunction getAndroidVersion(ua) {\n  const androidVersionRegex = ua.match(/Android ([\\d.]+)/i);\n  const version = androidVersionRegex ? androidVersionRegex[1].split('.').slice(0, 2).join('.') : '-1';\n  return Number(version);\n}\n/**\r\n * A controller for iterating over a key range or index. It allows an iterate\r\n * callback to delete the currently-referenced object, or jump to a new key\r\n * within the key range or index.\r\n */\nclass IterationController {\n  constructor(dbCursor) {\n    this.dbCursor = dbCursor;\n    this.shouldStop = false;\n    this.nextKey = null;\n  }\n  get isDone() {\n    return this.shouldStop;\n  }\n  get skipToKey() {\n    return this.nextKey;\n  }\n  set cursor(value) {\n    this.dbCursor = value;\n  }\n  /**\r\n   * This function can be called to stop iteration at any point.\r\n   */\n  done() {\n    this.shouldStop = true;\n  }\n  /**\r\n   * This function can be called to skip to that next key, which could be\r\n   * an index or a primary key.\r\n   */\n  skip(key) {\n    this.nextKey = key;\n  }\n  /**\r\n   * Delete the current cursor value from the object store.\r\n   *\r\n   * NOTE: You CANNOT do this with a keysOnly query.\r\n   */\n  delete() {\n    return wrapRequest(this.dbCursor.delete());\n  }\n}\n/** An error that wraps exceptions that thrown during IndexedDB execution. */\nclass IndexedDbTransactionError extends FirestoreError {\n  constructor(actionName, cause) {\n    super(Code.UNAVAILABLE, `IndexedDB transaction '${actionName}' failed: ${cause}`);\n    this.name = 'IndexedDbTransactionError';\n  }\n}\n/** Verifies whether `e` is an IndexedDbTransactionError. */\nfunction isIndexedDbTransactionError(e) {\n  // Use name equality, as instanceof checks on errors don't work with errors\n  // that wrap other errors.\n  return e.name === 'IndexedDbTransactionError';\n}\n/**\r\n * A wrapper around an IDBObjectStore providing an API that:\r\n *\r\n * 1) Has generic KeyType / ValueType parameters to provide strongly-typed\r\n * methods for acting against the object store.\r\n * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every\r\n * method return a PersistencePromise instead.\r\n * 3) Provides a higher-level API to avoid needing to do excessive wrapping of\r\n * intermediate IndexedDB types (IDBCursorWithValue, etc.)\r\n */\nclass SimpleDbStore {\n  constructor(store) {\n    this.store = store;\n  }\n  put(keyOrValue, value) {\n    let request;\n    if (value !== undefined) {\n      logDebug(LOG_TAG$i, 'PUT', this.store.name, keyOrValue, value);\n      request = this.store.put(value, keyOrValue);\n    } else {\n      logDebug(LOG_TAG$i, 'PUT', this.store.name, '<auto-key>', keyOrValue);\n      request = this.store.put(keyOrValue);\n    }\n    return wrapRequest(request);\n  }\n  /**\r\n   * Adds a new value into an Object Store and returns the new key. Similar to\r\n   * IndexedDb's `add()`, this method will fail on primary key collisions.\r\n   *\r\n   * @param value - The object to write.\r\n   * @returns The key of the value to add.\r\n   */\n  add(value) {\n    logDebug(LOG_TAG$i, 'ADD', this.store.name, value, value);\n    const request = this.store.add(value);\n    return wrapRequest(request);\n  }\n  /**\r\n   * Gets the object with the specified key from the specified store, or null\r\n   * if no object exists with the specified key.\r\n   *\r\n   * @key The key of the object to get.\r\n   * @returns The object with the specified key or null if no object exists.\r\n   */\n  get(key) {\n    const request = this.store.get(key);\n    // We're doing an unsafe cast to ValueType.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return wrapRequest(request).next(result => {\n      // Normalize nonexistence to null.\n      if (result === undefined) {\n        result = null;\n      }\n      logDebug(LOG_TAG$i, 'GET', this.store.name, key, result);\n      return result;\n    });\n  }\n  delete(key) {\n    logDebug(LOG_TAG$i, 'DELETE', this.store.name, key);\n    const request = this.store.delete(key);\n    return wrapRequest(request);\n  }\n  /**\r\n   * If we ever need more of the count variants, we can add overloads. For now,\r\n   * all we need is to count everything in a store.\r\n   *\r\n   * Returns the number of rows in the store.\r\n   */\n  count() {\n    logDebug(LOG_TAG$i, 'COUNT', this.store.name);\n    const request = this.store.count();\n    return wrapRequest(request);\n  }\n  loadAll(indexOrRange, range) {\n    const iterateOptions = this.options(indexOrRange, range);\n    // Use `getAll()` if the browser supports IndexedDB v3, as it is roughly\n    // 20% faster.\n    const store = iterateOptions.index ? this.store.index(iterateOptions.index) : this.store;\n    if (typeof store.getAll === 'function') {\n      const request = store.getAll(iterateOptions.range);\n      return new PersistencePromise((resolve, reject) => {\n        request.onerror = event => {\n          reject(event.target.error);\n        };\n        request.onsuccess = event => {\n          resolve(event.target.result);\n        };\n      });\n    } else {\n      const cursor = this.cursor(iterateOptions);\n      const results = [];\n      return this.iterateCursor(cursor, (key, value) => {\n        results.push(value);\n      }).next(() => {\n        return results;\n      });\n    }\n  }\n  /**\r\n   * Loads the first `count` elements from the provided index range. Loads all\r\n   * elements if no limit is provided.\r\n   */\n  loadFirst(range, count) {\n    const request = this.store.getAll(range, count === null ? undefined : count);\n    return new PersistencePromise((resolve, reject) => {\n      request.onerror = event => {\n        reject(event.target.error);\n      };\n      request.onsuccess = event => {\n        resolve(event.target.result);\n      };\n    });\n  }\n  deleteAll(indexOrRange, range) {\n    logDebug(LOG_TAG$i, 'DELETE ALL', this.store.name);\n    const options = this.options(indexOrRange, range);\n    options.keysOnly = false;\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, (key, value, control) => {\n      // NOTE: Calling delete() on a cursor is documented as more efficient than\n      // calling delete() on an object store with a single key\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),\n      // however, this requires us *not* to use a keysOnly cursor\n      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We\n      // may want to compare the performance of each method.\n      return control.delete();\n    });\n  }\n  iterate(optionsOrCallback, callback) {\n    let options;\n    if (!callback) {\n      options = {};\n      callback = optionsOrCallback;\n    } else {\n      options = optionsOrCallback;\n    }\n    const cursor = this.cursor(options);\n    return this.iterateCursor(cursor, callback);\n  }\n  /**\r\n   * Iterates over a store, but waits for the given callback to complete for\r\n   * each entry before iterating the next entry. This allows the callback to do\r\n   * asynchronous work to determine if this iteration should continue.\r\n   *\r\n   * The provided callback should return `true` to continue iteration, and\r\n   * `false` otherwise.\r\n   */\n  iterateSerial(callback) {\n    const cursorRequest = this.cursor({});\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = event => {\n        const error = checkForAndReportiOSError(event.target.error);\n        reject(error);\n      };\n      cursorRequest.onsuccess = event => {\n        const cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        callback(cursor.primaryKey, cursor.value).next(shouldContinue => {\n          if (shouldContinue) {\n            cursor.continue();\n          } else {\n            resolve();\n          }\n        });\n      };\n    });\n  }\n  iterateCursor(cursorRequest, fn) {\n    const results = [];\n    return new PersistencePromise((resolve, reject) => {\n      cursorRequest.onerror = event => {\n        reject(event.target.error);\n      };\n      cursorRequest.onsuccess = event => {\n        const cursor = event.target.result;\n        if (!cursor) {\n          resolve();\n          return;\n        }\n        const controller = new IterationController(cursor);\n        const userResult = fn(cursor.primaryKey, cursor.value, controller);\n        if (userResult instanceof PersistencePromise) {\n          const userPromise = userResult.catch(err => {\n            controller.done();\n            return PersistencePromise.reject(err);\n          });\n          results.push(userPromise);\n        }\n        if (controller.isDone) {\n          resolve();\n        } else if (controller.skipToKey === null) {\n          cursor.continue();\n        } else {\n          cursor.continue(controller.skipToKey);\n        }\n      };\n    }).next(() => PersistencePromise.waitFor(results));\n  }\n  options(indexOrRange, range) {\n    let indexName = undefined;\n    if (indexOrRange !== undefined) {\n      if (typeof indexOrRange === 'string') {\n        indexName = indexOrRange;\n      } else {\n        range = indexOrRange;\n      }\n    }\n    return {\n      index: indexName,\n      range\n    };\n  }\n  cursor(options) {\n    let direction = 'next';\n    if (options.reverse) {\n      direction = 'prev';\n    }\n    if (options.index) {\n      const index = this.store.index(options.index);\n      if (options.keysOnly) {\n        return index.openKeyCursor(options.range, direction);\n      } else {\n        return index.openCursor(options.range, direction);\n      }\n    } else {\n      return this.store.openCursor(options.range, direction);\n    }\n  }\n}\n/**\r\n * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror\r\n * handlers to resolve / reject the PersistencePromise as appropriate.\r\n */\nfunction wrapRequest(request) {\n  return new PersistencePromise((resolve, reject) => {\n    request.onsuccess = event => {\n      const result = event.target.result;\n      resolve(result);\n    };\n    request.onerror = event => {\n      const error = checkForAndReportiOSError(event.target.error);\n      reject(error);\n    };\n  });\n}\n// Guard so we only report the error once.\nlet reportedIOSError = false;\nfunction checkForAndReportiOSError(error) {\n  const iOSVersion = SimpleDb.getIOSVersion(getUA());\n  if (iOSVersion >= 12.2 && iOSVersion < 13) {\n    const IOS_ERROR = 'An internal error was encountered in the Indexed Database server';\n    if (error.message.indexOf(IOS_ERROR) >= 0) {\n      // Wrap error in a more descriptive one.\n      const newError = new FirestoreError('internal', `IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${IOS_ERROR}'. This is likely ` + `due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 ` + `for details and a potential workaround.`);\n      if (!reportedIOSError) {\n        reportedIOSError = true;\n        // Throw a global exception outside of this promise chain, for the user to\n        // potentially catch.\n        setTimeout(() => {\n          throw newError;\n        }, 0);\n      }\n      return newError;\n    }\n  }\n  return error;\n}\nconst LOG_TAG$h = 'IndexBackfiller';\n/** How long we wait to try running index backfill after SDK initialization. */\nconst INITIAL_BACKFILL_DELAY_MS = 15 * 1000;\n/** Minimum amount of time between backfill checks, after the first one. */\nconst REGULAR_BACKFILL_DELAY_MS = 60 * 1000;\n/** The maximum number of documents to process each time backfill() is called. */\nconst MAX_DOCUMENTS_TO_PROCESS = 50;\n/** This class is responsible for the scheduling of Index Backfiller. */\nclass IndexBackfillerScheduler {\n  constructor(asyncQueue, backfiller) {\n    this.asyncQueue = asyncQueue;\n    this.backfiller = backfiller;\n    this.task = null;\n  }\n  start() {\n    this.schedule(INITIAL_BACKFILL_DELAY_MS);\n  }\n  stop() {\n    if (this.task) {\n      this.task.cancel();\n      this.task = null;\n    }\n  }\n  get started() {\n    return this.task !== null;\n  }\n  schedule(delay) {\n    logDebug(LOG_TAG$h, `Scheduled in ${delay}ms`);\n    this.task = this.asyncQueue.enqueueAfterDelay(\"index_backfill\" /* TimerId.IndexBackfill */, delay, async () => {\n      this.task = null;\n      try {\n        const documentsProcessed = await this.backfiller.backfill();\n        logDebug(LOG_TAG$h, `Documents written: ${documentsProcessed}`);\n      } catch (e) {\n        if (isIndexedDbTransactionError(e)) {\n          logDebug(LOG_TAG$h, 'Ignoring IndexedDB error during index backfill: ', e);\n        } else {\n          await ignoreIfPrimaryLeaseLoss(e);\n        }\n      }\n      await this.schedule(REGULAR_BACKFILL_DELAY_MS);\n    });\n  }\n}\n/** Implements the steps for backfilling indexes. */\nclass IndexBackfiller {\n  constructor(\n  /**\r\n   * LocalStore provides access to IndexManager and LocalDocumentView.\r\n   * These properties will update when the user changes. Consequently,\r\n   * making a local copy of IndexManager and LocalDocumentView will require\r\n   * updates over time. The simpler solution is to rely on LocalStore to have\r\n   * an up-to-date references to IndexManager and LocalDocumentStore.\r\n   */\n  localStore, persistence) {\n    this.localStore = localStore;\n    this.persistence = persistence;\n  }\n  async backfill(maxDocumentsToProcess = MAX_DOCUMENTS_TO_PROCESS) {\n    return this.persistence.runTransaction('Backfill Indexes', 'readwrite-primary', txn => this.writeIndexEntries(txn, maxDocumentsToProcess));\n  }\n  /** Writes index entries until the cap is reached. Returns the number of documents processed. */\n  writeIndexEntries(transaction, maxDocumentsToProcess) {\n    const processedCollectionGroups = new Set();\n    let documentsRemaining = maxDocumentsToProcess;\n    let continueLoop = true;\n    return PersistencePromise.doWhile(() => continueLoop === true && documentsRemaining > 0, () => {\n      return this.localStore.indexManager.getNextCollectionGroupToUpdate(transaction).next(collectionGroup => {\n        if (collectionGroup === null || processedCollectionGroups.has(collectionGroup)) {\n          continueLoop = false;\n        } else {\n          logDebug(LOG_TAG$h, `Processing collection: ${collectionGroup}`);\n          return this.writeEntriesForCollectionGroup(transaction, collectionGroup, documentsRemaining).next(documentsProcessed => {\n            documentsRemaining -= documentsProcessed;\n            processedCollectionGroups.add(collectionGroup);\n          });\n        }\n      });\n    }).next(() => maxDocumentsToProcess - documentsRemaining);\n  }\n  /**\r\n   * Writes entries for the provided collection group. Returns the number of documents processed.\r\n   */\n  writeEntriesForCollectionGroup(transaction, collectionGroup, documentsRemainingUnderCap) {\n    // Use the earliest offset of all field indexes to query the local cache.\n    return this.localStore.indexManager.getMinOffsetFromCollectionGroup(transaction, collectionGroup).next(existingOffset => this.localStore.localDocuments.getNextDocuments(transaction, collectionGroup, existingOffset, documentsRemainingUnderCap).next(nextBatch => {\n      const docs = nextBatch.changes;\n      return this.localStore.indexManager.updateIndexEntries(transaction, docs).next(() => this.getNewOffset(existingOffset, nextBatch)).next(newOffset => {\n        logDebug(LOG_TAG$h, `Updating offset: ${newOffset}`);\n        return this.localStore.indexManager.updateCollectionGroup(transaction, collectionGroup, newOffset);\n      }).next(() => docs.size);\n    }));\n  }\n  /** Returns the next offset based on the provided documents. */\n  getNewOffset(existingOffset, lookupResult) {\n    let maxOffset = existingOffset;\n    lookupResult.changes.forEach((key, document) => {\n      const newOffset = newIndexOffsetFromDocument(document);\n      if (indexOffsetComparator(newOffset, maxOffset) > 0) {\n        maxOffset = newOffset;\n      }\n    });\n    return new IndexOffset(maxOffset.readTime, maxOffset.documentKey, Math.max(lookupResult.batchId, existingOffset.largestBatchId));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to\r\n * exceed. All subsequent calls to next will return increasing values. If provided with a\r\n * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as\r\n * well as write out sequence numbers that it produces via `next()`.\r\n */\nclass ListenSequence {\n  constructor(previousValue, sequenceNumberSyncer) {\n    this.previousValue = previousValue;\n    if (sequenceNumberSyncer) {\n      sequenceNumberSyncer.sequenceNumberHandler = sequenceNumber => this.setPreviousValue(sequenceNumber);\n      this.writeNewSequenceNumber = sequenceNumber => sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);\n    }\n  }\n  setPreviousValue(externalPreviousValue) {\n    this.previousValue = Math.max(externalPreviousValue, this.previousValue);\n    return this.previousValue;\n  }\n  next() {\n    const nextValue = ++this.previousValue;\n    if (this.writeNewSequenceNumber) {\n      this.writeNewSequenceNumber(nextValue);\n    }\n    return nextValue;\n  }\n}\nListenSequence.INVALID = -1;\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst escapeChar = '\\u0001';\nconst encodedSeparatorChar = '\\u0001';\nconst encodedNul = '\\u0010';\nconst encodedEscape = '\\u0011';\n/**\r\n * Encodes a resource path into a IndexedDb-compatible string form.\r\n */\nfunction encodeResourcePath(path) {\n  let result = '';\n  for (let i = 0; i < path.length; i++) {\n    if (result.length > 0) {\n      result = encodeSeparator(result);\n    }\n    result = encodeSegment(path.get(i), result);\n  }\n  return encodeSeparator(result);\n}\n/** Encodes a single segment of a resource path into the given result */\nfunction encodeSegment(segment, resultBuf) {\n  let result = resultBuf;\n  const length = segment.length;\n  for (let i = 0; i < length; i++) {\n    const c = segment.charAt(i);\n    switch (c) {\n      case '\\0':\n        result += escapeChar + encodedNul;\n        break;\n      case escapeChar:\n        result += escapeChar + encodedEscape;\n        break;\n      default:\n        result += c;\n    }\n  }\n  return result;\n}\n/** Encodes a path separator into the given result */\nfunction encodeSeparator(result) {\n  return result + escapeChar + encodedSeparatorChar;\n}\n/**\r\n * Decodes the given IndexedDb-compatible string form of a resource path into\r\n * a ResourcePath instance. Note that this method is not suitable for use with\r\n * decoding resource names from the server; those are One Platform format\r\n * strings.\r\n */\nfunction decodeResourcePath(path) {\n  // Event the empty path must encode as a path of at least length 2. A path\n  // with exactly 2 must be the empty path.\n  const length = path.length;\n  hardAssert(length >= 2);\n  if (length === 2) {\n    hardAssert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar);\n    return ResourcePath.emptyPath();\n  }\n  // Escape characters cannot exist past the second-to-last position in the\n  // source value.\n  const lastReasonableEscapeIndex = length - 2;\n  const segments = [];\n  let segmentBuilder = '';\n  for (let start = 0; start < length;) {\n    // The last two characters of a valid encoded path must be a separator, so\n    // there must be an end to this segment.\n    const end = path.indexOf(escapeChar, start);\n    if (end < 0 || end > lastReasonableEscapeIndex) {\n      fail();\n    }\n    const next = path.charAt(end + 1);\n    switch (next) {\n      case encodedSeparatorChar:\n        const currentPiece = path.substring(start, end);\n        let segment;\n        if (segmentBuilder.length === 0) {\n          // Avoid copying for the common case of a segment that excludes \\0\n          // and \\001\n          segment = currentPiece;\n        } else {\n          segmentBuilder += currentPiece;\n          segment = segmentBuilder;\n          segmentBuilder = '';\n        }\n        segments.push(segment);\n        break;\n      case encodedNul:\n        segmentBuilder += path.substring(start, end);\n        segmentBuilder += '\\0';\n        break;\n      case encodedEscape:\n        // The escape character can be used in the output to encode itself.\n        segmentBuilder += path.substring(start, end + 1);\n        break;\n      default:\n        fail();\n    }\n    start = end + 2;\n  }\n  return new ResourcePath(segments);\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DbRemoteDocumentStore$1 = 'remoteDocuments';\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Name of the IndexedDb object store.\r\n *\r\n * Note that the name 'owner' is chosen to ensure backwards compatibility with\r\n * older clients that only supported single locked access to the persistence\r\n * layer.\r\n */\nconst DbPrimaryClientStore = 'owner';\n/**\r\n * The key string used for the single object that exists in the\r\n * DbPrimaryClient store.\r\n */\nconst DbPrimaryClientKey = 'owner';\n/** Name of the IndexedDb object store.  */\nconst DbMutationQueueStore = 'mutationQueues';\n/** Keys are automatically assigned via the userId property. */\nconst DbMutationQueueKeyPath = 'userId';\n/** Name of the IndexedDb object store.  */\nconst DbMutationBatchStore = 'mutations';\n/** Keys are automatically assigned via the userId, batchId properties. */\nconst DbMutationBatchKeyPath = 'batchId';\n/** The index name for lookup of mutations by user. */\nconst DbMutationBatchUserMutationsIndex = 'userMutationsIndex';\n/** The user mutations index is keyed by [userId, batchId] pairs. */\nconst DbMutationBatchUserMutationsKeyPath = ['userId', 'batchId'];\n/**\r\n * Creates a [userId] key for use in the DbDocumentMutations index to iterate\r\n * over all of a user's document mutations.\r\n */\nfunction newDbDocumentMutationPrefixForUser(userId) {\n  return [userId];\n}\n/**\r\n * Creates a [userId, encodedPath] key for use in the DbDocumentMutations\r\n * index to iterate over all at document mutations for a given path or lower.\r\n */\nfunction newDbDocumentMutationPrefixForPath(userId, path) {\n  return [userId, encodeResourcePath(path)];\n}\n/**\r\n * Creates a full index key of [userId, encodedPath, batchId] for inserting\r\n * and deleting into the DbDocumentMutations index.\r\n */\nfunction newDbDocumentMutationKey(userId, path, batchId) {\n  return [userId, encodeResourcePath(path), batchId];\n}\n/**\r\n * Because we store all the useful information for this store in the key,\r\n * there is no useful information to store as the value. The raw (unencoded)\r\n * path cannot be stored because IndexedDb doesn't store prototype\r\n * information.\r\n */\nconst DbDocumentMutationPlaceholder = {};\nconst DbDocumentMutationStore = 'documentMutations';\nconst DbRemoteDocumentStore = 'remoteDocumentsV14';\n/**\r\n * The primary key of the remote documents store, which allows for efficient\r\n * access by collection path and read time.\r\n */\nconst DbRemoteDocumentKeyPath = ['prefixPath', 'collectionGroup', 'readTime', 'documentId'];\n/** An index that provides access to documents by key. */\nconst DbRemoteDocumentDocumentKeyIndex = 'documentKeyIndex';\nconst DbRemoteDocumentDocumentKeyIndexPath = ['prefixPath', 'collectionGroup', 'documentId'];\n/**\r\n * An index that provides access to documents by collection group and read\r\n * time.\r\n *\r\n * This index is used by the index backfiller.\r\n */\nconst DbRemoteDocumentCollectionGroupIndex = 'collectionGroupIndex';\nconst DbRemoteDocumentCollectionGroupIndexPath = ['collectionGroup', 'readTime', 'prefixPath', 'documentId'];\nconst DbRemoteDocumentGlobalStore = 'remoteDocumentGlobal';\nconst DbRemoteDocumentGlobalKey = 'remoteDocumentGlobalKey';\nconst DbTargetStore = 'targets';\n/** Keys are automatically assigned via the targetId property. */\nconst DbTargetKeyPath = 'targetId';\n/** The name of the queryTargets index. */\nconst DbTargetQueryTargetsIndexName = 'queryTargetsIndex';\n/**\r\n * The index of all canonicalIds to the targets that they match. This is not\r\n * a unique mapping because canonicalId does not promise a unique name for all\r\n * possible queries, so we append the targetId to make the mapping unique.\r\n */\nconst DbTargetQueryTargetsKeyPath = ['canonicalId', 'targetId'];\n/** Name of the IndexedDb object store.  */\nconst DbTargetDocumentStore = 'targetDocuments';\n/** Keys are automatically assigned via the targetId, path properties. */\nconst DbTargetDocumentKeyPath = ['targetId', 'path'];\n/** The index name for the reverse index. */\nconst DbTargetDocumentDocumentTargetsIndex = 'documentTargetsIndex';\n/** We also need to create the reverse index for these properties. */\nconst DbTargetDocumentDocumentTargetsKeyPath = ['path', 'targetId'];\n/**\r\n * The key string used for the single object that exists in the\r\n * DbTargetGlobal store.\r\n */\nconst DbTargetGlobalKey = 'targetGlobalKey';\nconst DbTargetGlobalStore = 'targetGlobal';\n/** Name of the IndexedDb object store. */\nconst DbCollectionParentStore = 'collectionParents';\n/** Keys are automatically assigned via the collectionId, parent properties. */\nconst DbCollectionParentKeyPath = ['collectionId', 'parent'];\n/** Name of the IndexedDb object store. */\nconst DbClientMetadataStore = 'clientMetadata';\n/** Keys are automatically assigned via the clientId properties. */\nconst DbClientMetadataKeyPath = 'clientId';\n/** Name of the IndexedDb object store. */\nconst DbBundleStore = 'bundles';\nconst DbBundleKeyPath = 'bundleId';\n/** Name of the IndexedDb object store. */\nconst DbNamedQueryStore = 'namedQueries';\nconst DbNamedQueryKeyPath = 'name';\n/** Name of the IndexedDb object store. */\nconst DbIndexConfigurationStore = 'indexConfiguration';\nconst DbIndexConfigurationKeyPath = 'indexId';\n/**\r\n * An index that provides access to the index configurations by collection\r\n * group.\r\n *\r\n * PORTING NOTE: iOS and Android maintain this index in-memory, but this is\r\n * not possible here as the Web client supports concurrent access to\r\n * persistence via multi-tab.\r\n */\nconst DbIndexConfigurationCollectionGroupIndex = 'collectionGroupIndex';\nconst DbIndexConfigurationCollectionGroupIndexPath = 'collectionGroup';\n/** Name of the IndexedDb object store. */\nconst DbIndexStateStore = 'indexState';\nconst DbIndexStateKeyPath = ['indexId', 'uid'];\n/**\r\n * An index that provides access to documents in a collection sorted by last\r\n * update time. Used by the backfiller.\r\n *\r\n * PORTING NOTE: iOS and Android maintain this index in-memory, but this is\r\n * not possible here as the Web client supports concurrent access to\r\n * persistence via multi-tab.\r\n */\nconst DbIndexStateSequenceNumberIndex = 'sequenceNumberIndex';\nconst DbIndexStateSequenceNumberIndexPath = ['uid', 'sequenceNumber'];\n/** Name of the IndexedDb object store. */\nconst DbIndexEntryStore = 'indexEntries';\nconst DbIndexEntryKeyPath = ['indexId', 'uid', 'arrayValue', 'directionalValue', 'orderedDocumentKey', 'documentKey'];\nconst DbIndexEntryDocumentKeyIndex = 'documentKeyIndex';\nconst DbIndexEntryDocumentKeyIndexPath = ['indexId', 'uid', 'orderedDocumentKey'];\n/** Name of the IndexedDb object store. */\nconst DbDocumentOverlayStore = 'documentOverlays';\nconst DbDocumentOverlayKeyPath = ['userId', 'collectionPath', 'documentId'];\nconst DbDocumentOverlayCollectionPathOverlayIndex = 'collectionPathOverlayIndex';\nconst DbDocumentOverlayCollectionPathOverlayIndexPath = ['userId', 'collectionPath', 'largestBatchId'];\nconst DbDocumentOverlayCollectionGroupOverlayIndex = 'collectionGroupOverlayIndex';\nconst DbDocumentOverlayCollectionGroupOverlayIndexPath = ['userId', 'collectionGroup', 'largestBatchId'];\n/** Name of the IndexedDb object store. */\nconst DbGlobalsStore = 'globals';\nconst DbGlobalsKeyPath = 'name';\n// Visible for testing\nconst V1_STORES = [DbMutationQueueStore, DbMutationBatchStore, DbDocumentMutationStore, DbRemoteDocumentStore$1, DbTargetStore, DbPrimaryClientStore, DbTargetGlobalStore, DbTargetDocumentStore];\n// Visible for testing\nconst V3_STORES = V1_STORES;\n// Note: DbRemoteDocumentChanges is no longer used and dropped with v9.\nconst V4_STORES = [...V3_STORES, DbClientMetadataStore];\nconst V6_STORES = [...V4_STORES, DbRemoteDocumentGlobalStore];\nconst V8_STORES = [...V6_STORES, DbCollectionParentStore];\nconst V11_STORES = [...V8_STORES, DbBundleStore, DbNamedQueryStore];\nconst V12_STORES = [...V11_STORES, DbDocumentOverlayStore];\nconst V13_STORES = [DbMutationQueueStore, DbMutationBatchStore, DbDocumentMutationStore, DbRemoteDocumentStore, DbTargetStore, DbPrimaryClientStore, DbTargetGlobalStore, DbTargetDocumentStore, DbClientMetadataStore, DbRemoteDocumentGlobalStore, DbCollectionParentStore, DbBundleStore, DbNamedQueryStore, DbDocumentOverlayStore];\nconst V14_STORES = V13_STORES;\nconst V15_STORES = [...V14_STORES, DbIndexConfigurationStore, DbIndexStateStore, DbIndexEntryStore];\nconst V16_STORES = V15_STORES;\nconst V17_STORES = [...V15_STORES, DbGlobalsStore];\n/** Returns the object stores for the provided schema. */\nfunction getObjectStores(schemaVersion) {\n  if (schemaVersion === 17) {\n    return V17_STORES;\n  } else if (schemaVersion === 16) {\n    return V16_STORES;\n  } else if (schemaVersion === 15) {\n    return V15_STORES;\n  } else if (schemaVersion === 14) {\n    return V14_STORES;\n  } else if (schemaVersion === 13) {\n    return V13_STORES;\n  } else if (schemaVersion === 12) {\n    return V12_STORES;\n  } else if (schemaVersion === 11) {\n    return V11_STORES;\n  } else {\n    fail();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass IndexedDbTransaction extends PersistenceTransaction {\n  constructor(simpleDbTransaction, currentSequenceNumber) {\n    super();\n    this.simpleDbTransaction = simpleDbTransaction;\n    this.currentSequenceNumber = currentSequenceNumber;\n  }\n}\nfunction getStore(txn, store) {\n  const indexedDbTransaction = debugCast(txn);\n  return SimpleDb.getStore(indexedDbTransaction.simpleDbTransaction, store);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction objectSize(obj) {\n  let count = 0;\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      count++;\n    }\n  }\n  return count;\n}\nfunction forEach(obj, fn) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\nfunction mapToArray(obj, fn) {\n  const result = [];\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      result.push(fn(obj[key], key, obj));\n    }\n  }\n  return result;\n}\nfunction isEmpty(obj) {\n  for (const key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass SortedMap {\n  constructor(comparator, root) {\n    this.comparator = comparator;\n    this.root = root ? root : LLRBNode.EMPTY;\n  }\n  // Returns a copy of the map, with the specified key/value added or replaced.\n  insert(key, value) {\n    return new SortedMap(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns a copy of the map, with the specified key removed.\n  remove(key) {\n    return new SortedMap(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));\n  }\n  // Returns the value of the node with the given key, or null.\n  get(key) {\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n  // Returns the index of the element in this sorted map, or -1 if it doesn't\n  // exist.\n  indexOf(key) {\n    // Number of nodes that were pruned when descending right\n    let prunedNodes = 0;\n    let node = this.root;\n    while (!node.isEmpty()) {\n      const cmp = this.comparator(key, node.key);\n      if (cmp === 0) {\n        return prunedNodes + node.left.size;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else {\n        // Count all nodes left of the node plus the node itself\n        prunedNodes += node.left.size + 1;\n        node = node.right;\n      }\n    }\n    // Node not found\n    return -1;\n  }\n  isEmpty() {\n    return this.root.isEmpty();\n  }\n  // Returns the total number of nodes in the map.\n  get size() {\n    return this.root.size;\n  }\n  // Returns the minimum key in the map.\n  minKey() {\n    return this.root.minKey();\n  }\n  // Returns the maximum key in the map.\n  maxKey() {\n    return this.root.maxKey();\n  }\n  // Traverses the map in key order and calls the specified action function\n  // for each key/value pair. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(action) {\n    return this.root.inorderTraversal(action);\n  }\n  forEach(fn) {\n    this.inorderTraversal((k, v) => {\n      fn(k, v);\n      return false;\n    });\n  }\n  toString() {\n    const descriptions = [];\n    this.inorderTraversal((k, v) => {\n      descriptions.push(`${k}:${v}`);\n      return false;\n    });\n    return `{${descriptions.join(', ')}}`;\n  }\n  // Traverses the map in reverse key order and calls the specified action\n  // function for each key/value pair. If action returns true, traversal is\n  // aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(action) {\n    return this.root.reverseTraversal(action);\n  }\n  // Returns an iterator over the SortedMap.\n  getIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, false);\n  }\n  getIteratorFrom(key) {\n    return new SortedMapIterator(this.root, key, this.comparator, false);\n  }\n  getReverseIterator() {\n    return new SortedMapIterator(this.root, null, this.comparator, true);\n  }\n  getReverseIteratorFrom(key) {\n    return new SortedMapIterator(this.root, key, this.comparator, true);\n  }\n} // end SortedMap\n// An iterator over an LLRBNode.\nclass SortedMapIterator {\n  constructor(node, startKey, comparator, isReverse) {\n    this.isReverse = isReverse;\n    this.nodeStack = [];\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (startKey && isReverse) {\n        cmp *= -1;\n      }\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack,\n        // but stop iterating;\n        this.nodeStack.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move\n        // to the next one\n        this.nodeStack.push(node);\n        if (this.isReverse) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n  getNext() {\n    let node = this.nodeStack.pop();\n    const result = {\n      key: node.key,\n      value: node.value\n    };\n    if (this.isReverse) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack.push(node);\n        node = node.left;\n      }\n    }\n    return result;\n  }\n  hasNext() {\n    return this.nodeStack.length > 0;\n  }\n  peek() {\n    if (this.nodeStack.length === 0) {\n      return null;\n    }\n    const node = this.nodeStack[this.nodeStack.length - 1];\n    return {\n      key: node.key,\n      value: node.value\n    };\n  }\n} // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass LLRBNode {\n  constructor(key, value, color, left, right) {\n    this.key = key;\n    this.value = value;\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left = left != null ? left : LLRBNode.EMPTY;\n    this.right = right != null ? right : LLRBNode.EMPTY;\n    this.size = this.left.size + 1 + this.right.size;\n  }\n  // Returns a copy of the current node, optionally replacing pieces of it.\n  copy(key, value, color, left, right) {\n    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);\n  }\n  isEmpty() {\n    return false;\n  }\n  // Traverses the tree in key order and calls the specified action function\n  // for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  inorderTraversal(action) {\n    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);\n  }\n  // Traverses the tree in reverse key order and calls the specified action\n  // function for each node. If action returns true, traversal is aborted.\n  // Returns the first truthy value returned by action, or the last falsey\n  // value returned by action.\n  reverseTraversal(action) {\n    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);\n  }\n  // Returns the minimum node in the tree.\n  min() {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return this.left.min();\n    }\n  }\n  // Returns the maximum key in the tree.\n  minKey() {\n    return this.min().key;\n  }\n  // Returns the maximum key in the tree.\n  maxKey() {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n  // Returns new tree, with the key/value added.\n  insert(key, value, comparator) {\n    let n = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));\n    }\n    return n.fixUp();\n  }\n  removeMin() {\n    if (this.left.isEmpty()) {\n      return LLRBNode.EMPTY;\n    }\n    let n = this;\n    if (!n.left.isRed() && !n.left.left.isRed()) {\n      n = n.moveRedLeft();\n    }\n    n = n.copy(null, null, null, n.left.removeMin(), null);\n    return n.fixUp();\n  }\n  // Returns new tree, with the specified item removed.\n  remove(key, comparator) {\n    let smallest;\n    let n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {\n        n = n.moveRedLeft();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed()) {\n        n = n.rotateRight();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {\n        n = n.moveRedRight();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return LLRBNode.EMPTY;\n        } else {\n          smallest = n.right.min();\n          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp();\n  }\n  isRed() {\n    return this.color;\n  }\n  // Returns new tree after performing any needed rotations.\n  fixUp() {\n    let n = this;\n    if (n.right.isRed() && !n.left.isRed()) {\n      n = n.rotateLeft();\n    }\n    if (n.left.isRed() && n.left.left.isRed()) {\n      n = n.rotateRight();\n    }\n    if (n.left.isRed() && n.right.isRed()) {\n      n = n.colorFlip();\n    }\n    return n;\n  }\n  moveRedLeft() {\n    let n = this.colorFlip();\n    if (n.right.left.isRed()) {\n      n = n.copy(null, null, null, null, n.right.rotateRight());\n      n = n.rotateLeft();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n  moveRedRight() {\n    let n = this.colorFlip();\n    if (n.left.left.isRed()) {\n      n = n.rotateRight();\n      n = n.colorFlip();\n    }\n    return n;\n  }\n  rotateLeft() {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null);\n  }\n  rotateRight() {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr);\n  }\n  colorFlip() {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n  // For testing.\n  checkMaxDepth() {\n    const blackDepth = this.check();\n    if (Math.pow(2.0, blackDepth) <= this.size + 1) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n  // In a balanced RB tree, the black-depth (number of black nodes) from root to\n  // leaves is equal on both sides.  This function verifies that or asserts.\n  check() {\n    if (this.isRed() && this.left.isRed()) {\n      throw fail();\n    }\n    if (this.right.isRed()) {\n      throw fail();\n    }\n    const blackDepth = this.left.check();\n    if (blackDepth !== this.right.check()) {\n      throw fail();\n    } else {\n      return blackDepth + (this.isRed() ? 0 : 1);\n    }\n  }\n} // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nLLRBNode.EMPTY = null;\nLLRBNode.RED = true;\nLLRBNode.BLACK = false;\n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass LLRBEmptyNode {\n  constructor() {\n    this.size = 0;\n  }\n  get key() {\n    throw fail();\n  }\n  get value() {\n    throw fail();\n  }\n  get color() {\n    throw fail();\n  }\n  get left() {\n    throw fail();\n  }\n  get right() {\n    throw fail();\n  }\n  // Returns a copy of the current node.\n  copy(key, value, color, left, right) {\n    return this;\n  }\n  // Returns a copy of the tree, with the specified key/value added.\n  insert(key, value, comparator) {\n    return new LLRBNode(key, value);\n  }\n  // Returns a copy of the tree, with the specified key removed.\n  remove(key, comparator) {\n    return this;\n  }\n  isEmpty() {\n    return true;\n  }\n  inorderTraversal(action) {\n    return false;\n  }\n  reverseTraversal(action) {\n    return false;\n  }\n  minKey() {\n    return null;\n  }\n  maxKey() {\n    return null;\n  }\n  isRed() {\n    return false;\n  }\n  // For testing.\n  checkMaxDepth() {\n    return true;\n  }\n  check() {\n    return 0;\n  }\n} // end LLRBEmptyNode\nLLRBNode.EMPTY = new LLRBEmptyNode();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * SortedSet is an immutable (copy-on-write) collection that holds elements\r\n * in order specified by the provided comparator.\r\n *\r\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\r\n * be equal!\r\n */\nclass SortedSet {\n  constructor(comparator) {\n    this.comparator = comparator;\n    this.data = new SortedMap(this.comparator);\n  }\n  has(elem) {\n    return this.data.get(elem) !== null;\n  }\n  first() {\n    return this.data.minKey();\n  }\n  last() {\n    return this.data.maxKey();\n  }\n  get size() {\n    return this.data.size;\n  }\n  indexOf(elem) {\n    return this.data.indexOf(elem);\n  }\n  /** Iterates elements in order defined by \"comparator\" */\n  forEach(cb) {\n    this.data.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n  /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */\n  forEachInRange(range, cb) {\n    const iter = this.data.getIteratorFrom(range[0]);\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      if (this.comparator(elem.key, range[1]) >= 0) {\n        return;\n      }\n      cb(elem.key);\n    }\n  }\n  /**\r\n   * Iterates over `elem`s such that: start &lt;= elem until false is returned.\r\n   */\n  forEachWhile(cb, start) {\n    let iter;\n    if (start !== undefined) {\n      iter = this.data.getIteratorFrom(start);\n    } else {\n      iter = this.data.getIterator();\n    }\n    while (iter.hasNext()) {\n      const elem = iter.getNext();\n      const result = cb(elem.key);\n      if (!result) {\n        return;\n      }\n    }\n  }\n  /** Finds the least element greater than or equal to `elem`. */\n  firstAfterOrEqual(elem) {\n    const iter = this.data.getIteratorFrom(elem);\n    return iter.hasNext() ? iter.getNext().key : null;\n  }\n  getIterator() {\n    return new SortedSetIterator(this.data.getIterator());\n  }\n  getIteratorFrom(key) {\n    return new SortedSetIterator(this.data.getIteratorFrom(key));\n  }\n  /** Inserts or updates an element */\n  add(elem) {\n    return this.copy(this.data.remove(elem).insert(elem, true));\n  }\n  /** Deletes an element */\n  delete(elem) {\n    if (!this.has(elem)) {\n      return this;\n    }\n    return this.copy(this.data.remove(elem));\n  }\n  isEmpty() {\n    return this.data.isEmpty();\n  }\n  unionWith(other) {\n    let result = this;\n    // Make sure `result` always refers to the larger one of the two sets.\n    if (result.size < other.size) {\n      result = other;\n      other = this;\n    }\n    other.forEach(elem => {\n      result = result.add(elem);\n    });\n    return result;\n  }\n  isEqual(other) {\n    if (!(other instanceof SortedSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n    const thisIt = this.data.getIterator();\n    const otherIt = other.data.getIterator();\n    while (thisIt.hasNext()) {\n      const thisElem = thisIt.getNext().key;\n      const otherElem = otherIt.getNext().key;\n      if (this.comparator(thisElem, otherElem) !== 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n  toArray() {\n    const res = [];\n    this.forEach(targetId => {\n      res.push(targetId);\n    });\n    return res;\n  }\n  toString() {\n    const result = [];\n    this.forEach(elem => result.push(elem));\n    return 'SortedSet(' + result.toString() + ')';\n  }\n  copy(data) {\n    const result = new SortedSet(this.comparator);\n    result.data = data;\n    return result;\n  }\n}\nclass SortedSetIterator {\n  constructor(iter) {\n    this.iter = iter;\n  }\n  getNext() {\n    return this.iter.getNext().key;\n  }\n  hasNext() {\n    return this.iter.hasNext();\n  }\n}\n/**\r\n * Compares two sorted sets for equality using their natural ordering. The\r\n * method computes the intersection and invokes `onAdd` for every element that\r\n * is in `after` but not `before`. `onRemove` is invoked for every element in\r\n * `before` but missing from `after`.\r\n *\r\n * The method creates a copy of both `before` and `after` and runs in O(n log\r\n * n), where n is the size of the two lists.\r\n *\r\n * @param before - The elements that exist in the original set.\r\n * @param after - The elements to diff against the original set.\r\n * @param comparator - The comparator for the elements in before and after.\r\n * @param onAdd - A function to invoke for every element that is part of `\r\n * after` but not `before`.\r\n * @param onRemove - A function to invoke for every element that is part of\r\n * `before` but not `after`.\r\n */\nfunction diffSortedSets(before, after, comparator, onAdd, onRemove) {\n  const beforeIt = before.getIterator();\n  const afterIt = after.getIterator();\n  let beforeValue = advanceIterator(beforeIt);\n  let afterValue = advanceIterator(afterIt);\n  // Walk through the two sets at the same time, using the ordering defined by\n  // `comparator`.\n  while (beforeValue || afterValue) {\n    let added = false;\n    let removed = false;\n    if (beforeValue && afterValue) {\n      const cmp = comparator(beforeValue, afterValue);\n      if (cmp < 0) {\n        // The element was removed if the next element in our ordered\n        // walkthrough is only in `before`.\n        removed = true;\n      } else if (cmp > 0) {\n        // The element was added if the next element in our ordered walkthrough\n        // is only in `after`.\n        added = true;\n      }\n    } else if (beforeValue != null) {\n      removed = true;\n    } else {\n      added = true;\n    }\n    if (added) {\n      onAdd(afterValue);\n      afterValue = advanceIterator(afterIt);\n    } else if (removed) {\n      onRemove(beforeValue);\n      beforeValue = advanceIterator(beforeIt);\n    } else {\n      beforeValue = advanceIterator(beforeIt);\n      afterValue = advanceIterator(afterIt);\n    }\n  }\n}\n/**\r\n * Returns the next element from the iterator or `undefined` if none available.\r\n */\nfunction advanceIterator(it) {\n  return it.hasNext() ? it.getNext() : undefined;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides a set of fields that can be used to partially patch a document.\r\n * FieldMask is used in conjunction with ObjectValue.\r\n * Examples:\r\n *   foo - Overwrites foo entirely with the provided value. If foo is not\r\n *         present in the companion ObjectValue, the field is deleted.\r\n *   foo.bar - Overwrites only the field bar of the object foo.\r\n *             If foo is not an object, foo is replaced with an object\r\n *             containing foo\r\n */\nclass FieldMask {\n  constructor(fields) {\n    this.fields = fields;\n    // TODO(dimond): validation of FieldMask\n    // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n    fields.sort(FieldPath$1.comparator);\n  }\n  static empty() {\n    return new FieldMask([]);\n  }\n  /**\r\n   * Returns a new FieldMask object that is the result of adding all the given\r\n   * fields paths to this field mask.\r\n   */\n  unionWith(extraFields) {\n    let mergedMaskSet = new SortedSet(FieldPath$1.comparator);\n    for (const fieldPath of this.fields) {\n      mergedMaskSet = mergedMaskSet.add(fieldPath);\n    }\n    for (const fieldPath of extraFields) {\n      mergedMaskSet = mergedMaskSet.add(fieldPath);\n    }\n    return new FieldMask(mergedMaskSet.toArray());\n  }\n  /**\r\n   * Verifies that `fieldPath` is included by at least one field in this field\r\n   * mask.\r\n   *\r\n   * This is an O(n) operation, where `n` is the size of the field mask.\r\n   */\n  covers(fieldPath) {\n    for (const fieldMaskPath of this.fields) {\n      if (fieldMaskPath.isPrefixOf(fieldPath)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  isEqual(other) {\n    return arrayEquals(this.fields, other.fields, (l, r) => l.isEqual(r));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Converts a Base64 encoded string to a binary string. */\nfunction decodeBase64(encoded) {\n  // Note: We used to validate the base64 string here via a regular expression.\n  // This was removed to improve the performance of indexing.\n  return Buffer.from(encoded, 'base64').toString('binary');\n}\n/** Converts a binary string to a Base64 encoded string. */\nfunction encodeBase64(raw) {\n  return Buffer.from(raw, 'binary').toString('base64');\n}\n/** True if and only if the Base64 conversion functions are available. */\nfunction isBase64Available() {\n  return true;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Immutable class that represents a \"proto\" byte string.\r\n *\r\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\r\n * sent on the wire. This class abstracts away this differentiation by holding\r\n * the proto byte string in a common class that must be converted into a string\r\n * before being sent as a proto.\r\n * @internal\r\n */\nclass ByteString {\n  constructor(binaryString) {\n    this.binaryString = binaryString;\n  }\n  static fromBase64String(base64) {\n    const binaryString = decodeBase64(base64);\n    return new ByteString(binaryString);\n  }\n  static fromUint8Array(array) {\n    // TODO(indexing); Remove the copy of the byte string here as this method\n    // is frequently called during indexing.\n    const binaryString = binaryStringFromUint8Array(array);\n    return new ByteString(binaryString);\n  }\n  [Symbol.iterator]() {\n    let i = 0;\n    return {\n      next: () => {\n        if (i < this.binaryString.length) {\n          return {\n            value: this.binaryString.charCodeAt(i++),\n            done: false\n          };\n        } else {\n          return {\n            value: undefined,\n            done: true\n          };\n        }\n      }\n    };\n  }\n  toBase64() {\n    return encodeBase64(this.binaryString);\n  }\n  toUint8Array() {\n    return uint8ArrayFromBinaryString(this.binaryString);\n  }\n  approximateByteSize() {\n    return this.binaryString.length * 2;\n  }\n  compareTo(other) {\n    return primitiveComparator(this.binaryString, other.binaryString);\n  }\n  isEqual(other) {\n    return this.binaryString === other.binaryString;\n  }\n}\nByteString.EMPTY_BYTE_STRING = new ByteString('');\n/**\r\n * Helper function to convert an Uint8array to a binary string.\r\n */\nfunction binaryStringFromUint8Array(array) {\n  let binaryString = '';\n  for (let i = 0; i < array.length; ++i) {\n    binaryString += String.fromCharCode(array[i]);\n  }\n  return binaryString;\n}\n/**\r\n * Helper function to convert a binary string to an Uint8Array.\r\n */\nfunction uint8ArrayFromBinaryString(binaryString) {\n  const buffer = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    buffer[i] = binaryString.charCodeAt(i);\n  }\n  return buffer;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// A RegExp matching ISO 8601 UTC timestamps with optional fraction.\nconst ISO_TIMESTAMP_REG_EXP = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n/**\r\n * Converts the possible Proto values for a timestamp value into a \"seconds and\r\n * nanos\" representation.\r\n */\nfunction normalizeTimestamp(date) {\n  hardAssert(!!date);\n  // The json interface (for the browser) will return an iso timestamp string,\n  // while the proto js library (for node) will return a\n  // google.protobuf.Timestamp instance.\n  if (typeof date === 'string') {\n    // The date string can have higher precision (nanos) than the Date class\n    // (millis), so we do some custom parsing here.\n    // Parse the nanos right out of the string.\n    let nanos = 0;\n    const fraction = ISO_TIMESTAMP_REG_EXP.exec(date);\n    hardAssert(!!fraction);\n    if (fraction[1]) {\n      // Pad the fraction out to 9 digits (nanos).\n      let nanoStr = fraction[1];\n      nanoStr = (nanoStr + '000000000').substr(0, 9);\n      nanos = Number(nanoStr);\n    }\n    // Parse the date to get the seconds.\n    const parsedDate = new Date(date);\n    const seconds = Math.floor(parsedDate.getTime() / 1000);\n    return {\n      seconds,\n      nanos\n    };\n  } else {\n    // TODO(b/37282237): Use strings for Proto3 timestamps\n    // assert(!this.options.useProto3Json,\n    //   'The timestamp instance format requires Proto JS.');\n    const seconds = normalizeNumber(date.seconds);\n    const nanos = normalizeNumber(date.nanos);\n    return {\n      seconds,\n      nanos\n    };\n  }\n}\n/**\r\n * Converts the possible Proto types for numbers into a JavaScript number.\r\n * Returns 0 if the value is not numeric.\r\n */\nfunction normalizeNumber(value) {\n  // TODO(bjornick): Handle int64 greater than 53 bits.\n  if (typeof value === 'number') {\n    return value;\n  } else if (typeof value === 'string') {\n    return Number(value);\n  } else {\n    return 0;\n  }\n}\n/** Converts the possible Proto types for Blobs into a ByteString. */\nfunction normalizeByteString(blob) {\n  if (typeof blob === 'string') {\n    return ByteString.fromBase64String(blob);\n  } else {\n    return ByteString.fromUint8Array(blob);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a locally-applied ServerTimestamp.\r\n *\r\n * Server Timestamps are backed by MapValues that contain an internal field\r\n * `__type__` with a value of `server_timestamp`. The previous value and local\r\n * write time are stored in its `__previous_value__` and `__local_write_time__`\r\n * fields respectively.\r\n *\r\n * Notes:\r\n * - ServerTimestampValue instances are created as the result of applying a\r\n *   transform. They can only exist in the local view of a document. Therefore\r\n *   they do not need to be parsed or serialized.\r\n * - When evaluated locally (e.g. for snapshot.data()), they by default\r\n *   evaluate to `null`. This behavior can be configured by passing custom\r\n *   FieldValueOptions to value().\r\n * - With respect to other ServerTimestampValues, they sort by their\r\n *   localWriteTime.\r\n */\nconst SERVER_TIMESTAMP_SENTINEL = 'server_timestamp';\nconst TYPE_KEY$1 = '__type__';\nconst PREVIOUS_VALUE_KEY = '__previous_value__';\nconst LOCAL_WRITE_TIME_KEY = '__local_write_time__';\nfunction isServerTimestamp(value) {\n  var _a, _b;\n  const type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY$1]) === null || _b === void 0 ? void 0 : _b.stringValue;\n  return type === SERVER_TIMESTAMP_SENTINEL;\n}\n/**\r\n * Creates a new ServerTimestamp proto value (using the internal format).\r\n */\nfunction serverTimestamp$1(localWriteTime, previousValue) {\n  const mapValue = {\n    fields: {\n      [TYPE_KEY$1]: {\n        stringValue: SERVER_TIMESTAMP_SENTINEL\n      },\n      [LOCAL_WRITE_TIME_KEY]: {\n        timestampValue: {\n          seconds: localWriteTime.seconds,\n          nanos: localWriteTime.nanoseconds\n        }\n      }\n    }\n  };\n  // We should avoid storing deeply nested server timestamp map values\n  // because we never use the intermediate \"previous values\".\n  // For example:\n  // previous: 42L, add: t1, result: t1 -> 42L\n  // previous: t1,  add: t2, result: t2 -> 42L (NOT t2 -> t1 -> 42L)\n  // previous: t2,  add: t3, result: t3 -> 42L (NOT t3 -> t2 -> t1 -> 42L)\n  // `getPreviousValue` recursively traverses server timestamps to find the\n  // least recent Value.\n  if (previousValue && isServerTimestamp(previousValue)) {\n    previousValue = getPreviousValue(previousValue);\n  }\n  if (previousValue) {\n    mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;\n  }\n  return {\n    mapValue\n  };\n}\n/**\r\n * Returns the value of the field before this ServerTimestamp was set.\r\n *\r\n * Preserving the previous values allows the user to display the last resoled\r\n * value until the backend responds with the timestamp.\r\n */\nfunction getPreviousValue(value) {\n  const previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];\n  if (isServerTimestamp(previousValue)) {\n    return getPreviousValue(previousValue);\n  }\n  return previousValue;\n}\n/**\r\n * Returns the local time at which this timestamp was first set.\r\n */\nfunction getLocalWriteTime(value) {\n  const localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);\n  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass DatabaseInfo {\n  /**\r\n   * Constructs a DatabaseInfo using the provided host, databaseId and\r\n   * persistenceKey.\r\n   *\r\n   * @param databaseId - The database to use.\r\n   * @param appId - The Firebase App Id.\r\n   * @param persistenceKey - A unique identifier for this Firestore's local\r\n   * storage (used in conjunction with the databaseId).\r\n   * @param host - The Firestore backend host to connect to.\r\n   * @param ssl - Whether to use SSL when connecting.\r\n   * @param forceLongPolling - Whether to use the forceLongPolling option\r\n   * when using WebChannel as the network transport.\r\n   * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\r\n   * option when using WebChannel as the network transport.\r\n   * @param longPollingOptions Options that configure long-polling.\r\n   * @param useFetchStreams Whether to use the Fetch API instead of\r\n   * XMLHTTPRequest\r\n   */\n  constructor(databaseId, appId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling, longPollingOptions, useFetchStreams) {\n    this.databaseId = databaseId;\n    this.appId = appId;\n    this.persistenceKey = persistenceKey;\n    this.host = host;\n    this.ssl = ssl;\n    this.forceLongPolling = forceLongPolling;\n    this.autoDetectLongPolling = autoDetectLongPolling;\n    this.longPollingOptions = longPollingOptions;\n    this.useFetchStreams = useFetchStreams;\n  }\n}\n/** The default database name for a project. */\nconst DEFAULT_DATABASE_NAME = '(default)';\n/**\r\n * Represents the database ID a Firestore client is associated with.\r\n * @internal\r\n */\nclass DatabaseId {\n  constructor(projectId, database) {\n    this.projectId = projectId;\n    this.database = database ? database : DEFAULT_DATABASE_NAME;\n  }\n  static empty() {\n    return new DatabaseId('', '');\n  }\n  get isDefaultDatabase() {\n    return this.database === DEFAULT_DATABASE_NAME;\n  }\n  isEqual(other) {\n    return other instanceof DatabaseId && other.projectId === this.projectId && other.database === this.database;\n  }\n}\nfunction databaseIdFromApp(app, database) {\n  if (!Object.prototype.hasOwnProperty.apply(app.options, ['projectId'])) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, '\"projectId\" not provided in firebase.initializeApp.');\n  }\n  return new DatabaseId(app.options.projectId, database);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Sentinel value that sorts before any Mutation Batch ID. */\nconst BATCHID_UNKNOWN = -1;\n/**\r\n * Returns whether a variable is either undefined or null.\r\n */\nfunction isNullOrUndefined(value) {\n  return value === null || value === undefined;\n}\n/** Returns whether the value represents -0. */\nfunction isNegativeZero(value) {\n  // Detect if the value is -0.0. Based on polyfill from\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n  return value === 0 && 1 / value === 1 / -0;\n}\n/**\r\n * Returns whether a value is an integer and in the safe integer range\r\n * @param value - The value to test for being an integer and in the safe range\r\n */\nfunction isSafeInteger(value) {\n  return typeof value === 'number' && Number.isInteger(value) && !isNegativeZero(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst TYPE_KEY = '__type__';\nconst MAX_VALUE_TYPE = '__max__';\nconst MAX_VALUE = {\n  mapValue: {\n    fields: {\n      '__type__': {\n        stringValue: MAX_VALUE_TYPE\n      }\n    }\n  }\n};\nconst VECTOR_VALUE_SENTINEL = '__vector__';\nconst VECTOR_MAP_VECTORS_KEY = 'value';\nconst MIN_VALUE = {\n  nullValue: 'NULL_VALUE'\n};\n/** Extracts the backend's type order for the provided value. */\nfunction typeOrder(value) {\n  if ('nullValue' in value) {\n    return 0 /* TypeOrder.NullValue */;\n  } else if ('booleanValue' in value) {\n    return 1 /* TypeOrder.BooleanValue */;\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return 2 /* TypeOrder.NumberValue */;\n  } else if ('timestampValue' in value) {\n    return 3 /* TypeOrder.TimestampValue */;\n  } else if ('stringValue' in value) {\n    return 5 /* TypeOrder.StringValue */;\n  } else if ('bytesValue' in value) {\n    return 6 /* TypeOrder.BlobValue */;\n  } else if ('referenceValue' in value) {\n    return 7 /* TypeOrder.RefValue */;\n  } else if ('geoPointValue' in value) {\n    return 8 /* TypeOrder.GeoPointValue */;\n  } else if ('arrayValue' in value) {\n    return 9 /* TypeOrder.ArrayValue */;\n  } else if ('mapValue' in value) {\n    if (isServerTimestamp(value)) {\n      return 4 /* TypeOrder.ServerTimestampValue */;\n    } else if (isMaxValue(value)) {\n      return 9007199254740991 /* TypeOrder.MaxValue */;\n    } else if (isVectorValue(value)) {\n      return 10 /* TypeOrder.VectorValue */;\n    }\n    return 11 /* TypeOrder.ObjectValue */;\n  } else {\n    return fail();\n  }\n}\n/** Tests `left` and `right` for equality based on the backend semantics. */\nfunction valueEquals(left, right) {\n  if (left === right) {\n    return true;\n  }\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return false;\n  }\n  switch (leftType) {\n    case 0 /* TypeOrder.NullValue */:\n      return true;\n    case 1 /* TypeOrder.BooleanValue */:\n      return left.booleanValue === right.booleanValue;\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));\n    case 3 /* TypeOrder.TimestampValue */:\n      return timestampEquals(left, right);\n    case 5 /* TypeOrder.StringValue */:\n      return left.stringValue === right.stringValue;\n    case 6 /* TypeOrder.BlobValue */:\n      return blobEquals(left, right);\n    case 7 /* TypeOrder.RefValue */:\n      return left.referenceValue === right.referenceValue;\n    case 8 /* TypeOrder.GeoPointValue */:\n      return geoPointEquals(left, right);\n    case 2 /* TypeOrder.NumberValue */:\n      return numberEquals(left, right);\n    case 9 /* TypeOrder.ArrayValue */:\n      return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);\n    case 10 /* TypeOrder.VectorValue */:\n    case 11 /* TypeOrder.ObjectValue */:\n      return objectEquals(left, right);\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return true;\n    default:\n      return fail();\n  }\n}\nfunction timestampEquals(left, right) {\n  if (typeof left.timestampValue === 'string' && typeof right.timestampValue === 'string' && left.timestampValue.length === right.timestampValue.length) {\n    // Use string equality for ISO 8601 timestamps\n    return left.timestampValue === right.timestampValue;\n  }\n  const leftTimestamp = normalizeTimestamp(left.timestampValue);\n  const rightTimestamp = normalizeTimestamp(right.timestampValue);\n  return leftTimestamp.seconds === rightTimestamp.seconds && leftTimestamp.nanos === rightTimestamp.nanos;\n}\nfunction geoPointEquals(left, right) {\n  return normalizeNumber(left.geoPointValue.latitude) === normalizeNumber(right.geoPointValue.latitude) && normalizeNumber(left.geoPointValue.longitude) === normalizeNumber(right.geoPointValue.longitude);\n}\nfunction blobEquals(left, right) {\n  return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));\n}\nfunction numberEquals(left, right) {\n  if ('integerValue' in left && 'integerValue' in right) {\n    return normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue);\n  } else if ('doubleValue' in left && 'doubleValue' in right) {\n    const n1 = normalizeNumber(left.doubleValue);\n    const n2 = normalizeNumber(right.doubleValue);\n    if (n1 === n2) {\n      return isNegativeZero(n1) === isNegativeZero(n2);\n    } else {\n      return isNaN(n1) && isNaN(n2);\n    }\n  }\n  return false;\n}\nfunction objectEquals(left, right) {\n  const leftMap = left.mapValue.fields || {};\n  const rightMap = right.mapValue.fields || {};\n  if (objectSize(leftMap) !== objectSize(rightMap)) {\n    return false;\n  }\n  for (const key in leftMap) {\n    if (leftMap.hasOwnProperty(key)) {\n      if (rightMap[key] === undefined || !valueEquals(leftMap[key], rightMap[key])) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n/** Returns true if the ArrayValue contains the specified element. */\nfunction arrayValueContains(haystack, needle) {\n  return (haystack.values || []).find(v => valueEquals(v, needle)) !== undefined;\n}\nfunction valueCompare(left, right) {\n  if (left === right) {\n    return 0;\n  }\n  const leftType = typeOrder(left);\n  const rightType = typeOrder(right);\n  if (leftType !== rightType) {\n    return primitiveComparator(leftType, rightType);\n  }\n  switch (leftType) {\n    case 0 /* TypeOrder.NullValue */:\n    case 9007199254740991 /* TypeOrder.MaxValue */:\n      return 0;\n    case 1 /* TypeOrder.BooleanValue */:\n      return primitiveComparator(left.booleanValue, right.booleanValue);\n    case 2 /* TypeOrder.NumberValue */:\n      return compareNumbers(left, right);\n    case 3 /* TypeOrder.TimestampValue */:\n      return compareTimestamps(left.timestampValue, right.timestampValue);\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));\n    case 5 /* TypeOrder.StringValue */:\n      return primitiveComparator(left.stringValue, right.stringValue);\n    case 6 /* TypeOrder.BlobValue */:\n      return compareBlobs(left.bytesValue, right.bytesValue);\n    case 7 /* TypeOrder.RefValue */:\n      return compareReferences(left.referenceValue, right.referenceValue);\n    case 8 /* TypeOrder.GeoPointValue */:\n      return compareGeoPoints(left.geoPointValue, right.geoPointValue);\n    case 9 /* TypeOrder.ArrayValue */:\n      return compareArrays(left.arrayValue, right.arrayValue);\n    case 10 /* TypeOrder.VectorValue */:\n      return compareVectors(left.mapValue, right.mapValue);\n    case 11 /* TypeOrder.ObjectValue */:\n      return compareMaps(left.mapValue, right.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction compareNumbers(left, right) {\n  const leftNumber = normalizeNumber(left.integerValue || left.doubleValue);\n  const rightNumber = normalizeNumber(right.integerValue || right.doubleValue);\n  if (leftNumber < rightNumber) {\n    return -1;\n  } else if (leftNumber > rightNumber) {\n    return 1;\n  } else if (leftNumber === rightNumber) {\n    return 0;\n  } else {\n    // one or both are NaN.\n    if (isNaN(leftNumber)) {\n      return isNaN(rightNumber) ? 0 : -1;\n    } else {\n      return 1;\n    }\n  }\n}\nfunction compareTimestamps(left, right) {\n  if (typeof left === 'string' && typeof right === 'string' && left.length === right.length) {\n    return primitiveComparator(left, right);\n  }\n  const leftTimestamp = normalizeTimestamp(left);\n  const rightTimestamp = normalizeTimestamp(right);\n  const comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);\n}\nfunction compareReferences(leftPath, rightPath) {\n  const leftSegments = leftPath.split('/');\n  const rightSegments = rightPath.split('/');\n  for (let i = 0; i < leftSegments.length && i < rightSegments.length; i++) {\n    const comparison = primitiveComparator(leftSegments[i], rightSegments[i]);\n    if (comparison !== 0) {\n      return comparison;\n    }\n  }\n  return primitiveComparator(leftSegments.length, rightSegments.length);\n}\nfunction compareGeoPoints(left, right) {\n  const comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));\n  if (comparison !== 0) {\n    return comparison;\n  }\n  return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));\n}\nfunction compareBlobs(left, right) {\n  const leftBytes = normalizeByteString(left);\n  const rightBytes = normalizeByteString(right);\n  return leftBytes.compareTo(rightBytes);\n}\nfunction compareArrays(left, right) {\n  const leftArray = left.values || [];\n  const rightArray = right.values || [];\n  for (let i = 0; i < leftArray.length && i < rightArray.length; ++i) {\n    const compare = valueCompare(leftArray[i], rightArray[i]);\n    if (compare) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftArray.length, rightArray.length);\n}\nfunction compareVectors(left, right) {\n  var _a, _b, _c, _d;\n  const leftMap = left.fields || {};\n  const rightMap = right.fields || {};\n  // The vector is a map, but only vector value is compared.\n  const leftArrayValue = (_a = leftMap[VECTOR_MAP_VECTORS_KEY]) === null || _a === void 0 ? void 0 : _a.arrayValue;\n  const rightArrayValue = (_b = rightMap[VECTOR_MAP_VECTORS_KEY]) === null || _b === void 0 ? void 0 : _b.arrayValue;\n  const lengthCompare = primitiveComparator(((_c = leftArrayValue === null || leftArrayValue === void 0 ? void 0 : leftArrayValue.values) === null || _c === void 0 ? void 0 : _c.length) || 0, ((_d = rightArrayValue === null || rightArrayValue === void 0 ? void 0 : rightArrayValue.values) === null || _d === void 0 ? void 0 : _d.length) || 0);\n  if (lengthCompare !== 0) {\n    return lengthCompare;\n  }\n  return compareArrays(leftArrayValue, rightArrayValue);\n}\nfunction compareMaps(left, right) {\n  if (left === MAX_VALUE.mapValue && right === MAX_VALUE.mapValue) {\n    return 0;\n  } else if (left === MAX_VALUE.mapValue) {\n    return 1;\n  } else if (right === MAX_VALUE.mapValue) {\n    return -1;\n  }\n  const leftMap = left.fields || {};\n  const leftKeys = Object.keys(leftMap);\n  const rightMap = right.fields || {};\n  const rightKeys = Object.keys(rightMap);\n  // Even though MapValues are likely sorted correctly based on their insertion\n  // order (e.g. when received from the backend), local modifications can bring\n  // elements out of order. We need to re-sort the elements to ensure that\n  // canonical IDs are independent of insertion order.\n  leftKeys.sort();\n  rightKeys.sort();\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {\n    const keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);\n    if (keyCompare !== 0) {\n      return keyCompare;\n    }\n    const compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n  return primitiveComparator(leftKeys.length, rightKeys.length);\n}\n/**\r\n * Generates the canonical ID for the provided field value (as used in Target\r\n * serialization).\r\n */\nfunction canonicalId(value) {\n  return canonifyValue(value);\n}\nfunction canonifyValue(value) {\n  if ('nullValue' in value) {\n    return 'null';\n  } else if ('booleanValue' in value) {\n    return '' + value.booleanValue;\n  } else if ('integerValue' in value) {\n    return '' + value.integerValue;\n  } else if ('doubleValue' in value) {\n    return '' + value.doubleValue;\n  } else if ('timestampValue' in value) {\n    return canonifyTimestamp(value.timestampValue);\n  } else if ('stringValue' in value) {\n    return value.stringValue;\n  } else if ('bytesValue' in value) {\n    return canonifyByteString(value.bytesValue);\n  } else if ('referenceValue' in value) {\n    return canonifyReference(value.referenceValue);\n  } else if ('geoPointValue' in value) {\n    return canonifyGeoPoint(value.geoPointValue);\n  } else if ('arrayValue' in value) {\n    return canonifyArray(value.arrayValue);\n  } else if ('mapValue' in value) {\n    return canonifyMap(value.mapValue);\n  } else {\n    return fail();\n  }\n}\nfunction canonifyByteString(byteString) {\n  return normalizeByteString(byteString).toBase64();\n}\nfunction canonifyTimestamp(timestamp) {\n  const normalizedTimestamp = normalizeTimestamp(timestamp);\n  return `time(${normalizedTimestamp.seconds},${normalizedTimestamp.nanos})`;\n}\nfunction canonifyGeoPoint(geoPoint) {\n  return `geo(${geoPoint.latitude},${geoPoint.longitude})`;\n}\nfunction canonifyReference(referenceValue) {\n  return DocumentKey.fromName(referenceValue).toString();\n}\nfunction canonifyMap(mapValue) {\n  // Iteration order in JavaScript is not guaranteed. To ensure that we generate\n  // matching canonical IDs for identical maps, we need to sort the keys.\n  const sortedKeys = Object.keys(mapValue.fields || {}).sort();\n  let result = '{';\n  let first = true;\n  for (const key of sortedKeys) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += `${key}:${canonifyValue(mapValue.fields[key])}`;\n  }\n  return result + '}';\n}\nfunction canonifyArray(arrayValue) {\n  let result = '[';\n  let first = true;\n  for (const value of arrayValue.values || []) {\n    if (!first) {\n      result += ',';\n    } else {\n      first = false;\n    }\n    result += canonifyValue(value);\n  }\n  return result + ']';\n}\n/**\r\n * Returns an approximate (and wildly inaccurate) in-memory size for the field\r\n * value.\r\n *\r\n * The memory size takes into account only the actual user data as it resides\r\n * in memory and ignores object overhead.\r\n */\nfunction estimateByteSize(value) {\n  switch (typeOrder(value)) {\n    case 0 /* TypeOrder.NullValue */:\n      return 4;\n    case 1 /* TypeOrder.BooleanValue */:\n      return 4;\n    case 2 /* TypeOrder.NumberValue */:\n      return 8;\n    case 3 /* TypeOrder.TimestampValue */:\n      // Timestamps are made up of two distinct numbers (seconds + nanoseconds)\n      return 16;\n    case 4 /* TypeOrder.ServerTimestampValue */:\n      const previousValue = getPreviousValue(value);\n      return previousValue ? 16 + estimateByteSize(previousValue) : 16;\n    case 5 /* TypeOrder.StringValue */:\n      // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures:\n      // \"JavaScript's String type is [...] a set of elements of 16-bit unsigned\n      // integer values\"\n      return value.stringValue.length * 2;\n    case 6 /* TypeOrder.BlobValue */:\n      return normalizeByteString(value.bytesValue).approximateByteSize();\n    case 7 /* TypeOrder.RefValue */:\n      return value.referenceValue.length;\n    case 8 /* TypeOrder.GeoPointValue */:\n      // GeoPoints are made up of two distinct numbers (latitude + longitude)\n      return 16;\n    case 9 /* TypeOrder.ArrayValue */:\n      return estimateArrayByteSize(value.arrayValue);\n    case 10 /* TypeOrder.VectorValue */:\n    case 11 /* TypeOrder.ObjectValue */:\n      return estimateMapByteSize(value.mapValue);\n    default:\n      throw fail();\n  }\n}\nfunction estimateMapByteSize(mapValue) {\n  let size = 0;\n  forEach(mapValue.fields, (key, val) => {\n    size += key.length + estimateByteSize(val);\n  });\n  return size;\n}\nfunction estimateArrayByteSize(arrayValue) {\n  return (arrayValue.values || []).reduce((previousSize, value) => previousSize + estimateByteSize(value), 0);\n}\n/** Returns a reference value for the provided database and key. */\nfunction refValue(databaseId, key) {\n  return {\n    referenceValue: `projects/${databaseId.projectId}/databases/${databaseId.database}/documents/${key.path.canonicalString()}`\n  };\n}\n/** Returns true if `value` is an IntegerValue . */\nfunction isInteger(value) {\n  return !!value && 'integerValue' in value;\n}\n/** Returns true if `value` is a DoubleValue. */\nfunction isDouble(value) {\n  return !!value && 'doubleValue' in value;\n}\n/** Returns true if `value` is either an IntegerValue or a DoubleValue. */\nfunction isNumber(value) {\n  return isInteger(value) || isDouble(value);\n}\n/** Returns true if `value` is an ArrayValue. */\nfunction isArray(value) {\n  return !!value && 'arrayValue' in value;\n}\n/** Returns true if `value` is a NullValue. */\nfunction isNullValue(value) {\n  return !!value && 'nullValue' in value;\n}\n/** Returns true if `value` is NaN. */\nfunction isNanValue(value) {\n  return !!value && 'doubleValue' in value && isNaN(Number(value.doubleValue));\n}\n/** Returns true if `value` is a MapValue. */\nfunction isMapValue(value) {\n  return !!value && 'mapValue' in value;\n}\n/** Returns true if `value` is a VetorValue. */\nfunction isVectorValue(value) {\n  var _a, _b;\n  const type = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;\n  return type === VECTOR_VALUE_SENTINEL;\n}\n/** Creates a deep copy of `source`. */\nfunction deepClone(source) {\n  if (source.geoPointValue) {\n    return {\n      geoPointValue: Object.assign({}, source.geoPointValue)\n    };\n  } else if (source.timestampValue && typeof source.timestampValue === 'object') {\n    return {\n      timestampValue: Object.assign({}, source.timestampValue)\n    };\n  } else if (source.mapValue) {\n    const target = {\n      mapValue: {\n        fields: {}\n      }\n    };\n    forEach(source.mapValue.fields, (key, val) => target.mapValue.fields[key] = deepClone(val));\n    return target;\n  } else if (source.arrayValue) {\n    const target = {\n      arrayValue: {\n        values: []\n      }\n    };\n    for (let i = 0; i < (source.arrayValue.values || []).length; ++i) {\n      target.arrayValue.values[i] = deepClone(source.arrayValue.values[i]);\n    }\n    return target;\n  } else {\n    return Object.assign({}, source);\n  }\n}\n/** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\nfunction isMaxValue(value) {\n  return (((value.mapValue || {}).fields || {})['__type__'] || {}).stringValue === MAX_VALUE_TYPE;\n}\nconst MIN_VECTOR_VALUE = {\n  mapValue: {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: VECTOR_VALUE_SENTINEL\n      },\n      [VECTOR_MAP_VECTORS_KEY]: {\n        arrayValue: {}\n      }\n    }\n  }\n};\n/** Returns the lowest value for the given value type (inclusive). */\nfunction valuesGetLowerBound(value) {\n  if ('nullValue' in value) {\n    return MIN_VALUE;\n  } else if ('booleanValue' in value) {\n    return {\n      booleanValue: false\n    };\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return {\n      doubleValue: NaN\n    };\n  } else if ('timestampValue' in value) {\n    return {\n      timestampValue: {\n        seconds: Number.MIN_SAFE_INTEGER\n      }\n    };\n  } else if ('stringValue' in value) {\n    return {\n      stringValue: ''\n    };\n  } else if ('bytesValue' in value) {\n    return {\n      bytesValue: ''\n    };\n  } else if ('referenceValue' in value) {\n    return refValue(DatabaseId.empty(), DocumentKey.empty());\n  } else if ('geoPointValue' in value) {\n    return {\n      geoPointValue: {\n        latitude: -90,\n        longitude: -180\n      }\n    };\n  } else if ('arrayValue' in value) {\n    return {\n      arrayValue: {}\n    };\n  } else if ('mapValue' in value) {\n    if (isVectorValue(value)) {\n      return MIN_VECTOR_VALUE;\n    }\n    return {\n      mapValue: {}\n    };\n  } else {\n    return fail();\n  }\n}\n/** Returns the largest value for the given value type (exclusive). */\nfunction valuesGetUpperBound(value) {\n  if ('nullValue' in value) {\n    return {\n      booleanValue: false\n    };\n  } else if ('booleanValue' in value) {\n    return {\n      doubleValue: NaN\n    };\n  } else if ('integerValue' in value || 'doubleValue' in value) {\n    return {\n      timestampValue: {\n        seconds: Number.MIN_SAFE_INTEGER\n      }\n    };\n  } else if ('timestampValue' in value) {\n    return {\n      stringValue: ''\n    };\n  } else if ('stringValue' in value) {\n    return {\n      bytesValue: ''\n    };\n  } else if ('bytesValue' in value) {\n    return refValue(DatabaseId.empty(), DocumentKey.empty());\n  } else if ('referenceValue' in value) {\n    return {\n      geoPointValue: {\n        latitude: -90,\n        longitude: -180\n      }\n    };\n  } else if ('geoPointValue' in value) {\n    return {\n      arrayValue: {}\n    };\n  } else if ('arrayValue' in value) {\n    return MIN_VECTOR_VALUE;\n  } else if ('mapValue' in value) {\n    if (isVectorValue(value)) {\n      return {\n        mapValue: {}\n      };\n    }\n    return MAX_VALUE;\n  } else {\n    return fail();\n  }\n}\nfunction lowerBoundCompare(left, right) {\n  const cmp = valueCompare(left.value, right.value);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  if (left.inclusive && !right.inclusive) {\n    return -1;\n  } else if (!left.inclusive && right.inclusive) {\n    return 1;\n  }\n  return 0;\n}\nfunction upperBoundCompare(left, right) {\n  const cmp = valueCompare(left.value, right.value);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  if (left.inclusive && !right.inclusive) {\n    return 1;\n  } else if (!left.inclusive && right.inclusive) {\n    return -1;\n  }\n  return 0;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\r\n * ability to add and remove fields (via the ObjectValueBuilder).\r\n */\nclass ObjectValue {\n  constructor(value) {\n    this.value = value;\n  }\n  static empty() {\n    return new ObjectValue({\n      mapValue: {}\n    });\n  }\n  /**\r\n   * Returns the value at the given path or null.\r\n   *\r\n   * @param path - the path to search\r\n   * @returns The value at the path or null if the path is not set.\r\n   */\n  field(path) {\n    if (path.isEmpty()) {\n      return this.value;\n    } else {\n      let currentLevel = this.value;\n      for (let i = 0; i < path.length - 1; ++i) {\n        currentLevel = (currentLevel.mapValue.fields || {})[path.get(i)];\n        if (!isMapValue(currentLevel)) {\n          return null;\n        }\n      }\n      currentLevel = (currentLevel.mapValue.fields || {})[path.lastSegment()];\n      return currentLevel || null;\n    }\n  }\n  /**\r\n   * Sets the field to the provided value.\r\n   *\r\n   * @param path - The field path to set.\r\n   * @param value - The value to set.\r\n   */\n  set(path, value) {\n    const fieldsMap = this.getFieldsMap(path.popLast());\n    fieldsMap[path.lastSegment()] = deepClone(value);\n  }\n  /**\r\n   * Sets the provided fields to the provided values.\r\n   *\r\n   * @param data - A map of fields to values (or null for deletes).\r\n   */\n  setAll(data) {\n    let parent = FieldPath$1.emptyPath();\n    let upserts = {};\n    let deletes = [];\n    data.forEach((value, path) => {\n      if (!parent.isImmediateParentOf(path)) {\n        // Insert the accumulated changes at this parent location\n        const fieldsMap = this.getFieldsMap(parent);\n        this.applyChanges(fieldsMap, upserts, deletes);\n        upserts = {};\n        deletes = [];\n        parent = path.popLast();\n      }\n      if (value) {\n        upserts[path.lastSegment()] = deepClone(value);\n      } else {\n        deletes.push(path.lastSegment());\n      }\n    });\n    const fieldsMap = this.getFieldsMap(parent);\n    this.applyChanges(fieldsMap, upserts, deletes);\n  }\n  /**\r\n   * Removes the field at the specified path. If there is no field at the\r\n   * specified path, nothing is changed.\r\n   *\r\n   * @param path - The field path to remove.\r\n   */\n  delete(path) {\n    const nestedValue = this.field(path.popLast());\n    if (isMapValue(nestedValue) && nestedValue.mapValue.fields) {\n      delete nestedValue.mapValue.fields[path.lastSegment()];\n    }\n  }\n  isEqual(other) {\n    return valueEquals(this.value, other.value);\n  }\n  /**\r\n   * Returns the map that contains the leaf element of `path`. If the parent\r\n   * entry does not yet exist, or if it is not a map, a new map will be created.\r\n   */\n  getFieldsMap(path) {\n    let current = this.value;\n    if (!current.mapValue.fields) {\n      current.mapValue = {\n        fields: {}\n      };\n    }\n    for (let i = 0; i < path.length; ++i) {\n      let next = current.mapValue.fields[path.get(i)];\n      if (!isMapValue(next) || !next.mapValue.fields) {\n        next = {\n          mapValue: {\n            fields: {}\n          }\n        };\n        current.mapValue.fields[path.get(i)] = next;\n      }\n      current = next;\n    }\n    return current.mapValue.fields;\n  }\n  /**\r\n   * Modifies `fieldsMap` by adding, replacing or deleting the specified\r\n   * entries.\r\n   */\n  applyChanges(fieldsMap, inserts, deletes) {\n    forEach(inserts, (key, val) => fieldsMap[key] = val);\n    for (const field of deletes) {\n      delete fieldsMap[field];\n    }\n  }\n  clone() {\n    return new ObjectValue(deepClone(this.value));\n  }\n}\n/**\r\n * Returns a FieldMask built from all fields in a MapValue.\r\n */\nfunction extractFieldMask(value) {\n  const fields = [];\n  forEach(value.fields, (key, value) => {\n    const currentPath = new FieldPath$1([key]);\n    if (isMapValue(value)) {\n      const nestedMask = extractFieldMask(value.mapValue);\n      const nestedFields = nestedMask.fields;\n      if (nestedFields.length === 0) {\n        // Preserve the empty map by adding it to the FieldMask.\n        fields.push(currentPath);\n      } else {\n        // For nested and non-empty ObjectValues, add the FieldPath of the\n        // leaf nodes.\n        for (const nestedPath of nestedFields) {\n          fields.push(currentPath.child(nestedPath));\n        }\n      }\n    } else {\n      // For nested and non-empty ObjectValues, add the FieldPath of the leaf\n      // nodes.\n      fields.push(currentPath);\n    }\n  });\n  return new FieldMask(fields);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a document in Firestore with a key, version, data and whether it\r\n * has local mutations applied to it.\r\n *\r\n * Documents can transition between states via `convertToFoundDocument()`,\r\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\r\n * not transition to one of these states even after all mutations have been\r\n * applied, `isValidDocument()` returns false and the document should be removed\r\n * from all views.\r\n */\nclass MutableDocument {\n  constructor(key, documentType, version, readTime, createTime, data, documentState) {\n    this.key = key;\n    this.documentType = documentType;\n    this.version = version;\n    this.readTime = readTime;\n    this.createTime = createTime;\n    this.data = data;\n    this.documentState = documentState;\n  }\n  /**\r\n   * Creates a document with no known version or data, but which can serve as\r\n   * base document for mutations.\r\n   */\n  static newInvalidDocument(documentKey) {\n    return new MutableDocument(documentKey, 0 /* DocumentType.INVALID */, /* version */SnapshotVersion.min(), /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\r\n   * Creates a new document that is known to exist with the given data at the\r\n   * given version.\r\n   */\n  static newFoundDocument(documentKey, version, createTime, value) {\n    return new MutableDocument(documentKey, 1 /* DocumentType.FOUND_DOCUMENT */, /* version */version, /* readTime */SnapshotVersion.min(), /* createTime */createTime, value, 0 /* DocumentState.SYNCED */);\n  }\n  /** Creates a new document that is known to not exist at the given version. */\n  static newNoDocument(documentKey, version) {\n    return new MutableDocument(documentKey, 2 /* DocumentType.NO_DOCUMENT */, /* version */version, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 0 /* DocumentState.SYNCED */);\n  }\n  /**\r\n   * Creates a new document that is known to exist at the given version but\r\n   * whose data is not known (e.g. a document that was updated without a known\r\n   * base document).\r\n   */\n  static newUnknownDocument(documentKey, version) {\n    return new MutableDocument(documentKey, 3 /* DocumentType.UNKNOWN_DOCUMENT */, /* version */version, /* readTime */SnapshotVersion.min(), /* createTime */SnapshotVersion.min(), ObjectValue.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n  }\n  /**\r\n   * Changes the document type to indicate that it exists and that its version\r\n   * and data are known.\r\n   */\n  convertToFoundDocument(version, value) {\n    // If a document is switching state from being an invalid or deleted\n    // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n    // update from Watch or due to applying a local set mutation on top\n    // of a deleted document, our best guess about its createTime would be the\n    // version at which the document transitioned to a FOUND_DOCUMENT.\n    if (this.createTime.isEqual(SnapshotVersion.min()) && (this.documentType === 2 /* DocumentType.NO_DOCUMENT */ || this.documentType === 0 /* DocumentType.INVALID */)) {\n      this.createTime = version;\n    }\n    this.version = version;\n    this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */;\n    this.data = value;\n    this.documentState = 0 /* DocumentState.SYNCED */;\n    return this;\n  }\n  /**\r\n   * Changes the document type to indicate that it doesn't exist at the given\r\n   * version.\r\n   */\n  convertToNoDocument(version) {\n    this.version = version;\n    this.documentType = 2 /* DocumentType.NO_DOCUMENT */;\n    this.data = ObjectValue.empty();\n    this.documentState = 0 /* DocumentState.SYNCED */;\n    return this;\n  }\n  /**\r\n   * Changes the document type to indicate that it exists at a given version but\r\n   * that its data is not known (e.g. a document that was updated without a known\r\n   * base document).\r\n   */\n  convertToUnknownDocument(version) {\n    this.version = version;\n    this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */;\n    this.data = ObjectValue.empty();\n    this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\n    return this;\n  }\n  setHasCommittedMutations() {\n    this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\n    return this;\n  }\n  setHasLocalMutations() {\n    this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */;\n    this.version = SnapshotVersion.min();\n    return this;\n  }\n  setReadTime(readTime) {\n    this.readTime = readTime;\n    return this;\n  }\n  get hasLocalMutations() {\n    return this.documentState === 1 /* DocumentState.HAS_LOCAL_MUTATIONS */;\n  }\n  get hasCommittedMutations() {\n    return this.documentState === 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */;\n  }\n  get hasPendingWrites() {\n    return this.hasLocalMutations || this.hasCommittedMutations;\n  }\n  isValidDocument() {\n    return this.documentType !== 0 /* DocumentType.INVALID */;\n  }\n  isFoundDocument() {\n    return this.documentType === 1 /* DocumentType.FOUND_DOCUMENT */;\n  }\n  isNoDocument() {\n    return this.documentType === 2 /* DocumentType.NO_DOCUMENT */;\n  }\n  isUnknownDocument() {\n    return this.documentType === 3 /* DocumentType.UNKNOWN_DOCUMENT */;\n  }\n  isEqual(other) {\n    return other instanceof MutableDocument && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.documentType === other.documentType && this.documentState === other.documentState && this.data.isEqual(other.data);\n  }\n  mutableCopy() {\n    return new MutableDocument(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n  }\n  toString() {\n    return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, ` + `{createTime: ${this.createTime}}), ` + `{documentType: ${this.documentType}}), ` + `{documentState: ${this.documentState}})`;\n  }\n}\n/**\r\n * Compares the value for field `field` in the provided documents. Throws if\r\n * the field does not exist in both documents.\r\n */\nfunction compareDocumentsByField(field, d1, d2) {\n  const v1 = d1.data.field(field);\n  const v2 = d2.data.field(field);\n  if (v1 !== null && v2 !== null) {\n    return valueCompare(v1, v2);\n  } else {\n    return fail();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a bound of a query.\r\n *\r\n * The bound is specified with the given components representing a position and\r\n * whether it's just before or just after the position (relative to whatever the\r\n * query order is).\r\n *\r\n * The position represents a logical index position for a query. It's a prefix\r\n * of values for the (potentially implicit) order by clauses of a query.\r\n *\r\n * Bound provides a function to determine whether a document comes before or\r\n * after a bound. This is influenced by whether the position is just before or\r\n * just after the provided values.\r\n */\nclass Bound {\n  constructor(position, inclusive) {\n    this.position = position;\n    this.inclusive = inclusive;\n  }\n}\nfunction boundCompareToDocument(bound, orderBy, doc) {\n  let comparison = 0;\n  for (let i = 0; i < bound.position.length; i++) {\n    const orderByComponent = orderBy[i];\n    const component = bound.position[i];\n    if (orderByComponent.field.isKeyField()) {\n      comparison = DocumentKey.comparator(DocumentKey.fromName(component.referenceValue), doc.key);\n    } else {\n      const docValue = doc.data.field(orderByComponent.field);\n      comparison = valueCompare(component, docValue);\n    }\n    if (orderByComponent.dir === \"desc\" /* Direction.DESCENDING */) {\n      comparison = comparison * -1;\n    }\n    if (comparison !== 0) {\n      break;\n    }\n  }\n  return comparison;\n}\n/**\r\n * Returns true if a document sorts after a bound using the provided sort\r\n * order.\r\n */\nfunction boundSortsAfterDocument(bound, orderBy, doc) {\n  const comparison = boundCompareToDocument(bound, orderBy, doc);\n  return bound.inclusive ? comparison >= 0 : comparison > 0;\n}\n/**\r\n * Returns true if a document sorts before a bound using the provided sort\r\n * order.\r\n */\nfunction boundSortsBeforeDocument(bound, orderBy, doc) {\n  const comparison = boundCompareToDocument(bound, orderBy, doc);\n  return bound.inclusive ? comparison <= 0 : comparison < 0;\n}\nfunction boundEquals(left, right) {\n  if (left === null) {\n    return right === null;\n  } else if (right === null) {\n    return false;\n  }\n  if (left.inclusive !== right.inclusive || left.position.length !== right.position.length) {\n    return false;\n  }\n  for (let i = 0; i < left.position.length; i++) {\n    const leftPosition = left.position[i];\n    const rightPosition = right.position[i];\n    if (!valueEquals(leftPosition, rightPosition)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\r\n */\nclass OrderBy {\n  constructor(field, dir = \"asc\" /* Direction.ASCENDING */) {\n    this.field = field;\n    this.dir = dir;\n  }\n}\nfunction canonifyOrderBy(orderBy) {\n  // TODO(b/29183165): Make this collision robust.\n  return orderBy.field.canonicalString() + orderBy.dir;\n}\nfunction stringifyOrderBy(orderBy) {\n  return `${orderBy.field.canonicalString()} (${orderBy.dir})`;\n}\nfunction orderByEquals(left, right) {\n  return left.dir === right.dir && left.field.isEqual(right.field);\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass Filter {}\nclass FieldFilter extends Filter {\n  constructor(field, op, value) {\n    super();\n    this.field = field;\n    this.op = op;\n    this.value = value;\n  }\n  /**\r\n   * Creates a filter based on the provided arguments.\r\n   */\n  static create(field, op, value) {\n    if (field.isKeyField()) {\n      if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */) {\n        return this.createKeyFieldInFilter(field, op, value);\n      } else {\n        return new KeyFieldFilter(field, op, value);\n      }\n    } else if (op === \"array-contains\" /* Operator.ARRAY_CONTAINS */) {\n      return new ArrayContainsFilter(field, value);\n    } else if (op === \"in\" /* Operator.IN */) {\n      return new InFilter(field, value);\n    } else if (op === \"not-in\" /* Operator.NOT_IN */) {\n      return new NotInFilter(field, value);\n    } else if (op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n      return new ArrayContainsAnyFilter(field, value);\n    } else {\n      return new FieldFilter(field, op, value);\n    }\n  }\n  static createKeyFieldInFilter(field, op, value) {\n    return op === \"in\" /* Operator.IN */ ? new KeyFieldInFilter(field, value) : new KeyFieldNotInFilter(field, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    // Types do not have to match in NOT_EQUAL filters.\n    if (this.op === \"!=\" /* Operator.NOT_EQUAL */) {\n      return other !== null && this.matchesComparison(valueCompare(other, this.value));\n    }\n    // Only compare types with matching backend order (such as double and int).\n    return other !== null && typeOrder(this.value) === typeOrder(other) && this.matchesComparison(valueCompare(other, this.value));\n  }\n  matchesComparison(comparison) {\n    switch (this.op) {\n      case \"<\" /* Operator.LESS_THAN */:\n        return comparison < 0;\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        return comparison <= 0;\n      case \"==\" /* Operator.EQUAL */:\n        return comparison === 0;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n        return comparison !== 0;\n      case \">\" /* Operator.GREATER_THAN */:\n        return comparison > 0;\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n        return comparison >= 0;\n      default:\n        return fail();\n    }\n  }\n  isInequality() {\n    return [\"<\" /* Operator.LESS_THAN */, \"<=\" /* Operator.LESS_THAN_OR_EQUAL */, \">\" /* Operator.GREATER_THAN */, \">=\" /* Operator.GREATER_THAN_OR_EQUAL */, \"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */].indexOf(this.op) >= 0;\n  }\n  getFlattenedFilters() {\n    return [this];\n  }\n  getFilters() {\n    return [this];\n  }\n}\nclass CompositeFilter extends Filter {\n  constructor(filters, op) {\n    super();\n    this.filters = filters;\n    this.op = op;\n    this.memoizedFlattenedFilters = null;\n  }\n  /**\r\n   * Creates a filter based on the provided arguments.\r\n   */\n  static create(filters, op) {\n    return new CompositeFilter(filters, op);\n  }\n  matches(doc) {\n    if (compositeFilterIsConjunction(this)) {\n      // For conjunctions, all filters must match, so return false if any filter doesn't match.\n      return this.filters.find(filter => !filter.matches(doc)) === undefined;\n    } else {\n      // For disjunctions, at least one filter should match.\n      return this.filters.find(filter => filter.matches(doc)) !== undefined;\n    }\n  }\n  getFlattenedFilters() {\n    if (this.memoizedFlattenedFilters !== null) {\n      return this.memoizedFlattenedFilters;\n    }\n    this.memoizedFlattenedFilters = this.filters.reduce((result, subfilter) => {\n      return result.concat(subfilter.getFlattenedFilters());\n    }, []);\n    return this.memoizedFlattenedFilters;\n  }\n  // Returns a mutable copy of `this.filters`\n  getFilters() {\n    return Object.assign([], this.filters);\n  }\n}\nfunction compositeFilterIsConjunction(compositeFilter) {\n  return compositeFilter.op === \"and\" /* CompositeOperator.AND */;\n}\nfunction compositeFilterIsDisjunction(compositeFilter) {\n  return compositeFilter.op === \"or\" /* CompositeOperator.OR */;\n}\n/**\r\n * Returns true if this filter is a conjunction of field filters only. Returns false otherwise.\r\n */\nfunction compositeFilterIsFlatConjunction(compositeFilter) {\n  return compositeFilterIsFlat(compositeFilter) && compositeFilterIsConjunction(compositeFilter);\n}\n/**\r\n * Returns true if this filter does not contain any composite filters. Returns false otherwise.\r\n */\nfunction compositeFilterIsFlat(compositeFilter) {\n  for (const filter of compositeFilter.filters) {\n    if (filter instanceof CompositeFilter) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction canonifyFilter(filter) {\n  if (filter instanceof FieldFilter) {\n    // TODO(b/29183165): Technically, this won't be unique if two values have\n    // the same description, such as the int 3 and the string \"3\". So we should\n    // add the types in here somehow, too.\n    return filter.field.canonicalString() + filter.op.toString() + canonicalId(filter.value);\n  } else if (compositeFilterIsFlatConjunction(filter)) {\n    // Older SDK versions use an implicit AND operation between their filters.\n    // In the new SDK versions, the developer may use an explicit AND filter.\n    // To stay consistent with the old usages, we add a special case to ensure\n    // the canonical ID for these two are the same. For example:\n    // `col.whereEquals(\"a\", 1).whereEquals(\"b\", 2)` should have the same\n    // canonical ID as `col.where(and(equals(\"a\",1), equals(\"b\",2)))`.\n    return filter.filters.map(filter => canonifyFilter(filter)).join(',');\n  } else {\n    // filter instanceof CompositeFilter\n    const canonicalIdsString = filter.filters.map(filter => canonifyFilter(filter)).join(',');\n    return `${filter.op}(${canonicalIdsString})`;\n  }\n}\nfunction filterEquals(f1, f2) {\n  if (f1 instanceof FieldFilter) {\n    return fieldFilterEquals(f1, f2);\n  } else if (f1 instanceof CompositeFilter) {\n    return compositeFilterEquals(f1, f2);\n  } else {\n    fail();\n  }\n}\nfunction fieldFilterEquals(f1, f2) {\n  return f2 instanceof FieldFilter && f1.op === f2.op && f1.field.isEqual(f2.field) && valueEquals(f1.value, f2.value);\n}\nfunction compositeFilterEquals(f1, f2) {\n  if (f2 instanceof CompositeFilter && f1.op === f2.op && f1.filters.length === f2.filters.length) {\n    const subFiltersMatch = f1.filters.reduce((result, f1Filter, index) => result && filterEquals(f1Filter, f2.filters[index]), true);\n    return subFiltersMatch;\n  }\n  return false;\n}\n/**\r\n * Returns a new composite filter that contains all filter from\r\n * `compositeFilter` plus all the given filters in `otherFilters`.\r\n */\nfunction compositeFilterWithAddedFilters(compositeFilter, otherFilters) {\n  const mergedFilters = compositeFilter.filters.concat(otherFilters);\n  return CompositeFilter.create(mergedFilters, compositeFilter.op);\n}\n/** Returns a debug description for `filter`. */\nfunction stringifyFilter(filter) {\n  if (filter instanceof FieldFilter) {\n    return stringifyFieldFilter(filter);\n  } else if (filter instanceof CompositeFilter) {\n    return stringifyCompositeFilter(filter);\n  } else {\n    return 'Filter';\n  }\n}\nfunction stringifyCompositeFilter(filter) {\n  return filter.op.toString() + ` {` + filter.getFilters().map(stringifyFilter).join(' ,') + '}';\n}\nfunction stringifyFieldFilter(filter) {\n  return `${filter.field.canonicalString()} ${filter.op} ${canonicalId(filter.value)}`;\n}\n/** Filter that matches on key fields (i.e. '__name__'). */\nclass KeyFieldFilter extends FieldFilter {\n  constructor(field, op, value) {\n    super(field, op, value);\n    this.key = DocumentKey.fromName(value.referenceValue);\n  }\n  matches(doc) {\n    const comparison = DocumentKey.comparator(doc.key, this.key);\n    return this.matchesComparison(comparison);\n  }\n}\n/** Filter that matches on key fields within an array. */\nclass KeyFieldInFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"in\" /* Operator.IN */, value);\n    this.keys = extractDocumentKeysFromArrayValue(\"in\" /* Operator.IN */, value);\n  }\n  matches(doc) {\n    return this.keys.some(key => key.isEqual(doc.key));\n  }\n}\n/** Filter that matches on key fields not present within an array. */\nclass KeyFieldNotInFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"not-in\" /* Operator.NOT_IN */, value);\n    this.keys = extractDocumentKeysFromArrayValue(\"not-in\" /* Operator.NOT_IN */, value);\n  }\n  matches(doc) {\n    return !this.keys.some(key => key.isEqual(doc.key));\n  }\n}\nfunction extractDocumentKeysFromArrayValue(op, value) {\n  var _a;\n  return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(v => {\n    return DocumentKey.fromName(v.referenceValue);\n  });\n}\n/** A Filter that implements the array-contains operator. */\nclass ArrayContainsFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"array-contains\" /* Operator.ARRAY_CONTAINS */, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    return isArray(other) && arrayValueContains(other.arrayValue, this.value);\n  }\n}\n/** A Filter that implements the IN operator. */\nclass InFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"in\" /* Operator.IN */, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    return other !== null && arrayValueContains(this.value.arrayValue, other);\n  }\n}\n/** A Filter that implements the not-in operator. */\nclass NotInFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"not-in\" /* Operator.NOT_IN */, value);\n  }\n  matches(doc) {\n    if (arrayValueContains(this.value.arrayValue, {\n      nullValue: 'NULL_VALUE'\n    })) {\n      return false;\n    }\n    const other = doc.data.field(this.field);\n    return other !== null && !arrayValueContains(this.value.arrayValue, other);\n  }\n}\n/** A Filter that implements the array-contains-any operator. */\nclass ArrayContainsAnyFilter extends FieldFilter {\n  constructor(field, value) {\n    super(field, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, value);\n  }\n  matches(doc) {\n    const other = doc.data.field(this.field);\n    if (!isArray(other) || !other.arrayValue.values) {\n      return false;\n    }\n    return other.arrayValue.values.some(val => arrayValueContains(this.value.arrayValue, val));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Visible for testing\nclass TargetImpl {\n  constructor(path, collectionGroup = null, orderBy = [], filters = [], limit = null, startAt = null, endAt = null) {\n    this.path = path;\n    this.collectionGroup = collectionGroup;\n    this.orderBy = orderBy;\n    this.filters = filters;\n    this.limit = limit;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.memoizedCanonicalId = null;\n  }\n}\n/**\r\n * Initializes a Target with a path and optional additional query constraints.\r\n * Path must currently be empty if this is a collection group query.\r\n *\r\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\r\n * using this factory method, because `Query` provides an implicit `orderBy`\r\n * property.\r\n */\nfunction newTarget(path, collectionGroup = null, orderBy = [], filters = [], limit = null, startAt = null, endAt = null) {\n  return new TargetImpl(path, collectionGroup, orderBy, filters, limit, startAt, endAt);\n}\nfunction canonifyTarget(target) {\n  const targetImpl = debugCast(target);\n  if (targetImpl.memoizedCanonicalId === null) {\n    let str = targetImpl.path.canonicalString();\n    if (targetImpl.collectionGroup !== null) {\n      str += '|cg:' + targetImpl.collectionGroup;\n    }\n    str += '|f:';\n    str += targetImpl.filters.map(f => canonifyFilter(f)).join(',');\n    str += '|ob:';\n    str += targetImpl.orderBy.map(o => canonifyOrderBy(o)).join(',');\n    if (!isNullOrUndefined(targetImpl.limit)) {\n      str += '|l:';\n      str += targetImpl.limit;\n    }\n    if (targetImpl.startAt) {\n      str += '|lb:';\n      str += targetImpl.startAt.inclusive ? 'b:' : 'a:';\n      str += targetImpl.startAt.position.map(p => canonicalId(p)).join(',');\n    }\n    if (targetImpl.endAt) {\n      str += '|ub:';\n      str += targetImpl.endAt.inclusive ? 'a:' : 'b:';\n      str += targetImpl.endAt.position.map(p => canonicalId(p)).join(',');\n    }\n    targetImpl.memoizedCanonicalId = str;\n  }\n  return targetImpl.memoizedCanonicalId;\n}\nfunction stringifyTarget(target) {\n  let str = target.path.canonicalString();\n  if (target.collectionGroup !== null) {\n    str += ' collectionGroup=' + target.collectionGroup;\n  }\n  if (target.filters.length > 0) {\n    str += `, filters: [${target.filters.map(f => stringifyFilter(f)).join(', ')}]`;\n  }\n  if (!isNullOrUndefined(target.limit)) {\n    str += ', limit: ' + target.limit;\n  }\n  if (target.orderBy.length > 0) {\n    str += `, orderBy: [${target.orderBy.map(o => stringifyOrderBy(o)).join(', ')}]`;\n  }\n  if (target.startAt) {\n    str += ', startAt: ';\n    str += target.startAt.inclusive ? 'b:' : 'a:';\n    str += target.startAt.position.map(p => canonicalId(p)).join(',');\n  }\n  if (target.endAt) {\n    str += ', endAt: ';\n    str += target.endAt.inclusive ? 'a:' : 'b:';\n    str += target.endAt.position.map(p => canonicalId(p)).join(',');\n  }\n  return `Target(${str})`;\n}\nfunction targetEquals(left, right) {\n  if (left.limit !== right.limit) {\n    return false;\n  }\n  if (left.orderBy.length !== right.orderBy.length) {\n    return false;\n  }\n  for (let i = 0; i < left.orderBy.length; i++) {\n    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {\n      return false;\n    }\n  }\n  if (left.filters.length !== right.filters.length) {\n    return false;\n  }\n  for (let i = 0; i < left.filters.length; i++) {\n    if (!filterEquals(left.filters[i], right.filters[i])) {\n      return false;\n    }\n  }\n  if (left.collectionGroup !== right.collectionGroup) {\n    return false;\n  }\n  if (!left.path.isEqual(right.path)) {\n    return false;\n  }\n  if (!boundEquals(left.startAt, right.startAt)) {\n    return false;\n  }\n  return boundEquals(left.endAt, right.endAt);\n}\nfunction targetIsDocumentTarget(target) {\n  return DocumentKey.isDocumentKey(target.path) && target.collectionGroup === null && target.filters.length === 0;\n}\n/** Returns the field filters that target the given field path. */\nfunction targetGetFieldFiltersForPath(target, path) {\n  return target.filters.filter(f => f instanceof FieldFilter && f.field.isEqual(path));\n}\n/**\r\n * Returns the values that are used in ARRAY_CONTAINS or ARRAY_CONTAINS_ANY\r\n * filters. Returns `null` if there are no such filters.\r\n */\nfunction targetGetArrayValues(target, fieldIndex) {\n  const segment = fieldIndexGetArraySegment(fieldIndex);\n  if (segment === undefined) {\n    return null;\n  }\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, segment.fieldPath)) {\n    switch (fieldFilter.op) {\n      case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\n        return fieldFilter.value.arrayValue.values || [];\n      case \"array-contains\" /* Operator.ARRAY_CONTAINS */:\n        return [fieldFilter.value];\n      // Remaining filters are not array filters.\n    }\n  }\n  return null;\n}\n/**\r\n * Returns the list of values that are used in != or NOT_IN filters. Returns\r\n * `null` if there are no such filters.\r\n */\nfunction targetGetNotInValues(target, fieldIndex) {\n  const values = new Map();\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    for (const fieldFilter of targetGetFieldFiltersForPath(target, segment.fieldPath)) {\n      switch (fieldFilter.op) {\n        case \"==\" /* Operator.EQUAL */:\n        case \"in\" /* Operator.IN */:\n          // Encode equality prefix, which is encoded in the index value before\n          // the inequality (e.g. `a == 'a' && b != 'b'` is encoded to\n          // `value != 'ab'`).\n          values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\n          break;\n        case \"not-in\" /* Operator.NOT_IN */:\n        case \"!=\" /* Operator.NOT_EQUAL */:\n          // NotIn/NotEqual is always a suffix. There cannot be any remaining\n          // segments and hence we can return early here.\n          values.set(segment.fieldPath.canonicalString(), fieldFilter.value);\n          return Array.from(values.values());\n        // Remaining filters cannot be used as notIn bounds.\n      }\n    }\n  }\n  return null;\n}\n/**\r\n * Returns a lower bound of field values that can be used as a starting point to\r\n * scan the index defined by `fieldIndex`. Returns `MIN_VALUE` if no lower bound\r\n * exists.\r\n */\nfunction targetGetLowerBound(target, fieldIndex) {\n  const values = [];\n  let inclusive = true;\n  // For each segment, retrieve a lower bound if there is a suitable filter or\n  // startAt.\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    const segmentBound = segment.kind === 0 /* IndexKind.ASCENDING */ ? targetGetAscendingBound(target, segment.fieldPath, target.startAt) : targetGetDescendingBound(target, segment.fieldPath, target.startAt);\n    values.push(segmentBound.value);\n    inclusive && (inclusive = segmentBound.inclusive);\n  }\n  return new Bound(values, inclusive);\n}\n/**\r\n * Returns an upper bound of field values that can be used as an ending point\r\n * when scanning the index defined by `fieldIndex`. Returns `MAX_VALUE` if no\r\n * upper bound exists.\r\n */\nfunction targetGetUpperBound(target, fieldIndex) {\n  const values = [];\n  let inclusive = true;\n  // For each segment, retrieve an upper bound if there is a suitable filter or\n  // endAt.\n  for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n    const segmentBound = segment.kind === 0 /* IndexKind.ASCENDING */ ? targetGetDescendingBound(target, segment.fieldPath, target.endAt) : targetGetAscendingBound(target, segment.fieldPath, target.endAt);\n    values.push(segmentBound.value);\n    inclusive && (inclusive = segmentBound.inclusive);\n  }\n  return new Bound(values, inclusive);\n}\n/**\r\n * Returns the value to use as the lower bound for ascending index segment at\r\n * the provided `fieldPath` (or the upper bound for an descending segment).\r\n */\nfunction targetGetAscendingBound(target, fieldPath, bound) {\n  let value = MIN_VALUE;\n  let inclusive = true;\n  // Process all filters to find a value for the current field segment\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\n    let filterValue = MIN_VALUE;\n    let filterInclusive = true;\n    switch (fieldFilter.op) {\n      case \"<\" /* Operator.LESS_THAN */:\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        filterValue = valuesGetLowerBound(fieldFilter.value);\n        break;\n      case \"==\" /* Operator.EQUAL */:\n      case \"in\" /* Operator.IN */:\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n        filterValue = fieldFilter.value;\n        break;\n      case \">\" /* Operator.GREATER_THAN */:\n        filterValue = fieldFilter.value;\n        filterInclusive = false;\n        break;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n      case \"not-in\" /* Operator.NOT_IN */:\n        filterValue = MIN_VALUE;\n        break;\n      // Remaining filters cannot be used as lower bounds.\n    }\n    if (lowerBoundCompare({\n      value,\n      inclusive\n    }, {\n      value: filterValue,\n      inclusive: filterInclusive\n    }) < 0) {\n      value = filterValue;\n      inclusive = filterInclusive;\n    }\n  }\n  // If there is an additional bound, compare the values against the existing\n  // range to see if we can narrow the scope.\n  if (bound !== null) {\n    for (let i = 0; i < target.orderBy.length; ++i) {\n      const orderBy = target.orderBy[i];\n      if (orderBy.field.isEqual(fieldPath)) {\n        const cursorValue = bound.position[i];\n        if (lowerBoundCompare({\n          value,\n          inclusive\n        }, {\n          value: cursorValue,\n          inclusive: bound.inclusive\n        }) < 0) {\n          value = cursorValue;\n          inclusive = bound.inclusive;\n        }\n        break;\n      }\n    }\n  }\n  return {\n    value,\n    inclusive\n  };\n}\n/**\r\n * Returns the value to use as the upper bound for ascending index segment at\r\n * the provided `fieldPath` (or the lower bound for a descending segment).\r\n */\nfunction targetGetDescendingBound(target, fieldPath, bound) {\n  let value = MAX_VALUE;\n  let inclusive = true;\n  // Process all filters to find a value for the current field segment\n  for (const fieldFilter of targetGetFieldFiltersForPath(target, fieldPath)) {\n    let filterValue = MAX_VALUE;\n    let filterInclusive = true;\n    switch (fieldFilter.op) {\n      case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */:\n      case \">\" /* Operator.GREATER_THAN */:\n        filterValue = valuesGetUpperBound(fieldFilter.value);\n        filterInclusive = false;\n        break;\n      case \"==\" /* Operator.EQUAL */:\n      case \"in\" /* Operator.IN */:\n      case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */:\n        filterValue = fieldFilter.value;\n        break;\n      case \"<\" /* Operator.LESS_THAN */:\n        filterValue = fieldFilter.value;\n        filterInclusive = false;\n        break;\n      case \"!=\" /* Operator.NOT_EQUAL */:\n      case \"not-in\" /* Operator.NOT_IN */:\n        filterValue = MAX_VALUE;\n        break;\n      // Remaining filters cannot be used as upper bounds.\n    }\n    if (upperBoundCompare({\n      value,\n      inclusive\n    }, {\n      value: filterValue,\n      inclusive: filterInclusive\n    }) > 0) {\n      value = filterValue;\n      inclusive = filterInclusive;\n    }\n  }\n  // If there is an additional bound, compare the values against the existing\n  // range to see if we can narrow the scope.\n  if (bound !== null) {\n    for (let i = 0; i < target.orderBy.length; ++i) {\n      const orderBy = target.orderBy[i];\n      if (orderBy.field.isEqual(fieldPath)) {\n        const cursorValue = bound.position[i];\n        if (upperBoundCompare({\n          value,\n          inclusive\n        }, {\n          value: cursorValue,\n          inclusive: bound.inclusive\n        }) > 0) {\n          value = cursorValue;\n          inclusive = bound.inclusive;\n        }\n        break;\n      }\n    }\n  }\n  return {\n    value,\n    inclusive\n  };\n}\n/** Returns the number of segments of a perfect index for this target. */\nfunction targetGetSegmentCount(target) {\n  let fields = new SortedSet(FieldPath$1.comparator);\n  let hasArraySegment = false;\n  for (const filter of target.filters) {\n    for (const subFilter of filter.getFlattenedFilters()) {\n      // __name__ is not an explicit segment of any index, so we don't need to\n      // count it.\n      if (subFilter.field.isKeyField()) {\n        continue;\n      }\n      // ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filters must be counted separately.\n      // For instance, it is possible to have an index for \"a ARRAY a ASC\". Even\n      // though these are on the same field, they should be counted as two\n      // separate segments in an index.\n      if (subFilter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || subFilter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n        hasArraySegment = true;\n      } else {\n        fields = fields.add(subFilter.field);\n      }\n    }\n  }\n  for (const orderBy of target.orderBy) {\n    // __name__ is not an explicit segment of any index, so we don't need to\n    // count it.\n    if (!orderBy.field.isKeyField()) {\n      fields = fields.add(orderBy.field);\n    }\n  }\n  return fields.size + (hasArraySegment ? 1 : 0);\n}\nfunction targetHasLimit(target) {\n  return target.limit !== null;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Query encapsulates all the query attributes we support in the SDK. It can\r\n * be run against the LocalStore, as well as be converted to a `Target` to\r\n * query the RemoteStore results.\r\n *\r\n * Visible for testing.\r\n */\nclass QueryImpl {\n  /**\r\n   * Initializes a Query with a path and optional additional query constraints.\r\n   * Path must currently be empty if this is a collection group query.\r\n   */\n  constructor(path, collectionGroup = null, explicitOrderBy = [], filters = [], limit = null, limitType = \"F\" /* LimitType.First */, startAt = null, endAt = null) {\n    this.path = path;\n    this.collectionGroup = collectionGroup;\n    this.explicitOrderBy = explicitOrderBy;\n    this.filters = filters;\n    this.limit = limit;\n    this.limitType = limitType;\n    this.startAt = startAt;\n    this.endAt = endAt;\n    this.memoizedNormalizedOrderBy = null;\n    // The corresponding `Target` of this `Query` instance, for use with\n    // non-aggregate queries.\n    this.memoizedTarget = null;\n    // The corresponding `Target` of this `Query` instance, for use with\n    // aggregate queries. Unlike targets for non-aggregate queries,\n    // aggregate query targets do not contain normalized order-bys, they only\n    // contain explicit order-bys.\n    this.memoizedAggregateTarget = null;\n    if (this.startAt) ;\n    if (this.endAt) ;\n  }\n}\n/** Creates a new Query instance with the options provided. */\nfunction newQuery(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt) {\n  return new QueryImpl(path, collectionGroup, explicitOrderBy, filters, limit, limitType, startAt, endAt);\n}\n/** Creates a new Query for a query that matches all documents at `path` */\nfunction newQueryForPath(path) {\n  return new QueryImpl(path);\n}\n/**\r\n * Helper to convert a collection group query into a collection query at a\r\n * specific path. This is used when executing collection group queries, since\r\n * we have to split the query into a set of collection queries at multiple\r\n * paths.\r\n */\nfunction asCollectionQueryAtPath(query, path) {\n  return new QueryImpl(path, /*collectionGroup=*/null, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\n}\n/**\r\n * Returns true if this query does not specify any query constraints that\r\n * could remove results.\r\n */\nfunction queryMatchesAllDocuments(query) {\n  return query.filters.length === 0 && query.limit === null && query.startAt == null && query.endAt == null && (query.explicitOrderBy.length === 0 || query.explicitOrderBy.length === 1 && query.explicitOrderBy[0].field.isKeyField());\n}\n// Returns the sorted set of inequality filter fields used in this query.\nfunction getInequalityFilterFields(query) {\n  let result = new SortedSet(FieldPath$1.comparator);\n  query.filters.forEach(filter => {\n    const subFilters = filter.getFlattenedFilters();\n    subFilters.forEach(filter => {\n      if (filter.isInequality()) {\n        result = result.add(filter.field);\n      }\n    });\n  });\n  return result;\n}\n/**\r\n * Creates a new Query for a collection group query that matches all documents\r\n * within the provided collection group.\r\n */\nfunction newQueryForCollectionGroup(collectionId) {\n  return new QueryImpl(ResourcePath.emptyPath(), collectionId);\n}\n/**\r\n * Returns whether the query matches a single document by path (rather than a\r\n * collection).\r\n */\nfunction isDocumentQuery$1(query) {\n  return DocumentKey.isDocumentKey(query.path) && query.collectionGroup === null && query.filters.length === 0;\n}\n/**\r\n * Returns whether the query matches a collection group rather than a specific\r\n * collection.\r\n */\nfunction isCollectionGroupQuery(query) {\n  return query.collectionGroup !== null;\n}\n/**\r\n * Returns the normalized order-by constraint that is used to execute the Query,\r\n * which can be different from the order-by constraints the user provided (e.g.\r\n * the SDK and backend always orders by `__name__`). The normalized order-by\r\n * includes implicit order-bys in addition to the explicit user provided\r\n * order-bys.\r\n */\nfunction queryNormalizedOrderBy(query) {\n  const queryImpl = debugCast(query);\n  if (queryImpl.memoizedNormalizedOrderBy === null) {\n    queryImpl.memoizedNormalizedOrderBy = [];\n    const fieldsNormalized = new Set();\n    // Any explicit order by fields should be added as is.\n    for (const orderBy of queryImpl.explicitOrderBy) {\n      queryImpl.memoizedNormalizedOrderBy.push(orderBy);\n      fieldsNormalized.add(orderBy.field.canonicalString());\n    }\n    // The order of the implicit ordering always matches the last explicit order by.\n    const lastDirection = queryImpl.explicitOrderBy.length > 0 ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */;\n    // Any inequality fields not explicitly ordered should be implicitly ordered in a lexicographical\n    // order. When there are multiple inequality filters on the same field, the field should be added\n    // only once.\n    // Note: `SortedSet<FieldPath>` sorts the key field before other fields. However, we want the key\n    // field to be sorted last.\n    const inequalityFields = getInequalityFilterFields(queryImpl);\n    inequalityFields.forEach(field => {\n      if (!fieldsNormalized.has(field.canonicalString()) && !field.isKeyField()) {\n        queryImpl.memoizedNormalizedOrderBy.push(new OrderBy(field, lastDirection));\n      }\n    });\n    // Add the document key field to the last if it is not explicitly ordered.\n    if (!fieldsNormalized.has(FieldPath$1.keyField().canonicalString())) {\n      queryImpl.memoizedNormalizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), lastDirection));\n    }\n  }\n  return queryImpl.memoizedNormalizedOrderBy;\n}\n/**\r\n * Converts this `Query` instance to its corresponding `Target` representation.\r\n */\nfunction queryToTarget(query) {\n  const queryImpl = debugCast(query);\n  if (!queryImpl.memoizedTarget) {\n    queryImpl.memoizedTarget = _queryToTarget(queryImpl, queryNormalizedOrderBy(query));\n  }\n  return queryImpl.memoizedTarget;\n}\n/**\r\n * Converts this `Query` instance to its corresponding `Target` representation,\r\n * for use within an aggregate query. Unlike targets for non-aggregate queries,\r\n * aggregate query targets do not contain normalized order-bys, they only\r\n * contain explicit order-bys.\r\n */\nfunction queryToAggregateTarget(query) {\n  const queryImpl = debugCast(query);\n  if (!queryImpl.memoizedAggregateTarget) {\n    // Do not include implicit order-bys for aggregate queries.\n    queryImpl.memoizedAggregateTarget = _queryToTarget(queryImpl, query.explicitOrderBy);\n  }\n  return queryImpl.memoizedAggregateTarget;\n}\nfunction _queryToTarget(queryImpl, orderBys) {\n  if (queryImpl.limitType === \"F\" /* LimitType.First */) {\n    return newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);\n  } else {\n    // Flip the orderBy directions since we want the last results\n    orderBys = orderBys.map(orderBy => {\n      const dir = orderBy.dir === \"desc\" /* Direction.DESCENDING */ ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n      return new OrderBy(orderBy.field, dir);\n    });\n    // We need to swap the cursors to match the now-flipped query ordering.\n    const startAt = queryImpl.endAt ? new Bound(queryImpl.endAt.position, queryImpl.endAt.inclusive) : null;\n    const endAt = queryImpl.startAt ? new Bound(queryImpl.startAt.position, queryImpl.startAt.inclusive) : null;\n    // Now return as a LimitType.First query.\n    return newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt, endAt);\n  }\n}\nfunction queryWithAddedFilter(query, filter) {\n  const newFilters = query.filters.concat([filter]);\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), newFilters, query.limit, query.limitType, query.startAt, query.endAt);\n}\nfunction queryWithAddedOrderBy(query, orderBy) {\n  // TODO(dimond): validate that orderBy does not list the same key twice.\n  const newOrderBy = query.explicitOrderBy.concat([orderBy]);\n  return new QueryImpl(query.path, query.collectionGroup, newOrderBy, query.filters.slice(), query.limit, query.limitType, query.startAt, query.endAt);\n}\nfunction queryWithLimit(query, limit, limitType) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), limit, limitType, query.startAt, query.endAt);\n}\nfunction queryWithStartAt(query, bound) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, bound, query.endAt);\n}\nfunction queryWithEndAt(query, bound) {\n  return new QueryImpl(query.path, query.collectionGroup, query.explicitOrderBy.slice(), query.filters.slice(), query.limit, query.limitType, query.startAt, bound);\n}\nfunction queryEquals(left, right) {\n  return targetEquals(queryToTarget(left), queryToTarget(right)) && left.limitType === right.limitType;\n}\n// TODO(b/29183165): This is used to get a unique string from a query to, for\n// example, use as a dictionary key, but the implementation is subject to\n// collisions. Make it collision-free.\nfunction canonifyQuery(query) {\n  return `${canonifyTarget(queryToTarget(query))}|lt:${query.limitType}`;\n}\nfunction stringifyQuery(query) {\n  return `Query(target=${stringifyTarget(queryToTarget(query))}; limitType=${query.limitType})`;\n}\n/** Returns whether `doc` matches the constraints of `query`. */\nfunction queryMatches(query, doc) {\n  return doc.isFoundDocument() && queryMatchesPathAndCollectionGroup(query, doc) && queryMatchesOrderBy(query, doc) && queryMatchesFilters(query, doc) && queryMatchesBounds(query, doc);\n}\nfunction queryMatchesPathAndCollectionGroup(query, doc) {\n  const docPath = doc.key.path;\n  if (query.collectionGroup !== null) {\n    // NOTE: this.path is currently always empty since we don't expose Collection\n    // Group queries rooted at a document path yet.\n    return doc.key.hasCollectionId(query.collectionGroup) && query.path.isPrefixOf(docPath);\n  } else if (DocumentKey.isDocumentKey(query.path)) {\n    // exact match for document queries\n    return query.path.isEqual(docPath);\n  } else {\n    // shallow ancestor queries by default\n    return query.path.isImmediateParentOf(docPath);\n  }\n}\n/**\r\n * A document must have a value for every ordering clause in order to show up\r\n * in the results.\r\n */\nfunction queryMatchesOrderBy(query, doc) {\n  // We must use `queryNormalizedOrderBy()` to get the list of all orderBys (both implicit and explicit).\n  // Note that for OR queries, orderBy applies to all disjunction terms and implicit orderBys must\n  // be taken into account. For example, the query \"a > 1 || b==1\" has an implicit \"orderBy a\" due\n  // to the inequality, and is evaluated as \"a > 1 orderBy a || b==1 orderBy a\".\n  // A document with content of {b:1} matches the filters, but does not match the orderBy because\n  // it's missing the field 'a'.\n  for (const orderBy of queryNormalizedOrderBy(query)) {\n    // order-by key always matches\n    if (!orderBy.field.isKeyField() && doc.data.field(orderBy.field) === null) {\n      return false;\n    }\n  }\n  return true;\n}\nfunction queryMatchesFilters(query, doc) {\n  for (const filter of query.filters) {\n    if (!filter.matches(doc)) {\n      return false;\n    }\n  }\n  return true;\n}\n/** Makes sure a document is within the bounds, if provided. */\nfunction queryMatchesBounds(query, doc) {\n  if (query.startAt && !boundSortsBeforeDocument(query.startAt, queryNormalizedOrderBy(query), doc)) {\n    return false;\n  }\n  if (query.endAt && !boundSortsAfterDocument(query.endAt, queryNormalizedOrderBy(query), doc)) {\n    return false;\n  }\n  return true;\n}\n/**\r\n * Returns the collection group that this query targets.\r\n *\r\n * PORTING NOTE: This is only used in the Web SDK to facilitate multi-tab\r\n * synchronization for query results.\r\n */\nfunction queryCollectionGroup(query) {\n  return query.collectionGroup || (query.path.length % 2 === 1 ? query.path.lastSegment() : query.path.get(query.path.length - 2));\n}\n/**\r\n * Returns a new comparator function that can be used to compare two documents\r\n * based on the Query's ordering constraint.\r\n */\nfunction newQueryComparator(query) {\n  return (d1, d2) => {\n    let comparedOnKeyField = false;\n    for (const orderBy of queryNormalizedOrderBy(query)) {\n      const comp = compareDocs(orderBy, d1, d2);\n      if (comp !== 0) {\n        return comp;\n      }\n      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();\n    }\n    return 0;\n  };\n}\nfunction compareDocs(orderBy, d1, d2) {\n  const comparison = orderBy.field.isKeyField() ? DocumentKey.comparator(d1.key, d2.key) : compareDocumentsByField(orderBy.field, d1, d2);\n  switch (orderBy.dir) {\n    case \"asc\" /* Direction.ASCENDING */:\n      return comparison;\n    case \"desc\" /* Direction.DESCENDING */:\n      return -1 * comparison;\n    default:\n      return fail();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A map implementation that uses objects as keys. Objects must have an\r\n * associated equals function and must be immutable. Entries in the map are\r\n * stored together with the key being produced from the mapKeyFn. This map\r\n * automatically handles collisions of keys.\r\n */\nclass ObjectMap {\n  constructor(mapKeyFn, equalsFn) {\n    this.mapKeyFn = mapKeyFn;\n    this.equalsFn = equalsFn;\n    /**\r\n     * The inner map for a key/value pair. Due to the possibility of collisions we\r\n     * keep a list of entries that we do a linear search through to find an actual\r\n     * match. Note that collisions should be rare, so we still expect near\r\n     * constant time lookups in practice.\r\n     */\n    this.inner = {};\n    /** The number of entries stored in the map */\n    this.innerSize = 0;\n  }\n  /** Get a value for this key, or undefined if it does not exist. */\n  get(key) {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return undefined;\n    }\n    for (const [otherKey, value] of matches) {\n      if (this.equalsFn(otherKey, key)) {\n        return value;\n      }\n    }\n    return undefined;\n  }\n  has(key) {\n    return this.get(key) !== undefined;\n  }\n  /** Put this key and value in the map. */\n  set(key, value) {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      this.inner[id] = [[key, value]];\n      this.innerSize++;\n      return;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        // This is updating an existing entry and does not increase `innerSize`.\n        matches[i] = [key, value];\n        return;\n      }\n    }\n    matches.push([key, value]);\n    this.innerSize++;\n  }\n  /**\r\n   * Remove this key from the map. Returns a boolean if anything was deleted.\r\n   */\n  delete(key) {\n    const id = this.mapKeyFn(key);\n    const matches = this.inner[id];\n    if (matches === undefined) {\n      return false;\n    }\n    for (let i = 0; i < matches.length; i++) {\n      if (this.equalsFn(matches[i][0], key)) {\n        if (matches.length === 1) {\n          delete this.inner[id];\n        } else {\n          matches.splice(i, 1);\n        }\n        this.innerSize--;\n        return true;\n      }\n    }\n    return false;\n  }\n  forEach(fn) {\n    forEach(this.inner, (_, entries) => {\n      for (const [k, v] of entries) {\n        fn(k, v);\n      }\n    });\n  }\n  isEmpty() {\n    return isEmpty(this.inner);\n  }\n  size() {\n    return this.innerSize;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst EMPTY_MUTABLE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nfunction mutableDocumentMap() {\n  return EMPTY_MUTABLE_DOCUMENT_MAP;\n}\nconst EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);\nfunction documentMap(...docs) {\n  let map = EMPTY_DOCUMENT_MAP;\n  for (const doc of docs) {\n    map = map.insert(doc.key, doc);\n  }\n  return map;\n}\nfunction newOverlayedDocumentMap() {\n  return newDocumentKeyMap();\n}\nfunction convertOverlayedDocumentMapToDocumentMap(collection) {\n  let documents = EMPTY_DOCUMENT_MAP;\n  collection.forEach((k, v) => documents = documents.insert(k, v.overlayedDocument));\n  return documents;\n}\nfunction newOverlayMap() {\n  return newDocumentKeyMap();\n}\nfunction newMutationMap() {\n  return newDocumentKeyMap();\n}\nfunction newDocumentKeyMap() {\n  return new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\n}\nconst EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);\nfunction documentVersionMap() {\n  return EMPTY_DOCUMENT_VERSION_MAP;\n}\nconst EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);\nfunction documentKeySet(...keys) {\n  let set = EMPTY_DOCUMENT_KEY_SET;\n  for (const key of keys) {\n    set = set.add(key);\n  }\n  return set;\n}\nconst EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);\nfunction targetIdSet() {\n  return EMPTY_TARGET_ID_SET;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns an DoubleValue for `value` that is encoded based the serializer's\r\n * `useProto3Json` setting.\r\n */\nfunction toDouble(serializer, value) {\n  if (serializer.useProto3Json) {\n    if (isNaN(value)) {\n      return {\n        doubleValue: 'NaN'\n      };\n    } else if (value === Infinity) {\n      return {\n        doubleValue: 'Infinity'\n      };\n    } else if (value === -Infinity) {\n      return {\n        doubleValue: '-Infinity'\n      };\n    }\n  }\n  return {\n    doubleValue: isNegativeZero(value) ? '-0' : value\n  };\n}\n/**\r\n * Returns an IntegerValue for `value`.\r\n */\nfunction toInteger(value) {\n  return {\n    integerValue: '' + value\n  };\n}\n/**\r\n * Returns a value for a number that's appropriate to put into a proto.\r\n * The return value is an IntegerValue if it can safely represent the value,\r\n * otherwise a DoubleValue is returned.\r\n */\nfunction toNumber(serializer, value) {\n  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Used to represent a field transform on a mutation. */\nclass TransformOperation {\n  constructor() {\n    // Make sure that the structural type of `TransformOperation` is unique.\n    // See https://github.com/microsoft/TypeScript/issues/5451\n    this._ = undefined;\n  }\n}\n/**\r\n * Computes the local transform result against the provided `previousValue`,\r\n * optionally using the provided localWriteTime.\r\n */\nfunction applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {\n  if (transform instanceof ServerTimestampTransform) {\n    return serverTimestamp$1(localWriteTime, previousValue);\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  } else {\n    return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);\n  }\n}\n/**\r\n * Computes a final transform result after the transform has been acknowledged\r\n * by the server, potentially using the server-provided transformResult.\r\n */\nfunction applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {\n  // The server just sends null as the transform result for array operations,\n  // so we have to calculate a result the same as we do for local\n  // applications.\n  if (transform instanceof ArrayUnionTransformOperation) {\n    return applyArrayUnionTransformOperation(transform, previousValue);\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return applyArrayRemoveTransformOperation(transform, previousValue);\n  }\n  return transformResult;\n}\n/**\r\n * If this transform operation is not idempotent, returns the base value to\r\n * persist for this transform. If a base value is returned, the transform\r\n * operation is always applied to this base value, even if document has\r\n * already been updated.\r\n *\r\n * Base values provide consistent behavior for non-idempotent transforms and\r\n * allow us to return the same latency-compensated value even if the backend\r\n * has already applied the transform operation. The base value is null for\r\n * idempotent transforms, as they can be re-played even if the backend has\r\n * already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent transforms.\r\n */\nfunction computeTransformOperationBaseValue(transform, previousValue) {\n  if (transform instanceof NumericIncrementTransformOperation) {\n    return isNumber(previousValue) ? previousValue : {\n      integerValue: 0\n    };\n  }\n  return null;\n}\nfunction transformOperationEquals(left, right) {\n  if (left instanceof ArrayUnionTransformOperation && right instanceof ArrayUnionTransformOperation) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (left instanceof ArrayRemoveTransformOperation && right instanceof ArrayRemoveTransformOperation) {\n    return arrayEquals(left.elements, right.elements, valueEquals);\n  } else if (left instanceof NumericIncrementTransformOperation && right instanceof NumericIncrementTransformOperation) {\n    return valueEquals(left.operand, right.operand);\n  }\n  return left instanceof ServerTimestampTransform && right instanceof ServerTimestampTransform;\n}\n/** Transforms a value into a server-generated timestamp. */\nclass ServerTimestampTransform extends TransformOperation {}\n/** Transforms an array value via a union operation. */\nclass ArrayUnionTransformOperation extends TransformOperation {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n}\nfunction applyArrayUnionTransformOperation(transform, previousValue) {\n  const values = coercedFieldValuesArray(previousValue);\n  for (const toUnion of transform.elements) {\n    if (!values.some(element => valueEquals(element, toUnion))) {\n      values.push(toUnion);\n    }\n  }\n  return {\n    arrayValue: {\n      values\n    }\n  };\n}\n/** Transforms an array value via a remove operation. */\nclass ArrayRemoveTransformOperation extends TransformOperation {\n  constructor(elements) {\n    super();\n    this.elements = elements;\n  }\n}\nfunction applyArrayRemoveTransformOperation(transform, previousValue) {\n  let values = coercedFieldValuesArray(previousValue);\n  for (const toRemove of transform.elements) {\n    values = values.filter(element => !valueEquals(element, toRemove));\n  }\n  return {\n    arrayValue: {\n      values\n    }\n  };\n}\n/**\r\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\r\n * transforms. Converts all field values to integers or doubles, but unlike the\r\n * backend does not cap integer values at 2^63. Instead, JavaScript number\r\n * arithmetic is used and precision loss can occur for values greater than 2^53.\r\n */\nclass NumericIncrementTransformOperation extends TransformOperation {\n  constructor(serializer, operand) {\n    super();\n    this.serializer = serializer;\n    this.operand = operand;\n  }\n}\nfunction applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {\n  // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit\n  // precision and resolves overflows by reducing precision, we do not\n  // manually cap overflows at 2^63.\n  const baseValue = computeTransformOperationBaseValue(transform, previousValue);\n  const sum = asNumber(baseValue) + asNumber(transform.operand);\n  if (isInteger(baseValue) && isInteger(transform.operand)) {\n    return toInteger(sum);\n  } else {\n    return toDouble(transform.serializer, sum);\n  }\n}\nfunction asNumber(value) {\n  return normalizeNumber(value.integerValue || value.doubleValue);\n}\nfunction coercedFieldValuesArray(value) {\n  return isArray(value) && value.arrayValue.values ? value.arrayValue.values.slice() : [];\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** A field path and the TransformOperation to perform upon it. */\nclass FieldTransform {\n  constructor(field, transform) {\n    this.field = field;\n    this.transform = transform;\n  }\n}\nfunction fieldTransformEquals(left, right) {\n  return left.field.isEqual(right.field) && transformOperationEquals(left.transform, right.transform);\n}\nfunction fieldTransformsAreEqual(left, right) {\n  if (left === undefined && right === undefined) {\n    return true;\n  }\n  if (left && right) {\n    return arrayEquals(left, right, (l, r) => fieldTransformEquals(l, r));\n  }\n  return false;\n}\n/** The result of successfully applying a mutation to the backend. */\nclass MutationResult {\n  constructor(\n  /**\r\n   * The version at which the mutation was committed:\r\n   *\r\n   * - For most operations, this is the updateTime in the WriteResult.\r\n   * - For deletes, the commitTime of the WriteResponse (because deletes are\r\n   *   not stored and have no updateTime).\r\n   *\r\n   * Note that these versions can be different: No-op writes will not change\r\n   * the updateTime even though the commitTime advances.\r\n   */\n  version,\n  /**\r\n   * The resulting fields returned from the backend after a mutation\r\n   * containing field transforms has been committed. Contains one FieldValue\r\n   * for each FieldTransform that was in the mutation.\r\n   *\r\n   * Will be empty if the mutation did not contain any field transforms.\r\n   */\n  transformResults) {\n    this.version = version;\n    this.transformResults = transformResults;\n  }\n}\n/**\r\n * Encodes a precondition for a mutation. This follows the model that the\r\n * backend accepts with the special case of an explicit \"empty\" precondition\r\n * (meaning no precondition).\r\n */\nclass Precondition {\n  constructor(updateTime, exists) {\n    this.updateTime = updateTime;\n    this.exists = exists;\n  }\n  /** Creates a new empty Precondition. */\n  static none() {\n    return new Precondition();\n  }\n  /** Creates a new Precondition with an exists flag. */\n  static exists(exists) {\n    return new Precondition(undefined, exists);\n  }\n  /** Creates a new Precondition based on a version a document exists at. */\n  static updateTime(version) {\n    return new Precondition(version);\n  }\n  /** Returns whether this Precondition is empty. */\n  get isNone() {\n    return this.updateTime === undefined && this.exists === undefined;\n  }\n  isEqual(other) {\n    return this.exists === other.exists && (this.updateTime ? !!other.updateTime && this.updateTime.isEqual(other.updateTime) : !other.updateTime);\n  }\n}\n/** Returns true if the preconditions is valid for the given document. */\nfunction preconditionIsValidForDocument(precondition, document) {\n  if (precondition.updateTime !== undefined) {\n    return document.isFoundDocument() && document.version.isEqual(precondition.updateTime);\n  } else if (precondition.exists !== undefined) {\n    return precondition.exists === document.isFoundDocument();\n  } else {\n    return true;\n  }\n}\n/**\r\n * A mutation describes a self-contained change to a document. Mutations can\r\n * create, replace, delete, and update subsets of documents.\r\n *\r\n * Mutations not only act on the value of the document but also its version.\r\n *\r\n * For local mutations (mutations that haven't been committed yet), we preserve\r\n * the existing version for Set and Patch mutations. For Delete mutations, we\r\n * reset the version to 0.\r\n *\r\n * Here's the expected transition table.\r\n *\r\n * MUTATION           APPLIED TO            RESULTS IN\r\n *\r\n * SetMutation        Document(v3)          Document(v3)\r\n * SetMutation        NoDocument(v3)        Document(v0)\r\n * SetMutation        InvalidDocument(v0)   Document(v0)\r\n * PatchMutation      Document(v3)          Document(v3)\r\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\r\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\r\n * DeleteMutation     Document(v3)          NoDocument(v0)\r\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\r\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\r\n *\r\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\r\n * the resulting version for Set and Patch mutations. As deletes have no\r\n * explicit update time, we use the commitTime of the WriteResponse for\r\n * Delete mutations.\r\n *\r\n * If a mutation is acknowledged by the backend but fails the precondition check\r\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\r\n * the updated version.\r\n *\r\n * Field transforms are used only with Patch and Set Mutations. We use the\r\n * `updateTransforms` message to store transforms, rather than the `transforms`s\r\n * messages.\r\n *\r\n * ## Subclassing Notes\r\n *\r\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\r\n * applyToLocalView() to implement the actual behavior of applying the mutation\r\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\r\n * example).\r\n */\nclass Mutation {}\n/**\r\n * A utility method to calculate a `Mutation` representing the overlay from the\r\n * final state of the document, and a `FieldMask` representing the fields that\r\n * are mutated by the local mutations.\r\n */\nfunction calculateOverlayMutation(doc, mask) {\n  if (!doc.hasLocalMutations || mask && mask.fields.length === 0) {\n    return null;\n  }\n  // mask is null when sets or deletes are applied to the current document.\n  if (mask === null) {\n    if (doc.isNoDocument()) {\n      return new DeleteMutation(doc.key, Precondition.none());\n    } else {\n      return new SetMutation(doc.key, doc.data, Precondition.none());\n    }\n  } else {\n    const docValue = doc.data;\n    const patchValue = ObjectValue.empty();\n    let maskSet = new SortedSet(FieldPath$1.comparator);\n    for (let path of mask.fields) {\n      if (!maskSet.has(path)) {\n        let value = docValue.field(path);\n        // If we are deleting a nested field, we take the immediate parent as\n        // the mask used to construct the resulting mutation.\n        // Justification: Nested fields can create parent fields implicitly. If\n        // only a leaf entry is deleted in later mutations, the parent field\n        // should still remain, but we may have lost this information.\n        // Consider mutation (foo.bar 1), then mutation (foo.bar delete()).\n        // This leaves the final result (foo, {}). Despite the fact that `doc`\n        // has the correct result, `foo` is not in `mask`, and the resulting\n        // mutation would miss `foo`.\n        if (value === null && path.length > 1) {\n          path = path.popLast();\n          value = docValue.field(path);\n        }\n        if (value === null) {\n          patchValue.delete(path);\n        } else {\n          patchValue.set(path, value);\n        }\n        maskSet = maskSet.add(path);\n      }\n    }\n    return new PatchMutation(doc.key, patchValue, new FieldMask(maskSet.toArray()), Precondition.none());\n  }\n}\n/**\r\n * Applies this mutation to the given document for the purposes of computing a\r\n * new remote document. If the input document doesn't match the expected state\r\n * (e.g. it is invalid or outdated), the document type may transition to\r\n * unknown.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param mutationResult - The result of applying the mutation from the backend.\r\n */\nfunction mutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  if (mutation instanceof SetMutation) {\n    setMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  } else if (mutation instanceof PatchMutation) {\n    patchMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  } else {\n    deleteMutationApplyToRemoteDocument(mutation, document, mutationResult);\n  }\n}\n/**\r\n * Applies this mutation to the given document for the purposes of computing\r\n * the new local view of a document. If the input document doesn't match the\r\n * expected state, the document is not modified.\r\n *\r\n * @param mutation - The mutation to apply.\r\n * @param document - The document to mutate. The input document can be an\r\n *     invalid document if the client has no knowledge of the pre-mutation state\r\n *     of the document.\r\n * @param previousMask - The fields that have been updated before applying this mutation.\r\n * @param localWriteTime - A timestamp indicating the local write time of the\r\n *     batch this mutation is a part of.\r\n * @returns A `FieldMask` representing the fields that are changed by applying this mutation.\r\n */\nfunction mutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\n  if (mutation instanceof SetMutation) {\n    return setMutationApplyToLocalView(mutation, document, previousMask, localWriteTime);\n  } else if (mutation instanceof PatchMutation) {\n    return patchMutationApplyToLocalView(mutation, document, previousMask, localWriteTime);\n  } else {\n    return deleteMutationApplyToLocalView(mutation, document, previousMask);\n  }\n}\n/**\r\n * If this mutation is not idempotent, returns the base value to persist with\r\n * this mutation. If a base value is returned, the mutation is always applied\r\n * to this base value, even if document has already been updated.\r\n *\r\n * The base value is a sparse object that consists of only the document\r\n * fields for which this mutation contains a non-idempotent transformation\r\n * (e.g. a numeric increment). The provided value guarantees consistent\r\n * behavior for non-idempotent transforms and allow us to return the same\r\n * latency-compensated value even if the backend has already applied the\r\n * mutation. The base value is null for idempotent mutations, as they can be\r\n * re-played even if the backend has already applied them.\r\n *\r\n * @returns a base value to store along with the mutation, or null for\r\n * idempotent mutations.\r\n */\nfunction mutationExtractBaseValue(mutation, document) {\n  let baseObject = null;\n  for (const fieldTransform of mutation.fieldTransforms) {\n    const existingValue = document.data.field(fieldTransform.field);\n    const coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);\n    if (coercedValue != null) {\n      if (baseObject === null) {\n        baseObject = ObjectValue.empty();\n      }\n      baseObject.set(fieldTransform.field, coercedValue);\n    }\n  }\n  return baseObject ? baseObject : null;\n}\nfunction mutationEquals(left, right) {\n  if (left.type !== right.type) {\n    return false;\n  }\n  if (!left.key.isEqual(right.key)) {\n    return false;\n  }\n  if (!left.precondition.isEqual(right.precondition)) {\n    return false;\n  }\n  if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {\n    return false;\n  }\n  if (left.type === 0 /* MutationType.Set */) {\n    return left.value.isEqual(right.value);\n  }\n  if (left.type === 1 /* MutationType.Patch */) {\n    return left.data.isEqual(right.data) && left.fieldMask.isEqual(right.fieldMask);\n  }\n  return true;\n}\n/**\r\n * A mutation that creates or replaces the document at the given key with the\r\n * object value contents.\r\n */\nclass SetMutation extends Mutation {\n  constructor(key, value, precondition, fieldTransforms = []) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.precondition = precondition;\n    this.fieldTransforms = fieldTransforms;\n    this.type = 0 /* MutationType.Set */;\n  }\n  getFieldMask() {\n    return null;\n  }\n}\nfunction setMutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  // Unlike setMutationApplyToLocalView, if we're applying a mutation to a\n  // remote document the server has accepted the mutation so the precondition\n  // must have held.\n  const newData = mutation.value.clone();\n  const transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();\n}\nfunction setMutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // The mutation failed to apply (e.g. a document ID created with add()\n    // caused a name collision).\n    return previousMask;\n  }\n  const newData = mutation.value.clone();\n  const transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(document.version, newData).setHasLocalMutations();\n  return null; // SetMutation overwrites all fields.\n}\n/**\r\n * A mutation that modifies fields of the document at the given key with the\r\n * given values. The values are applied through a field mask:\r\n *\r\n *  * When a field is in both the mask and the values, the corresponding field\r\n *    is updated.\r\n *  * When a field is in neither the mask nor the values, the corresponding\r\n *    field is unmodified.\r\n *  * When a field is in the mask but not in the values, the corresponding field\r\n *    is deleted.\r\n *  * When a field is not in the mask but is in the values, the values map is\r\n *    ignored.\r\n */\nclass PatchMutation extends Mutation {\n  constructor(key, data, fieldMask, precondition, fieldTransforms = []) {\n    super();\n    this.key = key;\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.precondition = precondition;\n    this.fieldTransforms = fieldTransforms;\n    this.type = 1 /* MutationType.Patch */;\n  }\n  getFieldMask() {\n    return this.fieldMask;\n  }\n}\nfunction patchMutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    // Since the mutation was not rejected, we know that the precondition\n    // matched on the backend. We therefore must not have the expected version\n    // of the document in our cache and convert to an UnknownDocument with a\n    // known updateTime.\n    document.convertToUnknownDocument(mutationResult.version);\n    return;\n  }\n  const transformResults = serverTransformResults(mutation.fieldTransforms, document, mutationResult.transformResults);\n  const newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();\n}\nfunction patchMutationApplyToLocalView(mutation, document, previousMask, localWriteTime) {\n  if (!preconditionIsValidForDocument(mutation.precondition, document)) {\n    return previousMask;\n  }\n  const transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document);\n  const newData = document.data;\n  newData.setAll(getPatch(mutation));\n  newData.setAll(transformResults);\n  document.convertToFoundDocument(document.version, newData).setHasLocalMutations();\n  if (previousMask === null) {\n    return null;\n  }\n  return previousMask.unionWith(mutation.fieldMask.fields).unionWith(mutation.fieldTransforms.map(transform => transform.field));\n}\n/**\r\n * Returns a FieldPath/Value map with the content of the PatchMutation.\r\n */\nfunction getPatch(mutation) {\n  const result = new Map();\n  mutation.fieldMask.fields.forEach(fieldPath => {\n    if (!fieldPath.isEmpty()) {\n      const newValue = mutation.data.field(fieldPath);\n      result.set(fieldPath, newValue);\n    }\n  });\n  return result;\n}\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use after a mutation\r\n * containing transforms has been acknowledged by the server.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param mutableDocument - The current state of the document after applying all\r\n * previous mutations.\r\n * @param serverTransformResults - The transform results received by the server.\r\n * @returns The transform results list.\r\n */\nfunction serverTransformResults(fieldTransforms, mutableDocument, serverTransformResults) {\n  const transformResults = new Map();\n  hardAssert(fieldTransforms.length === serverTransformResults.length);\n  for (let i = 0; i < serverTransformResults.length; i++) {\n    const fieldTransform = fieldTransforms[i];\n    const transform = fieldTransform.transform;\n    const previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(fieldTransform.field, applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults[i]));\n  }\n  return transformResults;\n}\n/**\r\n * Creates a list of \"transform results\" (a transform result is a field value\r\n * representing the result of applying a transform) for use when applying a\r\n * transform locally.\r\n *\r\n * @param fieldTransforms - The field transforms to apply the result to.\r\n * @param localWriteTime - The local time of the mutation (used to\r\n *     generate ServerTimestampValues).\r\n * @param mutableDocument - The document to apply transforms on.\r\n * @returns The transform results list.\r\n */\nfunction localTransformResults(fieldTransforms, localWriteTime, mutableDocument) {\n  const transformResults = new Map();\n  for (const fieldTransform of fieldTransforms) {\n    const transform = fieldTransform.transform;\n    const previousValue = mutableDocument.data.field(fieldTransform.field);\n    transformResults.set(fieldTransform.field, applyTransformOperationToLocalView(transform, previousValue, localWriteTime));\n  }\n  return transformResults;\n}\n/** A mutation that deletes the document at the given key. */\nclass DeleteMutation extends Mutation {\n  constructor(key, precondition) {\n    super();\n    this.key = key;\n    this.precondition = precondition;\n    this.type = 2 /* MutationType.Delete */;\n    this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\nfunction deleteMutationApplyToRemoteDocument(mutation, document, mutationResult) {\n  // Unlike applyToLocalView, if we're applying a mutation to a remote\n  // document the server has accepted the mutation so the precondition must\n  // have held.\n  document.convertToNoDocument(mutationResult.version).setHasCommittedMutations();\n}\nfunction deleteMutationApplyToLocalView(mutation, document, previousMask) {\n  if (preconditionIsValidForDocument(mutation.precondition, document)) {\n    document.convertToNoDocument(document.version).setHasLocalMutations();\n    return null;\n  }\n  return previousMask;\n}\n/**\r\n * A mutation that verifies the existence of the document at the given key with\r\n * the provided precondition.\r\n *\r\n * The `verify` operation is only used in Transactions, and this class serves\r\n * primarily to facilitate serialization into protos.\r\n */\nclass VerifyMutation extends Mutation {\n  constructor(key, precondition) {\n    super();\n    this.key = key;\n    this.precondition = precondition;\n    this.type = 3 /* MutationType.Verify */;\n    this.fieldTransforms = [];\n  }\n  getFieldMask() {\n    return null;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A batch of mutations that will be sent as one unit to the backend.\r\n */\nclass MutationBatch {\n  /**\r\n   * @param batchId - The unique ID of this mutation batch.\r\n   * @param localWriteTime - The original write time of this mutation.\r\n   * @param baseMutations - Mutations that are used to populate the base\r\n   * values when this mutation is applied locally. This can be used to locally\r\n   * overwrite values that are persisted in the remote document cache. Base\r\n   * mutations are never sent to the backend.\r\n   * @param mutations - The user-provided mutations in this mutation batch.\r\n   * User-provided mutations are applied both locally and remotely on the\r\n   * backend.\r\n   */\n  constructor(batchId, localWriteTime, baseMutations, mutations) {\n    this.batchId = batchId;\n    this.localWriteTime = localWriteTime;\n    this.baseMutations = baseMutations;\n    this.mutations = mutations;\n  }\n  /**\r\n   * Applies all the mutations in this MutationBatch to the specified document\r\n   * to compute the state of the remote document\r\n   *\r\n   * @param document - The document to apply mutations to.\r\n   * @param batchResult - The result of applying the MutationBatch to the\r\n   * backend.\r\n   */\n  applyToRemoteDocument(document, batchResult) {\n    const mutationResults = batchResult.mutationResults;\n    for (let i = 0; i < this.mutations.length; i++) {\n      const mutation = this.mutations[i];\n      if (mutation.key.isEqual(document.key)) {\n        const mutationResult = mutationResults[i];\n        mutationApplyToRemoteDocument(mutation, document, mutationResult);\n      }\n    }\n  }\n  /**\r\n   * Computes the local view of a document given all the mutations in this\r\n   * batch.\r\n   *\r\n   * @param document - The document to apply mutations to.\r\n   * @param mutatedFields - Fields that have been updated before applying this mutation batch.\r\n   * @returns A `FieldMask` representing all the fields that are mutated.\r\n   */\n  applyToLocalView(document, mutatedFields) {\n    // First, apply the base state. This allows us to apply non-idempotent\n    // transform against a consistent set of values.\n    for (const mutation of this.baseMutations) {\n      if (mutation.key.isEqual(document.key)) {\n        mutatedFields = mutationApplyToLocalView(mutation, document, mutatedFields, this.localWriteTime);\n      }\n    }\n    // Second, apply all user-provided mutations.\n    for (const mutation of this.mutations) {\n      if (mutation.key.isEqual(document.key)) {\n        mutatedFields = mutationApplyToLocalView(mutation, document, mutatedFields, this.localWriteTime);\n      }\n    }\n    return mutatedFields;\n  }\n  /**\r\n   * Computes the local view for all provided documents given the mutations in\r\n   * this batch. Returns a `DocumentKey` to `Mutation` map which can be used to\r\n   * replace all the mutation applications.\r\n   */\n  applyToLocalDocumentSet(documentMap, documentsWithoutRemoteVersion) {\n    // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations\n    // directly (as done in `applyToLocalView()`), we can reduce the complexity\n    // to O(n).\n    const overlays = newMutationMap();\n    this.mutations.forEach(m => {\n      const overlayedDocument = documentMap.get(m.key);\n      // TODO(mutabledocuments): This method should take a MutableDocumentMap\n      // and we should remove this cast.\n      const mutableDocument = overlayedDocument.overlayedDocument;\n      let mutatedFields = this.applyToLocalView(mutableDocument, overlayedDocument.mutatedFields);\n      // Set mutatedFields to null if the document is only from local mutations.\n      // This creates a Set or Delete mutation, instead of trying to create a\n      // patch mutation as the overlay.\n      mutatedFields = documentsWithoutRemoteVersion.has(m.key) ? null : mutatedFields;\n      const overlay = calculateOverlayMutation(mutableDocument, mutatedFields);\n      if (overlay !== null) {\n        overlays.set(m.key, overlay);\n      }\n      if (!mutableDocument.isValidDocument()) {\n        mutableDocument.convertToNoDocument(SnapshotVersion.min());\n      }\n    });\n    return overlays;\n  }\n  keys() {\n    return this.mutations.reduce((keys, m) => keys.add(m.key), documentKeySet());\n  }\n  isEqual(other) {\n    return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations, (l, r) => mutationEquals(l, r)) && arrayEquals(this.baseMutations, other.baseMutations, (l, r) => mutationEquals(l, r));\n  }\n}\n/** The result of applying a mutation batch to the backend. */\nclass MutationBatchResult {\n  constructor(batch, commitVersion, mutationResults,\n  /**\r\n   * A pre-computed mapping from each mutated document to the resulting\r\n   * version.\r\n   */\n  docVersions) {\n    this.batch = batch;\n    this.commitVersion = commitVersion;\n    this.mutationResults = mutationResults;\n    this.docVersions = docVersions;\n  }\n  /**\r\n   * Creates a new MutationBatchResult for the given batch and results. There\r\n   * must be one result for each mutation in the batch. This static factory\r\n   * caches a document=&gt;version mapping (docVersions).\r\n   */\n  static from(batch, commitVersion, results) {\n    hardAssert(batch.mutations.length === results.length);\n    let versionMap = documentVersionMap();\n    const mutations = batch.mutations;\n    for (let i = 0; i < mutations.length; i++) {\n      versionMap = versionMap.insert(mutations[i].key, results[i].version);\n    }\n    return new MutationBatchResult(batch, commitVersion, results, versionMap);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Representation of an overlay computed by Firestore.\r\n *\r\n * Holds information about a mutation and the largest batch id in Firestore when\r\n * the mutation was created.\r\n */\nclass Overlay {\n  constructor(largestBatchId, mutation) {\n    this.largestBatchId = largestBatchId;\n    this.mutation = mutation;\n  }\n  getKey() {\n    return this.mutation.key;\n  }\n  isEqual(other) {\n    return other !== null && this.mutation === other.mutation;\n  }\n  toString() {\n    return `Overlay{\n      largestBatchId: ${this.largestBatchId},\n      mutation: ${this.mutation.toString()}\n    }`;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass ExistenceFilter {\n  constructor(count, unchangedNames) {\n    this.count = count;\n    this.unchangedNames = unchangedNames;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Error Codes describing the different ways GRPC can fail. These are copied\r\n * directly from GRPC's sources here:\r\n *\r\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\r\n *\r\n * Important! The names of these identifiers matter because the string forms\r\n * are used for reverse lookups from the webchannel stream. Do NOT change the\r\n * names of these identifiers or change this into a const enum.\r\n */\nvar RpcCode;\n(function (RpcCode) {\n  RpcCode[RpcCode[\"OK\"] = 0] = \"OK\";\n  RpcCode[RpcCode[\"CANCELLED\"] = 1] = \"CANCELLED\";\n  RpcCode[RpcCode[\"UNKNOWN\"] = 2] = \"UNKNOWN\";\n  RpcCode[RpcCode[\"INVALID_ARGUMENT\"] = 3] = \"INVALID_ARGUMENT\";\n  RpcCode[RpcCode[\"DEADLINE_EXCEEDED\"] = 4] = \"DEADLINE_EXCEEDED\";\n  RpcCode[RpcCode[\"NOT_FOUND\"] = 5] = \"NOT_FOUND\";\n  RpcCode[RpcCode[\"ALREADY_EXISTS\"] = 6] = \"ALREADY_EXISTS\";\n  RpcCode[RpcCode[\"PERMISSION_DENIED\"] = 7] = \"PERMISSION_DENIED\";\n  RpcCode[RpcCode[\"UNAUTHENTICATED\"] = 16] = \"UNAUTHENTICATED\";\n  RpcCode[RpcCode[\"RESOURCE_EXHAUSTED\"] = 8] = \"RESOURCE_EXHAUSTED\";\n  RpcCode[RpcCode[\"FAILED_PRECONDITION\"] = 9] = \"FAILED_PRECONDITION\";\n  RpcCode[RpcCode[\"ABORTED\"] = 10] = \"ABORTED\";\n  RpcCode[RpcCode[\"OUT_OF_RANGE\"] = 11] = \"OUT_OF_RANGE\";\n  RpcCode[RpcCode[\"UNIMPLEMENTED\"] = 12] = \"UNIMPLEMENTED\";\n  RpcCode[RpcCode[\"INTERNAL\"] = 13] = \"INTERNAL\";\n  RpcCode[RpcCode[\"UNAVAILABLE\"] = 14] = \"UNAVAILABLE\";\n  RpcCode[RpcCode[\"DATA_LOSS\"] = 15] = \"DATA_LOSS\";\n})(RpcCode || (RpcCode = {}));\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a non-write operation.\r\n *\r\n * See isPermanentWriteError for classifying write errors.\r\n */\nfunction isPermanentError(code) {\n  switch (code) {\n    case Code.OK:\n      return fail();\n    case Code.CANCELLED:\n    case Code.UNKNOWN:\n    case Code.DEADLINE_EXCEEDED:\n    case Code.RESOURCE_EXHAUSTED:\n    case Code.INTERNAL:\n    case Code.UNAVAILABLE:\n    // Unauthenticated means something went wrong with our token and we need\n    // to retry with new credentials which will happen automatically.\n    case Code.UNAUTHENTICATED:\n      return false;\n    case Code.INVALID_ARGUMENT:\n    case Code.NOT_FOUND:\n    case Code.ALREADY_EXISTS:\n    case Code.PERMISSION_DENIED:\n    case Code.FAILED_PRECONDITION:\n    // Aborted might be retried in some scenarios, but that is dependent on\n    // the context and should handled individually by the calling code.\n    // See https://cloud.google.com/apis/design/errors.\n    case Code.ABORTED:\n    case Code.OUT_OF_RANGE:\n    case Code.UNIMPLEMENTED:\n    case Code.DATA_LOSS:\n      return true;\n    default:\n      return fail();\n  }\n}\n/**\r\n * Determines whether an error code represents a permanent error when received\r\n * in response to a write operation.\r\n *\r\n * Write operations must be handled specially because as of b/119437764, ABORTED\r\n * errors on the write stream should be retried too (even though ABORTED errors\r\n * are not generally retryable).\r\n *\r\n * Note that during the initial handshake on the write stream an ABORTED error\r\n * signals that we should discard our stream token (i.e. it is permanent). This\r\n * means a handshake error should be classified with isPermanentError, above.\r\n */\nfunction isPermanentWriteError(code) {\n  return isPermanentError(code) && code !== Code.ABORTED;\n}\n/**\r\n * Maps an error Code from GRPC status code number, like 0, 1, or 14. These\r\n * are not the same as HTTP status codes.\r\n *\r\n * @returns The Code equivalent to the given GRPC status code. Fails if there\r\n *     is no match.\r\n */\nfunction mapCodeFromRpcCode(code) {\n  if (code === undefined) {\n    // This shouldn't normally happen, but in certain error cases (like trying\n    // to send invalid proto messages) we may get an error with no GRPC code.\n    logError('GRPC error has no .code');\n    return Code.UNKNOWN;\n  }\n  switch (code) {\n    case RpcCode.OK:\n      return Code.OK;\n    case RpcCode.CANCELLED:\n      return Code.CANCELLED;\n    case RpcCode.UNKNOWN:\n      return Code.UNKNOWN;\n    case RpcCode.DEADLINE_EXCEEDED:\n      return Code.DEADLINE_EXCEEDED;\n    case RpcCode.RESOURCE_EXHAUSTED:\n      return Code.RESOURCE_EXHAUSTED;\n    case RpcCode.INTERNAL:\n      return Code.INTERNAL;\n    case RpcCode.UNAVAILABLE:\n      return Code.UNAVAILABLE;\n    case RpcCode.UNAUTHENTICATED:\n      return Code.UNAUTHENTICATED;\n    case RpcCode.INVALID_ARGUMENT:\n      return Code.INVALID_ARGUMENT;\n    case RpcCode.NOT_FOUND:\n      return Code.NOT_FOUND;\n    case RpcCode.ALREADY_EXISTS:\n      return Code.ALREADY_EXISTS;\n    case RpcCode.PERMISSION_DENIED:\n      return Code.PERMISSION_DENIED;\n    case RpcCode.FAILED_PRECONDITION:\n      return Code.FAILED_PRECONDITION;\n    case RpcCode.ABORTED:\n      return Code.ABORTED;\n    case RpcCode.OUT_OF_RANGE:\n      return Code.OUT_OF_RANGE;\n    case RpcCode.UNIMPLEMENTED:\n      return Code.UNIMPLEMENTED;\n    case RpcCode.DATA_LOSS:\n      return Code.DATA_LOSS;\n    default:\n      return fail();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An error encountered while decoding base64 string.\r\n */\nclass Base64DecodeError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'Base64DecodeError';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The global, singleton instance of TestingHooksSpi.\r\n *\r\n * This variable will be `null` in all cases _except_ when running from\r\n * integration tests that have registered callbacks to be notified of events\r\n * that happen during the test execution.\r\n */\nlet testingHooksSpi = null;\n/**\r\n * Sets the value of the `testingHooksSpi` object.\r\n * @param instance the instance to set.\r\n */\nfunction setTestingHooksSpi(instance) {\n  if (testingHooksSpi) {\n    throw new Error('a TestingHooksSpi instance is already set');\n  }\n  testingHooksSpi = instance;\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An instance of the Platform's 'TextEncoder' implementation.\r\n */\nfunction newTextEncoder() {\n  return new TextEncoder();\n}\n/**\r\n * An instance of the Platform's 'TextDecoder' implementation.\r\n */\nfunction newTextDecoder() {\n  return new TextDecoder('utf-8');\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst MAX_64_BIT_UNSIGNED_INTEGER = new Integer([0xffffffff, 0xffffffff], 0);\n// Hash a string using md5 hashing algorithm.\nfunction getMd5HashValue(value) {\n  const encodedValue = newTextEncoder().encode(value);\n  const md5 = new Md5();\n  md5.update(encodedValue);\n  return new Uint8Array(md5.digest());\n}\n// Interpret the 16 bytes array as two 64-bit unsigned integers, encoded using\n// 2’s complement using little endian.\nfunction get64BitUints(Bytes) {\n  const dataView = new DataView(Bytes.buffer);\n  const chunk1 = dataView.getUint32(0, /* littleEndian= */true);\n  const chunk2 = dataView.getUint32(4, /* littleEndian= */true);\n  const chunk3 = dataView.getUint32(8, /* littleEndian= */true);\n  const chunk4 = dataView.getUint32(12, /* littleEndian= */true);\n  const integer1 = new Integer([chunk1, chunk2], 0);\n  const integer2 = new Integer([chunk3, chunk4], 0);\n  return [integer1, integer2];\n}\nclass BloomFilter {\n  constructor(bitmap, padding, hashCount) {\n    this.bitmap = bitmap;\n    this.padding = padding;\n    this.hashCount = hashCount;\n    if (padding < 0 || padding >= 8) {\n      throw new BloomFilterError(`Invalid padding: ${padding}`);\n    }\n    if (hashCount < 0) {\n      throw new BloomFilterError(`Invalid hash count: ${hashCount}`);\n    }\n    if (bitmap.length > 0 && this.hashCount === 0) {\n      // Only empty bloom filter can have 0 hash count.\n      throw new BloomFilterError(`Invalid hash count: ${hashCount}`);\n    }\n    if (bitmap.length === 0 && padding !== 0) {\n      // Empty bloom filter should have 0 padding.\n      throw new BloomFilterError(`Invalid padding when bitmap length is 0: ${padding}`);\n    }\n    this.bitCount = bitmap.length * 8 - padding;\n    // Set the bit count in Integer to avoid repetition in mightContain().\n    this.bitCountInInteger = Integer.fromNumber(this.bitCount);\n  }\n  // Calculate the ith hash value based on the hashed 64bit integers,\n  // and calculate its corresponding bit index in the bitmap to be checked.\n  getBitIndex(num1, num2, hashIndex) {\n    // Calculate hashed value h(i) = h1 + (i * h2).\n    let hashValue = num1.add(num2.multiply(Integer.fromNumber(hashIndex)));\n    // Wrap if hash value overflow 64bit.\n    if (hashValue.compare(MAX_64_BIT_UNSIGNED_INTEGER) === 1) {\n      hashValue = new Integer([hashValue.getBits(0), hashValue.getBits(1)], 0);\n    }\n    return hashValue.modulo(this.bitCountInInteger).toNumber();\n  }\n  // Return whether the bit on the given index in the bitmap is set to 1.\n  isBitSet(index) {\n    // To retrieve bit n, calculate: (bitmap[n / 8] & (0x01 << (n % 8))).\n    const byte = this.bitmap[Math.floor(index / 8)];\n    const offset = index % 8;\n    return (byte & 0x01 << offset) !== 0;\n  }\n  mightContain(value) {\n    // Empty bitmap should always return false on membership check.\n    if (this.bitCount === 0) {\n      return false;\n    }\n    const md5HashedValue = getMd5HashValue(value);\n    const [hash1, hash2] = get64BitUints(md5HashedValue);\n    for (let i = 0; i < this.hashCount; i++) {\n      const index = this.getBitIndex(hash1, hash2, i);\n      if (!this.isBitSet(index)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /** Create bloom filter for testing purposes only. */\n  static create(bitCount, hashCount, contains) {\n    const padding = bitCount % 8 === 0 ? 0 : 8 - bitCount % 8;\n    const bitmap = new Uint8Array(Math.ceil(bitCount / 8));\n    const bloomFilter = new BloomFilter(bitmap, padding, hashCount);\n    contains.forEach(item => bloomFilter.insert(item));\n    return bloomFilter;\n  }\n  insert(value) {\n    if (this.bitCount === 0) {\n      return;\n    }\n    const md5HashedValue = getMd5HashValue(value);\n    const [hash1, hash2] = get64BitUints(md5HashedValue);\n    for (let i = 0; i < this.hashCount; i++) {\n      const index = this.getBitIndex(hash1, hash2, i);\n      this.setBit(index);\n    }\n  }\n  setBit(index) {\n    const indexOfByte = Math.floor(index / 8);\n    const offset = index % 8;\n    this.bitmap[indexOfByte] |= 0x01 << offset;\n  }\n}\nclass BloomFilterError extends Error {\n  constructor() {\n    super(...arguments);\n    this.name = 'BloomFilterError';\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An event from the RemoteStore. It is split into targetChanges (changes to the\r\n * state or the set of documents in our watched targets) and documentUpdates\r\n * (changes to the actual documents).\r\n */\nclass RemoteEvent {\n  constructor(\n  /**\r\n   * The snapshot version this event brings us up to, or MIN if not set.\r\n   */\n  snapshotVersion,\n  /**\r\n   * A map from target to changes to the target. See TargetChange.\r\n   */\n  targetChanges,\n  /**\r\n   * A map of targets that is known to be inconsistent, and the purpose for\r\n   * re-listening. Listens for these targets should be re-established without\r\n   * resume tokens.\r\n   */\n  targetMismatches,\n  /**\r\n   * A set of which documents have changed or been deleted, along with the\r\n   * doc's new values (if not deleted).\r\n   */\n  documentUpdates,\n  /**\r\n   * A set of which document updates are due only to limbo resolution targets.\r\n   */\n  resolvedLimboDocuments) {\n    this.snapshotVersion = snapshotVersion;\n    this.targetChanges = targetChanges;\n    this.targetMismatches = targetMismatches;\n    this.documentUpdates = documentUpdates;\n    this.resolvedLimboDocuments = resolvedLimboDocuments;\n  }\n  /**\r\n   * HACK: Views require RemoteEvents in order to determine whether the view is\r\n   * CURRENT, but secondary tabs don't receive remote events. So this method is\r\n   * used to create a synthesized RemoteEvent that can be used to apply a\r\n   * CURRENT status change to a View, for queries executed in a different tab.\r\n   */\n  // PORTING NOTE: Multi-tab only\n  static createSynthesizedRemoteEventForCurrentChange(targetId, current, resumeToken) {\n    const targetChanges = new Map();\n    targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current, resumeToken));\n    return new RemoteEvent(SnapshotVersion.min(), targetChanges, new SortedMap(primitiveComparator), mutableDocumentMap(), documentKeySet());\n  }\n}\n/**\r\n * A TargetChange specifies the set of changes for a specific target as part of\r\n * a RemoteEvent. These changes track which documents are added, modified or\r\n * removed, as well as the target's resume token and whether the target is\r\n * marked CURRENT.\r\n * The actual changes *to* documents are not part of the TargetChange since\r\n * documents may be part of multiple targets.\r\n */\nclass TargetChange {\n  constructor(\n  /**\r\n   * An opaque, server-assigned token that allows watching a query to be resumed\r\n   * after disconnecting without retransmitting all the data that matches the\r\n   * query. The resume token essentially identifies a point in time from which\r\n   * the server should resume sending results.\r\n   */\n  resumeToken,\n  /**\r\n   * The \"current\" (synced) status of this target. Note that \"current\"\r\n   * has special meaning in the RPC protocol that implies that a target is\r\n   * both up-to-date and consistent with the rest of the watch stream.\r\n   */\n  current,\n  /**\r\n   * The set of documents that were newly assigned to this target as part of\r\n   * this remote event.\r\n   */\n  addedDocuments,\n  /**\r\n   * The set of documents that were already assigned to this target but received\r\n   * an update during this remote event.\r\n   */\n  modifiedDocuments,\n  /**\r\n   * The set of documents that were removed from this target as part of this\r\n   * remote event.\r\n   */\n  removedDocuments) {\n    this.resumeToken = resumeToken;\n    this.current = current;\n    this.addedDocuments = addedDocuments;\n    this.modifiedDocuments = modifiedDocuments;\n    this.removedDocuments = removedDocuments;\n  }\n  /**\r\n   * This method is used to create a synthesized TargetChanges that can be used to\r\n   * apply a CURRENT status change to a View (for queries executed in a different\r\n   * tab) or for new queries (to raise snapshots with correct CURRENT status).\r\n   */\n  static createSynthesizedTargetChangeForCurrentChange(targetId, current, resumeToken) {\n    return new TargetChange(resumeToken, current, documentKeySet(), documentKeySet(), documentKeySet());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a changed document and a list of target ids to which this change\r\n * applies.\r\n *\r\n * If document has been deleted NoDocument will be provided.\r\n */\nclass DocumentWatchChange {\n  constructor( /** The new document applies to all of these targets. */\n  updatedTargetIds, /** The new document is removed from all of these targets. */\n  removedTargetIds, /** The key of the document for this change. */\n  key,\n  /**\r\n   * The new document or NoDocument if it was deleted. Is null if the\r\n   * document went out of view without the server sending a new document.\r\n   */\n  newDoc) {\n    this.updatedTargetIds = updatedTargetIds;\n    this.removedTargetIds = removedTargetIds;\n    this.key = key;\n    this.newDoc = newDoc;\n  }\n}\nclass ExistenceFilterChange {\n  constructor(targetId, existenceFilter) {\n    this.targetId = targetId;\n    this.existenceFilter = existenceFilter;\n  }\n}\nclass WatchTargetChange {\n  constructor( /** What kind of change occurred to the watch target. */\n  state, /** The target IDs that were added/removed/set. */\n  targetIds,\n  /**\r\n   * An opaque, server-assigned token that allows watching a target to be\r\n   * resumed after disconnecting without retransmitting all the data that\r\n   * matches the target. The resume token essentially identifies a point in\r\n   * time from which the server should resume sending results.\r\n   */\n  resumeToken = ByteString.EMPTY_BYTE_STRING, /** An RPC error indicating why the watch failed. */\n  cause = null) {\n    this.state = state;\n    this.targetIds = targetIds;\n    this.resumeToken = resumeToken;\n    this.cause = cause;\n  }\n}\n/** Tracks the internal state of a Watch target. */\nclass TargetState {\n  constructor() {\n    /**\r\n     * The number of pending responses (adds or removes) that we are waiting on.\r\n     * We only consider targets active that have no pending responses.\r\n     */\n    this.pendingResponses = 0;\n    /**\r\n     * Keeps track of the document changes since the last raised snapshot.\r\n     *\r\n     * These changes are continuously updated as we receive document updates and\r\n     * always reflect the current set of changes against the last issued snapshot.\r\n     */\n    this.documentChanges = snapshotChangesMap();\n    /** See public getters for explanations of these fields. */\n    this._resumeToken = ByteString.EMPTY_BYTE_STRING;\n    this._current = false;\n    /**\r\n     * Whether this target state should be included in the next snapshot. We\r\n     * initialize to true so that newly-added targets are included in the next\r\n     * RemoteEvent.\r\n     */\n    this._hasPendingChanges = true;\n  }\n  /**\r\n   * Whether this target has been marked 'current'.\r\n   *\r\n   * 'Current' has special meaning in the RPC protocol: It implies that the\r\n   * Watch backend has sent us all changes up to the point at which the target\r\n   * was added and that the target is consistent with the rest of the watch\r\n   * stream.\r\n   */\n  get current() {\n    return this._current;\n  }\n  /** The last resume token sent to us for this target. */\n  get resumeToken() {\n    return this._resumeToken;\n  }\n  /** Whether this target has pending target adds or target removes. */\n  get isPending() {\n    return this.pendingResponses !== 0;\n  }\n  /** Whether we have modified any state that should trigger a snapshot. */\n  get hasPendingChanges() {\n    return this._hasPendingChanges;\n  }\n  /**\r\n   * Applies the resume token to the TargetChange, but only when it has a new\r\n   * value. Empty resumeTokens are discarded.\r\n   */\n  updateResumeToken(resumeToken) {\n    if (resumeToken.approximateByteSize() > 0) {\n      this._hasPendingChanges = true;\n      this._resumeToken = resumeToken;\n    }\n  }\n  /**\r\n   * Creates a target change from the current set of changes.\r\n   *\r\n   * To reset the document changes after raising this snapshot, call\r\n   * `clearPendingChanges()`.\r\n   */\n  toTargetChange() {\n    let addedDocuments = documentKeySet();\n    let modifiedDocuments = documentKeySet();\n    let removedDocuments = documentKeySet();\n    this.documentChanges.forEach((key, changeType) => {\n      switch (changeType) {\n        case 0 /* ChangeType.Added */:\n          addedDocuments = addedDocuments.add(key);\n          break;\n        case 2 /* ChangeType.Modified */:\n          modifiedDocuments = modifiedDocuments.add(key);\n          break;\n        case 1 /* ChangeType.Removed */:\n          removedDocuments = removedDocuments.add(key);\n          break;\n        default:\n          fail();\n      }\n    });\n    return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);\n  }\n  /**\r\n   * Resets the document changes and sets `hasPendingChanges` to false.\r\n   */\n  clearPendingChanges() {\n    this._hasPendingChanges = false;\n    this.documentChanges = snapshotChangesMap();\n  }\n  addDocumentChange(key, changeType) {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.insert(key, changeType);\n  }\n  removeDocumentChange(key) {\n    this._hasPendingChanges = true;\n    this.documentChanges = this.documentChanges.remove(key);\n  }\n  recordPendingTargetRequest() {\n    this.pendingResponses += 1;\n  }\n  recordTargetResponse() {\n    this.pendingResponses -= 1;\n    hardAssert(this.pendingResponses >= 0);\n  }\n  markCurrent() {\n    this._hasPendingChanges = true;\n    this._current = true;\n  }\n}\nconst LOG_TAG$g = 'WatchChangeAggregator';\n/**\r\n * A helper class to accumulate watch changes into a RemoteEvent.\r\n */\nclass WatchChangeAggregator {\n  constructor(metadataProvider) {\n    this.metadataProvider = metadataProvider;\n    /** The internal state of all tracked targets. */\n    this.targetStates = new Map();\n    /** Keeps track of the documents to update since the last raised snapshot. */\n    this.pendingDocumentUpdates = mutableDocumentMap();\n    /** A mapping of document keys to their set of target IDs. */\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    /**\r\n     * A map of targets with existence filter mismatches. These targets are\r\n     * known to be inconsistent and their listens needs to be re-established by\r\n     * RemoteStore.\r\n     */\n    this.pendingTargetResets = new SortedMap(primitiveComparator);\n  }\n  /**\r\n   * Processes and adds the DocumentWatchChange to the current set of changes.\r\n   */\n  handleDocumentChange(docChange) {\n    for (const targetId of docChange.updatedTargetIds) {\n      if (docChange.newDoc && docChange.newDoc.isFoundDocument()) {\n        this.addDocumentToTarget(targetId, docChange.newDoc);\n      } else {\n        this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n      }\n    }\n    for (const targetId of docChange.removedTargetIds) {\n      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);\n    }\n  }\n  /** Processes and adds the WatchTargetChange to the current set of changes. */\n  handleTargetChange(targetChange) {\n    this.forEachTarget(targetChange, targetId => {\n      const targetState = this.ensureTargetState(targetId);\n      switch (targetChange.state) {\n        case 0 /* WatchTargetChangeState.NoChange */:\n          if (this.isActiveTarget(targetId)) {\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case 1 /* WatchTargetChangeState.Added */:\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            // We have a freshly added target, so we need to reset any state\n            // that we had previously. This can happen e.g. when remove and add\n            // back a target for existence filter mismatches.\n            targetState.clearPendingChanges();\n          }\n          targetState.updateResumeToken(targetChange.resumeToken);\n          break;\n        case 2 /* WatchTargetChangeState.Removed */:\n          // We need to keep track of removed targets to we can post-filter and\n          // remove any target changes.\n          // We need to decrement the number of pending acks needed from watch\n          // for this targetId.\n          targetState.recordTargetResponse();\n          if (!targetState.isPending) {\n            this.removeTarget(targetId);\n          }\n          break;\n        case 3 /* WatchTargetChangeState.Current */:\n          if (this.isActiveTarget(targetId)) {\n            targetState.markCurrent();\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        case 4 /* WatchTargetChangeState.Reset */:\n          if (this.isActiveTarget(targetId)) {\n            // Reset the target and synthesizes removes for all existing\n            // documents. The backend will re-add any documents that still\n            // match the target before it sends the next global snapshot.\n            this.resetTarget(targetId);\n            targetState.updateResumeToken(targetChange.resumeToken);\n          }\n          break;\n        default:\n          fail();\n      }\n    });\n  }\n  /**\r\n   * Iterates over all targetIds that the watch change applies to: either the\r\n   * targetIds explicitly listed in the change or the targetIds of all currently\r\n   * active targets.\r\n   */\n  forEachTarget(targetChange, fn) {\n    if (targetChange.targetIds.length > 0) {\n      targetChange.targetIds.forEach(fn);\n    } else {\n      this.targetStates.forEach((_, targetId) => {\n        if (this.isActiveTarget(targetId)) {\n          fn(targetId);\n        }\n      });\n    }\n  }\n  /**\r\n   * Handles existence filters and synthesizes deletes for filter mismatches.\r\n   * Targets that are invalidated by filter mismatches are added to\r\n   * `pendingTargetResets`.\r\n   */\n  handleExistenceFilter(watchChange) {\n    const targetId = watchChange.targetId;\n    const expectedCount = watchChange.existenceFilter.count;\n    const targetData = this.targetDataForActiveTarget(targetId);\n    if (targetData) {\n      const target = targetData.target;\n      if (targetIsDocumentTarget(target)) {\n        if (expectedCount === 0) {\n          // The existence filter told us the document does not exist. We deduce\n          // that this document does not exist and apply a deleted document to\n          // our updates. Without applying this deleted document there might be\n          // another query that will raise this document as part of a snapshot\n          // until it is resolved, essentially exposing inconsistency between\n          // queries.\n          const key = new DocumentKey(target.path);\n          this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, SnapshotVersion.min()));\n        } else {\n          hardAssert(expectedCount === 1);\n        }\n      } else {\n        const currentSize = this.getCurrentDocumentCountForTarget(targetId);\n        // Existence filter mismatch. Mark the documents as being in limbo, and\n        // raise a snapshot with `isFromCache:true`.\n        if (currentSize !== expectedCount) {\n          // Apply bloom filter to identify and mark removed documents.\n          const bloomFilter = this.parseBloomFilter(watchChange);\n          const status = bloomFilter ? this.applyBloomFilter(bloomFilter, watchChange, currentSize) : 1 /* BloomFilterApplicationStatus.Skipped */;\n          if (status !== 0 /* BloomFilterApplicationStatus.Success */) {\n            // If bloom filter application fails, we reset the mapping and\n            // trigger re-run of the query.\n            this.resetTarget(targetId);\n            const purpose = status === 2 /* BloomFilterApplicationStatus.FalsePositive */ ? \"TargetPurposeExistenceFilterMismatchBloom\" /* TargetPurpose.ExistenceFilterMismatchBloom */ : \"TargetPurposeExistenceFilterMismatch\" /* TargetPurpose.ExistenceFilterMismatch */;\n            this.pendingTargetResets = this.pendingTargetResets.insert(targetId, purpose);\n          }\n          testingHooksSpi === null || testingHooksSpi === void 0 ? void 0 : testingHooksSpi.notifyOnExistenceFilterMismatch(createExistenceFilterMismatchInfoForTestingHooks(currentSize, watchChange.existenceFilter, this.metadataProvider.getDatabaseId(), bloomFilter, status));\n        }\n      }\n    }\n  }\n  /**\r\n   * Parse the bloom filter from the \"unchanged_names\" field of an existence\r\n   * filter.\r\n   */\n  parseBloomFilter(watchChange) {\n    const unchangedNames = watchChange.existenceFilter.unchangedNames;\n    if (!unchangedNames || !unchangedNames.bits) {\n      return null;\n    }\n    const {\n      bits: {\n        bitmap = '',\n        padding = 0\n      },\n      hashCount = 0\n    } = unchangedNames;\n    let normalizedBitmap;\n    try {\n      normalizedBitmap = normalizeByteString(bitmap).toUint8Array();\n    } catch (err) {\n      if (err instanceof Base64DecodeError) {\n        logWarn('Decoding the base64 bloom filter in existence filter failed (' + err.message + '); ignoring the bloom filter and falling back to full re-query.');\n        return null;\n      } else {\n        throw err;\n      }\n    }\n    let bloomFilter;\n    try {\n      // BloomFilter throws error if the inputs are invalid.\n      bloomFilter = new BloomFilter(normalizedBitmap, padding, hashCount);\n    } catch (err) {\n      if (err instanceof BloomFilterError) {\n        logWarn('BloomFilter error: ', err);\n      } else {\n        logWarn('Applying bloom filter failed: ', err);\n      }\n      return null;\n    }\n    if (bloomFilter.bitCount === 0) {\n      return null;\n    }\n    return bloomFilter;\n  }\n  /**\r\n   * Apply bloom filter to remove the deleted documents, and return the\r\n   * application status.\r\n   */\n  applyBloomFilter(bloomFilter, watchChange, currentCount) {\n    const expectedCount = watchChange.existenceFilter.count;\n    const removedDocumentCount = this.filterRemovedDocuments(bloomFilter, watchChange.targetId);\n    return expectedCount === currentCount - removedDocumentCount ? 0 /* BloomFilterApplicationStatus.Success */ : 2 /* BloomFilterApplicationStatus.FalsePositive */;\n  }\n  /**\r\n   * Filter out removed documents based on bloom filter membership result and\r\n   * return number of documents removed.\r\n   */\n  filterRemovedDocuments(bloomFilter, targetId) {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    let removalCount = 0;\n    existingKeys.forEach(key => {\n      const databaseId = this.metadataProvider.getDatabaseId();\n      const documentPath = `projects/${databaseId.projectId}` + `/databases/${databaseId.database}` + `/documents/${key.path.canonicalString()}`;\n      if (!bloomFilter.mightContain(documentPath)) {\n        this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/null);\n        removalCount++;\n      }\n    });\n    return removalCount;\n  }\n  /**\r\n   * Converts the currently accumulated state into a remote event at the\r\n   * provided snapshot version. Resets the accumulated changes before returning.\r\n   */\n  createRemoteEvent(snapshotVersion) {\n    const targetChanges = new Map();\n    this.targetStates.forEach((targetState, targetId) => {\n      const targetData = this.targetDataForActiveTarget(targetId);\n      if (targetData) {\n        if (targetState.current && targetIsDocumentTarget(targetData.target)) {\n          // Document queries for document that don't exist can produce an empty\n          // result set. To update our local cache, we synthesize a document\n          // delete if we have not previously received the document. This\n          // resolves the limbo state of the document, removing it from\n          // limboDocumentRefs.\n          //\n          // TODO(dimond): Ideally we would have an explicit lookup target\n          // instead resulting in an explicit delete message and we could\n          // remove this special logic.\n          const key = new DocumentKey(targetData.target.path);\n          if (this.pendingDocumentUpdates.get(key) === null && !this.targetContainsDocument(targetId, key)) {\n            this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, snapshotVersion));\n          }\n        }\n        if (targetState.hasPendingChanges) {\n          targetChanges.set(targetId, targetState.toTargetChange());\n          targetState.clearPendingChanges();\n        }\n      }\n    });\n    let resolvedLimboDocuments = documentKeySet();\n    // We extract the set of limbo-only document updates as the GC logic\n    // special-cases documents that do not appear in the target cache.\n    //\n    // TODO(gsoltis): Expand on this comment once GC is available in the JS\n    // client.\n    this.pendingDocumentTargetMapping.forEach((key, targets) => {\n      let isOnlyLimboTarget = true;\n      targets.forEachWhile(targetId => {\n        const targetData = this.targetDataForActiveTarget(targetId);\n        if (targetData && targetData.purpose !== \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */) {\n          isOnlyLimboTarget = false;\n          return false;\n        }\n        return true;\n      });\n      if (isOnlyLimboTarget) {\n        resolvedLimboDocuments = resolvedLimboDocuments.add(key);\n      }\n    });\n    this.pendingDocumentUpdates.forEach((_, doc) => doc.setReadTime(snapshotVersion));\n    const remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);\n    this.pendingDocumentUpdates = mutableDocumentMap();\n    this.pendingDocumentTargetMapping = documentTargetMap();\n    this.pendingTargetResets = new SortedMap(primitiveComparator);\n    return remoteEvent;\n  }\n  /**\r\n   * Adds the provided document to the internal list of document updates and\r\n   * its document key to the given target's mapping.\r\n   */\n  // Visible for testing.\n  addDocumentToTarget(targetId, document) {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n    const changeType = this.targetContainsDocument(targetId, document.key) ? 2 /* ChangeType.Modified */ : 0 /* ChangeType.Added */;\n    const targetState = this.ensureTargetState(targetId);\n    targetState.addDocumentChange(document.key, changeType);\n    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));\n  }\n  /**\r\n   * Removes the provided document from the target mapping. If the\r\n   * document no longer matches the target, but the document's state is still\r\n   * known (e.g. we know that the document was deleted or we received the change\r\n   * that caused the filter mismatch), the new document can be provided\r\n   * to update the remote document cache.\r\n   */\n  // Visible for testing.\n  removeDocumentFromTarget(targetId, key, updatedDocument) {\n    if (!this.isActiveTarget(targetId)) {\n      return;\n    }\n    const targetState = this.ensureTargetState(targetId);\n    if (this.targetContainsDocument(targetId, key)) {\n      targetState.addDocumentChange(key, 1 /* ChangeType.Removed */);\n    } else {\n      // The document may have entered and left the target before we raised a\n      // snapshot, so we can just ignore the change.\n      targetState.removeDocumentChange(key);\n    }\n    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));\n    if (updatedDocument) {\n      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);\n    }\n  }\n  removeTarget(targetId) {\n    this.targetStates.delete(targetId);\n  }\n  /**\r\n   * Returns the current count of documents in the target. This includes both\r\n   * the number of documents that the LocalStore considers to be part of the\r\n   * target as well as any accumulated changes.\r\n   */\n  getCurrentDocumentCountForTarget(targetId) {\n    const targetState = this.ensureTargetState(targetId);\n    const targetChange = targetState.toTargetChange();\n    return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;\n  }\n  /**\r\n   * Increment the number of acks needed from watch before we can consider the\r\n   * server to be 'in-sync' with the client's active targets.\r\n   */\n  recordPendingTargetRequest(targetId) {\n    // For each request we get we need to record we need a response for it.\n    const targetState = this.ensureTargetState(targetId);\n    targetState.recordPendingTargetRequest();\n  }\n  ensureTargetState(targetId) {\n    let result = this.targetStates.get(targetId);\n    if (!result) {\n      result = new TargetState();\n      this.targetStates.set(targetId, result);\n    }\n    return result;\n  }\n  ensureDocumentTargetMapping(key) {\n    let targetMapping = this.pendingDocumentTargetMapping.get(key);\n    if (!targetMapping) {\n      targetMapping = new SortedSet(primitiveComparator);\n      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);\n    }\n    return targetMapping;\n  }\n  /**\r\n   * Verifies that the user is still interested in this target (by calling\r\n   * `getTargetDataForTarget()`) and that we are not waiting for pending ADDs\r\n   * from watch.\r\n   */\n  isActiveTarget(targetId) {\n    const targetActive = this.targetDataForActiveTarget(targetId) !== null;\n    if (!targetActive) {\n      logDebug(LOG_TAG$g, 'Detected inactive target', targetId);\n    }\n    return targetActive;\n  }\n  /**\r\n   * Returns the TargetData for an active target (i.e. a target that the user\r\n   * is still interested in that has no outstanding target change requests).\r\n   */\n  targetDataForActiveTarget(targetId) {\n    const targetState = this.targetStates.get(targetId);\n    return targetState && targetState.isPending ? null : this.metadataProvider.getTargetDataForTarget(targetId);\n  }\n  /**\r\n   * Resets the state of a Watch target to its initial state (e.g. sets\r\n   * 'current' to false, clears the resume token and removes its target mapping\r\n   * from all documents).\r\n   */\n  resetTarget(targetId) {\n    this.targetStates.set(targetId, new TargetState());\n    // Trigger removal for any documents currently mapped to this target.\n    // These removals will be part of the initial snapshot if Watch does not\n    // resend these documents.\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    existingKeys.forEach(key => {\n      this.removeDocumentFromTarget(targetId, key, /*updatedDocument=*/null);\n    });\n  }\n  /**\r\n   * Returns whether the LocalStore considers the document to be part of the\r\n   * specified target.\r\n   */\n  targetContainsDocument(targetId, key) {\n    const existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);\n    return existingKeys.has(key);\n  }\n}\nfunction documentTargetMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\nfunction snapshotChangesMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\nfunction createExistenceFilterMismatchInfoForTestingHooks(localCacheCount, existenceFilter, databaseId, bloomFilter, bloomFilterStatus) {\n  var _a, _b, _c, _d, _e, _f;\n  const result = {\n    localCacheCount,\n    existenceFilterCount: existenceFilter.count,\n    databaseId: databaseId.database,\n    projectId: databaseId.projectId\n  };\n  const unchangedNames = existenceFilter.unchangedNames;\n  if (unchangedNames) {\n    result.bloomFilter = {\n      applied: bloomFilterStatus === 0 /* BloomFilterApplicationStatus.Success */,\n      hashCount: (_a = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.hashCount) !== null && _a !== void 0 ? _a : 0,\n      bitmapLength: (_d = (_c = (_b = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.bits) === null || _b === void 0 ? void 0 : _b.bitmap) === null || _c === void 0 ? void 0 : _c.length) !== null && _d !== void 0 ? _d : 0,\n      padding: (_f = (_e = unchangedNames === null || unchangedNames === void 0 ? void 0 : unchangedNames.bits) === null || _e === void 0 ? void 0 : _e.padding) !== null && _f !== void 0 ? _f : 0,\n      mightContain: value => {\n        var _a;\n        return (_a = bloomFilter === null || bloomFilter === void 0 ? void 0 : bloomFilter.mightContain(value)) !== null && _a !== void 0 ? _a : false;\n      }\n    };\n  }\n  return result;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DIRECTIONS = (() => {\n  const dirs = {};\n  dirs[\"asc\" /* Direction.ASCENDING */] = 'ASCENDING';\n  dirs[\"desc\" /* Direction.DESCENDING */] = 'DESCENDING';\n  return dirs;\n})();\nconst OPERATORS = (() => {\n  const ops = {};\n  ops[\"<\" /* Operator.LESS_THAN */] = 'LESS_THAN';\n  ops[\"<=\" /* Operator.LESS_THAN_OR_EQUAL */] = 'LESS_THAN_OR_EQUAL';\n  ops[\">\" /* Operator.GREATER_THAN */] = 'GREATER_THAN';\n  ops[\">=\" /* Operator.GREATER_THAN_OR_EQUAL */] = 'GREATER_THAN_OR_EQUAL';\n  ops[\"==\" /* Operator.EQUAL */] = 'EQUAL';\n  ops[\"!=\" /* Operator.NOT_EQUAL */] = 'NOT_EQUAL';\n  ops[\"array-contains\" /* Operator.ARRAY_CONTAINS */] = 'ARRAY_CONTAINS';\n  ops[\"in\" /* Operator.IN */] = 'IN';\n  ops[\"not-in\" /* Operator.NOT_IN */] = 'NOT_IN';\n  ops[\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */] = 'ARRAY_CONTAINS_ANY';\n  return ops;\n})();\nconst COMPOSITE_OPERATORS = (() => {\n  const ops = {};\n  ops[\"and\" /* CompositeOperator.AND */] = 'AND';\n  ops[\"or\" /* CompositeOperator.OR */] = 'OR';\n  return ops;\n})();\nfunction assertPresent(value, description) {}\n/**\r\n * This class generates JsonObject values for the Datastore API suitable for\r\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\r\n *\r\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\r\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\r\n * format.\r\n *\r\n * For a description of the Proto3 JSON format check\r\n * https://developers.google.com/protocol-buffers/docs/proto3#json\r\n *\r\n * TODO(klimt): We can remove the databaseId argument if we keep the full\r\n * resource name in documents.\r\n */\nclass JsonProtoSerializer {\n  constructor(databaseId, useProto3Json) {\n    this.databaseId = databaseId;\n    this.useProto3Json = useProto3Json;\n  }\n}\nfunction fromRpcStatus(status) {\n  const code = status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);\n  return new FirestoreError(code, status.message || '');\n}\n/**\r\n * Returns a value for a number (or null) that's appropriate to put into\r\n * a google.protobuf.Int32Value proto.\r\n * DO NOT USE THIS FOR ANYTHING ELSE.\r\n * This method cheats. It's typed as returning \"number\" because that's what\r\n * our generated proto interfaces say Int32Value must be. But GRPC actually\r\n * expects a { value: <number> } struct.\r\n */\nfunction toInt32Proto(serializer, val) {\n  if (serializer.useProto3Json || isNullOrUndefined(val)) {\n    return val;\n  } else {\n    return {\n      value: val\n    };\n  }\n}\n/**\r\n * Returns a number (or null) from a google.protobuf.Int32Value proto.\r\n */\nfunction fromInt32Proto(val) {\n  let result;\n  if (typeof val === 'object') {\n    result = val.value;\n  } else {\n    result = val;\n  }\n  return isNullOrUndefined(result) ? null : result;\n}\n/**\r\n * Returns a value for a Date that's appropriate to put into a proto.\r\n */\nfunction toTimestamp(serializer, timestamp) {\n  if (serializer.useProto3Json) {\n    // Serialize to ISO-8601 date format, but with full nano resolution.\n    // Since JS Date has only millis, let's only use it for the seconds and\n    // then manually add the fractions to the end.\n    const jsDateStr = new Date(timestamp.seconds * 1000).toISOString();\n    // Remove .xxx frac part and Z in the end.\n    const strUntilSeconds = jsDateStr.replace(/\\.\\d*/, '').replace('Z', '');\n    // Pad the fraction out to 9 digits (nanos).\n    const nanoStr = ('000000000' + timestamp.nanoseconds).slice(-9);\n    return `${strUntilSeconds}.${nanoStr}Z`;\n  } else {\n    return {\n      seconds: '' + timestamp.seconds,\n      nanos: timestamp.nanoseconds\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    };\n  }\n}\nfunction fromTimestamp(date) {\n  const timestamp = normalizeTimestamp(date);\n  return new Timestamp(timestamp.seconds, timestamp.nanos);\n}\n/**\r\n * Returns a value for bytes that's appropriate to put in a proto.\r\n *\r\n * Visible for testing.\r\n */\nfunction toBytes(serializer, bytes) {\n  if (serializer.useProto3Json) {\n    return bytes.toBase64();\n  } else {\n    return bytes.toUint8Array();\n  }\n}\n/**\r\n * Returns a ByteString based on the proto string value.\r\n */\nfunction fromBytes(serializer, value) {\n  if (serializer.useProto3Json) {\n    hardAssert(value === undefined || typeof value === 'string');\n    return ByteString.fromBase64String(value ? value : '');\n  } else {\n    hardAssert(value === undefined ||\n    // Check if the value is an instance of both Buffer and Uint8Array,\n    // despite the fact that Buffer extends Uint8Array. In some\n    // environments, such as jsdom, the prototype chain of Buffer\n    // does not indicate that it extends Uint8Array.\n    value instanceof Buffer || value instanceof Uint8Array);\n    return ByteString.fromUint8Array(value ? value : new Uint8Array());\n  }\n}\nfunction toVersion(serializer, version) {\n  return toTimestamp(serializer, version.toTimestamp());\n}\nfunction fromVersion(version) {\n  hardAssert(!!version);\n  return SnapshotVersion.fromTimestamp(fromTimestamp(version));\n}\nfunction toResourceName(databaseId, path) {\n  return toResourcePath(databaseId, path).canonicalString();\n}\nfunction toResourcePath(databaseId, path) {\n  const resourcePath = fullyQualifiedPrefixPath(databaseId).child('documents');\n  return path === undefined ? resourcePath : resourcePath.child(path);\n}\nfunction fromResourceName(name) {\n  const resource = ResourcePath.fromString(name);\n  hardAssert(isValidResourceName(resource));\n  return resource;\n}\nfunction toName(serializer, key) {\n  return toResourceName(serializer.databaseId, key.path);\n}\nfunction fromName(serializer, name) {\n  const resource = fromResourceName(name);\n  if (resource.get(1) !== serializer.databaseId.projectId) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different project: ' + resource.get(1) + ' vs ' + serializer.databaseId.projectId);\n  }\n  if (resource.get(3) !== serializer.databaseId.database) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Tried to deserialize key from different database: ' + resource.get(3) + ' vs ' + serializer.databaseId.database);\n  }\n  return new DocumentKey(extractLocalPathFromResourceName(resource));\n}\nfunction toQueryPath(serializer, path) {\n  return toResourceName(serializer.databaseId, path);\n}\nfunction fromQueryPath(name) {\n  const resourceName = fromResourceName(name);\n  // In v1beta1 queries for collections at the root did not have a trailing\n  // \"/documents\". In v1 all resource paths contain \"/documents\". Preserve the\n  // ability to read the v1beta1 form for compatibility with queries persisted\n  // in the local target cache.\n  if (resourceName.length === 4) {\n    return ResourcePath.emptyPath();\n  }\n  return extractLocalPathFromResourceName(resourceName);\n}\nfunction getEncodedDatabaseId(serializer) {\n  const path = new ResourcePath(['projects', serializer.databaseId.projectId, 'databases', serializer.databaseId.database]);\n  return path.canonicalString();\n}\nfunction fullyQualifiedPrefixPath(databaseId) {\n  return new ResourcePath(['projects', databaseId.projectId, 'databases', databaseId.database]);\n}\nfunction extractLocalPathFromResourceName(resourceName) {\n  hardAssert(resourceName.length > 4 && resourceName.get(4) === 'documents');\n  return resourceName.popFirst(5);\n}\n/** Creates a Document proto from key and fields (but no create/update time) */\nfunction toMutationDocument(serializer, key, fields) {\n  return {\n    name: toName(serializer, key),\n    fields: fields.value.mapValue.fields\n  };\n}\nfunction toDocument(serializer, document) {\n  return {\n    name: toName(serializer, document.key),\n    fields: document.data.value.mapValue.fields,\n    updateTime: toTimestamp(serializer, document.version.toTimestamp()),\n    createTime: toTimestamp(serializer, document.createTime.toTimestamp())\n  };\n}\nfunction fromDocument(serializer, document, hasCommittedMutations) {\n  const key = fromName(serializer, document.name);\n  const version = fromVersion(document.updateTime);\n  // If we read a document from persistence that is missing createTime, it's due\n  // to older SDK versions not storing this information. In such cases, we'll\n  // set the createTime to zero. This can be removed in the long term.\n  const createTime = document.createTime ? fromVersion(document.createTime) : SnapshotVersion.min();\n  const data = new ObjectValue({\n    mapValue: {\n      fields: document.fields\n    }\n  });\n  const result = MutableDocument.newFoundDocument(key, version, createTime, data);\n  if (hasCommittedMutations) {\n    result.setHasCommittedMutations();\n  }\n  return hasCommittedMutations ? result.setHasCommittedMutations() : result;\n}\nfunction fromFound(serializer, doc) {\n  hardAssert(!!doc.found);\n  assertPresent(doc.found.name);\n  assertPresent(doc.found.updateTime);\n  const key = fromName(serializer, doc.found.name);\n  const version = fromVersion(doc.found.updateTime);\n  const createTime = doc.found.createTime ? fromVersion(doc.found.createTime) : SnapshotVersion.min();\n  const data = new ObjectValue({\n    mapValue: {\n      fields: doc.found.fields\n    }\n  });\n  return MutableDocument.newFoundDocument(key, version, createTime, data);\n}\nfunction fromMissing(serializer, result) {\n  hardAssert(!!result.missing);\n  hardAssert(!!result.readTime);\n  const key = fromName(serializer, result.missing);\n  const version = fromVersion(result.readTime);\n  return MutableDocument.newNoDocument(key, version);\n}\nfunction fromBatchGetDocumentsResponse(serializer, result) {\n  if ('found' in result) {\n    return fromFound(serializer, result);\n  } else if ('missing' in result) {\n    return fromMissing(serializer, result);\n  }\n  return fail();\n}\nfunction fromWatchChange(serializer, change) {\n  let watchChange;\n  if ('targetChange' in change) {\n    assertPresent(change.targetChange);\n    // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'\n    // if unset\n    const state = fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');\n    const targetIds = change.targetChange.targetIds || [];\n    const resumeToken = fromBytes(serializer, change.targetChange.resumeToken);\n    const causeProto = change.targetChange.cause;\n    const cause = causeProto && fromRpcStatus(causeProto);\n    watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);\n  } else if ('documentChange' in change) {\n    assertPresent(change.documentChange);\n    const entityChange = change.documentChange;\n    assertPresent(entityChange.document);\n    assertPresent(entityChange.document.name);\n    assertPresent(entityChange.document.updateTime);\n    const key = fromName(serializer, entityChange.document.name);\n    const version = fromVersion(entityChange.document.updateTime);\n    const createTime = entityChange.document.createTime ? fromVersion(entityChange.document.createTime) : SnapshotVersion.min();\n    const data = new ObjectValue({\n      mapValue: {\n        fields: entityChange.document.fields\n      }\n    });\n    const doc = MutableDocument.newFoundDocument(key, version, createTime, data);\n    const updatedTargetIds = entityChange.targetIds || [];\n    const removedTargetIds = entityChange.removedTargetIds || [];\n    watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);\n  } else if ('documentDelete' in change) {\n    assertPresent(change.documentDelete);\n    const docDelete = change.documentDelete;\n    assertPresent(docDelete.document);\n    const key = fromName(serializer, docDelete.document);\n    const version = docDelete.readTime ? fromVersion(docDelete.readTime) : SnapshotVersion.min();\n    const doc = MutableDocument.newNoDocument(key, version);\n    const removedTargetIds = docDelete.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);\n  } else if ('documentRemove' in change) {\n    assertPresent(change.documentRemove);\n    const docRemove = change.documentRemove;\n    assertPresent(docRemove.document);\n    const key = fromName(serializer, docRemove.document);\n    const removedTargetIds = docRemove.removedTargetIds || [];\n    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);\n  } else if ('filter' in change) {\n    // TODO(dimond): implement existence filter parsing with strategy.\n    assertPresent(change.filter);\n    const filter = change.filter;\n    assertPresent(filter.targetId);\n    const {\n      count = 0,\n      unchangedNames\n    } = filter;\n    const existenceFilter = new ExistenceFilter(count, unchangedNames);\n    const targetId = filter.targetId;\n    watchChange = new ExistenceFilterChange(targetId, existenceFilter);\n  } else {\n    return fail();\n  }\n  return watchChange;\n}\nfunction fromWatchTargetChangeState(state) {\n  if (state === 'NO_CHANGE') {\n    return 0 /* WatchTargetChangeState.NoChange */;\n  } else if (state === 'ADD') {\n    return 1 /* WatchTargetChangeState.Added */;\n  } else if (state === 'REMOVE') {\n    return 2 /* WatchTargetChangeState.Removed */;\n  } else if (state === 'CURRENT') {\n    return 3 /* WatchTargetChangeState.Current */;\n  } else if (state === 'RESET') {\n    return 4 /* WatchTargetChangeState.Reset */;\n  } else {\n    return fail();\n  }\n}\nfunction versionFromListenResponse(change) {\n  // We have only reached a consistent snapshot for the entire stream if there\n  // is a read_time set and it applies to all targets (i.e. the list of\n  // targets is empty). The backend is guaranteed to send such responses.\n  if (!('targetChange' in change)) {\n    return SnapshotVersion.min();\n  }\n  const targetChange = change.targetChange;\n  if (targetChange.targetIds && targetChange.targetIds.length) {\n    return SnapshotVersion.min();\n  }\n  if (!targetChange.readTime) {\n    return SnapshotVersion.min();\n  }\n  return fromVersion(targetChange.readTime);\n}\nfunction toMutation(serializer, mutation) {\n  let result;\n  if (mutation instanceof SetMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.value)\n    };\n  } else if (mutation instanceof DeleteMutation) {\n    result = {\n      delete: toName(serializer, mutation.key)\n    };\n  } else if (mutation instanceof PatchMutation) {\n    result = {\n      update: toMutationDocument(serializer, mutation.key, mutation.data),\n      updateMask: toDocumentMask(mutation.fieldMask)\n    };\n  } else if (mutation instanceof VerifyMutation) {\n    result = {\n      verify: toName(serializer, mutation.key)\n    };\n  } else {\n    return fail();\n  }\n  if (mutation.fieldTransforms.length > 0) {\n    result.updateTransforms = mutation.fieldTransforms.map(transform => toFieldTransform(serializer, transform));\n  }\n  if (!mutation.precondition.isNone) {\n    result.currentDocument = toPrecondition(serializer, mutation.precondition);\n  }\n  return result;\n}\nfunction fromMutation(serializer, proto) {\n  const precondition = proto.currentDocument ? fromPrecondition(proto.currentDocument) : Precondition.none();\n  const fieldTransforms = proto.updateTransforms ? proto.updateTransforms.map(transform => fromFieldTransform(serializer, transform)) : [];\n  if (proto.update) {\n    assertPresent(proto.update.name);\n    const key = fromName(serializer, proto.update.name);\n    const value = new ObjectValue({\n      mapValue: {\n        fields: proto.update.fields\n      }\n    });\n    if (proto.updateMask) {\n      const fieldMask = fromDocumentMask(proto.updateMask);\n      return new PatchMutation(key, value, fieldMask, precondition, fieldTransforms);\n    } else {\n      return new SetMutation(key, value, precondition, fieldTransforms);\n    }\n  } else if (proto.delete) {\n    const key = fromName(serializer, proto.delete);\n    return new DeleteMutation(key, precondition);\n  } else if (proto.verify) {\n    const key = fromName(serializer, proto.verify);\n    return new VerifyMutation(key, precondition);\n  } else {\n    return fail();\n  }\n}\nfunction toPrecondition(serializer, precondition) {\n  if (precondition.updateTime !== undefined) {\n    return {\n      updateTime: toVersion(serializer, precondition.updateTime)\n    };\n  } else if (precondition.exists !== undefined) {\n    return {\n      exists: precondition.exists\n    };\n  } else {\n    return fail();\n  }\n}\nfunction fromPrecondition(precondition) {\n  if (precondition.updateTime !== undefined) {\n    return Precondition.updateTime(fromVersion(precondition.updateTime));\n  } else if (precondition.exists !== undefined) {\n    return Precondition.exists(precondition.exists);\n  } else {\n    return Precondition.none();\n  }\n}\nfunction fromWriteResult(proto, commitTime) {\n  // NOTE: Deletes don't have an updateTime.\n  let version = proto.updateTime ? fromVersion(proto.updateTime) : fromVersion(commitTime);\n  if (version.isEqual(SnapshotVersion.min())) {\n    // The Firestore Emulator currently returns an update time of 0 for\n    // deletes of non-existing documents (rather than null). This breaks the\n    // test \"get deleted doc while offline with source=cache\" as NoDocuments\n    // with version 0 are filtered by IndexedDb's RemoteDocumentCache.\n    // TODO(#2149): Remove this when Emulator is fixed\n    version = fromVersion(commitTime);\n  }\n  return new MutationResult(version, proto.transformResults || []);\n}\nfunction fromWriteResults(protos, commitTime) {\n  if (protos && protos.length > 0) {\n    hardAssert(commitTime !== undefined);\n    return protos.map(proto => fromWriteResult(proto, commitTime));\n  } else {\n    return [];\n  }\n}\nfunction toFieldTransform(serializer, fieldTransform) {\n  const transform = fieldTransform.transform;\n  if (transform instanceof ServerTimestampTransform) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      setToServerValue: 'REQUEST_TIME'\n    };\n  } else if (transform instanceof ArrayUnionTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      appendMissingElements: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof ArrayRemoveTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      removeAllFromArray: {\n        values: transform.elements\n      }\n    };\n  } else if (transform instanceof NumericIncrementTransformOperation) {\n    return {\n      fieldPath: fieldTransform.field.canonicalString(),\n      increment: transform.operand\n    };\n  } else {\n    throw fail();\n  }\n}\nfunction fromFieldTransform(serializer, proto) {\n  let transform = null;\n  if ('setToServerValue' in proto) {\n    hardAssert(proto.setToServerValue === 'REQUEST_TIME');\n    transform = new ServerTimestampTransform();\n  } else if ('appendMissingElements' in proto) {\n    const values = proto.appendMissingElements.values || [];\n    transform = new ArrayUnionTransformOperation(values);\n  } else if ('removeAllFromArray' in proto) {\n    const values = proto.removeAllFromArray.values || [];\n    transform = new ArrayRemoveTransformOperation(values);\n  } else if ('increment' in proto) {\n    transform = new NumericIncrementTransformOperation(serializer, proto.increment);\n  } else {\n    fail();\n  }\n  const fieldPath = FieldPath$1.fromServerFormat(proto.fieldPath);\n  return new FieldTransform(fieldPath, transform);\n}\nfunction toDocumentsTarget(serializer, target) {\n  return {\n    documents: [toQueryPath(serializer, target.path)]\n  };\n}\nfunction fromDocumentsTarget(documentsTarget) {\n  const count = documentsTarget.documents.length;\n  hardAssert(count === 1);\n  const name = documentsTarget.documents[0];\n  return queryToTarget(newQueryForPath(fromQueryPath(name)));\n}\nfunction toQueryTarget(serializer, target) {\n  // Dissect the path into parent, collectionId, and optional key filter.\n  const queryTarget = {\n    structuredQuery: {}\n  };\n  const path = target.path;\n  let parent;\n  if (target.collectionGroup !== null) {\n    parent = path;\n    queryTarget.structuredQuery.from = [{\n      collectionId: target.collectionGroup,\n      allDescendants: true\n    }];\n  } else {\n    parent = path.popLast();\n    queryTarget.structuredQuery.from = [{\n      collectionId: path.lastSegment()\n    }];\n  }\n  queryTarget.parent = toQueryPath(serializer, parent);\n  const where = toFilters(target.filters);\n  if (where) {\n    queryTarget.structuredQuery.where = where;\n  }\n  const orderBy = toOrder(target.orderBy);\n  if (orderBy) {\n    queryTarget.structuredQuery.orderBy = orderBy;\n  }\n  const limit = toInt32Proto(serializer, target.limit);\n  if (limit !== null) {\n    queryTarget.structuredQuery.limit = limit;\n  }\n  if (target.startAt) {\n    queryTarget.structuredQuery.startAt = toStartAtCursor(target.startAt);\n  }\n  if (target.endAt) {\n    queryTarget.structuredQuery.endAt = toEndAtCursor(target.endAt);\n  }\n  return {\n    queryTarget,\n    parent\n  };\n}\nfunction toRunAggregationQueryRequest(serializer, target, aggregates, skipAliasing) {\n  const {\n    queryTarget,\n    parent\n  } = toQueryTarget(serializer, target);\n  const aliasMap = {};\n  const aggregations = [];\n  let aggregationNum = 0;\n  aggregates.forEach(aggregate => {\n    // Map all client-side aliases to a unique short-form\n    // alias. This avoids issues with client-side aliases that\n    // exceed the 1500-byte string size limit.\n    const serverAlias = skipAliasing ? aggregate.alias : `aggregate_${aggregationNum++}`;\n    aliasMap[serverAlias] = aggregate.alias;\n    if (aggregate.aggregateType === 'count') {\n      aggregations.push({\n        alias: serverAlias,\n        count: {}\n      });\n    } else if (aggregate.aggregateType === 'avg') {\n      aggregations.push({\n        alias: serverAlias,\n        avg: {\n          field: toFieldPathReference(aggregate.fieldPath)\n        }\n      });\n    } else if (aggregate.aggregateType === 'sum') {\n      aggregations.push({\n        alias: serverAlias,\n        sum: {\n          field: toFieldPathReference(aggregate.fieldPath)\n        }\n      });\n    }\n  });\n  return {\n    request: {\n      structuredAggregationQuery: {\n        aggregations,\n        structuredQuery: queryTarget.structuredQuery\n      },\n      parent: queryTarget.parent\n    },\n    aliasMap,\n    parent\n  };\n}\nfunction convertQueryTargetToQuery(target) {\n  let path = fromQueryPath(target.parent);\n  const query = target.structuredQuery;\n  const fromCount = query.from ? query.from.length : 0;\n  let collectionGroup = null;\n  if (fromCount > 0) {\n    hardAssert(fromCount === 1);\n    const from = query.from[0];\n    if (from.allDescendants) {\n      collectionGroup = from.collectionId;\n    } else {\n      path = path.child(from.collectionId);\n    }\n  }\n  let filterBy = [];\n  if (query.where) {\n    filterBy = fromFilters(query.where);\n  }\n  let orderBy = [];\n  if (query.orderBy) {\n    orderBy = fromOrder(query.orderBy);\n  }\n  let limit = null;\n  if (query.limit) {\n    limit = fromInt32Proto(query.limit);\n  }\n  let startAt = null;\n  if (query.startAt) {\n    startAt = fromStartAtCursor(query.startAt);\n  }\n  let endAt = null;\n  if (query.endAt) {\n    endAt = fromEndAtCursor(query.endAt);\n  }\n  return newQuery(path, collectionGroup, orderBy, filterBy, limit, \"F\" /* LimitType.First */, startAt, endAt);\n}\nfunction fromQueryTarget(target) {\n  return queryToTarget(convertQueryTargetToQuery(target));\n}\nfunction toListenRequestLabels(serializer, targetData) {\n  const value = toLabel(targetData.purpose);\n  if (value == null) {\n    return null;\n  } else {\n    return {\n      'goog-listen-tags': value\n    };\n  }\n}\nfunction toLabel(purpose) {\n  switch (purpose) {\n    case \"TargetPurposeListen\" /* TargetPurpose.Listen */:\n      return null;\n    case \"TargetPurposeExistenceFilterMismatch\" /* TargetPurpose.ExistenceFilterMismatch */:\n      return 'existence-filter-mismatch';\n    case \"TargetPurposeExistenceFilterMismatchBloom\" /* TargetPurpose.ExistenceFilterMismatchBloom */:\n      return 'existence-filter-mismatch-bloom';\n    case \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */:\n      return 'limbo-document';\n    default:\n      return fail();\n  }\n}\nfunction toTarget(serializer, targetData) {\n  let result;\n  const target = targetData.target;\n  if (targetIsDocumentTarget(target)) {\n    result = {\n      documents: toDocumentsTarget(serializer, target)\n    };\n  } else {\n    result = {\n      query: toQueryTarget(serializer, target).queryTarget\n    };\n  }\n  result.targetId = targetData.targetId;\n  if (targetData.resumeToken.approximateByteSize() > 0) {\n    result.resumeToken = toBytes(serializer, targetData.resumeToken);\n    const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\n    if (expectedCount !== null) {\n      result.expectedCount = expectedCount;\n    }\n  } else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n    // TODO(wuandy): Consider removing above check because it is most likely true.\n    // Right now, many tests depend on this behaviour though (leaving min() out\n    // of serialization).\n    result.readTime = toTimestamp(serializer, targetData.snapshotVersion.toTimestamp());\n    const expectedCount = toInt32Proto(serializer, targetData.expectedCount);\n    if (expectedCount !== null) {\n      result.expectedCount = expectedCount;\n    }\n  }\n  return result;\n}\nfunction toFilters(filters) {\n  if (filters.length === 0) {\n    return;\n  }\n  return toFilter(CompositeFilter.create(filters, \"and\" /* CompositeOperator.AND */));\n}\nfunction fromFilters(filter) {\n  const result = fromFilter(filter);\n  if (result instanceof CompositeFilter && compositeFilterIsFlatConjunction(result)) {\n    return result.getFilters();\n  }\n  return [result];\n}\nfunction fromFilter(filter) {\n  if (filter.unaryFilter !== undefined) {\n    return fromUnaryFilter(filter);\n  } else if (filter.fieldFilter !== undefined) {\n    return fromFieldFilter(filter);\n  } else if (filter.compositeFilter !== undefined) {\n    return fromCompositeFilter(filter);\n  } else {\n    return fail();\n  }\n}\nfunction toOrder(orderBys) {\n  if (orderBys.length === 0) {\n    return;\n  }\n  return orderBys.map(order => toPropertyOrder(order));\n}\nfunction fromOrder(orderBys) {\n  return orderBys.map(order => fromPropertyOrder(order));\n}\nfunction toStartAtCursor(cursor) {\n  return {\n    before: cursor.inclusive,\n    values: cursor.position\n  };\n}\nfunction toEndAtCursor(cursor) {\n  return {\n    before: !cursor.inclusive,\n    values: cursor.position\n  };\n}\nfunction fromStartAtCursor(cursor) {\n  const inclusive = !!cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, inclusive);\n}\nfunction fromEndAtCursor(cursor) {\n  const inclusive = !cursor.before;\n  const position = cursor.values || [];\n  return new Bound(position, inclusive);\n}\n// visible for testing\nfunction toDirection(dir) {\n  return DIRECTIONS[dir];\n}\n// visible for testing\nfunction fromDirection(dir) {\n  switch (dir) {\n    case 'ASCENDING':\n      return \"asc\" /* Direction.ASCENDING */;\n    case 'DESCENDING':\n      return \"desc\" /* Direction.DESCENDING */;\n    default:\n      return undefined;\n  }\n}\n// visible for testing\nfunction toOperatorName(op) {\n  return OPERATORS[op];\n}\nfunction toCompositeOperatorName(op) {\n  return COMPOSITE_OPERATORS[op];\n}\nfunction fromOperatorName(op) {\n  switch (op) {\n    case 'EQUAL':\n      return \"==\" /* Operator.EQUAL */;\n    case 'NOT_EQUAL':\n      return \"!=\" /* Operator.NOT_EQUAL */;\n    case 'GREATER_THAN':\n      return \">\" /* Operator.GREATER_THAN */;\n    case 'GREATER_THAN_OR_EQUAL':\n      return \">=\" /* Operator.GREATER_THAN_OR_EQUAL */;\n    case 'LESS_THAN':\n      return \"<\" /* Operator.LESS_THAN */;\n    case 'LESS_THAN_OR_EQUAL':\n      return \"<=\" /* Operator.LESS_THAN_OR_EQUAL */;\n    case 'ARRAY_CONTAINS':\n      return \"array-contains\" /* Operator.ARRAY_CONTAINS */;\n    case 'IN':\n      return \"in\" /* Operator.IN */;\n    case 'NOT_IN':\n      return \"not-in\" /* Operator.NOT_IN */;\n    case 'ARRAY_CONTAINS_ANY':\n      return \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\n    case 'OPERATOR_UNSPECIFIED':\n      return fail();\n    default:\n      return fail();\n  }\n}\nfunction fromCompositeOperatorName(op) {\n  switch (op) {\n    case 'AND':\n      return \"and\" /* CompositeOperator.AND */;\n    case 'OR':\n      return \"or\" /* CompositeOperator.OR */;\n    default:\n      return fail();\n  }\n}\nfunction toFieldPathReference(path) {\n  return {\n    fieldPath: path.canonicalString()\n  };\n}\nfunction fromFieldPathReference(fieldReference) {\n  return FieldPath$1.fromServerFormat(fieldReference.fieldPath);\n}\n// visible for testing\nfunction toPropertyOrder(orderBy) {\n  return {\n    field: toFieldPathReference(orderBy.field),\n    direction: toDirection(orderBy.dir)\n  };\n}\nfunction fromPropertyOrder(orderBy) {\n  return new OrderBy(fromFieldPathReference(orderBy.field), fromDirection(orderBy.direction));\n}\n// visible for testing\nfunction toFilter(filter) {\n  if (filter instanceof FieldFilter) {\n    return toUnaryOrFieldFilter(filter);\n  } else if (filter instanceof CompositeFilter) {\n    return toCompositeFilter(filter);\n  } else {\n    return fail();\n  }\n}\nfunction toCompositeFilter(filter) {\n  const protos = filter.getFilters().map(filter => toFilter(filter));\n  if (protos.length === 1) {\n    return protos[0];\n  }\n  return {\n    compositeFilter: {\n      op: toCompositeOperatorName(filter.op),\n      filters: protos\n    }\n  };\n}\nfunction toUnaryOrFieldFilter(filter) {\n  if (filter.op === \"==\" /* Operator.EQUAL */) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NULL'\n        }\n      };\n    }\n  } else if (filter.op === \"!=\" /* Operator.NOT_EQUAL */) {\n    if (isNanValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NAN'\n        }\n      };\n    } else if (isNullValue(filter.value)) {\n      return {\n        unaryFilter: {\n          field: toFieldPathReference(filter.field),\n          op: 'IS_NOT_NULL'\n        }\n      };\n    }\n  }\n  return {\n    fieldFilter: {\n      field: toFieldPathReference(filter.field),\n      op: toOperatorName(filter.op),\n      value: filter.value\n    }\n  };\n}\nfunction fromUnaryFilter(filter) {\n  switch (filter.unaryFilter.op) {\n    case 'IS_NAN':\n      const nanField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(nanField, \"==\" /* Operator.EQUAL */, {\n        doubleValue: NaN\n      });\n    case 'IS_NULL':\n      const nullField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(nullField, \"==\" /* Operator.EQUAL */, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'IS_NOT_NAN':\n      const notNanField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(notNanField, \"!=\" /* Operator.NOT_EQUAL */, {\n        doubleValue: NaN\n      });\n    case 'IS_NOT_NULL':\n      const notNullField = fromFieldPathReference(filter.unaryFilter.field);\n      return FieldFilter.create(notNullField, \"!=\" /* Operator.NOT_EQUAL */, {\n        nullValue: 'NULL_VALUE'\n      });\n    case 'OPERATOR_UNSPECIFIED':\n      return fail();\n    default:\n      return fail();\n  }\n}\nfunction fromFieldFilter(filter) {\n  return FieldFilter.create(fromFieldPathReference(filter.fieldFilter.field), fromOperatorName(filter.fieldFilter.op), filter.fieldFilter.value);\n}\nfunction fromCompositeFilter(filter) {\n  return CompositeFilter.create(filter.compositeFilter.filters.map(filter => fromFilter(filter)), fromCompositeOperatorName(filter.compositeFilter.op));\n}\nfunction toDocumentMask(fieldMask) {\n  const canonicalFields = [];\n  fieldMask.fields.forEach(field => canonicalFields.push(field.canonicalString()));\n  return {\n    fieldPaths: canonicalFields\n  };\n}\nfunction fromDocumentMask(proto) {\n  const paths = proto.fieldPaths || [];\n  return new FieldMask(paths.map(path => FieldPath$1.fromServerFormat(path)));\n}\nfunction isValidResourceName(path) {\n  // Resource names have at least 4 components (project ID, database ID)\n  return path.length >= 4 && path.get(0) === 'projects' && path.get(2) === 'databases';\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An immutable set of metadata that the local store tracks for each target.\r\n */\nclass TargetData {\n  constructor( /** The target being listened to. */\n  target,\n  /**\r\n   * The target ID to which the target corresponds; Assigned by the\r\n   * LocalStore for user listens and by the SyncEngine for limbo watches.\r\n   */\n  targetId, /** The purpose of the target. */\n  purpose,\n  /**\r\n   * The sequence number of the last transaction during which this target data\r\n   * was modified.\r\n   */\n  sequenceNumber, /** The latest snapshot version seen for this target. */\n  snapshotVersion = SnapshotVersion.min(),\n  /**\r\n   * The maximum snapshot version at which the associated view\r\n   * contained no limbo documents.\r\n   */\n  lastLimboFreeSnapshotVersion = SnapshotVersion.min(),\n  /**\r\n   * An opaque, server-assigned token that allows watching a target to be\r\n   * resumed after disconnecting without retransmitting all the data that\r\n   * matches the target. The resume token essentially identifies a point in\r\n   * time from which the server should resume sending results.\r\n   */\n  resumeToken = ByteString.EMPTY_BYTE_STRING,\n  /**\r\n   * The number of documents that last matched the query at the resume token or\r\n   * read time. Documents are counted only when making a listen request with\r\n   * resume token or read time, otherwise, keep it null.\r\n   */\n  expectedCount = null) {\n    this.target = target;\n    this.targetId = targetId;\n    this.purpose = purpose;\n    this.sequenceNumber = sequenceNumber;\n    this.snapshotVersion = snapshotVersion;\n    this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;\n    this.resumeToken = resumeToken;\n    this.expectedCount = expectedCount;\n  }\n  /** Creates a new target data instance with an updated sequence number. */\n  withSequenceNumber(sequenceNumber) {\n    return new TargetData(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);\n  }\n  /**\r\n   * Creates a new target data instance with an updated resume token and\r\n   * snapshot version.\r\n   */\n  withResumeToken(resumeToken, snapshotVersion) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken, /* expectedCount= */null);\n  }\n  /**\r\n   * Creates a new target data instance with an updated expected count.\r\n   */\n  withExpectedCount(expectedCount) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken, expectedCount);\n  }\n  /**\r\n   * Creates a new target data instance with an updated last limbo free\r\n   * snapshot version number.\r\n   */\n  withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion) {\n    return new TargetData(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken, this.expectedCount);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Serializer for values stored in the LocalStore. */\nclass LocalSerializer {\n  constructor(remoteSerializer) {\n    this.remoteSerializer = remoteSerializer;\n  }\n}\n/** Decodes a remote document from storage locally to a Document. */\nfunction fromDbRemoteDocument(localSerializer, remoteDoc) {\n  let doc;\n  if (remoteDoc.document) {\n    doc = fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);\n  } else if (remoteDoc.noDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.noDocument.path);\n    const version = fromDbTimestamp(remoteDoc.noDocument.readTime);\n    doc = MutableDocument.newNoDocument(key, version);\n    if (remoteDoc.hasCommittedMutations) {\n      doc.setHasCommittedMutations();\n    }\n  } else if (remoteDoc.unknownDocument) {\n    const key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n    const version = fromDbTimestamp(remoteDoc.unknownDocument.version);\n    doc = MutableDocument.newUnknownDocument(key, version);\n  } else {\n    return fail();\n  }\n  if (remoteDoc.readTime) {\n    doc.setReadTime(fromDbTimestampKey(remoteDoc.readTime));\n  }\n  return doc;\n}\n/** Encodes a document for storage locally. */\nfunction toDbRemoteDocument(localSerializer, document) {\n  const key = document.key;\n  const remoteDoc = {\n    prefixPath: key.getCollectionPath().popLast().toArray(),\n    collectionGroup: key.collectionGroup,\n    documentId: key.path.lastSegment(),\n    readTime: toDbTimestampKey(document.readTime),\n    hasCommittedMutations: document.hasCommittedMutations\n  };\n  if (document.isFoundDocument()) {\n    remoteDoc.document = toDocument(localSerializer.remoteSerializer, document);\n  } else if (document.isNoDocument()) {\n    remoteDoc.noDocument = {\n      path: key.path.toArray(),\n      readTime: toDbTimestamp(document.version)\n    };\n  } else if (document.isUnknownDocument()) {\n    remoteDoc.unknownDocument = {\n      path: key.path.toArray(),\n      version: toDbTimestamp(document.version)\n    };\n  } else {\n    return fail();\n  }\n  return remoteDoc;\n}\nfunction toDbTimestampKey(snapshotVersion) {\n  const timestamp = snapshotVersion.toTimestamp();\n  return [timestamp.seconds, timestamp.nanoseconds];\n}\nfunction fromDbTimestampKey(dbTimestampKey) {\n  const timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\nfunction toDbTimestamp(snapshotVersion) {\n  const timestamp = snapshotVersion.toTimestamp();\n  return {\n    seconds: timestamp.seconds,\n    nanoseconds: timestamp.nanoseconds\n  };\n}\nfunction fromDbTimestamp(dbTimestamp) {\n  const timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);\n  return SnapshotVersion.fromTimestamp(timestamp);\n}\n/** Encodes a batch of mutations into a DbMutationBatch for local storage. */\nfunction toDbMutationBatch(localSerializer, userId, batch) {\n  const serializedBaseMutations = batch.baseMutations.map(m => toMutation(localSerializer.remoteSerializer, m));\n  const serializedMutations = batch.mutations.map(m => toMutation(localSerializer.remoteSerializer, m));\n  return {\n    userId,\n    batchId: batch.batchId,\n    localWriteTimeMs: batch.localWriteTime.toMillis(),\n    baseMutations: serializedBaseMutations,\n    mutations: serializedMutations\n  };\n}\n/** Decodes a DbMutationBatch into a MutationBatch */\nfunction fromDbMutationBatch(localSerializer, dbBatch) {\n  const baseMutations = (dbBatch.baseMutations || []).map(m => fromMutation(localSerializer.remoteSerializer, m));\n  // Squash old transform mutations into existing patch or set mutations.\n  // The replacement of representing `transforms` with `update_transforms`\n  // on the SDK means that old `transform` mutations stored in IndexedDB need\n  // to be updated to `update_transforms`.\n  // TODO(b/174608374): Remove this code once we perform a schema migration.\n  for (let i = 0; i < dbBatch.mutations.length - 1; ++i) {\n    const currentMutation = dbBatch.mutations[i];\n    const hasTransform = i + 1 < dbBatch.mutations.length && dbBatch.mutations[i + 1].transform !== undefined;\n    if (hasTransform) {\n      const transformMutation = dbBatch.mutations[i + 1];\n      currentMutation.updateTransforms = transformMutation.transform.fieldTransforms;\n      dbBatch.mutations.splice(i + 1, 1);\n      ++i;\n    }\n  }\n  const mutations = dbBatch.mutations.map(m => fromMutation(localSerializer.remoteSerializer, m));\n  const timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);\n  return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);\n}\n/** Decodes a DbTarget into TargetData */\nfunction fromDbTarget(dbTarget) {\n  const version = fromDbTimestamp(dbTarget.readTime);\n  const lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== undefined ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();\n  let target;\n  if (isDocumentQuery(dbTarget.query)) {\n    target = fromDocumentsTarget(dbTarget.query);\n  } else {\n    target = fromQueryTarget(dbTarget.query);\n  }\n  return new TargetData(target, dbTarget.targetId, \"TargetPurposeListen\" /* TargetPurpose.Listen */, dbTarget.lastListenSequenceNumber, version, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));\n}\n/** Encodes TargetData into a DbTarget for storage locally. */\nfunction toDbTarget(localSerializer, targetData) {\n  const dbTimestamp = toDbTimestamp(targetData.snapshotVersion);\n  const dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);\n  let queryProto;\n  if (targetIsDocumentTarget(targetData.target)) {\n    queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);\n  } else {\n    queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target).queryTarget;\n  }\n  // We can't store the resumeToken as a ByteString in IndexedDb, so we\n  // convert it to a base64 string for storage.\n  const resumeToken = targetData.resumeToken.toBase64();\n  // lastListenSequenceNumber is always 0 until we do real GC.\n  return {\n    targetId: targetData.targetId,\n    canonicalId: canonifyTarget(targetData.target),\n    readTime: dbTimestamp,\n    resumeToken,\n    lastListenSequenceNumber: targetData.sequenceNumber,\n    lastLimboFreeSnapshotVersion: dbLastLimboFreeTimestamp,\n    query: queryProto\n  };\n}\n/**\r\n * A helper function for figuring out what kind of query has been stored.\r\n */\nfunction isDocumentQuery(dbQuery) {\n  return dbQuery.documents !== undefined;\n}\n/** Encodes a DbBundle to a BundleMetadata object. */\nfunction fromDbBundle(dbBundle) {\n  return {\n    id: dbBundle.bundleId,\n    createTime: fromDbTimestamp(dbBundle.createTime),\n    version: dbBundle.version\n  };\n}\n/** Encodes a BundleMetadata to a DbBundle. */\nfunction toDbBundle(metadata) {\n  return {\n    bundleId: metadata.id,\n    createTime: toDbTimestamp(fromVersion(metadata.createTime)),\n    version: metadata.version\n  };\n}\n/** Encodes a DbNamedQuery to a NamedQuery. */\nfunction fromDbNamedQuery(dbNamedQuery) {\n  return {\n    name: dbNamedQuery.name,\n    query: fromBundledQuery(dbNamedQuery.bundledQuery),\n    readTime: fromDbTimestamp(dbNamedQuery.readTime)\n  };\n}\n/** Encodes a NamedQuery from a bundle proto to a DbNamedQuery. */\nfunction toDbNamedQuery(query) {\n  return {\n    name: query.name,\n    readTime: toDbTimestamp(fromVersion(query.readTime)),\n    bundledQuery: query.bundledQuery\n  };\n}\n/**\r\n * Encodes a `BundledQuery` from bundle proto to a Query object.\r\n *\r\n * This reconstructs the original query used to build the bundle being loaded,\r\n * including features exists only in SDKs (for example: limit-to-last).\r\n */\nfunction fromBundledQuery(bundledQuery) {\n  const query = convertQueryTargetToQuery({\n    parent: bundledQuery.parent,\n    structuredQuery: bundledQuery.structuredQuery\n  });\n  if (bundledQuery.limitType === 'LAST') {\n    return queryWithLimit(query, query.limit, \"L\" /* LimitType.Last */);\n  }\n  return query;\n}\n/** Encodes a NamedQuery proto object to a NamedQuery model object. */\nfunction fromProtoNamedQuery(namedQuery) {\n  return {\n    name: namedQuery.name,\n    query: fromBundledQuery(namedQuery.bundledQuery),\n    readTime: fromVersion(namedQuery.readTime)\n  };\n}\n/** Decodes a BundleMetadata proto into a BundleMetadata object. */\nfunction fromBundleMetadata(metadata) {\n  return {\n    id: metadata.id,\n    version: metadata.version,\n    createTime: fromVersion(metadata.createTime)\n  };\n}\n/** Encodes a DbDocumentOverlay object to an Overlay model object. */\nfunction fromDbDocumentOverlay(localSerializer, dbDocumentOverlay) {\n  return new Overlay(dbDocumentOverlay.largestBatchId, fromMutation(localSerializer.remoteSerializer, dbDocumentOverlay.overlayMutation));\n}\n/** Decodes an Overlay model object into a DbDocumentOverlay object. */\nfunction toDbDocumentOverlay(localSerializer, userId, overlay) {\n  const [_, collectionPath, documentId] = toDbDocumentOverlayKey(userId, overlay.mutation.key);\n  return {\n    userId,\n    collectionPath,\n    documentId,\n    collectionGroup: overlay.mutation.key.getCollectionGroup(),\n    largestBatchId: overlay.largestBatchId,\n    overlayMutation: toMutation(localSerializer.remoteSerializer, overlay.mutation)\n  };\n}\n/**\r\n * Returns the DbDocumentOverlayKey corresponding to the given user and\r\n * document key.\r\n */\nfunction toDbDocumentOverlayKey(userId, docKey) {\n  const docId = docKey.path.lastSegment();\n  const collectionPath = encodeResourcePath(docKey.path.popLast());\n  return [userId, collectionPath, docId];\n}\nfunction toDbIndexConfiguration(index) {\n  return {\n    indexId: index.indexId,\n    collectionGroup: index.collectionGroup,\n    fields: index.fields.map(s => [s.fieldPath.canonicalString(), s.kind])\n  };\n}\nfunction fromDbIndexConfiguration(index, state) {\n  const decodedState = state ? new IndexState(state.sequenceNumber, new IndexOffset(fromDbTimestamp(state.readTime), new DocumentKey(decodeResourcePath(state.documentKey)), state.largestBatchId)) : IndexState.empty();\n  const decodedSegments = index.fields.map(([fieldPath, kind]) => new IndexSegment(FieldPath$1.fromServerFormat(fieldPath), kind));\n  return new FieldIndex(index.indexId, index.collectionGroup, decodedSegments, decodedState);\n}\nfunction toDbIndexState(indexId, uid, sequenceNumber, offset) {\n  return {\n    indexId,\n    uid,\n    sequenceNumber,\n    readTime: toDbTimestamp(offset.readTime),\n    documentKey: encodeResourcePath(offset.documentKey.path),\n    largestBatchId: offset.largestBatchId\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass IndexedDbBundleCache {\n  getBundleMetadata(transaction, bundleId) {\n    return bundlesStore(transaction).get(bundleId).next(bundle => {\n      if (bundle) {\n        return fromDbBundle(bundle);\n      }\n      return undefined;\n    });\n  }\n  saveBundleMetadata(transaction, bundleMetadata) {\n    return bundlesStore(transaction).put(toDbBundle(bundleMetadata));\n  }\n  getNamedQuery(transaction, queryName) {\n    return namedQueriesStore(transaction).get(queryName).next(query => {\n      if (query) {\n        return fromDbNamedQuery(query);\n      }\n      return undefined;\n    });\n  }\n  saveNamedQuery(transaction, query) {\n    return namedQueriesStore(transaction).put(toDbNamedQuery(query));\n  }\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the bundles object store.\r\n */\nfunction bundlesStore(txn) {\n  return getStore(txn, DbBundleStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the namedQueries object store.\r\n */\nfunction namedQueriesStore(txn) {\n  return getStore(txn, DbNamedQueryStore);\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Implementation of DocumentOverlayCache using IndexedDb.\r\n */\nclass IndexedDbDocumentOverlayCache {\n  /**\r\n   * @param serializer - The document serializer.\r\n   * @param userId - The userId for which we are accessing overlays.\r\n   */\n  constructor(serializer, userId) {\n    this.serializer = serializer;\n    this.userId = userId;\n  }\n  static forUser(serializer, user) {\n    const userId = user.uid || '';\n    return new IndexedDbDocumentOverlayCache(serializer, userId);\n  }\n  getOverlay(transaction, key) {\n    return documentOverlayStore(transaction).get(toDbDocumentOverlayKey(this.userId, key)).next(dbOverlay => {\n      if (dbOverlay) {\n        return fromDbDocumentOverlay(this.serializer, dbOverlay);\n      }\n      return null;\n    });\n  }\n  getOverlays(transaction, keys) {\n    const result = newOverlayMap();\n    return PersistencePromise.forEach(keys, key => {\n      return this.getOverlay(transaction, key).next(overlay => {\n        if (overlay !== null) {\n          result.set(key, overlay);\n        }\n      });\n    }).next(() => result);\n  }\n  saveOverlays(transaction, largestBatchId, overlays) {\n    const promises = [];\n    overlays.forEach((_, mutation) => {\n      const overlay = new Overlay(largestBatchId, mutation);\n      promises.push(this.saveOverlay(transaction, overlay));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  removeOverlaysForBatchId(transaction, documentKeys, batchId) {\n    const collectionPaths = new Set();\n    // Get the set of unique collection paths.\n    documentKeys.forEach(key => collectionPaths.add(encodeResourcePath(key.getCollectionPath())));\n    const promises = [];\n    collectionPaths.forEach(collectionPath => {\n      const range = IDBKeyRange.bound([this.userId, collectionPath, batchId], [this.userId, collectionPath, batchId + 1], /*lowerOpen=*/false, /*upperOpen=*/true);\n      promises.push(documentOverlayStore(transaction).deleteAll(DbDocumentOverlayCollectionPathOverlayIndex, range));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  getOverlaysForCollection(transaction, collection, sinceBatchId) {\n    const result = newOverlayMap();\n    const collectionPath = encodeResourcePath(collection);\n    // We want batch IDs larger than `sinceBatchId`, and so the lower bound\n    // is not inclusive.\n    const range = IDBKeyRange.bound([this.userId, collectionPath, sinceBatchId], [this.userId, collectionPath, Number.POSITIVE_INFINITY], /*lowerOpen=*/true);\n    return documentOverlayStore(transaction).loadAll(DbDocumentOverlayCollectionPathOverlayIndex, range).next(dbOverlays => {\n      for (const dbOverlay of dbOverlays) {\n        const overlay = fromDbDocumentOverlay(this.serializer, dbOverlay);\n        result.set(overlay.getKey(), overlay);\n      }\n      return result;\n    });\n  }\n  getOverlaysForCollectionGroup(transaction, collectionGroup, sinceBatchId, count) {\n    const result = newOverlayMap();\n    let currentBatchId = undefined;\n    // We want batch IDs larger than `sinceBatchId`, and so the lower bound\n    // is not inclusive.\n    const range = IDBKeyRange.bound([this.userId, collectionGroup, sinceBatchId], [this.userId, collectionGroup, Number.POSITIVE_INFINITY], /*lowerOpen=*/true);\n    return documentOverlayStore(transaction).iterate({\n      index: DbDocumentOverlayCollectionGroupOverlayIndex,\n      range\n    }, (_, dbOverlay, control) => {\n      // We do not want to return partial batch overlays, even if the size\n      // of the result set exceeds the given `count` argument. Therefore, we\n      // continue to aggregate results even after the result size exceeds\n      // `count` if there are more overlays from the `currentBatchId`.\n      const overlay = fromDbDocumentOverlay(this.serializer, dbOverlay);\n      if (result.size() < count || overlay.largestBatchId === currentBatchId) {\n        result.set(overlay.getKey(), overlay);\n        currentBatchId = overlay.largestBatchId;\n      } else {\n        control.done();\n      }\n    }).next(() => result);\n  }\n  saveOverlay(transaction, overlay) {\n    return documentOverlayStore(transaction).put(toDbDocumentOverlay(this.serializer, this.userId, overlay));\n  }\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the document overlay object store.\r\n */\nfunction documentOverlayStore(txn) {\n  return getStore(txn, DbDocumentOverlayStore);\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass IndexedDbGlobalsCache {\n  globalsStore(txn) {\n    return getStore(txn, DbGlobalsStore);\n  }\n  getSessionToken(txn) {\n    const globals = this.globalsStore(txn);\n    return globals.get('sessionToken').next(global => {\n      const value = global === null || global === void 0 ? void 0 : global.value;\n      return value ? ByteString.fromUint8Array(value) : ByteString.EMPTY_BYTE_STRING;\n    });\n  }\n  setSessionToken(txn, sessionToken) {\n    const globals = this.globalsStore(txn);\n    return globals.put({\n      name: 'sessionToken',\n      value: sessionToken.toUint8Array()\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Note: This code is copied from the backend. Code that is not used by\n// Firestore was removed.\nconst INDEX_TYPE_NULL = 5;\nconst INDEX_TYPE_BOOLEAN = 10;\nconst INDEX_TYPE_NAN = 13;\nconst INDEX_TYPE_NUMBER = 15;\nconst INDEX_TYPE_TIMESTAMP = 20;\nconst INDEX_TYPE_STRING = 25;\nconst INDEX_TYPE_BLOB = 30;\nconst INDEX_TYPE_REFERENCE = 37;\nconst INDEX_TYPE_GEOPOINT = 45;\nconst INDEX_TYPE_ARRAY = 50;\nconst INDEX_TYPE_VECTOR = 53;\nconst INDEX_TYPE_MAP = 55;\nconst INDEX_TYPE_REFERENCE_SEGMENT = 60;\n// A terminator that indicates that a truncatable value was not truncated.\n// This must be smaller than all other type labels.\nconst NOT_TRUNCATED = 2;\n/** Firestore index value writer.  */\nclass FirestoreIndexValueWriter {\n  constructor() {}\n  // The write methods below short-circuit writing terminators for values\n  // containing a (terminating) truncated value.\n  //\n  // As an example, consider the resulting encoding for:\n  //\n  // [\"bar\", [2, \"foo\"]] -> (STRING, \"bar\", TERM, ARRAY, NUMBER, 2, STRING, \"foo\", TERM, TERM, TERM)\n  // [\"bar\", [2, truncated(\"foo\")]] -> (STRING, \"bar\", TERM, ARRAY, NUMBER, 2, STRING, \"foo\", TRUNC)\n  // [\"bar\", truncated([\"foo\"])] -> (STRING, \"bar\", TERM, ARRAY. STRING, \"foo\", TERM, TRUNC)\n  /** Writes an index value.  */\n  writeIndexValue(value, encoder) {\n    this.writeIndexValueAux(value, encoder);\n    // Write separator to split index values\n    // (see go/firestore-storage-format#encodings).\n    encoder.writeInfinity();\n  }\n  writeIndexValueAux(indexValue, encoder) {\n    if ('nullValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_NULL);\n    } else if ('booleanValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_BOOLEAN);\n      encoder.writeNumber(indexValue.booleanValue ? 1 : 0);\n    } else if ('integerValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\n      encoder.writeNumber(normalizeNumber(indexValue.integerValue));\n    } else if ('doubleValue' in indexValue) {\n      const n = normalizeNumber(indexValue.doubleValue);\n      if (isNaN(n)) {\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_NAN);\n      } else {\n        this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\n        if (isNegativeZero(n)) {\n          // -0.0, 0 and 0.0 are all considered the same\n          encoder.writeNumber(0.0);\n        } else {\n          encoder.writeNumber(n);\n        }\n      }\n    } else if ('timestampValue' in indexValue) {\n      let timestamp = indexValue.timestampValue;\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_TIMESTAMP);\n      if (typeof timestamp === 'string') {\n        timestamp = normalizeTimestamp(timestamp);\n      }\n      encoder.writeString(`${timestamp.seconds || ''}`);\n      encoder.writeNumber(timestamp.nanos || 0);\n    } else if ('stringValue' in indexValue) {\n      this.writeIndexString(indexValue.stringValue, encoder);\n      this.writeTruncationMarker(encoder);\n    } else if ('bytesValue' in indexValue) {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_BLOB);\n      encoder.writeBytes(normalizeByteString(indexValue.bytesValue));\n      this.writeTruncationMarker(encoder);\n    } else if ('referenceValue' in indexValue) {\n      this.writeIndexEntityRef(indexValue.referenceValue, encoder);\n    } else if ('geoPointValue' in indexValue) {\n      const geoPoint = indexValue.geoPointValue;\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_GEOPOINT);\n      encoder.writeNumber(geoPoint.latitude || 0);\n      encoder.writeNumber(geoPoint.longitude || 0);\n    } else if ('mapValue' in indexValue) {\n      if (isMaxValue(indexValue)) {\n        this.writeValueTypeLabel(encoder, Number.MAX_SAFE_INTEGER);\n      } else if (isVectorValue(indexValue)) {\n        this.writeIndexVector(indexValue.mapValue, encoder);\n      } else {\n        this.writeIndexMap(indexValue.mapValue, encoder);\n        this.writeTruncationMarker(encoder);\n      }\n    } else if ('arrayValue' in indexValue) {\n      this.writeIndexArray(indexValue.arrayValue, encoder);\n      this.writeTruncationMarker(encoder);\n    } else {\n      fail();\n    }\n  }\n  writeIndexString(stringIndexValue, encoder) {\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_STRING);\n    this.writeUnlabeledIndexString(stringIndexValue, encoder);\n  }\n  writeUnlabeledIndexString(stringIndexValue, encoder) {\n    encoder.writeString(stringIndexValue);\n  }\n  writeIndexMap(mapIndexValue, encoder) {\n    const map = mapIndexValue.fields || {};\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_MAP);\n    for (const key of Object.keys(map)) {\n      this.writeIndexString(key, encoder);\n      this.writeIndexValueAux(map[key], encoder);\n    }\n  }\n  writeIndexVector(mapIndexValue, encoder) {\n    var _a, _b;\n    const map = mapIndexValue.fields || {};\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_VECTOR);\n    // Vectors sort first by length\n    const key = VECTOR_MAP_VECTORS_KEY;\n    const length = ((_b = (_a = map[key].arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.length) || 0;\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_NUMBER);\n    encoder.writeNumber(normalizeNumber(length));\n    // Vectors then sort by position value\n    this.writeIndexString(key, encoder);\n    this.writeIndexValueAux(map[key], encoder);\n  }\n  writeIndexArray(arrayIndexValue, encoder) {\n    const values = arrayIndexValue.values || [];\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_ARRAY);\n    for (const element of values) {\n      this.writeIndexValueAux(element, encoder);\n    }\n  }\n  writeIndexEntityRef(referenceValue, encoder) {\n    this.writeValueTypeLabel(encoder, INDEX_TYPE_REFERENCE);\n    const path = DocumentKey.fromName(referenceValue).path;\n    path.forEach(segment => {\n      this.writeValueTypeLabel(encoder, INDEX_TYPE_REFERENCE_SEGMENT);\n      this.writeUnlabeledIndexString(segment, encoder);\n    });\n  }\n  writeValueTypeLabel(encoder, typeOrder) {\n    encoder.writeNumber(typeOrder);\n  }\n  writeTruncationMarker(encoder) {\n    // While the SDK does not implement truncation, the truncation marker is\n    // used to terminate all variable length values (which are strings, bytes,\n    // references, arrays and maps).\n    encoder.writeNumber(NOT_TRUNCATED);\n  }\n}\nFirestoreIndexValueWriter.INSTANCE = new FirestoreIndexValueWriter();\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law | agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES | CONDITIONS OF ANY KIND, either express | implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** These constants are taken from the backend. */\nconst MIN_SURROGATE = '\\uD800';\nconst MAX_SURROGATE = '\\uDBFF';\nconst ESCAPE1 = 0x00;\nconst NULL_BYTE = 0xff; // Combined with ESCAPE1\nconst SEPARATOR = 0x01; // Combined with ESCAPE1\nconst ESCAPE2 = 0xff;\nconst INFINITY = 0xff; // Combined with ESCAPE2\nconst FF_BYTE = 0x00; // Combined with ESCAPE2\nconst LONG_SIZE = 64;\nconst BYTE_SIZE = 8;\n/**\r\n * The default size of the buffer. This is arbitrary, but likely larger than\r\n * most index values so that less copies of the underlying buffer will be made.\r\n * For large values, a single copy will made to double the buffer length.\r\n */\nconst DEFAULT_BUFFER_SIZE = 1024;\n/** Converts a JavaScript number to a byte array (using big endian encoding). */\nfunction doubleToLongBits(value) {\n  const dv = new DataView(new ArrayBuffer(8));\n  dv.setFloat64(0, value, /* littleEndian= */false);\n  return new Uint8Array(dv.buffer);\n}\n/**\r\n * Counts the number of zeros in a byte.\r\n *\r\n * Visible for testing.\r\n */\nfunction numberOfLeadingZerosInByte(x) {\n  if (x === 0) {\n    return 8;\n  }\n  let zeros = 0;\n  if (x >> 4 === 0) {\n    // Test if the first four bits are zero.\n    zeros += 4;\n    x = x << 4;\n  }\n  if (x >> 6 === 0) {\n    // Test if the first two (or next two) bits are zero.\n    zeros += 2;\n    x = x << 2;\n  }\n  if (x >> 7 === 0) {\n    // Test if the remaining bit is zero.\n    zeros += 1;\n  }\n  return zeros;\n}\n/** Counts the number of leading zeros in the given byte array. */\nfunction numberOfLeadingZeros(bytes) {\n  let leadingZeros = 0;\n  for (let i = 0; i < 8; ++i) {\n    const zeros = numberOfLeadingZerosInByte(bytes[i] & 0xff);\n    leadingZeros += zeros;\n    if (zeros !== 8) {\n      break;\n    }\n  }\n  return leadingZeros;\n}\n/**\r\n * Returns the number of bytes required to store \"value\". Leading zero bytes\r\n * are skipped.\r\n */\nfunction unsignedNumLength(value) {\n  // This is just the number of bytes for the unsigned representation of the number.\n  const numBits = LONG_SIZE - numberOfLeadingZeros(value);\n  return Math.ceil(numBits / BYTE_SIZE);\n}\n/**\r\n * OrderedCodeWriter is a minimal-allocation implementation of the writing\r\n * behavior defined by the backend.\r\n *\r\n * The code is ported from its Java counterpart.\r\n */\nclass OrderedCodeWriter {\n  constructor() {\n    this.buffer = new Uint8Array(DEFAULT_BUFFER_SIZE);\n    this.position = 0;\n  }\n  writeBytesAscending(value) {\n    const it = value[Symbol.iterator]();\n    let byte = it.next();\n    while (!byte.done) {\n      this.writeByteAscending(byte.value);\n      byte = it.next();\n    }\n    this.writeSeparatorAscending();\n  }\n  writeBytesDescending(value) {\n    const it = value[Symbol.iterator]();\n    let byte = it.next();\n    while (!byte.done) {\n      this.writeByteDescending(byte.value);\n      byte = it.next();\n    }\n    this.writeSeparatorDescending();\n  }\n  /** Writes utf8 bytes into this byte sequence, ascending. */\n  writeUtf8Ascending(sequence) {\n    for (const c of sequence) {\n      const charCode = c.charCodeAt(0);\n      if (charCode < 0x80) {\n        this.writeByteAscending(charCode);\n      } else if (charCode < 0x800) {\n        this.writeByteAscending(0x0f << 6 | charCode >>> 6);\n        this.writeByteAscending(0x80 | 0x3f & charCode);\n      } else if (c < MIN_SURROGATE || MAX_SURROGATE < c) {\n        this.writeByteAscending(0x0f << 5 | charCode >>> 12);\n        this.writeByteAscending(0x80 | 0x3f & charCode >>> 6);\n        this.writeByteAscending(0x80 | 0x3f & charCode);\n      } else {\n        const codePoint = c.codePointAt(0);\n        this.writeByteAscending(0x0f << 4 | codePoint >>> 18);\n        this.writeByteAscending(0x80 | 0x3f & codePoint >>> 12);\n        this.writeByteAscending(0x80 | 0x3f & codePoint >>> 6);\n        this.writeByteAscending(0x80 | 0x3f & codePoint);\n      }\n    }\n    this.writeSeparatorAscending();\n  }\n  /** Writes utf8 bytes into this byte sequence, descending */\n  writeUtf8Descending(sequence) {\n    for (const c of sequence) {\n      const charCode = c.charCodeAt(0);\n      if (charCode < 0x80) {\n        this.writeByteDescending(charCode);\n      } else if (charCode < 0x800) {\n        this.writeByteDescending(0x0f << 6 | charCode >>> 6);\n        this.writeByteDescending(0x80 | 0x3f & charCode);\n      } else if (c < MIN_SURROGATE || MAX_SURROGATE < c) {\n        this.writeByteDescending(0x0f << 5 | charCode >>> 12);\n        this.writeByteDescending(0x80 | 0x3f & charCode >>> 6);\n        this.writeByteDescending(0x80 | 0x3f & charCode);\n      } else {\n        const codePoint = c.codePointAt(0);\n        this.writeByteDescending(0x0f << 4 | codePoint >>> 18);\n        this.writeByteDescending(0x80 | 0x3f & codePoint >>> 12);\n        this.writeByteDescending(0x80 | 0x3f & codePoint >>> 6);\n        this.writeByteDescending(0x80 | 0x3f & codePoint);\n      }\n    }\n    this.writeSeparatorDescending();\n  }\n  writeNumberAscending(val) {\n    // Values are encoded with a single byte length prefix, followed by the\n    // actual value in big-endian format with leading 0 bytes dropped.\n    const value = this.toOrderedBits(val);\n    const len = unsignedNumLength(value);\n    this.ensureAvailable(1 + len);\n    this.buffer[this.position++] = len & 0xff; // Write the length\n    for (let i = value.length - len; i < value.length; ++i) {\n      this.buffer[this.position++] = value[i] & 0xff;\n    }\n  }\n  writeNumberDescending(val) {\n    // Values are encoded with a single byte length prefix, followed by the\n    // inverted value in big-endian format with leading 0 bytes dropped.\n    const value = this.toOrderedBits(val);\n    const len = unsignedNumLength(value);\n    this.ensureAvailable(1 + len);\n    this.buffer[this.position++] = ~(len & 0xff); // Write the length\n    for (let i = value.length - len; i < value.length; ++i) {\n      this.buffer[this.position++] = ~(value[i] & 0xff);\n    }\n  }\n  /**\r\n   * Writes the \"infinity\" byte sequence that sorts after all other byte\r\n   * sequences written in ascending order.\r\n   */\n  writeInfinityAscending() {\n    this.writeEscapedByteAscending(ESCAPE2);\n    this.writeEscapedByteAscending(INFINITY);\n  }\n  /**\r\n   * Writes the \"infinity\" byte sequence that sorts before all other byte\r\n   * sequences written in descending order.\r\n   */\n  writeInfinityDescending() {\n    this.writeEscapedByteDescending(ESCAPE2);\n    this.writeEscapedByteDescending(INFINITY);\n  }\n  /**\r\n   * Resets the buffer such that it is the same as when it was newly\r\n   * constructed.\r\n   */\n  reset() {\n    this.position = 0;\n  }\n  seed(encodedBytes) {\n    this.ensureAvailable(encodedBytes.length);\n    this.buffer.set(encodedBytes, this.position);\n    this.position += encodedBytes.length;\n  }\n  /** Makes a copy of the encoded bytes in this buffer.  */\n  encodedBytes() {\n    return this.buffer.slice(0, this.position);\n  }\n  /**\r\n   * Encodes `val` into an encoding so that the order matches the IEEE 754\r\n   * floating-point comparison results with the following exceptions:\r\n   *   -0.0 < 0.0\r\n   *   all non-NaN < NaN\r\n   *   NaN = NaN\r\n   */\n  toOrderedBits(val) {\n    const value = doubleToLongBits(val);\n    // Check if the first bit is set. We use a bit mask since value[0] is\n    // encoded as a number from 0 to 255.\n    const isNegative = (value[0] & 0x80) !== 0;\n    // Revert the two complement to get natural ordering\n    value[0] ^= isNegative ? 0xff : 0x80;\n    for (let i = 1; i < value.length; ++i) {\n      value[i] ^= isNegative ? 0xff : 0x00;\n    }\n    return value;\n  }\n  /** Writes a single byte ascending to the buffer. */\n  writeByteAscending(b) {\n    const masked = b & 0xff;\n    if (masked === ESCAPE1) {\n      this.writeEscapedByteAscending(ESCAPE1);\n      this.writeEscapedByteAscending(NULL_BYTE);\n    } else if (masked === ESCAPE2) {\n      this.writeEscapedByteAscending(ESCAPE2);\n      this.writeEscapedByteAscending(FF_BYTE);\n    } else {\n      this.writeEscapedByteAscending(masked);\n    }\n  }\n  /** Writes a single byte descending to the buffer.  */\n  writeByteDescending(b) {\n    const masked = b & 0xff;\n    if (masked === ESCAPE1) {\n      this.writeEscapedByteDescending(ESCAPE1);\n      this.writeEscapedByteDescending(NULL_BYTE);\n    } else if (masked === ESCAPE2) {\n      this.writeEscapedByteDescending(ESCAPE2);\n      this.writeEscapedByteDescending(FF_BYTE);\n    } else {\n      this.writeEscapedByteDescending(b);\n    }\n  }\n  writeSeparatorAscending() {\n    this.writeEscapedByteAscending(ESCAPE1);\n    this.writeEscapedByteAscending(SEPARATOR);\n  }\n  writeSeparatorDescending() {\n    this.writeEscapedByteDescending(ESCAPE1);\n    this.writeEscapedByteDescending(SEPARATOR);\n  }\n  writeEscapedByteAscending(b) {\n    this.ensureAvailable(1);\n    this.buffer[this.position++] = b;\n  }\n  writeEscapedByteDescending(b) {\n    this.ensureAvailable(1);\n    this.buffer[this.position++] = ~b;\n  }\n  ensureAvailable(bytes) {\n    const minCapacity = bytes + this.position;\n    if (minCapacity <= this.buffer.length) {\n      return;\n    }\n    // Try doubling.\n    let newLength = this.buffer.length * 2;\n    // Still not big enough? Just allocate the right size.\n    if (newLength < minCapacity) {\n      newLength = minCapacity;\n    }\n    // Create the new buffer.\n    const newBuffer = new Uint8Array(newLength);\n    newBuffer.set(this.buffer); // copy old data\n    this.buffer = newBuffer;\n  }\n}\nclass AscendingIndexByteEncoder {\n  constructor(orderedCode) {\n    this.orderedCode = orderedCode;\n  }\n  writeBytes(value) {\n    this.orderedCode.writeBytesAscending(value);\n  }\n  writeString(value) {\n    this.orderedCode.writeUtf8Ascending(value);\n  }\n  writeNumber(value) {\n    this.orderedCode.writeNumberAscending(value);\n  }\n  writeInfinity() {\n    this.orderedCode.writeInfinityAscending();\n  }\n}\nclass DescendingIndexByteEncoder {\n  constructor(orderedCode) {\n    this.orderedCode = orderedCode;\n  }\n  writeBytes(value) {\n    this.orderedCode.writeBytesDescending(value);\n  }\n  writeString(value) {\n    this.orderedCode.writeUtf8Descending(value);\n  }\n  writeNumber(value) {\n    this.orderedCode.writeNumberDescending(value);\n  }\n  writeInfinity() {\n    this.orderedCode.writeInfinityDescending();\n  }\n}\n/**\r\n * Implements `DirectionalIndexByteEncoder` using `OrderedCodeWriter` for the\r\n * actual encoding.\r\n */\nclass IndexByteEncoder {\n  constructor() {\n    this.orderedCode = new OrderedCodeWriter();\n    this.ascending = new AscendingIndexByteEncoder(this.orderedCode);\n    this.descending = new DescendingIndexByteEncoder(this.orderedCode);\n  }\n  seed(encodedBytes) {\n    this.orderedCode.seed(encodedBytes);\n  }\n  forKind(kind) {\n    return kind === 0 /* IndexKind.ASCENDING */ ? this.ascending : this.descending;\n  }\n  encodedBytes() {\n    return this.orderedCode.encodedBytes();\n  }\n  reset() {\n    this.orderedCode.reset();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Represents an index entry saved by the SDK in persisted storage. */\nclass IndexEntry {\n  constructor(indexId, documentKey, arrayValue, directionalValue) {\n    this.indexId = indexId;\n    this.documentKey = documentKey;\n    this.arrayValue = arrayValue;\n    this.directionalValue = directionalValue;\n  }\n  /**\r\n   * Returns an IndexEntry entry that sorts immediately after the current\r\n   * directional value.\r\n   */\n  successor() {\n    const currentLength = this.directionalValue.length;\n    const newLength = currentLength === 0 || this.directionalValue[currentLength - 1] === 255 ? currentLength + 1 : currentLength;\n    const successor = new Uint8Array(newLength);\n    successor.set(this.directionalValue, 0);\n    if (newLength !== currentLength) {\n      successor.set([0], this.directionalValue.length);\n    } else {\n      ++successor[successor.length - 1];\n    }\n    return new IndexEntry(this.indexId, this.documentKey, this.arrayValue, successor);\n  }\n}\nfunction indexEntryComparator(left, right) {\n  let cmp = left.indexId - right.indexId;\n  if (cmp !== 0) {\n    return cmp;\n  }\n  cmp = compareByteArrays(left.arrayValue, right.arrayValue);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  cmp = compareByteArrays(left.directionalValue, right.directionalValue);\n  if (cmp !== 0) {\n    return cmp;\n  }\n  return DocumentKey.comparator(left.documentKey, right.documentKey);\n}\nfunction compareByteArrays(left, right) {\n  for (let i = 0; i < left.length && i < right.length; ++i) {\n    const compare = left[i] - right[i];\n    if (compare !== 0) {\n      return compare;\n    }\n  }\n  return left.length - right.length;\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A light query planner for Firestore.\r\n *\r\n * This class matches a `FieldIndex` against a Firestore Query `Target`. It\r\n * determines whether a given index can be used to serve the specified target.\r\n *\r\n * The following table showcases some possible index configurations:\r\n *\r\n * Query                                               | Index\r\n * -----------------------------------------------------------------------------\r\n * where('a', '==', 'a').where('b', '==', 'b')         | a ASC, b DESC\r\n * where('a', '==', 'a').where('b', '==', 'b')         | a ASC\r\n * where('a', '==', 'a').where('b', '==', 'b')         | b DESC\r\n * where('a', '>=', 'a').orderBy('a')                  | a ASC\r\n * where('a', '>=', 'a').orderBy('a', 'desc')          | a DESC\r\n * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC, b ASC\r\n * where('a', '>=', 'a').orderBy('a').orderBy('b')     | a ASC\r\n * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS, b ASCENDING\r\n * where('a', 'array-contains', 'a').orderBy('b')      | a CONTAINS\r\n */\nclass TargetIndexMatcher {\n  constructor(target) {\n    // The inequality filters of the target (if it exists).\n    // Note: The sort on FieldFilters is not required. Using SortedSet here just to utilize the custom\n    // comparator.\n    this.inequalityFilters = new SortedSet((lhs, rhs) => FieldPath$1.comparator(lhs.field, rhs.field));\n    this.collectionId = target.collectionGroup != null ? target.collectionGroup : target.path.lastSegment();\n    this.orderBys = target.orderBy;\n    this.equalityFilters = [];\n    for (const filter of target.filters) {\n      const fieldFilter = filter;\n      if (fieldFilter.isInequality()) {\n        this.inequalityFilters = this.inequalityFilters.add(fieldFilter);\n      } else {\n        this.equalityFilters.push(fieldFilter);\n      }\n    }\n  }\n  get hasMultipleInequality() {\n    return this.inequalityFilters.size > 1;\n  }\n  /**\r\n   * Returns whether the index can be used to serve the TargetIndexMatcher's\r\n   * target.\r\n   *\r\n   * An index is considered capable of serving the target when:\r\n   * - The target uses all index segments for its filters and orderBy clauses.\r\n   *   The target can have additional filter and orderBy clauses, but not\r\n   *   fewer.\r\n   * - If an ArrayContains/ArrayContainsAnyfilter is used, the index must also\r\n   *   have a corresponding `CONTAINS` segment.\r\n   * - All directional index segments can be mapped to the target as a series of\r\n   *   equality filters, a single inequality filter and a series of orderBy\r\n   *   clauses.\r\n   * - The segments that represent the equality filters may appear out of order.\r\n   * - The optional segment for the inequality filter must appear after all\r\n   *   equality segments.\r\n   * - The segments that represent that orderBy clause of the target must appear\r\n   *   in order after all equality and inequality segments. Single orderBy\r\n   *   clauses cannot be skipped, but a continuous orderBy suffix may be\r\n   *   omitted.\r\n   */\n  servedByIndex(index) {\n    hardAssert(index.collectionGroup === this.collectionId);\n    if (this.hasMultipleInequality) {\n      // Only single inequality is supported for now.\n      // TODO(Add support for multiple inequality query): b/298441043\n      return false;\n    }\n    // If there is an array element, find a matching filter.\n    const arraySegment = fieldIndexGetArraySegment(index);\n    if (arraySegment !== undefined && !this.hasMatchingEqualityFilter(arraySegment)) {\n      return false;\n    }\n    const segments = fieldIndexGetDirectionalSegments(index);\n    let equalitySegments = new Set();\n    let segmentIndex = 0;\n    let orderBysIndex = 0;\n    // Process all equalities first. Equalities can appear out of order.\n    for (; segmentIndex < segments.length; ++segmentIndex) {\n      // We attempt to greedily match all segments to equality filters. If a\n      // filter matches an index segment, we can mark the segment as used.\n      if (this.hasMatchingEqualityFilter(segments[segmentIndex])) {\n        equalitySegments = equalitySegments.add(segments[segmentIndex].fieldPath.canonicalString());\n      } else {\n        // If we cannot find a matching filter, we need to verify whether the\n        // remaining segments map to the target's inequality and its orderBy\n        // clauses.\n        break;\n      }\n    }\n    // If we already have processed all segments, all segments are used to serve\n    // the equality filters and we do not need to map any segments to the\n    // target's inequality and orderBy clauses.\n    if (segmentIndex === segments.length) {\n      return true;\n    }\n    if (this.inequalityFilters.size > 0) {\n      // Only a single inequality is currently supported. Get the only entry in the set.\n      const inequalityFilter = this.inequalityFilters.getIterator().getNext();\n      // If there is an inequality filter and the field was not in one of the\n      // equality filters above, the next segment must match both the filter\n      // and the first orderBy clause.\n      if (!equalitySegments.has(inequalityFilter.field.canonicalString())) {\n        const segment = segments[segmentIndex];\n        if (!this.matchesFilter(inequalityFilter, segment) || !this.matchesOrderBy(this.orderBys[orderBysIndex++], segment)) {\n          return false;\n        }\n      }\n      ++segmentIndex;\n    }\n    // All remaining segments need to represent the prefix of the target's\n    // orderBy.\n    for (; segmentIndex < segments.length; ++segmentIndex) {\n      const segment = segments[segmentIndex];\n      if (orderBysIndex >= this.orderBys.length || !this.matchesOrderBy(this.orderBys[orderBysIndex++], segment)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  /**\r\n   * Returns a full matched field index for this target. Currently multiple\r\n   * inequality query is not supported so function returns null.\r\n   */\n  buildTargetIndex() {\n    if (this.hasMultipleInequality) {\n      return null;\n    }\n    // We want to make sure only one segment created for one field. For example,\n    // in case like a == 3 and a > 2, Index {a ASCENDING} will only be created\n    // once.\n    let uniqueFields = new SortedSet(FieldPath$1.comparator);\n    const segments = [];\n    for (const filter of this.equalityFilters) {\n      if (filter.field.isKeyField()) {\n        continue;\n      }\n      const isArrayOperator = filter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || filter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\n      if (isArrayOperator) {\n        segments.push(new IndexSegment(filter.field, 2 /* IndexKind.CONTAINS */));\n      } else {\n        if (uniqueFields.has(filter.field)) {\n          continue;\n        }\n        uniqueFields = uniqueFields.add(filter.field);\n        segments.push(new IndexSegment(filter.field, 0 /* IndexKind.ASCENDING */));\n      }\n    }\n    // Note: We do not explicitly check `this.inequalityFilter` but rather rely\n    // on the target defining an appropriate \"order by\" to ensure that the\n    // required index segment is added. The query engine would reject a query\n    // with an inequality filter that lacks the required order-by clause.\n    for (const orderBy of this.orderBys) {\n      // Stop adding more segments if we see a order-by on key. Typically this\n      // is the default implicit order-by which is covered in the index_entry\n      // table as a separate column. If it is not the default order-by, the\n      // generated index will be missing some segments optimized for order-bys,\n      // which is probably fine.\n      if (orderBy.field.isKeyField()) {\n        continue;\n      }\n      if (uniqueFields.has(orderBy.field)) {\n        continue;\n      }\n      uniqueFields = uniqueFields.add(orderBy.field);\n      segments.push(new IndexSegment(orderBy.field, orderBy.dir === \"asc\" /* Direction.ASCENDING */ ? 0 /* IndexKind.ASCENDING */ : 1 /* IndexKind.DESCENDING */));\n    }\n    return new FieldIndex(FieldIndex.UNKNOWN_ID, this.collectionId, segments, IndexState.empty());\n  }\n  hasMatchingEqualityFilter(segment) {\n    for (const filter of this.equalityFilters) {\n      if (this.matchesFilter(filter, segment)) {\n        return true;\n      }\n    }\n    return false;\n  }\n  matchesFilter(filter, segment) {\n    if (filter === undefined || !filter.field.isEqual(segment.fieldPath)) {\n      return false;\n    }\n    const isArrayOperator = filter.op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || filter.op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */;\n    return segment.kind === 2 /* IndexKind.CONTAINS */ === isArrayOperator;\n  }\n  matchesOrderBy(orderBy, segment) {\n    if (!orderBy.field.isEqual(segment.fieldPath)) {\n      return false;\n    }\n    return segment.kind === 0 /* IndexKind.ASCENDING */ && orderBy.dir === \"asc\" /* Direction.ASCENDING */ || segment.kind === 1 /* IndexKind.DESCENDING */ && orderBy.dir === \"desc\" /* Direction.DESCENDING */;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides utility functions that help with boolean logic transformations needed for handling\r\n * complex filters used in queries.\r\n */\n/**\r\n * The `in` filter is only a syntactic sugar over a disjunction of equalities. For instance: `a in\r\n * [1,2,3]` is in fact `a==1 || a==2 || a==3`. This method expands any `in` filter in the given\r\n * input into a disjunction of equality filters and returns the expanded filter.\r\n */\nfunction computeInExpansion(filter) {\n  var _a, _b;\n  hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\n  if (filter instanceof FieldFilter) {\n    if (filter instanceof InFilter) {\n      const expandedFilters = ((_b = (_a = filter.value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) === null || _b === void 0 ? void 0 : _b.map(value => FieldFilter.create(filter.field, \"==\" /* Operator.EQUAL */, value))) || [];\n      return CompositeFilter.create(expandedFilters, \"or\" /* CompositeOperator.OR */);\n    } else {\n      // We have reached other kinds of field filters.\n      return filter;\n    }\n  }\n  // We have a composite filter.\n  const expandedFilters = filter.filters.map(subfilter => computeInExpansion(subfilter));\n  return CompositeFilter.create(expandedFilters, filter.op);\n}\n/**\r\n * Given a composite filter, returns the list of terms in its disjunctive normal form.\r\n *\r\n * <p>Each element in the return value is one term of the resulting DNF. For instance: For the\r\n * input: (A || B) && C, the DNF form is: (A && C) || (B && C), and the return value is a list\r\n * with two elements: a composite filter that performs (A && C), and a composite filter that\r\n * performs (B && C).\r\n *\r\n * @param filter the composite filter to calculate DNF transform for.\r\n * @return the terms in the DNF transform.\r\n */\nfunction getDnfTerms(filter) {\n  if (filter.getFilters().length === 0) {\n    return [];\n  }\n  const result = computeDistributedNormalForm(computeInExpansion(filter));\n  hardAssert(isDisjunctiveNormalForm(result));\n  if (isSingleFieldFilter(result) || isFlatConjunction(result)) {\n    return [result];\n  }\n  return result.getFilters();\n}\n/** Returns true if the given filter is a single field filter. e.g. (a == 10). */\nfunction isSingleFieldFilter(filter) {\n  return filter instanceof FieldFilter;\n}\n/**\r\n * Returns true if the given filter is the conjunction of one or more field filters. e.g. (a == 10\r\n * && b == 20)\r\n */\nfunction isFlatConjunction(filter) {\n  return filter instanceof CompositeFilter && compositeFilterIsFlatConjunction(filter);\n}\n/**\r\n * Returns whether or not the given filter is in disjunctive normal form (DNF).\r\n *\r\n * <p>In boolean logic, a disjunctive normal form (DNF) is a canonical normal form of a logical\r\n * formula consisting of a disjunction of conjunctions; it can also be described as an OR of ANDs.\r\n *\r\n * <p>For more info, visit: https://en.wikipedia.org/wiki/Disjunctive_normal_form\r\n */\nfunction isDisjunctiveNormalForm(filter) {\n  return isSingleFieldFilter(filter) || isFlatConjunction(filter) || isDisjunctionOfFieldFiltersAndFlatConjunctions(filter);\n}\n/**\r\n * Returns true if the given filter is the disjunction of one or more \"flat conjunctions\" and\r\n * field filters. e.g. (a == 10) || (b==20 && c==30)\r\n */\nfunction isDisjunctionOfFieldFiltersAndFlatConjunctions(filter) {\n  if (filter instanceof CompositeFilter) {\n    if (compositeFilterIsDisjunction(filter)) {\n      for (const subFilter of filter.getFilters()) {\n        if (!isSingleFieldFilter(subFilter) && !isFlatConjunction(subFilter)) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\nfunction computeDistributedNormalForm(filter) {\n  hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\n  if (filter instanceof FieldFilter) {\n    return filter;\n  }\n  if (filter.filters.length === 1) {\n    return computeDistributedNormalForm(filter.filters[0]);\n  }\n  // Compute DNF for each of the subfilters first\n  const result = filter.filters.map(subfilter => computeDistributedNormalForm(subfilter));\n  let newFilter = CompositeFilter.create(result, filter.op);\n  newFilter = applyAssociation(newFilter);\n  if (isDisjunctiveNormalForm(newFilter)) {\n    return newFilter;\n  }\n  hardAssert(newFilter instanceof CompositeFilter);\n  hardAssert(compositeFilterIsConjunction(newFilter));\n  hardAssert(newFilter.filters.length > 1);\n  return newFilter.filters.reduce((runningResult, filter) => applyDistribution(runningResult, filter));\n}\nfunction applyDistribution(lhs, rhs) {\n  hardAssert(lhs instanceof FieldFilter || lhs instanceof CompositeFilter);\n  hardAssert(rhs instanceof FieldFilter || rhs instanceof CompositeFilter);\n  let result;\n  if (lhs instanceof FieldFilter) {\n    if (rhs instanceof FieldFilter) {\n      // FieldFilter FieldFilter\n      result = applyDistributionFieldFilters(lhs, rhs);\n    } else {\n      // FieldFilter CompositeFilter\n      result = applyDistributionFieldAndCompositeFilters(lhs, rhs);\n    }\n  } else {\n    if (rhs instanceof FieldFilter) {\n      // CompositeFilter FieldFilter\n      result = applyDistributionFieldAndCompositeFilters(rhs, lhs);\n    } else {\n      // CompositeFilter CompositeFilter\n      result = applyDistributionCompositeFilters(lhs, rhs);\n    }\n  }\n  return applyAssociation(result);\n}\nfunction applyDistributionFieldFilters(lhs, rhs) {\n  // Conjunction distribution for two field filters is the conjunction of them.\n  return CompositeFilter.create([lhs, rhs], \"and\" /* CompositeOperator.AND */);\n}\nfunction applyDistributionCompositeFilters(lhs, rhs) {\n  hardAssert(lhs.filters.length > 0 && rhs.filters.length > 0);\n  // There are four cases:\n  // (A & B) & (C & D) --> (A & B & C & D)\n  // (A & B) & (C | D) --> (A & B & C) | (A & B & D)\n  // (A | B) & (C & D) --> (C & D & A) | (C & D & B)\n  // (A | B) & (C | D) --> (A & C) | (A & D) | (B & C) | (B & D)\n  // Case 1 is a merge.\n  if (compositeFilterIsConjunction(lhs) && compositeFilterIsConjunction(rhs)) {\n    return compositeFilterWithAddedFilters(lhs, rhs.getFilters());\n  }\n  // Case 2,3,4 all have at least one side (lhs or rhs) that is a disjunction. In all three cases\n  // we should take each element of the disjunction and distribute it over the other side, and\n  // return the disjunction of the distribution results.\n  const disjunctionSide = compositeFilterIsDisjunction(lhs) ? lhs : rhs;\n  const otherSide = compositeFilterIsDisjunction(lhs) ? rhs : lhs;\n  const results = disjunctionSide.filters.map(subfilter => applyDistribution(subfilter, otherSide));\n  return CompositeFilter.create(results, \"or\" /* CompositeOperator.OR */);\n}\nfunction applyDistributionFieldAndCompositeFilters(fieldFilter, compositeFilter) {\n  // There are two cases:\n  // A & (B & C) --> (A & B & C)\n  // A & (B | C) --> (A & B) | (A & C)\n  if (compositeFilterIsConjunction(compositeFilter)) {\n    // Case 1\n    return compositeFilterWithAddedFilters(compositeFilter, fieldFilter.getFilters());\n  } else {\n    // Case 2\n    const newFilters = compositeFilter.filters.map(subfilter => applyDistribution(fieldFilter, subfilter));\n    return CompositeFilter.create(newFilters, \"or\" /* CompositeOperator.OR */);\n  }\n}\n/**\r\n * Applies the associativity property to the given filter and returns the resulting filter.\r\n *\r\n * <ul>\r\n *   <li>A | (B | C) == (A | B) | C == (A | B | C)\r\n *   <li>A & (B & C) == (A & B) & C == (A & B & C)\r\n * </ul>\r\n *\r\n * <p>For more info, visit: https://en.wikipedia.org/wiki/Associative_property#Propositional_logic\r\n */\nfunction applyAssociation(filter) {\n  hardAssert(filter instanceof FieldFilter || filter instanceof CompositeFilter);\n  if (filter instanceof FieldFilter) {\n    return filter;\n  }\n  const filters = filter.getFilters();\n  // If the composite filter only contains 1 filter, apply associativity to it.\n  if (filters.length === 1) {\n    return applyAssociation(filters[0]);\n  }\n  // Associativity applied to a flat composite filter results is itself.\n  if (compositeFilterIsFlat(filter)) {\n    return filter;\n  }\n  // First apply associativity to all subfilters. This will in turn recursively apply\n  // associativity to all nested composite filters and field filters.\n  const updatedFilters = filters.map(subfilter => applyAssociation(subfilter));\n  // For composite subfilters that perform the same kind of logical operation as `compositeFilter`\n  // take out their filters and add them to `compositeFilter`. For example:\n  // compositeFilter = (A | (B | C | D))\n  // compositeSubfilter = (B | C | D)\n  // Result: (A | B | C | D)\n  // Note that the `compositeSubfilter` has been eliminated, and its filters (B, C, D) have been\n  // added to the top-level \"compositeFilter\".\n  const newSubfilters = [];\n  updatedFilters.forEach(subfilter => {\n    if (subfilter instanceof FieldFilter) {\n      newSubfilters.push(subfilter);\n    } else if (subfilter instanceof CompositeFilter) {\n      if (subfilter.op === filter.op) {\n        // compositeFilter: (A | (B | C))\n        // compositeSubfilter: (B | C)\n        // Result: (A | B | C)\n        newSubfilters.push(...subfilter.filters);\n      } else {\n        // compositeFilter: (A | (B & C))\n        // compositeSubfilter: (B & C)\n        // Result: (A | (B & C))\n        newSubfilters.push(subfilter);\n      }\n    }\n  });\n  if (newSubfilters.length === 1) {\n    return newSubfilters[0];\n  }\n  return CompositeFilter.create(newSubfilters, filter.op);\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory implementation of IndexManager.\r\n */\nclass MemoryIndexManager {\n  constructor() {\n    this.collectionParentIndex = new MemoryCollectionParentIndex();\n  }\n  addToCollectionParentIndex(transaction, collectionPath) {\n    this.collectionParentIndex.add(collectionPath);\n    return PersistencePromise.resolve();\n  }\n  getCollectionParents(transaction, collectionId) {\n    return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));\n  }\n  addFieldIndex(transaction, index) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  deleteFieldIndex(transaction, index) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  deleteAllFieldIndexes(transaction) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  createTargetIndexes(transaction, target) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  getDocumentsMatchingTarget(transaction, target) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve(null);\n  }\n  getIndexType(transaction, target) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve(0 /* IndexType.NONE */);\n  }\n  getFieldIndexes(transaction, collectionGroup) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve([]);\n  }\n  getNextCollectionGroupToUpdate(transaction) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve(null);\n  }\n  getMinOffset(transaction, target) {\n    return PersistencePromise.resolve(IndexOffset.min());\n  }\n  getMinOffsetFromCollectionGroup(transaction, collectionGroup) {\n    return PersistencePromise.resolve(IndexOffset.min());\n  }\n  updateCollectionGroup(transaction, collectionGroup, offset) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n  updateIndexEntries(transaction, documents) {\n    // Field indices are not supported with memory persistence.\n    return PersistencePromise.resolve();\n  }\n}\n/**\r\n * Internal implementation of the collection-parent index exposed by MemoryIndexManager.\r\n * Also used for in-memory caching by IndexedDbIndexManager and initial index population\r\n * in indexeddb_schema.ts\r\n */\nclass MemoryCollectionParentIndex {\n  constructor() {\n    this.index = {};\n  }\n  // Returns false if the entry already existed.\n  add(collectionPath) {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);\n    const added = !existingParents.has(parentPath);\n    this.index[collectionId] = existingParents.add(parentPath);\n    return added;\n  }\n  has(collectionPath) {\n    const collectionId = collectionPath.lastSegment();\n    const parentPath = collectionPath.popLast();\n    const existingParents = this.index[collectionId];\n    return existingParents && existingParents.has(parentPath);\n  }\n  getEntries(collectionId) {\n    const parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);\n    return parentPaths.toArray();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$f = 'IndexedDbIndexManager';\nconst EMPTY_VALUE = new Uint8Array(0);\n/**\r\n * A persisted implementation of IndexManager.\r\n *\r\n * PORTING NOTE: Unlike iOS and Android, the Web SDK does not memoize index\r\n * data as it supports multi-tab access.\r\n */\nclass IndexedDbIndexManager {\n  constructor(user, databaseId) {\n    this.databaseId = databaseId;\n    /**\r\n     * An in-memory copy of the index entries we've already written since the SDK\r\n     * launched. Used to avoid re-writing the same entry repeatedly.\r\n     *\r\n     * This is *NOT* a complete cache of what's in persistence and so can never be\r\n     * used to satisfy reads.\r\n     */\n    this.collectionParentsCache = new MemoryCollectionParentIndex();\n    /**\r\n     * Maps from a target to its equivalent list of sub-targets. Each sub-target\r\n     * contains only one term from the target's disjunctive normal form (DNF).\r\n     */\n    this.targetToDnfSubTargets = new ObjectMap(t => canonifyTarget(t), (l, r) => targetEquals(l, r));\n    this.uid = user.uid || '';\n  }\n  /**\r\n   * Adds a new entry to the collection parent index.\r\n   *\r\n   * Repeated calls for the same collectionPath should be avoided within a\r\n   * transaction as IndexedDbIndexManager only caches writes once a transaction\r\n   * has been committed.\r\n   */\n  addToCollectionParentIndex(transaction, collectionPath) {\n    if (!this.collectionParentsCache.has(collectionPath)) {\n      const collectionId = collectionPath.lastSegment();\n      const parentPath = collectionPath.popLast();\n      transaction.addOnCommittedListener(() => {\n        // Add the collection to the in memory cache only if the transaction was\n        // successfully committed.\n        this.collectionParentsCache.add(collectionPath);\n      });\n      const collectionParent = {\n        collectionId,\n        parent: encodeResourcePath(parentPath)\n      };\n      return collectionParentsStore(transaction).put(collectionParent);\n    }\n    return PersistencePromise.resolve();\n  }\n  getCollectionParents(transaction, collectionId) {\n    const parentPaths = [];\n    const range = IDBKeyRange.bound([collectionId, ''], [immediateSuccessor(collectionId), ''], /*lowerOpen=*/false, /*upperOpen=*/true);\n    return collectionParentsStore(transaction).loadAll(range).next(entries => {\n      for (const entry of entries) {\n        // This collectionId guard shouldn't be necessary (and isn't as long\n        // as we're running in a real browser), but there's a bug in\n        // indexeddbshim that breaks our range in our tests running in node:\n        // https://github.com/axemclion/IndexedDBShim/issues/334\n        if (entry.collectionId !== collectionId) {\n          break;\n        }\n        parentPaths.push(decodeResourcePath(entry.parent));\n      }\n      return parentPaths;\n    });\n  }\n  addFieldIndex(transaction, index) {\n    // TODO(indexing): Verify that the auto-incrementing index ID works in\n    // Safari & Firefox.\n    const indexes = indexConfigurationStore(transaction);\n    const dbIndex = toDbIndexConfiguration(index);\n    delete dbIndex.indexId; // `indexId` is auto-populated by IndexedDb\n    const result = indexes.add(dbIndex);\n    if (index.indexState) {\n      const states = indexStateStore(transaction);\n      return result.next(indexId => {\n        states.put(toDbIndexState(indexId, this.uid, index.indexState.sequenceNumber, index.indexState.offset));\n      });\n    } else {\n      return result.next();\n    }\n  }\n  deleteFieldIndex(transaction, index) {\n    const indexes = indexConfigurationStore(transaction);\n    const states = indexStateStore(transaction);\n    const entries = indexEntriesStore(transaction);\n    return indexes.delete(index.indexId).next(() => states.delete(IDBKeyRange.bound([index.indexId], [index.indexId + 1], /*lowerOpen=*/false, /*upperOpen=*/true))).next(() => entries.delete(IDBKeyRange.bound([index.indexId], [index.indexId + 1], /*lowerOpen=*/false, /*upperOpen=*/true)));\n  }\n  deleteAllFieldIndexes(transaction) {\n    const indexes = indexConfigurationStore(transaction);\n    const entries = indexEntriesStore(transaction);\n    const states = indexStateStore(transaction);\n    return indexes.deleteAll().next(() => entries.deleteAll()).next(() => states.deleteAll());\n  }\n  createTargetIndexes(transaction, target) {\n    return PersistencePromise.forEach(this.getSubTargets(target), subTarget => {\n      return this.getIndexType(transaction, subTarget).next(type => {\n        if (type === 0 /* IndexType.NONE */ || type === 1 /* IndexType.PARTIAL */) {\n          const targetIndexMatcher = new TargetIndexMatcher(subTarget);\n          const fieldIndex = targetIndexMatcher.buildTargetIndex();\n          if (fieldIndex != null) {\n            return this.addFieldIndex(transaction, fieldIndex);\n          }\n        }\n      });\n    });\n  }\n  getDocumentsMatchingTarget(transaction, target) {\n    const indexEntries = indexEntriesStore(transaction);\n    let canServeTarget = true;\n    const indexes = new Map();\n    return PersistencePromise.forEach(this.getSubTargets(target), subTarget => {\n      return this.getFieldIndex(transaction, subTarget).next(index => {\n        canServeTarget && (canServeTarget = !!index);\n        indexes.set(subTarget, index);\n      });\n    }).next(() => {\n      if (!canServeTarget) {\n        return PersistencePromise.resolve(null);\n      } else {\n        let existingKeys = documentKeySet();\n        const result = [];\n        return PersistencePromise.forEach(indexes, (index, subTarget) => {\n          logDebug(LOG_TAG$f, `Using index ${fieldIndexToString(index)} to execute ${canonifyTarget(target)}`);\n          const arrayValues = targetGetArrayValues(subTarget, index);\n          const notInValues = targetGetNotInValues(subTarget, index);\n          const lowerBound = targetGetLowerBound(subTarget, index);\n          const upperBound = targetGetUpperBound(subTarget, index);\n          const lowerBoundEncoded = this.encodeBound(index, subTarget, lowerBound);\n          const upperBoundEncoded = this.encodeBound(index, subTarget, upperBound);\n          const notInEncoded = this.encodeValues(index, subTarget, notInValues);\n          const indexRanges = this.generateIndexRanges(index.indexId, arrayValues, lowerBoundEncoded, lowerBound.inclusive, upperBoundEncoded, upperBound.inclusive, notInEncoded);\n          return PersistencePromise.forEach(indexRanges, indexRange => {\n            return indexEntries.loadFirst(indexRange, target.limit).next(entries => {\n              entries.forEach(entry => {\n                const documentKey = DocumentKey.fromSegments(entry.documentKey);\n                if (!existingKeys.has(documentKey)) {\n                  existingKeys = existingKeys.add(documentKey);\n                  result.push(documentKey);\n                }\n              });\n            });\n          });\n        }).next(() => result);\n      }\n    });\n  }\n  getSubTargets(target) {\n    let subTargets = this.targetToDnfSubTargets.get(target);\n    if (subTargets) {\n      return subTargets;\n    }\n    if (target.filters.length === 0) {\n      subTargets = [target];\n    } else {\n      // There is an implicit AND operation between all the filters stored in the target\n      const dnf = getDnfTerms(CompositeFilter.create(target.filters, \"and\" /* CompositeOperator.AND */));\n      subTargets = dnf.map(term => newTarget(target.path, target.collectionGroup, target.orderBy, term.getFilters(), target.limit, target.startAt, target.endAt));\n    }\n    this.targetToDnfSubTargets.set(target, subTargets);\n    return subTargets;\n  }\n  /**\r\n   * Constructs a key range query on `DbIndexEntryStore` that unions all\r\n   * bounds.\r\n   */\n  generateIndexRanges(indexId, arrayValues, lowerBounds, lowerBoundInclusive, upperBounds, upperBoundInclusive, notInValues) {\n    // The number of total index scans we union together. This is similar to a\n    // distributed normal form, but adapted for array values. We create a single\n    // index range per value in an ARRAY_CONTAINS or ARRAY_CONTAINS_ANY filter\n    // combined with the values from the query bounds.\n    const totalScans = (arrayValues != null ? arrayValues.length : 1) * Math.max(lowerBounds.length, upperBounds.length);\n    const scansPerArrayElement = totalScans / (arrayValues != null ? arrayValues.length : 1);\n    const indexRanges = [];\n    for (let i = 0; i < totalScans; ++i) {\n      const arrayValue = arrayValues ? this.encodeSingleElement(arrayValues[i / scansPerArrayElement]) : EMPTY_VALUE;\n      const lowerBound = this.generateLowerBound(indexId, arrayValue, lowerBounds[i % scansPerArrayElement], lowerBoundInclusive);\n      const upperBound = this.generateUpperBound(indexId, arrayValue, upperBounds[i % scansPerArrayElement], upperBoundInclusive);\n      const notInBound = notInValues.map(notIn => this.generateLowerBound(indexId, arrayValue, notIn, /* inclusive= */true));\n      indexRanges.push(...this.createRange(lowerBound, upperBound, notInBound));\n    }\n    return indexRanges;\n  }\n  /** Generates the lower bound for `arrayValue` and `directionalValue`. */\n  generateLowerBound(indexId, arrayValue, directionalValue, inclusive) {\n    const entry = new IndexEntry(indexId, DocumentKey.empty(), arrayValue, directionalValue);\n    return inclusive ? entry : entry.successor();\n  }\n  /** Generates the upper bound for `arrayValue` and `directionalValue`. */\n  generateUpperBound(indexId, arrayValue, directionalValue, inclusive) {\n    const entry = new IndexEntry(indexId, DocumentKey.empty(), arrayValue, directionalValue);\n    return inclusive ? entry.successor() : entry;\n  }\n  getFieldIndex(transaction, target) {\n    const targetIndexMatcher = new TargetIndexMatcher(target);\n    const collectionGroup = target.collectionGroup != null ? target.collectionGroup : target.path.lastSegment();\n    return this.getFieldIndexes(transaction, collectionGroup).next(indexes => {\n      // Return the index with the most number of segments.\n      let index = null;\n      for (const candidate of indexes) {\n        const matches = targetIndexMatcher.servedByIndex(candidate);\n        if (matches && (!index || candidate.fields.length > index.fields.length)) {\n          index = candidate;\n        }\n      }\n      return index;\n    });\n  }\n  getIndexType(transaction, target) {\n    let indexType = 2 /* IndexType.FULL */;\n    const subTargets = this.getSubTargets(target);\n    return PersistencePromise.forEach(subTargets, target => {\n      return this.getFieldIndex(transaction, target).next(index => {\n        if (!index) {\n          indexType = 0 /* IndexType.NONE */;\n        } else if (indexType !== 0 /* IndexType.NONE */ && index.fields.length < targetGetSegmentCount(target)) {\n          indexType = 1 /* IndexType.PARTIAL */;\n        }\n      });\n    }).next(() => {\n      // OR queries have more than one sub-target (one sub-target per DNF term). We currently consider\n      // OR queries that have a `limit` to have a partial index. For such queries we perform sorting\n      // and apply the limit in memory as a post-processing step.\n      if (targetHasLimit(target) && subTargets.length > 1 && indexType === 2 /* IndexType.FULL */) {\n        return 1 /* IndexType.PARTIAL */;\n      }\n      return indexType;\n    });\n  }\n  /**\r\n   * Returns the byte encoded form of the directional values in the field index.\r\n   * Returns `null` if the document does not have all fields specified in the\r\n   * index.\r\n   */\n  encodeDirectionalElements(fieldIndex, document) {\n    const encoder = new IndexByteEncoder();\n    for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n      const field = document.data.field(segment.fieldPath);\n      if (field == null) {\n        return null;\n      }\n      const directionalEncoder = encoder.forKind(segment.kind);\n      FirestoreIndexValueWriter.INSTANCE.writeIndexValue(field, directionalEncoder);\n    }\n    return encoder.encodedBytes();\n  }\n  /** Encodes a single value to the ascending index format. */\n  encodeSingleElement(value) {\n    const encoder = new IndexByteEncoder();\n    FirestoreIndexValueWriter.INSTANCE.writeIndexValue(value, encoder.forKind(0 /* IndexKind.ASCENDING */));\n    return encoder.encodedBytes();\n  }\n  /**\r\n   * Returns an encoded form of the document key that sorts based on the key\r\n   * ordering of the field index.\r\n   */\n  encodeDirectionalKey(fieldIndex, documentKey) {\n    const encoder = new IndexByteEncoder();\n    FirestoreIndexValueWriter.INSTANCE.writeIndexValue(refValue(this.databaseId, documentKey), encoder.forKind(fieldIndexGetKeyOrder(fieldIndex)));\n    return encoder.encodedBytes();\n  }\n  /**\r\n   * Encodes the given field values according to the specification in `target`.\r\n   * For IN queries, a list of possible values is returned.\r\n   */\n  encodeValues(fieldIndex, target, values) {\n    if (values === null) {\n      return [];\n    }\n    let encoders = [];\n    encoders.push(new IndexByteEncoder());\n    let valueIdx = 0;\n    for (const segment of fieldIndexGetDirectionalSegments(fieldIndex)) {\n      const value = values[valueIdx++];\n      for (const encoder of encoders) {\n        if (this.isInFilter(target, segment.fieldPath) && isArray(value)) {\n          encoders = this.expandIndexValues(encoders, segment, value);\n        } else {\n          const directionalEncoder = encoder.forKind(segment.kind);\n          FirestoreIndexValueWriter.INSTANCE.writeIndexValue(value, directionalEncoder);\n        }\n      }\n    }\n    return this.getEncodedBytes(encoders);\n  }\n  /**\r\n   * Encodes the given bounds according to the specification in `target`. For IN\r\n   * queries, a list of possible values is returned.\r\n   */\n  encodeBound(fieldIndex, target, bound) {\n    return this.encodeValues(fieldIndex, target, bound.position);\n  }\n  /** Returns the byte representation for the provided encoders. */\n  getEncodedBytes(encoders) {\n    const result = [];\n    for (let i = 0; i < encoders.length; ++i) {\n      result[i] = encoders[i].encodedBytes();\n    }\n    return result;\n  }\n  /**\r\n   * Creates a separate encoder for each element of an array.\r\n   *\r\n   * The method appends each value to all existing encoders (e.g. filter(\"a\",\r\n   * \"==\", \"a1\").filter(\"b\", \"in\", [\"b1\", \"b2\"]) becomes [\"a1,b1\", \"a1,b2\"]). A\r\n   * list of new encoders is returned.\r\n   */\n  expandIndexValues(encoders, segment, value) {\n    const prefixes = [...encoders];\n    const results = [];\n    for (const arrayElement of value.arrayValue.values || []) {\n      for (const prefix of prefixes) {\n        const clonedEncoder = new IndexByteEncoder();\n        clonedEncoder.seed(prefix.encodedBytes());\n        FirestoreIndexValueWriter.INSTANCE.writeIndexValue(arrayElement, clonedEncoder.forKind(segment.kind));\n        results.push(clonedEncoder);\n      }\n    }\n    return results;\n  }\n  isInFilter(target, fieldPath) {\n    return !!target.filters.find(f => f instanceof FieldFilter && f.field.isEqual(fieldPath) && (f.op === \"in\" /* Operator.IN */ || f.op === \"not-in\" /* Operator.NOT_IN */));\n  }\n  getFieldIndexes(transaction, collectionGroup) {\n    const indexes = indexConfigurationStore(transaction);\n    const states = indexStateStore(transaction);\n    return (collectionGroup ? indexes.loadAll(DbIndexConfigurationCollectionGroupIndex, IDBKeyRange.bound(collectionGroup, collectionGroup)) : indexes.loadAll()).next(indexConfigs => {\n      const result = [];\n      return PersistencePromise.forEach(indexConfigs, indexConfig => {\n        return states.get([indexConfig.indexId, this.uid]).next(indexState => {\n          result.push(fromDbIndexConfiguration(indexConfig, indexState));\n        });\n      }).next(() => result);\n    });\n  }\n  getNextCollectionGroupToUpdate(transaction) {\n    return this.getFieldIndexes(transaction).next(indexes => {\n      if (indexes.length === 0) {\n        return null;\n      }\n      indexes.sort((l, r) => {\n        const cmp = l.indexState.sequenceNumber - r.indexState.sequenceNumber;\n        return cmp !== 0 ? cmp : primitiveComparator(l.collectionGroup, r.collectionGroup);\n      });\n      return indexes[0].collectionGroup;\n    });\n  }\n  updateCollectionGroup(transaction, collectionGroup, offset) {\n    const indexes = indexConfigurationStore(transaction);\n    const states = indexStateStore(transaction);\n    return this.getNextSequenceNumber(transaction).next(nextSequenceNumber => indexes.loadAll(DbIndexConfigurationCollectionGroupIndex, IDBKeyRange.bound(collectionGroup, collectionGroup)).next(configs => PersistencePromise.forEach(configs, config => states.put(toDbIndexState(config.indexId, this.uid, nextSequenceNumber, offset)))));\n  }\n  updateIndexEntries(transaction, documents) {\n    // Porting Note: `getFieldIndexes()` on Web does not cache index lookups as\n    // it could be used across different IndexedDB transactions. As any cached\n    // data might be invalidated by other multi-tab clients, we can only trust\n    // data within a single IndexedDB transaction. We therefore add a cache\n    // here.\n    const memoizedIndexes = new Map();\n    return PersistencePromise.forEach(documents, (key, doc) => {\n      const memoizedCollectionIndexes = memoizedIndexes.get(key.collectionGroup);\n      const fieldIndexes = memoizedCollectionIndexes ? PersistencePromise.resolve(memoizedCollectionIndexes) : this.getFieldIndexes(transaction, key.collectionGroup);\n      return fieldIndexes.next(fieldIndexes => {\n        memoizedIndexes.set(key.collectionGroup, fieldIndexes);\n        return PersistencePromise.forEach(fieldIndexes, fieldIndex => {\n          return this.getExistingIndexEntries(transaction, key, fieldIndex).next(existingEntries => {\n            const newEntries = this.computeIndexEntries(doc, fieldIndex);\n            if (!existingEntries.isEqual(newEntries)) {\n              return this.updateEntries(transaction, doc, fieldIndex, existingEntries, newEntries);\n            }\n            return PersistencePromise.resolve();\n          });\n        });\n      });\n    });\n  }\n  addIndexEntry(transaction, document, fieldIndex, indexEntry) {\n    const indexEntries = indexEntriesStore(transaction);\n    return indexEntries.put({\n      indexId: indexEntry.indexId,\n      uid: this.uid,\n      arrayValue: indexEntry.arrayValue,\n      directionalValue: indexEntry.directionalValue,\n      orderedDocumentKey: this.encodeDirectionalKey(fieldIndex, document.key),\n      documentKey: document.key.path.toArray()\n    });\n  }\n  deleteIndexEntry(transaction, document, fieldIndex, indexEntry) {\n    const indexEntries = indexEntriesStore(transaction);\n    return indexEntries.delete([indexEntry.indexId, this.uid, indexEntry.arrayValue, indexEntry.directionalValue, this.encodeDirectionalKey(fieldIndex, document.key), document.key.path.toArray()]);\n  }\n  getExistingIndexEntries(transaction, documentKey, fieldIndex) {\n    const indexEntries = indexEntriesStore(transaction);\n    let results = new SortedSet(indexEntryComparator);\n    return indexEntries.iterate({\n      index: DbIndexEntryDocumentKeyIndex,\n      range: IDBKeyRange.only([fieldIndex.indexId, this.uid, this.encodeDirectionalKey(fieldIndex, documentKey)])\n    }, (_, entry) => {\n      results = results.add(new IndexEntry(fieldIndex.indexId, documentKey, entry.arrayValue, entry.directionalValue));\n    }).next(() => results);\n  }\n  /** Creates the index entries for the given document. */\n  computeIndexEntries(document, fieldIndex) {\n    let results = new SortedSet(indexEntryComparator);\n    const directionalValue = this.encodeDirectionalElements(fieldIndex, document);\n    if (directionalValue == null) {\n      return results;\n    }\n    const arraySegment = fieldIndexGetArraySegment(fieldIndex);\n    if (arraySegment != null) {\n      const value = document.data.field(arraySegment.fieldPath);\n      if (isArray(value)) {\n        for (const arrayValue of value.arrayValue.values || []) {\n          results = results.add(new IndexEntry(fieldIndex.indexId, document.key, this.encodeSingleElement(arrayValue), directionalValue));\n        }\n      }\n    } else {\n      results = results.add(new IndexEntry(fieldIndex.indexId, document.key, EMPTY_VALUE, directionalValue));\n    }\n    return results;\n  }\n  /**\r\n   * Updates the index entries for the provided document by deleting entries\r\n   * that are no longer referenced in `newEntries` and adding all newly added\r\n   * entries.\r\n   */\n  updateEntries(transaction, document, fieldIndex, existingEntries, newEntries) {\n    logDebug(LOG_TAG$f, \"Updating index entries for document '%s'\", document.key);\n    const promises = [];\n    diffSortedSets(existingEntries, newEntries, indexEntryComparator, /* onAdd= */entry => {\n      promises.push(this.addIndexEntry(transaction, document, fieldIndex, entry));\n    }, /* onRemove= */entry => {\n      promises.push(this.deleteIndexEntry(transaction, document, fieldIndex, entry));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  getNextSequenceNumber(transaction) {\n    let nextSequenceNumber = 1;\n    const states = indexStateStore(transaction);\n    return states.iterate({\n      index: DbIndexStateSequenceNumberIndex,\n      reverse: true,\n      range: IDBKeyRange.upperBound([this.uid, Number.MAX_SAFE_INTEGER])\n    }, (_, state, controller) => {\n      controller.done();\n      nextSequenceNumber = state.sequenceNumber + 1;\n    }).next(() => nextSequenceNumber);\n  }\n  /**\r\n   * Returns a new set of IDB ranges that splits the existing range and excludes\r\n   * any values that match the `notInValue` from these ranges. As an example,\r\n   * '[foo > 2 && foo != 3]` becomes  `[foo > 2 && < 3, foo > 3]`.\r\n   */\n  createRange(lower, upper, notInValues) {\n    // The notIn values need to be sorted and unique so that we can return a\n    // sorted set of non-overlapping ranges.\n    notInValues = notInValues.sort((l, r) => indexEntryComparator(l, r)).filter((el, i, values) => !i || indexEntryComparator(el, values[i - 1]) !== 0);\n    const bounds = [];\n    bounds.push(lower);\n    for (const notInValue of notInValues) {\n      const cmpToLower = indexEntryComparator(notInValue, lower);\n      const cmpToUpper = indexEntryComparator(notInValue, upper);\n      if (cmpToLower === 0) {\n        // `notInValue` is the lower bound. We therefore need to raise the bound\n        // to the next value.\n        bounds[0] = lower.successor();\n      } else if (cmpToLower > 0 && cmpToUpper < 0) {\n        // `notInValue` is in the middle of the range\n        bounds.push(notInValue);\n        bounds.push(notInValue.successor());\n      } else if (cmpToUpper > 0) {\n        // `notInValue` (and all following values) are out of the range\n        break;\n      }\n    }\n    bounds.push(upper);\n    const ranges = [];\n    for (let i = 0; i < bounds.length; i += 2) {\n      // If we encounter two bounds that will create an unmatchable key range,\n      // then we return an empty set of key ranges.\n      if (this.isRangeMatchable(bounds[i], bounds[i + 1])) {\n        return [];\n      }\n      const lowerBound = [bounds[i].indexId, this.uid, bounds[i].arrayValue, bounds[i].directionalValue, EMPTY_VALUE, []];\n      const upperBound = [bounds[i + 1].indexId, this.uid, bounds[i + 1].arrayValue, bounds[i + 1].directionalValue, EMPTY_VALUE, []];\n      ranges.push(IDBKeyRange.bound(lowerBound, upperBound));\n    }\n    return ranges;\n  }\n  isRangeMatchable(lowerBound, upperBound) {\n    // If lower bound is greater than the upper bound, then the key\n    // range can never be matched.\n    return indexEntryComparator(lowerBound, upperBound) > 0;\n  }\n  getMinOffsetFromCollectionGroup(transaction, collectionGroup) {\n    return this.getFieldIndexes(transaction, collectionGroup).next(getMinOffsetFromFieldIndexes);\n  }\n  getMinOffset(transaction, target) {\n    return PersistencePromise.mapArray(this.getSubTargets(target), subTarget => this.getFieldIndex(transaction, subTarget).next(index => index ? index : fail())).next(getMinOffsetFromFieldIndexes);\n  }\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the collectionParents\r\n * document store.\r\n */\nfunction collectionParentsStore(txn) {\n  return getStore(txn, DbCollectionParentStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the index entry object store.\r\n */\nfunction indexEntriesStore(txn) {\n  return getStore(txn, DbIndexEntryStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the index configuration object store.\r\n */\nfunction indexConfigurationStore(txn) {\n  return getStore(txn, DbIndexConfigurationStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the index state object store.\r\n */\nfunction indexStateStore(txn) {\n  return getStore(txn, DbIndexStateStore);\n}\nfunction getMinOffsetFromFieldIndexes(fieldIndexes) {\n  hardAssert(fieldIndexes.length !== 0);\n  let minOffset = fieldIndexes[0].indexState.offset;\n  let maxBatchId = minOffset.largestBatchId;\n  for (let i = 1; i < fieldIndexes.length; i++) {\n    const newOffset = fieldIndexes[i].indexState.offset;\n    if (indexOffsetComparator(newOffset, minOffset) < 0) {\n      minOffset = newOffset;\n    }\n    if (maxBatchId < newOffset.largestBatchId) {\n      maxBatchId = newOffset.largestBatchId;\n    }\n  }\n  return new IndexOffset(minOffset.readTime, minOffset.documentKey, maxBatchId);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Delete a mutation batch and the associated document mutations.\r\n * @returns A PersistencePromise of the document mutations that were removed.\r\n */\nfunction removeMutationBatch(txn, userId, batch) {\n  const mutationStore = txn.store(DbMutationBatchStore);\n  const indexTxn = txn.store(DbDocumentMutationStore);\n  const promises = [];\n  const range = IDBKeyRange.only(batch.batchId);\n  let numDeleted = 0;\n  const removePromise = mutationStore.iterate({\n    range\n  }, (key, value, control) => {\n    numDeleted++;\n    return control.delete();\n  });\n  promises.push(removePromise.next(() => {\n    hardAssert(numDeleted === 1);\n  }));\n  const removedDocuments = [];\n  for (const mutation of batch.mutations) {\n    const indexKey = newDbDocumentMutationKey(userId, mutation.key.path, batch.batchId);\n    promises.push(indexTxn.delete(indexKey));\n    removedDocuments.push(mutation.key);\n  }\n  return PersistencePromise.waitFor(promises).next(() => removedDocuments);\n}\n/**\r\n * Returns an approximate size for the given document.\r\n */\nfunction dbDocumentSize(doc) {\n  if (!doc) {\n    return 0;\n  }\n  let value;\n  if (doc.document) {\n    value = doc.document;\n  } else if (doc.unknownDocument) {\n    value = doc.unknownDocument;\n  } else if (doc.noDocument) {\n    value = doc.noDocument;\n  } else {\n    throw fail();\n  }\n  return JSON.stringify(value).length;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** A mutation queue for a specific user, backed by IndexedDB. */\nclass IndexedDbMutationQueue {\n  constructor(\n  /**\r\n   * The normalized userId (e.g. null UID => \"\" userId) used to store /\r\n   * retrieve mutations.\r\n   */\n  userId, serializer, indexManager, referenceDelegate) {\n    this.userId = userId;\n    this.serializer = serializer;\n    this.indexManager = indexManager;\n    this.referenceDelegate = referenceDelegate;\n    /**\r\n     * Caches the document keys for pending mutation batches. If the mutation\r\n     * has been removed from IndexedDb, the cached value may continue to\r\n     * be used to retrieve the batch's document keys. To remove a cached value\r\n     * locally, `removeCachedMutationKeys()` should be invoked either directly\r\n     * or through `removeMutationBatches()`.\r\n     *\r\n     * With multi-tab, when the primary client acknowledges or rejects a mutation,\r\n     * this cache is used by secondary clients to invalidate the local\r\n     * view of the documents that were previously affected by the mutation.\r\n     */\n    // PORTING NOTE: Multi-tab only.\n    this.documentKeysByBatchId = {};\n  }\n  /**\r\n   * Creates a new mutation queue for the given user.\r\n   * @param user - The user for which to create a mutation queue.\r\n   * @param serializer - The serializer to use when persisting to IndexedDb.\r\n   */\n  static forUser(user, serializer, indexManager, referenceDelegate) {\n    // TODO(mcg): Figure out what constraints there are on userIDs\n    // In particular, are there any reserved characters? are empty ids allowed?\n    // For the moment store these together in the same mutations table assuming\n    // that empty userIDs aren't allowed.\n    hardAssert(user.uid !== '');\n    const userId = user.isAuthenticated() ? user.uid : '';\n    return new IndexedDbMutationQueue(userId, serializer, indexManager, referenceDelegate);\n  }\n  checkEmpty(transaction) {\n    let empty = true;\n    const range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatchUserMutationsIndex,\n      range\n    }, (key, value, control) => {\n      empty = false;\n      control.done();\n    }).next(() => empty);\n  }\n  addMutationBatch(transaction, localWriteTime, baseMutations, mutations) {\n    const documentStore = documentMutationsStore(transaction);\n    const mutationStore = mutationsStore(transaction);\n    // The IndexedDb implementation in Chrome (and Firefox) does not handle\n    // compound indices that include auto-generated keys correctly. To ensure\n    // that the index entry is added correctly in all browsers, we perform two\n    // writes: The first write is used to retrieve the next auto-generated Batch\n    // ID, and the second write populates the index and stores the actual\n    // mutation batch.\n    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972\n    // We write an empty object to obtain key\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return mutationStore.add({}).next(batchId => {\n      hardAssert(typeof batchId === 'number');\n      const batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\n      const dbBatch = toDbMutationBatch(this.serializer, this.userId, batch);\n      const promises = [];\n      let collectionParents = new SortedSet((l, r) => primitiveComparator(l.canonicalString(), r.canonicalString()));\n      for (const mutation of mutations) {\n        const indexKey = newDbDocumentMutationKey(this.userId, mutation.key.path, batchId);\n        collectionParents = collectionParents.add(mutation.key.path.popLast());\n        promises.push(mutationStore.put(dbBatch));\n        promises.push(documentStore.put(indexKey, DbDocumentMutationPlaceholder));\n      }\n      collectionParents.forEach(parent => {\n        promises.push(this.indexManager.addToCollectionParentIndex(transaction, parent));\n      });\n      transaction.addOnCommittedListener(() => {\n        this.documentKeysByBatchId[batchId] = batch.keys();\n      });\n      return PersistencePromise.waitFor(promises).next(() => batch);\n    });\n  }\n  lookupMutationBatch(transaction, batchId) {\n    return mutationsStore(transaction).get(batchId).next(dbBatch => {\n      if (dbBatch) {\n        hardAssert(dbBatch.userId === this.userId);\n        return fromDbMutationBatch(this.serializer, dbBatch);\n      }\n      return null;\n    });\n  }\n  /**\r\n   * Returns the document keys for the mutation batch with the given batchId.\r\n   * For primary clients, this method returns `null` after\r\n   * `removeMutationBatches()` has been called. Secondary clients return a\r\n   * cached result until `removeCachedMutationKeys()` is invoked.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n  lookupMutationKeys(transaction, batchId) {\n    if (this.documentKeysByBatchId[batchId]) {\n      return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);\n    } else {\n      return this.lookupMutationBatch(transaction, batchId).next(batch => {\n        if (batch) {\n          const keys = batch.keys();\n          this.documentKeysByBatchId[batchId] = keys;\n          return keys;\n        } else {\n          return null;\n        }\n      });\n    }\n  }\n  getNextMutationBatchAfterBatchId(transaction, batchId) {\n    const nextBatchId = batchId + 1;\n    const range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);\n    let foundBatch = null;\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatchUserMutationsIndex,\n      range\n    }, (key, dbBatch, control) => {\n      if (dbBatch.userId === this.userId) {\n        hardAssert(dbBatch.batchId >= nextBatchId);\n        foundBatch = fromDbMutationBatch(this.serializer, dbBatch);\n      }\n      control.done();\n    }).next(() => foundBatch);\n  }\n  getHighestUnacknowledgedBatchId(transaction) {\n    const range = IDBKeyRange.upperBound([this.userId, Number.POSITIVE_INFINITY]);\n    let batchId = BATCHID_UNKNOWN;\n    return mutationsStore(transaction).iterate({\n      index: DbMutationBatchUserMutationsIndex,\n      range,\n      reverse: true\n    }, (key, dbBatch, control) => {\n      batchId = dbBatch.batchId;\n      control.done();\n    }).next(() => batchId);\n  }\n  getAllMutationBatches(transaction) {\n    const range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);\n    return mutationsStore(transaction).loadAll(DbMutationBatchUserMutationsIndex, range).next(dbBatches => dbBatches.map(dbBatch => fromDbMutationBatch(this.serializer, dbBatch)));\n  }\n  getAllMutationBatchesAffectingDocumentKey(transaction, documentKey) {\n    // Scan the document-mutation index starting with a prefix starting with\n    // the given documentKey.\n    const indexPrefix = newDbDocumentMutationPrefixForPath(this.userId, documentKey.path);\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n    const results = [];\n    return documentMutationsStore(transaction).iterate({\n      range: indexStart\n    }, (indexKey, _, control) => {\n      const [userID, encodedPath, batchId] = indexKey;\n      // Only consider rows matching exactly the specific key of\n      // interest. Note that because we order by path first, and we\n      // order terminators before path separators, we'll encounter all\n      // the index rows for documentKey contiguously. In particular, all\n      // the rows for documentKey will occur before any rows for\n      // documents nested in a subcollection beneath documentKey so we\n      // can stop as soon as we hit any such row.\n      const path = decodeResourcePath(encodedPath);\n      if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n        control.done();\n        return;\n      }\n      // Look up the mutation batch in the store.\n      return mutationsStore(transaction).get(batchId).next(mutation => {\n        if (!mutation) {\n          throw fail();\n        }\n        hardAssert(mutation.userId === this.userId);\n        results.push(fromDbMutationBatch(this.serializer, mutation));\n      });\n    }).next(() => results);\n  }\n  getAllMutationBatchesAffectingDocumentKeys(transaction, documentKeys) {\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    const promises = [];\n    documentKeys.forEach(documentKey => {\n      const indexStart = newDbDocumentMutationPrefixForPath(this.userId, documentKey.path);\n      const range = IDBKeyRange.lowerBound(indexStart);\n      const promise = documentMutationsStore(transaction).iterate({\n        range\n      }, (indexKey, _, control) => {\n        const [userID, encodedPath, batchID] = indexKey;\n        // Only consider rows matching exactly the specific key of\n        // interest. Note that because we order by path first, and we\n        // order terminators before path separators, we'll encounter all\n        // the index rows for documentKey contiguously. In particular, all\n        // the rows for documentKey will occur before any rows for\n        // documents nested in a subcollection beneath documentKey so we\n        // can stop as soon as we hit any such row.\n        const path = decodeResourcePath(encodedPath);\n        if (userID !== this.userId || !documentKey.path.isEqual(path)) {\n          control.done();\n          return;\n        }\n        uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n      });\n      promises.push(promise);\n    });\n    return PersistencePromise.waitFor(promises).next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\n  }\n  getAllMutationBatchesAffectingQuery(transaction, query) {\n    const queryPath = query.path;\n    const immediateChildrenLength = queryPath.length + 1;\n    // TODO(mcg): Actually implement a single-collection query\n    //\n    // This is actually executing an ancestor query, traversing the whole\n    // subtree below the collection which can be horrifically inefficient for\n    // some structures. The right way to solve this is to implement the full\n    // value index, but that's not in the cards in the near future so this is\n    // the best we can do for the moment.\n    //\n    // Since we don't yet index the actual properties in the mutations, our\n    // current approach is to just return all mutation batches that affect\n    // documents in the collection being queried.\n    const indexPrefix = newDbDocumentMutationPrefixForPath(this.userId, queryPath);\n    const indexStart = IDBKeyRange.lowerBound(indexPrefix);\n    // Collect up unique batchIDs encountered during a scan of the index. Use a\n    // SortedSet to accumulate batch IDs so they can be traversed in order in a\n    // scan of the main table.\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    return documentMutationsStore(transaction).iterate({\n      range: indexStart\n    }, (indexKey, _, control) => {\n      const [userID, encodedPath, batchID] = indexKey;\n      const path = decodeResourcePath(encodedPath);\n      if (userID !== this.userId || !queryPath.isPrefixOf(path)) {\n        control.done();\n        return;\n      }\n      // Rows with document keys more than one segment longer than the\n      // query path can't be matches. For example, a query on 'rooms'\n      // can't match the document /rooms/abc/messages/xyx.\n      // TODO(mcg): we'll need a different scanner when we implement\n      // ancestor queries.\n      if (path.length !== immediateChildrenLength) {\n        return;\n      }\n      uniqueBatchIDs = uniqueBatchIDs.add(batchID);\n    }).next(() => this.lookupMutationBatches(transaction, uniqueBatchIDs));\n  }\n  lookupMutationBatches(transaction, batchIDs) {\n    const results = [];\n    const promises = [];\n    // TODO(rockwood): Implement this using iterate.\n    batchIDs.forEach(batchId => {\n      promises.push(mutationsStore(transaction).get(batchId).next(mutation => {\n        if (mutation === null) {\n          throw fail();\n        }\n        hardAssert(mutation.userId === this.userId);\n        results.push(fromDbMutationBatch(this.serializer, mutation));\n      }));\n    });\n    return PersistencePromise.waitFor(promises).next(() => results);\n  }\n  removeMutationBatch(transaction, batch) {\n    return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(removedDocuments => {\n      transaction.addOnCommittedListener(() => {\n        this.removeCachedMutationKeys(batch.batchId);\n      });\n      return PersistencePromise.forEach(removedDocuments, key => {\n        return this.referenceDelegate.markPotentiallyOrphaned(transaction, key);\n      });\n    });\n  }\n  /**\r\n   * Clears the cached keys for a mutation batch. This method should be\r\n   * called by secondary clients after they process mutation updates.\r\n   *\r\n   * Note that this method does not have to be called from primary clients as\r\n   * the corresponding cache entries are cleared when an acknowledged or\r\n   * rejected batch is removed from the mutation queue.\r\n   */\n  // PORTING NOTE: Multi-tab only\n  removeCachedMutationKeys(batchId) {\n    delete this.documentKeysByBatchId[batchId];\n  }\n  performConsistencyCheck(txn) {\n    return this.checkEmpty(txn).next(empty => {\n      if (!empty) {\n        return PersistencePromise.resolve();\n      }\n      // Verify that there are no entries in the documentMutations index if\n      // the queue is empty.\n      const startRange = IDBKeyRange.lowerBound(newDbDocumentMutationPrefixForUser(this.userId));\n      const danglingMutationReferences = [];\n      return documentMutationsStore(txn).iterate({\n        range: startRange\n      }, (key, _, control) => {\n        const userID = key[0];\n        if (userID !== this.userId) {\n          control.done();\n          return;\n        } else {\n          const path = decodeResourcePath(key[1]);\n          danglingMutationReferences.push(path);\n        }\n      }).next(() => {\n        hardAssert(danglingMutationReferences.length === 0);\n      });\n    });\n  }\n  containsKey(txn, key) {\n    return mutationQueueContainsKey(txn, this.userId, key);\n  }\n  // PORTING NOTE: Multi-tab only (state is held in memory in other clients).\n  /** Returns the mutation queue's metadata from IndexedDb. */\n  getMutationQueueMetadata(transaction) {\n    return mutationQueuesStore(transaction).get(this.userId).next(metadata => {\n      return metadata || {\n        userId: this.userId,\n        lastAcknowledgedBatchId: BATCHID_UNKNOWN,\n        lastStreamToken: ''\n      };\n    });\n  }\n}\n/**\r\n * @returns true if the mutation queue for the given user contains a pending\r\n *         mutation for the given key.\r\n */\nfunction mutationQueueContainsKey(txn, userId, key) {\n  const indexKey = newDbDocumentMutationPrefixForPath(userId, key.path);\n  const encodedPath = indexKey[1];\n  const startRange = IDBKeyRange.lowerBound(indexKey);\n  let containsKey = false;\n  return documentMutationsStore(txn).iterate({\n    range: startRange,\n    keysOnly: true\n  }, (key, value, control) => {\n    const [userID, keyPath, /*batchID*/_] = key;\n    if (userID === userId && keyPath === encodedPath) {\n      containsKey = true;\n    }\n    control.done();\n  }).next(() => containsKey);\n}\n/** Returns true if any mutation queue contains the given document. */\nfunction mutationQueuesContainKey(txn, docKey) {\n  let found = false;\n  return mutationQueuesStore(txn).iterateSerial(userId => {\n    return mutationQueueContainsKey(txn, userId, docKey).next(containsKey => {\n      if (containsKey) {\n        found = true;\n      }\n      return PersistencePromise.resolve(!containsKey);\n    });\n  }).next(() => found);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the mutations object store.\r\n */\nfunction mutationsStore(txn) {\n  return getStore(txn, DbMutationBatchStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\nfunction documentMutationsStore(txn) {\n  return getStore(txn, DbDocumentMutationStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the mutationQueues object store.\r\n */\nfunction mutationQueuesStore(txn) {\n  return getStore(txn, DbMutationQueueStore);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Offset to ensure non-overlapping target ids. */\nconst OFFSET = 2;\n/**\r\n * Generates monotonically increasing target IDs for sending targets to the\r\n * watch stream.\r\n *\r\n * The client constructs two generators, one for the target cache, and one for\r\n * for the sync engine (to generate limbo documents targets). These\r\n * generators produce non-overlapping IDs (by using even and odd IDs\r\n * respectively).\r\n *\r\n * By separating the target ID space, the query cache can generate target IDs\r\n * that persist across client restarts, while sync engine can independently\r\n * generate in-memory target IDs that are transient and can be reused after a\r\n * restart.\r\n */\nclass TargetIdGenerator {\n  constructor(lastId) {\n    this.lastId = lastId;\n  }\n  next() {\n    this.lastId += OFFSET;\n    return this.lastId;\n  }\n  static forTargetCache() {\n    // The target cache generator must return '2' in its first call to `next()`\n    // as there is no differentiation in the protocol layer between an unset\n    // number and the number '0'. If we were to sent a target with target ID\n    // '0', the backend would consider it unset and replace it with its own ID.\n    return new TargetIdGenerator(2 - OFFSET);\n  }\n  static forSyncEngine() {\n    // Sync engine assigns target IDs for limbo document detection.\n    return new TargetIdGenerator(1 - OFFSET);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass IndexedDbTargetCache {\n  constructor(referenceDelegate, serializer) {\n    this.referenceDelegate = referenceDelegate;\n    this.serializer = serializer;\n  }\n  // PORTING NOTE: We don't cache global metadata for the target cache, since\n  // some of it (in particular `highestTargetId`) can be modified by secondary\n  // tabs. We could perhaps be more granular (and e.g. still cache\n  // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go\n  // to IndexedDb whenever we need to read metadata. We can revisit if it turns\n  // out to have a meaningful performance impact.\n  allocateTargetId(transaction) {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      const targetIdGenerator = new TargetIdGenerator(metadata.highestTargetId);\n      metadata.highestTargetId = targetIdGenerator.next();\n      return this.saveMetadata(transaction, metadata).next(() => metadata.highestTargetId);\n    });\n  }\n  getLastRemoteSnapshotVersion(transaction) {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));\n    });\n  }\n  getHighestSequenceNumber(transaction) {\n    return this.retrieveMetadata(transaction).next(targetGlobal => targetGlobal.highestListenSequenceNumber);\n  }\n  setTargetsMetadata(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\n    return this.retrieveMetadata(transaction).next(metadata => {\n      metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      if (lastRemoteSnapshotVersion) {\n        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();\n      }\n      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {\n        metadata.highestListenSequenceNumber = highestListenSequenceNumber;\n      }\n      return this.saveMetadata(transaction, metadata);\n    });\n  }\n  addTargetData(transaction, targetData) {\n    return this.saveTargetData(transaction, targetData).next(() => {\n      return this.retrieveMetadata(transaction).next(metadata => {\n        metadata.targetCount += 1;\n        this.updateMetadataFromTargetData(targetData, metadata);\n        return this.saveMetadata(transaction, metadata);\n      });\n    });\n  }\n  updateTargetData(transaction, targetData) {\n    return this.saveTargetData(transaction, targetData);\n  }\n  removeTargetData(transaction, targetData) {\n    return this.removeMatchingKeysForTargetId(transaction, targetData.targetId).next(() => targetsStore(transaction).delete(targetData.targetId)).next(() => this.retrieveMetadata(transaction)).next(metadata => {\n      hardAssert(metadata.targetCount > 0);\n      metadata.targetCount -= 1;\n      return this.saveMetadata(transaction, metadata);\n    });\n  }\n  /**\r\n   * Drops any targets with sequence number less than or equal to the upper bound, excepting those\r\n   * present in `activeTargetIds`. Document associations for the removed targets are also removed.\r\n   * Returns the number of targets removed.\r\n   */\n  removeTargets(txn, upperBound, activeTargetIds) {\n    let count = 0;\n    const promises = [];\n    return targetsStore(txn).iterate((key, value) => {\n      const targetData = fromDbTarget(value);\n      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {\n        count++;\n        promises.push(this.removeTargetData(txn, targetData));\n      }\n    }).next(() => PersistencePromise.waitFor(promises)).next(() => count);\n  }\n  /**\r\n   * Call provided function with each `TargetData` that we have cached.\r\n   */\n  forEachTarget(txn, f) {\n    return targetsStore(txn).iterate((key, value) => {\n      const targetData = fromDbTarget(value);\n      f(targetData);\n    });\n  }\n  retrieveMetadata(transaction) {\n    return globalTargetStore(transaction).get(DbTargetGlobalKey).next(metadata => {\n      hardAssert(metadata !== null);\n      return metadata;\n    });\n  }\n  saveMetadata(transaction, metadata) {\n    return globalTargetStore(transaction).put(DbTargetGlobalKey, metadata);\n  }\n  saveTargetData(transaction, targetData) {\n    return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));\n  }\n  /**\r\n   * In-place updates the provided metadata to account for values in the given\r\n   * TargetData. Saving is done separately. Returns true if there were any\r\n   * changes to the metadata.\r\n   */\n  updateMetadataFromTargetData(targetData, metadata) {\n    let updated = false;\n    if (targetData.targetId > metadata.highestTargetId) {\n      metadata.highestTargetId = targetData.targetId;\n      updated = true;\n    }\n    if (targetData.sequenceNumber > metadata.highestListenSequenceNumber) {\n      metadata.highestListenSequenceNumber = targetData.sequenceNumber;\n      updated = true;\n    }\n    return updated;\n  }\n  getTargetCount(transaction) {\n    return this.retrieveMetadata(transaction).next(metadata => metadata.targetCount);\n  }\n  getTargetData(transaction, target) {\n    // Iterating by the canonicalId may yield more than one result because\n    // canonicalId values are not required to be unique per target. This query\n    // depends on the queryTargets index to be efficient.\n    const canonicalId = canonifyTarget(target);\n    const range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);\n    let result = null;\n    return targetsStore(transaction).iterate({\n      range,\n      index: DbTargetQueryTargetsIndexName\n    }, (key, value, control) => {\n      const found = fromDbTarget(value);\n      // After finding a potential match, check that the target is\n      // actually equal to the requested target.\n      if (targetEquals(target, found.target)) {\n        result = found;\n        control.done();\n      }\n    }).next(() => result);\n  }\n  addMatchingKeys(txn, keys, targetId) {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const promises = [];\n    const store = documentTargetStore(txn);\n    keys.forEach(key => {\n      const path = encodeResourcePath(key.path);\n      promises.push(store.put({\n        targetId,\n        path\n      }));\n      promises.push(this.referenceDelegate.addReference(txn, targetId, key));\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  removeMatchingKeys(txn, keys, targetId) {\n    // PORTING NOTE: The reverse index (documentsTargets) is maintained by\n    // IndexedDb.\n    const store = documentTargetStore(txn);\n    return PersistencePromise.forEach(keys, key => {\n      const path = encodeResourcePath(key.path);\n      return PersistencePromise.waitFor([store.delete([targetId, path]), this.referenceDelegate.removeReference(txn, targetId, key)]);\n    });\n  }\n  removeMatchingKeysForTargetId(txn, targetId) {\n    const store = documentTargetStore(txn);\n    const range = IDBKeyRange.bound([targetId], [targetId + 1], /*lowerOpen=*/false, /*upperOpen=*/true);\n    return store.delete(range);\n  }\n  getMatchingKeysForTargetId(txn, targetId) {\n    const range = IDBKeyRange.bound([targetId], [targetId + 1], /*lowerOpen=*/false, /*upperOpen=*/true);\n    const store = documentTargetStore(txn);\n    let result = documentKeySet();\n    return store.iterate({\n      range,\n      keysOnly: true\n    }, (key, _, control) => {\n      const path = decodeResourcePath(key[1]);\n      const docKey = new DocumentKey(path);\n      result = result.add(docKey);\n    }).next(() => result);\n  }\n  containsKey(txn, key) {\n    const path = encodeResourcePath(key.path);\n    const range = IDBKeyRange.bound([path], [immediateSuccessor(path)], /*lowerOpen=*/false, /*upperOpen=*/true);\n    let count = 0;\n    return documentTargetStore(txn).iterate({\n      index: DbTargetDocumentDocumentTargetsIndex,\n      keysOnly: true,\n      range\n    }, ([targetId, path], _, control) => {\n      // Having a sentinel row for a document does not count as containing that document;\n      // For the target cache, containing the document means the document is part of some\n      // target.\n      if (targetId !== 0) {\n        count++;\n        control.done();\n      }\n    }).next(() => count > 0);\n  }\n  /**\r\n   * Looks up a TargetData entry by target ID.\r\n   *\r\n   * @param targetId - The target ID of the TargetData entry to look up.\r\n   * @returns The cached TargetData entry, or null if the cache has no entry for\r\n   * the target.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n  getTargetDataForTarget(transaction, targetId) {\n    return targetsStore(transaction).get(targetId).next(found => {\n      if (found) {\n        return fromDbTarget(found);\n      } else {\n        return null;\n      }\n    });\n  }\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the queries object store.\r\n */\nfunction targetsStore(txn) {\n  return getStore(txn, DbTargetStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the target globals object store.\r\n */\nfunction globalTargetStore(txn) {\n  return getStore(txn, DbTargetGlobalStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the document target object store.\r\n */\nfunction documentTargetStore(txn) {\n  return getStore(txn, DbTargetDocumentStore);\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst GC_DID_NOT_RUN = {\n  didRun: false,\n  sequenceNumbersCollected: 0,\n  targetsRemoved: 0,\n  documentsRemoved: 0\n};\nconst LRU_COLLECTION_DISABLED = -1;\nconst LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;\nclass LruParams {\n  constructor(\n  // When we attempt to collect, we will only do so if the cache size is greater than this\n  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.\n  cacheSizeCollectionThreshold,\n  // The percentage of sequence numbers that we will attempt to collect\n  percentileToCollect,\n  // A cap on the total number of sequence numbers that will be collected. This prevents\n  // us from collecting a huge number of sequence numbers if the cache has grown very large.\n  maximumSequenceNumbersToCollect) {\n    this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;\n    this.percentileToCollect = percentileToCollect;\n    this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;\n  }\n  static withCacheSize(cacheSize) {\n    return new LruParams(cacheSize, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\n  }\n}\nLruParams.DEFAULT_COLLECTION_PERCENTILE = 10;\nLruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;\nLruParams.DEFAULT = new LruParams(LRU_DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);\nLruParams.DISABLED = new LruParams(LRU_COLLECTION_DISABLED, 0, 0);\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$e = 'LruGarbageCollector';\nconst LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;\n/** How long we wait to try running LRU GC after SDK initialization. */\nconst INITIAL_GC_DELAY_MS = 1 * 60 * 1000;\n/** Minimum amount of time between GC checks, after the first one. */\nconst REGULAR_GC_DELAY_MS = 5 * 60 * 1000;\nfunction bufferEntryComparator([aSequence, aIndex], [bSequence, bIndex]) {\n  const seqCmp = primitiveComparator(aSequence, bSequence);\n  if (seqCmp === 0) {\n    // This order doesn't matter, but we can bias against churn by sorting\n    // entries created earlier as less than newer entries.\n    return primitiveComparator(aIndex, bIndex);\n  } else {\n    return seqCmp;\n  }\n}\n/**\r\n * Used to calculate the nth sequence number. Keeps a rolling buffer of the\r\n * lowest n values passed to `addElement`, and finally reports the largest of\r\n * them in `maxValue`.\r\n */\nclass RollingSequenceNumberBuffer {\n  constructor(maxElements) {\n    this.maxElements = maxElements;\n    this.buffer = new SortedSet(bufferEntryComparator);\n    this.previousIndex = 0;\n  }\n  nextIndex() {\n    return ++this.previousIndex;\n  }\n  addElement(sequenceNumber) {\n    const entry = [sequenceNumber, this.nextIndex()];\n    if (this.buffer.size < this.maxElements) {\n      this.buffer = this.buffer.add(entry);\n    } else {\n      const highestValue = this.buffer.last();\n      if (bufferEntryComparator(entry, highestValue) < 0) {\n        this.buffer = this.buffer.delete(highestValue).add(entry);\n      }\n    }\n  }\n  get maxValue() {\n    // Guaranteed to be non-empty. If we decide we are not collecting any\n    // sequence numbers, nthSequenceNumber below short-circuits. If we have\n    // decided that we are collecting n sequence numbers, it's because n is some\n    // percentage of the existing sequence numbers. That means we should never\n    // be in a situation where we are collecting sequence numbers but don't\n    // actually have any.\n    return this.buffer.last()[0];\n  }\n}\n/**\r\n * This class is responsible for the scheduling of LRU garbage collection. It handles checking\r\n * whether or not GC is enabled, as well as which delay to use before the next run.\r\n */\nclass LruScheduler {\n  constructor(garbageCollector, asyncQueue, localStore) {\n    this.garbageCollector = garbageCollector;\n    this.asyncQueue = asyncQueue;\n    this.localStore = localStore;\n    this.gcTask = null;\n  }\n  start() {\n    if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LRU_COLLECTION_DISABLED) {\n      this.scheduleGC(INITIAL_GC_DELAY_MS);\n    }\n  }\n  stop() {\n    if (this.gcTask) {\n      this.gcTask.cancel();\n      this.gcTask = null;\n    }\n  }\n  get started() {\n    return this.gcTask !== null;\n  }\n  scheduleGC(delay) {\n    logDebug(LOG_TAG$e, `Garbage collection scheduled in ${delay}ms`);\n    this.gcTask = this.asyncQueue.enqueueAfterDelay(\"lru_garbage_collection\" /* TimerId.LruGarbageCollection */, delay, async () => {\n      this.gcTask = null;\n      try {\n        await this.localStore.collectGarbage(this.garbageCollector);\n      } catch (e) {\n        if (isIndexedDbTransactionError(e)) {\n          logDebug(LOG_TAG$e, 'Ignoring IndexedDB error during garbage collection: ', e);\n        } else {\n          await ignoreIfPrimaryLeaseLoss(e);\n        }\n      }\n      await this.scheduleGC(REGULAR_GC_DELAY_MS);\n    });\n  }\n}\n/**\r\n * Implements the steps for LRU garbage collection.\r\n */\nclass LruGarbageCollectorImpl {\n  constructor(delegate, params) {\n    this.delegate = delegate;\n    this.params = params;\n  }\n  calculateTargetCount(txn, percentile) {\n    return this.delegate.getSequenceNumberCount(txn).next(targetCount => {\n      return Math.floor(percentile / 100.0 * targetCount);\n    });\n  }\n  nthSequenceNumber(txn, n) {\n    if (n === 0) {\n      return PersistencePromise.resolve(ListenSequence.INVALID);\n    }\n    const buffer = new RollingSequenceNumberBuffer(n);\n    return this.delegate.forEachTarget(txn, target => buffer.addElement(target.sequenceNumber)).next(() => {\n      return this.delegate.forEachOrphanedDocumentSequenceNumber(txn, sequenceNumber => buffer.addElement(sequenceNumber));\n    }).next(() => buffer.maxValue);\n  }\n  removeTargets(txn, upperBound, activeTargetIds) {\n    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);\n  }\n  removeOrphanedDocuments(txn, upperBound) {\n    return this.delegate.removeOrphanedDocuments(txn, upperBound);\n  }\n  collect(txn, activeTargetIds) {\n    if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {\n      logDebug('LruGarbageCollector', 'Garbage collection skipped; disabled');\n      return PersistencePromise.resolve(GC_DID_NOT_RUN);\n    }\n    return this.getCacheSize(txn).next(cacheSize => {\n      if (cacheSize < this.params.cacheSizeCollectionThreshold) {\n        logDebug('LruGarbageCollector', `Garbage collection skipped; Cache size ${cacheSize} ` + `is lower than threshold ${this.params.cacheSizeCollectionThreshold}`);\n        return GC_DID_NOT_RUN;\n      } else {\n        return this.runGarbageCollection(txn, activeTargetIds);\n      }\n    });\n  }\n  getCacheSize(txn) {\n    return this.delegate.getCacheSize(txn);\n  }\n  runGarbageCollection(txn, activeTargetIds) {\n    let upperBoundSequenceNumber;\n    let sequenceNumbersToCollect, targetsRemoved;\n    // Timestamps for various pieces of the process\n    let countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;\n    const startTs = Date.now();\n    return this.calculateTargetCount(txn, this.params.percentileToCollect).next(sequenceNumbers => {\n      // Cap at the configured max\n      if (sequenceNumbers > this.params.maximumSequenceNumbersToCollect) {\n        logDebug('LruGarbageCollector', 'Capping sequence numbers to collect down ' + `to the maximum of ${this.params.maximumSequenceNumbersToCollect} ` + `from ${sequenceNumbers}`);\n        sequenceNumbersToCollect = this.params.maximumSequenceNumbersToCollect;\n      } else {\n        sequenceNumbersToCollect = sequenceNumbers;\n      }\n      countedTargetsTs = Date.now();\n      return this.nthSequenceNumber(txn, sequenceNumbersToCollect);\n    }).next(upperBound => {\n      upperBoundSequenceNumber = upperBound;\n      foundUpperBoundTs = Date.now();\n      return this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);\n    }).next(numTargetsRemoved => {\n      targetsRemoved = numTargetsRemoved;\n      removedTargetsTs = Date.now();\n      return this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);\n    }).next(documentsRemoved => {\n      removedDocumentsTs = Date.now();\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        const desc = 'LRU Garbage Collection\\n' + `\\tCounted targets in ${countedTargetsTs - startTs}ms\\n` + `\\tDetermined least recently used ${sequenceNumbersToCollect} in ` + `${foundUpperBoundTs - countedTargetsTs}ms\\n` + `\\tRemoved ${targetsRemoved} targets in ` + `${removedTargetsTs - foundUpperBoundTs}ms\\n` + `\\tRemoved ${documentsRemoved} documents in ` + `${removedDocumentsTs - removedTargetsTs}ms\\n` + `Total Duration: ${removedDocumentsTs - startTs}ms`;\n        logDebug('LruGarbageCollector', desc);\n      }\n      return PersistencePromise.resolve({\n        didRun: true,\n        sequenceNumbersCollected: sequenceNumbersToCollect,\n        targetsRemoved,\n        documentsRemoved\n      });\n    });\n  }\n}\nfunction newLruGarbageCollector(delegate, params) {\n  return new LruGarbageCollectorImpl(delegate, params);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Provides LRU functionality for IndexedDB persistence. */\nclass IndexedDbLruDelegateImpl {\n  constructor(db, params) {\n    this.db = db;\n    this.garbageCollector = newLruGarbageCollector(this, params);\n  }\n  getSequenceNumberCount(txn) {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.db.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(targetCount => docCountPromise.next(docCount => targetCount + docCount));\n  }\n  orphanedDocumentCount(txn) {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n  forEachTarget(txn, f) {\n    return this.db.getTargetCache().forEachTarget(txn, f);\n  }\n  forEachOrphanedDocumentSequenceNumber(txn, f) {\n    return this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) => f(sequenceNumber));\n  }\n  addReference(txn, targetId, key) {\n    return writeSentinelKey(txn, key);\n  }\n  removeReference(txn, targetId, key) {\n    return writeSentinelKey(txn, key);\n  }\n  removeTargets(txn, upperBound, activeTargetIds) {\n    return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);\n  }\n  markPotentiallyOrphaned(txn, key) {\n    return writeSentinelKey(txn, key);\n  }\n  /**\r\n   * Returns true if anything would prevent this document from being garbage\r\n   * collected, given that the document in question is not present in any\r\n   * targets and has a sequence number less than or equal to the upper bound for\r\n   * the collection run.\r\n   */\n  isPinned(txn, docKey) {\n    return mutationQueuesContainKey(txn, docKey);\n  }\n  removeOrphanedDocuments(txn, upperBound) {\n    const documentCache = this.db.getRemoteDocumentCache();\n    const changeBuffer = documentCache.newChangeBuffer();\n    const promises = [];\n    let documentCount = 0;\n    const iteration = this.forEachOrphanedDocument(txn, (docKey, sequenceNumber) => {\n      if (sequenceNumber <= upperBound) {\n        const p = this.isPinned(txn, docKey).next(isPinned => {\n          if (!isPinned) {\n            documentCount++;\n            // Our size accounting requires us to read all documents before\n            // removing them.\n            return changeBuffer.getEntry(txn, docKey).next(() => {\n              changeBuffer.removeEntry(docKey, SnapshotVersion.min());\n              return documentTargetStore(txn).delete(sentinelKey$1(docKey));\n            });\n          }\n        });\n        promises.push(p);\n      }\n    });\n    return iteration.next(() => PersistencePromise.waitFor(promises)).next(() => changeBuffer.apply(txn)).next(() => documentCount);\n  }\n  removeTarget(txn, targetData) {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.db.getTargetCache().updateTargetData(txn, updated);\n  }\n  updateLimboDocument(txn, key) {\n    return writeSentinelKey(txn, key);\n  }\n  /**\r\n   * Call provided function for each document in the cache that is 'orphaned'. Orphaned\r\n   * means not a part of any target, so the only entry in the target-document index for\r\n   * that document will be the sentinel row (targetId 0), which will also have the sequence\r\n   * number for the last time the document was accessed.\r\n   */\n  forEachOrphanedDocument(txn, f) {\n    const store = documentTargetStore(txn);\n    let nextToReport = ListenSequence.INVALID;\n    let nextPath;\n    return store.iterate({\n      index: DbTargetDocumentDocumentTargetsIndex\n    }, ([targetId, docKey], {\n      path,\n      sequenceNumber\n    }) => {\n      if (targetId === 0) {\n        // if nextToReport is valid, report it, this is a new key so the\n        // last one must not be a member of any targets.\n        if (nextToReport !== ListenSequence.INVALID) {\n          f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n        }\n        // set nextToReport to be this sequence number. It's the next one we\n        // might report, if we don't find any targets for this document.\n        // Note that the sequence number must be defined when the targetId\n        // is 0.\n        nextToReport = sequenceNumber;\n        nextPath = path;\n      } else {\n        // set nextToReport to be invalid, we know we don't need to report\n        // this one since we found a target for it.\n        nextToReport = ListenSequence.INVALID;\n      }\n    }).next(() => {\n      // Since we report sequence numbers after getting to the next key, we\n      // need to check if the last key we iterated over was an orphaned\n      // document and report it.\n      if (nextToReport !== ListenSequence.INVALID) {\n        f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);\n      }\n    });\n  }\n  getCacheSize(txn) {\n    return this.db.getRemoteDocumentCache().getSize(txn);\n  }\n}\nfunction sentinelKey$1(key) {\n  return [0, encodeResourcePath(key.path)];\n}\n/**\r\n * @returns A value suitable for writing a sentinel row in the target-document\r\n * store.\r\n */\nfunction sentinelRow(key, sequenceNumber) {\n  return {\n    targetId: 0,\n    path: encodeResourcePath(key.path),\n    sequenceNumber\n  };\n}\nfunction writeSentinelKey(txn, key) {\n  return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory buffer of entries to be written to a RemoteDocumentCache.\r\n * It can be used to batch up a set of changes to be written to the cache, but\r\n * additionally supports reading entries back with the `getEntry()` method,\r\n * falling back to the underlying RemoteDocumentCache if no entry is\r\n * buffered.\r\n *\r\n * Entries added to the cache *must* be read first. This is to facilitate\r\n * calculating the size delta of the pending changes.\r\n *\r\n * PORTING NOTE: This class was implemented then removed from other platforms.\r\n * If byte-counting ends up being needed on the other platforms, consider\r\n * porting this class as part of that implementation work.\r\n */\nclass RemoteDocumentChangeBuffer {\n  constructor() {\n    // A mapping of document key to the new cache entry that should be written.\n    this.changes = new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\n    this.changesApplied = false;\n  }\n  /**\r\n   * Buffers a `RemoteDocumentCache.addEntry()` call.\r\n   *\r\n   * You can only modify documents that have already been retrieved via\r\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n   */\n  addEntry(document) {\n    this.assertNotApplied();\n    this.changes.set(document.key, document);\n  }\n  /**\r\n   * Buffers a `RemoteDocumentCache.removeEntry()` call.\r\n   *\r\n   * You can only remove documents that have already been retrieved via\r\n   * `getEntry()/getEntries()` (enforced via IndexedDbs `apply()`).\r\n   */\n  removeEntry(key, readTime) {\n    this.assertNotApplied();\n    this.changes.set(key, MutableDocument.newInvalidDocument(key).setReadTime(readTime));\n  }\n  /**\r\n   * Looks up an entry in the cache. The buffered changes will first be checked,\r\n   * and if no buffered change applies, this will forward to\r\n   * `RemoteDocumentCache.getEntry()`.\r\n   *\r\n   * @param transaction - The transaction in which to perform any persistence\r\n   *     operations.\r\n   * @param documentKey - The key of the entry to look up.\r\n   * @returns The cached document or an invalid document if we have nothing\r\n   * cached.\r\n   */\n  getEntry(transaction, documentKey) {\n    this.assertNotApplied();\n    const bufferedEntry = this.changes.get(documentKey);\n    if (bufferedEntry !== undefined) {\n      return PersistencePromise.resolve(bufferedEntry);\n    } else {\n      return this.getFromCache(transaction, documentKey);\n    }\n  }\n  /**\r\n   * Looks up several entries in the cache, forwarding to\r\n   * `RemoteDocumentCache.getEntry()`.\r\n   *\r\n   * @param transaction - The transaction in which to perform any persistence\r\n   *     operations.\r\n   * @param documentKeys - The keys of the entries to look up.\r\n   * @returns A map of cached documents, indexed by key. If an entry cannot be\r\n   *     found, the corresponding key will be mapped to an invalid document.\r\n   */\n  getEntries(transaction, documentKeys) {\n    return this.getAllFromCache(transaction, documentKeys);\n  }\n  /**\r\n   * Applies buffered changes to the underlying RemoteDocumentCache, using\r\n   * the provided transaction.\r\n   */\n  apply(transaction) {\n    this.assertNotApplied();\n    this.changesApplied = true;\n    return this.applyChanges(transaction);\n  }\n  /** Helper to assert this.changes is not null  */\n  assertNotApplied() {}\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newIndexedDbRemoteDocumentCache()`.\r\n */\nclass IndexedDbRemoteDocumentCacheImpl {\n  constructor(serializer) {\n    this.serializer = serializer;\n  }\n  setIndexManager(indexManager) {\n    this.indexManager = indexManager;\n  }\n  /**\r\n   * Adds the supplied entries to the cache.\r\n   *\r\n   * All calls of `addEntry` are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n   */\n  addEntry(transaction, key, doc) {\n    const documentStore = remoteDocumentsStore(transaction);\n    return documentStore.put(doc);\n  }\n  /**\r\n   * Removes a document from the cache.\r\n   *\r\n   * All calls of `removeEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()` to ensure proper accounting of metadata.\r\n   */\n  removeEntry(transaction, documentKey, readTime) {\n    const store = remoteDocumentsStore(transaction);\n    return store.delete(dbReadTimeKey(documentKey, readTime));\n  }\n  /**\r\n   * Updates the current cache size.\r\n   *\r\n   * Callers to `addEntry()` and `removeEntry()` *must* call this afterwards to update the\r\n   * cache's metadata.\r\n   */\n  updateMetadata(transaction, sizeDelta) {\n    return this.getMetadata(transaction).next(metadata => {\n      metadata.byteSize += sizeDelta;\n      return this.setMetadata(transaction, metadata);\n    });\n  }\n  getEntry(transaction, documentKey) {\n    let doc = MutableDocument.newInvalidDocument(documentKey);\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentDocumentKeyIndex,\n      range: IDBKeyRange.only(dbKey(documentKey))\n    }, (_, dbRemoteDoc) => {\n      doc = this.maybeDecodeDocument(documentKey, dbRemoteDoc);\n    }).next(() => doc);\n  }\n  /**\r\n   * Looks up an entry in the cache.\r\n   *\r\n   * @param documentKey - The key of the entry to look up.\r\n   * @returns The cached document entry and its size.\r\n   */\n  getSizedEntry(transaction, documentKey) {\n    let result = {\n      size: 0,\n      document: MutableDocument.newInvalidDocument(documentKey)\n    };\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentDocumentKeyIndex,\n      range: IDBKeyRange.only(dbKey(documentKey))\n    }, (_, dbRemoteDoc) => {\n      result = {\n        document: this.maybeDecodeDocument(documentKey, dbRemoteDoc),\n        size: dbDocumentSize(dbRemoteDoc)\n      };\n    }).next(() => result);\n  }\n  getEntries(transaction, documentKeys) {\n    let results = mutableDocumentMap();\n    return this.forEachDbEntry(transaction, documentKeys, (key, dbRemoteDoc) => {\n      const doc = this.maybeDecodeDocument(key, dbRemoteDoc);\n      results = results.insert(key, doc);\n    }).next(() => results);\n  }\n  /**\r\n   * Looks up several entries in the cache.\r\n   *\r\n   * @param documentKeys - The set of keys entries to look up.\r\n   * @returns A map of documents indexed by key and a map of sizes indexed by\r\n   *     key (zero if the document does not exist).\r\n   */\n  getSizedEntries(transaction, documentKeys) {\n    let results = mutableDocumentMap();\n    let sizeMap = new SortedMap(DocumentKey.comparator);\n    return this.forEachDbEntry(transaction, documentKeys, (key, dbRemoteDoc) => {\n      const doc = this.maybeDecodeDocument(key, dbRemoteDoc);\n      results = results.insert(key, doc);\n      sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));\n    }).next(() => {\n      return {\n        documents: results,\n        sizeMap\n      };\n    });\n  }\n  forEachDbEntry(transaction, documentKeys, callback) {\n    if (documentKeys.isEmpty()) {\n      return PersistencePromise.resolve();\n    }\n    let sortedKeys = new SortedSet(dbKeyComparator);\n    documentKeys.forEach(e => sortedKeys = sortedKeys.add(e));\n    const range = IDBKeyRange.bound(dbKey(sortedKeys.first()), dbKey(sortedKeys.last()));\n    const keyIter = sortedKeys.getIterator();\n    let nextKey = keyIter.getNext();\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentDocumentKeyIndex,\n      range\n    }, (_, dbRemoteDoc, control) => {\n      const potentialKey = DocumentKey.fromSegments([...dbRemoteDoc.prefixPath, dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId]);\n      // Go through keys not found in cache.\n      while (nextKey && dbKeyComparator(nextKey, potentialKey) < 0) {\n        callback(nextKey, null);\n        nextKey = keyIter.getNext();\n      }\n      if (nextKey && nextKey.isEqual(potentialKey)) {\n        // Key found in cache.\n        callback(nextKey, dbRemoteDoc);\n        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n      }\n      // Skip to the next key (if there is one).\n      if (nextKey) {\n        control.skip(dbKey(nextKey));\n      } else {\n        control.done();\n      }\n    }).next(() => {\n      // The rest of the keys are not in the cache. One case where `iterate`\n      // above won't go through them is when the cache is empty.\n      while (nextKey) {\n        callback(nextKey, null);\n        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;\n      }\n    });\n  }\n  getDocumentsMatchingQuery(transaction, query, offset, mutatedDocs, context) {\n    const collection = query.path;\n    const startKey = [collection.popLast().toArray(), collection.lastSegment(), toDbTimestampKey(offset.readTime), offset.documentKey.path.isEmpty() ? '' : offset.documentKey.path.lastSegment()];\n    const endKey = [collection.popLast().toArray(), collection.lastSegment(), [Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER], ''];\n    return remoteDocumentsStore(transaction).loadAll(IDBKeyRange.bound(startKey, endKey, true)).next(dbRemoteDocs => {\n      context === null || context === void 0 ? void 0 : context.incrementDocumentReadCount(dbRemoteDocs.length);\n      let results = mutableDocumentMap();\n      for (const dbRemoteDoc of dbRemoteDocs) {\n        const document = this.maybeDecodeDocument(DocumentKey.fromSegments(dbRemoteDoc.prefixPath.concat(dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId)), dbRemoteDoc);\n        if (document.isFoundDocument() && (queryMatches(query, document) || mutatedDocs.has(document.key))) {\n          // Either the document matches the given query, or it is mutated.\n          results = results.insert(document.key, document);\n        }\n      }\n      return results;\n    });\n  }\n  getAllFromCollectionGroup(transaction, collectionGroup, offset, limit) {\n    let results = mutableDocumentMap();\n    const startKey = dbCollectionGroupKey(collectionGroup, offset);\n    const endKey = dbCollectionGroupKey(collectionGroup, IndexOffset.max());\n    return remoteDocumentsStore(transaction).iterate({\n      index: DbRemoteDocumentCollectionGroupIndex,\n      range: IDBKeyRange.bound(startKey, endKey, true)\n    }, (_, dbRemoteDoc, control) => {\n      const document = this.maybeDecodeDocument(DocumentKey.fromSegments(dbRemoteDoc.prefixPath.concat(dbRemoteDoc.collectionGroup, dbRemoteDoc.documentId)), dbRemoteDoc);\n      results = results.insert(document.key, document);\n      if (results.size === limit) {\n        control.done();\n      }\n    }).next(() => results);\n  }\n  newChangeBuffer(options) {\n    return new IndexedDbRemoteDocumentChangeBuffer(this, !!options && options.trackRemovals);\n  }\n  getSize(txn) {\n    return this.getMetadata(txn).next(metadata => metadata.byteSize);\n  }\n  getMetadata(txn) {\n    return documentGlobalStore(txn).get(DbRemoteDocumentGlobalKey).next(metadata => {\n      hardAssert(!!metadata);\n      return metadata;\n    });\n  }\n  setMetadata(txn, metadata) {\n    return documentGlobalStore(txn).put(DbRemoteDocumentGlobalKey, metadata);\n  }\n  /**\r\n   * Decodes `dbRemoteDoc` and returns the document (or an invalid document if\r\n   * the document corresponds to the format used for sentinel deletes).\r\n   */\n  maybeDecodeDocument(documentKey, dbRemoteDoc) {\n    if (dbRemoteDoc) {\n      const doc = fromDbRemoteDocument(this.serializer, dbRemoteDoc);\n      // Whether the document is a sentinel removal and should only be used in the\n      // `getNewDocumentChanges()`\n      const isSentinelRemoval = doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min());\n      if (!isSentinelRemoval) {\n        return doc;\n      }\n    }\n    return MutableDocument.newInvalidDocument(documentKey);\n  }\n}\n/** Creates a new IndexedDbRemoteDocumentCache. */\nfunction newIndexedDbRemoteDocumentCache(serializer) {\n  return new IndexedDbRemoteDocumentCacheImpl(serializer);\n}\n/**\r\n * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache.\r\n *\r\n * Unlike the MemoryRemoteDocumentChangeBuffer, the IndexedDb implementation computes the size\r\n * delta for all submitted changes. This avoids having to re-read all documents from IndexedDb\r\n * when we apply the changes.\r\n */\nclass IndexedDbRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\n  /**\r\n   * @param documentCache - The IndexedDbRemoteDocumentCache to apply the changes to.\r\n   * @param trackRemovals - Whether to create sentinel deletes that can be tracked by\r\n   * `getNewDocumentChanges()`.\r\n   */\n  constructor(documentCache, trackRemovals) {\n    super();\n    this.documentCache = documentCache;\n    this.trackRemovals = trackRemovals;\n    // A map of document sizes and read times prior to applying the changes in\n    // this buffer.\n    this.documentStates = new ObjectMap(key => key.toString(), (l, r) => l.isEqual(r));\n  }\n  applyChanges(transaction) {\n    const promises = [];\n    let sizeDelta = 0;\n    let collectionParents = new SortedSet((l, r) => primitiveComparator(l.canonicalString(), r.canonicalString()));\n    this.changes.forEach((key, documentChange) => {\n      const previousDoc = this.documentStates.get(key);\n      promises.push(this.documentCache.removeEntry(transaction, key, previousDoc.readTime));\n      if (documentChange.isValidDocument()) {\n        const doc = toDbRemoteDocument(this.documentCache.serializer, documentChange);\n        collectionParents = collectionParents.add(key.path.popLast());\n        const size = dbDocumentSize(doc);\n        sizeDelta += size - previousDoc.size;\n        promises.push(this.documentCache.addEntry(transaction, key, doc));\n      } else {\n        sizeDelta -= previousDoc.size;\n        if (this.trackRemovals) {\n          // In order to track removals, we store a \"sentinel delete\" in the\n          // RemoteDocumentCache. This entry is represented by a NoDocument\n          // with a version of 0 and ignored by `maybeDecodeDocument()` but\n          // preserved in `getNewDocumentChanges()`.\n          const deletedDoc = toDbRemoteDocument(this.documentCache.serializer, documentChange.convertToNoDocument(SnapshotVersion.min()));\n          promises.push(this.documentCache.addEntry(transaction, key, deletedDoc));\n        }\n      }\n    });\n    collectionParents.forEach(parent => {\n      promises.push(this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));\n    });\n    promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));\n    return PersistencePromise.waitFor(promises);\n  }\n  getFromCache(transaction, documentKey) {\n    // Record the size of everything we load from the cache so we can compute a delta later.\n    return this.documentCache.getSizedEntry(transaction, documentKey).next(getResult => {\n      this.documentStates.set(documentKey, {\n        size: getResult.size,\n        readTime: getResult.document.readTime\n      });\n      return getResult.document;\n    });\n  }\n  getAllFromCache(transaction, documentKeys) {\n    // Record the size of everything we load from the cache so we can compute\n    // a delta later.\n    return this.documentCache.getSizedEntries(transaction, documentKeys).next(({\n      documents,\n      sizeMap\n    }) => {\n      // Note: `getAllFromCache` returns two maps instead of a single map from\n      // keys to `DocumentSizeEntry`s. This is to allow returning the\n      // `MutableDocumentMap` directly, without a conversion.\n      sizeMap.forEach((documentKey, size) => {\n        this.documentStates.set(documentKey, {\n          size,\n          readTime: documents.get(documentKey).readTime\n        });\n      });\n      return documents;\n    });\n  }\n}\nfunction documentGlobalStore(txn) {\n  return getStore(txn, DbRemoteDocumentGlobalStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the remoteDocuments object store.\r\n */\nfunction remoteDocumentsStore(txn) {\n  return getStore(txn, DbRemoteDocumentStore);\n}\n/**\r\n * Returns a key that can be used for document lookups on the\r\n * `DbRemoteDocumentDocumentKeyIndex` index.\r\n */\nfunction dbKey(documentKey) {\n  const path = documentKey.path.toArray();\n  return [/* prefix path */path.slice(0, path.length - 2), /* collection id */path[path.length - 2], /* document id */path[path.length - 1]];\n}\n/**\r\n * Returns a key that can be used for document lookups via the primary key of\r\n * the DbRemoteDocument object store.\r\n */\nfunction dbReadTimeKey(documentKey, readTime) {\n  const path = documentKey.path.toArray();\n  return [/* prefix path */path.slice(0, path.length - 2), /* collection id */path[path.length - 2], toDbTimestampKey(readTime), /* document id */path[path.length - 1]];\n}\n/**\r\n * Returns a key that can be used for document lookups on the\r\n * `DbRemoteDocumentDocumentCollectionGroupIndex` index.\r\n */\nfunction dbCollectionGroupKey(collectionGroup, offset) {\n  const path = offset.documentKey.path.toArray();\n  return [/* collection id */collectionGroup, toDbTimestampKey(offset.readTime), /* prefix path */path.slice(0, path.length - 2), /* document id */path.length > 0 ? path[path.length - 1] : ''];\n}\n/**\r\n * Comparator that compares document keys according to the primary key sorting\r\n * used by the `DbRemoteDocumentDocument` store (by prefix path, collection id\r\n * and then document ID).\r\n *\r\n * Visible for testing.\r\n */\nfunction dbKeyComparator(l, r) {\n  const left = l.path.toArray();\n  const right = r.path.toArray();\n  // The ordering is based on https://chromium.googlesource.com/chromium/blink/+/fe5c21fef94dae71c1c3344775b8d8a7f7e6d9ec/Source/modules/indexeddb/IDBKey.cpp#74\n  let cmp = 0;\n  for (let i = 0; i < left.length - 2 && i < right.length - 2; ++i) {\n    cmp = primitiveComparator(left[i], right[i]);\n    if (cmp) {\n      return cmp;\n    }\n  }\n  cmp = primitiveComparator(left.length, right.length);\n  if (cmp) {\n    return cmp;\n  }\n  cmp = primitiveComparator(left[left.length - 2], right[right.length - 2]);\n  if (cmp) {\n    return cmp;\n  }\n  return primitiveComparator(left[left.length - 1], right[right.length - 1]);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Schema Version for the Web client:\r\n * 1.  Initial version including Mutation Queue, Query Cache, and Remote\r\n *     Document Cache\r\n * 2.  Used to ensure a targetGlobal object exists and add targetCount to it. No\r\n *     longer required because migration 3 unconditionally clears it.\r\n * 3.  Dropped and re-created Query Cache to deal with cache corruption related\r\n *     to limbo resolution. Addresses\r\n *     https://github.com/firebase/firebase-ios-sdk/issues/1548\r\n * 4.  Multi-Tab Support.\r\n * 5.  Removal of held write acks.\r\n * 6.  Create document global for tracking document cache size.\r\n * 7.  Ensure every cached document has a sentinel row with a sequence number.\r\n * 8.  Add collection-parent index for Collection Group queries.\r\n * 9.  Change RemoteDocumentChanges store to be keyed by readTime rather than\r\n *     an auto-incrementing ID. This is required for Index-Free queries.\r\n * 10. Rewrite the canonical IDs to the explicit Protobuf-based format.\r\n * 11. Add bundles and named_queries for bundle support.\r\n * 12. Add document overlays.\r\n * 13. Rewrite the keys of the remote document cache to allow for efficient\r\n *     document lookup via `getAll()`.\r\n * 14. Add overlays.\r\n * 15. Add indexing support.\r\n * 16. Parse timestamp strings before creating index entries.\r\n */\nconst SCHEMA_VERSION = 17;\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a local view (overlay) of a document, and the fields that are\r\n * locally mutated.\r\n */\nclass OverlayedDocument {\n  constructor(overlayedDocument,\n  /**\r\n   * The fields that are locally mutated by patch mutations.\r\n   *\r\n   * If the overlayed\tdocument is from set or delete mutations, this is `null`.\r\n   * If there is no overlay (mutation) for the document, this is an empty `FieldMask`.\r\n   */\n  mutatedFields) {\n    this.overlayedDocument = overlayedDocument;\n    this.mutatedFields = mutatedFields;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A readonly view of the local state of all documents we're tracking (i.e. we\r\n * have a cached version in remoteDocumentCache or local mutations for the\r\n * document). The view is computed by applying the mutations in the\r\n * MutationQueue to the RemoteDocumentCache.\r\n */\nclass LocalDocumentsView {\n  constructor(remoteDocumentCache, mutationQueue, documentOverlayCache, indexManager) {\n    this.remoteDocumentCache = remoteDocumentCache;\n    this.mutationQueue = mutationQueue;\n    this.documentOverlayCache = documentOverlayCache;\n    this.indexManager = indexManager;\n  }\n  /**\r\n   * Get the local view of the document identified by `key`.\r\n   *\r\n   * @returns Local view of the document or null if we don't have any cached\r\n   * state for it.\r\n   */\n  getDocument(transaction, key) {\n    let overlay = null;\n    return this.documentOverlayCache.getOverlay(transaction, key).next(value => {\n      overlay = value;\n      return this.remoteDocumentCache.getEntry(transaction, key);\n    }).next(document => {\n      if (overlay !== null) {\n        mutationApplyToLocalView(overlay.mutation, document, FieldMask.empty(), Timestamp.now());\n      }\n      return document;\n    });\n  }\n  /**\r\n   * Gets the local view of the documents identified by `keys`.\r\n   *\r\n   * If we don't have cached state for a document in `keys`, a NoDocument will\r\n   * be stored for that key in the resulting set.\r\n   */\n  getDocuments(transaction, keys) {\n    return this.remoteDocumentCache.getEntries(transaction, keys).next(docs => this.getLocalViewOfDocuments(transaction, docs, documentKeySet()).next(() => docs));\n  }\n  /**\r\n   * Similar to `getDocuments`, but creates the local view from the given\r\n   * `baseDocs` without retrieving documents from the local store.\r\n   *\r\n   * @param transaction - The transaction this operation is scoped to.\r\n   * @param docs - The documents to apply local mutations to get the local views.\r\n   * @param existenceStateChanged - The set of document keys whose existence state\r\n   *   is changed. This is useful to determine if some documents overlay needs\r\n   *   to be recalculated.\r\n   */\n  getLocalViewOfDocuments(transaction, docs, existenceStateChanged = documentKeySet()) {\n    const overlays = newOverlayMap();\n    return this.populateOverlays(transaction, overlays, docs).next(() => {\n      return this.computeViews(transaction, docs, overlays, existenceStateChanged).next(computeViewsResult => {\n        let result = documentMap();\n        computeViewsResult.forEach((documentKey, overlayedDocument) => {\n          result = result.insert(documentKey, overlayedDocument.overlayedDocument);\n        });\n        return result;\n      });\n    });\n  }\n  /**\r\n   * Gets the overlayed documents for the given document map, which will include\r\n   * the local view of those documents and a `FieldMask` indicating which fields\r\n   * are mutated locally, `null` if overlay is a Set or Delete mutation.\r\n   */\n  getOverlayedDocuments(transaction, docs) {\n    const overlays = newOverlayMap();\n    return this.populateOverlays(transaction, overlays, docs).next(() => this.computeViews(transaction, docs, overlays, documentKeySet()));\n  }\n  /**\r\n   * Fetches the overlays for {@code docs} and adds them to provided overlay map\r\n   * if the map does not already contain an entry for the given document key.\r\n   */\n  populateOverlays(transaction, overlays, docs) {\n    const missingOverlays = [];\n    docs.forEach(key => {\n      if (!overlays.has(key)) {\n        missingOverlays.push(key);\n      }\n    });\n    return this.documentOverlayCache.getOverlays(transaction, missingOverlays).next(result => {\n      result.forEach((key, val) => {\n        overlays.set(key, val);\n      });\n    });\n  }\n  /**\r\n   * Computes the local view for the given documents.\r\n   *\r\n   * @param docs - The documents to compute views for. It also has the base\r\n   *   version of the documents.\r\n   * @param overlays - The overlays that need to be applied to the given base\r\n   *   version of the documents.\r\n   * @param existenceStateChanged - A set of documents whose existence states\r\n   *   might have changed. This is used to determine if we need to re-calculate\r\n   *   overlays from mutation queues.\r\n   * @return A map represents the local documents view.\r\n   */\n  computeViews(transaction, docs, overlays, existenceStateChanged) {\n    let recalculateDocuments = mutableDocumentMap();\n    const mutatedFields = newDocumentKeyMap();\n    const results = newOverlayedDocumentMap();\n    docs.forEach((_, doc) => {\n      const overlay = overlays.get(doc.key);\n      // Recalculate an overlay if the document's existence state changed due to\n      // a remote event *and* the overlay is a PatchMutation. This is because\n      // document existence state can change if some patch mutation's\n      // preconditions are met.\n      // NOTE: we recalculate when `overlay` is undefined as well, because there\n      // might be a patch mutation whose precondition does not match before the\n      // change (hence overlay is undefined), but would now match.\n      if (existenceStateChanged.has(doc.key) && (overlay === undefined || overlay.mutation instanceof PatchMutation)) {\n        recalculateDocuments = recalculateDocuments.insert(doc.key, doc);\n      } else if (overlay !== undefined) {\n        mutatedFields.set(doc.key, overlay.mutation.getFieldMask());\n        mutationApplyToLocalView(overlay.mutation, doc, overlay.mutation.getFieldMask(), Timestamp.now());\n      } else {\n        // no overlay exists\n        // Using EMPTY to indicate there is no overlay for the document.\n        mutatedFields.set(doc.key, FieldMask.empty());\n      }\n    });\n    return this.recalculateAndSaveOverlays(transaction, recalculateDocuments).next(recalculatedFields => {\n      recalculatedFields.forEach((documentKey, mask) => mutatedFields.set(documentKey, mask));\n      docs.forEach((documentKey, document) => {\n        var _a;\n        return results.set(documentKey, new OverlayedDocument(document, (_a = mutatedFields.get(documentKey)) !== null && _a !== void 0 ? _a : null));\n      });\n      return results;\n    });\n  }\n  recalculateAndSaveOverlays(transaction, docs) {\n    const masks = newDocumentKeyMap();\n    // A reverse lookup map from batch id to the documents within that batch.\n    let documentsByBatchId = new SortedMap((key1, key2) => key1 - key2);\n    let processed = documentKeySet();\n    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, docs).next(batches => {\n      for (const batch of batches) {\n        batch.keys().forEach(key => {\n          const baseDoc = docs.get(key);\n          if (baseDoc === null) {\n            return;\n          }\n          let mask = masks.get(key) || FieldMask.empty();\n          mask = batch.applyToLocalView(baseDoc, mask);\n          masks.set(key, mask);\n          const newSet = (documentsByBatchId.get(batch.batchId) || documentKeySet()).add(key);\n          documentsByBatchId = documentsByBatchId.insert(batch.batchId, newSet);\n        });\n      }\n    }).next(() => {\n      const promises = [];\n      // Iterate in descending order of batch IDs, and skip documents that are\n      // already saved.\n      const iter = documentsByBatchId.getReverseIterator();\n      while (iter.hasNext()) {\n        const entry = iter.getNext();\n        const batchId = entry.key;\n        const keys = entry.value;\n        const overlays = newMutationMap();\n        keys.forEach(key => {\n          if (!processed.has(key)) {\n            const overlayMutation = calculateOverlayMutation(docs.get(key), masks.get(key));\n            if (overlayMutation !== null) {\n              overlays.set(key, overlayMutation);\n            }\n            processed = processed.add(key);\n          }\n        });\n        promises.push(this.documentOverlayCache.saveOverlays(transaction, batchId, overlays));\n      }\n      return PersistencePromise.waitFor(promises);\n    }).next(() => masks);\n  }\n  /**\r\n   * Recalculates overlays by reading the documents from remote document cache\r\n   * first, and saves them after they are calculated.\r\n   */\n  recalculateAndSaveOverlaysForDocumentKeys(transaction, documentKeys) {\n    return this.remoteDocumentCache.getEntries(transaction, documentKeys).next(docs => this.recalculateAndSaveOverlays(transaction, docs));\n  }\n  /**\r\n   * Performs a query against the local view of all documents.\r\n   *\r\n   * @param transaction - The persistence transaction.\r\n   * @param query - The query to match documents against.\r\n   * @param offset - Read time and key to start scanning by (exclusive).\r\n   * @param context - A optional tracker to keep a record of important details\r\n   *   during database local query execution.\r\n   */\n  getDocumentsMatchingQuery(transaction, query, offset, context) {\n    if (isDocumentQuery$1(query)) {\n      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);\n    } else if (isCollectionGroupQuery(query)) {\n      return this.getDocumentsMatchingCollectionGroupQuery(transaction, query, offset, context);\n    } else {\n      return this.getDocumentsMatchingCollectionQuery(transaction, query, offset, context);\n    }\n  }\n  /**\r\n   * Given a collection group, returns the next documents that follow the provided offset, along\r\n   * with an updated batch ID.\r\n   *\r\n   * <p>The documents returned by this method are ordered by remote version from the provided\r\n   * offset. If there are no more remote documents after the provided offset, documents with\r\n   * mutations in order of batch id from the offset are returned. Since all documents in a batch are\r\n   * returned together, the total number of documents returned can exceed {@code count}.\r\n   *\r\n   * @param transaction\r\n   * @param collectionGroup The collection group for the documents.\r\n   * @param offset The offset to index into.\r\n   * @param count The number of documents to return\r\n   * @return A LocalWriteResult with the documents that follow the provided offset and the last processed batch id.\r\n   */\n  getNextDocuments(transaction, collectionGroup, offset, count) {\n    return this.remoteDocumentCache.getAllFromCollectionGroup(transaction, collectionGroup, offset, count).next(originalDocs => {\n      const overlaysPromise = count - originalDocs.size > 0 ? this.documentOverlayCache.getOverlaysForCollectionGroup(transaction, collectionGroup, offset.largestBatchId, count - originalDocs.size) : PersistencePromise.resolve(newOverlayMap());\n      // The callsite will use the largest batch ID together with the latest read time to create\n      // a new index offset. Since we only process batch IDs if all remote documents have been read,\n      // no overlay will increase the overall read time. This is why we only need to special case\n      // the batch id.\n      let largestBatchId = INITIAL_LARGEST_BATCH_ID;\n      let modifiedDocs = originalDocs;\n      return overlaysPromise.next(overlays => {\n        return PersistencePromise.forEach(overlays, (key, overlay) => {\n          if (largestBatchId < overlay.largestBatchId) {\n            largestBatchId = overlay.largestBatchId;\n          }\n          if (originalDocs.get(key)) {\n            return PersistencePromise.resolve();\n          }\n          return this.remoteDocumentCache.getEntry(transaction, key).next(doc => {\n            modifiedDocs = modifiedDocs.insert(key, doc);\n          });\n        }).next(() => this.populateOverlays(transaction, overlays, originalDocs)).next(() => this.computeViews(transaction, modifiedDocs, overlays, documentKeySet())).next(localDocs => ({\n          batchId: largestBatchId,\n          changes: convertOverlayedDocumentMapToDocumentMap(localDocs)\n        }));\n      });\n    });\n  }\n  getDocumentsMatchingDocumentQuery(transaction, docPath) {\n    // Just do a simple document lookup.\n    return this.getDocument(transaction, new DocumentKey(docPath)).next(document => {\n      let result = documentMap();\n      if (document.isFoundDocument()) {\n        result = result.insert(document.key, document);\n      }\n      return result;\n    });\n  }\n  getDocumentsMatchingCollectionGroupQuery(transaction, query, offset, context) {\n    const collectionId = query.collectionGroup;\n    let results = documentMap();\n    return this.indexManager.getCollectionParents(transaction, collectionId).next(parents => {\n      // Perform a collection query against each parent that contains the\n      // collectionId and aggregate the results.\n      return PersistencePromise.forEach(parents, parent => {\n        const collectionQuery = asCollectionQueryAtPath(query, parent.child(collectionId));\n        return this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, offset, context).next(r => {\n          r.forEach((key, doc) => {\n            results = results.insert(key, doc);\n          });\n        });\n      }).next(() => results);\n    });\n  }\n  getDocumentsMatchingCollectionQuery(transaction, query, offset, context) {\n    // Query the remote documents and overlay mutations.\n    let overlays;\n    return this.documentOverlayCache.getOverlaysForCollection(transaction, query.path, offset.largestBatchId).next(result => {\n      overlays = result;\n      return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query, offset, overlays, context);\n    }).next(remoteDocuments => {\n      // As documents might match the query because of their overlay we need to\n      // include documents for all overlays in the initial document set.\n      overlays.forEach((_, overlay) => {\n        const key = overlay.getKey();\n        if (remoteDocuments.get(key) === null) {\n          remoteDocuments = remoteDocuments.insert(key, MutableDocument.newInvalidDocument(key));\n        }\n      });\n      // Apply the overlays and match against the query.\n      let results = documentMap();\n      remoteDocuments.forEach((key, document) => {\n        const overlay = overlays.get(key);\n        if (overlay !== undefined) {\n          mutationApplyToLocalView(overlay.mutation, document, FieldMask.empty(), Timestamp.now());\n        }\n        // Finally, insert the documents that still match the query\n        if (queryMatches(query, document)) {\n          results = results.insert(key, document);\n        }\n      });\n      return results;\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass MemoryBundleCache {\n  constructor(serializer) {\n    this.serializer = serializer;\n    this.bundles = new Map();\n    this.namedQueries = new Map();\n  }\n  getBundleMetadata(transaction, bundleId) {\n    return PersistencePromise.resolve(this.bundles.get(bundleId));\n  }\n  saveBundleMetadata(transaction, bundleMetadata) {\n    this.bundles.set(bundleMetadata.id, fromBundleMetadata(bundleMetadata));\n    return PersistencePromise.resolve();\n  }\n  getNamedQuery(transaction, queryName) {\n    return PersistencePromise.resolve(this.namedQueries.get(queryName));\n  }\n  saveNamedQuery(transaction, query) {\n    this.namedQueries.set(query.name, fromProtoNamedQuery(query));\n    return PersistencePromise.resolve();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An in-memory implementation of DocumentOverlayCache.\r\n */\nclass MemoryDocumentOverlayCache {\n  constructor() {\n    // A map sorted by DocumentKey, whose value is a pair of the largest batch id\n    // for the overlay and the overlay itself.\n    this.overlays = new SortedMap(DocumentKey.comparator);\n    this.overlayByBatchId = new Map();\n  }\n  getOverlay(transaction, key) {\n    return PersistencePromise.resolve(this.overlays.get(key));\n  }\n  getOverlays(transaction, keys) {\n    const result = newOverlayMap();\n    return PersistencePromise.forEach(keys, key => {\n      return this.getOverlay(transaction, key).next(overlay => {\n        if (overlay !== null) {\n          result.set(key, overlay);\n        }\n      });\n    }).next(() => result);\n  }\n  saveOverlays(transaction, largestBatchId, overlays) {\n    overlays.forEach((_, mutation) => {\n      this.saveOverlay(transaction, largestBatchId, mutation);\n    });\n    return PersistencePromise.resolve();\n  }\n  removeOverlaysForBatchId(transaction, documentKeys, batchId) {\n    const keys = this.overlayByBatchId.get(batchId);\n    if (keys !== undefined) {\n      keys.forEach(key => this.overlays = this.overlays.remove(key));\n      this.overlayByBatchId.delete(batchId);\n    }\n    return PersistencePromise.resolve();\n  }\n  getOverlaysForCollection(transaction, collection, sinceBatchId) {\n    const result = newOverlayMap();\n    const immediateChildrenPathLength = collection.length + 1;\n    const prefix = new DocumentKey(collection.child(''));\n    const iter = this.overlays.getIteratorFrom(prefix);\n    while (iter.hasNext()) {\n      const entry = iter.getNext();\n      const overlay = entry.value;\n      const key = overlay.getKey();\n      if (!collection.isPrefixOf(key.path)) {\n        break;\n      }\n      // Documents from sub-collections\n      if (key.path.length !== immediateChildrenPathLength) {\n        continue;\n      }\n      if (overlay.largestBatchId > sinceBatchId) {\n        result.set(overlay.getKey(), overlay);\n      }\n    }\n    return PersistencePromise.resolve(result);\n  }\n  getOverlaysForCollectionGroup(transaction, collectionGroup, sinceBatchId, count) {\n    let batchIdToOverlays = new SortedMap((key1, key2) => key1 - key2);\n    const iter = this.overlays.getIterator();\n    while (iter.hasNext()) {\n      const entry = iter.getNext();\n      const overlay = entry.value;\n      const key = overlay.getKey();\n      if (key.getCollectionGroup() !== collectionGroup) {\n        continue;\n      }\n      if (overlay.largestBatchId > sinceBatchId) {\n        let overlaysForBatchId = batchIdToOverlays.get(overlay.largestBatchId);\n        if (overlaysForBatchId === null) {\n          overlaysForBatchId = newOverlayMap();\n          batchIdToOverlays = batchIdToOverlays.insert(overlay.largestBatchId, overlaysForBatchId);\n        }\n        overlaysForBatchId.set(overlay.getKey(), overlay);\n      }\n    }\n    const result = newOverlayMap();\n    const batchIter = batchIdToOverlays.getIterator();\n    while (batchIter.hasNext()) {\n      const entry = batchIter.getNext();\n      const overlays = entry.value;\n      overlays.forEach((key, overlay) => result.set(key, overlay));\n      if (result.size() >= count) {\n        break;\n      }\n    }\n    return PersistencePromise.resolve(result);\n  }\n  saveOverlay(transaction, largestBatchId, mutation) {\n    // Remove the association of the overlay to its batch id.\n    const existing = this.overlays.get(mutation.key);\n    if (existing !== null) {\n      const newSet = this.overlayByBatchId.get(existing.largestBatchId).delete(mutation.key);\n      this.overlayByBatchId.set(existing.largestBatchId, newSet);\n    }\n    this.overlays = this.overlays.insert(mutation.key, new Overlay(largestBatchId, mutation));\n    // Create the association of this overlay to the given largestBatchId.\n    let batch = this.overlayByBatchId.get(largestBatchId);\n    if (batch === undefined) {\n      batch = documentKeySet();\n      this.overlayByBatchId.set(largestBatchId, batch);\n    }\n    this.overlayByBatchId.set(largestBatchId, batch.add(mutation.key));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass MemoryGlobalsCache {\n  constructor() {\n    this.sessionToken = ByteString.EMPTY_BYTE_STRING;\n  }\n  getSessionToken(transaction) {\n    return PersistencePromise.resolve(this.sessionToken);\n  }\n  setSessionToken(transaction, sessionToken) {\n    this.sessionToken = sessionToken;\n    return PersistencePromise.resolve();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A collection of references to a document from some kind of numbered entity\r\n * (either a target ID or batch ID). As references are added to or removed from\r\n * the set corresponding events are emitted to a registered garbage collector.\r\n *\r\n * Each reference is represented by a DocumentReference object. Each of them\r\n * contains enough information to uniquely identify the reference. They are all\r\n * stored primarily in a set sorted by key. A document is considered garbage if\r\n * there's no references in that set (this can be efficiently checked thanks to\r\n * sorting by key).\r\n *\r\n * ReferenceSet also keeps a secondary set that contains references sorted by\r\n * IDs. This one is used to efficiently implement removal of all references by\r\n * some target ID.\r\n */\nclass ReferenceSet {\n  constructor() {\n    // A set of outstanding references to a document sorted by key.\n    this.refsByKey = new SortedSet(DocReference.compareByKey);\n    // A set of outstanding references to a document sorted by target id.\n    this.refsByTarget = new SortedSet(DocReference.compareByTargetId);\n  }\n  /** Returns true if the reference set contains no references. */\n  isEmpty() {\n    return this.refsByKey.isEmpty();\n  }\n  /** Adds a reference to the given document key for the given ID. */\n  addReference(key, id) {\n    const ref = new DocReference(key, id);\n    this.refsByKey = this.refsByKey.add(ref);\n    this.refsByTarget = this.refsByTarget.add(ref);\n  }\n  /** Add references to the given document keys for the given ID. */\n  addReferences(keys, id) {\n    keys.forEach(key => this.addReference(key, id));\n  }\n  /**\r\n   * Removes a reference to the given document key for the given\r\n   * ID.\r\n   */\n  removeReference(key, id) {\n    this.removeRef(new DocReference(key, id));\n  }\n  removeReferences(keys, id) {\n    keys.forEach(key => this.removeReference(key, id));\n  }\n  /**\r\n   * Clears all references with a given ID. Calls removeRef() for each key\r\n   * removed.\r\n   */\n  removeReferencesForId(id) {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    const keys = [];\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      this.removeRef(ref);\n      keys.push(ref.key);\n    });\n    return keys;\n  }\n  removeAllReferences() {\n    this.refsByKey.forEach(ref => this.removeRef(ref));\n  }\n  removeRef(ref) {\n    this.refsByKey = this.refsByKey.delete(ref);\n    this.refsByTarget = this.refsByTarget.delete(ref);\n  }\n  referencesForId(id) {\n    const emptyKey = new DocumentKey(new ResourcePath([]));\n    const startRef = new DocReference(emptyKey, id);\n    const endRef = new DocReference(emptyKey, id + 1);\n    let keys = documentKeySet();\n    this.refsByTarget.forEachInRange([startRef, endRef], ref => {\n      keys = keys.add(ref.key);\n    });\n    return keys;\n  }\n  containsKey(key) {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.refsByKey.firstAfterOrEqual(ref);\n    return firstRef !== null && key.isEqual(firstRef.key);\n  }\n}\nclass DocReference {\n  constructor(key, targetOrBatchId) {\n    this.key = key;\n    this.targetOrBatchId = targetOrBatchId;\n  }\n  /** Compare by key then by ID */\n  static compareByKey(left, right) {\n    return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);\n  }\n  /** Compare by ID then by key */\n  static compareByTargetId(left, right) {\n    return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass MemoryMutationQueue {\n  constructor(indexManager, referenceDelegate) {\n    this.indexManager = indexManager;\n    this.referenceDelegate = referenceDelegate;\n    /**\r\n     * The set of all mutations that have been sent but not yet been applied to\r\n     * the backend.\r\n     */\n    this.mutationQueue = [];\n    /** Next value to use when assigning sequential IDs to each mutation batch. */\n    this.nextBatchId = 1;\n    /** An ordered mapping between documents and the mutations batch IDs. */\n    this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);\n  }\n  checkEmpty(transaction) {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0);\n  }\n  addMutationBatch(transaction, localWriteTime, baseMutations, mutations) {\n    const batchId = this.nextBatchId;\n    this.nextBatchId++;\n    if (this.mutationQueue.length > 0) {\n      this.mutationQueue[this.mutationQueue.length - 1];\n    }\n    const batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);\n    this.mutationQueue.push(batch);\n    // Track references by document key and index collection parents.\n    for (const mutation of mutations) {\n      this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));\n      this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());\n    }\n    return PersistencePromise.resolve(batch);\n  }\n  lookupMutationBatch(transaction, batchId) {\n    return PersistencePromise.resolve(this.findMutationBatch(batchId));\n  }\n  getNextMutationBatchAfterBatchId(transaction, batchId) {\n    const nextBatchId = batchId + 1;\n    // The requested batchId may still be out of range so normalize it to the\n    // start of the queue.\n    const rawIndex = this.indexOfBatchId(nextBatchId);\n    const index = rawIndex < 0 ? 0 : rawIndex;\n    return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);\n  }\n  getHighestUnacknowledgedBatchId() {\n    return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);\n  }\n  getAllMutationBatches(transaction) {\n    return PersistencePromise.resolve(this.mutationQueue.slice());\n  }\n  getAllMutationBatchesAffectingDocumentKey(transaction, documentKey) {\n    const start = new DocReference(documentKey, 0);\n    const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n    const result = [];\n    this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n      const batch = this.findMutationBatch(ref.targetOrBatchId);\n      result.push(batch);\n    });\n    return PersistencePromise.resolve(result);\n  }\n  getAllMutationBatchesAffectingDocumentKeys(transaction, documentKeys) {\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    documentKeys.forEach(documentKey => {\n      const start = new DocReference(documentKey, 0);\n      const end = new DocReference(documentKey, Number.POSITIVE_INFINITY);\n      this.batchesByDocumentKey.forEachInRange([start, end], ref => {\n        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n      });\n    });\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n  getAllMutationBatchesAffectingQuery(transaction, query) {\n    // Use the query path as a prefix for testing if a document matches the\n    // query.\n    const prefix = query.path;\n    const immediateChildrenPathLength = prefix.length + 1;\n    // Construct a document reference for actually scanning the index. Unlike\n    // the prefix the document key in this reference must have an even number of\n    // segments. The empty segment can be used a suffix of the query path\n    // because it precedes all other segments in an ordered traversal.\n    let startPath = prefix;\n    if (!DocumentKey.isDocumentKey(startPath)) {\n      startPath = startPath.child('');\n    }\n    const start = new DocReference(new DocumentKey(startPath), 0);\n    // Find unique batchIDs referenced by all documents potentially matching the\n    // query.\n    let uniqueBatchIDs = new SortedSet(primitiveComparator);\n    this.batchesByDocumentKey.forEachWhile(ref => {\n      const rowKeyPath = ref.key.path;\n      if (!prefix.isPrefixOf(rowKeyPath)) {\n        return false;\n      } else {\n        // Rows with document keys more than one segment longer than the query\n        // path can't be matches. For example, a query on 'rooms' can't match\n        // the document /rooms/abc/messages/xyx.\n        // TODO(mcg): we'll need a different scanner when we implement\n        // ancestor queries.\n        if (rowKeyPath.length === immediateChildrenPathLength) {\n          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);\n        }\n        return true;\n      }\n    }, start);\n    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));\n  }\n  findMutationBatches(batchIDs) {\n    // Construct an array of matching batches, sorted by batchID to ensure that\n    // multiple mutations affecting the same document key are applied in order.\n    const result = [];\n    batchIDs.forEach(batchId => {\n      const batch = this.findMutationBatch(batchId);\n      if (batch !== null) {\n        result.push(batch);\n      }\n    });\n    return result;\n  }\n  removeMutationBatch(transaction, batch) {\n    // Find the position of the first batch for removal.\n    const batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');\n    hardAssert(batchIndex === 0);\n    this.mutationQueue.shift();\n    let references = this.batchesByDocumentKey;\n    return PersistencePromise.forEach(batch.mutations, mutation => {\n      const ref = new DocReference(mutation.key, batch.batchId);\n      references = references.delete(ref);\n      return this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);\n    }).next(() => {\n      this.batchesByDocumentKey = references;\n    });\n  }\n  removeCachedMutationKeys(batchId) {\n    // No-op since the memory mutation queue does not maintain a separate cache.\n  }\n  containsKey(txn, key) {\n    const ref = new DocReference(key, 0);\n    const firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);\n    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));\n  }\n  performConsistencyCheck(txn) {\n    if (this.mutationQueue.length === 0) ;\n    return PersistencePromise.resolve();\n  }\n  /**\r\n   * Finds the index of the given batchId in the mutation queue and asserts that\r\n   * the resulting index is within the bounds of the queue.\r\n   *\r\n   * @param batchId - The batchId to search for\r\n   * @param action - A description of what the caller is doing, phrased in passive\r\n   * form (e.g. \"acknowledged\" in a routine that acknowledges batches).\r\n   */\n  indexOfExistingBatchId(batchId, action) {\n    const index = this.indexOfBatchId(batchId);\n    return index;\n  }\n  /**\r\n   * Finds the index of the given batchId in the mutation queue. This operation\r\n   * is O(1).\r\n   *\r\n   * @returns The computed index of the batch with the given batchId, based on\r\n   * the state of the queue. Note this index can be negative if the requested\r\n   * batchId has already been removed from the queue or past the end of the\r\n   * queue if the batchId is larger than the last added batch.\r\n   */\n  indexOfBatchId(batchId) {\n    if (this.mutationQueue.length === 0) {\n      // As an index this is past the end of the queue\n      return 0;\n    }\n    // Examine the front of the queue to figure out the difference between the\n    // batchId and indexes in the array. Note that since the queue is ordered\n    // by batchId, if the first batch has a larger batchId then the requested\n    // batchId doesn't exist in the queue.\n    const firstBatchId = this.mutationQueue[0].batchId;\n    return batchId - firstBatchId;\n  }\n  /**\r\n   * A version of lookupMutationBatch that doesn't return a promise, this makes\r\n   * other functions that uses this code easier to read and more efficient.\r\n   */\n  findMutationBatch(batchId) {\n    const index = this.indexOfBatchId(batchId);\n    if (index < 0 || index >= this.mutationQueue.length) {\n      return null;\n    }\n    const batch = this.mutationQueue[index];\n    return batch;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction documentEntryMap() {\n  return new SortedMap(DocumentKey.comparator);\n}\n/**\r\n * The memory-only RemoteDocumentCache for IndexedDb. To construct, invoke\r\n * `newMemoryRemoteDocumentCache()`.\r\n */\nclass MemoryRemoteDocumentCacheImpl {\n  /**\r\n   * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n   * expected to just return 0 to avoid unnecessarily doing the work of\r\n   * calculating the size.\r\n   */\n  constructor(sizer) {\n    this.sizer = sizer;\n    /** Underlying cache of documents and their read times. */\n    this.docs = documentEntryMap();\n    /** Size of all cached documents. */\n    this.size = 0;\n  }\n  setIndexManager(indexManager) {\n    this.indexManager = indexManager;\n  }\n  /**\r\n   * Adds the supplied entry to the cache and updates the cache size as appropriate.\r\n   *\r\n   * All calls of `addEntry`  are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()`.\r\n   */\n  addEntry(transaction, doc) {\n    const key = doc.key;\n    const entry = this.docs.get(key);\n    const previousSize = entry ? entry.size : 0;\n    const currentSize = this.sizer(doc);\n    this.docs = this.docs.insert(key, {\n      document: doc.mutableCopy(),\n      size: currentSize\n    });\n    this.size += currentSize - previousSize;\n    return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());\n  }\n  /**\r\n   * Removes the specified entry from the cache and updates the cache size as appropriate.\r\n   *\r\n   * All calls of `removeEntry` are required to go through the RemoteDocumentChangeBuffer\r\n   * returned by `newChangeBuffer()`.\r\n   */\n  removeEntry(documentKey) {\n    const entry = this.docs.get(documentKey);\n    if (entry) {\n      this.docs = this.docs.remove(documentKey);\n      this.size -= entry.size;\n    }\n  }\n  getEntry(transaction, documentKey) {\n    const entry = this.docs.get(documentKey);\n    return PersistencePromise.resolve(entry ? entry.document.mutableCopy() : MutableDocument.newInvalidDocument(documentKey));\n  }\n  getEntries(transaction, documentKeys) {\n    let results = mutableDocumentMap();\n    documentKeys.forEach(documentKey => {\n      const entry = this.docs.get(documentKey);\n      results = results.insert(documentKey, entry ? entry.document.mutableCopy() : MutableDocument.newInvalidDocument(documentKey));\n    });\n    return PersistencePromise.resolve(results);\n  }\n  getDocumentsMatchingQuery(transaction, query, offset, mutatedDocs) {\n    let results = mutableDocumentMap();\n    // Documents are ordered by key, so we can use a prefix scan to narrow down\n    // the documents we need to match the query against.\n    const collectionPath = query.path;\n    const prefix = new DocumentKey(collectionPath.child(''));\n    const iterator = this.docs.getIteratorFrom(prefix);\n    while (iterator.hasNext()) {\n      const {\n        key,\n        value: {\n          document\n        }\n      } = iterator.getNext();\n      if (!collectionPath.isPrefixOf(key.path)) {\n        break;\n      }\n      if (key.path.length > collectionPath.length + 1) {\n        // Exclude entries from subcollections.\n        continue;\n      }\n      if (indexOffsetComparator(newIndexOffsetFromDocument(document), offset) <= 0) {\n        // The document sorts before the offset.\n        continue;\n      }\n      if (!mutatedDocs.has(document.key) && !queryMatches(query, document)) {\n        // The document cannot possibly match the query.\n        continue;\n      }\n      results = results.insert(document.key, document.mutableCopy());\n    }\n    return PersistencePromise.resolve(results);\n  }\n  getAllFromCollectionGroup(transaction, collectionGroup, offset, limit) {\n    // This method should only be called from the IndexBackfiller if persistence\n    // is enabled.\n    fail();\n  }\n  forEachDocumentKey(transaction, f) {\n    return PersistencePromise.forEach(this.docs, key => f(key));\n  }\n  newChangeBuffer(options) {\n    // `trackRemovals` is ignores since the MemoryRemoteDocumentCache keeps\n    // a separate changelog and does not need special handling for removals.\n    return new MemoryRemoteDocumentChangeBuffer(this);\n  }\n  getSize(txn) {\n    return PersistencePromise.resolve(this.size);\n  }\n}\n/**\r\n * Creates a new memory-only RemoteDocumentCache.\r\n *\r\n * @param sizer - Used to assess the size of a document. For eager GC, this is\r\n * expected to just return 0 to avoid unnecessarily doing the work of\r\n * calculating the size.\r\n */\nfunction newMemoryRemoteDocumentCache(sizer) {\n  return new MemoryRemoteDocumentCacheImpl(sizer);\n}\n/**\r\n * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.\r\n */\nclass MemoryRemoteDocumentChangeBuffer extends RemoteDocumentChangeBuffer {\n  constructor(documentCache) {\n    super();\n    this.documentCache = documentCache;\n  }\n  applyChanges(transaction) {\n    const promises = [];\n    this.changes.forEach((key, doc) => {\n      if (doc.isValidDocument()) {\n        promises.push(this.documentCache.addEntry(transaction, doc));\n      } else {\n        this.documentCache.removeEntry(key);\n      }\n    });\n    return PersistencePromise.waitFor(promises);\n  }\n  getFromCache(transaction, documentKey) {\n    return this.documentCache.getEntry(transaction, documentKey);\n  }\n  getAllFromCache(transaction, documentKeys) {\n    return this.documentCache.getEntries(transaction, documentKeys);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass MemoryTargetCache {\n  constructor(persistence) {\n    this.persistence = persistence;\n    /**\r\n     * Maps a target to the data about that target\r\n     */\n    this.targets = new ObjectMap(t => canonifyTarget(t), targetEquals);\n    /** The last received snapshot version. */\n    this.lastRemoteSnapshotVersion = SnapshotVersion.min();\n    /** The highest numbered target ID encountered. */\n    this.highestTargetId = 0;\n    /** The highest sequence number encountered. */\n    this.highestSequenceNumber = 0;\n    /**\r\n     * A ordered bidirectional mapping between documents and the remote target\r\n     * IDs.\r\n     */\n    this.references = new ReferenceSet();\n    this.targetCount = 0;\n    this.targetIdGenerator = TargetIdGenerator.forTargetCache();\n  }\n  forEachTarget(txn, f) {\n    this.targets.forEach((_, targetData) => f(targetData));\n    return PersistencePromise.resolve();\n  }\n  getLastRemoteSnapshotVersion(transaction) {\n    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);\n  }\n  getHighestSequenceNumber(transaction) {\n    return PersistencePromise.resolve(this.highestSequenceNumber);\n  }\n  allocateTargetId(transaction) {\n    this.highestTargetId = this.targetIdGenerator.next();\n    return PersistencePromise.resolve(this.highestTargetId);\n  }\n  setTargetsMetadata(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {\n    if (lastRemoteSnapshotVersion) {\n      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;\n    }\n    if (highestListenSequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = highestListenSequenceNumber;\n    }\n    return PersistencePromise.resolve();\n  }\n  saveTargetData(targetData) {\n    this.targets.set(targetData.target, targetData);\n    const targetId = targetData.targetId;\n    if (targetId > this.highestTargetId) {\n      this.targetIdGenerator = new TargetIdGenerator(targetId);\n      this.highestTargetId = targetId;\n    }\n    if (targetData.sequenceNumber > this.highestSequenceNumber) {\n      this.highestSequenceNumber = targetData.sequenceNumber;\n    }\n  }\n  addTargetData(transaction, targetData) {\n    this.saveTargetData(targetData);\n    this.targetCount += 1;\n    return PersistencePromise.resolve();\n  }\n  updateTargetData(transaction, targetData) {\n    this.saveTargetData(targetData);\n    return PersistencePromise.resolve();\n  }\n  removeTargetData(transaction, targetData) {\n    this.targets.delete(targetData.target);\n    this.references.removeReferencesForId(targetData.targetId);\n    this.targetCount -= 1;\n    return PersistencePromise.resolve();\n  }\n  removeTargets(transaction, upperBound, activeTargetIds) {\n    let count = 0;\n    const removals = [];\n    this.targets.forEach((key, targetData) => {\n      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {\n        this.targets.delete(key);\n        removals.push(this.removeMatchingKeysForTargetId(transaction, targetData.targetId));\n        count++;\n      }\n    });\n    return PersistencePromise.waitFor(removals).next(() => count);\n  }\n  getTargetCount(transaction) {\n    return PersistencePromise.resolve(this.targetCount);\n  }\n  getTargetData(transaction, target) {\n    const targetData = this.targets.get(target) || null;\n    return PersistencePromise.resolve(targetData);\n  }\n  addMatchingKeys(txn, keys, targetId) {\n    this.references.addReferences(keys, targetId);\n    return PersistencePromise.resolve();\n  }\n  removeMatchingKeys(txn, keys, targetId) {\n    this.references.removeReferences(keys, targetId);\n    const referenceDelegate = this.persistence.referenceDelegate;\n    const promises = [];\n    if (referenceDelegate) {\n      keys.forEach(key => {\n        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));\n      });\n    }\n    return PersistencePromise.waitFor(promises);\n  }\n  removeMatchingKeysForTargetId(txn, targetId) {\n    this.references.removeReferencesForId(targetId);\n    return PersistencePromise.resolve();\n  }\n  getMatchingKeysForTargetId(txn, targetId) {\n    const matchingKeys = this.references.referencesForId(targetId);\n    return PersistencePromise.resolve(matchingKeys);\n  }\n  containsKey(txn, key) {\n    return PersistencePromise.resolve(this.references.containsKey(key));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$d = 'MemoryPersistence';\n/**\r\n * A memory-backed instance of Persistence. Data is stored only in RAM and\r\n * not persisted across sessions.\r\n */\nclass MemoryPersistence {\n  /**\r\n   * The constructor accepts a factory for creating a reference delegate. This\r\n   * allows both the delegate and this instance to have strong references to\r\n   * each other without having nullable fields that would then need to be\r\n   * checked or asserted on every access.\r\n   */\n  constructor(referenceDelegateFactory, serializer) {\n    this.mutationQueues = {};\n    this.overlays = {};\n    this.listenSequence = new ListenSequence(0);\n    this._started = false;\n    this._started = true;\n    this.globalsCache = new MemoryGlobalsCache();\n    this.referenceDelegate = referenceDelegateFactory(this);\n    this.targetCache = new MemoryTargetCache(this);\n    const sizer = doc => this.referenceDelegate.documentSize(doc);\n    this.indexManager = new MemoryIndexManager();\n    this.remoteDocumentCache = newMemoryRemoteDocumentCache(sizer);\n    this.serializer = new LocalSerializer(serializer);\n    this.bundleCache = new MemoryBundleCache(this.serializer);\n  }\n  start() {\n    return Promise.resolve();\n  }\n  shutdown() {\n    // No durable state to ensure is closed on shutdown.\n    this._started = false;\n    return Promise.resolve();\n  }\n  get started() {\n    return this._started;\n  }\n  setDatabaseDeletedListener() {\n    // No op.\n  }\n  setNetworkEnabled() {\n    // No op.\n  }\n  getIndexManager(user) {\n    // We do not currently support indices for memory persistence, so we can\n    // return the same shared instance of the memory index manager.\n    return this.indexManager;\n  }\n  getDocumentOverlayCache(user) {\n    let overlay = this.overlays[user.toKey()];\n    if (!overlay) {\n      overlay = new MemoryDocumentOverlayCache();\n      this.overlays[user.toKey()] = overlay;\n    }\n    return overlay;\n  }\n  getMutationQueue(user, indexManager) {\n    let queue = this.mutationQueues[user.toKey()];\n    if (!queue) {\n      queue = new MemoryMutationQueue(indexManager, this.referenceDelegate);\n      this.mutationQueues[user.toKey()] = queue;\n    }\n    return queue;\n  }\n  getGlobalsCache() {\n    return this.globalsCache;\n  }\n  getTargetCache() {\n    return this.targetCache;\n  }\n  getRemoteDocumentCache() {\n    return this.remoteDocumentCache;\n  }\n  getBundleCache() {\n    return this.bundleCache;\n  }\n  runTransaction(action, mode, transactionOperation) {\n    logDebug(LOG_TAG$d, 'Starting transaction:', action);\n    const txn = new MemoryTransaction(this.listenSequence.next());\n    this.referenceDelegate.onTransactionStarted();\n    return transactionOperation(txn).next(result => {\n      return this.referenceDelegate.onTransactionCommitted(txn).next(() => result);\n    }).toPromise().then(result => {\n      txn.raiseOnCommittedEvent();\n      return result;\n    });\n  }\n  mutationQueuesContainKey(transaction, key) {\n    return PersistencePromise.or(Object.values(this.mutationQueues).map(queue => () => queue.containsKey(transaction, key)));\n  }\n}\n/**\r\n * Memory persistence is not actually transactional, but future implementations\r\n * may have transaction-scoped state.\r\n */\nclass MemoryTransaction extends PersistenceTransaction {\n  constructor(currentSequenceNumber) {\n    super();\n    this.currentSequenceNumber = currentSequenceNumber;\n  }\n}\nclass MemoryEagerDelegate {\n  constructor(persistence) {\n    this.persistence = persistence;\n    /** Tracks all documents that are active in Query views. */\n    this.localViewReferences = new ReferenceSet();\n    /** The list of documents that are potentially GCed after each transaction. */\n    this._orphanedDocuments = null;\n  }\n  static factory(persistence) {\n    return new MemoryEagerDelegate(persistence);\n  }\n  get orphanedDocuments() {\n    if (!this._orphanedDocuments) {\n      throw fail();\n    } else {\n      return this._orphanedDocuments;\n    }\n  }\n  addReference(txn, targetId, key) {\n    this.localViewReferences.addReference(key, targetId);\n    this.orphanedDocuments.delete(key.toString());\n    return PersistencePromise.resolve();\n  }\n  removeReference(txn, targetId, key) {\n    this.localViewReferences.removeReference(key, targetId);\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  }\n  markPotentiallyOrphaned(txn, key) {\n    this.orphanedDocuments.add(key.toString());\n    return PersistencePromise.resolve();\n  }\n  removeTarget(txn, targetData) {\n    const orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);\n    orphaned.forEach(key => this.orphanedDocuments.add(key.toString()));\n    const cache = this.persistence.getTargetCache();\n    return cache.getMatchingKeysForTargetId(txn, targetData.targetId).next(keys => {\n      keys.forEach(key => this.orphanedDocuments.add(key.toString()));\n    }).next(() => cache.removeTargetData(txn, targetData));\n  }\n  onTransactionStarted() {\n    this._orphanedDocuments = new Set();\n  }\n  onTransactionCommitted(txn) {\n    // Remove newly orphaned documents.\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    return PersistencePromise.forEach(this.orphanedDocuments, path => {\n      const key = DocumentKey.fromPath(path);\n      return this.isReferenced(txn, key).next(isReferenced => {\n        if (!isReferenced) {\n          changeBuffer.removeEntry(key, SnapshotVersion.min());\n        }\n      });\n    }).next(() => {\n      this._orphanedDocuments = null;\n      return changeBuffer.apply(txn);\n    });\n  }\n  updateLimboDocument(txn, key) {\n    return this.isReferenced(txn, key).next(isReferenced => {\n      if (isReferenced) {\n        this.orphanedDocuments.delete(key.toString());\n      } else {\n        this.orphanedDocuments.add(key.toString());\n      }\n    });\n  }\n  documentSize(doc) {\n    // For eager GC, we don't care about the document size, there are no size thresholds.\n    return 0;\n  }\n  isReferenced(txn, key) {\n    return PersistencePromise.or([() => PersistencePromise.resolve(this.localViewReferences.containsKey(key)), () => this.persistence.getTargetCache().containsKey(txn, key), () => this.persistence.mutationQueuesContainKey(txn, key)]);\n  }\n}\nclass MemoryLruDelegate {\n  constructor(persistence, lruParams) {\n    this.persistence = persistence;\n    this.orphanedSequenceNumbers = new ObjectMap(k => encodeResourcePath(k.path), (l, r) => l.isEqual(r));\n    this.garbageCollector = newLruGarbageCollector(this, lruParams);\n  }\n  static factory(persistence, lruParams) {\n    return new MemoryLruDelegate(persistence, lruParams);\n  }\n  // No-ops, present so memory persistence doesn't have to care which delegate\n  // it has.\n  onTransactionStarted() {}\n  onTransactionCommitted(txn) {\n    return PersistencePromise.resolve();\n  }\n  forEachTarget(txn, f) {\n    return this.persistence.getTargetCache().forEachTarget(txn, f);\n  }\n  getSequenceNumberCount(txn) {\n    const docCountPromise = this.orphanedDocumentCount(txn);\n    const targetCountPromise = this.persistence.getTargetCache().getTargetCount(txn);\n    return targetCountPromise.next(targetCount => docCountPromise.next(docCount => targetCount + docCount));\n  }\n  orphanedDocumentCount(txn) {\n    let orphanedCount = 0;\n    return this.forEachOrphanedDocumentSequenceNumber(txn, _ => {\n      orphanedCount++;\n    }).next(() => orphanedCount);\n  }\n  forEachOrphanedDocumentSequenceNumber(txn, f) {\n    return PersistencePromise.forEach(this.orphanedSequenceNumbers, (key, sequenceNumber) => {\n      // Pass in the exact sequence number as the upper bound so we know it won't be pinned by\n      // being too recent.\n      return this.isPinned(txn, key, sequenceNumber).next(isPinned => {\n        if (!isPinned) {\n          return f(sequenceNumber);\n        } else {\n          return PersistencePromise.resolve();\n        }\n      });\n    });\n  }\n  removeTargets(txn, upperBound, activeTargetIds) {\n    return this.persistence.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);\n  }\n  removeOrphanedDocuments(txn, upperBound) {\n    let count = 0;\n    const cache = this.persistence.getRemoteDocumentCache();\n    const changeBuffer = cache.newChangeBuffer();\n    const p = cache.forEachDocumentKey(txn, key => {\n      return this.isPinned(txn, key, upperBound).next(isPinned => {\n        if (!isPinned) {\n          count++;\n          changeBuffer.removeEntry(key, SnapshotVersion.min());\n        }\n      });\n    });\n    return p.next(() => changeBuffer.apply(txn)).next(() => count);\n  }\n  markPotentiallyOrphaned(txn, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  removeTarget(txn, targetData) {\n    const updated = targetData.withSequenceNumber(txn.currentSequenceNumber);\n    return this.persistence.getTargetCache().updateTargetData(txn, updated);\n  }\n  addReference(txn, targetId, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  removeReference(txn, targetId, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  updateLimboDocument(txn, key) {\n    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);\n    return PersistencePromise.resolve();\n  }\n  documentSize(document) {\n    let documentSize = document.key.toString().length;\n    if (document.isFoundDocument()) {\n      documentSize += estimateByteSize(document.data.value);\n    }\n    return documentSize;\n  }\n  isPinned(txn, key, upperBound) {\n    return PersistencePromise.or([() => this.persistence.mutationQueuesContainKey(txn, key), () => this.persistence.getTargetCache().containsKey(txn, key), () => {\n      const orphanedAt = this.orphanedSequenceNumbers.get(key);\n      return PersistencePromise.resolve(orphanedAt !== undefined && orphanedAt > upperBound);\n    }]);\n  }\n  getCacheSize(txn) {\n    return this.persistence.getRemoteDocumentCache().getSize(txn);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Performs database creation and schema upgrades. */\nclass SchemaConverter {\n  constructor(serializer) {\n    this.serializer = serializer;\n  }\n  /**\r\n   * Performs database creation and schema upgrades.\r\n   *\r\n   * Note that in production, this method is only ever used to upgrade the schema\r\n   * to SCHEMA_VERSION. Different values of toVersion are only used for testing\r\n   * and local feature development.\r\n   */\n  createOrUpgrade(db, txn, fromVersion, toVersion) {\n    const simpleDbTransaction = new SimpleDbTransaction('createOrUpgrade', txn);\n    if (fromVersion < 1 && toVersion >= 1) {\n      createPrimaryClientStore(db);\n      createMutationQueue(db);\n      createQueryCache(db);\n      createLegacyRemoteDocumentCache(db);\n    }\n    // Migration 2 to populate the targetGlobal object no longer needed since\n    // migration 3 unconditionally clears it.\n    let p = PersistencePromise.resolve();\n    if (fromVersion < 3 && toVersion >= 3) {\n      // Brand new clients don't need to drop and recreate--only clients that\n      // potentially have corrupt data.\n      if (fromVersion !== 0) {\n        dropQueryCache(db);\n        createQueryCache(db);\n      }\n      p = p.next(() => writeEmptyTargetGlobalEntry(simpleDbTransaction));\n    }\n    if (fromVersion < 4 && toVersion >= 4) {\n      if (fromVersion !== 0) {\n        // Schema version 3 uses auto-generated keys to generate globally unique\n        // mutation batch IDs (this was previously ensured internally by the\n        // client). To migrate to the new schema, we have to read all mutations\n        // and write them back out. We preserve the existing batch IDs to guarantee\n        // consistency with other object stores. Any further mutation batch IDs will\n        // be auto-generated.\n        p = p.next(() => upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction));\n      }\n      p = p.next(() => {\n        createClientMetadataStore(db);\n      });\n    }\n    if (fromVersion < 5 && toVersion >= 5) {\n      p = p.next(() => this.removeAcknowledgedMutations(simpleDbTransaction));\n    }\n    if (fromVersion < 6 && toVersion >= 6) {\n      p = p.next(() => {\n        createDocumentGlobalStore(db);\n        return this.addDocumentGlobal(simpleDbTransaction);\n      });\n    }\n    if (fromVersion < 7 && toVersion >= 7) {\n      p = p.next(() => this.ensureSequenceNumbers(simpleDbTransaction));\n    }\n    if (fromVersion < 8 && toVersion >= 8) {\n      p = p.next(() => this.createCollectionParentIndex(db, simpleDbTransaction));\n    }\n    if (fromVersion < 9 && toVersion >= 9) {\n      p = p.next(() => {\n        // Multi-Tab used to manage its own changelog, but this has been moved\n        // to the DbRemoteDocument object store itself. Since the previous change\n        // log only contained transient data, we can drop its object store.\n        dropRemoteDocumentChangesStore(db);\n        // Note: Schema version 9 used to create a read time index for the\n        // RemoteDocumentCache. This is now done with schema version 13.\n      });\n    }\n    if (fromVersion < 10 && toVersion >= 10) {\n      p = p.next(() => this.rewriteCanonicalIds(simpleDbTransaction));\n    }\n    if (fromVersion < 11 && toVersion >= 11) {\n      p = p.next(() => {\n        createBundlesStore(db);\n        createNamedQueriesStore(db);\n      });\n    }\n    if (fromVersion < 12 && toVersion >= 12) {\n      p = p.next(() => {\n        createDocumentOverlayStore(db);\n      });\n    }\n    if (fromVersion < 13 && toVersion >= 13) {\n      p = p.next(() => createRemoteDocumentCache(db)).next(() => this.rewriteRemoteDocumentCache(db, simpleDbTransaction)).next(() => db.deleteObjectStore(DbRemoteDocumentStore$1));\n    }\n    if (fromVersion < 14 && toVersion >= 14) {\n      p = p.next(() => this.runOverlayMigration(db, simpleDbTransaction));\n    }\n    if (fromVersion < 15 && toVersion >= 15) {\n      p = p.next(() => createFieldIndex(db));\n    }\n    if (fromVersion < 16 && toVersion >= 16) {\n      // Clear the object stores to remove possibly corrupted index entries\n      p = p.next(() => {\n        const indexStateStore = txn.objectStore(DbIndexStateStore);\n        indexStateStore.clear();\n      }).next(() => {\n        const indexEntryStore = txn.objectStore(DbIndexEntryStore);\n        indexEntryStore.clear();\n      });\n    }\n    if (fromVersion < 17 && toVersion >= 17) {\n      p = p.next(() => {\n        createGlobalsStore(db);\n      });\n    }\n    return p;\n  }\n  addDocumentGlobal(txn) {\n    let byteSize = 0;\n    return txn.store(DbRemoteDocumentStore$1).iterate((_, doc) => {\n      byteSize += dbDocumentSize(doc);\n    }).next(() => {\n      const metadata = {\n        byteSize\n      };\n      return txn.store(DbRemoteDocumentGlobalStore).put(DbRemoteDocumentGlobalKey, metadata);\n    });\n  }\n  removeAcknowledgedMutations(txn) {\n    const queuesStore = txn.store(DbMutationQueueStore);\n    const mutationsStore = txn.store(DbMutationBatchStore);\n    return queuesStore.loadAll().next(queues => {\n      return PersistencePromise.forEach(queues, queue => {\n        const range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);\n        return mutationsStore.loadAll(DbMutationBatchUserMutationsIndex, range).next(dbBatches => {\n          return PersistencePromise.forEach(dbBatches, dbBatch => {\n            hardAssert(dbBatch.userId === queue.userId);\n            const batch = fromDbMutationBatch(this.serializer, dbBatch);\n            return removeMutationBatch(txn, queue.userId, batch).next(() => {});\n          });\n        });\n      });\n    });\n  }\n  /**\r\n   * Ensures that every document in the remote document cache has a corresponding sentinel row\r\n   * with a sequence number. Missing rows are given the most recently used sequence number.\r\n   */\n  ensureSequenceNumbers(txn) {\n    const documentTargetStore = txn.store(DbTargetDocumentStore);\n    const documentsStore = txn.store(DbRemoteDocumentStore$1);\n    const globalTargetStore = txn.store(DbTargetGlobalStore);\n    return globalTargetStore.get(DbTargetGlobalKey).next(metadata => {\n      const writeSentinelKey = path => {\n        return documentTargetStore.put({\n          targetId: 0,\n          path: encodeResourcePath(path),\n          sequenceNumber: metadata.highestListenSequenceNumber\n        });\n      };\n      const promises = [];\n      return documentsStore.iterate((key, doc) => {\n        const path = new ResourcePath(key);\n        const docSentinelKey = sentinelKey(path);\n        promises.push(documentTargetStore.get(docSentinelKey).next(maybeSentinel => {\n          if (!maybeSentinel) {\n            return writeSentinelKey(path);\n          } else {\n            return PersistencePromise.resolve();\n          }\n        }));\n      }).next(() => PersistencePromise.waitFor(promises));\n    });\n  }\n  createCollectionParentIndex(db, txn) {\n    // Create the index.\n    db.createObjectStore(DbCollectionParentStore, {\n      keyPath: DbCollectionParentKeyPath\n    });\n    const collectionParentsStore = txn.store(DbCollectionParentStore);\n    // Helper to add an index entry iff we haven't already written it.\n    const cache = new MemoryCollectionParentIndex();\n    const addEntry = collectionPath => {\n      if (cache.add(collectionPath)) {\n        const collectionId = collectionPath.lastSegment();\n        const parentPath = collectionPath.popLast();\n        return collectionParentsStore.put({\n          collectionId,\n          parent: encodeResourcePath(parentPath)\n        });\n      }\n    };\n    // Index existing remote documents.\n    return txn.store(DbRemoteDocumentStore$1).iterate({\n      keysOnly: true\n    }, (pathSegments, _) => {\n      const path = new ResourcePath(pathSegments);\n      return addEntry(path.popLast());\n    }).next(() => {\n      // Index existing mutations.\n      return txn.store(DbDocumentMutationStore).iterate({\n        keysOnly: true\n      }, ([userID, encodedPath, batchId], _) => {\n        const path = decodeResourcePath(encodedPath);\n        return addEntry(path.popLast());\n      });\n    });\n  }\n  rewriteCanonicalIds(txn) {\n    const targetStore = txn.store(DbTargetStore);\n    return targetStore.iterate((key, originalDbTarget) => {\n      const originalTargetData = fromDbTarget(originalDbTarget);\n      const updatedDbTarget = toDbTarget(this.serializer, originalTargetData);\n      return targetStore.put(updatedDbTarget);\n    });\n  }\n  rewriteRemoteDocumentCache(db, transaction) {\n    const legacyRemoteDocumentStore = transaction.store(DbRemoteDocumentStore$1);\n    const writes = [];\n    return legacyRemoteDocumentStore.iterate((_, legacyDocument) => {\n      const remoteDocumentStore = transaction.store(DbRemoteDocumentStore);\n      const path = extractKey(legacyDocument).path.toArray();\n      const dbRemoteDocument = {\n        prefixPath: path.slice(0, path.length - 2),\n        collectionGroup: path[path.length - 2],\n        documentId: path[path.length - 1],\n        readTime: legacyDocument.readTime || [0, 0],\n        unknownDocument: legacyDocument.unknownDocument,\n        noDocument: legacyDocument.noDocument,\n        document: legacyDocument.document,\n        hasCommittedMutations: !!legacyDocument.hasCommittedMutations\n      };\n      writes.push(remoteDocumentStore.put(dbRemoteDocument));\n    }).next(() => PersistencePromise.waitFor(writes));\n  }\n  runOverlayMigration(db, transaction) {\n    const mutationsStore = transaction.store(DbMutationBatchStore);\n    const remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer);\n    const memoryPersistence = new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer.remoteSerializer);\n    return mutationsStore.loadAll().next(dbBatches => {\n      const userToDocumentSet = new Map();\n      dbBatches.forEach(dbBatch => {\n        var _a;\n        let documentSet = (_a = userToDocumentSet.get(dbBatch.userId)) !== null && _a !== void 0 ? _a : documentKeySet();\n        const batch = fromDbMutationBatch(this.serializer, dbBatch);\n        batch.keys().forEach(key => documentSet = documentSet.add(key));\n        userToDocumentSet.set(dbBatch.userId, documentSet);\n      });\n      return PersistencePromise.forEach(userToDocumentSet, (allDocumentKeysForUser, userId) => {\n        const user = new User(userId);\n        const documentOverlayCache = IndexedDbDocumentOverlayCache.forUser(this.serializer, user);\n        // NOTE: The index manager and the reference delegate are\n        // irrelevant for the purpose of recalculating and saving\n        // overlays. We can therefore simply use the memory\n        // implementation.\n        const indexManager = memoryPersistence.getIndexManager(user);\n        const mutationQueue = IndexedDbMutationQueue.forUser(user, this.serializer, indexManager, memoryPersistence.referenceDelegate);\n        const localDocumentsView = new LocalDocumentsView(remoteDocumentCache, mutationQueue, documentOverlayCache, indexManager);\n        return localDocumentsView.recalculateAndSaveOverlaysForDocumentKeys(new IndexedDbTransaction(transaction, ListenSequence.INVALID), allDocumentKeysForUser).next();\n      });\n    });\n  }\n}\nfunction sentinelKey(path) {\n  return [0, encodeResourcePath(path)];\n}\nfunction createPrimaryClientStore(db) {\n  db.createObjectStore(DbPrimaryClientStore);\n}\nfunction createMutationQueue(db) {\n  db.createObjectStore(DbMutationQueueStore, {\n    keyPath: DbMutationQueueKeyPath\n  });\n  const mutationBatchesStore = db.createObjectStore(DbMutationBatchStore, {\n    keyPath: DbMutationBatchKeyPath,\n    autoIncrement: true\n  });\n  mutationBatchesStore.createIndex(DbMutationBatchUserMutationsIndex, DbMutationBatchUserMutationsKeyPath, {\n    unique: true\n  });\n  db.createObjectStore(DbDocumentMutationStore);\n}\n/**\r\n * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads\r\n * and rewrites all data.\r\n */\nfunction upgradeMutationBatchSchemaAndMigrateData(db, txn) {\n  const v1MutationsStore = txn.store(DbMutationBatchStore);\n  return v1MutationsStore.loadAll().next(existingMutations => {\n    db.deleteObjectStore(DbMutationBatchStore);\n    const mutationsStore = db.createObjectStore(DbMutationBatchStore, {\n      keyPath: DbMutationBatchKeyPath,\n      autoIncrement: true\n    });\n    mutationsStore.createIndex(DbMutationBatchUserMutationsIndex, DbMutationBatchUserMutationsKeyPath, {\n      unique: true\n    });\n    const v3MutationsStore = txn.store(DbMutationBatchStore);\n    const writeAll = existingMutations.map(mutation => v3MutationsStore.put(mutation));\n    return PersistencePromise.waitFor(writeAll);\n  });\n}\nfunction createLegacyRemoteDocumentCache(db) {\n  db.createObjectStore(DbRemoteDocumentStore$1);\n}\nfunction createRemoteDocumentCache(db) {\n  const remoteDocumentStore = db.createObjectStore(DbRemoteDocumentStore, {\n    keyPath: DbRemoteDocumentKeyPath\n  });\n  remoteDocumentStore.createIndex(DbRemoteDocumentDocumentKeyIndex, DbRemoteDocumentDocumentKeyIndexPath);\n  remoteDocumentStore.createIndex(DbRemoteDocumentCollectionGroupIndex, DbRemoteDocumentCollectionGroupIndexPath);\n}\nfunction createDocumentGlobalStore(db) {\n  db.createObjectStore(DbRemoteDocumentGlobalStore);\n}\nfunction createQueryCache(db) {\n  const targetDocumentsStore = db.createObjectStore(DbTargetDocumentStore, {\n    keyPath: DbTargetDocumentKeyPath\n  });\n  targetDocumentsStore.createIndex(DbTargetDocumentDocumentTargetsIndex, DbTargetDocumentDocumentTargetsKeyPath, {\n    unique: true\n  });\n  const targetStore = db.createObjectStore(DbTargetStore, {\n    keyPath: DbTargetKeyPath\n  });\n  // NOTE: This is unique only because the TargetId is the suffix.\n  targetStore.createIndex(DbTargetQueryTargetsIndexName, DbTargetQueryTargetsKeyPath, {\n    unique: true\n  });\n  db.createObjectStore(DbTargetGlobalStore);\n}\nfunction dropQueryCache(db) {\n  db.deleteObjectStore(DbTargetDocumentStore);\n  db.deleteObjectStore(DbTargetStore);\n  db.deleteObjectStore(DbTargetGlobalStore);\n}\nfunction dropRemoteDocumentChangesStore(db) {\n  if (db.objectStoreNames.contains('remoteDocumentChanges')) {\n    db.deleteObjectStore('remoteDocumentChanges');\n  }\n}\n/**\r\n * Creates the target global singleton row.\r\n *\r\n * @param txn - The version upgrade transaction for indexeddb\r\n */\nfunction writeEmptyTargetGlobalEntry(txn) {\n  const globalStore = txn.store(DbTargetGlobalStore);\n  const metadata = {\n    highestTargetId: 0,\n    highestListenSequenceNumber: 0,\n    lastRemoteSnapshotVersion: SnapshotVersion.min().toTimestamp(),\n    targetCount: 0\n  };\n  return globalStore.put(DbTargetGlobalKey, metadata);\n}\nfunction createClientMetadataStore(db) {\n  db.createObjectStore(DbClientMetadataStore, {\n    keyPath: DbClientMetadataKeyPath\n  });\n}\nfunction createBundlesStore(db) {\n  db.createObjectStore(DbBundleStore, {\n    keyPath: DbBundleKeyPath\n  });\n}\nfunction createNamedQueriesStore(db) {\n  db.createObjectStore(DbNamedQueryStore, {\n    keyPath: DbNamedQueryKeyPath\n  });\n}\nfunction createFieldIndex(db) {\n  const indexConfigurationStore = db.createObjectStore(DbIndexConfigurationStore, {\n    keyPath: DbIndexConfigurationKeyPath,\n    autoIncrement: true\n  });\n  indexConfigurationStore.createIndex(DbIndexConfigurationCollectionGroupIndex, DbIndexConfigurationCollectionGroupIndexPath, {\n    unique: false\n  });\n  const indexStateStore = db.createObjectStore(DbIndexStateStore, {\n    keyPath: DbIndexStateKeyPath\n  });\n  indexStateStore.createIndex(DbIndexStateSequenceNumberIndex, DbIndexStateSequenceNumberIndexPath, {\n    unique: false\n  });\n  const indexEntryStore = db.createObjectStore(DbIndexEntryStore, {\n    keyPath: DbIndexEntryKeyPath\n  });\n  indexEntryStore.createIndex(DbIndexEntryDocumentKeyIndex, DbIndexEntryDocumentKeyIndexPath, {\n    unique: false\n  });\n}\nfunction createDocumentOverlayStore(db) {\n  const documentOverlayStore = db.createObjectStore(DbDocumentOverlayStore, {\n    keyPath: DbDocumentOverlayKeyPath\n  });\n  documentOverlayStore.createIndex(DbDocumentOverlayCollectionPathOverlayIndex, DbDocumentOverlayCollectionPathOverlayIndexPath, {\n    unique: false\n  });\n  documentOverlayStore.createIndex(DbDocumentOverlayCollectionGroupOverlayIndex, DbDocumentOverlayCollectionGroupOverlayIndexPath, {\n    unique: false\n  });\n}\nfunction createGlobalsStore(db) {\n  db.createObjectStore(DbGlobalsStore, {\n    keyPath: DbGlobalsKeyPath\n  });\n}\nfunction extractKey(remoteDoc) {\n  if (remoteDoc.document) {\n    return new DocumentKey(ResourcePath.fromString(remoteDoc.document.name).popFirst(5));\n  } else if (remoteDoc.noDocument) {\n    return DocumentKey.fromSegments(remoteDoc.noDocument.path);\n  } else if (remoteDoc.unknownDocument) {\n    return DocumentKey.fromSegments(remoteDoc.unknownDocument.path);\n  } else {\n    return fail();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$c = 'IndexedDbPersistence';\n/**\r\n * Oldest acceptable age in milliseconds for client metadata before the client\r\n * is considered inactive and its associated data is garbage collected.\r\n */\nconst MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes\n/**\r\n * Oldest acceptable metadata age for clients that may participate in the\r\n * primary lease election. Clients that have not updated their client metadata\r\n * within 5 seconds are not eligible to receive a primary lease.\r\n */\nconst MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;\n/**\r\n * The interval at which clients will update their metadata, including\r\n * refreshing their primary lease if held or potentially trying to acquire it if\r\n * not held.\r\n *\r\n * Primary clients may opportunistically refresh their metadata earlier\r\n * if they're already performing an IndexedDB operation.\r\n */\nconst CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;\n/** User-facing error when the primary lease is required but not available. */\nconst PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Failed to obtain exclusive access to the persistence layer. To allow ' + 'shared access, multi-tab synchronization has to be enabled in all tabs. ' + 'If you are using `experimentalForceOwningTab:true`, make sure that only ' + 'one tab has persistence enabled at any given time.';\nconst UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing IndexedDB or is known to have ' + 'an incomplete implementation. Offline persistence has been disabled.';\n// The format of the LocalStorage key that stores zombied client is:\n//     firestore_zombie_<persistence_prefix>_<instance_key>\nconst ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';\n/**\r\n * The name of the main (and currently only) IndexedDB database. This name is\r\n * appended to the prefix provided to the IndexedDbPersistence constructor.\r\n */\nconst MAIN_DATABASE = 'main';\n/**\r\n * An IndexedDB-backed instance of Persistence. Data is stored persistently\r\n * across sessions.\r\n *\r\n * On Web only, the Firestore SDKs support shared access to its persistence\r\n * layer. This allows multiple browser tabs to read and write to IndexedDb and\r\n * to synchronize state even without network connectivity. Shared access is\r\n * currently optional and not enabled unless all clients invoke\r\n * `enablePersistence()` with `{synchronizeTabs:true}`.\r\n *\r\n * In multi-tab mode, if multiple clients are active at the same time, the SDK\r\n * will designate one client as the “primary client”. An effort is made to pick\r\n * a visible, network-connected and active client, and this client is\r\n * responsible for letting other clients know about its presence. The primary\r\n * client writes a unique client-generated identifier (the client ID) to\r\n * IndexedDb’s “owner” store every 4 seconds. If the primary client fails to\r\n * update this entry, another client can acquire the lease and take over as\r\n * primary.\r\n *\r\n * Some persistence operations in the SDK are designated as primary-client only\r\n * operations. This includes the acknowledgment of mutations and all updates of\r\n * remote documents. The effects of these operations are written to persistence\r\n * and then broadcast to other tabs via LocalStorage (see\r\n * `WebStorageSharedClientState`), which then refresh their state from\r\n * persistence.\r\n *\r\n * Similarly, the primary client listens to notifications sent by secondary\r\n * clients to discover persistence changes written by secondary clients, such as\r\n * the addition of new mutations and query targets.\r\n *\r\n * If multi-tab is not enabled and another tab already obtained the primary\r\n * lease, IndexedDbPersistence enters a failed state and all subsequent\r\n * operations will automatically fail.\r\n *\r\n * Additionally, there is an optimization so that when a tab is closed, the\r\n * primary lease is released immediately (this is especially important to make\r\n * sure that a refreshed tab is able to immediately re-acquire the primary\r\n * lease). Unfortunately, IndexedDB cannot be reliably used in window.unload\r\n * since it is an asynchronous API. So in addition to attempting to give up the\r\n * lease, the leaseholder writes its client ID to a \"zombiedClient\" entry in\r\n * LocalStorage which acts as an indicator that another tab should go ahead and\r\n * take the primary lease immediately regardless of the current lease timestamp.\r\n *\r\n * TODO(b/114226234): Remove `synchronizeTabs` section when multi-tab is no\r\n * longer optional.\r\n */\nclass IndexedDbPersistence {\n  constructor(\n  /**\r\n   * Whether to synchronize the in-memory state of multiple tabs and share\r\n   * access to local persistence.\r\n   */\n  allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window, document, serializer, sequenceNumberSyncer,\n  /**\r\n   * If set to true, forcefully obtains database access. Existing tabs will\r\n   * no longer be able to access IndexedDB.\r\n   */\n  forceOwningTab, schemaVersion = SCHEMA_VERSION) {\n    this.allowTabSynchronization = allowTabSynchronization;\n    this.persistenceKey = persistenceKey;\n    this.clientId = clientId;\n    this.queue = queue;\n    this.window = window;\n    this.document = document;\n    this.sequenceNumberSyncer = sequenceNumberSyncer;\n    this.forceOwningTab = forceOwningTab;\n    this.schemaVersion = schemaVersion;\n    this.listenSequence = null;\n    this._started = false;\n    this.isPrimary = false;\n    this.networkEnabled = true;\n    /** Our window.unload handler, if registered. */\n    this.windowUnloadHandler = null;\n    this.inForeground = false;\n    /** Our 'visibilitychange' listener if registered. */\n    this.documentVisibilityHandler = null;\n    /** The client metadata refresh task. */\n    this.clientMetadataRefresher = null;\n    /** The last time we garbage collected the client metadata object store. */\n    this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;\n    /** A listener to notify on primary state changes. */\n    this.primaryStateListener = _ => Promise.resolve();\n    if (!IndexedDbPersistence.isAvailable()) {\n      throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);\n    }\n    this.referenceDelegate = new IndexedDbLruDelegateImpl(this, lruParams);\n    this.dbName = persistenceKey + MAIN_DATABASE;\n    this.serializer = new LocalSerializer(serializer);\n    this.simpleDb = new SimpleDb(this.dbName, this.schemaVersion, new SchemaConverter(this.serializer));\n    this.globalsCache = new IndexedDbGlobalsCache();\n    this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);\n    this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer);\n    this.bundleCache = new IndexedDbBundleCache();\n    if (this.window && this.window.localStorage) {\n      this.webStorage = this.window.localStorage;\n    } else {\n      this.webStorage = null;\n      if (forceOwningTab === false) {\n        logError(LOG_TAG$c, 'LocalStorage is unavailable. As a result, persistence may not work ' + 'reliably. In particular enablePersistence() could fail immediately ' + 'after refreshing the page.');\n      }\n    }\n  }\n  /**\r\n   * Attempt to start IndexedDb persistence.\r\n   *\r\n   * @returns Whether persistence was enabled.\r\n   */\n  start() {\n    // NOTE: This is expected to fail sometimes (in the case of another tab\n    // already having the persistence lock), so it's the first thing we should\n    // do.\n    return this.updateClientMetadataAndTryBecomePrimary().then(() => {\n      if (!this.isPrimary && !this.allowTabSynchronization) {\n        // Fail `start()` if `synchronizeTabs` is disabled and we cannot\n        // obtain the primary lease.\n        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n      }\n      this.attachVisibilityHandler();\n      this.attachWindowUnloadHook();\n      this.scheduleClientMetadataAndPrimaryLeaseRefreshes();\n      return this.runTransaction('getHighestListenSequenceNumber', 'readonly', txn => this.targetCache.getHighestSequenceNumber(txn));\n    }).then(highestListenSequenceNumber => {\n      this.listenSequence = new ListenSequence(highestListenSequenceNumber, this.sequenceNumberSyncer);\n    }).then(() => {\n      this._started = true;\n    }).catch(reason => {\n      this.simpleDb && this.simpleDb.close();\n      return Promise.reject(reason);\n    });\n  }\n  /**\r\n   * Registers a listener that gets called when the primary state of the\r\n   * instance changes. Upon registering, this listener is invoked immediately\r\n   * with the current primary state.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n  setPrimaryStateListener(primaryStateListener) {\n    this.primaryStateListener = async primaryState => {\n      if (this.started) {\n        return primaryStateListener(primaryState);\n      }\n    };\n    return primaryStateListener(this.isPrimary);\n  }\n  /**\r\n   * Registers a listener that gets called when the database receives a\r\n   * version change event indicating that it has deleted.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n  setDatabaseDeletedListener(databaseDeletedListener) {\n    this.simpleDb.setVersionChangeListener(async event => {\n      // Check if an attempt is made to delete IndexedDB.\n      if (event.newVersion === null) {\n        await databaseDeletedListener();\n      }\n    });\n  }\n  /**\r\n   * Adjusts the current network state in the client's metadata, potentially\r\n   * affecting the primary lease.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n  setNetworkEnabled(networkEnabled) {\n    if (this.networkEnabled !== networkEnabled) {\n      this.networkEnabled = networkEnabled;\n      // Schedule a primary lease refresh for immediate execution. The eventual\n      // lease update will be propagated via `primaryStateListener`.\n      this.queue.enqueueAndForget(async () => {\n        if (this.started) {\n          await this.updateClientMetadataAndTryBecomePrimary();\n        }\n      });\n    }\n  }\n  /**\r\n   * Updates the client metadata in IndexedDb and attempts to either obtain or\r\n   * extend the primary lease for the local client. Asynchronously notifies the\r\n   * primary state listener if the client either newly obtained or released its\r\n   * primary lease.\r\n   */\n  updateClientMetadataAndTryBecomePrimary() {\n    return this.runTransaction('updateClientMetadataAndTryBecomePrimary', 'readwrite', txn => {\n      const metadataStore = clientMetadataStore(txn);\n      return metadataStore.put({\n        clientId: this.clientId,\n        updateTimeMs: Date.now(),\n        networkEnabled: this.networkEnabled,\n        inForeground: this.inForeground\n      }).next(() => {\n        if (this.isPrimary) {\n          return this.verifyPrimaryLease(txn).next(success => {\n            if (!success) {\n              this.isPrimary = false;\n              this.queue.enqueueRetryable(() => this.primaryStateListener(false));\n            }\n          });\n        }\n      }).next(() => this.canActAsPrimary(txn)).next(canActAsPrimary => {\n        if (this.isPrimary && !canActAsPrimary) {\n          return this.releasePrimaryLeaseIfHeld(txn).next(() => false);\n        } else if (canActAsPrimary) {\n          return this.acquireOrExtendPrimaryLease(txn).next(() => true);\n        } else {\n          return /* canActAsPrimary= */false;\n        }\n      });\n    }).catch(e => {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG$c, 'Failed to extend owner lease: ', e);\n        // Proceed with the existing state. Any subsequent access to\n        // IndexedDB will verify the lease.\n        return this.isPrimary;\n      }\n      if (!this.allowTabSynchronization) {\n        throw e;\n      }\n      logDebug(LOG_TAG$c, 'Releasing owner lease after error during lease refresh', e);\n      return /* isPrimary= */false;\n    }).then(isPrimary => {\n      if (this.isPrimary !== isPrimary) {\n        this.queue.enqueueRetryable(() => this.primaryStateListener(isPrimary));\n      }\n      this.isPrimary = isPrimary;\n    });\n  }\n  verifyPrimaryLease(txn) {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(primaryClient => {\n      return PersistencePromise.resolve(this.isLocalClient(primaryClient));\n    });\n  }\n  removeClientMetadata(txn) {\n    const metadataStore = clientMetadataStore(txn);\n    return metadataStore.delete(this.clientId);\n  }\n  /**\r\n   * If the garbage collection threshold has passed, prunes the\r\n   * RemoteDocumentChanges and the ClientMetadata store based on the last update\r\n   * time of all clients.\r\n   */\n  async maybeGarbageCollectMultiClientState() {\n    if (this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)) {\n      this.lastGarbageCollectionTime = Date.now();\n      const inactiveClients = await this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', txn => {\n        const metadataStore = getStore(txn, DbClientMetadataStore);\n        return metadataStore.loadAll().next(existingClients => {\n          const active = this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);\n          const inactive = existingClients.filter(client => active.indexOf(client) === -1);\n          // Delete metadata for clients that are no longer considered active.\n          return PersistencePromise.forEach(inactive, inactiveClient => metadataStore.delete(inactiveClient.clientId)).next(() => inactive);\n        });\n      }).catch(() => {\n        // Ignore primary lease violations or any other type of error. The next\n        // primary will run `maybeGarbageCollectMultiClientState()` again.\n        // We don't use `ignoreIfPrimaryLeaseLoss()` since we don't want to depend\n        // on LocalStore.\n        return [];\n      });\n      // Delete potential leftover entries that may continue to mark the\n      // inactive clients as zombied in LocalStorage.\n      // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for\n      // the client atomically, but we can't. So we opt to delete the IndexedDb\n      // entries first to avoid potentially reviving a zombied client.\n      if (this.webStorage) {\n        for (const inactiveClient of inactiveClients) {\n          this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));\n        }\n      }\n    }\n  }\n  /**\r\n   * Schedules a recurring timer to update the client metadata and to either\r\n   * extend or acquire the primary lease if the client is eligible.\r\n   */\n  scheduleClientMetadataAndPrimaryLeaseRefreshes() {\n    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(\"client_metadata_refresh\" /* TimerId.ClientMetadataRefresh */, CLIENT_METADATA_REFRESH_INTERVAL_MS, () => {\n      return this.updateClientMetadataAndTryBecomePrimary().then(() => this.maybeGarbageCollectMultiClientState()).then(() => this.scheduleClientMetadataAndPrimaryLeaseRefreshes());\n    });\n  }\n  /** Checks whether `client` is the local client. */\n  isLocalClient(client) {\n    return client ? client.ownerId === this.clientId : false;\n  }\n  /**\r\n   * Evaluate the state of all active clients and determine whether the local\r\n   * client is or can act as the holder of the primary lease. Returns whether\r\n   * the client is eligible for the lease, but does not actually acquire it.\r\n   * May return 'false' even if there is no active leaseholder and another\r\n   * (foreground) client should become leaseholder instead.\r\n   */\n  canActAsPrimary(txn) {\n    if (this.forceOwningTab) {\n      return PersistencePromise.resolve(true);\n    }\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(currentPrimary => {\n      const currentLeaseIsValid = currentPrimary !== null && this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !this.isClientZombied(currentPrimary.ownerId);\n      // A client is eligible for the primary lease if:\n      // - its network is enabled and the client's tab is in the foreground.\n      // - its network is enabled and no other client's tab is in the\n      //   foreground.\n      // - every clients network is disabled and the client's tab is in the\n      //   foreground.\n      // - every clients network is disabled and no other client's tab is in\n      //   the foreground.\n      // - the `forceOwningTab` setting was passed in.\n      if (currentLeaseIsValid) {\n        if (this.isLocalClient(currentPrimary) && this.networkEnabled) {\n          return true;\n        }\n        if (!this.isLocalClient(currentPrimary)) {\n          if (!currentPrimary.allowTabSynchronization) {\n            // Fail the `canActAsPrimary` check if the current leaseholder has\n            // not opted into multi-tab synchronization. If this happens at\n            // client startup, we reject the Promise returned by\n            // `enablePersistence()` and the user can continue to use Firestore\n            // with in-memory persistence.\n            // If this fails during a lease refresh, we will instead block the\n            // AsyncQueue from executing further operations. Note that this is\n            // acceptable since mixing & matching different `synchronizeTabs`\n            // settings is not supported.\n            //\n            // TODO(b/114226234): Remove this check when `synchronizeTabs` can\n            // no longer be turned off.\n            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n          }\n          return false;\n        }\n      }\n      if (this.networkEnabled && this.inForeground) {\n        return true;\n      }\n      return clientMetadataStore(txn).loadAll().next(existingClients => {\n        // Process all existing clients and determine whether at least one of\n        // them is better suited to obtain the primary lease.\n        const preferredCandidate = this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(otherClient => {\n          if (this.clientId !== otherClient.clientId) {\n            const otherClientHasBetterNetworkState = !this.networkEnabled && otherClient.networkEnabled;\n            const otherClientHasBetterVisibility = !this.inForeground && otherClient.inForeground;\n            const otherClientHasSameNetworkState = this.networkEnabled === otherClient.networkEnabled;\n            if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return preferredCandidate === undefined;\n      });\n    }).next(canActAsPrimary => {\n      if (this.isPrimary !== canActAsPrimary) {\n        logDebug(LOG_TAG$c, `Client ${canActAsPrimary ? 'is' : 'is not'} eligible for a primary lease.`);\n      }\n      return canActAsPrimary;\n    });\n  }\n  async shutdown() {\n    // The shutdown() operations are idempotent and can be called even when\n    // start() aborted (e.g. because it couldn't acquire the persistence lease).\n    this._started = false;\n    this.markClientZombied();\n    if (this.clientMetadataRefresher) {\n      this.clientMetadataRefresher.cancel();\n      this.clientMetadataRefresher = null;\n    }\n    this.detachVisibilityHandler();\n    this.detachWindowUnloadHook();\n    // Use `SimpleDb.runTransaction` directly to avoid failing if another tab\n    // has obtained the primary lease.\n    await this.simpleDb.runTransaction('shutdown', 'readwrite', [DbPrimaryClientStore, DbClientMetadataStore], simpleDbTxn => {\n      const persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);\n      return this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(() => this.removeClientMetadata(persistenceTransaction));\n    });\n    this.simpleDb.close();\n    // Remove the entry marking the client as zombied from LocalStorage since\n    // we successfully deleted its metadata from IndexedDb.\n    this.removeClientZombiedEntry();\n  }\n  /**\r\n   * Returns clients that are not zombied and have an updateTime within the\r\n   * provided threshold.\r\n   */\n  filterActiveClients(clients, activityThresholdMs) {\n    return clients.filter(client => this.isWithinAge(client.updateTimeMs, activityThresholdMs) && !this.isClientZombied(client.clientId));\n  }\n  /**\r\n   * Returns the IDs of the clients that are currently active. If multi-tab\r\n   * is not supported, returns an array that only contains the local client's\r\n   * ID.\r\n   *\r\n   * PORTING NOTE: This is only used for Web multi-tab.\r\n   */\n  getActiveClients() {\n    return this.runTransaction('getActiveClients', 'readonly', txn => {\n      return clientMetadataStore(txn).loadAll().next(clients => this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(clientMetadata => clientMetadata.clientId));\n    });\n  }\n  get started() {\n    return this._started;\n  }\n  getGlobalsCache() {\n    return this.globalsCache;\n  }\n  getMutationQueue(user, indexManager) {\n    return IndexedDbMutationQueue.forUser(user, this.serializer, indexManager, this.referenceDelegate);\n  }\n  getTargetCache() {\n    return this.targetCache;\n  }\n  getRemoteDocumentCache() {\n    return this.remoteDocumentCache;\n  }\n  getIndexManager(user) {\n    return new IndexedDbIndexManager(user, this.serializer.remoteSerializer.databaseId);\n  }\n  getDocumentOverlayCache(user) {\n    return IndexedDbDocumentOverlayCache.forUser(this.serializer, user);\n  }\n  getBundleCache() {\n    return this.bundleCache;\n  }\n  runTransaction(action, mode, transactionOperation) {\n    logDebug(LOG_TAG$c, 'Starting transaction:', action);\n    const simpleDbMode = mode === 'readonly' ? 'readonly' : 'readwrite';\n    const objectStores = getObjectStores(this.schemaVersion);\n    let persistenceTransaction;\n    // Do all transactions as readwrite against all object stores, since we\n    // are the only reader/writer.\n    return this.simpleDb.runTransaction(action, simpleDbMode, objectStores, simpleDbTxn => {\n      persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, this.listenSequence ? this.listenSequence.next() : ListenSequence.INVALID);\n      if (mode === 'readwrite-primary') {\n        // While we merely verify that we have (or can acquire) the lease\n        // immediately, we wait to extend the primary lease until after\n        // executing transactionOperation(). This ensures that even if the\n        // transactionOperation takes a long time, we'll use a recent\n        // leaseTimestampMs in the extended (or newly acquired) lease.\n        return this.verifyPrimaryLease(persistenceTransaction).next(holdsPrimaryLease => {\n          if (holdsPrimaryLease) {\n            return /* holdsPrimaryLease= */true;\n          }\n          return this.canActAsPrimary(persistenceTransaction);\n        }).next(holdsPrimaryLease => {\n          if (!holdsPrimaryLease) {\n            logError(`Failed to obtain primary lease for action '${action}'.`);\n            this.isPrimary = false;\n            this.queue.enqueueRetryable(() => this.primaryStateListener(false));\n            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);\n          }\n          return transactionOperation(persistenceTransaction);\n        }).next(result => {\n          return this.acquireOrExtendPrimaryLease(persistenceTransaction).next(() => result);\n        });\n      } else {\n        return this.verifyAllowTabSynchronization(persistenceTransaction).next(() => transactionOperation(persistenceTransaction));\n      }\n    }).then(result => {\n      persistenceTransaction.raiseOnCommittedEvent();\n      return result;\n    });\n  }\n  /**\r\n   * Verifies that the current tab is the primary leaseholder or alternatively\r\n   * that the leaseholder has opted into multi-tab synchronization.\r\n   */\n  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer\n  // be turned off.\n  verifyAllowTabSynchronization(txn) {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(currentPrimary => {\n      const currentLeaseIsValid = currentPrimary !== null && this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !this.isClientZombied(currentPrimary.ownerId);\n      if (currentLeaseIsValid && !this.isLocalClient(currentPrimary)) {\n        if (!this.forceOwningTab && (!this.allowTabSynchronization || !currentPrimary.allowTabSynchronization)) {\n          throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);\n        }\n      }\n    });\n  }\n  /**\r\n   * Obtains or extends the new primary lease for the local client. This\r\n   * method does not verify that the client is eligible for this lease.\r\n   */\n  acquireOrExtendPrimaryLease(txn) {\n    const newPrimary = {\n      ownerId: this.clientId,\n      allowTabSynchronization: this.allowTabSynchronization,\n      leaseTimestampMs: Date.now()\n    };\n    return primaryClientStore(txn).put(DbPrimaryClientKey, newPrimary);\n  }\n  static isAvailable() {\n    return SimpleDb.isAvailable();\n  }\n  /** Checks the primary lease and removes it if we are the current primary. */\n  releasePrimaryLeaseIfHeld(txn) {\n    const store = primaryClientStore(txn);\n    return store.get(DbPrimaryClientKey).next(primaryClient => {\n      if (this.isLocalClient(primaryClient)) {\n        logDebug(LOG_TAG$c, 'Releasing primary lease.');\n        return store.delete(DbPrimaryClientKey);\n      } else {\n        return PersistencePromise.resolve();\n      }\n    });\n  }\n  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */\n  isWithinAge(updateTimeMs, maxAgeMs) {\n    const now = Date.now();\n    const minAcceptable = now - maxAgeMs;\n    const maxAcceptable = now;\n    if (updateTimeMs < minAcceptable) {\n      return false;\n    } else if (updateTimeMs > maxAcceptable) {\n      logError(`Detected an update time that is in the future: ${updateTimeMs} > ${maxAcceptable}`);\n      return false;\n    }\n    return true;\n  }\n  attachVisibilityHandler() {\n    if (this.document !== null && typeof this.document.addEventListener === 'function') {\n      this.documentVisibilityHandler = () => {\n        this.queue.enqueueAndForget(() => {\n          this.inForeground = this.document.visibilityState === 'visible';\n          return this.updateClientMetadataAndTryBecomePrimary();\n        });\n      };\n      this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);\n      this.inForeground = this.document.visibilityState === 'visible';\n    }\n  }\n  detachVisibilityHandler() {\n    if (this.documentVisibilityHandler) {\n      this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);\n      this.documentVisibilityHandler = null;\n    }\n  }\n  /**\r\n   * Attaches a window.unload handler that will synchronously write our\r\n   * clientId to a \"zombie client id\" location in LocalStorage. This can be used\r\n   * by tabs trying to acquire the primary lease to determine that the lease\r\n   * is no longer valid even if the timestamp is recent. This is particularly\r\n   * important for the refresh case (so the tab correctly re-acquires the\r\n   * primary lease). LocalStorage is used for this rather than IndexedDb because\r\n   * it is a synchronous API and so can be used reliably from  an unload\r\n   * handler.\r\n   */\n  attachWindowUnloadHook() {\n    var _a;\n    if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === 'function') {\n      this.windowUnloadHandler = () => {\n        // Note: In theory, this should be scheduled on the AsyncQueue since it\n        // accesses internal state. We execute this code directly during shutdown\n        // to make sure it gets a chance to run.\n        this.markClientZombied();\n        const safariIndexdbBugVersionRegex = /(?:Version|Mobile)\\/1[456]/;\n        if (isSafari() && (navigator.appVersion.match(safariIndexdbBugVersionRegex) || navigator.userAgent.match(safariIndexdbBugVersionRegex))) {\n          // On Safari 14, 15, and 16, we do not run any cleanup actions as it might\n          // trigger a bug that prevents Safari from re-opening IndexedDB during\n          // the next page load.\n          // See https://bugs.webkit.org/show_bug.cgi?id=226547\n          this.queue.enterRestrictedMode( /* purgeExistingTasks= */true);\n        }\n        this.queue.enqueueAndForget(() => {\n          // Attempt graceful shutdown (including releasing our primary lease),\n          // but there's no guarantee it will complete.\n          return this.shutdown();\n        });\n      };\n      this.window.addEventListener('pagehide', this.windowUnloadHandler);\n    }\n  }\n  detachWindowUnloadHook() {\n    if (this.windowUnloadHandler) {\n      this.window.removeEventListener('pagehide', this.windowUnloadHandler);\n      this.windowUnloadHandler = null;\n    }\n  }\n  /**\r\n   * Returns whether a client is \"zombied\" based on its LocalStorage entry.\r\n   * Clients become zombied when their tab closes without running all of the\r\n   * cleanup logic in `shutdown()`.\r\n   */\n  isClientZombied(clientId) {\n    var _a;\n    try {\n      const isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;\n      logDebug(LOG_TAG$c, `Client '${clientId}' ${isZombied ? 'is' : 'is not'} zombied in LocalStorage`);\n      return isZombied;\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't working.\n      logError(LOG_TAG$c, 'Failed to get zombied client id.', e);\n      return false;\n    }\n  }\n  /**\r\n   * Record client as zombied (a client that had its tab closed). Zombied\r\n   * clients are ignored during primary tab selection.\r\n   */\n  markClientZombied() {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));\n    } catch (e) {\n      // Gracefully handle if LocalStorage isn't available / working.\n      logError('Failed to set zombie client id.', e);\n    }\n  }\n  /** Removes the zombied client entry if it exists. */\n  removeClientZombiedEntry() {\n    if (!this.webStorage) {\n      return;\n    }\n    try {\n      this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));\n    } catch (e) {\n      // Ignore\n    }\n  }\n  zombiedClientLocalStorageKey(clientId) {\n    return `${ZOMBIED_CLIENTS_KEY_PREFIX}_${this.persistenceKey}_${clientId}`;\n  }\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the primary client object store.\r\n */\nfunction primaryClientStore(txn) {\n  return getStore(txn, DbPrimaryClientStore);\n}\n/**\r\n * Helper to get a typed SimpleDbStore for the client metadata object store.\r\n */\nfunction clientMetadataStore(txn) {\n  return getStore(txn, DbClientMetadataStore);\n}\n/**\r\n * Generates a string used as a prefix when storing data in IndexedDB and\r\n * LocalStorage.\r\n */\nfunction indexedDbStoragePrefix(databaseId, persistenceKey) {\n  // Use two different prefix formats:\n  //\n  //   * firestore / persistenceKey / projectID . databaseID / ...\n  //   * firestore / persistenceKey / projectID / ...\n  //\n  // projectIDs are DNS-compatible names and cannot contain dots\n  // so there's no danger of collisions.\n  let database = databaseId.projectId;\n  if (!databaseId.isDefaultDatabase) {\n    database += '.' + databaseId.database;\n  }\n  return 'firestore/' + persistenceKey + '/' + database + '/';\n}\nasync function indexedDbClearPersistence(persistenceKey) {\n  if (!SimpleDb.isAvailable()) {\n    return Promise.resolve();\n  }\n  const dbName = persistenceKey + MAIN_DATABASE;\n  await SimpleDb.delete(dbName);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Compares two array for equality using comparator. The method computes the\r\n * intersection and invokes `onAdd` for every element that is in `after` but not\r\n * `before`. `onRemove` is invoked for every element in `before` but missing\r\n * from `after`.\r\n *\r\n * The method creates a copy of both `before` and `after` and runs in O(n log\r\n * n), where n is the size of the two lists.\r\n *\r\n * @param before - The elements that exist in the original array.\r\n * @param after - The elements to diff against the original array.\r\n * @param comparator - The comparator for the elements in before and after.\r\n * @param onAdd - A function to invoke for every element that is part of `\r\n * after` but not `before`.\r\n * @param onRemove - A function to invoke for every element that is part of\r\n * `before` but not `after`.\r\n */\nfunction diffArrays(before, after, comparator, onAdd, onRemove) {\n  before = [...before];\n  after = [...after];\n  before.sort(comparator);\n  after.sort(comparator);\n  const bLen = before.length;\n  const aLen = after.length;\n  let a = 0;\n  let b = 0;\n  while (a < aLen && b < bLen) {\n    const cmp = comparator(before[b], after[a]);\n    if (cmp < 0) {\n      // The element was removed if the next element in our ordered\n      // walkthrough is only in `before`.\n      onRemove(before[b++]);\n    } else if (cmp > 0) {\n      // The element was added if the next element in our ordered walkthrough\n      // is only in `after`.\n      onAdd(after[a++]);\n    } else {\n      a++;\n      b++;\n    }\n  }\n  while (a < aLen) {\n    onAdd(after[a++]);\n  }\n  while (b < bLen) {\n    onRemove(before[b++]);\n  }\n}\n/**\r\n * Verifies equality for an array of primitives.\r\n *\r\n * @private\r\n * @internal\r\n * @param left Array of primitives.\r\n * @param right Array of primitives.\r\n * @return True if arrays are equal.\r\n */\nfunction isPrimitiveArrayEqual(left, right) {\n  if (left.length !== right.length) {\n    return false;\n  }\n  for (let i = 0; i < left.length; ++i) {\n    if (left[i] !== right[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$b = 'LocalStore';\n/**\r\n * The maximum time to leave a resume token buffered without writing it out.\r\n * This value is arbitrary: it's long enough to avoid several writes\r\n * (possibly indefinitely if updates come more frequently than this) but\r\n * short enough that restarting after crashing will still have a pretty\r\n * recent resume token.\r\n */\nconst RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;\n/**\r\n * Implements `LocalStore` interface.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\nclass LocalStoreImpl {\n  constructor( /** Manages our in-memory or durable persistence. */\n  persistence, queryEngine, initialUser, serializer) {\n    this.persistence = persistence;\n    this.queryEngine = queryEngine;\n    this.serializer = serializer;\n    /**\r\n     * Maps a targetID to data about its target.\r\n     *\r\n     * PORTING NOTE: We are using an immutable data structure on Web to make re-runs\r\n     * of `applyRemoteEvent()` idempotent.\r\n     */\n    this.targetDataByTarget = new SortedMap(primitiveComparator);\n    /** Maps a target to its targetID. */\n    // TODO(wuandy): Evaluate if TargetId can be part of Target.\n    this.targetIdByTarget = new ObjectMap(t => canonifyTarget(t), targetEquals);\n    /**\r\n     * A per collection group index of the last read time processed by\r\n     * `getNewDocumentChanges()`.\r\n     *\r\n     * PORTING NOTE: This is only used for multi-tab synchronization.\r\n     */\n    this.collectionGroupReadTime = new Map();\n    this.remoteDocuments = persistence.getRemoteDocumentCache();\n    this.targetCache = persistence.getTargetCache();\n    this.bundleCache = persistence.getBundleCache();\n    this.initializeUserComponents(initialUser);\n  }\n  initializeUserComponents(user) {\n    // TODO(indexing): Add spec tests that test these components change after a\n    // user change\n    this.documentOverlayCache = this.persistence.getDocumentOverlayCache(user);\n    this.indexManager = this.persistence.getIndexManager(user);\n    this.mutationQueue = this.persistence.getMutationQueue(user, this.indexManager);\n    this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.documentOverlayCache, this.indexManager);\n    this.remoteDocuments.setIndexManager(this.indexManager);\n    this.queryEngine.initialize(this.localDocuments, this.indexManager);\n  }\n  collectGarbage(garbageCollector) {\n    return this.persistence.runTransaction('Collect garbage', 'readwrite-primary', txn => garbageCollector.collect(txn, this.targetDataByTarget));\n  }\n}\nfunction newLocalStore( /** Manages our in-memory or durable persistence. */\npersistence, queryEngine, initialUser, serializer) {\n  return new LocalStoreImpl(persistence, queryEngine, initialUser, serializer);\n}\n/**\r\n * Tells the LocalStore that the currently authenticated user has changed.\r\n *\r\n * In response the local store switches the mutation queue to the new user and\r\n * returns any resulting document changes.\r\n */\n// PORTING NOTE: Android and iOS only return the documents affected by the\n// change.\nasync function localStoreHandleUserChange(localStore, user) {\n  const localStoreImpl = debugCast(localStore);\n  const result = await localStoreImpl.persistence.runTransaction('Handle user change', 'readonly', txn => {\n    // Swap out the mutation queue, grabbing the pending mutation batches\n    // before and after.\n    let oldBatches;\n    return localStoreImpl.mutationQueue.getAllMutationBatches(txn).next(promisedOldBatches => {\n      oldBatches = promisedOldBatches;\n      localStoreImpl.initializeUserComponents(user);\n      return localStoreImpl.mutationQueue.getAllMutationBatches(txn);\n    }).next(newBatches => {\n      const removedBatchIds = [];\n      const addedBatchIds = [];\n      // Union the old/new changed keys.\n      let changedKeys = documentKeySet();\n      for (const batch of oldBatches) {\n        removedBatchIds.push(batch.batchId);\n        for (const mutation of batch.mutations) {\n          changedKeys = changedKeys.add(mutation.key);\n        }\n      }\n      for (const batch of newBatches) {\n        addedBatchIds.push(batch.batchId);\n        for (const mutation of batch.mutations) {\n          changedKeys = changedKeys.add(mutation.key);\n        }\n      }\n      // Return the set of all (potentially) changed documents and the list\n      // of mutation batch IDs that were affected by change.\n      return localStoreImpl.localDocuments.getDocuments(txn, changedKeys).next(affectedDocuments => {\n        return {\n          affectedDocuments,\n          removedBatchIds,\n          addedBatchIds\n        };\n      });\n    });\n  });\n  return result;\n}\n/* Accepts locally generated Mutations and commit them to storage. */\nfunction localStoreWriteLocally(localStore, mutations) {\n  const localStoreImpl = debugCast(localStore);\n  const localWriteTime = Timestamp.now();\n  const keys = mutations.reduce((keys, m) => keys.add(m.key), documentKeySet());\n  let overlayedDocuments;\n  let mutationBatch;\n  return localStoreImpl.persistence.runTransaction('Locally write mutations', 'readwrite', txn => {\n    // Figure out which keys do not have a remote version in the cache, this\n    // is needed to create the right overlay mutation: if no remote version\n    // presents, we do not need to create overlays as patch mutations.\n    // TODO(Overlay): Is there a better way to determine this? Using the\n    //  document version does not work because local mutations set them back\n    //  to 0.\n    let remoteDocs = mutableDocumentMap();\n    let docsWithoutRemoteVersion = documentKeySet();\n    return localStoreImpl.remoteDocuments.getEntries(txn, keys).next(docs => {\n      remoteDocs = docs;\n      remoteDocs.forEach((key, doc) => {\n        if (!doc.isValidDocument()) {\n          docsWithoutRemoteVersion = docsWithoutRemoteVersion.add(key);\n        }\n      });\n    }).next(() => {\n      // Load and apply all existing mutations. This lets us compute the\n      // current base state for all non-idempotent transforms before applying\n      // any additional user-provided writes.\n      return localStoreImpl.localDocuments.getOverlayedDocuments(txn, remoteDocs);\n    }).next(docs => {\n      overlayedDocuments = docs;\n      // For non-idempotent mutations (such as `FieldValue.increment()`),\n      // we record the base state in a separate patch mutation. This is\n      // later used to guarantee consistent values and prevents flicker\n      // even if the backend sends us an update that already includes our\n      // transform.\n      const baseMutations = [];\n      for (const mutation of mutations) {\n        const baseValue = mutationExtractBaseValue(mutation, overlayedDocuments.get(mutation.key).overlayedDocument);\n        if (baseValue != null) {\n          // NOTE: The base state should only be applied if there's some\n          // existing document to override, so use a Precondition of\n          // exists=true\n          baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.value.mapValue), Precondition.exists(true)));\n        }\n      }\n      return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);\n    }).next(batch => {\n      mutationBatch = batch;\n      const overlays = batch.applyToLocalDocumentSet(overlayedDocuments, docsWithoutRemoteVersion);\n      return localStoreImpl.documentOverlayCache.saveOverlays(txn, batch.batchId, overlays);\n    });\n  }).then(() => ({\n    batchId: mutationBatch.batchId,\n    changes: convertOverlayedDocumentMapToDocumentMap(overlayedDocuments)\n  }));\n}\n/**\r\n * Acknowledges the given batch.\r\n *\r\n * On the happy path when a batch is acknowledged, the local store will\r\n *\r\n *  + remove the batch from the mutation queue;\r\n *  + apply the changes to the remote document cache;\r\n *  + recalculate the latency compensated view implied by those changes (there\r\n *    may be mutations in the queue that affect the documents but haven't been\r\n *    acknowledged yet); and\r\n *  + give the changed documents back the sync engine\r\n *\r\n * @returns The resulting (modified) documents.\r\n */\nfunction localStoreAcknowledgeBatch(localStore, batchResult) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', txn => {\n    const affected = batchResult.batch.keys();\n    const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n      trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n    });\n    return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer).next(() => documentBuffer.apply(txn)).next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn)).next(() => localStoreImpl.documentOverlayCache.removeOverlaysForBatchId(txn, affected, batchResult.batch.batchId)).next(() => localStoreImpl.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(txn, getKeysWithTransformResults(batchResult))).next(() => localStoreImpl.localDocuments.getDocuments(txn, affected));\n  });\n}\nfunction getKeysWithTransformResults(batchResult) {\n  let result = documentKeySet();\n  for (let i = 0; i < batchResult.mutationResults.length; ++i) {\n    const mutationResult = batchResult.mutationResults[i];\n    if (mutationResult.transformResults.length > 0) {\n      result = result.add(batchResult.batch.mutations[i].key);\n    }\n  }\n  return result;\n}\n/**\r\n * Removes mutations from the MutationQueue for the specified batch;\r\n * LocalDocuments will be recalculated.\r\n *\r\n * @returns The resulting modified documents.\r\n */\nfunction localStoreRejectBatch(localStore, batchId) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Reject batch', 'readwrite-primary', txn => {\n    let affectedKeys;\n    return localStoreImpl.mutationQueue.lookupMutationBatch(txn, batchId).next(batch => {\n      hardAssert(batch !== null);\n      affectedKeys = batch.keys();\n      return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);\n    }).next(() => localStoreImpl.mutationQueue.performConsistencyCheck(txn)).next(() => localStoreImpl.documentOverlayCache.removeOverlaysForBatchId(txn, affectedKeys, batchId)).next(() => localStoreImpl.localDocuments.recalculateAndSaveOverlaysForDocumentKeys(txn, affectedKeys)).next(() => localStoreImpl.localDocuments.getDocuments(txn, affectedKeys));\n  });\n}\n/**\r\n * Returns the largest (latest) batch id in mutation queue that is pending\r\n * server response.\r\n *\r\n * Returns `BATCHID_UNKNOWN` if the queue is empty.\r\n */\nfunction localStoreGetHighestUnacknowledgedBatchId(localStore) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get highest unacknowledged batch id', 'readonly', txn => localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn));\n}\n/**\r\n * Returns the last consistent snapshot processed (used by the RemoteStore to\r\n * determine whether to buffer incoming snapshots from the backend).\r\n */\nfunction localStoreGetLastRemoteSnapshotVersion(localStore) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get last remote snapshot version', 'readonly', txn => localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn));\n}\n/**\r\n * Updates the \"ground-state\" (remote) documents. We assume that the remote\r\n * event reflects any write batches that have been acknowledged or rejected\r\n * (i.e. we do not re-apply local mutations to updates from this event).\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\nfunction localStoreApplyRemoteEventToLocalCache(localStore, remoteEvent) {\n  const localStoreImpl = debugCast(localStore);\n  const remoteVersion = remoteEvent.snapshotVersion;\n  let newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n  return localStoreImpl.persistence.runTransaction('Apply remote event', 'readwrite-primary', txn => {\n    const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n      trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n    });\n    // Reset newTargetDataByTargetMap in case this transaction gets re-run.\n    newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;\n    const promises = [];\n    remoteEvent.targetChanges.forEach((change, targetId) => {\n      const oldTargetData = newTargetDataByTargetMap.get(targetId);\n      if (!oldTargetData) {\n        return;\n      }\n      // Only update the remote keys if the target is still active. This\n      // ensures that we can persist the updated target data along with\n      // the updated assignment.\n      promises.push(localStoreImpl.targetCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(() => {\n        return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);\n      }));\n      let newTargetData = oldTargetData.withSequenceNumber(txn.currentSequenceNumber);\n      if (remoteEvent.targetMismatches.get(targetId) !== null) {\n        newTargetData = newTargetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, SnapshotVersion.min()).withLastLimboFreeSnapshotVersion(SnapshotVersion.min());\n      } else if (change.resumeToken.approximateByteSize() > 0) {\n        newTargetData = newTargetData.withResumeToken(change.resumeToken, remoteVersion);\n      }\n      newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData);\n      // Update the target data if there are target changes (or if\n      // sufficient time has passed since the last update).\n      if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {\n        promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));\n      }\n    });\n    let changedDocs = mutableDocumentMap();\n    let existenceChangedKeys = documentKeySet();\n    remoteEvent.documentUpdates.forEach(key => {\n      if (remoteEvent.resolvedLimboDocuments.has(key)) {\n        promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));\n      }\n    });\n    // Each loop iteration only affects its \"own\" doc, so it's safe to get all\n    // the remote documents in advance in a single call.\n    promises.push(populateDocumentChangeBuffer(txn, documentBuffer, remoteEvent.documentUpdates).next(result => {\n      changedDocs = result.changedDocuments;\n      existenceChangedKeys = result.existenceChangedKeys;\n    }));\n    // HACK: The only reason we allow a null snapshot version is so that we\n    // can synthesize remote events when we get permission denied errors while\n    // trying to resolve the state of a locally cached document that is in\n    // limbo.\n    if (!remoteVersion.isEqual(SnapshotVersion.min())) {\n      const updateRemoteVersion = localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn).next(lastRemoteSnapshotVersion => {\n        return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);\n      });\n      promises.push(updateRemoteVersion);\n    }\n    return PersistencePromise.waitFor(promises).next(() => documentBuffer.apply(txn)).next(() => localStoreImpl.localDocuments.getLocalViewOfDocuments(txn, changedDocs, existenceChangedKeys)).next(() => changedDocs);\n  }).then(changedDocs => {\n    localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;\n    return changedDocs;\n  });\n}\n/**\r\n * Populates document change buffer with documents from backend or a bundle.\r\n * Returns the document changes resulting from applying those documents, and\r\n * also a set of documents whose existence state are changed as a result.\r\n *\r\n * @param txn - Transaction to use to read existing documents from storage.\r\n * @param documentBuffer - Document buffer to collect the resulted changes to be\r\n *        applied to storage.\r\n * @param documents - Documents to be applied.\r\n */\nfunction populateDocumentChangeBuffer(txn, documentBuffer, documents) {\n  let updatedKeys = documentKeySet();\n  let existenceChangedKeys = documentKeySet();\n  documents.forEach(k => updatedKeys = updatedKeys.add(k));\n  return documentBuffer.getEntries(txn, updatedKeys).next(existingDocs => {\n    let changedDocuments = mutableDocumentMap();\n    documents.forEach((key, doc) => {\n      const existingDoc = existingDocs.get(key);\n      // Check if see if there is a existence state change for this document.\n      if (doc.isFoundDocument() !== existingDoc.isFoundDocument()) {\n        existenceChangedKeys = existenceChangedKeys.add(key);\n      }\n      // Note: The order of the steps below is important, since we want\n      // to ensure that rejected limbo resolutions (which fabricate\n      // NoDocuments with SnapshotVersion.min()) never add documents to\n      // cache.\n      if (doc.isNoDocument() && doc.version.isEqual(SnapshotVersion.min())) {\n        // NoDocuments with SnapshotVersion.min() are used in manufactured\n        // events. We remove these documents from cache since we lost\n        // access.\n        documentBuffer.removeEntry(key, doc.readTime);\n        changedDocuments = changedDocuments.insert(key, doc);\n      } else if (!existingDoc.isValidDocument() || doc.version.compareTo(existingDoc.version) > 0 || doc.version.compareTo(existingDoc.version) === 0 && existingDoc.hasPendingWrites) {\n        documentBuffer.addEntry(doc);\n        changedDocuments = changedDocuments.insert(key, doc);\n      } else {\n        logDebug(LOG_TAG$b, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);\n      }\n    });\n    return {\n      changedDocuments,\n      existenceChangedKeys\n    };\n  });\n}\n/**\r\n * Returns true if the newTargetData should be persisted during an update of\r\n * an active target. TargetData should always be persisted when a target is\r\n * being released and should not call this function.\r\n *\r\n * While the target is active, TargetData updates can be omitted when nothing\r\n * about the target has changed except metadata like the resume token or\r\n * snapshot version. Occasionally it's worth the extra write to prevent these\r\n * values from getting too stale after a crash, but this doesn't have to be\r\n * too frequent.\r\n */\nfunction shouldPersistTargetData(oldTargetData, newTargetData, change) {\n  // Always persist target data if we don't already have a resume token.\n  if (oldTargetData.resumeToken.approximateByteSize() === 0) {\n    return true;\n  }\n  // Don't allow resume token changes to be buffered indefinitely. This\n  // allows us to be reasonably up-to-date after a crash and avoids needing\n  // to loop over all active queries on shutdown. Especially in the browser\n  // we may not get time to do anything interesting while the current tab is\n  // closing.\n  const timeDelta = newTargetData.snapshotVersion.toMicroseconds() - oldTargetData.snapshotVersion.toMicroseconds();\n  if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {\n    return true;\n  }\n  // Otherwise if the only thing that has changed about a target is its resume\n  // token it's not worth persisting. Note that the RemoteStore keeps an\n  // in-memory view of the currently active targets which includes the current\n  // resume token, so stream failure or user changes will still use an\n  // up-to-date resume token regardless of what we do here.\n  const changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;\n  return changes > 0;\n}\n/**\r\n * Notifies local store of the changed views to locally pin documents.\r\n */\nasync function localStoreNotifyLocalViewChanges(localStore, viewChanges) {\n  const localStoreImpl = debugCast(localStore);\n  try {\n    await localStoreImpl.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', txn => {\n      return PersistencePromise.forEach(viewChanges, viewChange => {\n        return PersistencePromise.forEach(viewChange.addedKeys, key => localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange.targetId, key)).next(() => PersistencePromise.forEach(viewChange.removedKeys, key => localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange.targetId, key)));\n      });\n    });\n  } catch (e) {\n    if (isIndexedDbTransactionError(e)) {\n      // If `notifyLocalViewChanges` fails, we did not advance the sequence\n      // number for the documents that were included in this transaction.\n      // This might trigger them to be deleted earlier than they otherwise\n      // would have, but it should not invalidate the integrity of the data.\n      logDebug(LOG_TAG$b, 'Failed to update sequence numbers: ' + e);\n    } else {\n      throw e;\n    }\n  }\n  for (const viewChange of viewChanges) {\n    const targetId = viewChange.targetId;\n    if (!viewChange.fromCache) {\n      const targetData = localStoreImpl.targetDataByTarget.get(targetId);\n      // Advance the last limbo free snapshot version\n      const lastLimboFreeSnapshotVersion = targetData.snapshotVersion;\n      const updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);\n      localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);\n      // TODO(b/272564316): Apply the optimization done on other platforms.\n      // This is a problem for web because saving the updated targetData from\n      // non-primary client conflicts with what primary client saved.\n    }\n  }\n}\n/**\r\n * Gets the mutation batch after the passed in batchId in the mutation queue\r\n * or null if empty.\r\n * @param afterBatchId - If provided, the batch to search after.\r\n * @returns The next mutation or null if there wasn't one.\r\n */\nfunction localStoreGetNextMutationBatch(localStore, afterBatchId) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get next mutation batch', 'readonly', txn => {\n    if (afterBatchId === undefined) {\n      afterBatchId = BATCHID_UNKNOWN;\n    }\n    return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);\n  });\n}\n/**\r\n * Reads the current value of a Document with a given key or null if not\r\n * found - used for testing.\r\n */\nfunction localStoreReadDocument(localStore, key) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('read document', 'readonly', txn => localStoreImpl.localDocuments.getDocument(txn, key));\n}\n/**\r\n * Assigns the given target an internal ID so that its results can be pinned so\r\n * they don't get GC'd. A target must be allocated in the local store before\r\n * the store can be used to manage its view.\r\n *\r\n * Allocating an already allocated `Target` will return the existing `TargetData`\r\n * for that `Target`.\r\n */\nfunction localStoreAllocateTarget(localStore, target) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Allocate target', 'readwrite', txn => {\n    let targetData;\n    return localStoreImpl.targetCache.getTargetData(txn, target).next(cached => {\n      if (cached) {\n        // This target has been listened to previously, so reuse the\n        // previous targetID.\n        // TODO(mcg): freshen last accessed date?\n        targetData = cached;\n        return PersistencePromise.resolve(targetData);\n      } else {\n        return localStoreImpl.targetCache.allocateTargetId(txn).next(targetId => {\n          targetData = new TargetData(target, targetId, \"TargetPurposeListen\" /* TargetPurpose.Listen */, txn.currentSequenceNumber);\n          return localStoreImpl.targetCache.addTargetData(txn, targetData).next(() => targetData);\n        });\n      }\n    });\n  }).then(targetData => {\n    // If Multi-Tab is enabled, the existing target data may be newer than\n    // the in-memory data\n    const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);\n    if (cachedTargetData === null || targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) > 0) {\n      localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);\n      localStoreImpl.targetIdByTarget.set(target, targetData.targetId);\n    }\n    return targetData;\n  });\n}\n/**\r\n * Returns the TargetData as seen by the LocalStore, including updates that may\r\n * have not yet been persisted to the TargetCache.\r\n */\n// Visible for testing.\nfunction localStoreGetTargetData(localStore, transaction, target) {\n  const localStoreImpl = debugCast(localStore);\n  const targetId = localStoreImpl.targetIdByTarget.get(target);\n  if (targetId !== undefined) {\n    return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));\n  } else {\n    return localStoreImpl.targetCache.getTargetData(transaction, target);\n  }\n}\n/**\r\n * Unpins all the documents associated with the given target. If\r\n * `keepPersistedTargetData` is set to false and Eager GC enabled, the method\r\n * directly removes the associated target data from the target cache.\r\n *\r\n * Releasing a non-existing `Target` is a no-op.\r\n */\n// PORTING NOTE: `keepPersistedTargetData` is multi-tab only.\nasync function localStoreReleaseTarget(localStore, targetId, keepPersistedTargetData) {\n  const localStoreImpl = debugCast(localStore);\n  const targetData = localStoreImpl.targetDataByTarget.get(targetId);\n  const mode = keepPersistedTargetData ? 'readwrite' : 'readwrite-primary';\n  try {\n    if (!keepPersistedTargetData) {\n      await localStoreImpl.persistence.runTransaction('Release target', mode, txn => {\n        return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);\n      });\n    }\n  } catch (e) {\n    if (isIndexedDbTransactionError(e)) {\n      // All `releaseTarget` does is record the final metadata state for the\n      // target, but we've been recording this periodically during target\n      // activity. If we lose this write this could cause a very slight\n      // difference in the order of target deletion during GC, but we\n      // don't define exact LRU semantics so this is acceptable.\n      logDebug(LOG_TAG$b, `Failed to update sequence numbers for target ${targetId}: ${e}`);\n    } else {\n      throw e;\n    }\n  }\n  localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(targetId);\n  localStoreImpl.targetIdByTarget.delete(targetData.target);\n}\n/**\r\n * Runs the specified query against the local store and returns the results,\r\n * potentially taking advantage of query data from previous executions (such\r\n * as the set of remote keys).\r\n *\r\n * @param usePreviousResults - Whether results from previous executions can\r\n * be used to optimize this query execution.\r\n */\nfunction localStoreExecuteQuery(localStore, query, usePreviousResults) {\n  const localStoreImpl = debugCast(localStore);\n  let lastLimboFreeSnapshotVersion = SnapshotVersion.min();\n  let remoteKeys = documentKeySet();\n  return localStoreImpl.persistence.runTransaction('Execute query', 'readwrite',\n  // Use readwrite instead of readonly so indexes can be created\n  // Use readwrite instead of readonly so indexes can be created\n  txn => {\n    return localStoreGetTargetData(localStoreImpl, txn, queryToTarget(query)).next(targetData => {\n      if (targetData) {\n        lastLimboFreeSnapshotVersion = targetData.lastLimboFreeSnapshotVersion;\n        return localStoreImpl.targetCache.getMatchingKeysForTargetId(txn, targetData.targetId).next(result => {\n          remoteKeys = result;\n        });\n      }\n    }).next(() => localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query, usePreviousResults ? lastLimboFreeSnapshotVersion : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet())).next(documents => {\n      setMaxReadTime(localStoreImpl, queryCollectionGroup(query), documents);\n      return {\n        documents,\n        remoteKeys\n      };\n    });\n  });\n}\nfunction applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {\n  const batch = batchResult.batch;\n  const docKeys = batch.keys();\n  let promiseChain = PersistencePromise.resolve();\n  docKeys.forEach(docKey => {\n    promiseChain = promiseChain.next(() => documentBuffer.getEntry(txn, docKey)).next(doc => {\n      const ackVersion = batchResult.docVersions.get(docKey);\n      hardAssert(ackVersion !== null);\n      if (doc.version.compareTo(ackVersion) < 0) {\n        batch.applyToRemoteDocument(doc, batchResult);\n        if (doc.isValidDocument()) {\n          // We use the commitVersion as the readTime rather than the\n          // document's updateTime since the updateTime is not advanced\n          // for updates that do not modify the underlying document.\n          doc.setReadTime(batchResult.commitVersion);\n          documentBuffer.addEntry(doc);\n        }\n      }\n    });\n  });\n  return promiseChain.next(() => localStoreImpl.mutationQueue.removeMutationBatch(txn, batch));\n}\n/** Returns the local view of the documents affected by a mutation batch. */\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreLookupMutationDocuments(localStore, batchId) {\n  const localStoreImpl = debugCast(localStore);\n  const mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);\n  return localStoreImpl.persistence.runTransaction('Lookup mutation documents', 'readonly', txn => {\n    return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(keys => {\n      if (keys) {\n        return localStoreImpl.localDocuments.getDocuments(txn, keys);\n      } else {\n        return PersistencePromise.resolve(null);\n      }\n    });\n  });\n}\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreRemoveCachedMutationBatchMetadata(localStore, batchId) {\n  const mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);\n  mutationQueueImpl.removeCachedMutationKeys(batchId);\n}\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreGetActiveClients(localStore) {\n  const persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);\n  return persistenceImpl.getActiveClients();\n}\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreGetCachedTarget(localStore, targetId) {\n  const localStoreImpl = debugCast(localStore);\n  const targetCacheImpl = debugCast(localStoreImpl.targetCache);\n  const cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);\n  if (cachedTargetData) {\n    return Promise.resolve(cachedTargetData.target);\n  } else {\n    return localStoreImpl.persistence.runTransaction('Get target data', 'readonly', txn => {\n      return targetCacheImpl.getTargetDataForTarget(txn, targetId).next(targetData => targetData ? targetData.target : null);\n    });\n  }\n}\n/**\r\n * Returns the set of documents that have been updated since the last call.\r\n * If this is the first call, returns the set of changes since client\r\n * initialization. Further invocations will return document that have changed\r\n * since the prior call.\r\n */\n// PORTING NOTE: Multi-Tab only.\nfunction localStoreGetNewDocumentChanges(localStore, collectionGroup) {\n  const localStoreImpl = debugCast(localStore);\n  // Get the current maximum read time for the collection. This should always\n  // exist, but to reduce the chance for regressions we default to\n  // SnapshotVersion.Min()\n  // TODO(indexing): Consider removing the default value.\n  const readTime = localStoreImpl.collectionGroupReadTime.get(collectionGroup) || SnapshotVersion.min();\n  return localStoreImpl.persistence.runTransaction('Get new document changes', 'readonly', txn => localStoreImpl.remoteDocuments.getAllFromCollectionGroup(txn, collectionGroup, newIndexOffsetSuccessorFromReadTime(readTime, INITIAL_LARGEST_BATCH_ID), /* limit= */Number.MAX_SAFE_INTEGER)).then(changedDocs => {\n    setMaxReadTime(localStoreImpl, collectionGroup, changedDocs);\n    return changedDocs;\n  });\n}\n/** Sets the collection group's maximum read time from the given documents. */\n// PORTING NOTE: Multi-Tab only.\nfunction setMaxReadTime(localStoreImpl, collectionGroup, changedDocs) {\n  let readTime = localStoreImpl.collectionGroupReadTime.get(collectionGroup) || SnapshotVersion.min();\n  changedDocs.forEach((_, doc) => {\n    if (doc.readTime.compareTo(readTime) > 0) {\n      readTime = doc.readTime;\n    }\n  });\n  localStoreImpl.collectionGroupReadTime.set(collectionGroup, readTime);\n}\n/**\r\n * Creates a new target using the given bundle name, which will be used to\r\n * hold the keys of all documents from the bundle in query-document mappings.\r\n * This ensures that the loaded documents do not get garbage collected\r\n * right away.\r\n */\nfunction umbrellaTarget(bundleName) {\n  // It is OK that the path used for the query is not valid, because this will\n  // not be read and queried.\n  return queryToTarget(newQueryForPath(ResourcePath.fromString(`__bundle__/docs/${bundleName}`)));\n}\n/**\r\n * Applies the documents from a bundle to the \"ground-state\" (remote)\r\n * documents.\r\n *\r\n * LocalDocuments are re-calculated if there are remaining mutations in the\r\n * queue.\r\n */\nasync function localStoreApplyBundledDocuments(localStore, bundleConverter, documents, bundleName) {\n  const localStoreImpl = debugCast(localStore);\n  let documentKeys = documentKeySet();\n  let documentMap = mutableDocumentMap();\n  for (const bundleDoc of documents) {\n    const documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\n    if (bundleDoc.document) {\n      documentKeys = documentKeys.add(documentKey);\n    }\n    const doc = bundleConverter.toMutableDocument(bundleDoc);\n    doc.setReadTime(bundleConverter.toSnapshotVersion(bundleDoc.metadata.readTime));\n    documentMap = documentMap.insert(documentKey, doc);\n  }\n  const documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({\n    trackRemovals: true // Make sure document removals show up in `getNewDocumentChanges()`\n  });\n  // Allocates a target to hold all document keys from the bundle, such that\n  // they will not get garbage collected right away.\n  const umbrellaTargetData = await localStoreAllocateTarget(localStoreImpl, umbrellaTarget(bundleName));\n  return localStoreImpl.persistence.runTransaction('Apply bundle documents', 'readwrite', txn => {\n    return populateDocumentChangeBuffer(txn, documentBuffer, documentMap).next(documentChangeResult => {\n      documentBuffer.apply(txn);\n      return documentChangeResult;\n    }).next(documentChangeResult => {\n      return localStoreImpl.targetCache.removeMatchingKeysForTargetId(txn, umbrellaTargetData.targetId).next(() => localStoreImpl.targetCache.addMatchingKeys(txn, documentKeys, umbrellaTargetData.targetId)).next(() => localStoreImpl.localDocuments.getLocalViewOfDocuments(txn, documentChangeResult.changedDocuments, documentChangeResult.existenceChangedKeys)).next(() => documentChangeResult.changedDocuments);\n    });\n  });\n}\n/**\r\n * Returns a promise of a boolean to indicate if the given bundle has already\r\n * been loaded and the create time is newer than the current loading bundle.\r\n */\nfunction localStoreHasNewerBundle(localStore, bundleMetadata) {\n  const localStoreImpl = debugCast(localStore);\n  const currentReadTime = fromVersion(bundleMetadata.createTime);\n  return localStoreImpl.persistence.runTransaction('hasNewerBundle', 'readonly', transaction => {\n    return localStoreImpl.bundleCache.getBundleMetadata(transaction, bundleMetadata.id);\n  }).then(cached => {\n    return !!cached && cached.createTime.compareTo(currentReadTime) >= 0;\n  });\n}\n/**\r\n * Saves the given `BundleMetadata` to local persistence.\r\n */\nfunction localStoreSaveBundle(localStore, bundleMetadata) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Save bundle', 'readwrite', transaction => {\n    return localStoreImpl.bundleCache.saveBundleMetadata(transaction, bundleMetadata);\n  });\n}\n/**\r\n * Returns a promise of a `NamedQuery` associated with given query name. Promise\r\n * resolves to undefined if no persisted data can be found.\r\n */\nfunction localStoreGetNamedQuery(localStore, queryName) {\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Get named query', 'readonly', transaction => localStoreImpl.bundleCache.getNamedQuery(transaction, queryName));\n}\n/**\r\n * Saves the given `NamedQuery` to local persistence.\r\n */\nasync function localStoreSaveNamedQuery(localStore, query, documents = documentKeySet()) {\n  // Allocate a target for the named query such that it can be resumed\n  // from associated read time if users use it to listen.\n  // NOTE: this also means if no corresponding target exists, the new target\n  // will remain active and will not get collected, unless users happen to\n  // unlisten the query somehow.\n  const allocated = await localStoreAllocateTarget(localStore, queryToTarget(fromBundledQuery(query.bundledQuery)));\n  const localStoreImpl = debugCast(localStore);\n  return localStoreImpl.persistence.runTransaction('Save named query', 'readwrite', transaction => {\n    const readTime = fromVersion(query.readTime);\n    // Simply save the query itself if it is older than what the SDK already\n    // has.\n    if (allocated.snapshotVersion.compareTo(readTime) >= 0) {\n      return localStoreImpl.bundleCache.saveNamedQuery(transaction, query);\n    }\n    // Update existing target data because the query from the bundle is newer.\n    const newTargetData = allocated.withResumeToken(ByteString.EMPTY_BYTE_STRING, readTime);\n    localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(newTargetData.targetId, newTargetData);\n    return localStoreImpl.targetCache.updateTargetData(transaction, newTargetData).next(() => localStoreImpl.targetCache.removeMatchingKeysForTargetId(transaction, allocated.targetId)).next(() => localStoreImpl.targetCache.addMatchingKeys(transaction, documents, allocated.targetId)).next(() => localStoreImpl.bundleCache.saveNamedQuery(transaction, query));\n  });\n}\nasync function localStoreConfigureFieldIndexes(localStore, newFieldIndexes) {\n  const localStoreImpl = debugCast(localStore);\n  const indexManager = localStoreImpl.indexManager;\n  const promises = [];\n  return localStoreImpl.persistence.runTransaction('Configure indexes', 'readwrite', transaction => indexManager.getFieldIndexes(transaction).next(oldFieldIndexes => diffArrays(oldFieldIndexes, newFieldIndexes, fieldIndexSemanticComparator, fieldIndex => {\n    promises.push(indexManager.addFieldIndex(transaction, fieldIndex));\n  }, fieldIndex => {\n    promises.push(indexManager.deleteFieldIndex(transaction, fieldIndex));\n  })).next(() => PersistencePromise.waitFor(promises)));\n}\nfunction localStoreSetIndexAutoCreationEnabled(localStore, isEnabled) {\n  const localStoreImpl = debugCast(localStore);\n  localStoreImpl.queryEngine.indexAutoCreationEnabled = isEnabled;\n}\nfunction localStoreDeleteAllFieldIndexes(localStore) {\n  const localStoreImpl = debugCast(localStore);\n  const indexManager = localStoreImpl.indexManager;\n  return localStoreImpl.persistence.runTransaction('Delete All Indexes', 'readwrite', transaction => indexManager.deleteAllFieldIndexes(transaction));\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A tracker to keep a record of important details during database local query\r\n * execution.\r\n */\nclass QueryContext {\n  constructor() {\n    /**\r\n     * Counts the number of documents passed through during local query execution.\r\n     */\n    this._documentReadCount = 0;\n  }\n  get documentReadCount() {\n    return this._documentReadCount;\n  }\n  incrementDocumentReadCount(amount) {\n    this._documentReadCount += amount;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_INDEX_AUTO_CREATION_MIN_COLLECTION_SIZE = 100;\n/**\r\n * This cost represents the evaluation result of\r\n * (([index, docKey] + [docKey, docContent]) per document in the result set)\r\n * / ([docKey, docContent] per documents in full collection scan) coming from\r\n * experiment [enter PR experiment URL here].\r\n */\nfunction getDefaultRelativeIndexReadCostPerDocument() {\n  // These values were derived from an experiment where several members of the\n  // Firestore SDK team ran a performance test in various environments.\n  // Googlers can see b/299284287 for details.\n  if (isSafari()) {\n    return 8;\n  } else if (getAndroidVersion(getUA()) > 0) {\n    return 6;\n  } else {\n    return 4;\n  }\n}\n/**\r\n * The Firestore query engine.\r\n *\r\n * Firestore queries can be executed in three modes. The Query Engine determines\r\n * what mode to use based on what data is persisted. The mode only determines\r\n * the runtime complexity of the query - the result set is equivalent across all\r\n * implementations.\r\n *\r\n * The Query engine will use indexed-based execution if a user has configured\r\n * any index that can be used to execute query (via `setIndexConfiguration()`).\r\n * Otherwise, the engine will try to optimize the query by re-using a previously\r\n * persisted query result. If that is not possible, the query will be executed\r\n * via a full collection scan.\r\n *\r\n * Index-based execution is the default when available. The query engine\r\n * supports partial indexed execution and merges the result from the index\r\n * lookup with documents that have not yet been indexed. The index evaluation\r\n * matches the backend's format and as such, the SDK can use indexing for all\r\n * queries that the backend supports.\r\n *\r\n * If no index exists, the query engine tries to take advantage of the target\r\n * document mapping in the TargetCache. These mappings exists for all queries\r\n * that have been synced with the backend at least once and allow the query\r\n * engine to only read documents that previously matched a query plus any\r\n * documents that were edited after the query was last listened to.\r\n *\r\n * There are some cases when this optimization is not guaranteed to produce\r\n * the same results as full collection scans. In these cases, query\r\n * processing falls back to full scans. These cases are:\r\n *\r\n * - Limit queries where a document that matched the query previously no longer\r\n *   matches the query.\r\n *\r\n * - Limit queries where a document edit may cause the document to sort below\r\n *   another document that is in the local cache.\r\n *\r\n * - Queries that have never been CURRENT or free of limbo documents.\r\n */\nclass QueryEngine {\n  constructor() {\n    this.initialized = false;\n    this.indexAutoCreationEnabled = false;\n    /**\r\n     * SDK only decides whether it should create index when collection size is\r\n     * larger than this.\r\n     */\n    this.indexAutoCreationMinCollectionSize = DEFAULT_INDEX_AUTO_CREATION_MIN_COLLECTION_SIZE;\n    this.relativeIndexReadCostPerDocument = getDefaultRelativeIndexReadCostPerDocument();\n  }\n  /** Sets the document view to query against. */\n  initialize(localDocuments, indexManager) {\n    this.localDocumentsView = localDocuments;\n    this.indexManager = indexManager;\n    this.initialized = true;\n  }\n  /** Returns all local documents matching the specified query. */\n  getDocumentsMatchingQuery(transaction, query, lastLimboFreeSnapshotVersion, remoteKeys) {\n    // Stores the result from executing the query; using this object is more\n    // convenient than passing the result between steps of the persistence\n    // transaction and improves readability comparatively.\n    const queryResult = {\n      result: null\n    };\n    return this.performQueryUsingIndex(transaction, query).next(result => {\n      queryResult.result = result;\n    }).next(() => {\n      if (queryResult.result) {\n        return;\n      }\n      return this.performQueryUsingRemoteKeys(transaction, query, remoteKeys, lastLimboFreeSnapshotVersion).next(result => {\n        queryResult.result = result;\n      });\n    }).next(() => {\n      if (queryResult.result) {\n        return;\n      }\n      const context = new QueryContext();\n      return this.executeFullCollectionScan(transaction, query, context).next(result => {\n        queryResult.result = result;\n        if (this.indexAutoCreationEnabled) {\n          return this.createCacheIndexes(transaction, query, context, result.size);\n        }\n      });\n    }).next(() => queryResult.result);\n  }\n  createCacheIndexes(transaction, query, context, resultSize) {\n    if (context.documentReadCount < this.indexAutoCreationMinCollectionSize) {\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        logDebug('QueryEngine', 'SDK will not create cache indexes for query:', stringifyQuery(query), 'since it only creates cache indexes for collection contains', 'more than or equal to', this.indexAutoCreationMinCollectionSize, 'documents');\n      }\n      return PersistencePromise.resolve();\n    }\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug('QueryEngine', 'Query:', stringifyQuery(query), 'scans', context.documentReadCount, 'local documents and returns', resultSize, 'documents as results.');\n    }\n    if (context.documentReadCount > this.relativeIndexReadCostPerDocument * resultSize) {\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        logDebug('QueryEngine', 'The SDK decides to create cache indexes for query:', stringifyQuery(query), 'as using cache indexes may help improve performance.');\n      }\n      return this.indexManager.createTargetIndexes(transaction, queryToTarget(query));\n    }\n    return PersistencePromise.resolve();\n  }\n  /**\r\n   * Performs an indexed query that evaluates the query based on a collection's\r\n   * persisted index values. Returns `null` if an index is not available.\r\n   */\n  performQueryUsingIndex(transaction, query) {\n    if (queryMatchesAllDocuments(query)) {\n      // Queries that match all documents don't benefit from using\n      // key-based lookups. It is more efficient to scan all documents in a\n      // collection, rather than to perform individual lookups.\n      return PersistencePromise.resolve(null);\n    }\n    let target = queryToTarget(query);\n    return this.indexManager.getIndexType(transaction, target).next(indexType => {\n      if (indexType === 0 /* IndexType.NONE */) {\n        // The target cannot be served from any index.\n        return null;\n      }\n      if (query.limit !== null && indexType === 1 /* IndexType.PARTIAL */) {\n        // We cannot apply a limit for targets that are served using a partial\n        // index. If a partial index will be used to serve the target, the\n        // query may return a superset of documents that match the target\n        // (e.g. if the index doesn't include all the target's filters), or\n        // may return the correct set of documents in the wrong order (e.g. if\n        // the index doesn't include a segment for one of the orderBys).\n        // Therefore, a limit should not be applied in such cases.\n        query = queryWithLimit(query, null, \"F\" /* LimitType.First */);\n        target = queryToTarget(query);\n      }\n      return this.indexManager.getDocumentsMatchingTarget(transaction, target).next(keys => {\n        const sortedKeys = documentKeySet(...keys);\n        return this.localDocumentsView.getDocuments(transaction, sortedKeys).next(indexedDocuments => {\n          return this.indexManager.getMinOffset(transaction, target).next(offset => {\n            const previousResults = this.applyQuery(query, indexedDocuments);\n            if (this.needsRefill(query, previousResults, sortedKeys, offset.readTime)) {\n              // A limit query whose boundaries change due to local\n              // edits can be re-run against the cache by excluding the\n              // limit. This ensures that all documents that match the\n              // query's filters are included in the result set. The SDK\n              // can then apply the limit once all local edits are\n              // incorporated.\n              return this.performQueryUsingIndex(transaction, queryWithLimit(query, null, \"F\" /* LimitType.First */));\n            }\n            return this.appendRemainingResults(transaction, previousResults, query, offset);\n          });\n        });\n      });\n    });\n  }\n  /**\r\n   * Performs a query based on the target's persisted query mapping. Returns\r\n   * `null` if the mapping is not available or cannot be used.\r\n   */\n  performQueryUsingRemoteKeys(transaction, query, remoteKeys, lastLimboFreeSnapshotVersion) {\n    if (queryMatchesAllDocuments(query)) {\n      // Queries that match all documents don't benefit from using\n      // key-based lookups. It is more efficient to scan all documents in a\n      // collection, rather than to perform individual lookups.\n      return PersistencePromise.resolve(null);\n    }\n    // Queries that have never seen a snapshot without limbo free documents\n    // should also be run as a full collection scan.\n    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {\n      return PersistencePromise.resolve(null);\n    }\n    return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(documents => {\n      const previousResults = this.applyQuery(query, documents);\n      if (this.needsRefill(query, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {\n        return PersistencePromise.resolve(null);\n      }\n      if (getLogLevel() <= LogLevel.DEBUG) {\n        logDebug('QueryEngine', 'Re-using previous result from %s to execute query: %s', lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query));\n      }\n      // Retrieve all results for documents that were updated since the last\n      // limbo-document free remote snapshot.\n      return this.appendRemainingResults(transaction, previousResults, query, newIndexOffsetSuccessorFromReadTime(lastLimboFreeSnapshotVersion, INITIAL_LARGEST_BATCH_ID)).next(results => results);\n    });\n  }\n  /** Applies the query filter and sorting to the provided documents.  */\n  applyQuery(query, documents) {\n    // Sort the documents and re-apply the query filter since previously\n    // matching documents do not necessarily still match the query.\n    let queryResults = new SortedSet(newQueryComparator(query));\n    documents.forEach((_, maybeDoc) => {\n      if (queryMatches(query, maybeDoc)) {\n        queryResults = queryResults.add(maybeDoc);\n      }\n    });\n    return queryResults;\n  }\n  /**\r\n   * Determines if a limit query needs to be refilled from cache, making it\r\n   * ineligible for index-free execution.\r\n   *\r\n   * @param query - The query.\r\n   * @param sortedPreviousResults - The documents that matched the query when it\r\n   * was last synchronized, sorted by the query's comparator.\r\n   * @param remoteKeys - The document keys that matched the query at the last\r\n   * snapshot.\r\n   * @param limboFreeSnapshotVersion - The version of the snapshot when the\r\n   * query was last synchronized.\r\n   */\n  needsRefill(query, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {\n    if (query.limit === null) {\n      // Queries without limits do not need to be refilled.\n      return false;\n    }\n    if (remoteKeys.size !== sortedPreviousResults.size) {\n      // The query needs to be refilled if a previously matching document no\n      // longer matches.\n      return true;\n    }\n    // Limit queries are not eligible for index-free query execution if there is\n    // a potential that an older document from cache now sorts before a document\n    // that was previously part of the limit. This, however, can only happen if\n    // the document at the edge of the limit goes out of limit.\n    // If a document that is not the limit boundary sorts differently,\n    // the boundary of the limit itself did not change and documents from cache\n    // will continue to be \"rejected\" by this boundary. Therefore, we can ignore\n    // any modifications that don't affect the last document.\n    const docAtLimitEdge = query.limitType === \"F\" /* LimitType.First */ ? sortedPreviousResults.last() : sortedPreviousResults.first();\n    if (!docAtLimitEdge) {\n      // We don't need to refill the query if there were already no documents.\n      return false;\n    }\n    return docAtLimitEdge.hasPendingWrites || docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0;\n  }\n  executeFullCollectionScan(transaction, query, context) {\n    if (getLogLevel() <= LogLevel.DEBUG) {\n      logDebug('QueryEngine', 'Using full collection scan to execute query:', stringifyQuery(query));\n    }\n    return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, IndexOffset.min(), context);\n  }\n  /**\r\n   * Combines the results from an indexed execution with the remaining documents\r\n   * that have not yet been indexed.\r\n   */\n  appendRemainingResults(transaction, indexedResults, query, offset) {\n    // Retrieve all results for documents that were updated since the offset.\n    return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query, offset).next(remainingResults => {\n      // Merge with existing results\n      indexedResults.forEach(d => {\n        remainingResults = remainingResults.insert(d.key, d);\n      });\n      return remainingResults;\n    });\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// The format of the LocalStorage key that stores the client state is:\n//     firestore_clients_<persistence_prefix>_<instance_key>\nconst CLIENT_STATE_KEY_PREFIX = 'firestore_clients';\n/** Assembles the key for a client state in WebStorage */\nfunction createWebStorageClientStateKey(persistenceKey, clientId) {\n  return `${CLIENT_STATE_KEY_PREFIX}_${persistenceKey}_${clientId}`;\n}\n// The format of the WebStorage key that stores the mutation state is:\n//     firestore_mutations_<persistence_prefix>_<batch_id>\n//     (for unauthenticated users)\n// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>\n//\n// 'user_uid' is last to avoid needing to escape '_' characters that it might\n// contain.\nconst MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations';\n/** Assembles the key for a mutation batch in WebStorage */\nfunction createWebStorageMutationBatchKey(persistenceKey, user, batchId) {\n  let mutationKey = `${MUTATION_BATCH_KEY_PREFIX}_${persistenceKey}_${batchId}`;\n  if (user.isAuthenticated()) {\n    mutationKey += `_${user.uid}`;\n  }\n  return mutationKey;\n}\n// The format of the WebStorage key that stores a query target's metadata is:\n//     firestore_targets_<persistence_prefix>_<target_id>\nconst QUERY_TARGET_KEY_PREFIX = 'firestore_targets';\n/** Assembles the key for a query state in WebStorage */\nfunction createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {\n  return `${QUERY_TARGET_KEY_PREFIX}_${persistenceKey}_${targetId}`;\n}\n// The WebStorage prefix that stores the primary tab's online state. The\n// format of the key is:\n//     firestore_online_state_<persistence_prefix>\nconst ONLINE_STATE_KEY_PREFIX = 'firestore_online_state';\n/** Assembles the key for the online state of the primary tab. */\nfunction createWebStorageOnlineStateKey(persistenceKey) {\n  return `${ONLINE_STATE_KEY_PREFIX}_${persistenceKey}`;\n}\n// The WebStorage prefix that plays as a event to indicate the remote documents\n// might have changed due to some secondary tabs loading a bundle.\n// format of the key is:\n//     firestore_bundle_loaded_v2_<persistenceKey>\n// The version ending with \"v2\" stores the list of modified collection groups.\nconst BUNDLE_LOADED_KEY_PREFIX = 'firestore_bundle_loaded_v2';\nfunction createBundleLoadedKey(persistenceKey) {\n  return `${BUNDLE_LOADED_KEY_PREFIX}_${persistenceKey}`;\n}\n// The WebStorage key prefix for the key that stores the last sequence number allocated. The key\n// looks like 'firestore_sequence_number_<persistence_prefix>'.\nconst SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';\n/** Assembles the key for the current sequence number. */\nfunction createWebStorageSequenceNumberKey(persistenceKey) {\n  return `${SEQUENCE_NUMBER_KEY_PREFIX}_${persistenceKey}`;\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$a = 'SharedClientState';\n/**\r\n * Holds the state of a mutation batch, including its user ID, batch ID and\r\n * whether the batch is 'pending', 'acknowledged' or 'rejected'.\r\n */\n// Visible for testing\nclass MutationMetadata {\n  constructor(user, batchId, state, error) {\n    this.user = user;\n    this.batchId = batchId;\n    this.state = state;\n    this.error = error;\n  }\n  /**\r\n   * Parses a MutationMetadata from its JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n  static fromWebStorageEntry(user, batchId, value) {\n    const mutationBatch = JSON.parse(value);\n    let validData = typeof mutationBatch === 'object' && ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === undefined || typeof mutationBatch.error === 'object');\n    let firestoreError = undefined;\n    if (validData && mutationBatch.error) {\n      validData = typeof mutationBatch.error.message === 'string' && typeof mutationBatch.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);\n      }\n    }\n    if (validData) {\n      return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse mutation state for ID '${batchId}': ${value}`);\n      return null;\n    }\n  }\n  toWebStorageJSON() {\n    const batchMetadata = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    if (this.error) {\n      batchMetadata.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n    return JSON.stringify(batchMetadata);\n  }\n}\n/**\r\n * Holds the state of a query target, including its target ID and whether the\r\n * target is 'not-current', 'current' or 'rejected'.\r\n */\n// Visible for testing\nclass QueryTargetMetadata {\n  constructor(targetId, state, error) {\n    this.targetId = targetId;\n    this.state = state;\n    this.error = error;\n  }\n  /**\r\n   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n  static fromWebStorageEntry(targetId, value) {\n    const targetState = JSON.parse(value);\n    let validData = typeof targetState === 'object' && ['not-current', 'current', 'rejected'].indexOf(targetState.state) !== -1 && (targetState.error === undefined || typeof targetState.error === 'object');\n    let firestoreError = undefined;\n    if (validData && targetState.error) {\n      validData = typeof targetState.error.message === 'string' && typeof targetState.error.code === 'string';\n      if (validData) {\n        firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);\n      }\n    }\n    if (validData) {\n      return new QueryTargetMetadata(targetId, targetState.state, firestoreError);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse target state for ID '${targetId}': ${value}`);\n      return null;\n    }\n  }\n  toWebStorageJSON() {\n    const targetState = {\n      state: this.state,\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    if (this.error) {\n      targetState.error = {\n        code: this.error.code,\n        message: this.error.message\n      };\n    }\n    return JSON.stringify(targetState);\n  }\n}\n/**\r\n * This class represents the immutable ClientState for a client read from\r\n * WebStorage, containing the list of active query targets.\r\n */\nclass RemoteClientState {\n  constructor(clientId, activeTargetIds) {\n    this.clientId = clientId;\n    this.activeTargetIds = activeTargetIds;\n  }\n  /**\r\n   * Parses a RemoteClientState from the JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n  static fromWebStorageEntry(clientId, value) {\n    const clientState = JSON.parse(value);\n    let validData = typeof clientState === 'object' && clientState.activeTargetIds instanceof Array;\n    let activeTargetIdsSet = targetIdSet();\n    for (let i = 0; validData && i < clientState.activeTargetIds.length; ++i) {\n      validData = isSafeInteger(clientState.activeTargetIds[i]);\n      activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);\n    }\n    if (validData) {\n      return new RemoteClientState(clientId, activeTargetIdsSet);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse client data for instance '${clientId}': ${value}`);\n      return null;\n    }\n  }\n}\n/**\r\n * This class represents the online state for all clients participating in\r\n * multi-tab. The online state is only written to by the primary client, and\r\n * used in secondary clients to update their query views.\r\n */\nclass SharedOnlineState {\n  constructor(clientId, onlineState) {\n    this.clientId = clientId;\n    this.onlineState = onlineState;\n  }\n  /**\r\n   * Parses a SharedOnlineState from its JSON representation in WebStorage.\r\n   * Logs a warning and returns null if the format of the data is not valid.\r\n   */\n  static fromWebStorageEntry(value) {\n    const onlineState = JSON.parse(value);\n    const validData = typeof onlineState === 'object' && ['Unknown', 'Online', 'Offline'].indexOf(onlineState.onlineState) !== -1 && typeof onlineState.clientId === 'string';\n    if (validData) {\n      return new SharedOnlineState(onlineState.clientId, onlineState.onlineState);\n    } else {\n      logError(LOG_TAG$a, `Failed to parse online state: ${value}`);\n      return null;\n    }\n  }\n}\n/**\r\n * Metadata state of the local client. Unlike `RemoteClientState`, this class is\r\n * mutable and keeps track of all pending mutations, which allows us to\r\n * update the range of pending mutation batch IDs as new mutations are added or\r\n * removed.\r\n *\r\n * The data in `LocalClientState` is not read from WebStorage and instead\r\n * updated via its instance methods. The updated state can be serialized via\r\n * `toWebStorageJSON()`.\r\n */\n// Visible for testing.\nclass LocalClientState {\n  constructor() {\n    this.activeTargetIds = targetIdSet();\n  }\n  addQueryTarget(targetId) {\n    this.activeTargetIds = this.activeTargetIds.add(targetId);\n  }\n  removeQueryTarget(targetId) {\n    this.activeTargetIds = this.activeTargetIds.delete(targetId);\n  }\n  /**\r\n   * Converts this entry into a JSON-encoded format we can use for WebStorage.\r\n   * Does not encode `clientId` as it is part of the key in WebStorage.\r\n   */\n  toWebStorageJSON() {\n    const data = {\n      activeTargetIds: this.activeTargetIds.toArray(),\n      updateTimeMs: Date.now() // Modify the existing value to trigger update.\n    };\n    return JSON.stringify(data);\n  }\n}\n/**\r\n * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the\r\n * backing store for the SharedClientState. It keeps track of all active\r\n * clients and supports modifications of the local client's data.\r\n */\nclass WebStorageSharedClientState {\n  constructor(window, queue, persistenceKey, localClientId, initialUser) {\n    this.window = window;\n    this.queue = queue;\n    this.persistenceKey = persistenceKey;\n    this.localClientId = localClientId;\n    this.syncEngine = null;\n    this.onlineStateHandler = null;\n    this.sequenceNumberHandler = null;\n    this.storageListener = this.handleWebStorageEvent.bind(this);\n    this.activeClients = new SortedMap(primitiveComparator);\n    this.started = false;\n    /**\r\n     * Captures WebStorage events that occur before `start()` is called. These\r\n     * events are replayed once `WebStorageSharedClientState` is started.\r\n     */\n    this.earlyEvents = [];\n    // Escape the special characters mentioned here:\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions\n    const escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&');\n    this.storage = this.window.localStorage;\n    this.currentUser = initialUser;\n    this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);\n    this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);\n    this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());\n    this.clientStateKeyRe = new RegExp(`^${CLIENT_STATE_KEY_PREFIX}_${escapedPersistenceKey}_([^_]*)$`);\n    this.mutationBatchKeyRe = new RegExp(`^${MUTATION_BATCH_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)(?:_(.*))?$`);\n    this.queryTargetKeyRe = new RegExp(`^${QUERY_TARGET_KEY_PREFIX}_${escapedPersistenceKey}_(\\\\d+)$`);\n    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);\n    this.bundleLoadedKey = createBundleLoadedKey(this.persistenceKey);\n    // Rather than adding the storage observer during start(), we add the\n    // storage observer during initialization. This ensures that we collect\n    // events before other components populate their initial state (during their\n    // respective start() calls). Otherwise, we might for example miss a\n    // mutation that is added after LocalStore's start() processed the existing\n    // mutations but before we observe WebStorage events.\n    this.window.addEventListener('storage', this.storageListener);\n  }\n  /** Returns 'true' if WebStorage is available in the current environment. */\n  static isAvailable(window) {\n    return !!(window && window.localStorage);\n  }\n  async start() {\n    // Retrieve the list of existing clients to backfill the data in\n    // SharedClientState.\n    const existingClients = await this.syncEngine.getActiveClients();\n    for (const clientId of existingClients) {\n      if (clientId === this.localClientId) {\n        continue;\n      }\n      const storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));\n      if (storageItem) {\n        const clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);\n        if (clientState) {\n          this.activeClients = this.activeClients.insert(clientState.clientId, clientState);\n        }\n      }\n    }\n    this.persistClientState();\n    // Check if there is an existing online state and call the callback handler\n    // if applicable.\n    const onlineStateJSON = this.storage.getItem(this.onlineStateKey);\n    if (onlineStateJSON) {\n      const onlineState = this.fromWebStorageOnlineState(onlineStateJSON);\n      if (onlineState) {\n        this.handleOnlineStateEvent(onlineState);\n      }\n    }\n    for (const event of this.earlyEvents) {\n      this.handleWebStorageEvent(event);\n    }\n    this.earlyEvents = [];\n    // Register a window unload hook to remove the client metadata entry from\n    // WebStorage even if `shutdown()` was not called.\n    this.window.addEventListener('pagehide', () => this.shutdown());\n    this.started = true;\n  }\n  writeSequenceNumber(sequenceNumber) {\n    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));\n  }\n  getAllActiveQueryTargets() {\n    return this.extractActiveQueryTargets(this.activeClients);\n  }\n  isActiveQueryTarget(targetId) {\n    let found = false;\n    this.activeClients.forEach((key, value) => {\n      if (value.activeTargetIds.has(targetId)) {\n        found = true;\n      }\n    });\n    return found;\n  }\n  addPendingMutation(batchId) {\n    this.persistMutationState(batchId, 'pending');\n  }\n  updateMutationState(batchId, state, error) {\n    this.persistMutationState(batchId, state, error);\n    // Once a final mutation result is observed by other clients, they no longer\n    // access the mutation's metadata entry. Since WebStorage replays events\n    // in order, it is safe to delete the entry right after updating it.\n    this.removeMutationState(batchId);\n  }\n  addLocalQueryTarget(targetId) {\n    let queryState = 'not-current';\n    // Lookup an existing query state if the target ID was already registered\n    // by another tab\n    if (this.isActiveQueryTarget(targetId)) {\n      const storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\n      if (storageItem) {\n        const metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);\n        if (metadata) {\n          queryState = metadata.state;\n        }\n      }\n    }\n    this.localClientState.addQueryTarget(targetId);\n    this.persistClientState();\n    return queryState;\n  }\n  removeLocalQueryTarget(targetId) {\n    this.localClientState.removeQueryTarget(targetId);\n    this.persistClientState();\n  }\n  isLocalQueryTarget(targetId) {\n    return this.localClientState.activeTargetIds.has(targetId);\n  }\n  clearQueryState(targetId) {\n    this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));\n  }\n  updateQueryState(targetId, state, error) {\n    this.persistQueryTargetState(targetId, state, error);\n  }\n  handleUserChange(user, removedBatchIds, addedBatchIds) {\n    removedBatchIds.forEach(batchId => {\n      this.removeMutationState(batchId);\n    });\n    this.currentUser = user;\n    addedBatchIds.forEach(batchId => {\n      this.addPendingMutation(batchId);\n    });\n  }\n  setOnlineState(onlineState) {\n    this.persistOnlineState(onlineState);\n  }\n  notifyBundleLoaded(collectionGroups) {\n    this.persistBundleLoadedState(collectionGroups);\n  }\n  shutdown() {\n    if (this.started) {\n      this.window.removeEventListener('storage', this.storageListener);\n      this.removeItem(this.localClientStorageKey);\n      this.started = false;\n    }\n  }\n  getItem(key) {\n    const value = this.storage.getItem(key);\n    logDebug(LOG_TAG$a, 'READ', key, value);\n    return value;\n  }\n  setItem(key, value) {\n    logDebug(LOG_TAG$a, 'SET', key, value);\n    this.storage.setItem(key, value);\n  }\n  removeItem(key) {\n    logDebug(LOG_TAG$a, 'REMOVE', key);\n    this.storage.removeItem(key);\n  }\n  handleWebStorageEvent(event) {\n    // Note: The function is typed to take Event to be interface-compatible with\n    // `Window.addEventListener`.\n    const storageEvent = event;\n    if (storageEvent.storageArea === this.storage) {\n      logDebug(LOG_TAG$a, 'EVENT', storageEvent.key, storageEvent.newValue);\n      if (storageEvent.key === this.localClientStorageKey) {\n        logError('Received WebStorage notification for local change. Another client might have ' + 'garbage-collected our state');\n        return;\n      }\n      this.queue.enqueueRetryable(async () => {\n        if (!this.started) {\n          this.earlyEvents.push(storageEvent);\n          return;\n        }\n        if (storageEvent.key === null) {\n          return;\n        }\n        if (this.clientStateKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue != null) {\n            const clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);\n            if (clientState) {\n              return this.handleClientStateEvent(clientState.clientId, clientState);\n            }\n          } else {\n            const clientId = this.fromWebStorageClientStateKey(storageEvent.key);\n            return this.handleClientStateEvent(clientId, null);\n          }\n        } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);\n            if (mutationMetadata) {\n              return this.handleMutationBatchEvent(mutationMetadata);\n            }\n          }\n        } else if (this.queryTargetKeyRe.test(storageEvent.key)) {\n          if (storageEvent.newValue !== null) {\n            const queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);\n            if (queryTargetMetadata) {\n              return this.handleQueryTargetEvent(queryTargetMetadata);\n            }\n          }\n        } else if (storageEvent.key === this.onlineStateKey) {\n          if (storageEvent.newValue !== null) {\n            const onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);\n            if (onlineState) {\n              return this.handleOnlineStateEvent(onlineState);\n            }\n          }\n        } else if (storageEvent.key === this.sequenceNumberKey) {\n          const sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);\n          if (sequenceNumber !== ListenSequence.INVALID) {\n            this.sequenceNumberHandler(sequenceNumber);\n          }\n        } else if (storageEvent.key === this.bundleLoadedKey) {\n          const collectionGroups = this.fromWebStoreBundleLoadedState(storageEvent.newValue);\n          await Promise.all(collectionGroups.map(cg => this.syncEngine.synchronizeWithChangedDocuments(cg)));\n        }\n      });\n    }\n  }\n  get localClientState() {\n    return this.activeClients.get(this.localClientId);\n  }\n  persistClientState() {\n    this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());\n  }\n  persistMutationState(batchId, state, error) {\n    const mutationState = new MutationMetadata(this.currentUser, batchId, state, error);\n    const mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\n    this.setItem(mutationKey, mutationState.toWebStorageJSON());\n  }\n  removeMutationState(batchId) {\n    const mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);\n    this.removeItem(mutationKey);\n  }\n  persistOnlineState(onlineState) {\n    const entry = {\n      clientId: this.localClientId,\n      onlineState\n    };\n    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));\n  }\n  persistQueryTargetState(targetId, state, error) {\n    const targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);\n    const targetMetadata = new QueryTargetMetadata(targetId, state, error);\n    this.setItem(targetKey, targetMetadata.toWebStorageJSON());\n  }\n  persistBundleLoadedState(collectionGroups) {\n    const json = JSON.stringify(Array.from(collectionGroups));\n    this.setItem(this.bundleLoadedKey, json);\n  }\n  /**\r\n   * Parses a client state key in WebStorage. Returns null if the key does not\r\n   * match the expected key format.\r\n   */\n  fromWebStorageClientStateKey(key) {\n    const match = this.clientStateKeyRe.exec(key);\n    return match ? match[1] : null;\n  }\n  /**\r\n   * Parses a client state in WebStorage. Returns 'null' if the value could not\r\n   * be parsed.\r\n   */\n  fromWebStorageClientState(key, value) {\n    const clientId = this.fromWebStorageClientStateKey(key);\n    return RemoteClientState.fromWebStorageEntry(clientId, value);\n  }\n  /**\r\n   * Parses a mutation batch state in WebStorage. Returns 'null' if the value\r\n   * could not be parsed.\r\n   */\n  fromWebStorageMutationMetadata(key, value) {\n    const match = this.mutationBatchKeyRe.exec(key);\n    const batchId = Number(match[1]);\n    const userId = match[2] !== undefined ? match[2] : null;\n    return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);\n  }\n  /**\r\n   * Parses a query target state from WebStorage. Returns 'null' if the value\r\n   * could not be parsed.\r\n   */\n  fromWebStorageQueryTargetMetadata(key, value) {\n    const match = this.queryTargetKeyRe.exec(key);\n    const targetId = Number(match[1]);\n    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);\n  }\n  /**\r\n   * Parses an online state from WebStorage. Returns 'null' if the value\r\n   * could not be parsed.\r\n   */\n  fromWebStorageOnlineState(value) {\n    return SharedOnlineState.fromWebStorageEntry(value);\n  }\n  fromWebStoreBundleLoadedState(value) {\n    return JSON.parse(value);\n  }\n  async handleMutationBatchEvent(mutationBatch) {\n    if (mutationBatch.user.uid !== this.currentUser.uid) {\n      logDebug(LOG_TAG$a, `Ignoring mutation for non-active user ${mutationBatch.user.uid}`);\n      return;\n    }\n    return this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error);\n  }\n  handleQueryTargetEvent(targetMetadata) {\n    return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);\n  }\n  handleClientStateEvent(clientId, clientState) {\n    const updatedClients = clientState ? this.activeClients.insert(clientId, clientState) : this.activeClients.remove(clientId);\n    const existingTargets = this.extractActiveQueryTargets(this.activeClients);\n    const newTargets = this.extractActiveQueryTargets(updatedClients);\n    const addedTargets = [];\n    const removedTargets = [];\n    newTargets.forEach(targetId => {\n      if (!existingTargets.has(targetId)) {\n        addedTargets.push(targetId);\n      }\n    });\n    existingTargets.forEach(targetId => {\n      if (!newTargets.has(targetId)) {\n        removedTargets.push(targetId);\n      }\n    });\n    return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(() => {\n      this.activeClients = updatedClients;\n    });\n  }\n  handleOnlineStateEvent(onlineState) {\n    // We check whether the client that wrote this online state is still active\n    // by comparing its client ID to the list of clients kept active in\n    // IndexedDb. If a client does not update their IndexedDb client state\n    // within 5 seconds, it is considered inactive and we don't emit an online\n    // state event.\n    if (this.activeClients.get(onlineState.clientId)) {\n      this.onlineStateHandler(onlineState.onlineState);\n    }\n  }\n  extractActiveQueryTargets(clients) {\n    let activeTargets = targetIdSet();\n    clients.forEach((kev, value) => {\n      activeTargets = activeTargets.unionWith(value.activeTargetIds);\n    });\n    return activeTargets;\n  }\n}\nfunction fromWebStorageSequenceNumber(seqString) {\n  let sequenceNumber = ListenSequence.INVALID;\n  if (seqString != null) {\n    try {\n      const parsed = JSON.parse(seqString);\n      hardAssert(typeof parsed === 'number');\n      sequenceNumber = parsed;\n    } catch (e) {\n      logError(LOG_TAG$a, 'Failed to read sequence number from WebStorage', e);\n    }\n  }\n  return sequenceNumber;\n}\n/**\r\n * `MemorySharedClientState` is a simple implementation of SharedClientState for\r\n * clients using memory persistence. The state in this class remains fully\r\n * isolated and no synchronization is performed.\r\n */\nclass MemorySharedClientState {\n  constructor() {\n    this.localState = new LocalClientState();\n    this.queryState = {};\n    this.onlineStateHandler = null;\n    this.sequenceNumberHandler = null;\n  }\n  addPendingMutation(batchId) {\n    // No op.\n  }\n  updateMutationState(batchId, state, error) {\n    // No op.\n  }\n  addLocalQueryTarget(targetId) {\n    this.localState.addQueryTarget(targetId);\n    return this.queryState[targetId] || 'not-current';\n  }\n  updateQueryState(targetId, state, error) {\n    this.queryState[targetId] = state;\n  }\n  removeLocalQueryTarget(targetId) {\n    this.localState.removeQueryTarget(targetId);\n  }\n  isLocalQueryTarget(targetId) {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n  clearQueryState(targetId) {\n    delete this.queryState[targetId];\n  }\n  getAllActiveQueryTargets() {\n    return this.localState.activeTargetIds;\n  }\n  isActiveQueryTarget(targetId) {\n    return this.localState.activeTargetIds.has(targetId);\n  }\n  start() {\n    this.localState = new LocalClientState();\n    return Promise.resolve();\n  }\n  handleUserChange(user, removedBatchIds, addedBatchIds) {\n    // No op.\n  }\n  setOnlineState(onlineState) {\n    // No op.\n  }\n  shutdown() {}\n  writeSequenceNumber(sequenceNumber) {}\n  notifyBundleLoaded(collectionGroups) {\n    // No op.\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass NoopConnectivityMonitor {\n  addCallback(callback) {\n    // No-op.\n  }\n  shutdown() {\n    // No-op.\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides a simple helper class that implements the Stream interface to\r\n * bridge to other implementations that are streams but do not implement the\r\n * interface. The stream callbacks are invoked with the callOn... methods.\r\n */\nclass StreamBridge {\n  constructor(args) {\n    this.sendFn = args.sendFn;\n    this.closeFn = args.closeFn;\n  }\n  onConnected(callback) {\n    this.wrappedOnConnected = callback;\n  }\n  onOpen(callback) {\n    this.wrappedOnOpen = callback;\n  }\n  onClose(callback) {\n    this.wrappedOnClose = callback;\n  }\n  onMessage(callback) {\n    this.wrappedOnMessage = callback;\n  }\n  close() {\n    this.closeFn();\n  }\n  send(msg) {\n    this.sendFn(msg);\n  }\n  callOnConnected() {\n    this.wrappedOnConnected();\n  }\n  callOnOpen() {\n    this.wrappedOnOpen();\n  }\n  callOnClose(err) {\n    this.wrappedOnClose(err);\n  }\n  callOnMessage(msg) {\n    this.wrappedOnMessage(msg);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The value returned from the most recent invocation of\r\n * `generateUniqueDebugId()`, or null if it has never been invoked.\r\n */\nlet lastUniqueDebugId = null;\n/**\r\n * Generates and returns an initial value for `lastUniqueDebugId`.\r\n *\r\n * The returned value is randomly selected from a range of integers that are\r\n * represented as 8 hexadecimal digits. This means that (within reason) any\r\n * numbers generated by incrementing the returned number by 1 will also be\r\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\r\n * length when converted to a hexadecimal string, making reading logs containing\r\n * these IDs easier to follow. And since the return value is randomly selected\r\n * it will help to differentiate between logs from different executions.\r\n */\nfunction generateInitialUniqueDebugId() {\n  const minResult = 0x10000000;\n  const maxResult = 0x90000000;\n  const resultRange = maxResult - minResult;\n  const resultOffset = Math.round(resultRange * Math.random());\n  return minResult + resultOffset;\n}\n/**\r\n * Generates and returns a unique ID as a hexadecimal string.\r\n *\r\n * The returned ID is intended to be used in debug logging messages to help\r\n * correlate log messages that may be spatially separated in the logs, but\r\n * logically related. For example, a network connection could include the same\r\n * \"debug ID\" string in all of its log messages to help trace a specific\r\n * connection over time.\r\n *\r\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\r\n */\nfunction generateUniqueDebugId() {\n  if (lastUniqueDebugId === null) {\n    lastUniqueDebugId = generateInitialUniqueDebugId();\n  } else {\n    lastUniqueDebugId++;\n  }\n  return '0x' + lastUniqueDebugId.toString(16);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*\r\n * Utilities for dealing with node.js-style APIs. See nodePromise for more\r\n * details.\r\n */\n/**\r\n * Creates a node-style callback that resolves or rejects a new Promise. The\r\n * callback is passed to the given action which can then use the callback as\r\n * a parameter to a node-style function.\r\n *\r\n * The intent is to directly bridge a node-style function (which takes a\r\n * callback) into a Promise without manually converting between the node-style\r\n * callback and the promise at each call.\r\n *\r\n * In effect it allows you to convert:\r\n *\r\n * @example\r\n * new Promise((resolve: (value?: fs.Stats) => void,\r\n *              reject: (error?: any) => void) => {\r\n *   fs.stat(path, (error?: any, stat?: fs.Stats) => {\r\n *     if (error) {\r\n *       reject(error);\r\n *     } else {\r\n *       resolve(stat);\r\n *     }\r\n *   });\r\n * });\r\n *\r\n * Into\r\n * @example\r\n * nodePromise((callback: NodeCallback<fs.Stats>) => {\r\n *   fs.stat(path, callback);\r\n * });\r\n *\r\n * @param action - a function that takes a node-style callback as an argument\r\n *     and then uses that callback to invoke some node-style API.\r\n * @returns a new Promise which will be rejected if the callback is given the\r\n *     first Error parameter or will resolve to the value given otherwise.\r\n */\nfunction nodePromise(action) {\n  return new Promise((resolve, reject) => {\n    action((error, value) => {\n      if (error) {\n        reject(error);\n      } else {\n        resolve(value);\n      }\n    });\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO: Fetch runtime version from grpc-js/package.json instead\n// when there's a cleaner way to dynamic require JSON in both Node ESM and CJS\nconst grpcVersion = '1.9.1';\nconst LOG_TAG$9 = 'GrpcConnection';\nconst X_GOOG_API_CLIENT_VALUE = `gl-node/${process.versions.node} fire/${SDK_VERSION} grpc/${grpcVersion}`;\nfunction createMetadata(databasePath, authToken, appCheckToken, appId) {\n  hardAssert(authToken === null || authToken.type === 'OAuth');\n  const metadata = new grpc.Metadata();\n  if (authToken) {\n    authToken.headers.forEach((value, key) => metadata.set(key, value));\n  }\n  if (appCheckToken) {\n    appCheckToken.headers.forEach((value, key) => metadata.set(key, value));\n  }\n  if (appId) {\n    metadata.set('X-Firebase-GMPID', appId);\n  }\n  metadata.set('X-Goog-Api-Client', X_GOOG_API_CLIENT_VALUE);\n  // These headers are used to improve routing and project isolation by the\n  // backend.\n  // TODO(b/199767712): We are keeping 'Google-Cloud-Resource-Prefix' until Emulators can be\n  // released with cl/428820046. Currently blocked because Emulators are now built with Java\n  // 11 from Google3.\n  metadata.set('Google-Cloud-Resource-Prefix', databasePath);\n  metadata.set('x-goog-request-params', databasePath);\n  return metadata;\n}\n/**\r\n * A Connection implemented by GRPC-Node.\r\n */\nclass GrpcConnection {\n  constructor(protos, databaseInfo) {\n    this.databaseInfo = databaseInfo;\n    // We cache stubs for the most-recently-used token.\n    this.cachedStub = null;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.firestore = protos['google']['firestore']['v1'];\n    this.databasePath = `projects/${databaseInfo.databaseId.projectId}/databases/${databaseInfo.databaseId.database}`;\n  }\n  get shouldResourcePathBeIncludedInRequest() {\n    // Both `invokeRPC()` and `invokeStreamingRPC()` ignore their `path` arguments, and expect\n    // the \"path\" to be part of the given `request`.\n    return true;\n  }\n  ensureActiveStub() {\n    if (!this.cachedStub) {\n      logDebug(LOG_TAG$9, 'Creating Firestore stub.');\n      const credentials = this.databaseInfo.ssl ? grpc.credentials.createSsl() : grpc.credentials.createInsecure();\n      this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials);\n    }\n    return this.cachedStub;\n  }\n  invokeRPC(rpcName, path, request, authToken, appCheckToken) {\n    const streamId = generateUniqueDebugId();\n    const stub = this.ensureActiveStub();\n    const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\n    const jsonRequest = Object.assign({\n      database: this.databasePath\n    }, request);\n    return nodePromise(callback => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} invoked with request:`, request);\n      return stub[rpcName](jsonRequest, metadata, (grpcError, value) => {\n        if (grpcError) {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} failed with error:`, grpcError);\n          callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));\n        } else {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} completed with response:`, value);\n          callback(undefined, value);\n        }\n      });\n    });\n  }\n  invokeStreamingRPC(rpcName, path, request, authToken, appCheckToken, expectedResponseCount) {\n    const streamId = generateUniqueDebugId();\n    const results = [];\n    const responseDeferred = new Deferred();\n    logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} invoked (streaming) with request:`, request);\n    const stub = this.ensureActiveStub();\n    const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\n    const jsonRequest = Object.assign(Object.assign({}, request), {\n      database: this.databasePath\n    });\n    const stream = stub[rpcName](jsonRequest, metadata);\n    let callbackFired = false;\n    stream.on('data', response => {\n      logDebug(LOG_TAG$9, `RPC ${rpcName} ${streamId} received result:`, response);\n      results.push(response);\n      if (expectedResponseCount !== undefined && results.length === expectedResponseCount) {\n        callbackFired = true;\n        responseDeferred.resolve(results);\n      }\n    });\n    stream.on('end', () => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} completed.`);\n      if (!callbackFired) {\n        callbackFired = true;\n        responseDeferred.resolve(results);\n      }\n    });\n    stream.on('error', grpcError => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' ${streamId} failed with error:`, grpcError);\n      const code = mapCodeFromRpcCode(grpcError.code);\n      responseDeferred.reject(new FirestoreError(code, grpcError.message));\n    });\n    return responseDeferred.promise;\n  }\n  // TODO(mikelehen): This \"method\" is a monster. Should be refactored.\n  openStream(rpcName, authToken, appCheckToken) {\n    const streamId = generateUniqueDebugId();\n    const stub = this.ensureActiveStub();\n    const metadata = createMetadata(this.databasePath, authToken, appCheckToken, this.databaseInfo.appId);\n    const grpcStream = stub[rpcName](metadata);\n    let closed = false;\n    const close = err => {\n      if (!closed) {\n        closed = true;\n        stream.callOnClose(err);\n        grpcStream.end();\n      }\n    };\n    const stream = new StreamBridge({\n      sendFn: msg => {\n        if (!closed) {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} sending:`, msg);\n          try {\n            grpcStream.write(msg);\n          } catch (e) {\n            // This probably means we didn't conform to the proto.  Make sure to\n            // log the message we sent.\n            logError('Failure sending:', msg);\n            logError('Error:', e);\n            throw e;\n          }\n        } else {\n          logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} ` + 'not sending because gRPC stream is closed:', msg);\n        }\n      },\n      closeFn: () => {\n        logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} closed locally via close().`);\n        close();\n      }\n    });\n    let onConnectedSent = false;\n    grpcStream.on('data', msg => {\n      if (!closed) {\n        logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} received:`, msg);\n        // Emulate the \"onConnected\" event that WebChannelConnection sends.\n        if (!onConnectedSent) {\n          stream.callOnConnected();\n          onConnectedSent = true;\n        }\n        stream.callOnMessage(msg);\n      }\n    });\n    grpcStream.on('end', () => {\n      logDebug(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} ended.`);\n      close();\n    });\n    grpcStream.on('error', grpcError => {\n      if (!closed) {\n        logWarn(LOG_TAG$9, `RPC '${rpcName}' stream ${streamId} error. Code:`, grpcError.code, 'Message:', grpcError.message);\n        const code = mapCodeFromRpcCode(grpcError.code);\n        close(new FirestoreError(code, grpcError.message));\n      }\n    });\n    logDebug(LOG_TAG$9, `Opening RPC '${rpcName}' stream ${streamId} ` + `to ${this.databaseInfo.host}`);\n    // TODO(dimond): Since grpc has no explicit open status (or does it?) we\n    // simulate an onOpen in the next loop after the stream had it's listeners\n    // registered\n    setTimeout(() => {\n      stream.callOnOpen();\n    }, 0);\n    return stream;\n  }\n  /**\r\n   * Closes and cleans up any resources associated with the GrpcConnection.\r\n   * If a gRPC client has been generated for this connection, the gRPC client\r\n   * is closed. Failure to call terminate on a GrpcConnection can result\r\n   * in leaked resources of the gRPC client.\r\n   */\n  terminate() {\n    if (this.cachedStub) {\n      this.cachedStub.close();\n      this.cachedStub = undefined;\n    }\n  }\n}\nconst nested = {\n  google: {\n    nested: {\n      protobuf: {\n        options: {\n          csharp_namespace: \"Google.Protobuf.WellKnownTypes\",\n          go_package: \"github.com/golang/protobuf/ptypes/wrappers\",\n          java_package: \"com.google.protobuf\",\n          java_outer_classname: \"WrappersProto\",\n          java_multiple_files: true,\n          objc_class_prefix: \"GPB\",\n          cc_enable_arenas: true,\n          optimize_for: \"SPEED\"\n        },\n        nested: {\n          Timestamp: {\n            fields: {\n              seconds: {\n                type: \"int64\",\n                id: 1\n              },\n              nanos: {\n                type: \"int32\",\n                id: 2\n              }\n            }\n          },\n          FileDescriptorSet: {\n            fields: {\n              file: {\n                rule: \"repeated\",\n                type: \"FileDescriptorProto\",\n                id: 1\n              }\n            }\n          },\n          FileDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              \"package\": {\n                type: \"string\",\n                id: 2\n              },\n              dependency: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 3\n              },\n              publicDependency: {\n                rule: \"repeated\",\n                type: \"int32\",\n                id: 10,\n                options: {\n                  packed: false\n                }\n              },\n              weakDependency: {\n                rule: \"repeated\",\n                type: \"int32\",\n                id: 11,\n                options: {\n                  packed: false\n                }\n              },\n              messageType: {\n                rule: \"repeated\",\n                type: \"DescriptorProto\",\n                id: 4\n              },\n              enumType: {\n                rule: \"repeated\",\n                type: \"EnumDescriptorProto\",\n                id: 5\n              },\n              service: {\n                rule: \"repeated\",\n                type: \"ServiceDescriptorProto\",\n                id: 6\n              },\n              extension: {\n                rule: \"repeated\",\n                type: \"FieldDescriptorProto\",\n                id: 7\n              },\n              options: {\n                type: \"FileOptions\",\n                id: 8\n              },\n              sourceCodeInfo: {\n                type: \"SourceCodeInfo\",\n                id: 9\n              },\n              syntax: {\n                type: \"string\",\n                id: 12\n              }\n            }\n          },\n          DescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              field: {\n                rule: \"repeated\",\n                type: \"FieldDescriptorProto\",\n                id: 2\n              },\n              extension: {\n                rule: \"repeated\",\n                type: \"FieldDescriptorProto\",\n                id: 6\n              },\n              nestedType: {\n                rule: \"repeated\",\n                type: \"DescriptorProto\",\n                id: 3\n              },\n              enumType: {\n                rule: \"repeated\",\n                type: \"EnumDescriptorProto\",\n                id: 4\n              },\n              extensionRange: {\n                rule: \"repeated\",\n                type: \"ExtensionRange\",\n                id: 5\n              },\n              oneofDecl: {\n                rule: \"repeated\",\n                type: \"OneofDescriptorProto\",\n                id: 8\n              },\n              options: {\n                type: \"MessageOptions\",\n                id: 7\n              },\n              reservedRange: {\n                rule: \"repeated\",\n                type: \"ReservedRange\",\n                id: 9\n              },\n              reservedName: {\n                rule: \"repeated\",\n                type: \"string\",\n                id: 10\n              }\n            },\n            nested: {\n              ExtensionRange: {\n                fields: {\n                  start: {\n                    type: \"int32\",\n                    id: 1\n                  },\n                  end: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              },\n              ReservedRange: {\n                fields: {\n                  start: {\n                    type: \"int32\",\n                    id: 1\n                  },\n                  end: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              }\n            }\n          },\n          FieldDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              number: {\n                type: \"int32\",\n                id: 3\n              },\n              label: {\n                type: \"Label\",\n                id: 4\n              },\n              type: {\n                type: \"Type\",\n                id: 5\n              },\n              typeName: {\n                type: \"string\",\n                id: 6\n              },\n              extendee: {\n                type: \"string\",\n                id: 2\n              },\n              defaultValue: {\n                type: \"string\",\n                id: 7\n              },\n              oneofIndex: {\n                type: \"int32\",\n                id: 9\n              },\n              jsonName: {\n                type: \"string\",\n                id: 10\n              },\n              options: {\n                type: \"FieldOptions\",\n                id: 8\n              }\n            },\n            nested: {\n              Type: {\n                values: {\n                  TYPE_DOUBLE: 1,\n                  TYPE_FLOAT: 2,\n                  TYPE_INT64: 3,\n                  TYPE_UINT64: 4,\n                  TYPE_INT32: 5,\n                  TYPE_FIXED64: 6,\n                  TYPE_FIXED32: 7,\n                  TYPE_BOOL: 8,\n                  TYPE_STRING: 9,\n                  TYPE_GROUP: 10,\n                  TYPE_MESSAGE: 11,\n                  TYPE_BYTES: 12,\n                  TYPE_UINT32: 13,\n                  TYPE_ENUM: 14,\n                  TYPE_SFIXED32: 15,\n                  TYPE_SFIXED64: 16,\n                  TYPE_SINT32: 17,\n                  TYPE_SINT64: 18\n                }\n              },\n              Label: {\n                values: {\n                  LABEL_OPTIONAL: 1,\n                  LABEL_REQUIRED: 2,\n                  LABEL_REPEATED: 3\n                }\n              }\n            }\n          },\n          OneofDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              options: {\n                type: \"OneofOptions\",\n                id: 2\n              }\n            }\n          },\n          EnumDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              value: {\n                rule: \"repeated\",\n                type: \"EnumValueDescriptorProto\",\n                id: 2\n              },\n              options: {\n                type: \"EnumOptions\",\n                id: 3\n              }\n            }\n          },\n          EnumValueDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              number: {\n                type: \"int32\",\n                id: 2\n              },\n              options: {\n                type: \"EnumValueOptions\",\n                id: 3\n              }\n            }\n          },\n          ServiceDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              method: {\n                rule: \"repeated\",\n                type: \"MethodDescriptorProto\",\n                id: 2\n              },\n              options: {\n                type: \"ServiceOptions\",\n                id: 3\n              }\n            }\n          },\n          MethodDescriptorProto: {\n            fields: {\n              name: {\n                type: \"string\",\n                id: 1\n              },\n              inputType: {\n                type: \"string\",\n                id: 2\n              },\n              outputType: {\n                type: \"string\",\n                id: 3\n              },\n              options: {\n                type: \"MethodOptions\",\n                id: 4\n              },\n              clientStreaming: {\n                type: \"bool\",\n                id: 5\n              },\n              serverStreaming: {\n                type: \"bool\",\n                id: 6\n              }\n            }\n          },\n          FileOptions: {\n            fields: {\n              javaPackage: {\n                type: \"string\",\n                id: 1\n              },\n              javaOuterClassname: {\n                type: \"string\",\n                id: 8\n              },\n              javaMultipleFiles: {\n                type: \"bool\",\n                id: 10\n              },\n              javaGenerateEqualsAndHash: {\n                type: \"bool\",\n                id: 20,\n                options: {\n                  deprecated: true\n                }\n              },\n              javaStringCheckUtf8: {\n                type: \"bool\",\n                id: 27\n              },\n              optimizeFor: {\n                type: \"OptimizeMode\",\n                id: 9,\n                options: {\n                  \"default\": \"SPEED\"\n                }\n              },\n              goPackage: {\n                type: \"string\",\n                id: 11\n              },\n              ccGenericServices: {\n                type: \"bool\",\n                id: 16\n              },\n              javaGenericServices: {\n                type: \"bool\",\n                id: 17\n              },\n              pyGenericServices: {\n                type: \"bool\",\n                id: 18\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 23\n              },\n              ccEnableArenas: {\n                type: \"bool\",\n                id: 31\n              },\n              objcClassPrefix: {\n                type: \"string\",\n                id: 36\n              },\n              csharpNamespace: {\n                type: \"string\",\n                id: 37\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]],\n            reserved: [[38, 38]],\n            nested: {\n              OptimizeMode: {\n                values: {\n                  SPEED: 1,\n                  CODE_SIZE: 2,\n                  LITE_RUNTIME: 3\n                }\n              }\n            }\n          },\n          MessageOptions: {\n            fields: {\n              messageSetWireFormat: {\n                type: \"bool\",\n                id: 1\n              },\n              noStandardDescriptorAccessor: {\n                type: \"bool\",\n                id: 2\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 3\n              },\n              mapEntry: {\n                type: \"bool\",\n                id: 7\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]],\n            reserved: [[8, 8]]\n          },\n          FieldOptions: {\n            fields: {\n              ctype: {\n                type: \"CType\",\n                id: 1,\n                options: {\n                  \"default\": \"STRING\"\n                }\n              },\n              packed: {\n                type: \"bool\",\n                id: 2\n              },\n              jstype: {\n                type: \"JSType\",\n                id: 6,\n                options: {\n                  \"default\": \"JS_NORMAL\"\n                }\n              },\n              lazy: {\n                type: \"bool\",\n                id: 5\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 3\n              },\n              weak: {\n                type: \"bool\",\n                id: 10\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]],\n            reserved: [[4, 4]],\n            nested: {\n              CType: {\n                values: {\n                  STRING: 0,\n                  CORD: 1,\n                  STRING_PIECE: 2\n                }\n              },\n              JSType: {\n                values: {\n                  JS_NORMAL: 0,\n                  JS_STRING: 1,\n                  JS_NUMBER: 2\n                }\n              }\n            }\n          },\n          OneofOptions: {\n            fields: {\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          EnumOptions: {\n            fields: {\n              allowAlias: {\n                type: \"bool\",\n                id: 2\n              },\n              deprecated: {\n                type: \"bool\",\n                id: 3\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          EnumValueOptions: {\n            fields: {\n              deprecated: {\n                type: \"bool\",\n                id: 1\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          ServiceOptions: {\n            fields: {\n              deprecated: {\n                type: \"bool\",\n                id: 33\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          MethodOptions: {\n            fields: {\n              deprecated: {\n                type: \"bool\",\n                id: 33\n              },\n              uninterpretedOption: {\n                rule: \"repeated\",\n                type: \"UninterpretedOption\",\n                id: 999\n              }\n            },\n            extensions: [[1000, 536870911]]\n          },\n          UninterpretedOption: {\n            fields: {\n              name: {\n                rule: \"repeated\",\n                type: \"NamePart\",\n                id: 2\n              },\n              identifierValue: {\n                type: \"string\",\n                id: 3\n              },\n              positiveIntValue: {\n                type: \"uint64\",\n                id: 4\n              },\n              negativeIntValue: {\n                type: \"int64\",\n                id: 5\n              },\n              doubleValue: {\n                type: \"double\",\n                id: 6\n              },\n              stringValue: {\n                type: \"bytes\",\n                id: 7\n              },\n              aggregateValue: {\n                type: \"string\",\n                id: 8\n              }\n            },\n            nested: {\n              NamePart: {\n                fields: {\n                  namePart: {\n                    rule: \"required\",\n                    type: \"string\",\n                    id: 1\n                  },\n                  isExtension: {\n                    rule: \"required\",\n                    type: \"bool\",\n                    id: 2\n                  }\n                }\n              }\n            }\n          },\n          SourceCodeInfo: {\n            fields: {\n              location: {\n                rule: \"repeated\",\n                type: \"Location\",\n                id: 1\n              }\n            },\n            nested: {\n              Location: {\n                fields: {\n                  path: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 1\n                  },\n                  span: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 2\n                  },\n                  leadingComments: {\n                    type: \"string\",\n                    id: 3\n                  },\n                  trailingComments: {\n                    type: \"string\",\n                    id: 4\n                  },\n                  leadingDetachedComments: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 6\n                  }\n                }\n              }\n            }\n          },\n          GeneratedCodeInfo: {\n            fields: {\n              annotation: {\n                rule: \"repeated\",\n                type: \"Annotation\",\n                id: 1\n              }\n            },\n            nested: {\n              Annotation: {\n                fields: {\n                  path: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 1\n                  },\n                  sourceFile: {\n                    type: \"string\",\n                    id: 2\n                  },\n                  begin: {\n                    type: \"int32\",\n                    id: 3\n                  },\n                  end: {\n                    type: \"int32\",\n                    id: 4\n                  }\n                }\n              }\n            }\n          },\n          Struct: {\n            fields: {\n              fields: {\n                keyType: \"string\",\n                type: \"Value\",\n                id: 1\n              }\n            }\n          },\n          Value: {\n            oneofs: {\n              kind: {\n                oneof: [\"nullValue\", \"numberValue\", \"stringValue\", \"boolValue\", \"structValue\", \"listValue\"]\n              }\n            },\n            fields: {\n              nullValue: {\n                type: \"NullValue\",\n                id: 1\n              },\n              numberValue: {\n                type: \"double\",\n                id: 2\n              },\n              stringValue: {\n                type: \"string\",\n                id: 3\n              },\n              boolValue: {\n                type: \"bool\",\n                id: 4\n              },\n              structValue: {\n                type: \"Struct\",\n                id: 5\n              },\n              listValue: {\n                type: \"ListValue\",\n                id: 6\n              }\n            }\n          },\n          NullValue: {\n            values: {\n              NULL_VALUE: 0\n            }\n          },\n          ListValue: {\n            fields: {\n              values: {\n                rule: \"repeated\",\n                type: \"Value\",\n                id: 1\n              }\n            }\n          },\n          Empty: {\n            fields: {}\n          },\n          DoubleValue: {\n            fields: {\n              value: {\n                type: \"double\",\n                id: 1\n              }\n            }\n          },\n          FloatValue: {\n            fields: {\n              value: {\n                type: \"float\",\n                id: 1\n              }\n            }\n          },\n          Int64Value: {\n            fields: {\n              value: {\n                type: \"int64\",\n                id: 1\n              }\n            }\n          },\n          UInt64Value: {\n            fields: {\n              value: {\n                type: \"uint64\",\n                id: 1\n              }\n            }\n          },\n          Int32Value: {\n            fields: {\n              value: {\n                type: \"int32\",\n                id: 1\n              }\n            }\n          },\n          UInt32Value: {\n            fields: {\n              value: {\n                type: \"uint32\",\n                id: 1\n              }\n            }\n          },\n          BoolValue: {\n            fields: {\n              value: {\n                type: \"bool\",\n                id: 1\n              }\n            }\n          },\n          StringValue: {\n            fields: {\n              value: {\n                type: \"string\",\n                id: 1\n              }\n            }\n          },\n          BytesValue: {\n            fields: {\n              value: {\n                type: \"bytes\",\n                id: 1\n              }\n            }\n          },\n          Any: {\n            fields: {\n              typeUrl: {\n                type: \"string\",\n                id: 1\n              },\n              value: {\n                type: \"bytes\",\n                id: 2\n              }\n            }\n          }\n        }\n      },\n      firestore: {\n        nested: {\n          v1: {\n            options: {\n              csharp_namespace: \"Google.Cloud.Firestore.V1\",\n              go_package: \"google.golang.org/genproto/googleapis/firestore/v1;firestore\",\n              java_multiple_files: true,\n              java_outer_classname: \"WriteProto\",\n              java_package: \"com.google.firestore.v1\",\n              objc_class_prefix: \"GCFS\",\n              php_namespace: \"Google\\\\Cloud\\\\Firestore\\\\V1\",\n              ruby_package: \"Google::Cloud::Firestore::V1\"\n            },\n            nested: {\n              AggregationResult: {\n                fields: {\n                  aggregateFields: {\n                    keyType: \"string\",\n                    type: \"Value\",\n                    id: 2\n                  }\n                }\n              },\n              BitSequence: {\n                fields: {\n                  bitmap: {\n                    type: \"bytes\",\n                    id: 1\n                  },\n                  padding: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              },\n              BloomFilter: {\n                fields: {\n                  bits: {\n                    type: \"BitSequence\",\n                    id: 1\n                  },\n                  hashCount: {\n                    type: \"int32\",\n                    id: 2\n                  }\n                }\n              },\n              DocumentMask: {\n                fields: {\n                  fieldPaths: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 1\n                  }\n                }\n              },\n              Precondition: {\n                oneofs: {\n                  conditionType: {\n                    oneof: [\"exists\", \"updateTime\"]\n                  }\n                },\n                fields: {\n                  exists: {\n                    type: \"bool\",\n                    id: 1\n                  },\n                  updateTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 2\n                  }\n                }\n              },\n              TransactionOptions: {\n                oneofs: {\n                  mode: {\n                    oneof: [\"readOnly\", \"readWrite\"]\n                  }\n                },\n                fields: {\n                  readOnly: {\n                    type: \"ReadOnly\",\n                    id: 2\n                  },\n                  readWrite: {\n                    type: \"ReadWrite\",\n                    id: 3\n                  }\n                },\n                nested: {\n                  ReadWrite: {\n                    fields: {\n                      retryTransaction: {\n                        type: \"bytes\",\n                        id: 1\n                      }\n                    }\n                  },\n                  ReadOnly: {\n                    oneofs: {\n                      consistencySelector: {\n                        oneof: [\"readTime\"]\n                      }\n                    },\n                    fields: {\n                      readTime: {\n                        type: \"google.protobuf.Timestamp\",\n                        id: 2\n                      }\n                    }\n                  }\n                }\n              },\n              Document: {\n                fields: {\n                  name: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  fields: {\n                    keyType: \"string\",\n                    type: \"Value\",\n                    id: 2\n                  },\n                  createTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 3\n                  },\n                  updateTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              Value: {\n                oneofs: {\n                  valueType: {\n                    oneof: [\"nullValue\", \"booleanValue\", \"integerValue\", \"doubleValue\", \"timestampValue\", \"stringValue\", \"bytesValue\", \"referenceValue\", \"geoPointValue\", \"arrayValue\", \"mapValue\"]\n                  }\n                },\n                fields: {\n                  nullValue: {\n                    type: \"google.protobuf.NullValue\",\n                    id: 11\n                  },\n                  booleanValue: {\n                    type: \"bool\",\n                    id: 1\n                  },\n                  integerValue: {\n                    type: \"int64\",\n                    id: 2\n                  },\n                  doubleValue: {\n                    type: \"double\",\n                    id: 3\n                  },\n                  timestampValue: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 10\n                  },\n                  stringValue: {\n                    type: \"string\",\n                    id: 17\n                  },\n                  bytesValue: {\n                    type: \"bytes\",\n                    id: 18\n                  },\n                  referenceValue: {\n                    type: \"string\",\n                    id: 5\n                  },\n                  geoPointValue: {\n                    type: \"google.type.LatLng\",\n                    id: 8\n                  },\n                  arrayValue: {\n                    type: \"ArrayValue\",\n                    id: 9\n                  },\n                  mapValue: {\n                    type: \"MapValue\",\n                    id: 6\n                  }\n                }\n              },\n              ArrayValue: {\n                fields: {\n                  values: {\n                    rule: \"repeated\",\n                    type: \"Value\",\n                    id: 1\n                  }\n                }\n              },\n              MapValue: {\n                fields: {\n                  fields: {\n                    keyType: \"string\",\n                    type: \"Value\",\n                    id: 1\n                  }\n                }\n              },\n              Firestore: {\n                options: {\n                  \"(google.api.default_host)\": \"firestore.googleapis.com\",\n                  \"(google.api.oauth_scopes)\": \"https://www.googleapis.com/auth/cloud-platform,https://www.googleapis.com/auth/datastore\"\n                },\n                methods: {\n                  GetDocument: {\n                    requestType: \"GetDocumentRequest\",\n                    responseType: \"Document\",\n                    options: {\n                      \"(google.api.http).get\": \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        get: \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n                      }\n                    }]\n                  },\n                  ListDocuments: {\n                    requestType: \"ListDocumentsRequest\",\n                    responseType: \"ListDocumentsResponse\",\n                    options: {\n                      \"(google.api.http).get\": \"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        get: \"/v1/{parent=projects/*/databases/*/documents/*/**}/{collection_id}\"\n                      }\n                    }]\n                  },\n                  UpdateDocument: {\n                    requestType: \"UpdateDocumentRequest\",\n                    responseType: \"Document\",\n                    options: {\n                      \"(google.api.http).patch\": \"/v1/{document.name=projects/*/databases/*/documents/*/**}\",\n                      \"(google.api.http).body\": \"document\",\n                      \"(google.api.method_signature)\": \"document,update_mask\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        patch: \"/v1/{document.name=projects/*/databases/*/documents/*/**}\",\n                        body: \"document\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"document,update_mask\"\n                    }]\n                  },\n                  DeleteDocument: {\n                    requestType: \"DeleteDocumentRequest\",\n                    responseType: \"google.protobuf.Empty\",\n                    options: {\n                      \"(google.api.http).delete\": \"/v1/{name=projects/*/databases/*/documents/*/**}\",\n                      \"(google.api.method_signature)\": \"name\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        \"delete\": \"/v1/{name=projects/*/databases/*/documents/*/**}\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"name\"\n                    }]\n                  },\n                  BatchGetDocuments: {\n                    requestType: \"BatchGetDocumentsRequest\",\n                    responseType: \"BatchGetDocumentsResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:batchGet\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:batchGet\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  BeginTransaction: {\n                    requestType: \"BeginTransactionRequest\",\n                    responseType: \"BeginTransactionResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:beginTransaction\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.method_signature)\": \"database\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:beginTransaction\",\n                        body: \"*\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"database\"\n                    }]\n                  },\n                  Commit: {\n                    requestType: \"CommitRequest\",\n                    responseType: \"CommitResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:commit\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.method_signature)\": \"database,writes\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:commit\",\n                        body: \"*\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"database,writes\"\n                    }]\n                  },\n                  Rollback: {\n                    requestType: \"RollbackRequest\",\n                    responseType: \"google.protobuf.Empty\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:rollback\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.method_signature)\": \"database,transaction\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:rollback\",\n                        body: \"*\"\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"database,transaction\"\n                    }]\n                  },\n                  RunQuery: {\n                    requestType: \"RunQueryRequest\",\n                    responseType: \"RunQueryResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:runQuery\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery\",\n                      \"(google.api.http).additional_bindings.body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:runQuery\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:runQuery\",\n                          body: \"*\"\n                        }\n                      }\n                    }]\n                  },\n                  RunAggregationQuery: {\n                    requestType: \"RunAggregationQueryRequest\",\n                    responseType: \"RunAggregationQueryResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery\",\n                      \"(google.api.http).additional_bindings.body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:runAggregationQuery\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:runAggregationQuery\",\n                          body: \"*\"\n                        }\n                      }\n                    }]\n                  },\n                  PartitionQuery: {\n                    requestType: \"PartitionQueryRequest\",\n                    responseType: \"PartitionQueryResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:partitionQuery\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery\",\n                      \"(google.api.http).additional_bindings.body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:partitionQuery\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:partitionQuery\",\n                          body: \"*\"\n                        }\n                      }\n                    }]\n                  },\n                  Write: {\n                    requestType: \"WriteRequest\",\n                    requestStream: true,\n                    responseType: \"WriteResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:write\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:write\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  Listen: {\n                    requestType: \"ListenRequest\",\n                    requestStream: true,\n                    responseType: \"ListenResponse\",\n                    responseStream: true,\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:listen\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:listen\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  ListCollectionIds: {\n                    requestType: \"ListCollectionIdsRequest\",\n                    responseType: \"ListCollectionIdsResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds\",\n                      \"(google.api.http).body\": \"*\",\n                      \"(google.api.http).additional_bindings.post\": \"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds\",\n                      \"(google.api.http).additional_bindings.body\": \"*\",\n                      \"(google.api.method_signature)\": \"parent\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents}:listCollectionIds\",\n                        body: \"*\",\n                        additional_bindings: {\n                          post: \"/v1/{parent=projects/*/databases/*/documents/*/**}:listCollectionIds\",\n                          body: \"*\"\n                        }\n                      }\n                    }, {\n                      \"(google.api.method_signature)\": \"parent\"\n                    }]\n                  },\n                  BatchWrite: {\n                    requestType: \"BatchWriteRequest\",\n                    responseType: \"BatchWriteResponse\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{database=projects/*/databases/*}/documents:batchWrite\",\n                      \"(google.api.http).body\": \"*\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{database=projects/*/databases/*}/documents:batchWrite\",\n                        body: \"*\"\n                      }\n                    }]\n                  },\n                  CreateDocument: {\n                    requestType: \"CreateDocumentRequest\",\n                    responseType: \"Document\",\n                    options: {\n                      \"(google.api.http).post\": \"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}\",\n                      \"(google.api.http).body\": \"document\"\n                    },\n                    parsedOptions: [{\n                      \"(google.api.http)\": {\n                        post: \"/v1/{parent=projects/*/databases/*/documents/**}/{collection_id}\",\n                        body: \"document\"\n                      }\n                    }]\n                  }\n                }\n              },\n              GetDocumentRequest: {\n                oneofs: {\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  name: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 3\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 5\n                  }\n                }\n              },\n              ListDocumentsRequest: {\n                oneofs: {\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  collectionId: {\n                    type: \"string\",\n                    id: 2,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  pageSize: {\n                    type: \"int32\",\n                    id: 3\n                  },\n                  pageToken: {\n                    type: \"string\",\n                    id: 4\n                  },\n                  orderBy: {\n                    type: \"string\",\n                    id: 6\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 7\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 8\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 10\n                  },\n                  showMissing: {\n                    type: \"bool\",\n                    id: 12\n                  }\n                }\n              },\n              ListDocumentsResponse: {\n                fields: {\n                  documents: {\n                    rule: \"repeated\",\n                    type: \"Document\",\n                    id: 1\n                  },\n                  nextPageToken: {\n                    type: \"string\",\n                    id: 2\n                  }\n                }\n              },\n              CreateDocumentRequest: {\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  collectionId: {\n                    type: \"string\",\n                    id: 2,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  documentId: {\n                    type: \"string\",\n                    id: 3\n                  },\n                  document: {\n                    type: \"Document\",\n                    id: 4,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 5\n                  }\n                }\n              },\n              UpdateDocumentRequest: {\n                fields: {\n                  document: {\n                    type: \"Document\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  updateMask: {\n                    type: \"DocumentMask\",\n                    id: 2\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 3\n                  },\n                  currentDocument: {\n                    type: \"Precondition\",\n                    id: 4\n                  }\n                }\n              },\n              DeleteDocumentRequest: {\n                fields: {\n                  name: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  currentDocument: {\n                    type: \"Precondition\",\n                    id: 2\n                  }\n                }\n              },\n              BatchGetDocumentsRequest: {\n                oneofs: {\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"newTransaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  documents: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 2\n                  },\n                  mask: {\n                    type: \"DocumentMask\",\n                    id: 3\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  newTransaction: {\n                    type: \"TransactionOptions\",\n                    id: 5\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 7\n                  }\n                }\n              },\n              BatchGetDocumentsResponse: {\n                oneofs: {\n                  result: {\n                    oneof: [\"found\", \"missing\"]\n                  }\n                },\n                fields: {\n                  found: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  missing: {\n                    type: \"string\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 3\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              BeginTransactionRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  options: {\n                    type: \"TransactionOptions\",\n                    id: 2\n                  }\n                }\n              },\n              BeginTransactionResponse: {\n                fields: {\n                  transaction: {\n                    type: \"bytes\",\n                    id: 1\n                  }\n                }\n              },\n              CommitRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  writes: {\n                    rule: \"repeated\",\n                    type: \"Write\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 3\n                  }\n                }\n              },\n              CommitResponse: {\n                fields: {\n                  writeResults: {\n                    rule: \"repeated\",\n                    type: \"WriteResult\",\n                    id: 1\n                  },\n                  commitTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 2\n                  }\n                }\n              },\n              RollbackRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 2,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  }\n                }\n              },\n              RunQueryRequest: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredQuery\"]\n                  },\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"newTransaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  structuredQuery: {\n                    type: \"StructuredQuery\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 5\n                  },\n                  newTransaction: {\n                    type: \"TransactionOptions\",\n                    id: 6\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 7\n                  }\n                }\n              },\n              RunQueryResponse: {\n                fields: {\n                  transaction: {\n                    type: \"bytes\",\n                    id: 2\n                  },\n                  document: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 3\n                  },\n                  skippedResults: {\n                    type: \"int32\",\n                    id: 4\n                  }\n                }\n              },\n              RunAggregationQueryRequest: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredAggregationQuery\"]\n                  },\n                  consistencySelector: {\n                    oneof: [\"transaction\", \"newTransaction\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  structuredAggregationQuery: {\n                    type: \"StructuredAggregationQuery\",\n                    id: 2\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  newTransaction: {\n                    type: \"TransactionOptions\",\n                    id: 5\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 6\n                  }\n                }\n              },\n              RunAggregationQueryResponse: {\n                fields: {\n                  result: {\n                    type: \"AggregationResult\",\n                    id: 1\n                  },\n                  transaction: {\n                    type: \"bytes\",\n                    id: 2\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 3\n                  }\n                }\n              },\n              PartitionQueryRequest: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredQuery\"]\n                  }\n                },\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  structuredQuery: {\n                    type: \"StructuredQuery\",\n                    id: 2\n                  },\n                  partitionCount: {\n                    type: \"int64\",\n                    id: 3\n                  },\n                  pageToken: {\n                    type: \"string\",\n                    id: 4\n                  },\n                  pageSize: {\n                    type: \"int32\",\n                    id: 5\n                  }\n                }\n              },\n              PartitionQueryResponse: {\n                fields: {\n                  partitions: {\n                    rule: \"repeated\",\n                    type: \"Cursor\",\n                    id: 1\n                  },\n                  nextPageToken: {\n                    type: \"string\",\n                    id: 2\n                  }\n                }\n              },\n              WriteRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  streamId: {\n                    type: \"string\",\n                    id: 2\n                  },\n                  writes: {\n                    rule: \"repeated\",\n                    type: \"Write\",\n                    id: 3\n                  },\n                  streamToken: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  labels: {\n                    keyType: \"string\",\n                    type: \"string\",\n                    id: 5\n                  }\n                }\n              },\n              WriteResponse: {\n                fields: {\n                  streamId: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  streamToken: {\n                    type: \"bytes\",\n                    id: 2\n                  },\n                  writeResults: {\n                    rule: \"repeated\",\n                    type: \"WriteResult\",\n                    id: 3\n                  },\n                  commitTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              ListenRequest: {\n                oneofs: {\n                  targetChange: {\n                    oneof: [\"addTarget\", \"removeTarget\"]\n                  }\n                },\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  addTarget: {\n                    type: \"Target\",\n                    id: 2\n                  },\n                  removeTarget: {\n                    type: \"int32\",\n                    id: 3\n                  },\n                  labels: {\n                    keyType: \"string\",\n                    type: \"string\",\n                    id: 4\n                  }\n                }\n              },\n              ListenResponse: {\n                oneofs: {\n                  responseType: {\n                    oneof: [\"targetChange\", \"documentChange\", \"documentDelete\", \"documentRemove\", \"filter\"]\n                  }\n                },\n                fields: {\n                  targetChange: {\n                    type: \"TargetChange\",\n                    id: 2\n                  },\n                  documentChange: {\n                    type: \"DocumentChange\",\n                    id: 3\n                  },\n                  documentDelete: {\n                    type: \"DocumentDelete\",\n                    id: 4\n                  },\n                  documentRemove: {\n                    type: \"DocumentRemove\",\n                    id: 6\n                  },\n                  filter: {\n                    type: \"ExistenceFilter\",\n                    id: 5\n                  }\n                }\n              },\n              Target: {\n                oneofs: {\n                  targetType: {\n                    oneof: [\"query\", \"documents\"]\n                  },\n                  resumeType: {\n                    oneof: [\"resumeToken\", \"readTime\"]\n                  }\n                },\n                fields: {\n                  query: {\n                    type: \"QueryTarget\",\n                    id: 2\n                  },\n                  documents: {\n                    type: \"DocumentsTarget\",\n                    id: 3\n                  },\n                  resumeToken: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 11\n                  },\n                  targetId: {\n                    type: \"int32\",\n                    id: 5\n                  },\n                  once: {\n                    type: \"bool\",\n                    id: 6\n                  },\n                  expectedCount: {\n                    type: \"google.protobuf.Int32Value\",\n                    id: 12\n                  }\n                },\n                nested: {\n                  DocumentsTarget: {\n                    fields: {\n                      documents: {\n                        rule: \"repeated\",\n                        type: \"string\",\n                        id: 2\n                      }\n                    }\n                  },\n                  QueryTarget: {\n                    oneofs: {\n                      queryType: {\n                        oneof: [\"structuredQuery\"]\n                      }\n                    },\n                    fields: {\n                      parent: {\n                        type: \"string\",\n                        id: 1\n                      },\n                      structuredQuery: {\n                        type: \"StructuredQuery\",\n                        id: 2\n                      }\n                    }\n                  }\n                }\n              },\n              TargetChange: {\n                fields: {\n                  targetChangeType: {\n                    type: \"TargetChangeType\",\n                    id: 1\n                  },\n                  targetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 2\n                  },\n                  cause: {\n                    type: \"google.rpc.Status\",\n                    id: 3\n                  },\n                  resumeToken: {\n                    type: \"bytes\",\n                    id: 4\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 6\n                  }\n                },\n                nested: {\n                  TargetChangeType: {\n                    values: {\n                      NO_CHANGE: 0,\n                      ADD: 1,\n                      REMOVE: 2,\n                      CURRENT: 3,\n                      RESET: 4\n                    }\n                  }\n                }\n              },\n              ListCollectionIdsRequest: {\n                fields: {\n                  parent: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  pageSize: {\n                    type: \"int32\",\n                    id: 2\n                  },\n                  pageToken: {\n                    type: \"string\",\n                    id: 3\n                  }\n                }\n              },\n              ListCollectionIdsResponse: {\n                fields: {\n                  collectionIds: {\n                    rule: \"repeated\",\n                    type: \"string\",\n                    id: 1\n                  },\n                  nextPageToken: {\n                    type: \"string\",\n                    id: 2\n                  }\n                }\n              },\n              BatchWriteRequest: {\n                fields: {\n                  database: {\n                    type: \"string\",\n                    id: 1,\n                    options: {\n                      \"(google.api.field_behavior)\": \"REQUIRED\"\n                    }\n                  },\n                  writes: {\n                    rule: \"repeated\",\n                    type: \"Write\",\n                    id: 2\n                  },\n                  labels: {\n                    keyType: \"string\",\n                    type: \"string\",\n                    id: 3\n                  }\n                }\n              },\n              BatchWriteResponse: {\n                fields: {\n                  writeResults: {\n                    rule: \"repeated\",\n                    type: \"WriteResult\",\n                    id: 1\n                  },\n                  status: {\n                    rule: \"repeated\",\n                    type: \"google.rpc.Status\",\n                    id: 2\n                  }\n                }\n              },\n              StructuredQuery: {\n                fields: {\n                  select: {\n                    type: \"Projection\",\n                    id: 1\n                  },\n                  from: {\n                    rule: \"repeated\",\n                    type: \"CollectionSelector\",\n                    id: 2\n                  },\n                  where: {\n                    type: \"Filter\",\n                    id: 3\n                  },\n                  orderBy: {\n                    rule: \"repeated\",\n                    type: \"Order\",\n                    id: 4\n                  },\n                  startAt: {\n                    type: \"Cursor\",\n                    id: 7\n                  },\n                  endAt: {\n                    type: \"Cursor\",\n                    id: 8\n                  },\n                  offset: {\n                    type: \"int32\",\n                    id: 6\n                  },\n                  limit: {\n                    type: \"google.protobuf.Int32Value\",\n                    id: 5\n                  }\n                },\n                nested: {\n                  CollectionSelector: {\n                    fields: {\n                      collectionId: {\n                        type: \"string\",\n                        id: 2\n                      },\n                      allDescendants: {\n                        type: \"bool\",\n                        id: 3\n                      }\n                    }\n                  },\n                  Filter: {\n                    oneofs: {\n                      filterType: {\n                        oneof: [\"compositeFilter\", \"fieldFilter\", \"unaryFilter\"]\n                      }\n                    },\n                    fields: {\n                      compositeFilter: {\n                        type: \"CompositeFilter\",\n                        id: 1\n                      },\n                      fieldFilter: {\n                        type: \"FieldFilter\",\n                        id: 2\n                      },\n                      unaryFilter: {\n                        type: \"UnaryFilter\",\n                        id: 3\n                      }\n                    }\n                  },\n                  CompositeFilter: {\n                    fields: {\n                      op: {\n                        type: \"Operator\",\n                        id: 1\n                      },\n                      filters: {\n                        rule: \"repeated\",\n                        type: \"Filter\",\n                        id: 2\n                      }\n                    },\n                    nested: {\n                      Operator: {\n                        values: {\n                          OPERATOR_UNSPECIFIED: 0,\n                          AND: 1,\n                          OR: 2\n                        }\n                      }\n                    }\n                  },\n                  FieldFilter: {\n                    fields: {\n                      field: {\n                        type: \"FieldReference\",\n                        id: 1\n                      },\n                      op: {\n                        type: \"Operator\",\n                        id: 2\n                      },\n                      value: {\n                        type: \"Value\",\n                        id: 3\n                      }\n                    },\n                    nested: {\n                      Operator: {\n                        values: {\n                          OPERATOR_UNSPECIFIED: 0,\n                          LESS_THAN: 1,\n                          LESS_THAN_OR_EQUAL: 2,\n                          GREATER_THAN: 3,\n                          GREATER_THAN_OR_EQUAL: 4,\n                          EQUAL: 5,\n                          NOT_EQUAL: 6,\n                          ARRAY_CONTAINS: 7,\n                          IN: 8,\n                          ARRAY_CONTAINS_ANY: 9,\n                          NOT_IN: 10\n                        }\n                      }\n                    }\n                  },\n                  UnaryFilter: {\n                    oneofs: {\n                      operandType: {\n                        oneof: [\"field\"]\n                      }\n                    },\n                    fields: {\n                      op: {\n                        type: \"Operator\",\n                        id: 1\n                      },\n                      field: {\n                        type: \"FieldReference\",\n                        id: 2\n                      }\n                    },\n                    nested: {\n                      Operator: {\n                        values: {\n                          OPERATOR_UNSPECIFIED: 0,\n                          IS_NAN: 2,\n                          IS_NULL: 3,\n                          IS_NOT_NAN: 4,\n                          IS_NOT_NULL: 5\n                        }\n                      }\n                    }\n                  },\n                  Order: {\n                    fields: {\n                      field: {\n                        type: \"FieldReference\",\n                        id: 1\n                      },\n                      direction: {\n                        type: \"Direction\",\n                        id: 2\n                      }\n                    }\n                  },\n                  FieldReference: {\n                    fields: {\n                      fieldPath: {\n                        type: \"string\",\n                        id: 2\n                      }\n                    }\n                  },\n                  Projection: {\n                    fields: {\n                      fields: {\n                        rule: \"repeated\",\n                        type: \"FieldReference\",\n                        id: 2\n                      }\n                    }\n                  },\n                  Direction: {\n                    values: {\n                      DIRECTION_UNSPECIFIED: 0,\n                      ASCENDING: 1,\n                      DESCENDING: 2\n                    }\n                  }\n                }\n              },\n              StructuredAggregationQuery: {\n                oneofs: {\n                  queryType: {\n                    oneof: [\"structuredQuery\"]\n                  }\n                },\n                fields: {\n                  structuredQuery: {\n                    type: \"StructuredQuery\",\n                    id: 1\n                  },\n                  aggregations: {\n                    rule: \"repeated\",\n                    type: \"Aggregation\",\n                    id: 3\n                  }\n                },\n                nested: {\n                  Aggregation: {\n                    oneofs: {\n                      operator: {\n                        oneof: [\"count\", \"sum\", \"avg\"]\n                      }\n                    },\n                    fields: {\n                      count: {\n                        type: \"Count\",\n                        id: 1\n                      },\n                      sum: {\n                        type: \"Sum\",\n                        id: 2\n                      },\n                      avg: {\n                        type: \"Avg\",\n                        id: 3\n                      },\n                      alias: {\n                        type: \"string\",\n                        id: 7\n                      }\n                    },\n                    nested: {\n                      Count: {\n                        fields: {\n                          upTo: {\n                            type: \"google.protobuf.Int64Value\",\n                            id: 1\n                          }\n                        }\n                      },\n                      Sum: {\n                        fields: {\n                          field: {\n                            type: \"FieldReference\",\n                            id: 1\n                          }\n                        }\n                      },\n                      Avg: {\n                        fields: {\n                          field: {\n                            type: \"FieldReference\",\n                            id: 1\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              Cursor: {\n                fields: {\n                  values: {\n                    rule: \"repeated\",\n                    type: \"Value\",\n                    id: 1\n                  },\n                  before: {\n                    type: \"bool\",\n                    id: 2\n                  }\n                }\n              },\n              Write: {\n                oneofs: {\n                  operation: {\n                    oneof: [\"update\", \"delete\", \"verify\", \"transform\"]\n                  }\n                },\n                fields: {\n                  update: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  \"delete\": {\n                    type: \"string\",\n                    id: 2\n                  },\n                  verify: {\n                    type: \"string\",\n                    id: 5\n                  },\n                  transform: {\n                    type: \"DocumentTransform\",\n                    id: 6\n                  },\n                  updateMask: {\n                    type: \"DocumentMask\",\n                    id: 3\n                  },\n                  updateTransforms: {\n                    rule: \"repeated\",\n                    type: \"DocumentTransform.FieldTransform\",\n                    id: 7\n                  },\n                  currentDocument: {\n                    type: \"Precondition\",\n                    id: 4\n                  }\n                }\n              },\n              DocumentTransform: {\n                fields: {\n                  document: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  fieldTransforms: {\n                    rule: \"repeated\",\n                    type: \"FieldTransform\",\n                    id: 2\n                  }\n                },\n                nested: {\n                  FieldTransform: {\n                    oneofs: {\n                      transformType: {\n                        oneof: [\"setToServerValue\", \"increment\", \"maximum\", \"minimum\", \"appendMissingElements\", \"removeAllFromArray\"]\n                      }\n                    },\n                    fields: {\n                      fieldPath: {\n                        type: \"string\",\n                        id: 1\n                      },\n                      setToServerValue: {\n                        type: \"ServerValue\",\n                        id: 2\n                      },\n                      increment: {\n                        type: \"Value\",\n                        id: 3\n                      },\n                      maximum: {\n                        type: \"Value\",\n                        id: 4\n                      },\n                      minimum: {\n                        type: \"Value\",\n                        id: 5\n                      },\n                      appendMissingElements: {\n                        type: \"ArrayValue\",\n                        id: 6\n                      },\n                      removeAllFromArray: {\n                        type: \"ArrayValue\",\n                        id: 7\n                      }\n                    },\n                    nested: {\n                      ServerValue: {\n                        values: {\n                          SERVER_VALUE_UNSPECIFIED: 0,\n                          REQUEST_TIME: 1\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              WriteResult: {\n                fields: {\n                  updateTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 1\n                  },\n                  transformResults: {\n                    rule: \"repeated\",\n                    type: \"Value\",\n                    id: 2\n                  }\n                }\n              },\n              DocumentChange: {\n                fields: {\n                  document: {\n                    type: \"Document\",\n                    id: 1\n                  },\n                  targetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 5\n                  },\n                  removedTargetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 6\n                  }\n                }\n              },\n              DocumentDelete: {\n                fields: {\n                  document: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  removedTargetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 6\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              DocumentRemove: {\n                fields: {\n                  document: {\n                    type: \"string\",\n                    id: 1\n                  },\n                  removedTargetIds: {\n                    rule: \"repeated\",\n                    type: \"int32\",\n                    id: 2\n                  },\n                  readTime: {\n                    type: \"google.protobuf.Timestamp\",\n                    id: 4\n                  }\n                }\n              },\n              ExistenceFilter: {\n                fields: {\n                  targetId: {\n                    type: \"int32\",\n                    id: 1\n                  },\n                  count: {\n                    type: \"int32\",\n                    id: 2\n                  },\n                  unchangedNames: {\n                    type: \"BloomFilter\",\n                    id: 3\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      api: {\n        options: {\n          go_package: \"google.golang.org/genproto/googleapis/api/annotations;annotations\",\n          java_multiple_files: true,\n          java_outer_classname: \"HttpProto\",\n          java_package: \"com.google.api\",\n          objc_class_prefix: \"GAPI\",\n          cc_enable_arenas: true\n        },\n        nested: {\n          http: {\n            type: \"HttpRule\",\n            id: 72295728,\n            extend: \"google.protobuf.MethodOptions\"\n          },\n          Http: {\n            fields: {\n              rules: {\n                rule: \"repeated\",\n                type: \"HttpRule\",\n                id: 1\n              }\n            }\n          },\n          HttpRule: {\n            oneofs: {\n              pattern: {\n                oneof: [\"get\", \"put\", \"post\", \"delete\", \"patch\", \"custom\"]\n              }\n            },\n            fields: {\n              get: {\n                type: \"string\",\n                id: 2\n              },\n              put: {\n                type: \"string\",\n                id: 3\n              },\n              post: {\n                type: \"string\",\n                id: 4\n              },\n              \"delete\": {\n                type: \"string\",\n                id: 5\n              },\n              patch: {\n                type: \"string\",\n                id: 6\n              },\n              custom: {\n                type: \"CustomHttpPattern\",\n                id: 8\n              },\n              selector: {\n                type: \"string\",\n                id: 1\n              },\n              body: {\n                type: \"string\",\n                id: 7\n              },\n              additionalBindings: {\n                rule: \"repeated\",\n                type: \"HttpRule\",\n                id: 11\n              }\n            }\n          },\n          CustomHttpPattern: {\n            fields: {\n              kind: {\n                type: \"string\",\n                id: 1\n              },\n              path: {\n                type: \"string\",\n                id: 2\n              }\n            }\n          },\n          methodSignature: {\n            rule: \"repeated\",\n            type: \"string\",\n            id: 1051,\n            extend: \"google.protobuf.MethodOptions\"\n          },\n          defaultHost: {\n            type: \"string\",\n            id: 1049,\n            extend: \"google.protobuf.ServiceOptions\"\n          },\n          oauthScopes: {\n            type: \"string\",\n            id: 1050,\n            extend: \"google.protobuf.ServiceOptions\"\n          },\n          fieldBehavior: {\n            rule: \"repeated\",\n            type: \"google.api.FieldBehavior\",\n            id: 1052,\n            extend: \"google.protobuf.FieldOptions\"\n          },\n          FieldBehavior: {\n            values: {\n              FIELD_BEHAVIOR_UNSPECIFIED: 0,\n              OPTIONAL: 1,\n              REQUIRED: 2,\n              OUTPUT_ONLY: 3,\n              INPUT_ONLY: 4,\n              IMMUTABLE: 5,\n              UNORDERED_LIST: 6,\n              NON_EMPTY_DEFAULT: 7\n            }\n          }\n        }\n      },\n      type: {\n        options: {\n          cc_enable_arenas: true,\n          go_package: \"google.golang.org/genproto/googleapis/type/latlng;latlng\",\n          java_multiple_files: true,\n          java_outer_classname: \"LatLngProto\",\n          java_package: \"com.google.type\",\n          objc_class_prefix: \"GTP\"\n        },\n        nested: {\n          LatLng: {\n            fields: {\n              latitude: {\n                type: \"double\",\n                id: 1\n              },\n              longitude: {\n                type: \"double\",\n                id: 2\n              }\n            }\n          }\n        }\n      },\n      rpc: {\n        options: {\n          cc_enable_arenas: true,\n          go_package: \"google.golang.org/genproto/googleapis/rpc/status;status\",\n          java_multiple_files: true,\n          java_outer_classname: \"StatusProto\",\n          java_package: \"com.google.rpc\",\n          objc_class_prefix: \"RPC\"\n        },\n        nested: {\n          Status: {\n            fields: {\n              code: {\n                type: \"int32\",\n                id: 1\n              },\n              message: {\n                type: \"string\",\n                id: 2\n              },\n              details: {\n                rule: \"repeated\",\n                type: \"google.protobuf.Any\",\n                id: 3\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n};\nvar protos = {\n  nested: nested\n};\nvar protos$1 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  nested: nested,\n  'default': protos\n});\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Used by tests so we can match @grpc/proto-loader behavior. */\nconst protoLoaderOptions = {\n  longs: String,\n  enums: String,\n  defaults: true,\n  oneofs: false\n};\n/**\r\n * Loads the protocol buffer definitions for Firestore.\r\n *\r\n * @returns The GrpcObject representing our protos.\r\n */\nfunction loadProtos() {\n  const packageDefinition = protoLoader.fromJSON(protos$1, protoLoaderOptions);\n  return grpc.loadPackageDefinition(packageDefinition);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** Loads the GRPC stack */\nfunction newConnection(databaseInfo) {\n  const protos = loadProtos();\n  return new GrpcConnection(protos, databaseInfo);\n}\n/** Return the Platform-specific connectivity monitor. */\nfunction newConnectivityMonitor() {\n  return new NoopConnectivityMonitor();\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/** The Platform's 'window' implementation or null if not available. */\nfunction getWindow() {\n  if (process.env.USE_MOCK_PERSISTENCE === 'YES') {\n    // eslint-disable-next-line no-restricted-globals\n    return window;\n  }\n  return null;\n}\n/** The Platform's 'document' implementation or null if not available. */\nfunction getDocument() {\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction newSerializer(databaseId) {\n  return new JsonProtoSerializer(databaseId, /* useProto3Json= */false);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$8 = 'ExponentialBackoff';\n/**\r\n * Initial backoff time in milliseconds after an error.\r\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\r\n */\nconst DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\nconst DEFAULT_BACKOFF_FACTOR = 1.5;\n/** Maximum backoff time in milliseconds */\nconst DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/**\r\n * A helper for running delayed tasks following an exponential backoff curve\r\n * between attempts.\r\n *\r\n * Each delay is made up of a \"base\" delay which follows the exponential\r\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\r\n * base delay. This prevents clients from accidentally synchronizing their\r\n * delays causing spikes of load to the backend.\r\n */\nclass ExponentialBackoff {\n  constructor(\n  /**\r\n   * The AsyncQueue to run backoff operations on.\r\n   */\n  queue,\n  /**\r\n   * The ID to use when scheduling backoff operations on the AsyncQueue.\r\n   */\n  timerId,\n  /**\r\n   * The initial delay (used as the base delay on the first retry attempt).\r\n   * Note that jitter will still be applied, so the actual delay could be as\r\n   * little as 0.5*initialDelayMs.\r\n   */\n  initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS,\n  /**\r\n   * The multiplier to use to determine the extended base delay after each\r\n   * attempt.\r\n   */\n  backoffFactor = DEFAULT_BACKOFF_FACTOR,\n  /**\r\n   * The maximum base delay after which no further backoff is performed.\r\n   * Note that jitter will still be applied, so the actual delay could be as\r\n   * much as 1.5*maxDelayMs.\r\n   */\n  maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS) {\n    this.queue = queue;\n    this.timerId = timerId;\n    this.initialDelayMs = initialDelayMs;\n    this.backoffFactor = backoffFactor;\n    this.maxDelayMs = maxDelayMs;\n    this.currentBaseMs = 0;\n    this.timerPromise = null;\n    /** The last backoff attempt, as epoch milliseconds. */\n    this.lastAttemptTime = Date.now();\n    this.reset();\n  }\n  /**\r\n   * Resets the backoff delay.\r\n   *\r\n   * The very next backoffAndWait() will have no delay. If it is called again\r\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\r\n   * subsequent ones will increase according to the backoffFactor.\r\n   */\n  reset() {\n    this.currentBaseMs = 0;\n  }\n  /**\r\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\r\n   * RESOURCE_EXHAUSTED error).\r\n   */\n  resetToMax() {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n  /**\r\n   * Returns a promise that resolves after currentDelayMs, and increases the\r\n   * delay for any subsequent attempts. If there was a pending backoff operation\r\n   * already, it will be canceled.\r\n   */\n  backoffAndRun(op) {\n    // Cancel any pending backoff operation.\n    this.cancel();\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());\n    // Guard against lastAttemptTime being in the future due to a clock change.\n    const delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);\n    // Guard against the backoff delay already being past.\n    const remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);\n    if (remainingDelayMs > 0) {\n      logDebug(LOG_TAG$8, `Backing off for ${remainingDelayMs} ms ` + `(base delay: ${this.currentBaseMs} ms, ` + `delay with jitter: ${desiredDelayWithJitterMs} ms, ` + `last attempt: ${delaySoFarMs} ms ago)`);\n    }\n    this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, () => {\n      this.lastAttemptTime = Date.now();\n      return op();\n    });\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    if (this.currentBaseMs < this.initialDelayMs) {\n      this.currentBaseMs = this.initialDelayMs;\n    }\n    if (this.currentBaseMs > this.maxDelayMs) {\n      this.currentBaseMs = this.maxDelayMs;\n    }\n  }\n  skipBackoff() {\n    if (this.timerPromise !== null) {\n      this.timerPromise.skipDelay();\n      this.timerPromise = null;\n    }\n  }\n  cancel() {\n    if (this.timerPromise !== null) {\n      this.timerPromise.cancel();\n      this.timerPromise = null;\n    }\n  }\n  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */\n  jitterDelayMs() {\n    return (Math.random() - 0.5) * this.currentBaseMs;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$7 = 'PersistentStream';\n/** The time a stream stays open after it is marked idle. */\nconst IDLE_TIMEOUT_MS = 60 * 1000;\n/** The time a stream stays open until we consider it healthy. */\nconst HEALTHY_TIMEOUT_MS = 10 * 1000;\n/**\r\n * A PersistentStream is an abstract base class that represents a streaming RPC\r\n * to the Firestore backend. It's built on top of the connections own support\r\n * for streaming RPCs, and adds several critical features for our clients:\r\n *\r\n *   - Exponential backoff on failure\r\n *   - Authentication via CredentialsProvider\r\n *   - Dispatching all callbacks into the shared worker queue\r\n *   - Closing idle streams after 60 seconds of inactivity\r\n *\r\n * Subclasses of PersistentStream implement serialization of models to and\r\n * from the JSON representation of the protocol buffers for a specific\r\n * streaming RPC.\r\n *\r\n * ## Starting and Stopping\r\n *\r\n * Streaming RPCs are stateful and need to be start()ed before messages can\r\n * be sent and received. The PersistentStream will call the onOpen() function\r\n * of the listener once the stream is ready to accept requests.\r\n *\r\n * Should a start() fail, PersistentStream will call the registered onClose()\r\n * listener with a FirestoreError indicating what went wrong.\r\n *\r\n * A PersistentStream can be started and stopped repeatedly.\r\n *\r\n * Generic types:\r\n *  SendType: The type of the outgoing message of the underlying\r\n *    connection stream\r\n *  ReceiveType: The type of the incoming message of the underlying\r\n *    connection stream\r\n *  ListenerType: The type of the listener that will be used for callbacks\r\n */\nclass PersistentStream {\n  constructor(queue, connectionTimerId, idleTimerId, healthTimerId, connection, authCredentialsProvider, appCheckCredentialsProvider, listener) {\n    this.queue = queue;\n    this.idleTimerId = idleTimerId;\n    this.healthTimerId = healthTimerId;\n    this.connection = connection;\n    this.authCredentialsProvider = authCredentialsProvider;\n    this.appCheckCredentialsProvider = appCheckCredentialsProvider;\n    this.listener = listener;\n    this.state = 0 /* PersistentStreamState.Initial */;\n    /**\r\n     * A close count that's incremented every time the stream is closed; used by\r\n     * getCloseGuardedDispatcher() to invalidate callbacks that happen after\r\n     * close.\r\n     */\n    this.closeCount = 0;\n    this.idleTimer = null;\n    this.healthCheck = null;\n    this.stream = null;\n    /**\r\n     * Count of response messages received.\r\n     */\n    this.responseCount = 0;\n    this.backoff = new ExponentialBackoff(queue, connectionTimerId);\n  }\n  /**\r\n   * Returns true if start() has been called and no error has occurred. True\r\n   * indicates the stream is open or in the process of opening (which\r\n   * encompasses respecting backoff, getting auth tokens, and starting the\r\n   * actual RPC). Use isOpen() to determine if the stream is open and ready for\r\n   * outbound requests.\r\n   */\n  isStarted() {\n    return this.state === 1 /* PersistentStreamState.Starting */ || this.state === 5 /* PersistentStreamState.Backoff */ || this.isOpen();\n  }\n  /**\r\n   * Returns true if the underlying RPC is open (the onOpen() listener has been\r\n   * called) and the stream is ready for outbound requests.\r\n   */\n  isOpen() {\n    return this.state === 2 /* PersistentStreamState.Open */ || this.state === 3 /* PersistentStreamState.Healthy */;\n  }\n  /**\r\n   * Starts the RPC. Only allowed if isStarted() returns false. The stream is\r\n   * not immediately ready for use: onOpen() will be invoked when the RPC is\r\n   * ready for outbound requests, at which point isOpen() will return true.\r\n   *\r\n   * When start returns, isStarted() will return true.\r\n   */\n  start() {\n    this.responseCount = 0;\n    if (this.state === 4 /* PersistentStreamState.Error */) {\n      this.performBackoff();\n      return;\n    }\n    this.auth();\n  }\n  /**\r\n   * Stops the RPC. This call is idempotent and allowed regardless of the\r\n   * current isStarted() state.\r\n   *\r\n   * When stop returns, isStarted() and isOpen() will both return false.\r\n   */\n  async stop() {\n    if (this.isStarted()) {\n      await this.close(0 /* PersistentStreamState.Initial */);\n    }\n  }\n  /**\r\n   * After an error the stream will usually back off on the next attempt to\r\n   * start it. If the error warrants an immediate restart of the stream, the\r\n   * sender can use this to indicate that the receiver should not back off.\r\n   *\r\n   * Each error will call the onClose() listener. That function can decide to\r\n   * inhibit backoff if required.\r\n   */\n  inhibitBackoff() {\n    this.state = 0 /* PersistentStreamState.Initial */;\n    this.backoff.reset();\n  }\n  /**\r\n   * Marks this stream as idle. If no further actions are performed on the\r\n   * stream for one minute, the stream will automatically close itself and\r\n   * notify the stream's onClose() handler with Status.OK. The stream will then\r\n   * be in a !isStarted() state, requiring the caller to start the stream again\r\n   * before further use.\r\n   *\r\n   * Only streams that are in state 'Open' can be marked idle, as all other\r\n   * states imply pending network operations.\r\n   */\n  markIdle() {\n    // Starts the idle time if we are in state 'Open' and are not yet already\n    // running a timer (in which case the previous idle timeout still applies).\n    if (this.isOpen() && this.idleTimer === null) {\n      this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, () => this.handleIdleCloseTimer());\n    }\n  }\n  /** Sends a message to the underlying stream. */\n  sendRequest(msg) {\n    this.cancelIdleCheck();\n    this.stream.send(msg);\n  }\n  /** Called by the idle timer when the stream should close due to inactivity. */\n  async handleIdleCloseTimer() {\n    if (this.isOpen()) {\n      // When timing out an idle stream there's no reason to force the stream into backoff when\n      // it restarts so set the stream state to Initial instead of Error.\n      return this.close(0 /* PersistentStreamState.Initial */);\n    }\n  }\n  /** Marks the stream as active again. */\n  cancelIdleCheck() {\n    if (this.idleTimer) {\n      this.idleTimer.cancel();\n      this.idleTimer = null;\n    }\n  }\n  /** Cancels the health check delayed operation. */\n  cancelHealthCheck() {\n    if (this.healthCheck) {\n      this.healthCheck.cancel();\n      this.healthCheck = null;\n    }\n  }\n  /**\r\n   * Closes the stream and cleans up as necessary:\r\n   *\r\n   * * closes the underlying GRPC stream;\r\n   * * calls the onClose handler with the given 'error';\r\n   * * sets internal stream state to 'finalState';\r\n   * * adjusts the backoff timer based on the error\r\n   *\r\n   * A new stream can be opened by calling start().\r\n   *\r\n   * @param finalState - the intended state of the stream after closing.\r\n   * @param error - the error the connection was closed with.\r\n   */\n  async close(finalState, error) {\n    // Cancel any outstanding timers (they're guaranteed not to execute).\n    this.cancelIdleCheck();\n    this.cancelHealthCheck();\n    this.backoff.cancel();\n    // Invalidates any stream-related callbacks (e.g. from auth or the\n    // underlying stream), guaranteeing they won't execute.\n    this.closeCount++;\n    if (finalState !== 4 /* PersistentStreamState.Error */) {\n      // If this is an intentional close ensure we don't delay our next connection attempt.\n      this.backoff.reset();\n    } else if (error && error.code === Code.RESOURCE_EXHAUSTED) {\n      // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)\n      logError(error.toString());\n      logError('Using maximum backoff delay to prevent overloading the backend.');\n      this.backoff.resetToMax();\n    } else if (error && error.code === Code.UNAUTHENTICATED && this.state !== 3 /* PersistentStreamState.Healthy */) {\n      // \"unauthenticated\" error means the token was rejected. This should rarely\n      // happen since both Auth and AppCheck ensure a sufficient TTL when we\n      // request a token. If a user manually resets their system clock this can\n      // fail, however. In this case, we should get a Code.UNAUTHENTICATED error\n      // before we received the first message and we need to invalidate the token\n      // to ensure that we fetch a new token.\n      this.authCredentialsProvider.invalidateToken();\n      this.appCheckCredentialsProvider.invalidateToken();\n    }\n    // Clean up the underlying stream because we are no longer interested in events.\n    if (this.stream !== null) {\n      this.tearDown();\n      this.stream.close();\n      this.stream = null;\n    }\n    // This state must be assigned before calling onClose() to allow the callback to\n    // inhibit backoff or otherwise manipulate the state in its non-started state.\n    this.state = finalState;\n    // Notify the listener that the stream closed.\n    await this.listener.onClose(error);\n  }\n  /**\r\n   * Can be overridden to perform additional cleanup before the stream is closed.\r\n   * Calling super.tearDown() is not required.\r\n   */\n  tearDown() {}\n  auth() {\n    this.state = 1 /* PersistentStreamState.Starting */;\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n    // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.\n    const closeCount = this.closeCount;\n    Promise.all([this.authCredentialsProvider.getToken(), this.appCheckCredentialsProvider.getToken()]).then(([authToken, appCheckToken]) => {\n      // Stream can be stopped while waiting for authentication.\n      // TODO(mikelehen): We really should just use dispatchIfNotClosed\n      // and let this dispatch onto the queue, but that opened a spec test can\n      // of worms that I don't want to deal with in this PR.\n      if (this.closeCount === closeCount) {\n        // Normally we'd have to schedule the callback on the AsyncQueue.\n        // However, the following calls are safe to be called outside the\n        // AsyncQueue since they don't chain asynchronous calls\n        this.startStream(authToken, appCheckToken);\n      }\n    }, error => {\n      dispatchIfNotClosed(() => {\n        const rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);\n        return this.handleStreamClose(rpcError);\n      });\n    });\n  }\n  startStream(authToken, appCheckToken) {\n    const dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);\n    this.stream = this.startRpc(authToken, appCheckToken);\n    this.stream.onConnected(() => {\n      dispatchIfNotClosed(() => this.listener.onConnected());\n    });\n    this.stream.onOpen(() => {\n      dispatchIfNotClosed(() => {\n        this.state = 2 /* PersistentStreamState.Open */;\n        this.healthCheck = this.queue.enqueueAfterDelay(this.healthTimerId, HEALTHY_TIMEOUT_MS, () => {\n          if (this.isOpen()) {\n            this.state = 3 /* PersistentStreamState.Healthy */;\n          }\n          return Promise.resolve();\n        });\n        return this.listener.onOpen();\n      });\n    });\n    this.stream.onClose(error => {\n      dispatchIfNotClosed(() => {\n        return this.handleStreamClose(error);\n      });\n    });\n    this.stream.onMessage(msg => {\n      dispatchIfNotClosed(() => {\n        if (++this.responseCount === 1) {\n          return this.onFirst(msg);\n        } else {\n          return this.onNext(msg);\n        }\n      });\n    });\n  }\n  performBackoff() {\n    this.state = 5 /* PersistentStreamState.Backoff */;\n    this.backoff.backoffAndRun(async () => {\n      this.state = 0 /* PersistentStreamState.Initial */;\n      this.start();\n    });\n  }\n  // Visible for tests\n  handleStreamClose(error) {\n    logDebug(LOG_TAG$7, `close with error: ${error}`);\n    this.stream = null;\n    // In theory the stream could close cleanly, however, in our current model\n    // we never expect this to happen because if we stop a stream ourselves,\n    // this callback will never be called. To prevent cases where we retry\n    // without a backoff accidentally, we set the stream to error in all cases.\n    return this.close(4 /* PersistentStreamState.Error */, error);\n  }\n  /**\r\n   * Returns a \"dispatcher\" function that dispatches operations onto the\r\n   * AsyncQueue but only runs them if closeCount remains unchanged. This allows\r\n   * us to turn auth / stream callbacks into no-ops if the stream is closed /\r\n   * re-opened, etc.\r\n   */\n  getCloseGuardedDispatcher(startCloseCount) {\n    return fn => {\n      this.queue.enqueueAndForget(() => {\n        if (this.closeCount === startCloseCount) {\n          return fn();\n        } else {\n          logDebug(LOG_TAG$7, 'stream callback skipped by getCloseGuardedDispatcher.');\n          return Promise.resolve();\n        }\n      });\n    };\n  }\n}\n/**\r\n * A PersistentStream that implements the Listen RPC.\r\n *\r\n * Once the Listen stream has called the onOpen() listener, any number of\r\n * listen() and unlisten() calls can be made to control what changes will be\r\n * sent from the server for ListenResponses.\r\n */\nclass PersistentListenStream extends PersistentStream {\n  constructor(queue, connection, authCredentials, appCheckCredentials, serializer, listener) {\n    super(queue, \"listen_stream_connection_backoff\" /* TimerId.ListenStreamConnectionBackoff */, \"listen_stream_idle\" /* TimerId.ListenStreamIdle */, \"health_check_timeout\" /* TimerId.HealthCheckTimeout */, connection, authCredentials, appCheckCredentials, listener);\n    this.serializer = serializer;\n  }\n  startRpc(authToken, appCheckToken) {\n    return this.connection.openStream('Listen', authToken, appCheckToken);\n  }\n  onFirst(watchChangeProto) {\n    return this.onNext(watchChangeProto);\n  }\n  onNext(watchChangeProto) {\n    // A successful response means the stream is healthy\n    this.backoff.reset();\n    const watchChange = fromWatchChange(this.serializer, watchChangeProto);\n    const snapshot = versionFromListenResponse(watchChangeProto);\n    return this.listener.onWatchChange(watchChange, snapshot);\n  }\n  /**\r\n   * Registers interest in the results of the given target. If the target\r\n   * includes a resumeToken it will be included in the request. Results that\r\n   * affect the target will be streamed back as WatchChange messages that\r\n   * reference the targetId.\r\n   */\n  watch(targetData) {\n    const request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.addTarget = toTarget(this.serializer, targetData);\n    const labels = toListenRequestLabels(this.serializer, targetData);\n    if (labels) {\n      request.labels = labels;\n    }\n    this.sendRequest(request);\n  }\n  /**\r\n   * Unregisters interest in the results of the target associated with the\r\n   * given targetId.\r\n   */\n  unwatch(targetId) {\n    const request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    request.removeTarget = targetId;\n    this.sendRequest(request);\n  }\n}\n/**\r\n * A Stream that implements the Write RPC.\r\n *\r\n * The Write RPC requires the caller to maintain special streamToken\r\n * state in between calls, to help the server understand which responses the\r\n * client has processed by the time the next request is made. Every response\r\n * will contain a streamToken; this value must be passed to the next\r\n * request.\r\n *\r\n * After calling start() on this stream, the next request must be a handshake,\r\n * containing whatever streamToken is on hand. Once a response to this\r\n * request is received, all pending mutations may be submitted. When\r\n * submitting multiple batches of mutations at the same time, it's\r\n * okay to use the same streamToken for the calls to writeMutations.\r\n *\r\n * TODO(b/33271235): Use proto types\r\n */\nclass PersistentWriteStream extends PersistentStream {\n  constructor(queue, connection, authCredentials, appCheckCredentials, serializer, listener) {\n    super(queue, \"write_stream_connection_backoff\" /* TimerId.WriteStreamConnectionBackoff */, \"write_stream_idle\" /* TimerId.WriteStreamIdle */, \"health_check_timeout\" /* TimerId.HealthCheckTimeout */, connection, authCredentials, appCheckCredentials, listener);\n    this.serializer = serializer;\n  }\n  /**\r\n   * Tracks whether or not a handshake has been successfully exchanged and\r\n   * the stream is ready to accept mutations.\r\n   */\n  get handshakeComplete() {\n    return this.responseCount > 0;\n  }\n  // Override of PersistentStream.start\n  start() {\n    this.lastStreamToken = undefined;\n    super.start();\n  }\n  tearDown() {\n    if (this.handshakeComplete) {\n      this.writeMutations([]);\n    }\n  }\n  startRpc(authToken, appCheckToken) {\n    return this.connection.openStream('Write', authToken, appCheckToken);\n  }\n  onFirst(responseProto) {\n    // Always capture the last stream token.\n    hardAssert(!!responseProto.streamToken);\n    this.lastStreamToken = responseProto.streamToken;\n    // The first response is always the handshake response\n    hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);\n    return this.listener.onHandshakeComplete();\n  }\n  onNext(responseProto) {\n    // Always capture the last stream token.\n    hardAssert(!!responseProto.streamToken);\n    this.lastStreamToken = responseProto.streamToken;\n    // A successful first write response means the stream is healthy,\n    // Note, that we could consider a successful handshake healthy, however,\n    // the write itself might be causing an error we want to back off from.\n    this.backoff.reset();\n    const results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);\n    const commitVersion = fromVersion(responseProto.commitTime);\n    return this.listener.onMutationResult(commitVersion, results);\n  }\n  /**\r\n   * Sends an initial streamToken to the server, performing the handshake\r\n   * required to make the StreamingWrite RPC work. Subsequent\r\n   * calls should wait until onHandshakeComplete was called.\r\n   */\n  writeHandshake() {\n    // TODO(dimond): Support stream resumption. We intentionally do not set the\n    // stream token on the handshake, ignoring any stream token we might have.\n    const request = {};\n    request.database = getEncodedDatabaseId(this.serializer);\n    this.sendRequest(request);\n  }\n  /** Sends a group of mutations to the Firestore backend to apply. */\n  writeMutations(mutations) {\n    const request = {\n      streamToken: this.lastStreamToken,\n      writes: mutations.map(mutation => toMutation(this.serializer, mutation))\n    };\n    this.sendRequest(request);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Datastore and its related methods are a wrapper around the external Google\r\n * Cloud Datastore grpc API, which provides an interface that is more convenient\r\n * for the rest of the client SDK architecture to consume.\r\n */\nclass Datastore {}\n/**\r\n * An implementation of Datastore that exposes additional state for internal\r\n * consumption.\r\n */\nclass DatastoreImpl extends Datastore {\n  constructor(authCredentials, appCheckCredentials, connection, serializer) {\n    super();\n    this.authCredentials = authCredentials;\n    this.appCheckCredentials = appCheckCredentials;\n    this.connection = connection;\n    this.serializer = serializer;\n    this.terminated = false;\n  }\n  verifyInitialized() {\n    if (this.terminated) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\n    }\n  }\n  /** Invokes the provided RPC with auth and AppCheck tokens. */\n  invokeRPC(rpcName, databaseId, resourcePath, request) {\n    this.verifyInitialized();\n    return Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([authToken, appCheckToken]) => {\n      return this.connection.invokeRPC(rpcName, toResourcePath(databaseId, resourcePath), request, authToken, appCheckToken);\n    }).catch(error => {\n      if (error.name === 'FirebaseError') {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.authCredentials.invalidateToken();\n          this.appCheckCredentials.invalidateToken();\n        }\n        throw error;\n      } else {\n        throw new FirestoreError(Code.UNKNOWN, error.toString());\n      }\n    });\n  }\n  /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */\n  invokeStreamingRPC(rpcName, databaseId, resourcePath, request, expectedResponseCount) {\n    this.verifyInitialized();\n    return Promise.all([this.authCredentials.getToken(), this.appCheckCredentials.getToken()]).then(([authToken, appCheckToken]) => {\n      return this.connection.invokeStreamingRPC(rpcName, toResourcePath(databaseId, resourcePath), request, authToken, appCheckToken, expectedResponseCount);\n    }).catch(error => {\n      if (error.name === 'FirebaseError') {\n        if (error.code === Code.UNAUTHENTICATED) {\n          this.authCredentials.invalidateToken();\n          this.appCheckCredentials.invalidateToken();\n        }\n        throw error;\n      } else {\n        throw new FirestoreError(Code.UNKNOWN, error.toString());\n      }\n    });\n  }\n  terminate() {\n    this.terminated = true;\n    this.connection.terminate();\n  }\n}\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nfunction newDatastore(authCredentials, appCheckCredentials, connection, serializer) {\n  return new DatastoreImpl(authCredentials, appCheckCredentials, connection, serializer);\n}\nasync function invokeCommitRpc(datastore, mutations) {\n  const datastoreImpl = debugCast(datastore);\n  const request = {\n    writes: mutations.map(m => toMutation(datastoreImpl.serializer, m))\n  };\n  await datastoreImpl.invokeRPC('Commit', datastoreImpl.serializer.databaseId, ResourcePath.emptyPath(), request);\n}\nasync function invokeBatchGetDocumentsRpc(datastore, keys) {\n  const datastoreImpl = debugCast(datastore);\n  const request = {\n    documents: keys.map(k => toName(datastoreImpl.serializer, k))\n  };\n  const response = await datastoreImpl.invokeStreamingRPC('BatchGetDocuments', datastoreImpl.serializer.databaseId, ResourcePath.emptyPath(), request, keys.length);\n  const docs = new Map();\n  response.forEach(proto => {\n    const doc = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);\n    docs.set(doc.key.toString(), doc);\n  });\n  const result = [];\n  keys.forEach(key => {\n    const doc = docs.get(key.toString());\n    hardAssert(!!doc);\n    result.push(doc);\n  });\n  return result;\n}\nasync function invokeRunAggregationQueryRpc(datastore, query, aggregates) {\n  var _a;\n  const datastoreImpl = debugCast(datastore);\n  const {\n    request,\n    aliasMap,\n    parent\n  } = toRunAggregationQueryRequest(datastoreImpl.serializer, queryToAggregateTarget(query), aggregates);\n  if (!datastoreImpl.connection.shouldResourcePathBeIncludedInRequest) {\n    delete request.parent;\n  }\n  const response = await datastoreImpl.invokeStreamingRPC('RunAggregationQuery', datastoreImpl.serializer.databaseId, parent, request, /*expectedResponseCount=*/1);\n  // Omit RunAggregationQueryResponse that only contain readTimes.\n  const filteredResult = response.filter(proto => !!proto.result);\n  hardAssert(filteredResult.length === 1);\n  // Remap the short-form aliases that were sent to the server\n  // to the client-side aliases. Users will access the results\n  // using the client-side alias.\n  const unmappedAggregateFields = (_a = filteredResult[0].result) === null || _a === void 0 ? void 0 : _a.aggregateFields;\n  const remappedFields = Object.keys(unmappedAggregateFields).reduce((accumulator, key) => {\n    accumulator[aliasMap[key]] = unmappedAggregateFields[key];\n    return accumulator;\n  }, {});\n  return remappedFields;\n}\nfunction newPersistentWriteStream(datastore, queue, listener) {\n  const datastoreImpl = debugCast(datastore);\n  datastoreImpl.verifyInitialized();\n  return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.authCredentials, datastoreImpl.appCheckCredentials, datastoreImpl.serializer, listener);\n}\nfunction newPersistentWatchStream(datastore, queue, listener) {\n  const datastoreImpl = debugCast(datastore);\n  datastoreImpl.verifyInitialized();\n  return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.authCredentials, datastoreImpl.appCheckCredentials, datastoreImpl.serializer, listener);\n}\n\n/**\r\n * @license\r\n * Copyright 2018 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$6 = 'OnlineStateTracker';\n// To deal with transient failures, we allow multiple stream attempts before\n// giving up and transitioning from OnlineState.Unknown to Offline.\n// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.\n// @jdimond thinks that bug is sufficiently fixed so that we can set this back\n// to 1. If that works okay, we could potentially remove this logic entirely.\nconst MAX_WATCH_STREAM_FAILURES = 1;\n// To deal with stream attempts that don't succeed or fail in a timely manner,\n// we have a timeout for OnlineState to reach Online or Offline.\n// If the timeout is reached, we transition to Offline rather than waiting\n// indefinitely.\nconst ONLINE_STATE_TIMEOUT_MS = 10 * 1000;\n/**\r\n * A component used by the RemoteStore to track the OnlineState (that is,\r\n * whether or not the client as a whole should be considered to be online or\r\n * offline), implementing the appropriate heuristics.\r\n *\r\n * In particular, when the client is trying to connect to the backend, we\r\n * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for\r\n * a connection to succeed. If we have too many failures or the timeout elapses,\r\n * then we set the OnlineState to Offline, and the client will behave as if\r\n * it is offline (get()s will return cached data, etc.).\r\n */\nclass OnlineStateTracker {\n  constructor(asyncQueue, onlineStateHandler) {\n    this.asyncQueue = asyncQueue;\n    this.onlineStateHandler = onlineStateHandler;\n    /** The current OnlineState. */\n    this.state = \"Unknown\" /* OnlineState.Unknown */;\n    /**\r\n     * A count of consecutive failures to open the stream. If it reaches the\r\n     * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to\r\n     * Offline.\r\n     */\n    this.watchStreamFailures = 0;\n    /**\r\n     * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we\r\n     * transition from OnlineState.Unknown to OnlineState.Offline without waiting\r\n     * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).\r\n     */\n    this.onlineStateTimer = null;\n    /**\r\n     * Whether the client should log a warning message if it fails to connect to\r\n     * the backend (initially true, cleared after a successful stream, or if we've\r\n     * logged the message already).\r\n     */\n    this.shouldWarnClientIsOffline = true;\n  }\n  /**\r\n   * Called by RemoteStore when a watch stream is started (including on each\r\n   * backoff attempt).\r\n   *\r\n   * If this is the first attempt, it sets the OnlineState to Unknown and starts\r\n   * the onlineStateTimer.\r\n   */\n  handleWatchStreamStart() {\n    if (this.watchStreamFailures === 0) {\n      this.setAndBroadcast(\"Unknown\" /* OnlineState.Unknown */);\n      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(\"online_state_timeout\" /* TimerId.OnlineStateTimeout */, ONLINE_STATE_TIMEOUT_MS, () => {\n        this.onlineStateTimer = null;\n        this.logClientOfflineWarningIfNecessary(`Backend didn't respond within ${ONLINE_STATE_TIMEOUT_MS / 1000} ` + `seconds.`);\n        this.setAndBroadcast(\"Offline\" /* OnlineState.Offline */);\n        // NOTE: handleWatchStreamFailure() will continue to increment\n        // watchStreamFailures even though we are already marked Offline,\n        // but this is non-harmful.\n        return Promise.resolve();\n      });\n    }\n  }\n  /**\r\n   * Updates our OnlineState as appropriate after the watch stream reports a\r\n   * failure. The first failure moves us to the 'Unknown' state. We then may\r\n   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we\r\n   * actually transition to the 'Offline' state.\r\n   */\n  handleWatchStreamFailure(error) {\n    if (this.state === \"Online\" /* OnlineState.Online */) {\n      this.setAndBroadcast(\"Unknown\" /* OnlineState.Unknown */);\n    } else {\n      this.watchStreamFailures++;\n      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {\n        this.clearOnlineStateTimer();\n        this.logClientOfflineWarningIfNecessary(`Connection failed ${MAX_WATCH_STREAM_FAILURES} ` + `times. Most recent error: ${error.toString()}`);\n        this.setAndBroadcast(\"Offline\" /* OnlineState.Offline */);\n      }\n    }\n  }\n  /**\r\n   * Explicitly sets the OnlineState to the specified state.\r\n   *\r\n   * Note that this resets our timers / failure counters, etc. used by our\r\n   * Offline heuristics, so must not be used in place of\r\n   * handleWatchStreamStart() and handleWatchStreamFailure().\r\n   */\n  set(newState) {\n    this.clearOnlineStateTimer();\n    this.watchStreamFailures = 0;\n    if (newState === \"Online\" /* OnlineState.Online */) {\n      // We've connected to watch at least once. Don't warn the developer\n      // about being offline going forward.\n      this.shouldWarnClientIsOffline = false;\n    }\n    this.setAndBroadcast(newState);\n  }\n  setAndBroadcast(newState) {\n    if (newState !== this.state) {\n      this.state = newState;\n      this.onlineStateHandler(newState);\n    }\n  }\n  logClientOfflineWarningIfNecessary(details) {\n    const message = `Could not reach Cloud Firestore backend. ${details}\\n` + `This typically indicates that your device does not have a healthy ` + `Internet connection at the moment. The client will operate in offline ` + `mode until it is able to successfully connect to the backend.`;\n    if (this.shouldWarnClientIsOffline) {\n      logError(message);\n      this.shouldWarnClientIsOffline = false;\n    } else {\n      logDebug(LOG_TAG$6, message);\n    }\n  }\n  clearOnlineStateTimer() {\n    if (this.onlineStateTimer !== null) {\n      this.onlineStateTimer.cancel();\n      this.onlineStateTimer = null;\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$5 = 'RemoteStore';\n// TODO(b/35853402): Negotiate this with the stream.\nconst MAX_PENDING_WRITES = 10;\nclass RemoteStoreImpl {\n  constructor(\n  /**\r\n   * The local store, used to fill the write pipeline with outbound mutations.\r\n   */\n  localStore, /** The client-side proxy for interacting with the backend. */\n  datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\n    this.localStore = localStore;\n    this.datastore = datastore;\n    this.asyncQueue = asyncQueue;\n    this.remoteSyncer = {};\n    /**\r\n     * A list of up to MAX_PENDING_WRITES writes that we have fetched from the\r\n     * LocalStore via fillWritePipeline() and have or will send to the write\r\n     * stream.\r\n     *\r\n     * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or\r\n     * restart the write stream. When the stream is established the writes in the\r\n     * pipeline will be sent in order.\r\n     *\r\n     * Writes remain in writePipeline until they are acknowledged by the backend\r\n     * and thus will automatically be re-sent if the stream is interrupted /\r\n     * restarted before they're acknowledged.\r\n     *\r\n     * Write responses from the backend are linked to their originating request\r\n     * purely based on order, and so we can just shift() writes from the front of\r\n     * the writePipeline as we receive responses.\r\n     */\n    this.writePipeline = [];\n    /**\r\n     * A mapping of watched targets that the client cares about tracking and the\r\n     * user has explicitly called a 'listen' for this target.\r\n     *\r\n     * These targets may or may not have been sent to or acknowledged by the\r\n     * server. On re-establishing the listen stream, these targets should be sent\r\n     * to the server. The targets removed with unlistens are removed eagerly\r\n     * without waiting for confirmation from the listen stream.\r\n     */\n    this.listenTargets = new Map();\n    /**\r\n     * A set of reasons for why the RemoteStore may be offline. If empty, the\r\n     * RemoteStore may start its network connections.\r\n     */\n    this.offlineCauses = new Set();\n    /**\r\n     * Event handlers that get called when the network is disabled or enabled.\r\n     *\r\n     * PORTING NOTE: These functions are used on the Web client to create the\r\n     * underlying streams (to support tree-shakeable streams). On Android and iOS,\r\n     * the streams are created during construction of RemoteStore.\r\n     */\n    this.onNetworkStatusChange = [];\n    this.connectivityMonitor = connectivityMonitor;\n    this.connectivityMonitor.addCallback(_ => {\n      asyncQueue.enqueueAndForget(async () => {\n        // Porting Note: Unlike iOS, `restartNetwork()` is called even when the\n        // network becomes unreachable as we don't have any other way to tear\n        // down our streams.\n        if (canUseNetwork(this)) {\n          logDebug(LOG_TAG$5, 'Restarting streams for network reachability change.');\n          await restartNetwork(this);\n        }\n      });\n    });\n    this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);\n  }\n}\nfunction newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {\n  return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);\n}\n/** Re-enables the network. Idempotent. */\nfunction remoteStoreEnableNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.offlineCauses.delete(0 /* OfflineCause.UserDisabled */);\n  return enableNetworkInternal(remoteStoreImpl);\n}\nasync function enableNetworkInternal(remoteStoreImpl) {\n  if (canUseNetwork(remoteStoreImpl)) {\n    for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\n      await networkStatusHandler( /* enabled= */true);\n    }\n  }\n}\n/**\r\n * Temporarily disables the network. The network can be re-enabled using\r\n * enableNetwork().\r\n */\nasync function remoteStoreDisableNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.offlineCauses.add(0 /* OfflineCause.UserDisabled */);\n  await disableNetworkInternal(remoteStoreImpl);\n  // Set the OnlineState to Offline so get()s return from cache, etc.\n  remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* OnlineState.Offline */);\n}\nasync function disableNetworkInternal(remoteStoreImpl) {\n  for (const networkStatusHandler of remoteStoreImpl.onNetworkStatusChange) {\n    await networkStatusHandler( /* enabled= */false);\n  }\n}\nasync function remoteStoreShutdown(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  logDebug(LOG_TAG$5, 'RemoteStore shutting down.');\n  remoteStoreImpl.offlineCauses.add(5 /* OfflineCause.Shutdown */);\n  await disableNetworkInternal(remoteStoreImpl);\n  remoteStoreImpl.connectivityMonitor.shutdown();\n  // Set the OnlineState to Unknown (rather than Offline) to avoid potentially\n  // triggering spurious listener events with cached data, etc.\n  remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n}\n/**\r\n * Starts new listen for the given target. Uses resume token if provided. It\r\n * is a no-op if the target of given `TargetData` is already being listened to.\r\n */\nfunction remoteStoreListen(remoteStore, targetData) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {\n    return;\n  }\n  // Mark this as something the client is currently listening for.\n  remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);\n  if (shouldStartWatchStream(remoteStoreImpl)) {\n    // The listen will be sent in onWatchStreamOpen\n    startWatchStream(remoteStoreImpl);\n  } else if (ensureWatchStream(remoteStoreImpl).isOpen()) {\n    sendWatchRequest(remoteStoreImpl, targetData);\n  }\n}\n/**\r\n * Removes the listen from server. It is a no-op if the given target id is\r\n * not being listened to.\r\n */\nfunction remoteStoreUnlisten(remoteStore, targetId) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  const watchStream = ensureWatchStream(remoteStoreImpl);\n  remoteStoreImpl.listenTargets.delete(targetId);\n  if (watchStream.isOpen()) {\n    sendUnwatchRequest(remoteStoreImpl, targetId);\n  }\n  if (remoteStoreImpl.listenTargets.size === 0) {\n    if (watchStream.isOpen()) {\n      watchStream.markIdle();\n    } else if (canUseNetwork(remoteStoreImpl)) {\n      // Revert to OnlineState.Unknown if the watch stream is not open and we\n      // have no listeners, since without any listens to send we cannot\n      // confirm if the stream is healthy and upgrade to OnlineState.Online.\n      remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n    }\n  }\n}\n/**\r\n * We need to increment the expected number of pending responses we're due\r\n * from watch so we wait for the ack to process any messages from this target.\r\n */\nfunction sendWatchRequest(remoteStoreImpl, targetData) {\n  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);\n  if (targetData.resumeToken.approximateByteSize() > 0 || targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {\n    const expectedCount = remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetData.targetId).size;\n    targetData = targetData.withExpectedCount(expectedCount);\n  }\n  ensureWatchStream(remoteStoreImpl).watch(targetData);\n}\n/**\r\n * We need to increment the expected number of pending responses we're due\r\n * from watch so we wait for the removal on the server before we process any\r\n * messages from this target.\r\n */\nfunction sendUnwatchRequest(remoteStoreImpl, targetId) {\n  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);\n  ensureWatchStream(remoteStoreImpl).unwatch(targetId);\n}\nfunction startWatchStream(remoteStoreImpl) {\n  remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({\n    getRemoteKeysForTarget: targetId => remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId),\n    getTargetDataForTarget: targetId => remoteStoreImpl.listenTargets.get(targetId) || null,\n    getDatabaseId: () => remoteStoreImpl.datastore.serializer.databaseId\n  });\n  ensureWatchStream(remoteStoreImpl).start();\n  remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();\n}\n/**\r\n * Returns whether the watch stream should be started because it's necessary\r\n * and has not yet been started.\r\n */\nfunction shouldStartWatchStream(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && !ensureWatchStream(remoteStoreImpl).isStarted() && remoteStoreImpl.listenTargets.size > 0;\n}\nfunction canUseNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  return remoteStoreImpl.offlineCauses.size === 0;\n}\nfunction cleanUpWatchStreamState(remoteStoreImpl) {\n  remoteStoreImpl.watchChangeAggregator = undefined;\n}\nasync function onWatchStreamConnected(remoteStoreImpl) {\n  // Mark the client as online since we got a \"connected\" notification.\n  remoteStoreImpl.onlineStateTracker.set(\"Online\" /* OnlineState.Online */);\n}\nasync function onWatchStreamOpen(remoteStoreImpl) {\n  remoteStoreImpl.listenTargets.forEach((targetData, targetId) => {\n    sendWatchRequest(remoteStoreImpl, targetData);\n  });\n}\nasync function onWatchStreamClose(remoteStoreImpl, error) {\n  cleanUpWatchStreamState(remoteStoreImpl);\n  // If we still need the watch stream, retry the connection.\n  if (shouldStartWatchStream(remoteStoreImpl)) {\n    remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error);\n    startWatchStream(remoteStoreImpl);\n  } else {\n    // No need to restart watch stream because there are no active targets.\n    // The online state is set to unknown because there is no active attempt\n    // at establishing a connection\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  }\n}\nasync function onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {\n  // Mark the client as online since we got a message from the server\n  remoteStoreImpl.onlineStateTracker.set(\"Online\" /* OnlineState.Online */);\n  if (watchChange instanceof WatchTargetChange && watchChange.state === 2 /* WatchTargetChangeState.Removed */ && watchChange.cause) {\n    // There was an error on a target, don't wait for a consistent snapshot\n    // to raise events\n    try {\n      await handleTargetError(remoteStoreImpl, watchChange);\n    } catch (e) {\n      logDebug(LOG_TAG$5, 'Failed to remove targets %s: %s ', watchChange.targetIds.join(','), e);\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n    return;\n  }\n  if (watchChange instanceof DocumentWatchChange) {\n    remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);\n  } else if (watchChange instanceof ExistenceFilterChange) {\n    remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);\n  } else {\n    remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);\n  }\n  if (!snapshotVersion.isEqual(SnapshotVersion.min())) {\n    try {\n      const lastRemoteSnapshotVersion = await localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\n      if (snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0) {\n        // We have received a target change with a global snapshot if the snapshot\n        // version is not equal to SnapshotVersion.min().\n        await raiseWatchSnapshot(remoteStoreImpl, snapshotVersion);\n      }\n    } catch (e) {\n      logDebug(LOG_TAG$5, 'Failed to raise snapshot:', e);\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n  }\n}\n/**\r\n * Recovery logic for IndexedDB errors that takes the network offline until\r\n * `op` succeeds. Retries are scheduled with backoff using\r\n * `enqueueRetryable()`. If `op()` is not provided, IndexedDB access is\r\n * validated via a generic operation.\r\n *\r\n * The returned Promise is resolved once the network is disabled and before\r\n * any retry attempt.\r\n */\nasync function disableNetworkUntilRecovery(remoteStoreImpl, e, op) {\n  if (isIndexedDbTransactionError(e)) {\n    remoteStoreImpl.offlineCauses.add(1 /* OfflineCause.IndexedDbFailed */);\n    // Disable network and raise offline snapshots\n    await disableNetworkInternal(remoteStoreImpl);\n    remoteStoreImpl.onlineStateTracker.set(\"Offline\" /* OnlineState.Offline */);\n    if (!op) {\n      // Use a simple read operation to determine if IndexedDB recovered.\n      // Ideally, we would expose a health check directly on SimpleDb, but\n      // RemoteStore only has access to persistence through LocalStore.\n      op = () => localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);\n    }\n    // Probe IndexedDB periodically and re-enable network\n    remoteStoreImpl.asyncQueue.enqueueRetryable(async () => {\n      logDebug(LOG_TAG$5, 'Retrying IndexedDB access');\n      await op();\n      remoteStoreImpl.offlineCauses.delete(1 /* OfflineCause.IndexedDbFailed */);\n      await enableNetworkInternal(remoteStoreImpl);\n    });\n  } else {\n    throw e;\n  }\n}\n/**\r\n * Executes `op`. If `op` fails, takes the network offline until `op`\r\n * succeeds. Returns after the first attempt.\r\n */\nfunction executeWithRecovery(remoteStoreImpl, op) {\n  return op().catch(e => disableNetworkUntilRecovery(remoteStoreImpl, e, op));\n}\n/**\r\n * Takes a batch of changes from the Datastore, repackages them as a\r\n * RemoteEvent, and passes that on to the listener, which is typically the\r\n * SyncEngine.\r\n */\nfunction raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {\n  const remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion);\n  // Update in-memory resume tokens. LocalStore will update the\n  // persistent view of these when applying the completed RemoteEvent.\n  remoteEvent.targetChanges.forEach((change, targetId) => {\n    if (change.resumeToken.approximateByteSize() > 0) {\n      const targetData = remoteStoreImpl.listenTargets.get(targetId);\n      // A watched target might have been removed already.\n      if (targetData) {\n        remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));\n      }\n    }\n  });\n  // Re-establish listens for the targets that have been invalidated by\n  // existence filter mismatches.\n  remoteEvent.targetMismatches.forEach((targetId, targetPurpose) => {\n    const targetData = remoteStoreImpl.listenTargets.get(targetId);\n    if (!targetData) {\n      // A watched target might have been removed already.\n      return;\n    }\n    // Clear the resume token for the target, since we're in a known mismatch\n    // state.\n    remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion));\n    // Cause a hard reset by unwatching and rewatching immediately, but\n    // deliberately don't send a resume token so that we get a full update.\n    sendUnwatchRequest(remoteStoreImpl, targetId);\n    // Mark the target we send as being on behalf of an existence filter\n    // mismatch, but don't actually retain that in listenTargets. This ensures\n    // that we flag the first re-listen this way without impacting future\n    // listens of this target (that might happen e.g. on reconnect).\n    const requestTargetData = new TargetData(targetData.target, targetId, targetPurpose, targetData.sequenceNumber);\n    sendWatchRequest(remoteStoreImpl, requestTargetData);\n  });\n  return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);\n}\n/** Handles an error on a target */\nasync function handleTargetError(remoteStoreImpl, watchChange) {\n  const error = watchChange.cause;\n  for (const targetId of watchChange.targetIds) {\n    // A watched target might have been removed already.\n    if (remoteStoreImpl.listenTargets.has(targetId)) {\n      await remoteStoreImpl.remoteSyncer.rejectListen(targetId, error);\n      remoteStoreImpl.listenTargets.delete(targetId);\n      remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);\n    }\n  }\n}\n/**\r\n * Attempts to fill our write pipeline with writes from the LocalStore.\r\n *\r\n * Called internally to bootstrap or refill the write pipeline and by\r\n * SyncEngine whenever there are new mutations to process.\r\n *\r\n * Starts the write stream if necessary.\r\n */\nasync function fillWritePipeline(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  let lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0 ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;\n  while (canAddToWritePipeline(remoteStoreImpl)) {\n    try {\n      const batch = await localStoreGetNextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved);\n      if (batch === null) {\n        if (remoteStoreImpl.writePipeline.length === 0) {\n          writeStream.markIdle();\n        }\n        break;\n      } else {\n        lastBatchIdRetrieved = batch.batchId;\n        addToWritePipeline(remoteStoreImpl, batch);\n      }\n    } catch (e) {\n      await disableNetworkUntilRecovery(remoteStoreImpl, e);\n    }\n  }\n  if (shouldStartWriteStream(remoteStoreImpl)) {\n    startWriteStream(remoteStoreImpl);\n  }\n}\n/**\r\n * Returns true if we can add to the write pipeline (i.e. the network is\r\n * enabled and the write pipeline is not full).\r\n */\nfunction canAddToWritePipeline(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES;\n}\n/**\r\n * Queues additional writes to be sent to the write stream, sending them\r\n * immediately if the write stream is established.\r\n */\nfunction addToWritePipeline(remoteStoreImpl, batch) {\n  remoteStoreImpl.writePipeline.push(batch);\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  if (writeStream.isOpen() && writeStream.handshakeComplete) {\n    writeStream.writeMutations(batch.mutations);\n  }\n}\nfunction shouldStartWriteStream(remoteStoreImpl) {\n  return canUseNetwork(remoteStoreImpl) && !ensureWriteStream(remoteStoreImpl).isStarted() && remoteStoreImpl.writePipeline.length > 0;\n}\nfunction startWriteStream(remoteStoreImpl) {\n  ensureWriteStream(remoteStoreImpl).start();\n}\nasync function onWriteStreamOpen(remoteStoreImpl) {\n  ensureWriteStream(remoteStoreImpl).writeHandshake();\n}\nasync function onWriteHandshakeComplete(remoteStoreImpl) {\n  const writeStream = ensureWriteStream(remoteStoreImpl);\n  // Send the write pipeline now that the stream is established.\n  for (const batch of remoteStoreImpl.writePipeline) {\n    writeStream.writeMutations(batch.mutations);\n  }\n}\nasync function onMutationResult(remoteStoreImpl, commitVersion, results) {\n  const batch = remoteStoreImpl.writePipeline.shift();\n  const success = MutationBatchResult.from(batch, commitVersion, results);\n  await executeWithRecovery(remoteStoreImpl, () => remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success));\n  // It's possible that with the completion of this mutation another\n  // slot has freed up.\n  await fillWritePipeline(remoteStoreImpl);\n}\nasync function onWriteStreamClose(remoteStoreImpl, error) {\n  // If the write stream closed after the write handshake completes, a write\n  // operation failed and we fail the pending operation.\n  if (error && ensureWriteStream(remoteStoreImpl).handshakeComplete) {\n    // This error affects the actual write.\n    await handleWriteError(remoteStoreImpl, error);\n  }\n  // The write stream might have been started by refilling the write\n  // pipeline for failed writes\n  if (shouldStartWriteStream(remoteStoreImpl)) {\n    startWriteStream(remoteStoreImpl);\n  }\n}\nasync function handleWriteError(remoteStoreImpl, error) {\n  // Only handle permanent errors here. If it's transient, just let the retry\n  // logic kick in.\n  if (isPermanentWriteError(error.code)) {\n    // This was a permanent error, the request itself was the problem\n    // so it's not going to succeed if we resend it.\n    const batch = remoteStoreImpl.writePipeline.shift();\n    // In this case it's also unlikely that the server itself is melting\n    // down -- this was just a bad request so inhibit backoff on the next\n    // restart.\n    ensureWriteStream(remoteStoreImpl).inhibitBackoff();\n    await executeWithRecovery(remoteStoreImpl, () => remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch.batchId, error));\n    // It's possible that with the completion of this mutation\n    // another slot has freed up.\n    await fillWritePipeline(remoteStoreImpl);\n  }\n}\nasync function restartNetwork(remoteStore) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.offlineCauses.add(4 /* OfflineCause.ConnectivityChange */);\n  await disableNetworkInternal(remoteStoreImpl);\n  remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  remoteStoreImpl.offlineCauses.delete(4 /* OfflineCause.ConnectivityChange */);\n  await enableNetworkInternal(remoteStoreImpl);\n}\nasync function remoteStoreHandleCredentialChange(remoteStore, user) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  remoteStoreImpl.asyncQueue.verifyOperationInProgress();\n  logDebug(LOG_TAG$5, 'RemoteStore received new credentials');\n  const usesNetwork = canUseNetwork(remoteStoreImpl);\n  // Tear down and re-create our network streams. This will ensure we get a\n  // fresh auth token for the new user and re-fill the write pipeline with\n  // new mutations from the LocalStore (since mutations are per-user).\n  remoteStoreImpl.offlineCauses.add(3 /* OfflineCause.CredentialChange */);\n  await disableNetworkInternal(remoteStoreImpl);\n  if (usesNetwork) {\n    // Don't set the network status to Unknown if we are offline.\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  }\n  await remoteStoreImpl.remoteSyncer.handleCredentialChange(user);\n  remoteStoreImpl.offlineCauses.delete(3 /* OfflineCause.CredentialChange */);\n  await enableNetworkInternal(remoteStoreImpl);\n}\n/**\r\n * Toggles the network state when the client gains or loses its primary lease.\r\n */\nasync function remoteStoreApplyPrimaryState(remoteStore, isPrimary) {\n  const remoteStoreImpl = debugCast(remoteStore);\n  if (isPrimary) {\n    remoteStoreImpl.offlineCauses.delete(2 /* OfflineCause.IsSecondary */);\n    await enableNetworkInternal(remoteStoreImpl);\n  } else if (!isPrimary) {\n    remoteStoreImpl.offlineCauses.add(2 /* OfflineCause.IsSecondary */);\n    await disableNetworkInternal(remoteStoreImpl);\n    remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n  }\n}\n/**\r\n * If not yet initialized, registers the WatchStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WatchStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\nfunction ensureWatchStream(remoteStoreImpl) {\n  if (!remoteStoreImpl.watchStream) {\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\n      onConnected: onWatchStreamConnected.bind(null, remoteStoreImpl),\n      onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),\n      onClose: onWatchStreamClose.bind(null, remoteStoreImpl),\n      onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)\n    });\n    remoteStoreImpl.onNetworkStatusChange.push(async enabled => {\n      if (enabled) {\n        remoteStoreImpl.watchStream.inhibitBackoff();\n        if (shouldStartWatchStream(remoteStoreImpl)) {\n          startWatchStream(remoteStoreImpl);\n        } else {\n          remoteStoreImpl.onlineStateTracker.set(\"Unknown\" /* OnlineState.Unknown */);\n        }\n      } else {\n        await remoteStoreImpl.watchStream.stop();\n        cleanUpWatchStreamState(remoteStoreImpl);\n      }\n    });\n  }\n  return remoteStoreImpl.watchStream;\n}\n/**\r\n * If not yet initialized, registers the WriteStream and its network state\r\n * callback with `remoteStoreImpl`. Returns the existing stream if one is\r\n * already available.\r\n *\r\n * PORTING NOTE: On iOS and Android, the WriteStream gets registered on startup.\r\n * This is not done on Web to allow it to be tree-shaken.\r\n */\nfunction ensureWriteStream(remoteStoreImpl) {\n  if (!remoteStoreImpl.writeStream) {\n    // Create stream (but note that it is not started yet).\n    remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {\n      onConnected: () => Promise.resolve(),\n      onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),\n      onClose: onWriteStreamClose.bind(null, remoteStoreImpl),\n      onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),\n      onMutationResult: onMutationResult.bind(null, remoteStoreImpl)\n    });\n    remoteStoreImpl.onNetworkStatusChange.push(async enabled => {\n      if (enabled) {\n        remoteStoreImpl.writeStream.inhibitBackoff();\n        // This will start the write stream if necessary.\n        await fillWritePipeline(remoteStoreImpl);\n      } else {\n        await remoteStoreImpl.writeStream.stop();\n        if (remoteStoreImpl.writePipeline.length > 0) {\n          logDebug(LOG_TAG$5, `Stopping write stream with ${remoteStoreImpl.writePipeline.length} pending writes`);\n          remoteStoreImpl.writePipeline = [];\n        }\n      }\n    });\n  }\n  return remoteStoreImpl.writeStream;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$4 = 'AsyncQueue';\n/**\r\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\r\n *\r\n * It is created via DelayedOperation.createAndSchedule().\r\n *\r\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\r\n *\r\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\r\n * in newer versions of TypeScript defines `finally`, which is not available in\r\n * IE.\r\n */\nclass DelayedOperation {\n  constructor(asyncQueue, timerId, targetTimeMs, op, removalCallback) {\n    this.asyncQueue = asyncQueue;\n    this.timerId = timerId;\n    this.targetTimeMs = targetTimeMs;\n    this.op = op;\n    this.removalCallback = removalCallback;\n    this.deferred = new Deferred();\n    this.then = this.deferred.promise.then.bind(this.deferred.promise);\n    // It's normal for the deferred promise to be canceled (due to cancellation)\n    // and so we attach a dummy catch callback to avoid\n    // 'UnhandledPromiseRejectionWarning' log spam.\n    this.deferred.promise.catch(err => {});\n  }\n  get promise() {\n    return this.deferred.promise;\n  }\n  /**\r\n   * Creates and returns a DelayedOperation that has been scheduled to be\r\n   * executed on the provided asyncQueue after the provided delayMs.\r\n   *\r\n   * @param asyncQueue - The queue to schedule the operation on.\r\n   * @param id - A Timer ID identifying the type of operation this is.\r\n   * @param delayMs - The delay (ms) before the operation should be scheduled.\r\n   * @param op - The operation to run.\r\n   * @param removalCallback - A callback to be called synchronously once the\r\n   *   operation is executed or canceled, notifying the AsyncQueue to remove it\r\n   *   from its delayedOperations list.\r\n   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\r\n   *   the DelayedOperation class public.\r\n   */\n  static createAndSchedule(asyncQueue, timerId, delayMs, op, removalCallback) {\n    const targetTime = Date.now() + delayMs;\n    const delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);\n    delayedOp.start(delayMs);\n    return delayedOp;\n  }\n  /**\r\n   * Starts the timer. This is called immediately after construction by\r\n   * createAndSchedule().\r\n   */\n  start(delayMs) {\n    this.timerHandle = setTimeout(() => this.handleDelayElapsed(), delayMs);\n  }\n  /**\r\n   * Queues the operation to run immediately (if it hasn't already been run or\r\n   * canceled).\r\n   */\n  skipDelay() {\n    return this.handleDelayElapsed();\n  }\n  /**\r\n   * Cancels the operation if it hasn't already been executed or canceled. The\r\n   * promise will be rejected.\r\n   *\r\n   * As long as the operation has not yet been run, calling cancel() provides a\r\n   * guarantee that the operation will not be run.\r\n   */\n  cancel(reason) {\n    if (this.timerHandle !== null) {\n      this.clearTimeout();\n      this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));\n    }\n  }\n  handleDelayElapsed() {\n    this.asyncQueue.enqueueAndForget(() => {\n      if (this.timerHandle !== null) {\n        this.clearTimeout();\n        return this.op().then(result => {\n          return this.deferred.resolve(result);\n        });\n      } else {\n        return Promise.resolve();\n      }\n    });\n  }\n  clearTimeout() {\n    if (this.timerHandle !== null) {\n      this.removalCallback(this);\n      clearTimeout(this.timerHandle);\n      this.timerHandle = null;\n    }\n  }\n}\n/**\r\n * Returns a FirestoreError that can be surfaced to the user if the provided\r\n * error is an IndexedDbTransactionError. Re-throws the error otherwise.\r\n */\nfunction wrapInUserErrorIfRecoverable(e, msg) {\n  logError(LOG_TAG$4, `${msg}: ${e}`);\n  if (isIndexedDbTransactionError(e)) {\n    return new FirestoreError(Code.UNAVAILABLE, `${msg}: ${e}`);\n  } else {\n    throw e;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * DocumentSet is an immutable (copy-on-write) collection that holds documents\r\n * in order specified by the provided comparator. We always add a document key\r\n * comparator on top of what is provided to guarantee document equality based on\r\n * the key.\r\n */\nclass DocumentSet {\n  /** The default ordering is by key if the comparator is omitted */\n  constructor(comp) {\n    // We are adding document key comparator to the end as it's the only\n    // guaranteed unique property of a document.\n    if (comp) {\n      this.comparator = (d1, d2) => comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);\n    } else {\n      this.comparator = (d1, d2) => DocumentKey.comparator(d1.key, d2.key);\n    }\n    this.keyedMap = documentMap();\n    this.sortedSet = new SortedMap(this.comparator);\n  }\n  /**\r\n   * Returns an empty copy of the existing DocumentSet, using the same\r\n   * comparator.\r\n   */\n  static emptySet(oldSet) {\n    return new DocumentSet(oldSet.comparator);\n  }\n  has(key) {\n    return this.keyedMap.get(key) != null;\n  }\n  get(key) {\n    return this.keyedMap.get(key);\n  }\n  first() {\n    return this.sortedSet.minKey();\n  }\n  last() {\n    return this.sortedSet.maxKey();\n  }\n  isEmpty() {\n    return this.sortedSet.isEmpty();\n  }\n  /**\r\n   * Returns the index of the provided key in the document set, or -1 if the\r\n   * document key is not present in the set;\r\n   */\n  indexOf(key) {\n    const doc = this.keyedMap.get(key);\n    return doc ? this.sortedSet.indexOf(doc) : -1;\n  }\n  get size() {\n    return this.sortedSet.size;\n  }\n  /** Iterates documents in order defined by \"comparator\" */\n  forEach(cb) {\n    this.sortedSet.inorderTraversal((k, v) => {\n      cb(k);\n      return false;\n    });\n  }\n  /** Inserts or updates a document with the same key */\n  add(doc) {\n    // First remove the element if we have it.\n    const set = this.delete(doc.key);\n    return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));\n  }\n  /** Deletes a document with a given key */\n  delete(key) {\n    const doc = this.get(key);\n    if (!doc) {\n      return this;\n    }\n    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));\n  }\n  isEqual(other) {\n    if (!(other instanceof DocumentSet)) {\n      return false;\n    }\n    if (this.size !== other.size) {\n      return false;\n    }\n    const thisIt = this.sortedSet.getIterator();\n    const otherIt = other.sortedSet.getIterator();\n    while (thisIt.hasNext()) {\n      const thisDoc = thisIt.getNext().key;\n      const otherDoc = otherIt.getNext().key;\n      if (!thisDoc.isEqual(otherDoc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n  toString() {\n    const docStrings = [];\n    this.forEach(doc => {\n      docStrings.push(doc.toString());\n    });\n    if (docStrings.length === 0) {\n      return 'DocumentSet ()';\n    } else {\n      return 'DocumentSet (\\n  ' + docStrings.join('  \\n') + '\\n)';\n    }\n  }\n  copy(keyedMap, sortedSet) {\n    const newSet = new DocumentSet();\n    newSet.comparator = this.comparator;\n    newSet.keyedMap = keyedMap;\n    newSet.sortedSet = sortedSet;\n    return newSet;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * DocumentChangeSet keeps track of a set of changes to docs in a query, merging\r\n * duplicate events for the same doc.\r\n */\nclass DocumentChangeSet {\n  constructor() {\n    this.changeMap = new SortedMap(DocumentKey.comparator);\n  }\n  track(change) {\n    const key = change.doc.key;\n    const oldChange = this.changeMap.get(key);\n    if (!oldChange) {\n      this.changeMap = this.changeMap.insert(key, change);\n      return;\n    }\n    // Merge the new change with the existing change.\n    if (change.type !== 0 /* ChangeType.Added */ && oldChange.type === 3 /* ChangeType.Metadata */) {\n      this.changeMap = this.changeMap.insert(key, change);\n    } else if (change.type === 3 /* ChangeType.Metadata */ && oldChange.type !== 1 /* ChangeType.Removed */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: oldChange.type,\n        doc: change.doc\n      });\n    } else if (change.type === 2 /* ChangeType.Modified */ && oldChange.type === 2 /* ChangeType.Modified */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 2 /* ChangeType.Modified */,\n        doc: change.doc\n      });\n    } else if (change.type === 2 /* ChangeType.Modified */ && oldChange.type === 0 /* ChangeType.Added */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 0 /* ChangeType.Added */,\n        doc: change.doc\n      });\n    } else if (change.type === 1 /* ChangeType.Removed */ && oldChange.type === 0 /* ChangeType.Added */) {\n      this.changeMap = this.changeMap.remove(key);\n    } else if (change.type === 1 /* ChangeType.Removed */ && oldChange.type === 2 /* ChangeType.Modified */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 1 /* ChangeType.Removed */,\n        doc: oldChange.doc\n      });\n    } else if (change.type === 0 /* ChangeType.Added */ && oldChange.type === 1 /* ChangeType.Removed */) {\n      this.changeMap = this.changeMap.insert(key, {\n        type: 2 /* ChangeType.Modified */,\n        doc: change.doc\n      });\n    } else {\n      // This includes these cases, which don't make sense:\n      // Added->Added\n      // Removed->Removed\n      // Modified->Added\n      // Removed->Modified\n      // Metadata->Added\n      // Removed->Metadata\n      fail();\n    }\n  }\n  getChanges() {\n    const changes = [];\n    this.changeMap.inorderTraversal((key, change) => {\n      changes.push(change);\n    });\n    return changes;\n  }\n}\nclass ViewSnapshot {\n  constructor(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges, hasCachedResults) {\n    this.query = query;\n    this.docs = docs;\n    this.oldDocs = oldDocs;\n    this.docChanges = docChanges;\n    this.mutatedKeys = mutatedKeys;\n    this.fromCache = fromCache;\n    this.syncStateChanged = syncStateChanged;\n    this.excludesMetadataChanges = excludesMetadataChanges;\n    this.hasCachedResults = hasCachedResults;\n  }\n  /** Returns a view snapshot as if all documents in the snapshot were added. */\n  static fromInitialDocuments(query, documents, mutatedKeys, fromCache, hasCachedResults) {\n    const changes = [];\n    documents.forEach(doc => {\n      changes.push({\n        type: 0 /* ChangeType.Added */,\n        doc\n      });\n    });\n    return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, /* syncStateChanged= */true, /* excludesMetadataChanges= */false, hasCachedResults);\n  }\n  get hasPendingWrites() {\n    return !this.mutatedKeys.isEmpty();\n  }\n  isEqual(other) {\n    if (this.fromCache !== other.fromCache || this.hasCachedResults !== other.hasCachedResults || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !queryEquals(this.query, other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {\n      return false;\n    }\n    const changes = this.docChanges;\n    const otherChanges = other.docChanges;\n    if (changes.length !== otherChanges.length) {\n      return false;\n    }\n    for (let i = 0; i < changes.length; i++) {\n      if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Holds the listeners and the last received ViewSnapshot for a query being\r\n * tracked by EventManager.\r\n */\nclass QueryListenersInfo {\n  constructor() {\n    this.viewSnap = undefined;\n    this.listeners = [];\n  }\n  // Helper methods that checks if the query has listeners that listening to remote store\n  hasRemoteListeners() {\n    return this.listeners.some(listener => listener.listensToRemoteStore());\n  }\n}\nfunction newEventManager() {\n  return new EventManagerImpl();\n}\nclass EventManagerImpl {\n  constructor() {\n    this.queries = newQueriesObjectMap();\n    this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\n    this.snapshotsInSyncListeners = new Set();\n  }\n  terminate() {\n    errorAllTargets(this, new FirestoreError(Code.ABORTED, 'Firestore shutting down'));\n  }\n}\nfunction newQueriesObjectMap() {\n  return new ObjectMap(q => canonifyQuery(q), queryEquals);\n}\nasync function eventManagerListen(eventManager, listener) {\n  const eventManagerImpl = debugCast(eventManager);\n  let listenerAction = 3 /* ListenerSetupAction.NoActionRequired */;\n  const query = listener.query;\n  let queryInfo = eventManagerImpl.queries.get(query);\n  if (!queryInfo) {\n    queryInfo = new QueryListenersInfo();\n    listenerAction = listener.listensToRemoteStore() ? 0 /* ListenerSetupAction.InitializeLocalListenAndRequireWatchConnection */ : 1 /* ListenerSetupAction.InitializeLocalListenOnly */;\n  } else if (!queryInfo.hasRemoteListeners() && listener.listensToRemoteStore()) {\n    // Query has been listening to local cache, and tries to add a new listener sourced from watch.\n    listenerAction = 2 /* ListenerSetupAction.RequireWatchConnectionOnly */;\n  }\n  try {\n    switch (listenerAction) {\n      case 0 /* ListenerSetupAction.InitializeLocalListenAndRequireWatchConnection */:\n        queryInfo.viewSnap = await eventManagerImpl.onListen(query, /** enableRemoteListen= */true);\n        break;\n      case 1 /* ListenerSetupAction.InitializeLocalListenOnly */:\n        queryInfo.viewSnap = await eventManagerImpl.onListen(query, /** enableRemoteListen= */false);\n        break;\n      case 2 /* ListenerSetupAction.RequireWatchConnectionOnly */:\n        await eventManagerImpl.onFirstRemoteStoreListen(query);\n        break;\n      default:\n        break;\n    }\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, `Initialization of query '${stringifyQuery(listener.query)}' failed`);\n    listener.onError(firestoreError);\n    return;\n  }\n  eventManagerImpl.queries.set(query, queryInfo);\n  queryInfo.listeners.push(listener);\n  // Run global snapshot listeners if a consistent snapshot has been emitted.\n  listener.applyOnlineStateChange(eventManagerImpl.onlineState);\n  if (queryInfo.viewSnap) {\n    const raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);\n    if (raisedEvent) {\n      raiseSnapshotsInSyncEvent(eventManagerImpl);\n    }\n  }\n}\nasync function eventManagerUnlisten(eventManager, listener) {\n  const eventManagerImpl = debugCast(eventManager);\n  const query = listener.query;\n  let listenerAction = 3 /* ListenerRemovalAction.NoActionRequired */;\n  const queryInfo = eventManagerImpl.queries.get(query);\n  if (queryInfo) {\n    const i = queryInfo.listeners.indexOf(listener);\n    if (i >= 0) {\n      queryInfo.listeners.splice(i, 1);\n      if (queryInfo.listeners.length === 0) {\n        listenerAction = listener.listensToRemoteStore() ? 0 /* ListenerRemovalAction.TerminateLocalListenAndRequireWatchDisconnection */ : 1 /* ListenerRemovalAction.TerminateLocalListenOnly */;\n      } else if (!queryInfo.hasRemoteListeners() && listener.listensToRemoteStore()) {\n        // The removed listener is the last one that sourced from watch.\n        listenerAction = 2 /* ListenerRemovalAction.RequireWatchDisconnectionOnly */;\n      }\n    }\n  }\n  switch (listenerAction) {\n    case 0 /* ListenerRemovalAction.TerminateLocalListenAndRequireWatchDisconnection */:\n      eventManagerImpl.queries.delete(query);\n      return eventManagerImpl.onUnlisten(query, /** disableRemoteListen= */true);\n    case 1 /* ListenerRemovalAction.TerminateLocalListenOnly */:\n      eventManagerImpl.queries.delete(query);\n      return eventManagerImpl.onUnlisten(query, /** disableRemoteListen= */false);\n    case 2 /* ListenerRemovalAction.RequireWatchDisconnectionOnly */:\n      return eventManagerImpl.onLastRemoteStoreUnlisten(query);\n    default:\n      return;\n  }\n}\nfunction eventManagerOnWatchChange(eventManager, viewSnaps) {\n  const eventManagerImpl = debugCast(eventManager);\n  let raisedEvent = false;\n  for (const viewSnap of viewSnaps) {\n    const query = viewSnap.query;\n    const queryInfo = eventManagerImpl.queries.get(query);\n    if (queryInfo) {\n      for (const listener of queryInfo.listeners) {\n        if (listener.onViewSnapshot(viewSnap)) {\n          raisedEvent = true;\n        }\n      }\n      queryInfo.viewSnap = viewSnap;\n    }\n  }\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\nfunction eventManagerOnWatchError(eventManager, query, error) {\n  const eventManagerImpl = debugCast(eventManager);\n  const queryInfo = eventManagerImpl.queries.get(query);\n  if (queryInfo) {\n    for (const listener of queryInfo.listeners) {\n      listener.onError(error);\n    }\n  }\n  // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()\n  // after an error.\n  eventManagerImpl.queries.delete(query);\n}\nfunction eventManagerOnOnlineStateChange(eventManager, onlineState) {\n  const eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.onlineState = onlineState;\n  let raisedEvent = false;\n  eventManagerImpl.queries.forEach((_, queryInfo) => {\n    for (const listener of queryInfo.listeners) {\n      // Run global snapshot listeners if a consistent snapshot has been emitted.\n      if (listener.applyOnlineStateChange(onlineState)) {\n        raisedEvent = true;\n      }\n    }\n  });\n  if (raisedEvent) {\n    raiseSnapshotsInSyncEvent(eventManagerImpl);\n  }\n}\nfunction addSnapshotsInSyncListener(eventManager, observer) {\n  const eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.snapshotsInSyncListeners.add(observer);\n  // Immediately fire an initial event, indicating all existing listeners\n  // are in-sync.\n  observer.next();\n}\nfunction removeSnapshotsInSyncListener(eventManager, observer) {\n  const eventManagerImpl = debugCast(eventManager);\n  eventManagerImpl.snapshotsInSyncListeners.delete(observer);\n}\nfunction errorAllTargets(eventManager, error) {\n  const eventManagerImpl = debugCast(eventManager);\n  const queries = eventManagerImpl.queries;\n  // Prevent further access by clearing ObjectMap.\n  eventManagerImpl.queries = newQueriesObjectMap();\n  queries.forEach((_, queryInfo) => {\n    for (const listener of queryInfo.listeners) {\n      listener.onError(error);\n    }\n  });\n}\n// Call all global snapshot listeners that have been set.\nfunction raiseSnapshotsInSyncEvent(eventManagerImpl) {\n  eventManagerImpl.snapshotsInSyncListeners.forEach(observer => {\n    observer.next();\n  });\n}\nvar ListenerDataSource;\n(function (ListenerDataSource) {\n  /** Listen to both cache and server changes */\n  ListenerDataSource[\"Default\"] = \"default\";\n  /** Listen to changes in cache only */\n  ListenerDataSource[\"Cache\"] = \"cache\";\n})(ListenerDataSource || (ListenerDataSource = {}));\n/**\r\n * QueryListener takes a series of internal view snapshots and determines\r\n * when to raise the event.\r\n *\r\n * It uses an Observer to dispatch events.\r\n */\nclass QueryListener {\n  constructor(query, queryObserver, options) {\n    this.query = query;\n    this.queryObserver = queryObserver;\n    /**\r\n     * Initial snapshots (e.g. from cache) may not be propagated to the wrapped\r\n     * observer. This flag is set to true once we've actually raised an event.\r\n     */\n    this.raisedInitialEvent = false;\n    this.snap = null;\n    this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\n    this.options = options || {};\n  }\n  /**\r\n   * Applies the new ViewSnapshot to this listener, raising a user-facing event\r\n   * if applicable (depending on what changed, whether the user has opted into\r\n   * metadata-only changes, etc.). Returns true if a user-facing event was\r\n   * indeed raised.\r\n   */\n  onViewSnapshot(snap) {\n    if (!this.options.includeMetadataChanges) {\n      // Remove the metadata only changes.\n      const docChanges = [];\n      for (const docChange of snap.docChanges) {\n        if (docChange.type !== 3 /* ChangeType.Metadata */) {\n          docChanges.push(docChange);\n        }\n      }\n      snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, /* excludesMetadataChanges= */true, snap.hasCachedResults);\n    }\n    let raisedEvent = false;\n    if (!this.raisedInitialEvent) {\n      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {\n        this.raiseInitialEvent(snap);\n        raisedEvent = true;\n      }\n    } else if (this.shouldRaiseEvent(snap)) {\n      this.queryObserver.next(snap);\n      raisedEvent = true;\n    }\n    this.snap = snap;\n    return raisedEvent;\n  }\n  onError(error) {\n    this.queryObserver.error(error);\n  }\n  /** Returns whether a snapshot was raised. */\n  applyOnlineStateChange(onlineState) {\n    this.onlineState = onlineState;\n    let raisedEvent = false;\n    if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {\n      this.raiseInitialEvent(this.snap);\n      raisedEvent = true;\n    }\n    return raisedEvent;\n  }\n  shouldRaiseInitialEvent(snap, onlineState) {\n    // Always raise the first event when we're synced\n    if (!snap.fromCache) {\n      return true;\n    }\n    // Always raise event if listening to cache\n    if (!this.listensToRemoteStore()) {\n      return true;\n    }\n    // NOTE: We consider OnlineState.Unknown as online (it should become Offline\n    // or Online if we wait long enough).\n    const maybeOnline = onlineState !== \"Offline\" /* OnlineState.Offline */;\n    // Don't raise the event if we're online, aren't synced yet (checked\n    // above) and are waiting for a sync.\n    if (this.options.waitForSyncWhenOnline && maybeOnline) {\n      return false;\n    }\n    // Raise data from cache if we have any documents, have cached results before,\n    // or we are offline.\n    return !snap.docs.isEmpty() || snap.hasCachedResults || onlineState === \"Offline\" /* OnlineState.Offline */;\n  }\n  shouldRaiseEvent(snap) {\n    // We don't need to handle includeDocumentMetadataChanges here because\n    // the Metadata only changes have already been stripped out if needed.\n    // At this point the only changes we will see are the ones we should\n    // propagate.\n    if (snap.docChanges.length > 0) {\n      return true;\n    }\n    const hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;\n    if (snap.syncStateChanged || hasPendingWritesChanged) {\n      return this.options.includeMetadataChanges === true;\n    }\n    // Generally we should have hit one of the cases above, but it's possible\n    // to get here if there were only metadata docChanges and they got\n    // stripped out.\n    return false;\n  }\n  raiseInitialEvent(snap) {\n    snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache, snap.hasCachedResults);\n    this.raisedInitialEvent = true;\n    this.queryObserver.next(snap);\n  }\n  listensToRemoteStore() {\n    return this.options.source !== ListenerDataSource.Cache;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A set of changes to what documents are currently in view and out of view for\r\n * a given query. These changes are sent to the LocalStore by the View (via\r\n * the SyncEngine) and are used to pin / unpin documents as appropriate.\r\n */\nclass LocalViewChanges {\n  constructor(targetId, fromCache, addedKeys, removedKeys) {\n    this.targetId = targetId;\n    this.fromCache = fromCache;\n    this.addedKeys = addedKeys;\n    this.removedKeys = removedKeys;\n  }\n  static fromSnapshot(targetId, viewSnapshot) {\n    let addedKeys = documentKeySet();\n    let removedKeys = documentKeySet();\n    for (const docChange of viewSnapshot.docChanges) {\n      switch (docChange.type) {\n        case 0 /* ChangeType.Added */:\n          addedKeys = addedKeys.add(docChange.doc.key);\n          break;\n        case 1 /* ChangeType.Removed */:\n          removedKeys = removedKeys.add(docChange.doc.key);\n          break;\n        // do nothing\n      }\n    }\n    return new LocalViewChanges(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Helper to convert objects from bundles to model objects in the SDK.\r\n */\nclass BundleConverterImpl {\n  constructor(serializer) {\n    this.serializer = serializer;\n  }\n  toDocumentKey(name) {\n    return fromName(this.serializer, name);\n  }\n  /**\r\n   * Converts a BundleDocument to a MutableDocument.\r\n   */\n  toMutableDocument(bundledDoc) {\n    if (bundledDoc.metadata.exists) {\n      return fromDocument(this.serializer, bundledDoc.document, false);\n    } else {\n      return MutableDocument.newNoDocument(this.toDocumentKey(bundledDoc.metadata.name), this.toSnapshotVersion(bundledDoc.metadata.readTime));\n    }\n  }\n  toSnapshotVersion(time) {\n    return fromVersion(time);\n  }\n}\n/**\r\n * A class to process the elements from a bundle, load them into local\r\n * storage and provide progress update while loading.\r\n */\nclass BundleLoader {\n  constructor(bundleMetadata, localStore, serializer) {\n    this.bundleMetadata = bundleMetadata;\n    this.localStore = localStore;\n    this.serializer = serializer;\n    /** Batched queries to be saved into storage */\n    this.queries = [];\n    /** Batched documents to be saved into storage */\n    this.documents = [];\n    /** The collection groups affected by this bundle. */\n    this.collectionGroups = new Set();\n    this.progress = bundleInitialProgress(bundleMetadata);\n  }\n  /**\r\n   * Adds an element from the bundle to the loader.\r\n   *\r\n   * Returns a new progress if adding the element leads to a new progress,\r\n   * otherwise returns null.\r\n   */\n  addSizedElement(element) {\n    this.progress.bytesLoaded += element.byteLength;\n    let documentsLoaded = this.progress.documentsLoaded;\n    if (element.payload.namedQuery) {\n      this.queries.push(element.payload.namedQuery);\n    } else if (element.payload.documentMetadata) {\n      this.documents.push({\n        metadata: element.payload.documentMetadata\n      });\n      if (!element.payload.documentMetadata.exists) {\n        ++documentsLoaded;\n      }\n      const path = ResourcePath.fromString(element.payload.documentMetadata.name);\n      this.collectionGroups.add(path.get(path.length - 2));\n    } else if (element.payload.document) {\n      this.documents[this.documents.length - 1].document = element.payload.document;\n      ++documentsLoaded;\n    }\n    if (documentsLoaded !== this.progress.documentsLoaded) {\n      this.progress.documentsLoaded = documentsLoaded;\n      return Object.assign({}, this.progress);\n    }\n    return null;\n  }\n  getQueryDocumentMapping(documents) {\n    const queryDocumentMap = new Map();\n    const bundleConverter = new BundleConverterImpl(this.serializer);\n    for (const bundleDoc of documents) {\n      if (bundleDoc.metadata.queries) {\n        const documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);\n        for (const queryName of bundleDoc.metadata.queries) {\n          const documentKeys = (queryDocumentMap.get(queryName) || documentKeySet()).add(documentKey);\n          queryDocumentMap.set(queryName, documentKeys);\n        }\n      }\n    }\n    return queryDocumentMap;\n  }\n  /**\r\n   * Update the progress to 'Success' and return the updated progress.\r\n   */\n  async complete() {\n    const changedDocs = await localStoreApplyBundledDocuments(this.localStore, new BundleConverterImpl(this.serializer), this.documents, this.bundleMetadata.id);\n    const queryDocumentMap = this.getQueryDocumentMapping(this.documents);\n    for (const q of this.queries) {\n      await localStoreSaveNamedQuery(this.localStore, q, queryDocumentMap.get(q.name));\n    }\n    this.progress.taskState = 'Success';\n    return {\n      progress: this.progress,\n      changedCollectionGroups: this.collectionGroups,\n      changedDocs\n    };\n  }\n}\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the initial progress of\r\n * loading a bundle.\r\n */\nfunction bundleInitialProgress(metadata) {\n  return {\n    taskState: 'Running',\n    documentsLoaded: 0,\n    bytesLoaded: 0,\n    totalDocuments: metadata.totalDocuments,\n    totalBytes: metadata.totalBytes\n  };\n}\n/**\r\n * Returns a `LoadBundleTaskProgress` representing the progress that the loading\r\n * has succeeded.\r\n */\nfunction bundleSuccessProgress(metadata) {\n  return {\n    taskState: 'Success',\n    documentsLoaded: metadata.totalDocuments,\n    bytesLoaded: metadata.totalBytes,\n    totalDocuments: metadata.totalDocuments,\n    totalBytes: metadata.totalBytes\n  };\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass AddedLimboDocument {\n  constructor(key) {\n    this.key = key;\n  }\n}\nclass RemovedLimboDocument {\n  constructor(key) {\n    this.key = key;\n  }\n}\n/**\r\n * View is responsible for computing the final merged truth of what docs are in\r\n * a query. It gets notified of local and remote changes to docs, and applies\r\n * the query filters and limits to determine the most correct possible results.\r\n */\nclass View {\n  constructor(query, /** Documents included in the remote target */\n  _syncedDocuments) {\n    this.query = query;\n    this._syncedDocuments = _syncedDocuments;\n    this.syncState = null;\n    this.hasCachedResults = false;\n    /**\r\n     * A flag whether the view is current with the backend. A view is considered\r\n     * current after it has seen the current flag from the backend and did not\r\n     * lose consistency within the watch stream (e.g. because of an existence\r\n     * filter mismatch).\r\n     */\n    this.current = false;\n    /** Documents in the view but not in the remote target */\n    this.limboDocuments = documentKeySet();\n    /** Document Keys that have local changes */\n    this.mutatedKeys = documentKeySet();\n    this.docComparator = newQueryComparator(query);\n    this.documentSet = new DocumentSet(this.docComparator);\n  }\n  /**\r\n   * The set of remote documents that the server has told us belongs to the target associated with\r\n   * this view.\r\n   */\n  get syncedDocuments() {\n    return this._syncedDocuments;\n  }\n  /**\r\n   * Iterates over a set of doc changes, applies the query limit, and computes\r\n   * what the new results should be, what the changes were, and whether we may\r\n   * need to go back to the local cache for more results. Does not make any\r\n   * changes to the view.\r\n   * @param docChanges - The doc changes to apply to this view.\r\n   * @param previousChanges - If this is being called with a refill, then start\r\n   *        with this set of docs and changes instead of the current view.\r\n   * @returns a new set of docs, changes, and refill flag.\r\n   */\n  computeDocChanges(docChanges, previousChanges) {\n    const changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();\n    const oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;\n    let newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;\n    let newDocumentSet = oldDocumentSet;\n    let needsRefill = false;\n    // Track the last doc in a (full) limit. This is necessary, because some\n    // update (a delete, or an update moving a doc past the old limit) might\n    // mean there is some other document in the local cache that either should\n    // come (1) between the old last limit doc and the new last document, in the\n    // case of updates, or (2) after the new last document, in the case of\n    // deletes. So we keep this doc at the old limit to compare the updates to.\n    //\n    // Note that this should never get used in a refill (when previousChanges is\n    // set), because there will only be adds -- no deletes or updates.\n    const lastDocInLimit = this.query.limitType === \"F\" /* LimitType.First */ && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;\n    const firstDocInLimit = this.query.limitType === \"L\" /* LimitType.Last */ && oldDocumentSet.size === this.query.limit ? oldDocumentSet.first() : null;\n    docChanges.inorderTraversal((key, entry) => {\n      const oldDoc = oldDocumentSet.get(key);\n      const newDoc = queryMatches(this.query, entry) ? entry : null;\n      const oldDocHadPendingMutations = oldDoc ? this.mutatedKeys.has(oldDoc.key) : false;\n      const newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations ||\n      // We only consider committed mutations for documents that were\n      // mutated during the lifetime of the view.\n      this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;\n      let changeApplied = false;\n      // Calculate change\n      if (oldDoc && newDoc) {\n        const docsEqual = oldDoc.data.isEqual(newDoc.data);\n        if (!docsEqual) {\n          if (!this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {\n            changeSet.track({\n              type: 2 /* ChangeType.Modified */,\n              doc: newDoc\n            });\n            changeApplied = true;\n            if (lastDocInLimit && this.docComparator(newDoc, lastDocInLimit) > 0 || firstDocInLimit && this.docComparator(newDoc, firstDocInLimit) < 0) {\n              // This doc moved from inside the limit to outside the limit.\n              // That means there may be some other doc in the local cache\n              // that should be included instead.\n              needsRefill = true;\n            }\n          }\n        } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {\n          changeSet.track({\n            type: 3 /* ChangeType.Metadata */,\n            doc: newDoc\n          });\n          changeApplied = true;\n        }\n      } else if (!oldDoc && newDoc) {\n        changeSet.track({\n          type: 0 /* ChangeType.Added */,\n          doc: newDoc\n        });\n        changeApplied = true;\n      } else if (oldDoc && !newDoc) {\n        changeSet.track({\n          type: 1 /* ChangeType.Removed */,\n          doc: oldDoc\n        });\n        changeApplied = true;\n        if (lastDocInLimit || firstDocInLimit) {\n          // A doc was removed from a full limit query. We'll need to\n          // requery from the local cache to see if we know about some other\n          // doc that should be in the results.\n          needsRefill = true;\n        }\n      }\n      if (changeApplied) {\n        if (newDoc) {\n          newDocumentSet = newDocumentSet.add(newDoc);\n          if (newDocHasPendingMutations) {\n            newMutatedKeys = newMutatedKeys.add(key);\n          } else {\n            newMutatedKeys = newMutatedKeys.delete(key);\n          }\n        } else {\n          newDocumentSet = newDocumentSet.delete(key);\n          newMutatedKeys = newMutatedKeys.delete(key);\n        }\n      }\n    });\n    // Drop documents out to meet limit/limitToLast requirement.\n    if (this.query.limit !== null) {\n      while (newDocumentSet.size > this.query.limit) {\n        const oldDoc = this.query.limitType === \"F\" /* LimitType.First */ ? newDocumentSet.last() : newDocumentSet.first();\n        newDocumentSet = newDocumentSet.delete(oldDoc.key);\n        newMutatedKeys = newMutatedKeys.delete(oldDoc.key);\n        changeSet.track({\n          type: 1 /* ChangeType.Removed */,\n          doc: oldDoc\n        });\n      }\n    }\n    return {\n      documentSet: newDocumentSet,\n      changeSet,\n      needsRefill,\n      mutatedKeys: newMutatedKeys\n    };\n  }\n  shouldWaitForSyncedDocument(oldDoc, newDoc) {\n    // We suppress the initial change event for documents that were modified as\n    // part of a write acknowledgment (e.g. when the value of a server transform\n    // is applied) as Watch will send us the same document again.\n    // By suppressing the event, we only raise two user visible events (one with\n    // `hasPendingWrites` and the final state of the document) instead of three\n    // (one with `hasPendingWrites`, the modified document with\n    // `hasPendingWrites` and the final state of the document).\n    return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;\n  }\n  /**\r\n   * Updates the view with the given ViewDocumentChanges and optionally updates\r\n   * limbo docs and sync state from the provided target change.\r\n   * @param docChanges - The set of changes to make to the view's docs.\r\n   * @param limboResolutionEnabled - Whether to update limbo documents based on\r\n   *        this change.\r\n   * @param targetChange - A target change to apply for computing limbo docs and\r\n   *        sync state.\r\n   * @param targetIsPendingReset - Whether the target is pending to reset due to\r\n   *        existence filter mismatch. If not explicitly specified, it is treated\r\n   *        equivalently to `false`.\r\n   * @returns A new ViewChange with the given docs, changes, and sync state.\r\n   */\n  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.\n  applyChanges(docChanges, limboResolutionEnabled, targetChange, targetIsPendingReset) {\n    const oldDocs = this.documentSet;\n    this.documentSet = docChanges.documentSet;\n    this.mutatedKeys = docChanges.mutatedKeys;\n    // Sort changes based on type and query comparator\n    const changes = docChanges.changeSet.getChanges();\n    changes.sort((c1, c2) => {\n      return compareChangeType(c1.type, c2.type) || this.docComparator(c1.doc, c2.doc);\n    });\n    this.applyTargetChange(targetChange);\n    targetIsPendingReset = targetIsPendingReset !== null && targetIsPendingReset !== void 0 ? targetIsPendingReset : false;\n    const limboChanges = limboResolutionEnabled && !targetIsPendingReset ? this.updateLimboDocuments() : [];\n    // We are at synced state if there is no limbo docs are waiting to be resolved, view is current\n    // with the backend, and the query is not pending to reset due to existence filter mismatch.\n    const synced = this.limboDocuments.size === 0 && this.current && !targetIsPendingReset;\n    const newSyncState = synced ? 1 /* SyncState.Synced */ : 0 /* SyncState.Local */;\n    const syncStateChanged = newSyncState !== this.syncState;\n    this.syncState = newSyncState;\n    if (changes.length === 0 && !syncStateChanged) {\n      // no changes\n      return {\n        limboChanges\n      };\n    } else {\n      const snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0 /* SyncState.Local */, syncStateChanged, /* excludesMetadataChanges= */false, targetChange ? targetChange.resumeToken.approximateByteSize() > 0 : false);\n      return {\n        snapshot: snap,\n        limboChanges\n      };\n    }\n  }\n  /**\r\n   * Applies an OnlineState change to the view, potentially generating a\r\n   * ViewChange if the view's syncState changes as a result.\r\n   */\n  applyOnlineStateChange(onlineState) {\n    if (this.current && onlineState === \"Offline\" /* OnlineState.Offline */) {\n      // If we're offline, set `current` to false and then call applyChanges()\n      // to refresh our syncState and generate a ViewChange as appropriate. We\n      // are guaranteed to get a new TargetChange that sets `current` back to\n      // true once the client is back online.\n      this.current = false;\n      return this.applyChanges({\n        documentSet: this.documentSet,\n        changeSet: new DocumentChangeSet(),\n        mutatedKeys: this.mutatedKeys,\n        needsRefill: false\n      }, /* limboResolutionEnabled= */false);\n    } else {\n      // No effect, just return a no-op ViewChange.\n      return {\n        limboChanges: []\n      };\n    }\n  }\n  /**\r\n   * Returns whether the doc for the given key should be in limbo.\r\n   */\n  shouldBeInLimbo(key) {\n    // If the remote end says it's part of this query, it's not in limbo.\n    if (this._syncedDocuments.has(key)) {\n      return false;\n    }\n    // The local store doesn't think it's a result, so it shouldn't be in limbo.\n    if (!this.documentSet.has(key)) {\n      return false;\n    }\n    // If there are local changes to the doc, they might explain why the server\n    // doesn't know that it's part of the query. So don't put it in limbo.\n    // TODO(klimt): Ideally, we would only consider changes that might actually\n    // affect this specific query.\n    if (this.documentSet.get(key).hasLocalMutations) {\n      return false;\n    }\n    // Everything else is in limbo.\n    return true;\n  }\n  /**\r\n   * Updates syncedDocuments, current, and limbo docs based on the given change.\r\n   * Returns the list of changes to which docs are in limbo.\r\n   */\n  applyTargetChange(targetChange) {\n    if (targetChange) {\n      targetChange.addedDocuments.forEach(key => this._syncedDocuments = this._syncedDocuments.add(key));\n      targetChange.modifiedDocuments.forEach(key => {});\n      targetChange.removedDocuments.forEach(key => this._syncedDocuments = this._syncedDocuments.delete(key));\n      this.current = targetChange.current;\n    }\n  }\n  updateLimboDocuments() {\n    // We can only determine limbo documents when we're in-sync with the server.\n    if (!this.current) {\n      return [];\n    }\n    // TODO(klimt): Do this incrementally so that it's not quadratic when\n    // updating many documents.\n    const oldLimboDocuments = this.limboDocuments;\n    this.limboDocuments = documentKeySet();\n    this.documentSet.forEach(doc => {\n      if (this.shouldBeInLimbo(doc.key)) {\n        this.limboDocuments = this.limboDocuments.add(doc.key);\n      }\n    });\n    // Diff the new limbo docs with the old limbo docs.\n    const changes = [];\n    oldLimboDocuments.forEach(key => {\n      if (!this.limboDocuments.has(key)) {\n        changes.push(new RemovedLimboDocument(key));\n      }\n    });\n    this.limboDocuments.forEach(key => {\n      if (!oldLimboDocuments.has(key)) {\n        changes.push(new AddedLimboDocument(key));\n      }\n    });\n    return changes;\n  }\n  /**\r\n   * Update the in-memory state of the current view with the state read from\r\n   * persistence.\r\n   *\r\n   * We update the query view whenever a client's primary status changes:\r\n   * - When a client transitions from primary to secondary, it can miss\r\n   *   LocalStorage updates and its query views may temporarily not be\r\n   *   synchronized with the state on disk.\r\n   * - For secondary to primary transitions, the client needs to update the list\r\n   *   of `syncedDocuments` since secondary clients update their query views\r\n   *   based purely on synthesized RemoteEvents.\r\n   *\r\n   * @param queryResult.documents - The documents that match the query according\r\n   * to the LocalStore.\r\n   * @param queryResult.remoteKeys - The keys of the documents that match the\r\n   * query according to the backend.\r\n   *\r\n   * @returns The ViewChange that resulted from this synchronization.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n  synchronizeWithPersistedState(queryResult) {\n    this._syncedDocuments = queryResult.remoteKeys;\n    this.limboDocuments = documentKeySet();\n    const docChanges = this.computeDocChanges(queryResult.documents);\n    return this.applyChanges(docChanges, /* limboResolutionEnabled= */true);\n  }\n  /**\r\n   * Returns a view snapshot as if this query was just listened to. Contains\r\n   * a document add for every existing document and the `fromCache` and\r\n   * `hasPendingWrites` status of the already established view.\r\n   */\n  // PORTING NOTE: Multi-tab only.\n  computeInitialSnapshot() {\n    return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0 /* SyncState.Local */, this.hasCachedResults);\n  }\n}\nfunction compareChangeType(c1, c2) {\n  const order = change => {\n    switch (change) {\n      case 0 /* ChangeType.Added */:\n        return 1;\n      case 2 /* ChangeType.Modified */:\n        return 2;\n      case 3 /* ChangeType.Metadata */:\n        // A metadata change is converted to a modified change at the public\n        // api layer.  Since we sort by document key and then change type,\n        // metadata and modified changes must be sorted equivalently.\n        return 2;\n      case 1 /* ChangeType.Removed */:\n        return 0;\n      default:\n        return fail();\n    }\n  };\n  return order(c1) - order(c2);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$3 = 'SyncEngine';\n/**\r\n * QueryView contains all of the data that SyncEngine needs to keep track of for\r\n * a particular query.\r\n */\nclass QueryView {\n  constructor(\n  /**\r\n   * The query itself.\r\n   */\n  query,\n  /**\r\n   * The target number created by the client that is used in the watch\r\n   * stream to identify this query.\r\n   */\n  targetId,\n  /**\r\n   * The view is responsible for computing the final merged truth of what\r\n   * docs are in the query. It gets notified of local and remote changes,\r\n   * and applies the query filters and limits to determine the most correct\r\n   * possible results.\r\n   */\n  view) {\n    this.query = query;\n    this.targetId = targetId;\n    this.view = view;\n  }\n}\n/** Tracks a limbo resolution. */\nclass LimboResolution {\n  constructor(key) {\n    this.key = key;\n    /**\r\n     * Set to true once we've received a document. This is used in\r\n     * getRemoteKeysForTarget() and ultimately used by WatchChangeAggregator to\r\n     * decide whether it needs to manufacture a delete event for the target once\r\n     * the target is CURRENT.\r\n     */\n    this.receivedDocument = false;\n  }\n}\n/**\r\n * An implementation of `SyncEngine` coordinating with other parts of SDK.\r\n *\r\n * The parts of SyncEngine that act as a callback to RemoteStore need to be\r\n * registered individually. This is done in `syncEngineWrite()` and\r\n * `syncEngineListen()` (as well as `applyPrimaryState()`) as these methods\r\n * serve as entry points to RemoteStore's functionality.\r\n *\r\n * Note: some field defined in this class might have public access level, but\r\n * the class is not exported so they are only accessible from this module.\r\n * This is useful to implement optional features (like bundles) in free\r\n * functions, such that they are tree-shakeable.\r\n */\nclass SyncEngineImpl {\n  constructor(localStore, remoteStore, eventManager,\n  // PORTING NOTE: Manages state synchronization in multi-tab environments.\n  sharedClientState, currentUser, maxConcurrentLimboResolutions) {\n    this.localStore = localStore;\n    this.remoteStore = remoteStore;\n    this.eventManager = eventManager;\n    this.sharedClientState = sharedClientState;\n    this.currentUser = currentUser;\n    this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;\n    this.syncEngineListener = {};\n    this.queryViewsByQuery = new ObjectMap(q => canonifyQuery(q), queryEquals);\n    this.queriesByTarget = new Map();\n    /**\r\n     * The keys of documents that are in limbo for which we haven't yet started a\r\n     * limbo resolution query. The strings in this set are the result of calling\r\n     * `key.path.canonicalString()` where `key` is a `DocumentKey` object.\r\n     *\r\n     * The `Set` type was chosen because it provides efficient lookup and removal\r\n     * of arbitrary elements and it also maintains insertion order, providing the\r\n     * desired queue-like FIFO semantics.\r\n     */\n    this.enqueuedLimboResolutions = new Set();\n    /**\r\n     * Keeps track of the target ID for each document that is in limbo with an\r\n     * active target.\r\n     */\n    this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\n    /**\r\n     * Keeps track of the information about an active limbo resolution for each\r\n     * active target ID that was started for the purpose of limbo resolution.\r\n     */\n    this.activeLimboResolutionsByTarget = new Map();\n    this.limboDocumentRefs = new ReferenceSet();\n    /** Stores user completion handlers, indexed by User and BatchId. */\n    this.mutationUserCallbacks = {};\n    /** Stores user callbacks waiting for all pending writes to be acknowledged. */\n    this.pendingWritesCallbacks = new Map();\n    this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();\n    this.onlineState = \"Unknown\" /* OnlineState.Unknown */;\n    // The primary state is set to `true` or `false` immediately after Firestore\n    // startup. In the interim, a client should only be considered primary if\n    // `isPrimary` is true.\n    this._isPrimaryClient = undefined;\n  }\n  get isPrimaryClient() {\n    return this._isPrimaryClient === true;\n  }\n}\nfunction newSyncEngine(localStore, remoteStore, eventManager,\n// PORTING NOTE: Manages state synchronization in multi-tab environments.\nsharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {\n  const syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);\n  if (isPrimary) {\n    syncEngine._isPrimaryClient = true;\n  }\n  return syncEngine;\n}\n/**\r\n * Initiates the new listen, resolves promise when listen enqueued to the\r\n * server. All the subsequent view snapshots or errors are sent to the\r\n * subscribed handlers. Returns the initial snapshot.\r\n */\nasync function syncEngineListen(syncEngine, query, shouldListenToRemote = true) {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n  let viewSnapshot;\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n  if (queryView) {\n    // PORTING NOTE: With Multi-Tab Web, it is possible that a query view\n    // already exists when EventManager calls us for the first time. This\n    // happens when the primary tab is already listening to this query on\n    // behalf of another tab and the user of the primary also starts listening\n    // to the query. EventManager will not have an assigned target ID in this\n    // case and calls `listen` to obtain this ID.\n    syncEngineImpl.sharedClientState.addLocalQueryTarget(queryView.targetId);\n    viewSnapshot = queryView.view.computeInitialSnapshot();\n  } else {\n    viewSnapshot = await allocateTargetAndMaybeListen(syncEngineImpl, query, shouldListenToRemote, /** shouldInitializeView= */true);\n  }\n  return viewSnapshot;\n}\n/** Query has been listening to the cache, and tries to initiate the remote store listen */\nasync function triggerRemoteStoreListen(syncEngine, query) {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n  await allocateTargetAndMaybeListen(syncEngineImpl, query, /** shouldListenToRemote= */true, /** shouldInitializeView= */false);\n}\nasync function allocateTargetAndMaybeListen(syncEngineImpl, query, shouldListenToRemote, shouldInitializeView) {\n  const targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(query));\n  const targetId = targetData.targetId;\n  // PORTING NOTE: When the query is listening to cache only, we skip sending it over to Watch by\n  // not registering it in shared client state, and directly calculate initial snapshots and\n  // subsequent updates from cache. Otherwise, register the target ID with local Firestore client\n  // as active watch target.\n  const status = shouldListenToRemote ? syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId) : 'not-current';\n  let viewSnapshot;\n  if (shouldInitializeView) {\n    viewSnapshot = await initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, status === 'current', targetData.resumeToken);\n  }\n  if (syncEngineImpl.isPrimaryClient && shouldListenToRemote) {\n    remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n  }\n  return viewSnapshot;\n}\n/**\r\n * Registers a view for a previously unknown query and computes its initial\r\n * snapshot.\r\n */\nasync function initializeViewAndComputeSnapshot(syncEngineImpl, query, targetId, current, resumeToken) {\n  // PORTING NOTE: On Web only, we inject the code that registers new Limbo\n  // targets based on view changes. This allows us to only depend on Limbo\n  // changes when user code includes queries.\n  syncEngineImpl.applyDocChanges = (queryView, changes, remoteEvent) => applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);\n  const queryResult = await localStoreExecuteQuery(syncEngineImpl.localStore, query, /* usePreviousResults= */true);\n  const view = new View(query, queryResult.remoteKeys);\n  const viewDocChanges = view.computeDocChanges(queryResult.documents);\n  const synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== \"Offline\" /* OnlineState.Offline */, resumeToken);\n  const viewChange = view.applyChanges(viewDocChanges, /* limboResolutionEnabled= */syncEngineImpl.isPrimaryClient, synthesizedTargetChange);\n  updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);\n  const data = new QueryView(query, targetId, view);\n  syncEngineImpl.queryViewsByQuery.set(query, data);\n  if (syncEngineImpl.queriesByTarget.has(targetId)) {\n    syncEngineImpl.queriesByTarget.get(targetId).push(query);\n  } else {\n    syncEngineImpl.queriesByTarget.set(targetId, [query]);\n  }\n  return viewChange.snapshot;\n}\n/** Stops listening to the query. */\nasync function syncEngineUnlisten(syncEngine, query, shouldUnlistenToRemote) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n  // Only clean up the query view and target if this is the only query mapped\n  // to the target.\n  const queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);\n  if (queries.length > 1) {\n    syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(q => !queryEquals(q, query)));\n    syncEngineImpl.queryViewsByQuery.delete(query);\n    return;\n  }\n  // No other queries are mapped to the target, clean up the query and the target.\n  if (syncEngineImpl.isPrimaryClient) {\n    // We need to remove the local query target first to allow us to verify\n    // whether any other client is still interested in this target.\n    syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n    const targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);\n    if (!targetRemainsActive) {\n      await localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, /*keepPersistedTargetData=*/false).then(() => {\n        syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);\n        if (shouldUnlistenToRemote) {\n          remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\n        }\n        removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n      }).catch(ignoreIfPrimaryLeaseLoss);\n    }\n  } else {\n    removeAndCleanupTarget(syncEngineImpl, queryView.targetId);\n    await localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, /*keepPersistedTargetData=*/true);\n  }\n}\n/** Unlistens to the remote store while still listening to the cache. */\nasync function triggerRemoteStoreUnlisten(syncEngine, query) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n  const queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);\n  if (syncEngineImpl.isPrimaryClient && queries.length === 1) {\n    // PORTING NOTE: Unregister the target ID with local Firestore client as\n    // watch target.\n    syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);\n  }\n}\n/**\r\n * Initiates the write of local mutation batch which involves adding the\r\n * writes to the mutation queue, notifying the remote store about new\r\n * mutations and raising events for any changes this write caused.\r\n *\r\n * The promise returned by this call is resolved when the above steps\r\n * have completed, *not* when the write was acked by the backend. The\r\n * userCallback is resolved once the write was acked/rejected by the\r\n * backend (or failed locally for any other reason).\r\n */\nasync function syncEngineWrite(syncEngine, batch, userCallback) {\n  const syncEngineImpl = syncEngineEnsureWriteCallbacks(syncEngine);\n  try {\n    const result = await localStoreWriteLocally(syncEngineImpl.localStore, batch);\n    syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);\n    addMutationCallback(syncEngineImpl, result.batchId, userCallback);\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes);\n    await fillWritePipeline(syncEngineImpl.remoteStore);\n  } catch (e) {\n    // If we can't persist the mutation, we reject the user callback and\n    // don't send the mutation. The user can then retry the write.\n    const error = wrapInUserErrorIfRecoverable(e, `Failed to persist write`);\n    userCallback.reject(error);\n  }\n}\n/**\r\n * Applies one remote event to the sync engine, notifying any views of the\r\n * changes, and releasing any pending mutation batches that would become\r\n * visible because of the snapshot version the remote event contains.\r\n */\nasync function syncEngineApplyRemoteEvent(syncEngine, remoteEvent) {\n  const syncEngineImpl = debugCast(syncEngine);\n  try {\n    const changes = await localStoreApplyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent);\n    // Update `receivedDocument` as appropriate for any limbo targets.\n    remoteEvent.targetChanges.forEach((targetChange, targetId) => {\n      const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n      if (limboResolution) {\n        // Since this is a limbo resolution lookup, it's for a single document\n        // and it could be added, modified, or removed, but not a combination.\n        hardAssert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1);\n        if (targetChange.addedDocuments.size > 0) {\n          limboResolution.receivedDocument = true;\n        } else if (targetChange.modifiedDocuments.size > 0) {\n          hardAssert(limboResolution.receivedDocument);\n        } else if (targetChange.removedDocuments.size > 0) {\n          hardAssert(limboResolution.receivedDocument);\n          limboResolution.receivedDocument = false;\n        } else {\n          // This was probably just a CURRENT targetChange or similar.\n        }\n      }\n    });\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\n/**\r\n * Applies an OnlineState change to the sync engine and notifies any views of\r\n * the change.\r\n */\nfunction syncEngineApplyOnlineStateChange(syncEngine, onlineState, source) {\n  const syncEngineImpl = debugCast(syncEngine);\n  // If we are the secondary client, we explicitly ignore the remote store's\n  // online state (the local client may go offline, even though the primary\n  // tab remains online) and only apply the primary tab's online state from\n  // SharedClientState.\n  if (syncEngineImpl.isPrimaryClient && source === 0 /* OnlineStateSource.RemoteStore */ || !syncEngineImpl.isPrimaryClient && source === 1 /* OnlineStateSource.SharedClientState */) {\n    const newViewSnapshots = [];\n    syncEngineImpl.queryViewsByQuery.forEach((query, queryView) => {\n      const viewChange = queryView.view.applyOnlineStateChange(onlineState);\n      if (viewChange.snapshot) {\n        newViewSnapshots.push(viewChange.snapshot);\n      }\n    });\n    eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);\n    if (newViewSnapshots.length) {\n      syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\n    }\n    syncEngineImpl.onlineState = onlineState;\n    if (syncEngineImpl.isPrimaryClient) {\n      syncEngineImpl.sharedClientState.setOnlineState(onlineState);\n    }\n  }\n}\n/**\r\n * Rejects the listen for the given targetID. This can be triggered by the\r\n * backend for any active target.\r\n *\r\n * @param syncEngine - The sync engine implementation.\r\n * @param targetId - The targetID corresponds to one previously initiated by the\r\n * user as part of TargetData passed to listen() on RemoteStore.\r\n * @param err - A description of the condition that has forced the rejection.\r\n * Nearly always this will be an indication that the user is no longer\r\n * authorized to see the data matching the target.\r\n */\nasync function syncEngineRejectListen(syncEngine, targetId, err) {\n  const syncEngineImpl = debugCast(syncEngine);\n  // PORTING NOTE: Multi-tab only.\n  syncEngineImpl.sharedClientState.updateQueryState(targetId, 'rejected', err);\n  const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n  const limboKey = limboResolution && limboResolution.key;\n  if (limboKey) {\n    // TODO(klimt): We really only should do the following on permission\n    // denied errors, but we don't have the cause code here.\n    // It's a limbo doc. Create a synthetic event saying it was deleted.\n    // This is kind of a hack. Ideally, we would have a method in the local\n    // store to purge a document. However, it would be tricky to keep all of\n    // the local store's invariants with another method.\n    let documentUpdates = new SortedMap(DocumentKey.comparator);\n    // TODO(b/217189216): This limbo document should ideally have a read time,\n    // so that it is picked up by any read-time based scans. The backend,\n    // however, does not send a read time for target removals.\n    documentUpdates = documentUpdates.insert(limboKey, MutableDocument.newNoDocument(limboKey, SnapshotVersion.min()));\n    const resolvedLimboDocuments = documentKeySet().add(limboKey);\n    const event = new RemoteEvent(SnapshotVersion.min(), /* targetChanges= */new Map(), /* targetMismatches= */new SortedMap(primitiveComparator), documentUpdates, resolvedLimboDocuments);\n    await syncEngineApplyRemoteEvent(syncEngineImpl, event);\n    // Since this query failed, we won't want to manually unlisten to it.\n    // We only remove it from bookkeeping after we successfully applied the\n    // RemoteEvent. If `applyRemoteEvent()` throws, we want to re-listen to\n    // this query when the RemoteStore restarts the Watch stream, which should\n    // re-trigger the target failure.\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);\n    syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\n  } else {\n    await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /* keepPersistedTargetData */false).then(() => removeAndCleanupTarget(syncEngineImpl, targetId, err)).catch(ignoreIfPrimaryLeaseLoss);\n  }\n}\nasync function syncEngineApplySuccessfulWrite(syncEngine, mutationBatchResult) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const batchId = mutationBatchResult.batch.batchId;\n  try {\n    const changes = await localStoreAcknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult);\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught\n    // up), so we raise user callbacks first so that they consistently happen\n    // before listen events.\n    processUserCallback(syncEngineImpl, batchId, /*error=*/null);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n    syncEngineImpl.sharedClientState.updateMutationState(batchId, 'acknowledged');\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\nasync function syncEngineRejectFailedWrite(syncEngine, batchId, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  try {\n    const changes = await localStoreRejectBatch(syncEngineImpl.localStore, batchId);\n    // The local store may or may not be able to apply the write result and\n    // raise events immediately (depending on whether the watcher is caught up),\n    // so we raise user callbacks first so that they consistently happen before\n    // listen events.\n    processUserCallback(syncEngineImpl, batchId, error);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n    syncEngineImpl.sharedClientState.updateMutationState(batchId, 'rejected', error);\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);\n  } catch (error) {\n    await ignoreIfPrimaryLeaseLoss(error);\n  }\n}\n/**\r\n * Registers a user callback that resolves when all pending mutations at the moment of calling\r\n * are acknowledged .\r\n */\nasync function syncEngineRegisterPendingWritesCallback(syncEngine, callback) {\n  const syncEngineImpl = debugCast(syncEngine);\n  if (!canUseNetwork(syncEngineImpl.remoteStore)) {\n    logDebug(LOG_TAG$3, 'The network is disabled. The task returned by ' + \"'awaitPendingWrites()' will not complete until the network is enabled.\");\n  }\n  try {\n    const highestBatchId = await localStoreGetHighestUnacknowledgedBatchId(syncEngineImpl.localStore);\n    if (highestBatchId === BATCHID_UNKNOWN) {\n      // Trigger the callback right away if there is no pending writes at the moment.\n      callback.resolve();\n      return;\n    }\n    const callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];\n    callbacks.push(callback);\n    syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, 'Initialization of waitForPendingWrites() operation failed');\n    callback.reject(firestoreError);\n  }\n}\n/**\r\n * Triggers the callbacks that are waiting for this batch id to get acknowledged by server,\r\n * if there are any.\r\n */\nfunction triggerPendingWritesCallbacks(syncEngineImpl, batchId) {\n  (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(callback => {\n    callback.resolve();\n  });\n  syncEngineImpl.pendingWritesCallbacks.delete(batchId);\n}\n/** Reject all outstanding callbacks waiting for pending writes to complete. */\nfunction rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage) {\n  syncEngineImpl.pendingWritesCallbacks.forEach(callbacks => {\n    callbacks.forEach(callback => {\n      callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));\n    });\n  });\n  syncEngineImpl.pendingWritesCallbacks.clear();\n}\nfunction addMutationCallback(syncEngineImpl, batchId, callback) {\n  let newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\n  if (!newCallbacks) {\n    newCallbacks = new SortedMap(primitiveComparator);\n  }\n  newCallbacks = newCallbacks.insert(batchId, callback);\n  syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\n}\n/**\r\n * Resolves or rejects the user callback for the given batch and then discards\r\n * it.\r\n */\nfunction processUserCallback(syncEngine, batchId, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  let newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];\n  // NOTE: Mutations restored from persistence won't have callbacks, so it's\n  // okay for there to be no callback for this ID.\n  if (newCallbacks) {\n    const callback = newCallbacks.get(batchId);\n    if (callback) {\n      if (error) {\n        callback.reject(error);\n      } else {\n        callback.resolve();\n      }\n      newCallbacks = newCallbacks.remove(batchId);\n    }\n    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;\n  }\n}\nfunction removeAndCleanupTarget(syncEngineImpl, targetId, error = null) {\n  syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);\n  for (const query of syncEngineImpl.queriesByTarget.get(targetId)) {\n    syncEngineImpl.queryViewsByQuery.delete(query);\n    if (error) {\n      syncEngineImpl.syncEngineListener.onWatchError(query, error);\n    }\n  }\n  syncEngineImpl.queriesByTarget.delete(targetId);\n  if (syncEngineImpl.isPrimaryClient) {\n    const limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);\n    limboKeys.forEach(limboKey => {\n      const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboKey);\n      }\n    });\n  }\n}\nfunction removeLimboTarget(syncEngineImpl, key) {\n  syncEngineImpl.enqueuedLimboResolutions.delete(key.path.canonicalString());\n  // It's possible that the target already got removed because the query failed. In that case,\n  // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.\n  const limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);\n  if (limboTargetId === null) {\n    // This target already got removed, because the query failed.\n    return;\n  }\n  remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);\n  syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(key);\n  syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);\n  pumpEnqueuedLimboResolutions(syncEngineImpl);\n}\nfunction updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {\n  for (const limboChange of limboChanges) {\n    if (limboChange instanceof AddedLimboDocument) {\n      syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);\n      trackLimboChange(syncEngineImpl, limboChange);\n    } else if (limboChange instanceof RemovedLimboDocument) {\n      logDebug(LOG_TAG$3, 'Document no longer in limbo: ' + limboChange.key);\n      syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);\n      const isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);\n      if (!isReferenced) {\n        // We removed the last reference for this key\n        removeLimboTarget(syncEngineImpl, limboChange.key);\n      }\n    } else {\n      fail();\n    }\n  }\n}\nfunction trackLimboChange(syncEngineImpl, limboChange) {\n  const key = limboChange.key;\n  const keyString = key.path.canonicalString();\n  if (!syncEngineImpl.activeLimboTargetsByKey.get(key) && !syncEngineImpl.enqueuedLimboResolutions.has(keyString)) {\n    logDebug(LOG_TAG$3, 'New document in limbo: ' + key);\n    syncEngineImpl.enqueuedLimboResolutions.add(keyString);\n    pumpEnqueuedLimboResolutions(syncEngineImpl);\n  }\n}\n/**\r\n * Starts listens for documents in limbo that are enqueued for resolution,\r\n * subject to a maximum number of concurrent resolutions.\r\n *\r\n * Without bounding the number of concurrent resolutions, the server can fail\r\n * with \"resource exhausted\" errors which can lead to pathological client\r\n * behavior as seen in https://github.com/firebase/firebase-js-sdk/issues/2683.\r\n */\nfunction pumpEnqueuedLimboResolutions(syncEngineImpl) {\n  while (syncEngineImpl.enqueuedLimboResolutions.size > 0 && syncEngineImpl.activeLimboTargetsByKey.size < syncEngineImpl.maxConcurrentLimboResolutions) {\n    const keyString = syncEngineImpl.enqueuedLimboResolutions.values().next().value;\n    syncEngineImpl.enqueuedLimboResolutions.delete(keyString);\n    const key = new DocumentKey(ResourcePath.fromString(keyString));\n    const limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();\n    syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));\n    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);\n    remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, \"TargetPurposeLimboResolution\" /* TargetPurpose.LimboResolution */, ListenSequence.INVALID));\n  }\n}\nasync function syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const newSnaps = [];\n  const docChangesInAllViews = [];\n  const queriesProcessed = [];\n  if (syncEngineImpl.queryViewsByQuery.isEmpty()) {\n    // Return early since `onWatchChange()` might not have been assigned yet.\n    return;\n  }\n  syncEngineImpl.queryViewsByQuery.forEach((_, queryView) => {\n    queriesProcessed.push(syncEngineImpl.applyDocChanges(queryView, changes, remoteEvent).then(viewSnapshot => {\n      var _a;\n      // If there are changes, or we are handling a global snapshot, notify\n      // secondary clients to update query state.\n      if (viewSnapshot || remoteEvent) {\n        if (syncEngineImpl.isPrimaryClient) {\n          // Query state is set to `current` if:\n          // - There is a view change and it is up-to-date, or,\n          // - There is a global snapshot, the Target is current, and no changes to be resolved\n          const isCurrent = viewSnapshot ? !viewSnapshot.fromCache : (_a = remoteEvent === null || remoteEvent === void 0 ? void 0 : remoteEvent.targetChanges.get(queryView.targetId)) === null || _a === void 0 ? void 0 : _a.current;\n          syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, isCurrent ? 'current' : 'not-current');\n        }\n      }\n      // Update views if there are actual changes.\n      if (!!viewSnapshot) {\n        newSnaps.push(viewSnapshot);\n        const docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);\n        docChangesInAllViews.push(docChanges);\n      }\n    }));\n  });\n  await Promise.all(queriesProcessed);\n  syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);\n  await localStoreNotifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews);\n}\nasync function applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {\n  let viewDocChanges = queryView.view.computeDocChanges(changes);\n  if (viewDocChanges.needsRefill) {\n    // The query has a limit and some docs were removed, so we need\n    // to re-run the query against the local store to make sure we\n    // didn't lose any good docs that had been past the limit.\n    viewDocChanges = await localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, /* usePreviousResults= */false).then(({\n      documents\n    }) => {\n      return queryView.view.computeDocChanges(documents, viewDocChanges);\n    });\n  }\n  const targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);\n  const targetIsPendingReset = remoteEvent && remoteEvent.targetMismatches.get(queryView.targetId) != null;\n  const viewChange = queryView.view.applyChanges(viewDocChanges, /* limboResolutionEnabled= */syncEngineImpl.isPrimaryClient, targetChange, targetIsPendingReset);\n  updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);\n  return viewChange.snapshot;\n}\nasync function syncEngineHandleCredentialChange(syncEngine, user) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const userChanged = !syncEngineImpl.currentUser.isEqual(user);\n  if (userChanged) {\n    logDebug(LOG_TAG$3, 'User change. New user:', user.toKey());\n    const result = await localStoreHandleUserChange(syncEngineImpl.localStore, user);\n    syncEngineImpl.currentUser = user;\n    // Fails tasks waiting for pending writes requested by previous user.\n    rejectOutstandingPendingWritesCallbacks(syncEngineImpl, \"'waitForPendingWrites' promise is rejected due to a user change.\");\n    // TODO(b/114226417): Consider calling this only in the primary tab.\n    syncEngineImpl.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments);\n  }\n}\nfunction syncEngineGetRemoteKeysForTarget(syncEngine, targetId) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);\n  if (limboResolution && limboResolution.receivedDocument) {\n    return documentKeySet().add(limboResolution.key);\n  } else {\n    let keySet = documentKeySet();\n    const queries = syncEngineImpl.queriesByTarget.get(targetId);\n    if (!queries) {\n      return keySet;\n    }\n    for (const query of queries) {\n      const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n      keySet = keySet.unionWith(queryView.view.syncedDocuments);\n    }\n    return keySet;\n  }\n}\n/**\r\n * Reconcile the list of synced documents in an existing view with those\r\n * from persistence.\r\n */\nasync function synchronizeViewAndComputeSnapshot(syncEngine, queryView) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const queryResult = await localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, /* usePreviousResults= */true);\n  const viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);\n  if (syncEngineImpl.isPrimaryClient) {\n    updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);\n  }\n  return viewSnapshot;\n}\n/**\r\n * Retrieves newly changed documents from remote document cache and raises\r\n * snapshots if needed.\r\n */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineSynchronizeWithChangedDocuments(syncEngine, collectionGroup) {\n  const syncEngineImpl = debugCast(syncEngine);\n  return localStoreGetNewDocumentChanges(syncEngineImpl.localStore, collectionGroup).then(changes => syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes));\n}\n/** Applies a mutation state to an existing batch.  */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineApplyBatchState(syncEngine, batchId, batchState, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const documents = await localStoreLookupMutationDocuments(syncEngineImpl.localStore, batchId);\n  if (documents === null) {\n    // A throttled tab may not have seen the mutation before it was completed\n    // and removed from the mutation queue, in which case we won't have cached\n    // the affected documents. In this case we can safely ignore the update\n    // since that means we didn't apply the mutation locally at all (if we\n    // had, we would have cached the affected documents), and so we will just\n    // see any resulting document changes via normal remote document updates\n    // as applicable.\n    logDebug(LOG_TAG$3, 'Cannot apply mutation batch with id: ' + batchId);\n    return;\n  }\n  if (batchState === 'pending') {\n    // If we are the primary client, we need to send this write to the\n    // backend. Secondary clients will ignore these writes since their remote\n    // connection is disabled.\n    await fillWritePipeline(syncEngineImpl.remoteStore);\n  } else if (batchState === 'acknowledged' || batchState === 'rejected') {\n    // NOTE: Both these methods are no-ops for batches that originated from\n    // other clients.\n    processUserCallback(syncEngineImpl, batchId, error ? error : null);\n    triggerPendingWritesCallbacks(syncEngineImpl, batchId);\n    localStoreRemoveCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);\n  } else {\n    fail();\n  }\n  await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents);\n}\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineApplyPrimaryState(syncEngine, isPrimary) {\n  const syncEngineImpl = debugCast(syncEngine);\n  ensureWatchCallbacks(syncEngineImpl);\n  syncEngineEnsureWriteCallbacks(syncEngineImpl);\n  if (isPrimary === true && syncEngineImpl._isPrimaryClient !== true) {\n    // Secondary tabs only maintain Views for their local listeners and the\n    // Views internal state may not be 100% populated (in particular\n    // secondary tabs don't track syncedDocuments, the set of documents the\n    // server considers to be in the target). So when a secondary becomes\n    // primary, we need to need to make sure that all views for all targets\n    // match the state on disk.\n    const activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();\n    const activeQueries = await synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray());\n    syncEngineImpl._isPrimaryClient = true;\n    await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true);\n    for (const targetData of activeQueries) {\n      remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n    }\n  } else if (isPrimary === false && syncEngineImpl._isPrimaryClient !== false) {\n    const activeTargets = [];\n    let p = Promise.resolve();\n    syncEngineImpl.queriesByTarget.forEach((_, targetId) => {\n      if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {\n        activeTargets.push(targetId);\n      } else {\n        p = p.then(() => {\n          removeAndCleanupTarget(syncEngineImpl, targetId);\n          return localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /*keepPersistedTargetData=*/true);\n        });\n      }\n      remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n    });\n    await p;\n    await synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets);\n    resetLimboDocuments(syncEngineImpl);\n    syncEngineImpl._isPrimaryClient = false;\n    await remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false);\n  }\n}\n// PORTING NOTE: Multi-Tab only.\nfunction resetLimboDocuments(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.activeLimboResolutionsByTarget.forEach((_, targetId) => {\n    remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n  });\n  syncEngineImpl.limboDocumentRefs.removeAllReferences();\n  syncEngineImpl.activeLimboResolutionsByTarget = new Map();\n  syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);\n}\n/**\r\n * Reconcile the query views of the provided query targets with the state from\r\n * persistence. Raises snapshots for any changes that affect the local\r\n * client and returns the updated state of all target's query data.\r\n *\r\n * @param syncEngine - The sync engine implementation\r\n * @param targets - the list of targets with views that need to be recomputed\r\n * @param transitionToPrimary - `true` iff the tab transitions from a secondary\r\n * tab to a primary tab\r\n */\n// PORTING NOTE: Multi-Tab only.\nasync function synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {\n  const syncEngineImpl = debugCast(syncEngine);\n  const activeQueries = [];\n  const newViewSnapshots = [];\n  for (const targetId of targets) {\n    let targetData;\n    const queries = syncEngineImpl.queriesByTarget.get(targetId);\n    if (queries && queries.length !== 0) {\n      // For queries that have a local View, we fetch their current state\n      // from LocalStore (as the resume token and the snapshot version\n      // might have changed) and reconcile their views with the persisted\n      // state (the list of syncedDocuments may have gotten out of sync).\n      targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]));\n      for (const query of queries) {\n        const queryView = syncEngineImpl.queryViewsByQuery.get(query);\n        const viewChange = await synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView);\n        if (viewChange.snapshot) {\n          newViewSnapshots.push(viewChange.snapshot);\n        }\n      }\n    } else {\n      // For queries that never executed on this client, we need to\n      // allocate the target in LocalStore and initialize a new View.\n      const target = await localStoreGetCachedTarget(syncEngineImpl.localStore, targetId);\n      targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, target);\n      await initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId, /*current=*/false, targetData.resumeToken);\n    }\n    activeQueries.push(targetData);\n  }\n  syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);\n  return activeQueries;\n}\n/**\r\n * Creates a `Query` object from the specified `Target`. There is no way to\r\n * obtain the original `Query`, so we synthesize a `Query` from the `Target`\r\n * object.\r\n *\r\n * The synthesized result might be different from the original `Query`, but\r\n * since the synthesized `Query` should return the same results as the\r\n * original one (only the presentation of results might differ), the potential\r\n * difference will not cause issues.\r\n */\n// PORTING NOTE: Multi-Tab only.\nfunction synthesizeTargetToQuery(target) {\n  return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, \"F\" /* LimitType.First */, target.startAt, target.endAt);\n}\n/** Returns the IDs of the clients that are currently active. */\n// PORTING NOTE: Multi-Tab only.\nfunction syncEngineGetActiveClients(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  return localStoreGetActiveClients(syncEngineImpl.localStore);\n}\n/** Applies a query target change from a different tab. */\n// PORTING NOTE: Multi-Tab only.\nasync function syncEngineApplyTargetState(syncEngine, targetId, state, error) {\n  const syncEngineImpl = debugCast(syncEngine);\n  if (syncEngineImpl._isPrimaryClient) {\n    // If we receive a target state notification via WebStorage, we are\n    // either already secondary or another tab has taken the primary lease.\n    logDebug(LOG_TAG$3, 'Ignoring unexpected query state notification.');\n    return;\n  }\n  const query = syncEngineImpl.queriesByTarget.get(targetId);\n  if (query && query.length > 0) {\n    switch (state) {\n      case 'current':\n      case 'not-current':\n        {\n          const changes = await localStoreGetNewDocumentChanges(syncEngineImpl.localStore, queryCollectionGroup(query[0]));\n          const synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current', ByteString.EMPTY_BYTE_STRING);\n          await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent);\n          break;\n        }\n      case 'rejected':\n        {\n          await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /* keepPersistedTargetData */true);\n          removeAndCleanupTarget(syncEngineImpl, targetId, error);\n          break;\n        }\n      default:\n        fail();\n    }\n  }\n}\n/** Adds or removes Watch targets for queries from different tabs. */\nasync function syncEngineApplyActiveTargetsChange(syncEngine, added, removed) {\n  const syncEngineImpl = ensureWatchCallbacks(syncEngine);\n  if (!syncEngineImpl._isPrimaryClient) {\n    return;\n  }\n  for (const targetId of added) {\n    // A target is already listening to remote store if it is already registered to\n    // sharedClientState.\n    const targetAlreadyListeningToRemoteStore = syncEngineImpl.queriesByTarget.has(targetId) && syncEngineImpl.sharedClientState.isActiveQueryTarget(targetId);\n    if (targetAlreadyListeningToRemoteStore) {\n      logDebug(LOG_TAG$3, 'Adding an already active target ' + targetId);\n      continue;\n    }\n    const target = await localStoreGetCachedTarget(syncEngineImpl.localStore, targetId);\n    const targetData = await localStoreAllocateTarget(syncEngineImpl.localStore, target);\n    await initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId, /*current=*/false, targetData.resumeToken);\n    remoteStoreListen(syncEngineImpl.remoteStore, targetData);\n  }\n  for (const targetId of removed) {\n    // Check that the target is still active since the target might have been\n    // removed if it has been rejected by the backend.\n    if (!syncEngineImpl.queriesByTarget.has(targetId)) {\n      continue;\n    }\n    // Release queries that are still active.\n    await localStoreReleaseTarget(syncEngineImpl.localStore, targetId, /* keepPersistedTargetData */false).then(() => {\n      remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);\n      removeAndCleanupTarget(syncEngineImpl, targetId);\n    }).catch(ignoreIfPrimaryLeaseLoss);\n  }\n}\nfunction ensureWatchCallbacks(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = syncEngineApplyRemoteEvent.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = syncEngineGetRemoteKeysForTarget.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.rejectListen = syncEngineRejectListen.bind(null, syncEngineImpl);\n  syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);\n  syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);\n  return syncEngineImpl;\n}\nfunction syncEngineEnsureWriteCallbacks(syncEngine) {\n  const syncEngineImpl = debugCast(syncEngine);\n  syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = syncEngineApplySuccessfulWrite.bind(null, syncEngineImpl);\n  syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = syncEngineRejectFailedWrite.bind(null, syncEngineImpl);\n  return syncEngineImpl;\n}\n/**\r\n * Loads a Firestore bundle into the SDK. The returned promise resolves when\r\n * the bundle finished loading.\r\n *\r\n * @param syncEngine - SyncEngine to use.\r\n * @param bundleReader - Bundle to load into the SDK.\r\n * @param task - LoadBundleTask used to update the loading progress to public API.\r\n */\nfunction syncEngineLoadBundle(syncEngine, bundleReader, task) {\n  const syncEngineImpl = debugCast(syncEngine);\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  loadBundleImpl(syncEngineImpl, bundleReader, task).then(collectionGroups => {\n    syncEngineImpl.sharedClientState.notifyBundleLoaded(collectionGroups);\n  });\n}\n/** Loads a bundle and returns the list of affected collection groups. */\nasync function loadBundleImpl(syncEngine, reader, task) {\n  try {\n    const metadata = await reader.getMetadata();\n    const skip = await localStoreHasNewerBundle(syncEngine.localStore, metadata);\n    if (skip) {\n      await reader.close();\n      task._completeWith(bundleSuccessProgress(metadata));\n      return Promise.resolve(new Set());\n    }\n    task._updateProgress(bundleInitialProgress(metadata));\n    const loader = new BundleLoader(metadata, syncEngine.localStore, reader.serializer);\n    let element = await reader.nextElement();\n    while (element) {\n      ;\n      const progress = await loader.addSizedElement(element);\n      if (progress) {\n        task._updateProgress(progress);\n      }\n      element = await reader.nextElement();\n    }\n    const result = await loader.complete();\n    await syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, result.changedDocs, /* remoteEvent */undefined);\n    // Save metadata, so loading the same bundle will skip.\n    await localStoreSaveBundle(syncEngine.localStore, metadata);\n    task._completeWith(result.progress);\n    return Promise.resolve(result.changedCollectionGroups);\n  } catch (e) {\n    logWarn(LOG_TAG$3, `Loading bundle failed with ${e}`);\n    task._failWith(e);\n    return Promise.resolve(new Set());\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provides all components needed for Firestore with in-memory persistence.\r\n * Uses EagerGC garbage collection.\r\n */\nclass MemoryOfflineComponentProvider {\n  constructor() {\n    this.synchronizeTabs = false;\n  }\n  async initialize(cfg) {\n    this.serializer = newSerializer(cfg.databaseInfo.databaseId);\n    this.sharedClientState = this.createSharedClientState(cfg);\n    this.persistence = this.createPersistence(cfg);\n    await this.persistence.start();\n    this.localStore = this.createLocalStore(cfg);\n    this.gcScheduler = this.createGarbageCollectionScheduler(cfg, this.localStore);\n    this.indexBackfillerScheduler = this.createIndexBackfillerScheduler(cfg, this.localStore);\n  }\n  createGarbageCollectionScheduler(cfg, localStore) {\n    return null;\n  }\n  createIndexBackfillerScheduler(cfg, localStore) {\n    return null;\n  }\n  createLocalStore(cfg) {\n    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\n  }\n  createPersistence(cfg) {\n    return new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer);\n  }\n  createSharedClientState(cfg) {\n    return new MemorySharedClientState();\n  }\n  async terminate() {\n    var _a, _b;\n    (_a = this.gcScheduler) === null || _a === void 0 ? void 0 : _a.stop();\n    (_b = this.indexBackfillerScheduler) === null || _b === void 0 ? void 0 : _b.stop();\n    this.sharedClientState.shutdown();\n    await this.persistence.shutdown();\n  }\n}\nclass LruGcMemoryOfflineComponentProvider extends MemoryOfflineComponentProvider {\n  constructor(cacheSizeBytes) {\n    super();\n    this.cacheSizeBytes = cacheSizeBytes;\n  }\n  createGarbageCollectionScheduler(cfg, localStore) {\n    hardAssert(this.persistence.referenceDelegate instanceof MemoryLruDelegate);\n    const garbageCollector = this.persistence.referenceDelegate.garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue, localStore);\n  }\n  createPersistence(cfg) {\n    const lruParams = this.cacheSizeBytes !== undefined ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;\n    return new MemoryPersistence(p => MemoryLruDelegate.factory(p, lruParams), this.serializer);\n  }\n}\n/**\r\n * Provides all components needed for Firestore with IndexedDB persistence.\r\n */\nclass IndexedDbOfflineComponentProvider extends MemoryOfflineComponentProvider {\n  constructor(onlineComponentProvider, cacheSizeBytes, forceOwnership) {\n    super();\n    this.onlineComponentProvider = onlineComponentProvider;\n    this.cacheSizeBytes = cacheSizeBytes;\n    this.forceOwnership = forceOwnership;\n    this.synchronizeTabs = false;\n  }\n  async initialize(cfg) {\n    await super.initialize(cfg);\n    await this.onlineComponentProvider.initialize(this, cfg);\n    // Enqueue writes from a previous session\n    await syncEngineEnsureWriteCallbacks(this.onlineComponentProvider.syncEngine);\n    await fillWritePipeline(this.onlineComponentProvider.remoteStore);\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(() => {\n      if (this.gcScheduler && !this.gcScheduler.started) {\n        this.gcScheduler.start();\n      }\n      if (this.indexBackfillerScheduler && !this.indexBackfillerScheduler.started) {\n        this.indexBackfillerScheduler.start();\n      }\n      return Promise.resolve();\n    });\n  }\n  createLocalStore(cfg) {\n    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);\n  }\n  createGarbageCollectionScheduler(cfg, localStore) {\n    const garbageCollector = this.persistence.referenceDelegate.garbageCollector;\n    return new LruScheduler(garbageCollector, cfg.asyncQueue, localStore);\n  }\n  createIndexBackfillerScheduler(cfg, localStore) {\n    const indexBackfiller = new IndexBackfiller(localStore, this.persistence);\n    return new IndexBackfillerScheduler(cfg.asyncQueue, indexBackfiller);\n  }\n  createPersistence(cfg) {\n    const persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\n    const lruParams = this.cacheSizeBytes !== undefined ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;\n    return new IndexedDbPersistence(this.synchronizeTabs, persistenceKey, cfg.clientId, lruParams, cfg.asyncQueue, getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);\n  }\n  createSharedClientState(cfg) {\n    return new MemorySharedClientState();\n  }\n}\n/**\r\n * Provides all components needed for Firestore with multi-tab IndexedDB\r\n * persistence.\r\n *\r\n * In the legacy client, this provider is used to provide both multi-tab and\r\n * non-multi-tab persistence since we cannot tell at build time whether\r\n * `synchronizeTabs` will be enabled.\r\n */\nclass MultiTabOfflineComponentProvider extends IndexedDbOfflineComponentProvider {\n  constructor(onlineComponentProvider, cacheSizeBytes) {\n    super(onlineComponentProvider, cacheSizeBytes, /* forceOwnership= */false);\n    this.onlineComponentProvider = onlineComponentProvider;\n    this.cacheSizeBytes = cacheSizeBytes;\n    this.synchronizeTabs = true;\n  }\n  async initialize(cfg) {\n    await super.initialize(cfg);\n    const syncEngine = this.onlineComponentProvider.syncEngine;\n    if (this.sharedClientState instanceof WebStorageSharedClientState) {\n      this.sharedClientState.syncEngine = {\n        applyBatchState: syncEngineApplyBatchState.bind(null, syncEngine),\n        applyTargetState: syncEngineApplyTargetState.bind(null, syncEngine),\n        applyActiveTargetsChange: syncEngineApplyActiveTargetsChange.bind(null, syncEngine),\n        getActiveClients: syncEngineGetActiveClients.bind(null, syncEngine),\n        synchronizeWithChangedDocuments: syncEngineSynchronizeWithChangedDocuments.bind(null, syncEngine)\n      };\n      await this.sharedClientState.start();\n    }\n    // NOTE: This will immediately call the listener, so we make sure to\n    // set it after localStore / remoteStore are started.\n    await this.persistence.setPrimaryStateListener(async isPrimary => {\n      await syncEngineApplyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary);\n      if (this.gcScheduler) {\n        if (isPrimary && !this.gcScheduler.started) {\n          this.gcScheduler.start();\n        } else if (!isPrimary) {\n          this.gcScheduler.stop();\n        }\n      }\n      if (this.indexBackfillerScheduler) {\n        if (isPrimary && !this.indexBackfillerScheduler.started) {\n          this.indexBackfillerScheduler.start();\n        } else if (!isPrimary) {\n          this.indexBackfillerScheduler.stop();\n        }\n      }\n    });\n  }\n  createSharedClientState(cfg) {\n    const window = getWindow();\n    if (!WebStorageSharedClientState.isAvailable(window)) {\n      throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');\n    }\n    const persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);\n    return new WebStorageSharedClientState(window, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);\n  }\n}\n/**\r\n * Initializes and wires the components that are needed to interface with the\r\n * network.\r\n */\nclass OnlineComponentProvider {\n  async initialize(offlineComponentProvider, cfg) {\n    if (this.localStore) {\n      // OnlineComponentProvider may get initialized multiple times if\n      // multi-tab persistence is used.\n      return;\n    }\n    this.localStore = offlineComponentProvider.localStore;\n    this.sharedClientState = offlineComponentProvider.sharedClientState;\n    this.datastore = this.createDatastore(cfg);\n    this.remoteStore = this.createRemoteStore(cfg);\n    this.eventManager = this.createEventManager(cfg);\n    this.syncEngine = this.createSyncEngine(cfg, /* startAsPrimary=*/!offlineComponentProvider.synchronizeTabs);\n    this.sharedClientState.onlineStateHandler = onlineState => syncEngineApplyOnlineStateChange(this.syncEngine, onlineState, 1 /* OnlineStateSource.SharedClientState */);\n    this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(null, this.syncEngine);\n    await remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient);\n  }\n  createEventManager(cfg) {\n    return newEventManager();\n  }\n  createDatastore(cfg) {\n    const serializer = newSerializer(cfg.databaseInfo.databaseId);\n    const connection = newConnection(cfg.databaseInfo);\n    return newDatastore(cfg.authCredentials, cfg.appCheckCredentials, connection, serializer);\n  }\n  createRemoteStore(cfg) {\n    return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, onlineState => syncEngineApplyOnlineStateChange(this.syncEngine, onlineState, 0 /* OnlineStateSource.RemoteStore */), newConnectivityMonitor());\n  }\n  createSyncEngine(cfg, startAsPrimary) {\n    return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, startAsPrimary);\n  }\n  async terminate() {\n    var _a, _b;\n    await remoteStoreShutdown(this.remoteStore);\n    (_a = this.datastore) === null || _a === void 0 ? void 0 : _a.terminate();\n    (_b = this.eventManager) === null || _b === void 0 ? void 0 : _b.terminate();\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * How many bytes to read each time when `ReadableStreamReader.read()` is\r\n * called. Only applicable for byte streams that we control (e.g. those backed\r\n * by an UInt8Array).\r\n */\nconst DEFAULT_BYTES_PER_READ = 10240;\n/**\r\n * Builds a `ByteStreamReader` from a UInt8Array.\r\n * @param source - The data source to use.\r\n * @param bytesPerRead - How many bytes each `read()` from the returned reader\r\n *        will read.\r\n */\nfunction toByteStreamReaderHelper(source, bytesPerRead = DEFAULT_BYTES_PER_READ) {\n  let readFrom = 0;\n  // The TypeScript definition for ReadableStreamReader changed. We use\n  // `any` here to allow this code to compile with different versions.\n  // See https://github.com/microsoft/TypeScript/issues/42970\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const reader = {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    async read() {\n      if (readFrom < source.byteLength) {\n        const result = {\n          value: source.slice(readFrom, readFrom + bytesPerRead),\n          done: false\n        };\n        readFrom += bytesPerRead;\n        return result;\n      }\n      return {\n        done: true\n      };\n    },\n    async cancel() {},\n    releaseLock() {},\n    closed: Promise.resolve()\n  };\n  return reader;\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateNonEmptyArgument(functionName, argumentName, argument) {\n  if (!argument) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() cannot be called with an empty ${argumentName}.`);\n  }\n}\n/**\r\n * Validates that two boolean options are not set at the same time.\r\n * @internal\r\n */\nfunction validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {\n  if (argument1 === true && argument2 === true) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `${optionName1} and ${optionName2} cannot be used together.`);\n  }\n}\n/**\r\n * Validates that `path` refers to a document (indicated by the fact it contains\r\n * an even numbers of segments).\r\n */\nfunction validateDocumentPath(path) {\n  if (!DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid document reference. Document references must have an even number of segments, but ${path} has ${path.length}.`);\n  }\n}\n/**\r\n * Validates that `path` refers to a collection (indicated by the fact it\r\n * contains an odd numbers of segments).\r\n */\nfunction validateCollectionPath(path) {\n  if (DocumentKey.isDocumentKey(path)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid collection reference. Collection references must have an odd number of segments, but ${path} has ${path.length}.`);\n  }\n}\n/**\r\n * Returns true if it's a non-null object without a custom prototype\r\n * (i.e. excludes Array, Date, etc.).\r\n */\nfunction isPlainObject(input) {\n  return typeof input === 'object' && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);\n}\n/** Returns a string describing the type / value of the provided input. */\nfunction valueDescription(input) {\n  if (input === undefined) {\n    return 'undefined';\n  } else if (input === null) {\n    return 'null';\n  } else if (typeof input === 'string') {\n    if (input.length > 20) {\n      input = `${input.substring(0, 20)}...`;\n    }\n    return JSON.stringify(input);\n  } else if (typeof input === 'number' || typeof input === 'boolean') {\n    return '' + input;\n  } else if (typeof input === 'object') {\n    if (input instanceof Array) {\n      return 'an array';\n    } else {\n      const customObjectName = tryGetCustomObjectType(input);\n      if (customObjectName) {\n        return `a custom ${customObjectName} object`;\n      } else {\n        return 'an object';\n      }\n    }\n  } else if (typeof input === 'function') {\n    return 'a function';\n  } else {\n    return fail();\n  }\n}\n/** try to get the constructor name for an object. */\nfunction tryGetCustomObjectType(input) {\n  if (input.constructor) {\n    return input.constructor.name;\n  }\n  return null;\n}\n/**\r\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\r\n * underlying instance. Throws if  `obj` is not an instance of `T`.\r\n *\r\n * This cast is used in the Lite and Full SDK to verify instance types for\r\n * arguments passed to the public API.\r\n * @internal\r\n */\nfunction cast(obj,\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconstructor) {\n  if ('_delegate' in obj) {\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj = obj._delegate;\n  }\n  if (!(obj instanceof constructor)) {\n    if (constructor.name === obj.constructor.name) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Type does not match the expected instance. Did you pass a ' + `reference from a different Firestore SDK?`);\n    } else {\n      const description = valueDescription(obj);\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Expected type '${constructor.name}', but it was: ${description}`);\n    }\n  }\n  return obj;\n}\nfunction validatePositiveNumber(functionName, n) {\n  if (n <= 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() requires a positive number, but it was: ${n}.`);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * On Node, only supported data source is a `Uint8Array` for now.\r\n */\nfunction toByteStreamReader(source, bytesPerRead) {\n  if (!(source instanceof Uint8Array)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `NodePlatform.toByteStreamReader expects source to be Uint8Array, got ${valueDescription(source)}`);\n  }\n  return toByteStreamReaderHelper(source, bytesPerRead);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*\r\n * A wrapper implementation of Observer<T> that will dispatch events\r\n * asynchronously. To allow immediate silencing, a mute call is added which\r\n * causes events scheduled to no longer be raised.\r\n */\nclass AsyncObserver {\n  constructor(observer) {\n    this.observer = observer;\n    /**\r\n     * When set to true, will not raise future events. Necessary to deal with\r\n     * async detachment of listener.\r\n     */\n    this.muted = false;\n  }\n  next(value) {\n    if (this.observer.next) {\n      this.scheduleEvent(this.observer.next, value);\n    }\n  }\n  error(error) {\n    if (this.observer.error) {\n      this.scheduleEvent(this.observer.error, error);\n    } else {\n      logError('Uncaught Error in snapshot listener:', error.toString());\n    }\n  }\n  mute() {\n    this.muted = true;\n  }\n  scheduleEvent(eventHandler, event) {\n    if (!this.muted) {\n      setTimeout(() => {\n        if (!this.muted) {\n          eventHandler(event);\n        }\n      }, 0);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A complete element in the bundle stream, together with the byte length it\r\n * occupies in the stream.\r\n */\nclass SizedBundleElement {\n  constructor(payload,\n  // How many bytes this element takes to store in the bundle.\n  byteLength) {\n    this.payload = payload;\n    this.byteLength = byteLength;\n  }\n  isBundleMetadata() {\n    return 'metadata' in this.payload;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A class representing a bundle.\r\n *\r\n * Takes a bundle stream or buffer, and presents abstractions to read bundled\r\n * elements out of the underlying content.\r\n */\nclass BundleReaderImpl {\n  constructor( /** The reader to read from underlying binary bundle data source. */\n  reader, serializer) {\n    this.reader = reader;\n    this.serializer = serializer;\n    /** Cached bundle metadata. */\n    this.metadata = new Deferred();\n    /**\r\n     * Internal buffer to hold bundle content, accumulating incomplete element\r\n     * content.\r\n     */\n    this.buffer = new Uint8Array();\n    this.textDecoder = newTextDecoder();\n    // Read the metadata (which is the first element).\n    this.nextElementImpl().then(element => {\n      if (element && element.isBundleMetadata()) {\n        this.metadata.resolve(element.payload.metadata);\n      } else {\n        this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(element === null || element === void 0 ? void 0 : element.payload)}`));\n      }\n    }, error => this.metadata.reject(error));\n  }\n  close() {\n    return this.reader.cancel();\n  }\n  async getMetadata() {\n    return this.metadata.promise;\n  }\n  async nextElement() {\n    // Makes sure metadata is read before proceeding.\n    await this.getMetadata();\n    return this.nextElementImpl();\n  }\n  /**\r\n   * Reads from the head of internal buffer, and pulling more data from\r\n   * underlying stream if a complete element cannot be found, until an\r\n   * element(including the prefixed length and the JSON string) is found.\r\n   *\r\n   * Once a complete element is read, it is dropped from internal buffer.\r\n   *\r\n   * Returns either the bundled element, or null if we have reached the end of\r\n   * the stream.\r\n   */\n  async nextElementImpl() {\n    const lengthBuffer = await this.readLength();\n    if (lengthBuffer === null) {\n      return null;\n    }\n    const lengthString = this.textDecoder.decode(lengthBuffer);\n    const length = Number(lengthString);\n    if (isNaN(length)) {\n      this.raiseError(`length string (${lengthString}) is not valid number`);\n    }\n    const jsonString = await this.readJsonString(length);\n    return new SizedBundleElement(JSON.parse(jsonString), lengthBuffer.length + length);\n  }\n  /** First index of '{' from the underlying buffer. */\n  indexOfOpenBracket() {\n    return this.buffer.findIndex(v => v === '{'.charCodeAt(0));\n  }\n  /**\r\n   * Reads from the beginning of the internal buffer, until the first '{', and\r\n   * return the content.\r\n   *\r\n   * If reached end of the stream, returns a null.\r\n   */\n  async readLength() {\n    while (this.indexOfOpenBracket() < 0) {\n      const done = await this.pullMoreDataToBuffer();\n      if (done) {\n        break;\n      }\n    }\n    // Broke out of the loop because underlying stream is closed, and there\n    // happens to be no more data to process.\n    if (this.buffer.length === 0) {\n      return null;\n    }\n    const position = this.indexOfOpenBracket();\n    // Broke out of the loop because underlying stream is closed, but still\n    // cannot find an open bracket.\n    if (position < 0) {\n      this.raiseError('Reached the end of bundle when a length string is expected.');\n    }\n    const result = this.buffer.slice(0, position);\n    // Update the internal buffer to drop the read length.\n    this.buffer = this.buffer.slice(position);\n    return result;\n  }\n  /**\r\n   * Reads from a specified position from the internal buffer, for a specified\r\n   * number of bytes, pulling more data from the underlying stream if needed.\r\n   *\r\n   * Returns a string decoded from the read bytes.\r\n   */\n  async readJsonString(length) {\n    while (this.buffer.length < length) {\n      const done = await this.pullMoreDataToBuffer();\n      if (done) {\n        this.raiseError('Reached the end of bundle when more is expected.');\n      }\n    }\n    const result = this.textDecoder.decode(this.buffer.slice(0, length));\n    // Update the internal buffer to drop the read json string.\n    this.buffer = this.buffer.slice(length);\n    return result;\n  }\n  raiseError(message) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.reader.cancel();\n    throw new Error(`Invalid bundle format: ${message}`);\n  }\n  /**\r\n   * Pulls more data from underlying stream to internal buffer.\r\n   * Returns a boolean indicating whether the stream is finished.\r\n   */\n  async pullMoreDataToBuffer() {\n    const result = await this.reader.read();\n    if (!result.done) {\n      const newBuffer = new Uint8Array(this.buffer.length + result.value.length);\n      newBuffer.set(this.buffer);\n      newBuffer.set(result.value, this.buffer.length);\n      this.buffer = newBuffer;\n    }\n    return result.done;\n  }\n}\nfunction newBundleReader(reader, serializer) {\n  return new BundleReaderImpl(reader, serializer);\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Internal transaction object responsible for accumulating the mutations to\r\n * perform and the base versions for any documents read.\r\n */\nclass Transaction$2 {\n  constructor(datastore) {\n    this.datastore = datastore;\n    // The version of each document that was read during this transaction.\n    this.readVersions = new Map();\n    this.mutations = [];\n    this.committed = false;\n    /**\r\n     * A deferred usage error that occurred previously in this transaction that\r\n     * will cause the transaction to fail once it actually commits.\r\n     */\n    this.lastTransactionError = null;\n    /**\r\n     * Set of documents that have been written in the transaction.\r\n     *\r\n     * When there's more than one write to the same key in a transaction, any\r\n     * writes after the first are handled differently.\r\n     */\n    this.writtenDocs = new Set();\n  }\n  async lookup(keys) {\n    this.ensureCommitNotCalled();\n    if (this.mutations.length > 0) {\n      this.lastTransactionError = new FirestoreError(Code.INVALID_ARGUMENT, 'Firestore transactions require all reads to be executed before all writes.');\n      throw this.lastTransactionError;\n    }\n    const docs = await invokeBatchGetDocumentsRpc(this.datastore, keys);\n    docs.forEach(doc => this.recordVersion(doc));\n    return docs;\n  }\n  set(key, data) {\n    this.write(data.toMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  }\n  update(key, data) {\n    try {\n      this.write(data.toMutation(key, this.preconditionForUpdate(key)));\n    } catch (e) {\n      this.lastTransactionError = e;\n    }\n    this.writtenDocs.add(key.toString());\n  }\n  delete(key) {\n    this.write(new DeleteMutation(key, this.precondition(key)));\n    this.writtenDocs.add(key.toString());\n  }\n  async commit() {\n    this.ensureCommitNotCalled();\n    if (this.lastTransactionError) {\n      throw this.lastTransactionError;\n    }\n    const unwritten = this.readVersions;\n    // For each mutation, note that the doc was written.\n    this.mutations.forEach(mutation => {\n      unwritten.delete(mutation.key.toString());\n    });\n    // For each document that was read but not written to, we want to perform\n    // a `verify` operation.\n    unwritten.forEach((_, path) => {\n      const key = DocumentKey.fromPath(path);\n      this.mutations.push(new VerifyMutation(key, this.precondition(key)));\n    });\n    await invokeCommitRpc(this.datastore, this.mutations);\n    this.committed = true;\n  }\n  recordVersion(doc) {\n    let docVersion;\n    if (doc.isFoundDocument()) {\n      docVersion = doc.version;\n    } else if (doc.isNoDocument()) {\n      // Represent a deleted doc using SnapshotVersion.min().\n      docVersion = SnapshotVersion.min();\n    } else {\n      throw fail();\n    }\n    const existingVersion = this.readVersions.get(doc.key.toString());\n    if (existingVersion) {\n      if (!docVersion.isEqual(existingVersion)) {\n        // This transaction will fail no matter what.\n        throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');\n      }\n    } else {\n      this.readVersions.set(doc.key.toString(), docVersion);\n    }\n  }\n  /**\r\n   * Returns the version of this document when it was read in this transaction,\r\n   * as a precondition, or no precondition if it was not read.\r\n   */\n  precondition(key) {\n    const version = this.readVersions.get(key.toString());\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        return Precondition.exists(false);\n      } else {\n        return Precondition.updateTime(version);\n      }\n    } else {\n      return Precondition.none();\n    }\n  }\n  /**\r\n   * Returns the precondition for a document if the operation is an update.\r\n   */\n  preconditionForUpdate(key) {\n    const version = this.readVersions.get(key.toString());\n    // The first time a document is written, we want to take into account the\n    // read time and existence\n    if (!this.writtenDocs.has(key.toString()) && version) {\n      if (version.isEqual(SnapshotVersion.min())) {\n        // The document doesn't exist, so fail the transaction.\n        // This has to be validated locally because you can't send a\n        // precondition that a document does not exist without changing the\n        // semantics of the backend write to be an insert. This is the reverse\n        // of what we want, since we want to assert that the document doesn't\n        // exist but then send the update and have it fail. Since we can't\n        // express that to the backend, we have to validate locally.\n        // Note: this can change once we can send separate verify writes in the\n        // transaction.\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't update a document that doesn't exist.\");\n      }\n      // Document exists, base precondition on document update time.\n      return Precondition.updateTime(version);\n    } else {\n      // Document was not read, so we just use the preconditions for a blind\n      // update.\n      return Precondition.exists(true);\n    }\n  }\n  write(mutation) {\n    this.ensureCommitNotCalled();\n    this.mutations.push(mutation);\n  }\n  ensureCommitNotCalled() {}\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * TransactionRunner encapsulates the logic needed to run and retry transactions\r\n * with backoff.\r\n */\nclass TransactionRunner {\n  constructor(asyncQueue, datastore, options, updateFunction, deferred) {\n    this.asyncQueue = asyncQueue;\n    this.datastore = datastore;\n    this.options = options;\n    this.updateFunction = updateFunction;\n    this.deferred = deferred;\n    this.attemptsRemaining = options.maxAttempts;\n    this.backoff = new ExponentialBackoff(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n  }\n  /** Runs the transaction and sets the result on deferred. */\n  run() {\n    this.attemptsRemaining -= 1;\n    this.runWithBackOff();\n  }\n  runWithBackOff() {\n    this.backoff.backoffAndRun(async () => {\n      const transaction = new Transaction$2(this.datastore);\n      const userPromise = this.tryRunUpdateFunction(transaction);\n      if (userPromise) {\n        userPromise.then(result => {\n          this.asyncQueue.enqueueAndForget(() => {\n            return transaction.commit().then(() => {\n              this.deferred.resolve(result);\n            }).catch(commitError => {\n              this.handleTransactionError(commitError);\n            });\n          });\n        }).catch(userPromiseError => {\n          this.handleTransactionError(userPromiseError);\n        });\n      }\n    });\n  }\n  tryRunUpdateFunction(transaction) {\n    try {\n      const userPromise = this.updateFunction(transaction);\n      if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {\n        this.deferred.reject(Error('Transaction callback must return a Promise'));\n        return null;\n      }\n      return userPromise;\n    } catch (error) {\n      // Do not retry errors thrown by user provided updateFunction.\n      this.deferred.reject(error);\n      return null;\n    }\n  }\n  handleTransactionError(error) {\n    if (this.attemptsRemaining > 0 && this.isRetryableTransactionError(error)) {\n      this.attemptsRemaining -= 1;\n      this.asyncQueue.enqueueAndForget(() => {\n        this.runWithBackOff();\n        return Promise.resolve();\n      });\n    } else {\n      this.deferred.reject(error);\n    }\n  }\n  isRetryableTransactionError(error) {\n    if (error.name === 'FirebaseError') {\n      // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n      // non-matching document versions with ABORTED. These errors should be retried.\n      const code = error.code;\n      return code === 'aborted' || code === 'failed-precondition' || code === 'already-exists' || !isPermanentError(code);\n    }\n    return false;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$2 = 'FirestoreClient';\nconst MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;\n/** DOMException error code constants. */\nconst DOM_EXCEPTION_INVALID_STATE = 11;\nconst DOM_EXCEPTION_ABORTED = 20;\nconst DOM_EXCEPTION_QUOTA_EXCEEDED = 22;\n/**\r\n * FirestoreClient is a top-level class that constructs and owns all of the //\r\n * pieces of the client SDK architecture. It is responsible for creating the //\r\n * async queue that is shared by all of the other components in the system. //\r\n */\nclass FirestoreClient {\n  constructor(authCredentials, appCheckCredentials,\n  /**\r\n   * Asynchronous queue responsible for all of our internal processing. When\r\n   * we get incoming work from the user (via public API) or the network\r\n   * (incoming GRPC messages), we should always schedule onto this queue.\r\n   * This ensures all of our work is properly serialized (e.g. we don't\r\n   * start processing a new operation while the previous one is waiting for\r\n   * an async I/O to complete).\r\n   */\n  asyncQueue, databaseInfo) {\n    this.authCredentials = authCredentials;\n    this.appCheckCredentials = appCheckCredentials;\n    this.asyncQueue = asyncQueue;\n    this.databaseInfo = databaseInfo;\n    this.user = User.UNAUTHENTICATED;\n    this.clientId = AutoId.newId();\n    this.authCredentialListener = () => Promise.resolve();\n    this.appCheckCredentialListener = () => Promise.resolve();\n    this.authCredentials.start(asyncQueue, async user => {\n      logDebug(LOG_TAG$2, 'Received user=', user.uid);\n      await this.authCredentialListener(user);\n      this.user = user;\n    });\n    this.appCheckCredentials.start(asyncQueue, newAppCheckToken => {\n      logDebug(LOG_TAG$2, 'Received new app check token=', newAppCheckToken);\n      return this.appCheckCredentialListener(newAppCheckToken, this.user);\n    });\n  }\n  get configuration() {\n    return {\n      asyncQueue: this.asyncQueue,\n      databaseInfo: this.databaseInfo,\n      clientId: this.clientId,\n      authCredentials: this.authCredentials,\n      appCheckCredentials: this.appCheckCredentials,\n      initialUser: this.user,\n      maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS\n    };\n  }\n  setCredentialChangeListener(listener) {\n    this.authCredentialListener = listener;\n  }\n  setAppCheckTokenChangeListener(listener) {\n    this.appCheckCredentialListener = listener;\n  }\n  /**\r\n   * Checks that the client has not been terminated. Ensures that other methods on //\r\n   * this class cannot be called after the client is terminated. //\r\n   */\n  verifyNotTerminated() {\n    if (this.asyncQueue.isShuttingDown) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'The client has already been terminated.');\n    }\n  }\n  terminate() {\n    this.asyncQueue.enterRestrictedMode();\n    const deferred = new Deferred();\n    this.asyncQueue.enqueueAndForgetEvenWhileRestricted(async () => {\n      try {\n        if (this._onlineComponents) {\n          await this._onlineComponents.terminate();\n        }\n        if (this._offlineComponents) {\n          await this._offlineComponents.terminate();\n        }\n        // The credentials provider must be terminated after shutting down the\n        // RemoteStore as it will prevent the RemoteStore from retrieving auth\n        // tokens.\n        this.authCredentials.shutdown();\n        this.appCheckCredentials.shutdown();\n        deferred.resolve();\n      } catch (e) {\n        const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to shutdown persistence`);\n        deferred.reject(firestoreError);\n      }\n    });\n    return deferred.promise;\n  }\n}\nasync function setOfflineComponentProvider(client, offlineComponentProvider) {\n  client.asyncQueue.verifyOperationInProgress();\n  logDebug(LOG_TAG$2, 'Initializing OfflineComponentProvider');\n  const configuration = client.configuration;\n  await offlineComponentProvider.initialize(configuration);\n  let currentUser = configuration.initialUser;\n  client.setCredentialChangeListener(async user => {\n    if (!currentUser.isEqual(user)) {\n      await localStoreHandleUserChange(offlineComponentProvider.localStore, user);\n      currentUser = user;\n    }\n  });\n  // When a user calls clearPersistence() in one client, all other clients\n  // need to be terminated to allow the delete to succeed.\n  offlineComponentProvider.persistence.setDatabaseDeletedListener(() => client.terminate());\n  client._offlineComponents = offlineComponentProvider;\n}\nasync function setOnlineComponentProvider(client, onlineComponentProvider) {\n  client.asyncQueue.verifyOperationInProgress();\n  const offlineComponentProvider = await ensureOfflineComponents(client);\n  logDebug(LOG_TAG$2, 'Initializing OnlineComponentProvider');\n  await onlineComponentProvider.initialize(offlineComponentProvider, client.configuration);\n  // The CredentialChangeListener of the online component provider takes\n  // precedence over the offline component provider.\n  client.setCredentialChangeListener(user => remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user));\n  client.setAppCheckTokenChangeListener((_, user) => remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user));\n  client._onlineComponents = onlineComponentProvider;\n}\n/**\r\n * Decides whether the provided error allows us to gracefully disable\r\n * persistence (as opposed to crashing the client).\r\n */\nfunction canFallbackFromIndexedDbError(error) {\n  if (error.name === 'FirebaseError') {\n    return error.code === Code.FAILED_PRECONDITION || error.code === Code.UNIMPLEMENTED;\n  } else if (typeof DOMException !== 'undefined' && error instanceof DOMException) {\n    // There are a few known circumstances where we can open IndexedDb but\n    // trying to read/write will fail (e.g. quota exceeded). For\n    // well-understood cases, we attempt to detect these and then gracefully\n    // fall back to memory persistence.\n    // NOTE: Rather than continue to add to this list, we could decide to\n    // always fall back, with the risk that we might accidentally hide errors\n    // representing actual SDK bugs.\n    return (\n      // When the browser is out of quota we could get either quota exceeded\n      // or an aborted error depending on whether the error happened during\n      // schema migration.\n      error.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error.code === DOM_EXCEPTION_ABORTED ||\n      // Firefox Private Browsing mode disables IndexedDb and returns\n      // INVALID_STATE for any usage.\n      error.code === DOM_EXCEPTION_INVALID_STATE\n    );\n  }\n  return true;\n}\nasync function ensureOfflineComponents(client) {\n  if (!client._offlineComponents) {\n    if (client._uninitializedComponentsProvider) {\n      logDebug(LOG_TAG$2, 'Using user provided OfflineComponentProvider');\n      try {\n        await setOfflineComponentProvider(client, client._uninitializedComponentsProvider._offline);\n      } catch (e) {\n        const error = e;\n        if (!canFallbackFromIndexedDbError(error)) {\n          throw error;\n        }\n        logWarn('Error using user provided cache. Falling back to ' + 'memory cache: ' + error);\n        await setOfflineComponentProvider(client, new MemoryOfflineComponentProvider());\n      }\n    } else {\n      logDebug(LOG_TAG$2, 'Using default OfflineComponentProvider');\n      await setOfflineComponentProvider(client, new MemoryOfflineComponentProvider());\n    }\n  }\n  return client._offlineComponents;\n}\nasync function ensureOnlineComponents(client) {\n  if (!client._onlineComponents) {\n    if (client._uninitializedComponentsProvider) {\n      logDebug(LOG_TAG$2, 'Using user provided OnlineComponentProvider');\n      await setOnlineComponentProvider(client, client._uninitializedComponentsProvider._online);\n    } else {\n      logDebug(LOG_TAG$2, 'Using default OnlineComponentProvider');\n      await setOnlineComponentProvider(client, new OnlineComponentProvider());\n    }\n  }\n  return client._onlineComponents;\n}\nfunction getPersistence(client) {\n  return ensureOfflineComponents(client).then(c => c.persistence);\n}\nfunction getLocalStore(client) {\n  return ensureOfflineComponents(client).then(c => c.localStore);\n}\nfunction getRemoteStore(client) {\n  return ensureOnlineComponents(client).then(c => c.remoteStore);\n}\nfunction getSyncEngine(client) {\n  return ensureOnlineComponents(client).then(c => c.syncEngine);\n}\nfunction getDatastore(client) {\n  return ensureOnlineComponents(client).then(c => c.datastore);\n}\nasync function getEventManager(client) {\n  const onlineComponentProvider = await ensureOnlineComponents(client);\n  const eventManager = onlineComponentProvider.eventManager;\n  eventManager.onListen = syncEngineListen.bind(null, onlineComponentProvider.syncEngine);\n  eventManager.onUnlisten = syncEngineUnlisten.bind(null, onlineComponentProvider.syncEngine);\n  eventManager.onFirstRemoteStoreListen = triggerRemoteStoreListen.bind(null, onlineComponentProvider.syncEngine);\n  eventManager.onLastRemoteStoreUnlisten = triggerRemoteStoreUnlisten.bind(null, onlineComponentProvider.syncEngine);\n  return eventManager;\n}\n/** Enables the network connection and re-enqueues all pending operations. */\nfunction firestoreClientEnableNetwork(client) {\n  return client.asyncQueue.enqueue(async () => {\n    const persistence = await getPersistence(client);\n    const remoteStore = await getRemoteStore(client);\n    persistence.setNetworkEnabled(true);\n    return remoteStoreEnableNetwork(remoteStore);\n  });\n}\n/** Disables the network connection. Pending operations will not complete. */\nfunction firestoreClientDisableNetwork(client) {\n  return client.asyncQueue.enqueue(async () => {\n    const persistence = await getPersistence(client);\n    const remoteStore = await getRemoteStore(client);\n    persistence.setNetworkEnabled(false);\n    return remoteStoreDisableNetwork(remoteStore);\n  });\n}\n/**\r\n * Returns a Promise that resolves when all writes that were pending at the time\r\n * this method was called received server acknowledgement. An acknowledgement\r\n * can be either acceptance or rejection.\r\n */\nfunction firestoreClientWaitForPendingWrites(client) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const syncEngine = await getSyncEngine(client);\n    return syncEngineRegisterPendingWritesCallback(syncEngine, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientListen(client, query, options, observer) {\n  const wrappedObserver = new AsyncObserver(observer);\n  const listener = new QueryListener(query, wrappedObserver, options);\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return eventManagerListen(eventManager, listener);\n  });\n  return () => {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(async () => {\n      const eventManager = await getEventManager(client);\n      return eventManagerUnlisten(eventManager, listener);\n    });\n  };\n}\nfunction firestoreClientGetDocumentFromLocalCache(client, docKey) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const localStore = await getLocalStore(client);\n    return readDocumentFromCache(localStore, docKey, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientGetDocumentViaSnapshotListener(client, key, options = {}) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return readDocumentViaSnapshotListener(eventManager, client.asyncQueue, key, options, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientGetDocumentsFromLocalCache(client, query) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const localStore = await getLocalStore(client);\n    return executeQueryFromCache(localStore, query, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientGetDocumentsViaSnapshotListener(client, query, options = {}) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return executeQueryViaSnapshotListener(eventManager, client.asyncQueue, query, options, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientRunAggregateQuery(client, query, aggregates) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    // Implement and call executeAggregateQueryViaSnapshotListener, similar\n    // to the implementation in firestoreClientGetDocumentsViaSnapshotListener\n    // above\n    try {\n      // TODO(b/277628384): check `canUseNetwork()` and handle multi-tab.\n      const datastore = await getDatastore(client);\n      deferred.resolve(invokeRunAggregationQueryRpc(datastore, query, aggregates));\n    } catch (e) {\n      deferred.reject(e);\n    }\n  });\n  return deferred.promise;\n}\nfunction firestoreClientWrite(client, mutations) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const syncEngine = await getSyncEngine(client);\n    return syncEngineWrite(syncEngine, mutations, deferred);\n  });\n  return deferred.promise;\n}\nfunction firestoreClientAddSnapshotsInSyncListener(client, observer) {\n  const wrappedObserver = new AsyncObserver(observer);\n  client.asyncQueue.enqueueAndForget(async () => {\n    const eventManager = await getEventManager(client);\n    return addSnapshotsInSyncListener(eventManager, wrappedObserver);\n  });\n  return () => {\n    wrappedObserver.mute();\n    client.asyncQueue.enqueueAndForget(async () => {\n      const eventManager = await getEventManager(client);\n      return removeSnapshotsInSyncListener(eventManager, wrappedObserver);\n    });\n  };\n}\n/**\r\n * Takes an updateFunction in which a set of reads and writes can be performed\r\n * atomically. In the updateFunction, the client can read and write values\r\n * using the supplied transaction object. After the updateFunction, all\r\n * changes will be committed. If a retryable error occurs (ex: some other\r\n * client has changed any of the data referenced), then the updateFunction\r\n * will be called again after a backoff. If the updateFunction still fails\r\n * after all retries, then the transaction will be rejected.\r\n *\r\n * The transaction object passed to the updateFunction contains methods for\r\n * accessing documents and collections. Unlike other datastore access, data\r\n * accessed with the transaction will not reflect local changes that have not\r\n * been committed. For this reason, it is required that all reads are\r\n * performed before any writes. Transactions must be performed while online.\r\n */\nfunction firestoreClientTransaction(client, updateFunction, options) {\n  const deferred = new Deferred();\n  client.asyncQueue.enqueueAndForget(async () => {\n    const datastore = await getDatastore(client);\n    new TransactionRunner(client.asyncQueue, datastore, options, updateFunction, deferred).run();\n  });\n  return deferred.promise;\n}\nasync function readDocumentFromCache(localStore, docKey, result) {\n  try {\n    const document = await localStoreReadDocument(localStore, docKey);\n    if (document.isFoundDocument()) {\n      result.resolve(document);\n    } else if (document.isNoDocument()) {\n      result.resolve(null);\n    } else {\n      result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' + \"exist on the server. Run again without setting 'source' in \" + 'the GetOptions to attempt to retrieve the document from the ' + 'server.)'));\n    }\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to get document '${docKey} from cache`);\n    result.reject(firestoreError);\n  }\n}\n/**\r\n * Retrieves a latency-compensated document from the backend via a\r\n * SnapshotListener.\r\n */\nfunction readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options, result) {\n  const wrappedObserver = new AsyncObserver({\n    next: snap => {\n      // Remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      asyncQueue.enqueueAndForget(() => eventManagerUnlisten(eventManager, listener));\n      const exists = snap.docs.has(key);\n      if (!exists && snap.fromCache) {\n        // TODO(dimond): If we're online and the document doesn't\n        // exist then we resolve with a doc.exists set to false. If\n        // we're offline however, we reject the Promise in this\n        // case. Two options: 1) Cache the negative response from\n        // the server so we can deliver that even when you're\n        // offline 2) Actually reject the Promise in the online case\n        // if the document doesn't exist.\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is offline.'));\n      } else if (exists && snap.fromCache && options && options.source === 'server') {\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' + 'document does exist in the local cache. Run again ' + 'without setting source to \"server\" to ' + 'retrieve the cached document.)'));\n      } else {\n        result.resolve(snap);\n      }\n    },\n    error: e => result.reject(e)\n  });\n  const listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {\n    includeMetadataChanges: true,\n    waitForSyncWhenOnline: true\n  });\n  return eventManagerListen(eventManager, listener);\n}\nasync function executeQueryFromCache(localStore, query, result) {\n  try {\n    const queryResult = await localStoreExecuteQuery(localStore, query, /* usePreviousResults= */true);\n    const view = new View(query, queryResult.remoteKeys);\n    const viewDocChanges = view.computeDocChanges(queryResult.documents);\n    const viewChange = view.applyChanges(viewDocChanges, /* limboResolutionEnabled= */false);\n    result.resolve(viewChange.snapshot);\n  } catch (e) {\n    const firestoreError = wrapInUserErrorIfRecoverable(e, `Failed to execute query '${query} against cache`);\n    result.reject(firestoreError);\n  }\n}\n/**\r\n * Retrieves a latency-compensated query snapshot from the backend via a\r\n * SnapshotListener.\r\n */\nfunction executeQueryViaSnapshotListener(eventManager, asyncQueue, query, options, result) {\n  const wrappedObserver = new AsyncObserver({\n    next: snapshot => {\n      // Remove query first before passing event to user to avoid\n      // user actions affecting the now stale query.\n      asyncQueue.enqueueAndForget(() => eventManagerUnlisten(eventManager, listener));\n      if (snapshot.fromCache && options.source === 'server') {\n        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' + 'documents may exist in the local cache. Run again ' + 'without setting source to \"server\" to ' + 'retrieve the cached documents.)'));\n      } else {\n        result.resolve(snapshot);\n      }\n    },\n    error: e => result.reject(e)\n  });\n  const listener = new QueryListener(query, wrappedObserver, {\n    includeMetadataChanges: true,\n    waitForSyncWhenOnline: true\n  });\n  return eventManagerListen(eventManager, listener);\n}\nfunction firestoreClientLoadBundle(client, databaseId, data, resultTask) {\n  const reader = createBundleReader(data, newSerializer(databaseId));\n  client.asyncQueue.enqueueAndForget(async () => {\n    syncEngineLoadBundle(await getSyncEngine(client), reader, resultTask);\n  });\n}\nfunction firestoreClientGetNamedQuery(client, queryName) {\n  return client.asyncQueue.enqueue(async () => localStoreGetNamedQuery(await getLocalStore(client), queryName));\n}\nfunction createBundleReader(data, serializer) {\n  let content;\n  if (typeof data === 'string') {\n    content = newTextEncoder().encode(data);\n  } else {\n    content = data;\n  }\n  return newBundleReader(toByteStreamReader(content), serializer);\n}\nfunction firestoreClientSetIndexConfiguration(client, indexes) {\n  return client.asyncQueue.enqueue(async () => {\n    return localStoreConfigureFieldIndexes(await getLocalStore(client), indexes);\n  });\n}\nfunction firestoreClientSetPersistentCacheIndexAutoCreationEnabled(client, isEnabled) {\n  return client.asyncQueue.enqueue(async () => {\n    return localStoreSetIndexAutoCreationEnabled(await getLocalStore(client), isEnabled);\n  });\n}\nfunction firestoreClientDeleteAllFieldIndexes(client) {\n  return client.asyncQueue.enqueue(async () => {\n    return localStoreDeleteAllFieldIndexes(await getLocalStore(client));\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Compares two `ExperimentalLongPollingOptions` objects for equality.\r\n */\nfunction longPollingOptionsEqual(options1, options2) {\n  return options1.timeoutSeconds === options2.timeoutSeconds;\n}\n/**\r\n * Creates and returns a new `ExperimentalLongPollingOptions` with the same\r\n * option values as the given instance.\r\n */\nfunction cloneLongPollingOptions(options) {\n  const clone = {};\n  if (options.timeoutSeconds !== undefined) {\n    clone.timeoutSeconds = options.timeoutSeconds;\n  }\n  return clone;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG$1 = 'ComponentProvider';\n/**\r\n * An instance map that ensures only one Datastore exists per Firestore\r\n * instance.\r\n */\nconst datastoreInstances = new Map();\n/**\r\n * Removes all components associated with the provided instance. Must be called\r\n * when the `Firestore` instance is terminated.\r\n */\nfunction removeComponents(firestore) {\n  const datastore = datastoreInstances.get(firestore);\n  if (datastore) {\n    logDebug(LOG_TAG$1, 'Removing Datastore');\n    datastoreInstances.delete(firestore);\n    datastore.terminate();\n  }\n}\nfunction makeDatabaseInfo(databaseId, appId, persistenceKey, settings) {\n  return new DatabaseInfo(databaseId, appId, persistenceKey, settings.host, settings.ssl, settings.experimentalForceLongPolling, settings.experimentalAutoDetectLongPolling, cloneLongPollingOptions(settings.experimentalLongPollingOptions), settings.useFetchStreams);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// settings() defaults:\nconst DEFAULT_HOST = 'firestore.googleapis.com';\nconst DEFAULT_SSL = true;\n// The minimum long-polling timeout is hardcoded on the server. The value here\n// should be kept in sync with the value used by the server, as the server will\n// silently ignore a value below the minimum and fall back to the default.\n// Googlers see b/266868871 for relevant discussion.\nconst MIN_LONG_POLLING_TIMEOUT_SECONDS = 5;\n// No maximum long-polling timeout is configured in the server, and defaults to\n// 30 seconds, which is what Watch appears to use.\n// Googlers see b/266868871 for relevant discussion.\nconst MAX_LONG_POLLING_TIMEOUT_SECONDS = 30;\n// Whether long-polling auto-detected is enabled by default.\nconst DEFAULT_AUTO_DETECT_LONG_POLLING = true;\n/**\r\n * A concrete type describing all the values that can be applied via a\r\n * user-supplied `FirestoreSettings` object. This is a separate type so that\r\n * defaults can be supplied and the value can be checked for equality.\r\n */\nclass FirestoreSettingsImpl {\n  constructor(settings) {\n    var _a, _b;\n    if (settings.host === undefined) {\n      if (settings.ssl !== undefined) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"Can't provide ssl option if host option is not set\");\n      }\n      this.host = DEFAULT_HOST;\n      this.ssl = DEFAULT_SSL;\n    } else {\n      this.host = settings.host;\n      this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;\n    }\n    this.credentials = settings.credentials;\n    this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;\n    this.localCache = settings.localCache;\n    if (settings.cacheSizeBytes === undefined) {\n      this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;\n    } else {\n      if (settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`);\n      } else {\n        this.cacheSizeBytes = settings.cacheSizeBytes;\n      }\n    }\n    validateIsNotUsedTogether('experimentalForceLongPolling', settings.experimentalForceLongPolling, 'experimentalAutoDetectLongPolling', settings.experimentalAutoDetectLongPolling);\n    this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;\n    if (this.experimentalForceLongPolling) {\n      this.experimentalAutoDetectLongPolling = false;\n    } else if (settings.experimentalAutoDetectLongPolling === undefined) {\n      this.experimentalAutoDetectLongPolling = DEFAULT_AUTO_DETECT_LONG_POLLING;\n    } else {\n      // For backwards compatibility, coerce the value to boolean even though\n      // the TypeScript compiler has narrowed the type to boolean already.\n      // noinspection PointlessBooleanExpressionJS\n      this.experimentalAutoDetectLongPolling = !!settings.experimentalAutoDetectLongPolling;\n    }\n    this.experimentalLongPollingOptions = cloneLongPollingOptions((_b = settings.experimentalLongPollingOptions) !== null && _b !== void 0 ? _b : {});\n    validateLongPollingOptions(this.experimentalLongPollingOptions);\n    this.useFetchStreams = !!settings.useFetchStreams;\n  }\n  isEqual(other) {\n    return this.host === other.host && this.ssl === other.ssl && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes && this.experimentalForceLongPolling === other.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === other.experimentalAutoDetectLongPolling && longPollingOptionsEqual(this.experimentalLongPollingOptions, other.experimentalLongPollingOptions) && this.ignoreUndefinedProperties === other.ignoreUndefinedProperties && this.useFetchStreams === other.useFetchStreams;\n  }\n}\nfunction validateLongPollingOptions(options) {\n  if (options.timeoutSeconds !== undefined) {\n    if (isNaN(options.timeoutSeconds)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ` + `${options.timeoutSeconds} (must not be NaN)`);\n    }\n    if (options.timeoutSeconds < MIN_LONG_POLLING_TIMEOUT_SECONDS) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ${options.timeoutSeconds} ` + `(minimum allowed value is ${MIN_LONG_POLLING_TIMEOUT_SECONDS})`);\n    }\n    if (options.timeoutSeconds > MAX_LONG_POLLING_TIMEOUT_SECONDS) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `invalid long polling timeout: ${options.timeoutSeconds} ` + `(maximum allowed value is ${MAX_LONG_POLLING_TIMEOUT_SECONDS})`);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\r\n */\nclass Firestore$1 {\n  /** @hideconstructor */\n  constructor(_authCredentials, _appCheckCredentials, _databaseId, _app) {\n    this._authCredentials = _authCredentials;\n    this._appCheckCredentials = _appCheckCredentials;\n    this._databaseId = _databaseId;\n    this._app = _app;\n    /**\r\n     * Whether it's a Firestore or Firestore Lite instance.\r\n     */\n    this.type = 'firestore-lite';\n    this._persistenceKey = '(lite)';\n    this._settings = new FirestoreSettingsImpl({});\n    this._settingsFrozen = false;\n  }\n  /**\r\n   * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\r\n   * instance.\r\n   */\n  get app() {\n    if (!this._app) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, \"Firestore was not initialized using the Firebase SDK. 'app' is \" + 'not available');\n    }\n    return this._app;\n  }\n  get _initialized() {\n    return this._settingsFrozen;\n  }\n  get _terminated() {\n    return this._terminateTask !== undefined;\n  }\n  _setSettings(settings) {\n    if (this._settingsFrozen) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' + 'be changed. You can only modify settings before calling any other ' + 'methods on a Firestore object.');\n    }\n    this._settings = new FirestoreSettingsImpl(settings);\n    if (settings.credentials !== undefined) {\n      this._authCredentials = makeAuthCredentialsProvider(settings.credentials);\n    }\n  }\n  _getSettings() {\n    return this._settings;\n  }\n  _freezeSettings() {\n    this._settingsFrozen = true;\n    return this._settings;\n  }\n  _delete() {\n    if (!this._terminateTask) {\n      this._terminateTask = this._terminate();\n    }\n    return this._terminateTask;\n  }\n  /** Returns a JSON-serializable representation of this `Firestore` instance. */\n  toJSON() {\n    return {\n      app: this._app,\n      databaseId: this._databaseId,\n      settings: this._settings\n    };\n  }\n  /**\r\n   * Terminates all components used by this client. Subclasses can override\r\n   * this method to clean up their own dependencies, but must also call this\r\n   * method.\r\n   *\r\n   * Only ever called once.\r\n   */\n  _terminate() {\n    removeComponents(this);\n    return Promise.resolve();\n  }\n}\n/**\r\n * Modify this instance to communicate with the Cloud Firestore emulator.\r\n *\r\n * Note: This must be called before this instance has been used to do any\r\n * operations.\r\n *\r\n * @param firestore - The `Firestore` instance to configure to connect to the\r\n * emulator.\r\n * @param host - the emulator host (ex: localhost).\r\n * @param port - the emulator port (ex: 9000).\r\n * @param options.mockUserToken - the mock auth token to use for unit testing\r\n * Security Rules.\r\n */\nfunction connectFirestoreEmulator(firestore, host, port, options = {}) {\n  var _a;\n  firestore = cast(firestore, Firestore$1);\n  const settings = firestore._getSettings();\n  const newHostSetting = `${host}:${port}`;\n  if (settings.host !== DEFAULT_HOST && settings.host !== newHostSetting) {\n    logWarn('Host has been set in both settings() and connectFirestoreEmulator(), emulator host ' + 'will be used.');\n  }\n  firestore._setSettings(Object.assign(Object.assign({}, settings), {\n    host: newHostSetting,\n    ssl: false\n  }));\n  if (options.mockUserToken) {\n    let token;\n    let user;\n    if (typeof options.mockUserToken === 'string') {\n      token = options.mockUserToken;\n      user = User.MOCK_USER;\n    } else {\n      // Let createMockUserToken validate first (catches common mistakes like\n      // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n      token = createMockUserToken(options.mockUserToken, (_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.projectId);\n      const uid = options.mockUserToken.sub || options.mockUserToken.user_id;\n      if (!uid) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n      }\n      user = new User(uid);\n    }\n    firestore._authCredentials = new EmulatorAuthCredentialsProvider(new OAuthToken(token, user));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A `Query` refers to a query which you can read or listen to. You can also\r\n * construct refined `Query` objects by adding filters and ordering.\r\n */\nclass Query {\n  // This is the lite version of the Query class in the main SDK.\n  /** @hideconstructor protected */\n  constructor(firestore,\n  /**\r\n   * If provided, the `FirestoreDataConverter` associated with this instance.\r\n   */\n  converter, _query) {\n    this.converter = converter;\n    this._query = _query;\n    /** The type of this Firestore reference. */\n    this.type = 'query';\n    this.firestore = firestore;\n  }\n  withConverter(converter) {\n    return new Query(this.firestore, converter, this._query);\n  }\n}\n/**\r\n * A `DocumentReference` refers to a document location in a Firestore database\r\n * and can be used to write, read, or listen to the location. The document at\r\n * the referenced location may or may not exist.\r\n */\nclass DocumentReference {\n  /** @hideconstructor */\n  constructor(firestore,\n  /**\r\n   * If provided, the `FirestoreDataConverter` associated with this instance.\r\n   */\n  converter, _key) {\n    this.converter = converter;\n    this._key = _key;\n    /** The type of this Firestore reference. */\n    this.type = 'document';\n    this.firestore = firestore;\n  }\n  get _path() {\n    return this._key.path;\n  }\n  /**\r\n   * The document's identifier within its collection.\r\n   */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\r\n   * A string representing the path of the referenced document (relative\r\n   * to the root of the database).\r\n   */\n  get path() {\n    return this._key.path.canonicalString();\n  }\n  /**\r\n   * The collection this `DocumentReference` belongs to.\r\n   */\n  get parent() {\n    return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());\n  }\n  withConverter(converter) {\n    return new DocumentReference(this.firestore, converter, this._key);\n  }\n}\n/**\r\n * A `CollectionReference` object can be used for adding documents, getting\r\n * document references, and querying for documents (using {@link (query:1)}).\r\n */\nclass CollectionReference extends Query {\n  /** @hideconstructor */\n  constructor(firestore, converter, _path) {\n    super(firestore, converter, newQueryForPath(_path));\n    this._path = _path;\n    /** The type of this Firestore reference. */\n    this.type = 'collection';\n  }\n  /** The collection's identifier. */\n  get id() {\n    return this._query.path.lastSegment();\n  }\n  /**\r\n   * A string representing the path of the referenced collection (relative\r\n   * to the root of the database).\r\n   */\n  get path() {\n    return this._query.path.canonicalString();\n  }\n  /**\r\n   * A reference to the containing `DocumentReference` if this is a\r\n   * subcollection. If this isn't a subcollection, the reference is null.\r\n   */\n  get parent() {\n    const parentPath = this._path.popLast();\n    if (parentPath.isEmpty()) {\n      return null;\n    } else {\n      return new DocumentReference(this.firestore, /* converter= */null, new DocumentKey(parentPath));\n    }\n  }\n  withConverter(converter) {\n    return new CollectionReference(this.firestore, converter, this._path);\n  }\n}\nfunction collection(parent, path, ...pathSegments) {\n  parent = getModularInstance(parent);\n  validateNonEmptyArgument('collection', 'path', path);\n  if (parent instanceof Firestore$1) {\n    const absolutePath = ResourcePath.fromString(path, ...pathSegments);\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(parent, /* converter= */null, absolutePath);\n  } else {\n    if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' + 'a DocumentReference or FirebaseFirestore');\n    }\n    const absolutePath = parent._path.child(ResourcePath.fromString(path, ...pathSegments));\n    validateCollectionPath(absolutePath);\n    return new CollectionReference(parent.firestore, /* converter= */null, absolutePath);\n  }\n}\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\r\n * Creates and returns a new `Query` instance that includes all documents in the\r\n * database that are contained in a collection or subcollection with the\r\n * given `collectionId`.\r\n *\r\n * @param firestore - A reference to the root `Firestore` instance.\r\n * @param collectionId - Identifies the collections to query over. Every\r\n * collection or subcollection with this ID as the last segment of its path\r\n * will be included. Cannot contain a slash.\r\n * @returns The created `Query`.\r\n */\nfunction collectionGroup(firestore, collectionId) {\n  firestore = cast(firestore, Firestore$1);\n  validateNonEmptyArgument('collectionGroup', 'collection id', collectionId);\n  if (collectionId.indexOf('/') >= 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid collection ID '${collectionId}' passed to function ` + `collectionGroup(). Collection IDs must not contain '/'.`);\n  }\n  return new Query(firestore, /* converter= */null, newQueryForCollectionGroup(collectionId));\n}\nfunction doc(parent, path, ...pathSegments) {\n  parent = getModularInstance(parent);\n  // We allow omission of 'pathString' but explicitly prohibit passing in both\n  // 'undefined' and 'null'.\n  if (arguments.length === 1) {\n    path = AutoId.newId();\n  }\n  validateNonEmptyArgument('doc', 'path', path);\n  if (parent instanceof Firestore$1) {\n    const absolutePath = ResourcePath.fromString(path, ...pathSegments);\n    validateDocumentPath(absolutePath);\n    return new DocumentReference(parent, /* converter= */null, new DocumentKey(absolutePath));\n  } else {\n    if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Expected first argument to collection() to be a CollectionReference, ' + 'a DocumentReference or FirebaseFirestore');\n    }\n    const absolutePath = parent._path.child(ResourcePath.fromString(path, ...pathSegments));\n    validateDocumentPath(absolutePath);\n    return new DocumentReference(parent.firestore, parent instanceof CollectionReference ? parent.converter : null, new DocumentKey(absolutePath));\n  }\n}\n/**\r\n * Returns true if the provided references are equal.\r\n *\r\n * @param left - A reference to compare.\r\n * @param right - A reference to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\nfunction refEqual(left, right) {\n  left = getModularInstance(left);\n  right = getModularInstance(right);\n  if ((left instanceof DocumentReference || left instanceof CollectionReference) && (right instanceof DocumentReference || right instanceof CollectionReference)) {\n    return left.firestore === right.firestore && left.path === right.path && left.converter === right.converter;\n  }\n  return false;\n}\n/**\r\n * Returns true if the provided queries point to the same collection and apply\r\n * the same constraints.\r\n *\r\n * @param left - A `Query` to compare.\r\n * @param right - A `Query` to compare.\r\n * @returns true if the references point to the same location in the same\r\n * Firestore database.\r\n */\nfunction queryEqual(left, right) {\n  left = getModularInstance(left);\n  right = getModularInstance(right);\n  if (left instanceof Query && right instanceof Query) {\n    return left.firestore === right.firestore && queryEquals(left._query, right._query) && left.converter === right.converter;\n  }\n  return false;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst LOG_TAG = 'AsyncQueue';\nclass AsyncQueueImpl {\n  constructor() {\n    // The last promise in the queue.\n    this.tail = Promise.resolve();\n    // A list of retryable operations. Retryable operations are run in order and\n    // retried with backoff.\n    this.retryableOps = [];\n    // Is this AsyncQueue being shut down? Once it is set to true, it will not\n    // be changed again.\n    this._isShuttingDown = false;\n    // Operations scheduled to be queued in the future. Operations are\n    // automatically removed after they are run or canceled.\n    this.delayedOperations = [];\n    // visible for testing\n    this.failure = null;\n    // Flag set while there's an outstanding AsyncQueue operation, used for\n    // assertion sanity-checks.\n    this.operationInProgress = false;\n    // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n    this.skipNonRestrictedTasks = false;\n    // List of TimerIds to fast-forward delays for.\n    this.timerIdsToSkip = [];\n    // Backoff timer used to schedule retries for retryable operations\n    this.backoff = new ExponentialBackoff(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */);\n    // Visibility handler that triggers an immediate retry of all retryable\n    // operations. Meant to speed up recovery when we regain file system access\n    // after page comes into foreground.\n    this.visibilityHandler = () => {\n      this.backoff.skipBackoff();\n    };\n  }\n  get isShuttingDown() {\n    return this._isShuttingDown;\n  }\n  /**\r\n   * Adds a new operation to the queue without waiting for it to complete (i.e.\r\n   * we ignore the Promise result).\r\n   */\n  enqueueAndForget(op) {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueue(op);\n  }\n  enqueueAndForgetEvenWhileRestricted(op) {\n    this.verifyNotFailed();\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.enqueueInternal(op);\n  }\n  enterRestrictedMode(purgeExistingTasks) {\n    if (!this._isShuttingDown) {\n      this._isShuttingDown = true;\n      this.skipNonRestrictedTasks = purgeExistingTasks || false;\n    }\n  }\n  enqueue(op) {\n    this.verifyNotFailed();\n    if (this._isShuttingDown) {\n      // Return a Promise which never resolves.\n      return new Promise(() => {});\n    }\n    // Create a deferred Promise that we can return to the callee. This\n    // allows us to return a \"hanging Promise\" only to the callee and still\n    // advance the queue even when the operation is not run.\n    const task = new Deferred();\n    return this.enqueueInternal(() => {\n      if (this._isShuttingDown && this.skipNonRestrictedTasks) {\n        // We do not resolve 'task'\n        return Promise.resolve();\n      }\n      op().then(task.resolve, task.reject);\n      return task.promise;\n    }).then(() => task.promise);\n  }\n  enqueueRetryable(op) {\n    this.enqueueAndForget(() => {\n      this.retryableOps.push(op);\n      return this.retryNextOp();\n    });\n  }\n  /**\r\n   * Runs the next operation from the retryable queue. If the operation fails,\r\n   * reschedules with backoff.\r\n   */\n  async retryNextOp() {\n    if (this.retryableOps.length === 0) {\n      return;\n    }\n    try {\n      await this.retryableOps[0]();\n      this.retryableOps.shift();\n      this.backoff.reset();\n    } catch (e) {\n      if (isIndexedDbTransactionError(e)) {\n        logDebug(LOG_TAG, 'Operation failed with retryable error: ' + e);\n      } else {\n        throw e; // Failure will be handled by AsyncQueue\n      }\n    }\n    if (this.retryableOps.length > 0) {\n      // If there are additional operations, we re-schedule `retryNextOp()`.\n      // This is necessary to run retryable operations that failed during\n      // their initial attempt since we don't know whether they are already\n      // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n      // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n      // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n      // call scheduled here.\n      // Since `backoffAndRun()` cancels an existing backoff and schedules a\n      // new backoff on every call, there is only ever a single additional\n      // operation in the queue.\n      this.backoff.backoffAndRun(() => this.retryNextOp());\n    }\n  }\n  enqueueInternal(op) {\n    const newTail = this.tail.then(() => {\n      this.operationInProgress = true;\n      return op().catch(error => {\n        this.failure = error;\n        this.operationInProgress = false;\n        const message = getMessageOrStack(error);\n        logError('INTERNAL UNHANDLED ERROR: ', message);\n        // Re-throw the error so that this.tail becomes a rejected Promise and\n        // all further attempts to chain (via .then) will just short-circuit\n        // and return the rejected Promise.\n        throw error;\n      }).then(result => {\n        this.operationInProgress = false;\n        return result;\n      });\n    });\n    this.tail = newTail;\n    return newTail;\n  }\n  enqueueAfterDelay(timerId, delayMs, op) {\n    this.verifyNotFailed();\n    // Fast-forward delays for timerIds that have been overridden.\n    if (this.timerIdsToSkip.indexOf(timerId) > -1) {\n      delayMs = 0;\n    }\n    const delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, removedOp => this.removeDelayedOperation(removedOp));\n    this.delayedOperations.push(delayedOp);\n    return delayedOp;\n  }\n  verifyNotFailed() {\n    if (this.failure) {\n      fail();\n    }\n  }\n  verifyOperationInProgress() {}\n  /**\r\n   * Waits until all currently queued tasks are finished executing. Delayed\r\n   * operations are not run.\r\n   */\n  async drain() {\n    // Operations in the queue prior to draining may have enqueued additional\n    // operations. Keep draining the queue until the tail is no longer advanced,\n    // which indicates that no more new operations were enqueued and that all\n    // operations were executed.\n    let currentTail;\n    do {\n      currentTail = this.tail;\n      await currentTail;\n    } while (currentTail !== this.tail);\n  }\n  /**\r\n   * For Tests: Determine if a delayed operation with a particular TimerId\r\n   * exists.\r\n   */\n  containsDelayedOperation(timerId) {\n    for (const op of this.delayedOperations) {\n      if (op.timerId === timerId) {\n        return true;\n      }\n    }\n    return false;\n  }\n  /**\r\n   * For Tests: Runs some or all delayed operations early.\r\n   *\r\n   * @param lastTimerId - Delayed operations up to and including this TimerId\r\n   * will be drained. Pass TimerId.All to run all delayed operations.\r\n   * @returns a Promise that resolves once all operations have been run.\r\n   */\n  runAllDelayedOperationsUntil(lastTimerId) {\n    // Note that draining may generate more delayed ops, so we do that first.\n    return this.drain().then(() => {\n      // Run ops in the same order they'd run if they ran naturally.\n      /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n      this.delayedOperations.sort((a, b) => a.targetTimeMs - b.targetTimeMs);\n      for (const op of this.delayedOperations) {\n        op.skipDelay();\n        if (lastTimerId !== \"all\" /* TimerId.All */ && op.timerId === lastTimerId) {\n          break;\n        }\n      }\n      return this.drain();\n    });\n  }\n  /**\r\n   * For Tests: Skip all subsequent delays for a timer id.\r\n   */\n  skipDelaysForTimerId(timerId) {\n    this.timerIdsToSkip.push(timerId);\n  }\n  /** Called once a DelayedOperation is run or canceled. */\n  removeDelayedOperation(op) {\n    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n    const index = this.delayedOperations.indexOf(op);\n    /* eslint-disable-next-line @typescript-eslint/no-floating-promises */\n    this.delayedOperations.splice(index, 1);\n  }\n}\nfunction newAsyncQueue() {\n  return new AsyncQueueImpl();\n}\n/**\r\n * Chrome includes Error.message in Error.stack. Other browsers do not.\r\n * This returns expected output of message + stack when available.\r\n * @param error - Error or FirestoreError\r\n */\nfunction getMessageOrStack(error) {\n  let message = error.message || '';\n  if (error.stack) {\n    if (error.stack.includes(error.message)) {\n      message = error.stack;\n    } else {\n      message = error.message + '\\n' + error.stack;\n    }\n  }\n  return message;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents the task of loading a Firestore bundle. It provides progress of bundle\r\n * loading, as well as task completion and error events.\r\n *\r\n * The API is compatible with `Promise<LoadBundleTaskProgress>`.\r\n */\nclass LoadBundleTask {\n  constructor() {\n    this._progressObserver = {};\n    this._taskCompletionResolver = new Deferred();\n    this._lastProgress = {\n      taskState: 'Running',\n      totalBytes: 0,\n      totalDocuments: 0,\n      bytesLoaded: 0,\n      documentsLoaded: 0\n    };\n  }\n  /**\r\n   * Registers functions to listen to bundle loading progress events.\r\n   * @param next - Called when there is a progress update from bundle loading. Typically `next` calls occur\r\n   *   each time a Firestore document is loaded from the bundle.\r\n   * @param error - Called when an error occurs during bundle loading. The task aborts after reporting the\r\n   *   error, and there should be no more updates after this.\r\n   * @param complete - Called when the loading task is complete.\r\n   */\n  onProgress(next, error, complete) {\n    this._progressObserver = {\n      next,\n      error,\n      complete\n    };\n  }\n  /**\r\n   * Implements the `Promise<LoadBundleTaskProgress>.catch` interface.\r\n   *\r\n   * @param onRejected - Called when an error occurs during bundle loading.\r\n   */\n  catch(onRejected) {\n    return this._taskCompletionResolver.promise.catch(onRejected);\n  }\n  /**\r\n   * Implements the `Promise<LoadBundleTaskProgress>.then` interface.\r\n   *\r\n   * @param onFulfilled - Called on the completion of the loading task with a final `LoadBundleTaskProgress` update.\r\n   *   The update will always have its `taskState` set to `\"Success\"`.\r\n   * @param onRejected - Called when an error occurs during bundle loading.\r\n   */\n  then(onFulfilled, onRejected) {\n    return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);\n  }\n  /**\r\n   * Notifies all observers that bundle loading has completed, with a provided\r\n   * `LoadBundleTaskProgress` object.\r\n   *\r\n   * @private\r\n   */\n  _completeWith(progress) {\n    this._updateProgress(progress);\n    if (this._progressObserver.complete) {\n      this._progressObserver.complete();\n    }\n    this._taskCompletionResolver.resolve(progress);\n  }\n  /**\r\n   * Notifies all observers that bundle loading has failed, with a provided\r\n   * `Error` as the reason.\r\n   *\r\n   * @private\r\n   */\n  _failWith(error) {\n    this._lastProgress.taskState = 'Error';\n    if (this._progressObserver.next) {\n      this._progressObserver.next(this._lastProgress);\n    }\n    if (this._progressObserver.error) {\n      this._progressObserver.error(error);\n    }\n    this._taskCompletionResolver.reject(error);\n  }\n  /**\r\n   * Notifies a progress update of loading a bundle.\r\n   * @param progress - The new progress.\r\n   *\r\n   * @private\r\n   */\n  _updateProgress(progress) {\n    this._lastProgress = progress;\n    if (this._progressObserver.next) {\n      this._progressObserver.next(progress);\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Constant used to indicate the LRU garbage collection should be disabled.\r\n * Set this value as the `cacheSizeBytes` on the settings passed to the\r\n * {@link Firestore} instance.\r\n */\nconst CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;\n/**\r\n * The Cloud Firestore service interface.\r\n *\r\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\r\n */\nclass Firestore extends Firestore$1 {\n  /** @hideconstructor */\n  constructor(authCredentialsProvider, appCheckCredentialsProvider, databaseId, app) {\n    super(authCredentialsProvider, appCheckCredentialsProvider, databaseId, app);\n    /**\r\n     * Whether it's a {@link Firestore} or Firestore Lite instance.\r\n     */\n    this.type = 'firestore';\n    this._queue = newAsyncQueue();\n    this._persistenceKey = (app === null || app === void 0 ? void 0 : app.name) || '[DEFAULT]';\n  }\n  _terminate() {\n    if (!this._firestoreClient) {\n      // The client must be initialized to ensure that all subsequent API\n      // usage throws an exception.\n      configureFirestore(this);\n    }\n    return this._firestoreClient.terminate();\n  }\n}\n/**\r\n * Initializes a new instance of {@link Firestore} with the provided settings.\r\n * Can only be called before any other function, including\r\n * {@link (getFirestore:1)}. If the custom settings are empty, this function is\r\n * equivalent to calling {@link (getFirestore:1)}.\r\n *\r\n * @param app - The {@link @firebase/app#FirebaseApp} with which the {@link Firestore} instance will\r\n * be associated.\r\n * @param settings - A settings object to configure the {@link Firestore} instance.\r\n * @param databaseId - The name of the database.\r\n * @returns A newly initialized {@link Firestore} instance.\r\n */\nfunction initializeFirestore(app, settings, databaseId) {\n  if (!databaseId) {\n    databaseId = DEFAULT_DATABASE_NAME;\n  }\n  const provider = _getProvider(app, 'firestore');\n  if (provider.isInitialized(databaseId)) {\n    const existingInstance = provider.getImmediate({\n      identifier: databaseId\n    });\n    const initialSettings = provider.getOptions(databaseId);\n    if (deepEqual(initialSettings, settings)) {\n      return existingInstance;\n    } else {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'initializeFirestore() has already been called with ' + 'different options. To avoid this error, call initializeFirestore() with the ' + 'same options as when it was originally called, or call getFirestore() to return the' + ' already initialized instance.');\n    }\n  }\n  if (settings.cacheSizeBytes !== undefined && settings.localCache !== undefined) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `cache and cacheSizeBytes cannot be specified at the same time as cacheSizeBytes will` + `be deprecated. Instead, specify the cache size in the cache object`);\n  }\n  if (settings.cacheSizeBytes !== undefined && settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `cacheSizeBytes must be at least ${LRU_MINIMUM_CACHE_SIZE_BYTES}`);\n  }\n  return provider.initialize({\n    options: settings,\n    instanceIdentifier: databaseId\n  });\n}\nfunction getFirestore(appOrDatabaseId, optionalDatabaseId) {\n  const app = typeof appOrDatabaseId === 'object' ? appOrDatabaseId : getApp();\n  const databaseId = typeof appOrDatabaseId === 'string' ? appOrDatabaseId : optionalDatabaseId || DEFAULT_DATABASE_NAME;\n  const db = _getProvider(app, 'firestore').getImmediate({\n    identifier: databaseId\n  });\n  if (!db._initialized) {\n    const emulator = getDefaultEmulatorHostnameAndPort('firestore');\n    if (emulator) {\n      connectFirestoreEmulator(db, ...emulator);\n    }\n  }\n  return db;\n}\n/**\r\n * @internal\r\n */\nfunction ensureFirestoreConfigured(firestore) {\n  if (!firestore._firestoreClient) {\n    configureFirestore(firestore);\n  }\n  firestore._firestoreClient.verifyNotTerminated();\n  return firestore._firestoreClient;\n}\nfunction configureFirestore(firestore) {\n  var _a, _b, _c;\n  const settings = firestore._freezeSettings();\n  const databaseInfo = makeDatabaseInfo(firestore._databaseId, ((_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.appId) || '', firestore._persistenceKey, settings);\n  firestore._firestoreClient = new FirestoreClient(firestore._authCredentials, firestore._appCheckCredentials, firestore._queue, databaseInfo);\n  if (((_b = settings.localCache) === null || _b === void 0 ? void 0 : _b._offlineComponentProvider) && ((_c = settings.localCache) === null || _c === void 0 ? void 0 : _c._onlineComponentProvider)) {\n    firestore._firestoreClient._uninitializedComponentsProvider = {\n      _offlineKind: settings.localCache.kind,\n      _offline: settings.localCache._offlineComponentProvider,\n      _online: settings.localCache._onlineComponentProvider\n    };\n  }\n}\n/**\r\n * Attempts to enable persistent storage, if possible.\r\n *\r\n * On failure, `enableIndexedDbPersistence()` will reject the promise or\r\n * throw an exception. There are several reasons why this can fail, which can be\r\n * identified by the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab.\r\n *   * unimplemented: The browser is incompatible with the offline persistence\r\n *     implementation.\r\n *\r\n * Note that even after a failure, the {@link Firestore} instance will remain\r\n * usable, however offline persistence will be disabled.\r\n *\r\n * Note: `enableIndexedDbPersistence()` must be called before any other functions\r\n * (other than {@link initializeFirestore}, {@link (getFirestore:1)} or\r\n * {@link clearIndexedDbPersistence}.\r\n *\r\n * Persistence cannot be used in a Node.js environment.\r\n *\r\n * @param firestore - The {@link Firestore} instance to enable persistence for.\r\n * @param persistenceSettings - Optional settings object to configure\r\n * persistence.\r\n * @returns A `Promise` that represents successfully enabling persistent storage.\r\n * @deprecated This function will be removed in a future major release. Instead, set\r\n * `FirestoreSettings.localCache` to an instance of `PersistentLocalCache` to\r\n * turn on IndexedDb cache. Calling this function when `FirestoreSettings.localCache`\r\n * is already specified will throw an exception.\r\n */\nfunction enableIndexedDbPersistence(firestore, persistenceSettings) {\n  firestore = cast(firestore, Firestore);\n  verifyNotInitialized(firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  if (client._uninitializedComponentsProvider) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'SDK cache is already specified.');\n  }\n  logWarn('enableIndexedDbPersistence() will be deprecated in the future, ' + 'you can use `FirestoreSettings.cache` instead.');\n  const settings = firestore._freezeSettings();\n  const onlineComponentProvider = new OnlineComponentProvider();\n  const offlineComponentProvider = new IndexedDbOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes, persistenceSettings === null || persistenceSettings === void 0 ? void 0 : persistenceSettings.forceOwnership);\n  return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\n}\n/**\r\n * Attempts to enable multi-tab persistent storage, if possible. If enabled\r\n * across all tabs, all operations share access to local persistence, including\r\n * shared execution of queries and latency-compensated local document updates\r\n * across all connected instances.\r\n *\r\n * On failure, `enableMultiTabIndexedDbPersistence()` will reject the promise or\r\n * throw an exception. There are several reasons why this can fail, which can be\r\n * identified by the `code` on the error.\r\n *\r\n *   * failed-precondition: The app is already open in another browser tab and\r\n *     multi-tab is not enabled.\r\n *   * unimplemented: The browser is incompatible with the offline persistence\r\n *     implementation.\r\n *\r\n * Note that even after a failure, the {@link Firestore} instance will remain\r\n * usable, however offline persistence will be disabled.\r\n *\r\n * @param firestore - The {@link Firestore} instance to enable persistence for.\r\n * @returns A `Promise` that represents successfully enabling persistent\r\n * storage.\r\n * @deprecated This function will be removed in a future major release. Instead, set\r\n * `FirestoreSettings.localCache` to an instance of `PersistentLocalCache` to\r\n * turn on indexeddb cache. Calling this function when `FirestoreSettings.localCache`\r\n * is already specified will throw an exception.\r\n */\nfunction enableMultiTabIndexedDbPersistence(firestore) {\n  firestore = cast(firestore, Firestore);\n  verifyNotInitialized(firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  if (client._uninitializedComponentsProvider) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'SDK cache is already specified.');\n  }\n  logWarn('enableMultiTabIndexedDbPersistence() will be deprecated in the future, ' + 'you can use `FirestoreSettings.cache` instead.');\n  const settings = firestore._freezeSettings();\n  const onlineComponentProvider = new OnlineComponentProvider();\n  const offlineComponentProvider = new MultiTabOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes);\n  return setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider);\n}\n/**\r\n * Registers both the `OfflineComponentProvider` and `OnlineComponentProvider`.\r\n * If the operation fails with a recoverable error (see\r\n * `canRecoverFromIndexedDbError()` below), the returned Promise is rejected\r\n * but the client remains usable.\r\n */\nfunction setPersistenceProviders(client, onlineComponentProvider, offlineComponentProvider) {\n  const persistenceResult = new Deferred();\n  return client.asyncQueue.enqueue(async () => {\n    try {\n      await setOfflineComponentProvider(client, offlineComponentProvider);\n      await setOnlineComponentProvider(client, onlineComponentProvider);\n      persistenceResult.resolve();\n    } catch (e) {\n      const error = e;\n      if (!canFallbackFromIndexedDbError(error)) {\n        throw error;\n      }\n      logWarn('Error enabling indexeddb cache. Falling back to ' + 'memory cache: ' + error);\n      persistenceResult.reject(error);\n    }\n  }).then(() => persistenceResult.promise);\n}\n/**\r\n * Clears the persistent storage. This includes pending writes and cached\r\n * documents.\r\n *\r\n * Must be called while the {@link Firestore} instance is not started (after the app is\r\n * terminated or when the app is first initialized). On startup, this function\r\n * must be called before other functions (other than {@link\r\n * initializeFirestore} or {@link (getFirestore:1)})). If the {@link Firestore}\r\n * instance is still running, the promise will be rejected with the error code\r\n * of `failed-precondition`.\r\n *\r\n * Note: `clearIndexedDbPersistence()` is primarily intended to help write\r\n * reliable tests that use Cloud Firestore. It uses an efficient mechanism for\r\n * dropping existing data but does not attempt to securely overwrite or\r\n * otherwise make cached data unrecoverable. For applications that are sensitive\r\n * to the disclosure of cached data in between user sessions, we strongly\r\n * recommend not enabling persistence at all.\r\n *\r\n * @param firestore - The {@link Firestore} instance to clear persistence for.\r\n * @returns A `Promise` that is resolved when the persistent storage is\r\n * cleared. Otherwise, the promise is rejected with an error.\r\n */\nfunction clearIndexedDbPersistence(firestore) {\n  if (firestore._initialized && !firestore._terminated) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'Persistence can only be cleared before a Firestore instance is ' + 'initialized or after it is terminated.');\n  }\n  const deferred = new Deferred();\n  firestore._queue.enqueueAndForgetEvenWhileRestricted(async () => {\n    try {\n      await indexedDbClearPersistence(indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey));\n      deferred.resolve();\n    } catch (e) {\n      deferred.reject(e);\n    }\n  });\n  return deferred.promise;\n}\n/**\r\n * Waits until all currently pending writes for the active user have been\r\n * acknowledged by the backend.\r\n *\r\n * The returned promise resolves immediately if there are no outstanding writes.\r\n * Otherwise, the promise waits for all previously issued writes (including\r\n * those written in a previous app session), but it does not wait for writes\r\n * that were added after the function is called. If you want to wait for\r\n * additional writes, call `waitForPendingWrites()` again.\r\n *\r\n * Any outstanding `waitForPendingWrites()` promises are rejected during user\r\n * changes.\r\n *\r\n * @returns A `Promise` which resolves when all currently pending writes have been\r\n * acknowledged by the backend.\r\n */\nfunction waitForPendingWrites(firestore) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientWaitForPendingWrites(client);\n}\n/**\r\n * Re-enables use of the network for this {@link Firestore} instance after a prior\r\n * call to {@link disableNetwork}.\r\n *\r\n * @returns A `Promise` that is resolved once the network has been enabled.\r\n */\nfunction enableNetwork(firestore) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientEnableNetwork(client);\n}\n/**\r\n * Disables network usage for this instance. It can be re-enabled via {@link\r\n * enableNetwork}. While the network is disabled, any snapshot listeners,\r\n * `getDoc()` or `getDocs()` calls will return results from cache, and any write\r\n * operations will be queued until the network is restored.\r\n *\r\n * @returns A `Promise` that is resolved once the network has been disabled.\r\n */\nfunction disableNetwork(firestore) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientDisableNetwork(client);\n}\n/**\r\n * Terminates the provided {@link Firestore} instance.\r\n *\r\n * After calling `terminate()` only the `clearIndexedDbPersistence()` function\r\n * may be used. Any other function will throw a `FirestoreError`.\r\n *\r\n * To restart after termination, create a new instance of FirebaseFirestore with\r\n * {@link (getFirestore:1)}.\r\n *\r\n * Termination does not cancel any pending writes, and any promises that are\r\n * awaiting a response from the server will not be resolved. If you have\r\n * persistence enabled, the next time you start this instance, it will resume\r\n * sending these writes to the server.\r\n *\r\n * Note: Under normal circumstances, calling `terminate()` is not required. This\r\n * function is useful only when you want to force this instance to release all\r\n * of its resources or in combination with `clearIndexedDbPersistence()` to\r\n * ensure that all local state is destroyed between test runs.\r\n *\r\n * @returns A `Promise` that is resolved when the instance has been successfully\r\n * terminated.\r\n */\nfunction terminate(firestore) {\n  _removeServiceInstance(firestore.app, 'firestore', firestore._databaseId.database);\n  return firestore._delete();\n}\n/**\r\n * Loads a Firestore bundle into the local cache.\r\n *\r\n * @param firestore - The {@link Firestore} instance to load bundles for.\r\n * @param bundleData - An object representing the bundle to be loaded. Valid\r\n * objects are `ArrayBuffer`, `ReadableStream<Uint8Array>` or `string`.\r\n *\r\n * @returns A `LoadBundleTask` object, which notifies callers with progress\r\n * updates, and completion or error events. It can be used as a\r\n * `Promise<LoadBundleTaskProgress>`.\r\n */\nfunction loadBundle(firestore, bundleData) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const resultTask = new LoadBundleTask();\n  firestoreClientLoadBundle(client, firestore._databaseId, bundleData, resultTask);\n  return resultTask;\n}\n/**\r\n * Reads a Firestore {@link Query} from local cache, identified by the given\r\n * name.\r\n *\r\n * The named queries are packaged  into bundles on the server side (along\r\n * with resulting documents), and loaded to local cache using `loadBundle`. Once\r\n * in local cache, use this method to extract a {@link Query} by name.\r\n *\r\n * @param firestore - The {@link Firestore} instance to read the query from.\r\n * @param name - The name of the query.\r\n * @returns A `Promise` that is resolved with the Query or `null`.\r\n */\nfunction namedQuery(firestore, name) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetNamedQuery(client, name).then(namedQuery => {\n    if (!namedQuery) {\n      return null;\n    }\n    return new Query(firestore, null, namedQuery.query);\n  });\n}\nfunction verifyNotInitialized(firestore) {\n  if (firestore._initialized || firestore._terminated) {\n    throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer be ' + 'enabled. You can only enable persistence before calling any other ' + 'methods on a Firestore object.');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction registerFirestore(variant, useFetchStreams = true) {\n  setSDKVersion(SDK_VERSION$1);\n  _registerComponent(new Component('firestore', (container, {\n    instanceIdentifier: databaseId,\n    options: settings\n  }) => {\n    const app = container.getProvider('app').getImmediate();\n    const firestoreInstance = new Firestore(new FirebaseAuthCredentialsProvider(container.getProvider('auth-internal')), new FirebaseAppCheckTokenProvider(container.getProvider('app-check-internal')), databaseIdFromApp(app, databaseId), app);\n    settings = Object.assign({\n      useFetchStreams\n    }, settings);\n    firestoreInstance._setSettings(settings);\n    return firestoreInstance;\n  }, 'PUBLIC').setMultipleInstances(true));\n  registerVersion(name, version$1, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version$1, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Concrete implementation of the Aggregate type.\r\n */\nclass AggregateImpl {\n  constructor(alias, aggregateType, fieldPath) {\n    this.alias = alias;\n    this.aggregateType = aggregateType;\n    this.fieldPath = fieldPath;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents an aggregation that can be performed by Firestore.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass AggregateField {\n  /**\r\n   * Create a new AggregateField<T>\r\n   * @param aggregateType Specifies the type of aggregation operation to perform.\r\n   * @param _internalFieldPath Optionally specifies the field that is aggregated.\r\n   * @internal\r\n   */\n  constructor(aggregateType = 'count', _internalFieldPath) {\n    this._internalFieldPath = _internalFieldPath;\n    /** A type string to uniquely identify instances of this class. */\n    this.type = 'AggregateField';\n    this.aggregateType = aggregateType;\n  }\n}\n/**\r\n * The results of executing an aggregation query.\r\n */\nclass AggregateQuerySnapshot {\n  /** @hideconstructor */\n  constructor(query, _userDataWriter, _data) {\n    this._userDataWriter = _userDataWriter;\n    this._data = _data;\n    /** A type string to uniquely identify instances of this class. */\n    this.type = 'AggregateQuerySnapshot';\n    this.query = query;\n  }\n  /**\r\n   * Returns the results of the aggregations performed over the underlying\r\n   * query.\r\n   *\r\n   * The keys of the returned object will be the same as those of the\r\n   * `AggregateSpec` object specified to the aggregation method, and the values\r\n   * will be the corresponding aggregation result.\r\n   *\r\n   * @returns The results of the aggregations performed over the underlying\r\n   * query.\r\n   */\n  data() {\n    return this._userDataWriter.convertObjectMap(this._data);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An immutable object representing an array of bytes.\r\n */\nclass Bytes {\n  /** @hideconstructor */\n  constructor(byteString) {\n    this._byteString = byteString;\n  }\n  /**\r\n   * Creates a new `Bytes` object from the given Base64 string, converting it to\r\n   * bytes.\r\n   *\r\n   * @param base64 - The Base64 string used to create the `Bytes` object.\r\n   */\n  static fromBase64String(base64) {\n    try {\n      return new Bytes(ByteString.fromBase64String(base64));\n    } catch (e) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct data from Base64 string: ' + e);\n    }\n  }\n  /**\r\n   * Creates a new `Bytes` object from the given Uint8Array.\r\n   *\r\n   * @param array - The Uint8Array used to create the `Bytes` object.\r\n   */\n  static fromUint8Array(array) {\n    return new Bytes(ByteString.fromUint8Array(array));\n  }\n  /**\r\n   * Returns the underlying bytes as a Base64-encoded string.\r\n   *\r\n   * @returns The Base64-encoded string created from the `Bytes` object.\r\n   */\n  toBase64() {\n    return this._byteString.toBase64();\n  }\n  /**\r\n   * Returns the underlying bytes in a new `Uint8Array`.\r\n   *\r\n   * @returns The Uint8Array created from the `Bytes` object.\r\n   */\n  toUint8Array() {\n    return this._byteString.toUint8Array();\n  }\n  /**\r\n   * Returns a string representation of the `Bytes` object.\r\n   *\r\n   * @returns A string representation of the `Bytes` object.\r\n   */\n  toString() {\n    return 'Bytes(base64: ' + this.toBase64() + ')';\n  }\n  /**\r\n   * Returns true if this `Bytes` object is equal to the provided one.\r\n   *\r\n   * @param other - The `Bytes` object to compare against.\r\n   * @returns true if this `Bytes` object is equal to the provided one.\r\n   */\n  isEqual(other) {\n    return this._byteString.isEqual(other._byteString);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A `FieldPath` refers to a field in a document. The path may consist of a\r\n * single field name (referring to a top-level field in the document), or a\r\n * list of field names (referring to a nested field in the document).\r\n *\r\n * Create a `FieldPath` by providing field names. If more than one field\r\n * name is provided, the path will point to a nested field in a document.\r\n */\nclass FieldPath {\n  /**\r\n   * Creates a `FieldPath` from the provided field names. If more than one field\r\n   * name is provided, the path will point to a nested field in a document.\r\n   *\r\n   * @param fieldNames - A list of field names.\r\n   */\n  constructor(...fieldNames) {\n    for (let i = 0; i < fieldNames.length; ++i) {\n      if (fieldNames[i].length === 0) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid field name at argument $(i + 1). ` + 'Field names must not be empty.');\n      }\n    }\n    this._internalPath = new FieldPath$1(fieldNames);\n  }\n  /**\r\n   * Returns true if this `FieldPath` is equal to the provided one.\r\n   *\r\n   * @param other - The `FieldPath` to compare against.\r\n   * @returns true if this `FieldPath` is equal to the provided one.\r\n   */\n  isEqual(other) {\n    return this._internalPath.isEqual(other._internalPath);\n  }\n}\n/**\r\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\r\n * It can be used in queries to sort or filter by the document ID.\r\n */\nfunction documentId() {\n  return new FieldPath(DOCUMENT_KEY_NAME);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Sentinel values that can be used when writing document fields with `set()`\r\n * or `update()`.\r\n */\nclass FieldValue {\n  /**\r\n   * @param _methodName - The public API endpoint that returns this class.\r\n   * @hideconstructor\r\n   */\n  constructor(_methodName) {\n    this._methodName = _methodName;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An immutable object representing a geographic location in Firestore. The\r\n * location is represented as latitude/longitude pair.\r\n *\r\n * Latitude values are in the range of [-90, 90].\r\n * Longitude values are in the range of [-180, 180].\r\n */\nclass GeoPoint {\n  /**\r\n   * Creates a new immutable `GeoPoint` object with the provided latitude and\r\n   * longitude values.\r\n   * @param latitude - The latitude as number between -90 and 90.\r\n   * @param longitude - The longitude as number between -180 and 180.\r\n   */\n  constructor(latitude, longitude) {\n    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);\n    }\n    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);\n    }\n    this._lat = latitude;\n    this._long = longitude;\n  }\n  /**\r\n   * The latitude of this `GeoPoint` instance.\r\n   */\n  get latitude() {\n    return this._lat;\n  }\n  /**\r\n   * The longitude of this `GeoPoint` instance.\r\n   */\n  get longitude() {\n    return this._long;\n  }\n  /**\r\n   * Returns true if this `GeoPoint` is equal to the provided one.\r\n   *\r\n   * @param other - The `GeoPoint` to compare against.\r\n   * @returns true if this `GeoPoint` is equal to the provided one.\r\n   */\n  isEqual(other) {\n    return this._lat === other._lat && this._long === other._long;\n  }\n  /** Returns a JSON-serializable representation of this GeoPoint. */\n  toJSON() {\n    return {\n      latitude: this._lat,\n      longitude: this._long\n    };\n  }\n  /**\r\n   * Actually private to JS consumers of our API, so this function is prefixed\r\n   * with an underscore.\r\n   */\n  _compareTo(other) {\n    return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2024 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents a vector type in Firestore documents.\r\n * Create an instance with {@link FieldValue.vector}.\r\n *\r\n * @class VectorValue\r\n */\nclass VectorValue {\n  /**\r\n   * @private\r\n   * @internal\r\n   */\n  constructor(values) {\n    // Making a copy of the parameter.\n    this._values = (values || []).map(n => n);\n  }\n  /**\r\n   * Returns a copy of the raw number array form of the vector.\r\n   */\n  toArray() {\n    return this._values.map(n => n);\n  }\n  /**\r\n   * Returns `true` if the two VectorValue has the same raw number arrays, returns `false` otherwise.\r\n   */\n  isEqual(other) {\n    return isPrimitiveArrayEqual(this._values, other._values);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst RESERVED_FIELD_REGEX = /^__.*__$/;\n/** The result of parsing document data (e.g. for a setData call). */\nclass ParsedSetData {\n  constructor(data, fieldMask, fieldTransforms) {\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.fieldTransforms = fieldTransforms;\n  }\n  toMutation(key, precondition) {\n    if (this.fieldMask !== null) {\n      return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\n    } else {\n      return new SetMutation(key, this.data, precondition, this.fieldTransforms);\n    }\n  }\n}\n/** The result of parsing \"update\" data (i.e. for an updateData call). */\nclass ParsedUpdateData {\n  constructor(data,\n  // The fieldMask does not include document transforms.\n  fieldMask, fieldTransforms) {\n    this.data = data;\n    this.fieldMask = fieldMask;\n    this.fieldTransforms = fieldTransforms;\n  }\n  toMutation(key, precondition) {\n    return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);\n  }\n}\nfunction isWrite(dataSource) {\n  switch (dataSource) {\n    case 0 /* UserDataSource.Set */: // fall through\n    case 2 /* UserDataSource.MergeSet */: // fall through\n    case 1 /* UserDataSource.Update */:\n      return true;\n    case 3 /* UserDataSource.Argument */:\n    case 4 /* UserDataSource.ArrayArgument */:\n      return false;\n    default:\n      throw fail();\n  }\n}\n/** A \"context\" object passed around while parsing user data. */\nclass ParseContextImpl {\n  /**\r\n   * Initializes a ParseContext with the given source and path.\r\n   *\r\n   * @param settings - The settings for the parser.\r\n   * @param databaseId - The database ID of the Firestore instance.\r\n   * @param serializer - The serializer to use to generate the Value proto.\r\n   * @param ignoreUndefinedProperties - Whether to ignore undefined properties\r\n   * rather than throw.\r\n   * @param fieldTransforms - A mutable list of field transforms encountered\r\n   * while parsing the data.\r\n   * @param fieldMask - A mutable list of field paths encountered while parsing\r\n   * the data.\r\n   *\r\n   * TODO(b/34871131): We don't support array paths right now, so path can be\r\n   * null to indicate the context represents any location within an array (in\r\n   * which case certain features will not work and errors will be somewhat\r\n   * compromised).\r\n   */\n  constructor(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {\n    this.settings = settings;\n    this.databaseId = databaseId;\n    this.serializer = serializer;\n    this.ignoreUndefinedProperties = ignoreUndefinedProperties;\n    // Minor hack: If fieldTransforms is undefined, we assume this is an\n    // external call and we need to validate the entire path.\n    if (fieldTransforms === undefined) {\n      this.validatePath();\n    }\n    this.fieldTransforms = fieldTransforms || [];\n    this.fieldMask = fieldMask || [];\n  }\n  get path() {\n    return this.settings.path;\n  }\n  get dataSource() {\n    return this.settings.dataSource;\n  }\n  /** Returns a new context with the specified settings overwritten. */\n  contextWith(configuration) {\n    return new ParseContextImpl(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n  }\n  childContextForField(field) {\n    var _a;\n    const childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\n    const context = this.contextWith({\n      path: childPath,\n      arrayElement: false\n    });\n    context.validatePathSegment(field);\n    return context;\n  }\n  childContextForFieldPath(field) {\n    var _a;\n    const childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field);\n    const context = this.contextWith({\n      path: childPath,\n      arrayElement: false\n    });\n    context.validatePath();\n    return context;\n  }\n  childContextForArray(index) {\n    // TODO(b/34871131): We don't support array paths right now; so make path\n    // undefined.\n    return this.contextWith({\n      path: undefined,\n      arrayElement: true\n    });\n  }\n  createError(reason) {\n    return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);\n  }\n  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */\n  contains(fieldPath) {\n    return this.fieldMask.find(field => fieldPath.isPrefixOf(field)) !== undefined || this.fieldTransforms.find(transform => fieldPath.isPrefixOf(transform.field)) !== undefined;\n  }\n  validatePath() {\n    // TODO(b/34871131): Remove null check once we have proper paths for fields\n    // within arrays.\n    if (!this.path) {\n      return;\n    }\n    for (let i = 0; i < this.path.length; i++) {\n      this.validatePathSegment(this.path.get(i));\n    }\n  }\n  validatePathSegment(segment) {\n    if (segment.length === 0) {\n      throw this.createError('Document fields must not be empty');\n    }\n    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {\n      throw this.createError('Document fields cannot begin and end with \"__\"');\n    }\n  }\n}\n/**\r\n * Helper for parsing raw user input (provided via the API) into internal model\r\n * classes.\r\n */\nclass UserDataReader {\n  constructor(databaseId, ignoreUndefinedProperties, serializer) {\n    this.databaseId = databaseId;\n    this.ignoreUndefinedProperties = ignoreUndefinedProperties;\n    this.serializer = serializer || newSerializer(databaseId);\n  }\n  /** Creates a new top-level parse context. */\n  createContext(dataSource, methodName, targetDoc, hasConverter = false) {\n    return new ParseContextImpl({\n      dataSource,\n      methodName,\n      targetDoc,\n      path: FieldPath$1.emptyPath(),\n      arrayElement: false,\n      hasConverter\n    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);\n  }\n}\nfunction newUserDataReader(firestore) {\n  const settings = firestore._freezeSettings();\n  const serializer = newSerializer(firestore._databaseId);\n  return new UserDataReader(firestore._databaseId, !!settings.ignoreUndefinedProperties, serializer);\n}\n/** Parse document data from a set() call. */\nfunction parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options = {}) {\n  const context = userDataReader.createContext(options.merge || options.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */, methodName, targetDoc, hasConverter);\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const updateData = parseObject(input, context);\n  let fieldMask;\n  let fieldTransforms;\n  if (options.merge) {\n    fieldMask = new FieldMask(context.fieldMask);\n    fieldTransforms = context.fieldTransforms;\n  } else if (options.mergeFields) {\n    const validatedFieldPaths = [];\n    for (const stringOrFieldPath of options.mergeFields) {\n      const fieldPath = fieldPathFromArgument$1(methodName, stringOrFieldPath, targetDoc);\n      if (!context.contains(fieldPath)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Field '${fieldPath}' is specified in your field mask but missing from your input data.`);\n      }\n      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {\n        validatedFieldPaths.push(fieldPath);\n      }\n    }\n    fieldMask = new FieldMask(validatedFieldPaths);\n    fieldTransforms = context.fieldTransforms.filter(transform => fieldMask.covers(transform.field));\n  } else {\n    fieldMask = null;\n    fieldTransforms = context.fieldTransforms;\n  }\n  return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);\n}\nclass DeleteFieldValueImpl extends FieldValue {\n  _toFieldTransform(context) {\n    if (context.dataSource === 2 /* UserDataSource.MergeSet */) {\n      // No transform to add for a delete, but we need to add it to our\n      // fieldMask so it gets deleted.\n      context.fieldMask.push(context.path);\n    } else if (context.dataSource === 1 /* UserDataSource.Update */) {\n      throw context.createError(`${this._methodName}() can only appear at the top level ` + 'of your update data');\n    } else {\n      // We shouldn't encounter delete sentinels for queries or non-merge set() calls.\n      throw context.createError(`${this._methodName}() cannot be used with set() unless you pass ` + '{merge:true}');\n    }\n    return null;\n  }\n  isEqual(other) {\n    return other instanceof DeleteFieldValueImpl;\n  }\n}\n/**\r\n * Creates a child context for parsing SerializableFieldValues.\r\n *\r\n * This is different than calling `ParseContext.contextWith` because it keeps\r\n * the fieldTransforms and fieldMask separate.\r\n *\r\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\r\n * Although these values are used with writes, any elements in these FieldValues\r\n * are not considered writes since they cannot contain any FieldValue sentinels,\r\n * etc.\r\n *\r\n * @param fieldValue - The sentinel FieldValue for which to create a child\r\n *     context.\r\n * @param context - The parent context.\r\n * @param arrayElement - Whether or not the FieldValue has an array.\r\n */\nfunction createSentinelChildContext(fieldValue, context, arrayElement) {\n  return new ParseContextImpl({\n    dataSource: 3 /* UserDataSource.Argument */,\n    targetDoc: context.settings.targetDoc,\n    methodName: fieldValue._methodName,\n    arrayElement\n  }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);\n}\nclass ServerTimestampFieldValueImpl extends FieldValue {\n  _toFieldTransform(context) {\n    return new FieldTransform(context.path, new ServerTimestampTransform());\n  }\n  isEqual(other) {\n    return other instanceof ServerTimestampFieldValueImpl;\n  }\n}\nclass ArrayUnionFieldValueImpl extends FieldValue {\n  constructor(methodName, _elements) {\n    super(methodName);\n    this._elements = _elements;\n  }\n  _toFieldTransform(context) {\n    const parseContext = createSentinelChildContext(this, context, /*array=*/true);\n    const parsedElements = this._elements.map(element => parseData(element, parseContext));\n    const arrayUnion = new ArrayUnionTransformOperation(parsedElements);\n    return new FieldTransform(context.path, arrayUnion);\n  }\n  isEqual(other) {\n    return other instanceof ArrayUnionFieldValueImpl && deepEqual(this._elements, other._elements);\n  }\n}\nclass ArrayRemoveFieldValueImpl extends FieldValue {\n  constructor(methodName, _elements) {\n    super(methodName);\n    this._elements = _elements;\n  }\n  _toFieldTransform(context) {\n    const parseContext = createSentinelChildContext(this, context, /*array=*/true);\n    const parsedElements = this._elements.map(element => parseData(element, parseContext));\n    const arrayUnion = new ArrayRemoveTransformOperation(parsedElements);\n    return new FieldTransform(context.path, arrayUnion);\n  }\n  isEqual(other) {\n    return other instanceof ArrayRemoveFieldValueImpl && deepEqual(this._elements, other._elements);\n  }\n}\nclass NumericIncrementFieldValueImpl extends FieldValue {\n  constructor(methodName, _operand) {\n    super(methodName);\n    this._operand = _operand;\n  }\n  _toFieldTransform(context) {\n    const numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));\n    return new FieldTransform(context.path, numericIncrement);\n  }\n  isEqual(other) {\n    return other instanceof NumericIncrementFieldValueImpl && this._operand === other._operand;\n  }\n}\n/** Parse update data from an update() call. */\nfunction parseUpdateData(userDataReader, methodName, targetDoc, input) {\n  const context = userDataReader.createContext(1 /* UserDataSource.Update */, methodName, targetDoc);\n  validatePlainObject('Data must be an object, but it was:', context, input);\n  const fieldMaskPaths = [];\n  const updateData = ObjectValue.empty();\n  forEach(input, (key, value) => {\n    const path = fieldPathFromDotSeparatedString(methodName, key, targetDoc);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    value = getModularInstance(value);\n    const childContext = context.childContextForFieldPath(path);\n    if (value instanceof DeleteFieldValueImpl) {\n      // Add it to the field mask, but don't add anything to updateData.\n      fieldMaskPaths.push(path);\n    } else {\n      const parsedValue = parseData(value, childContext);\n      if (parsedValue != null) {\n        fieldMaskPaths.push(path);\n        updateData.set(path, parsedValue);\n      }\n    }\n  });\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n/** Parse update data from a list of field/value arguments. */\nfunction parseUpdateVarargs(userDataReader, methodName, targetDoc, field, value, moreFieldsAndValues) {\n  const context = userDataReader.createContext(1 /* UserDataSource.Update */, methodName, targetDoc);\n  const keys = [fieldPathFromArgument$1(methodName, field, targetDoc)];\n  const values = [value];\n  if (moreFieldsAndValues.length % 2 !== 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${methodName}() needs to be called with an even number ` + 'of arguments that alternate between field names and values.');\n  }\n  for (let i = 0; i < moreFieldsAndValues.length; i += 2) {\n    keys.push(fieldPathFromArgument$1(methodName, moreFieldsAndValues[i]));\n    values.push(moreFieldsAndValues[i + 1]);\n  }\n  const fieldMaskPaths = [];\n  const updateData = ObjectValue.empty();\n  // We iterate in reverse order to pick the last value for a field if the\n  // user specified the field multiple times.\n  for (let i = keys.length - 1; i >= 0; --i) {\n    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {\n      const path = keys[i];\n      let value = values[i];\n      // For Compat types, we have to \"extract\" the underlying types before\n      // performing validation.\n      value = getModularInstance(value);\n      const childContext = context.childContextForFieldPath(path);\n      if (value instanceof DeleteFieldValueImpl) {\n        // Add it to the field mask, but don't add anything to updateData.\n        fieldMaskPaths.push(path);\n      } else {\n        const parsedValue = parseData(value, childContext);\n        if (parsedValue != null) {\n          fieldMaskPaths.push(path);\n          updateData.set(path, parsedValue);\n        }\n      }\n    }\n  }\n  const mask = new FieldMask(fieldMaskPaths);\n  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);\n}\n/**\r\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\r\n * bound).\r\n *\r\n * @param allowArrays - Whether the query value is an array that may directly\r\n * contain additional arrays (e.g. the operand of an `in` query).\r\n */\nfunction parseQueryValue(userDataReader, methodName, input, allowArrays = false) {\n  const context = userDataReader.createContext(allowArrays ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */, methodName);\n  const parsed = parseData(input, context);\n  return parsed;\n}\n/**\r\n * Parses user data to Protobuf Values.\r\n *\r\n * @param input - Data to be parsed.\r\n * @param context - A context object representing the current path being parsed,\r\n * the source of the data being parsed, etc.\r\n * @returns The parsed value, or null if the value was a FieldValue sentinel\r\n * that should not be included in the resulting parsed data.\r\n */\nfunction parseData(input, context) {\n  // Unwrap the API type from the Compat SDK. This will return the API type\n  // from firestore-exp.\n  input = getModularInstance(input);\n  if (looksLikeJsonObject(input)) {\n    validatePlainObject('Unsupported field value:', context, input);\n    return parseObject(input, context);\n  } else if (input instanceof FieldValue) {\n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    parseSentinelFieldValue(input, context);\n    return null;\n  } else if (input === undefined && context.ignoreUndefinedProperties) {\n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n  } else {\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    if (context.path) {\n      context.fieldMask.push(context.path);\n    }\n    if (input instanceof Array) {\n      // TODO(b/34871131): Include the path containing the array in the error\n      // message.\n      // In the case of IN queries, the parsed data is an array (representing\n      // the set of values to be included for the IN query) that may directly\n      // contain additional arrays (each representing an individual field\n      // value), so we disable this validation.\n      if (context.settings.arrayElement && context.dataSource !== 4 /* UserDataSource.ArrayArgument */) {\n        throw context.createError('Nested arrays are not supported');\n      }\n      return parseArray(input, context);\n    } else {\n      return parseScalarValue(input, context);\n    }\n  }\n}\nfunction parseObject(obj, context) {\n  const fields = {};\n  if (isEmpty(obj)) {\n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    if (context.path && context.path.length > 0) {\n      context.fieldMask.push(context.path);\n    }\n  } else {\n    forEach(obj, (key, val) => {\n      const parsedValue = parseData(val, context.childContextForField(key));\n      if (parsedValue != null) {\n        fields[key] = parsedValue;\n      }\n    });\n  }\n  return {\n    mapValue: {\n      fields\n    }\n  };\n}\nfunction parseArray(array, context) {\n  const values = [];\n  let entryIndex = 0;\n  for (const entry of array) {\n    let parsedEntry = parseData(entry, context.childContextForArray(entryIndex));\n    if (parsedEntry == null) {\n      // Just include nulls in the array for fields being replaced with a\n      // sentinel.\n      parsedEntry = {\n        nullValue: 'NULL_VALUE'\n      };\n    }\n    values.push(parsedEntry);\n    entryIndex++;\n  }\n  return {\n    arrayValue: {\n      values\n    }\n  };\n}\n/**\r\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\r\n * context.fieldTransforms.\r\n */\nfunction parseSentinelFieldValue(value, context) {\n  // Sentinels are only supported with writes, and not within arrays.\n  if (!isWrite(context.dataSource)) {\n    throw context.createError(`${value._methodName}() can only be used with update() and set()`);\n  }\n  if (!context.path) {\n    throw context.createError(`${value._methodName}() is not currently supported inside arrays`);\n  }\n  const fieldTransform = value._toFieldTransform(context);\n  if (fieldTransform) {\n    context.fieldTransforms.push(fieldTransform);\n  }\n}\n/**\r\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\r\n *\r\n * @returns The parsed value\r\n */\nfunction parseScalarValue(value, context) {\n  value = getModularInstance(value);\n  if (value === null) {\n    return {\n      nullValue: 'NULL_VALUE'\n    };\n  } else if (typeof value === 'number') {\n    return toNumber(context.serializer, value);\n  } else if (typeof value === 'boolean') {\n    return {\n      booleanValue: value\n    };\n  } else if (typeof value === 'string') {\n    return {\n      stringValue: value\n    };\n  } else if (value instanceof Date) {\n    const timestamp = Timestamp.fromDate(value);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof Timestamp) {\n    // Firestore backend truncates precision down to microseconds. To ensure\n    // offline mode works the same with regards to truncation, perform the\n    // truncation immediately without waiting for the backend to do that.\n    const timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000);\n    return {\n      timestampValue: toTimestamp(context.serializer, timestamp)\n    };\n  } else if (value instanceof GeoPoint) {\n    return {\n      geoPointValue: {\n        latitude: value.latitude,\n        longitude: value.longitude\n      }\n    };\n  } else if (value instanceof Bytes) {\n    return {\n      bytesValue: toBytes(context.serializer, value._byteString)\n    };\n  } else if (value instanceof DocumentReference) {\n    const thisDb = context.databaseId;\n    const otherDb = value.firestore._databaseId;\n    if (!otherDb.isEqual(thisDb)) {\n      throw context.createError('Document reference is for database ' + `${otherDb.projectId}/${otherDb.database} but should be ` + `for database ${thisDb.projectId}/${thisDb.database}`);\n    }\n    return {\n      referenceValue: toResourceName(value.firestore._databaseId || context.databaseId, value._key.path)\n    };\n  } else if (value instanceof VectorValue) {\n    return parseVectorValue(value, context);\n  } else {\n    throw context.createError(`Unsupported field value: ${valueDescription(value)}`);\n  }\n}\n/**\r\n * Creates a new VectorValue proto value (using the internal format).\r\n */\nfunction parseVectorValue(value, context) {\n  const mapValue = {\n    fields: {\n      [TYPE_KEY]: {\n        stringValue: VECTOR_VALUE_SENTINEL\n      },\n      [VECTOR_MAP_VECTORS_KEY]: {\n        arrayValue: {\n          values: value.toArray().map(value => {\n            if (typeof value !== 'number') {\n              throw context.createError('VectorValues must only contain numeric values.');\n            }\n            return toDouble(context.serializer, value);\n          })\n        }\n      }\n    }\n  };\n  return {\n    mapValue\n  };\n}\n/**\r\n * Checks whether an object looks like a JSON object that should be converted\r\n * into a struct. Normal class/prototype instances are considered to look like\r\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\r\n * GeoPoints, etc. are not considered to look like JSON objects since they map\r\n * to specific FieldValue types other than ObjectValue.\r\n */\nfunction looksLikeJsonObject(input) {\n  return typeof input === 'object' && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Bytes) && !(input instanceof DocumentReference) && !(input instanceof FieldValue) && !(input instanceof VectorValue);\n}\nfunction validatePlainObject(message, context, input) {\n  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {\n    const description = valueDescription(input);\n    if (description === 'an object') {\n      // Massage the error if it was an object.\n      throw context.createError(message + ' a custom object');\n    } else {\n      throw context.createError(message + ' ' + description);\n    }\n  }\n}\n/**\r\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\r\n */\nfunction fieldPathFromArgument$1(methodName, path, targetDoc) {\n  // If required, replace the FieldPath Compat class with the firestore-exp\n  // FieldPath.\n  path = getModularInstance(path);\n  if (path instanceof FieldPath) {\n    return path._internalPath;\n  } else if (typeof path === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, path);\n  } else {\n    const message = 'Field path arguments must be of type string or ';\n    throw createError(message, methodName, /* hasConverter= */false, /* path= */undefined, targetDoc);\n  }\n}\n/**\r\n * Matches any characters in a field path string that are reserved.\r\n */\nconst FIELD_PATH_RESERVED = new RegExp('[~\\\\*/\\\\[\\\\]]');\n/**\r\n * Wraps fromDotSeparatedString with an error message about the method that\r\n * was thrown.\r\n * @param methodName - The publicly visible method name\r\n * @param path - The dot-separated string form of a field path which will be\r\n * split on dots.\r\n * @param targetDoc - The document against which the field path will be\r\n * evaluated.\r\n */\nfunction fieldPathFromDotSeparatedString(methodName, path, targetDoc) {\n  const found = path.search(FIELD_PATH_RESERVED);\n  if (found >= 0) {\n    throw createError(`Invalid field path (${path}). Paths must not contain ` + `'~', '*', '/', '[', or ']'`, methodName, /* hasConverter= */false, /* path= */undefined, targetDoc);\n  }\n  try {\n    return new FieldPath(...path.split('.'))._internalPath;\n  } catch (e) {\n    throw createError(`Invalid field path (${path}). Paths must not be empty, ` + `begin with '.', end with '.', or contain '..'`, methodName, /* hasConverter= */false, /* path= */undefined, targetDoc);\n  }\n}\nfunction createError(reason, methodName, hasConverter, path, targetDoc) {\n  const hasPath = path && !path.isEmpty();\n  const hasDocument = targetDoc !== undefined;\n  let message = `Function ${methodName}() called with invalid data`;\n  if (hasConverter) {\n    message += ' (via `toFirestore()`)';\n  }\n  message += '. ';\n  let description = '';\n  if (hasPath || hasDocument) {\n    description += ' (found';\n    if (hasPath) {\n      description += ` in field ${path}`;\n    }\n    if (hasDocument) {\n      description += ` in document ${targetDoc}`;\n    }\n    description += ')';\n  }\n  return new FirestoreError(Code.INVALID_ARGUMENT, message + reason + description);\n}\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */\nfunction fieldMaskContains(haystack, needle) {\n  return haystack.some(v => v.isEqual(needle));\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\nclass DocumentSnapshot$1 {\n  // Note: This class is stripped down version of the DocumentSnapshot in\n  // the legacy SDK. The changes are:\n  // - No support for SnapshotMetadata.\n  // - No support for SnapshotOptions.\n  /** @hideconstructor protected */\n  constructor(_firestore, _userDataWriter, _key, _document, _converter) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._key = _key;\n    this._document = _document;\n    this._converter = _converter;\n  }\n  /** Property of the `DocumentSnapshot` that provides the document's ID. */\n  get id() {\n    return this._key.path.lastSegment();\n  }\n  /**\r\n   * The `DocumentReference` for the document included in the `DocumentSnapshot`.\r\n   */\n  get ref() {\n    return new DocumentReference(this._firestore, this._converter, this._key);\n  }\n  /**\r\n   * Signals whether or not the document at the snapshot's location exists.\r\n   *\r\n   * @returns true if the document exists.\r\n   */\n  exists() {\n    return this._document !== null;\n  }\n  /**\r\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n   * the document doesn't exist.\r\n   *\r\n   * @returns An `Object` containing all fields in the document or `undefined`\r\n   * if the document doesn't exist.\r\n   */\n  data() {\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      const snapshot = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, /* converter= */null);\n      return this._converter.fromFirestore(snapshot);\n    } else {\n      return this._userDataWriter.convertValue(this._document.data.value);\n    }\n  }\n  /**\r\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n   * document or field doesn't exist.\r\n   *\r\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n   * field.\r\n   * @returns The data at the specified field location or undefined if no such\r\n   * field exists in the document.\r\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(fieldPath) {\n    if (this._document) {\n      const value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        return this._userDataWriter.convertValue(value);\n      }\n    }\n    return undefined;\n  }\n}\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\nclass QueryDocumentSnapshot$1 extends DocumentSnapshot$1 {\n  /**\r\n   * Retrieves all fields in the document as an `Object`.\r\n   *\r\n   * @override\r\n   * @returns An `Object` containing all fields in the document.\r\n   */\n  data() {\n    return super.data();\n  }\n}\n/**\r\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\r\n */\nfunction fieldPathFromArgument(methodName, arg) {\n  if (typeof arg === 'string') {\n    return fieldPathFromDotSeparatedString(methodName, arg);\n  } else if (arg instanceof FieldPath) {\n    return arg._internalPath;\n  } else {\n    return arg._delegate._internalPath;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction validateHasExplicitOrderByForLimitToLast(query) {\n  if (query.limitType === \"L\" /* LimitType.Last */ && query.explicitOrderBy.length === 0) {\n    throw new FirestoreError(Code.UNIMPLEMENTED, 'limitToLast() queries require specifying at least one orderBy() clause');\n  }\n}\n/**\r\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\r\n * to a Firestore query.\r\n */\nclass AppliableConstraint {}\n/**\r\n * A `QueryConstraint` is used to narrow the set of documents returned by a\r\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\r\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\r\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\r\n * can then be passed to {@link (query:1)} to create a new query instance that\r\n * also contains this `QueryConstraint`.\r\n */\nclass QueryConstraint extends AppliableConstraint {}\nfunction query(query, queryConstraint, ...additionalQueryConstraints) {\n  let queryConstraints = [];\n  if (queryConstraint instanceof AppliableConstraint) {\n    queryConstraints.push(queryConstraint);\n  }\n  queryConstraints = queryConstraints.concat(additionalQueryConstraints);\n  validateQueryConstraintArray(queryConstraints);\n  for (const constraint of queryConstraints) {\n    query = constraint._apply(query);\n  }\n  return query;\n}\n/**\r\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\r\n * a Firestore query by filtering on one or more document fields.\r\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\r\n * be passed to {@link (query:1)} to create a new query instance that also contains\r\n * this `QueryFieldFilterConstraint`.\r\n */\nclass QueryFieldFilterConstraint extends QueryConstraint {\n  /**\r\n   * @internal\r\n   */\n  constructor(_field, _op, _value) {\n    super();\n    this._field = _field;\n    this._op = _op;\n    this._value = _value;\n    /** The type of this query constraint */\n    this.type = 'where';\n  }\n  static _create(_field, _op, _value) {\n    return new QueryFieldFilterConstraint(_field, _op, _value);\n  }\n  _apply(query) {\n    const filter = this._parse(query);\n    validateNewFieldFilter(query._query, filter);\n    return new Query(query.firestore, query.converter, queryWithAddedFilter(query._query, filter));\n  }\n  _parse(query) {\n    const reader = newUserDataReader(query.firestore);\n    const filter = newQueryFilter(query._query, 'where', reader, query.firestore._databaseId, this._field, this._op, this._value);\n    return filter;\n  }\n}\n/**\r\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\r\n * must contain the specified field and that the value should satisfy the\r\n * relation constraint provided.\r\n *\r\n * @param fieldPath - The path to compare\r\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\r\n *   \"&lt;=\", \"!=\").\r\n * @param value - The value for comparison\r\n * @returns The created {@link QueryFieldFilterConstraint}.\r\n */\nfunction where(fieldPath, opStr, value) {\n  const op = opStr;\n  const field = fieldPathFromArgument('where', fieldPath);\n  return QueryFieldFilterConstraint._create(field, op, value);\n}\n/**\r\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\r\n * returned by a Firestore query by performing the logical OR or AND of multiple\r\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\r\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\r\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\r\n * instance that also contains the `QueryCompositeFilterConstraint`.\r\n */\nclass QueryCompositeFilterConstraint extends AppliableConstraint {\n  /**\r\n   * @internal\r\n   */\n  constructor( /** The type of this query constraint */\n  type, _queryConstraints) {\n    super();\n    this.type = type;\n    this._queryConstraints = _queryConstraints;\n  }\n  static _create(type, _queryConstraints) {\n    return new QueryCompositeFilterConstraint(type, _queryConstraints);\n  }\n  _parse(query) {\n    const parsedFilters = this._queryConstraints.map(queryConstraint => {\n      return queryConstraint._parse(query);\n    }).filter(parsedFilter => parsedFilter.getFilters().length > 0);\n    if (parsedFilters.length === 1) {\n      return parsedFilters[0];\n    }\n    return CompositeFilter.create(parsedFilters, this._getOperator());\n  }\n  _apply(query) {\n    const parsedFilter = this._parse(query);\n    if (parsedFilter.getFilters().length === 0) {\n      // Return the existing query if not adding any more filters (e.g. an empty\n      // composite filter).\n      return query;\n    }\n    validateNewFilter(query._query, parsedFilter);\n    return new Query(query.firestore, query.converter, queryWithAddedFilter(query._query, parsedFilter));\n  }\n  _getQueryConstraints() {\n    return this._queryConstraints;\n  }\n  _getOperator() {\n    return this.type === 'and' ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n  }\n}\n/**\r\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\r\n * the given filter constraints. A disjunction filter includes a document if it\r\n * satisfies any of the given filters.\r\n *\r\n * @param queryConstraints - Optional. The list of\r\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\r\n * created with calls to {@link where}, {@link or}, or {@link and}.\r\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\r\n */\nfunction or(...queryConstraints) {\n  // Only support QueryFilterConstraints\n  queryConstraints.forEach(queryConstraint => validateQueryFilterConstraint('or', queryConstraint));\n  return QueryCompositeFilterConstraint._create(\"or\" /* CompositeOperator.OR */, queryConstraints);\n}\n/**\r\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\r\n * the given filter constraints. A conjunction filter includes a document if it\r\n * satisfies all of the given filters.\r\n *\r\n * @param queryConstraints - Optional. The list of\r\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\r\n * created with calls to {@link where}, {@link or}, or {@link and}.\r\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\r\n */\nfunction and(...queryConstraints) {\n  // Only support QueryFilterConstraints\n  queryConstraints.forEach(queryConstraint => validateQueryFilterConstraint('and', queryConstraint));\n  return QueryCompositeFilterConstraint._create(\"and\" /* CompositeOperator.AND */, queryConstraints);\n}\n/**\r\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\r\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\r\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\r\n * instance that also contains this `QueryOrderByConstraint`.\r\n *\r\n * Note: Documents that do not contain the orderBy field will not be present in\r\n * the query result.\r\n */\nclass QueryOrderByConstraint extends QueryConstraint {\n  /**\r\n   * @internal\r\n   */\n  constructor(_field, _direction) {\n    super();\n    this._field = _field;\n    this._direction = _direction;\n    /** The type of this query constraint */\n    this.type = 'orderBy';\n  }\n  static _create(_field, _direction) {\n    return new QueryOrderByConstraint(_field, _direction);\n  }\n  _apply(query) {\n    const orderBy = newQueryOrderBy(query._query, this._field, this._direction);\n    return new Query(query.firestore, query.converter, queryWithAddedOrderBy(query._query, orderBy));\n  }\n}\n/**\r\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\r\n * specified field, optionally in descending order instead of ascending.\r\n *\r\n * Note: Documents that do not contain the specified field will not be present\r\n * in the query result.\r\n *\r\n * @param fieldPath - The field to sort by.\r\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\r\n * not specified, order will be ascending.\r\n * @returns The created {@link QueryOrderByConstraint}.\r\n */\nfunction orderBy(fieldPath, directionStr = 'asc') {\n  const direction = directionStr;\n  const path = fieldPathFromArgument('orderBy', fieldPath);\n  return QueryOrderByConstraint._create(path, direction);\n}\n/**\r\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\r\n * a Firestore query.\r\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\r\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\r\n * query instance that also contains this `QueryLimitConstraint`.\r\n */\nclass QueryLimitConstraint extends QueryConstraint {\n  /**\r\n   * @internal\r\n   */\n  constructor( /** The type of this query constraint */\n  type, _limit, _limitType) {\n    super();\n    this.type = type;\n    this._limit = _limit;\n    this._limitType = _limitType;\n  }\n  static _create(type, _limit, _limitType) {\n    return new QueryLimitConstraint(type, _limit, _limitType);\n  }\n  _apply(query) {\n    return new Query(query.firestore, query.converter, queryWithLimit(query._query, this._limit, this._limitType));\n  }\n}\n/**\r\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\r\n * documents.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created {@link QueryLimitConstraint}.\r\n */\nfunction limit(limit) {\n  validatePositiveNumber('limit', limit);\n  return QueryLimitConstraint._create('limit', limit, \"F\" /* LimitType.First */);\n}\n/**\r\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\r\n * documents.\r\n *\r\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\r\n * otherwise an exception will be thrown during execution.\r\n *\r\n * @param limit - The maximum number of items to return.\r\n * @returns The created {@link QueryLimitConstraint}.\r\n */\nfunction limitToLast(limit) {\n  validatePositiveNumber('limitToLast', limit);\n  return QueryLimitConstraint._create('limitToLast', limit, \"L\" /* LimitType.Last */);\n}\n/**\r\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\r\n * result set returned by a Firestore query.\r\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\r\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\r\n * new query instance that also contains this `QueryStartAtConstraint`.\r\n */\nclass QueryStartAtConstraint extends QueryConstraint {\n  /**\r\n   * @internal\r\n   */\n  constructor( /** The type of this query constraint */\n  type, _docOrFields, _inclusive) {\n    super();\n    this.type = type;\n    this._docOrFields = _docOrFields;\n    this._inclusive = _inclusive;\n  }\n  static _create(type, _docOrFields, _inclusive) {\n    return new QueryStartAtConstraint(type, _docOrFields, _inclusive);\n  }\n  _apply(query) {\n    const bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._inclusive);\n    return new Query(query.firestore, query.converter, queryWithStartAt(query._query, bound));\n  }\n}\nfunction startAt(...docOrFields) {\n  return QueryStartAtConstraint._create('startAt', docOrFields, /*inclusive=*/true);\n}\nfunction startAfter(...docOrFields) {\n  return QueryStartAtConstraint._create('startAfter', docOrFields, /*inclusive=*/false);\n}\n/**\r\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\r\n * result set returned by a Firestore query.\r\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\r\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\r\n * query instance that also contains this `QueryEndAtConstraint`.\r\n */\nclass QueryEndAtConstraint extends QueryConstraint {\n  /**\r\n   * @internal\r\n   */\n  constructor( /** The type of this query constraint */\n  type, _docOrFields, _inclusive) {\n    super();\n    this.type = type;\n    this._docOrFields = _docOrFields;\n    this._inclusive = _inclusive;\n  }\n  static _create(type, _docOrFields, _inclusive) {\n    return new QueryEndAtConstraint(type, _docOrFields, _inclusive);\n  }\n  _apply(query) {\n    const bound = newQueryBoundFromDocOrFields(query, this.type, this._docOrFields, this._inclusive);\n    return new Query(query.firestore, query.converter, queryWithEndAt(query._query, bound));\n  }\n}\nfunction endBefore(...docOrFields) {\n  return QueryEndAtConstraint._create('endBefore', docOrFields, /*inclusive=*/false);\n}\nfunction endAt(...docOrFields) {\n  return QueryEndAtConstraint._create('endAt', docOrFields, /*inclusive=*/true);\n}\n/** Helper function to create a bound from a document or fields */\nfunction newQueryBoundFromDocOrFields(query, methodName, docOrFields, inclusive) {\n  docOrFields[0] = getModularInstance(docOrFields[0]);\n  if (docOrFields[0] instanceof DocumentSnapshot$1) {\n    return newQueryBoundFromDocument(query._query, query.firestore._databaseId, methodName, docOrFields[0]._document, inclusive);\n  } else {\n    const reader = newUserDataReader(query.firestore);\n    return newQueryBoundFromFields(query._query, query.firestore._databaseId, reader, methodName, docOrFields, inclusive);\n  }\n}\nfunction newQueryFilter(query, methodName, dataReader, databaseId, fieldPath, op, value) {\n  let fieldValue;\n  if (fieldPath.isKeyField()) {\n    if (op === \"array-contains\" /* Operator.ARRAY_CONTAINS */ || op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid Query. You can't perform '${op}' queries on documentId().`);\n    } else if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */) {\n      validateDisjunctiveFilterElements(value, op);\n      const referenceList = [];\n      for (const arrayValue of value) {\n        referenceList.push(parseDocumentIdValue(databaseId, query, arrayValue));\n      }\n      fieldValue = {\n        arrayValue: {\n          values: referenceList\n        }\n      };\n    } else {\n      fieldValue = parseDocumentIdValue(databaseId, query, value);\n    }\n  } else {\n    if (op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */ || op === \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */) {\n      validateDisjunctiveFilterElements(value, op);\n    }\n    fieldValue = parseQueryValue(dataReader, methodName, value, /* allowArrays= */op === \"in\" /* Operator.IN */ || op === \"not-in\" /* Operator.NOT_IN */);\n  }\n  const filter = FieldFilter.create(fieldPath, op, fieldValue);\n  return filter;\n}\nfunction newQueryOrderBy(query, fieldPath, direction) {\n  if (query.startAt !== null) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call startAt() or startAfter() before ' + 'calling orderBy().');\n  }\n  if (query.endAt !== null) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call endAt() or endBefore() before ' + 'calling orderBy().');\n  }\n  const orderBy = new OrderBy(fieldPath, direction);\n  return orderBy;\n}\n/**\r\n * Create a `Bound` from a query and a document.\r\n *\r\n * Note that the `Bound` will always include the key of the document\r\n * and so only the provided document will compare equal to the returned\r\n * position.\r\n *\r\n * Will throw if the document does not contain all fields of the order by\r\n * of the query or if any of the fields in the order by are an uncommitted\r\n * server timestamp.\r\n */\nfunction newQueryBoundFromDocument(query, databaseId, methodName, doc, inclusive) {\n  if (!doc) {\n    throw new FirestoreError(Code.NOT_FOUND, `Can't use a DocumentSnapshot that doesn't exist for ` + `${methodName}().`);\n  }\n  const components = [];\n  // Because people expect to continue/end a query at the exact document\n  // provided, we need to use the implicit sort order rather than the explicit\n  // sort order, because it's guaranteed to contain the document key. That way\n  // the position becomes unambiguous and the query continues/ends exactly at\n  // the provided document. Without the key (by using the explicit sort\n  // orders), multiple documents could match the position, yielding duplicate\n  // results.\n  for (const orderBy of queryNormalizedOrderBy(query)) {\n    if (orderBy.field.isKeyField()) {\n      components.push(refValue(databaseId, doc.key));\n    } else {\n      const value = doc.data.field(orderBy.field);\n      if (isServerTimestamp(value)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a ' + 'document for which the field \"' + orderBy.field + '\" is an uncommitted server timestamp. (Since the value of ' + 'this field is unknown, you cannot start/end a query with it.)');\n      } else if (value !== null) {\n        components.push(value);\n      } else {\n        const field = orderBy.field.canonicalString();\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. You are trying to start or end a query using a ` + `document for which the field '${field}' (used as the ` + `orderBy) does not exist.`);\n      }\n    }\n  }\n  return new Bound(components, inclusive);\n}\n/**\r\n * Converts a list of field values to a `Bound` for the given query.\r\n */\nfunction newQueryBoundFromFields(query, databaseId, dataReader, methodName, values, inclusive) {\n  // Use explicit order by's because it has to match the query the user made\n  const orderBy = query.explicitOrderBy;\n  if (values.length > orderBy.length) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Too many arguments provided to ${methodName}(). ` + `The number of arguments must be less than or equal to the ` + `number of orderBy() clauses`);\n  }\n  const components = [];\n  for (let i = 0; i < values.length; i++) {\n    const rawValue = values[i];\n    const orderByComponent = orderBy[i];\n    if (orderByComponent.field.isKeyField()) {\n      if (typeof rawValue !== 'string') {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. Expected a string for document ID in ` + `${methodName}(), but got a ${typeof rawValue}`);\n      }\n      if (!isCollectionGroupQuery(query) && rawValue.indexOf('/') !== -1) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection and ordering by documentId(), ` + `the value passed to ${methodName}() must be a plain document ID, but ` + `'${rawValue}' contains a slash.`);\n      }\n      const path = query.path.child(ResourcePath.fromString(rawValue));\n      if (!DocumentKey.isDocumentKey(path)) {\n        throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection group and ordering by ` + `documentId(), the value passed to ${methodName}() must result in a ` + `valid document path, but '${path}' is not because it contains an odd number ` + `of segments.`);\n      }\n      const key = new DocumentKey(path);\n      components.push(refValue(databaseId, key));\n    } else {\n      const wrapped = parseQueryValue(dataReader, methodName, rawValue);\n      components.push(wrapped);\n    }\n  }\n  return new Bound(components, inclusive);\n}\n/**\r\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\r\n * appropriate errors if the value is anything other than a `DocumentReference`\r\n * or `string`, or if the string is malformed.\r\n */\nfunction parseDocumentIdValue(databaseId, query, documentIdValue) {\n  documentIdValue = getModularInstance(documentIdValue);\n  if (typeof documentIdValue === 'string') {\n    if (documentIdValue === '') {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. When querying with documentId(), you ' + 'must provide a valid document ID, but it was an empty string.');\n    }\n    if (!isCollectionGroupQuery(query) && documentIdValue.indexOf('/') !== -1) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection by ` + `documentId(), you must provide a plain document ID, but ` + `'${documentIdValue}' contains a '/' character.`);\n    }\n    const path = query.path.child(ResourcePath.fromString(documentIdValue));\n    if (!DocumentKey.isDocumentKey(path)) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying a collection group by ` + `documentId(), the value provided must result in a valid document path, ` + `but '${path}' is not because it has an odd number of segments (${path.length}).`);\n    }\n    return refValue(databaseId, new DocumentKey(path));\n  } else if (documentIdValue instanceof DocumentReference) {\n    return refValue(databaseId, documentIdValue._key);\n  } else {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. When querying with documentId(), you must provide a valid ` + `string or a DocumentReference, but it was: ` + `${valueDescription(documentIdValue)}.`);\n  }\n}\n/**\r\n * Validates that the value passed into a disjunctive filter satisfies all\r\n * array requirements.\r\n */\nfunction validateDisjunctiveFilterElements(value, operator) {\n  if (!Array.isArray(value) || value.length === 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid Query. A non-empty array is required for ' + `'${operator.toString()}' filters.`);\n  }\n}\n/**\r\n * Given an operator, returns the set of operators that cannot be used with it.\r\n *\r\n * This is not a comprehensive check, and this function should be removed in the\r\n * long term. Validations should occur in the Firestore backend.\r\n *\r\n * Operators in a query must adhere to the following set of rules:\r\n * 1. Only one inequality per query.\r\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\r\n */\nfunction conflictingOps(op) {\n  switch (op) {\n    case \"!=\" /* Operator.NOT_EQUAL */:\n      return [\"!=\" /* Operator.NOT_EQUAL */, \"not-in\" /* Operator.NOT_IN */];\n    case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */:\n    case \"in\" /* Operator.IN */:\n      return [\"not-in\" /* Operator.NOT_IN */];\n    case \"not-in\" /* Operator.NOT_IN */:\n      return [\"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */, \"in\" /* Operator.IN */, \"not-in\" /* Operator.NOT_IN */, \"!=\" /* Operator.NOT_EQUAL */];\n    default:\n      return [];\n  }\n}\nfunction validateNewFieldFilter(query, fieldFilter) {\n  const conflictingOp = findOpInsideFilters(query.filters, conflictingOps(fieldFilter.op));\n  if (conflictingOp !== null) {\n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    if (conflictingOp === fieldFilter.op) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You cannot use more than one ' + `'${fieldFilter.op.toString()}' filter.`);\n    } else {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, `Invalid query. You cannot use '${fieldFilter.op.toString()}' filters ` + `with '${conflictingOp.toString()}' filters.`);\n    }\n  }\n}\nfunction validateNewFilter(query, filter) {\n  let testQuery = query;\n  const subFilters = filter.getFlattenedFilters();\n  for (const subFilter of subFilters) {\n    validateNewFieldFilter(testQuery, subFilter);\n    testQuery = queryWithAddedFilter(testQuery, subFilter);\n  }\n}\n// Checks if any of the provided filter operators are included in the given list of filters and\n// returns the first one that is, or null if none are.\nfunction findOpInsideFilters(filters, operators) {\n  for (const filter of filters) {\n    for (const fieldFilter of filter.getFlattenedFilters()) {\n      if (operators.indexOf(fieldFilter.op) >= 0) {\n        return fieldFilter.op;\n      }\n    }\n  }\n  return null;\n}\nfunction validateQueryFilterConstraint(functionName, queryConstraint) {\n  if (!(queryConstraint instanceof QueryFieldFilterConstraint) && !(queryConstraint instanceof QueryCompositeFilterConstraint)) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, `Function ${functionName}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n  }\n}\nfunction validateQueryConstraintArray(queryConstraint) {\n  const compositeFilterCount = queryConstraint.filter(filter => filter instanceof QueryCompositeFilterConstraint).length;\n  const fieldFilterCount = queryConstraint.filter(filter => filter instanceof QueryFieldFilterConstraint).length;\n  if (compositeFilterCount > 1 || compositeFilterCount > 0 && fieldFilterCount > 0) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'InvalidQuery. When using composite filters, you cannot use ' + 'more than one filter at the top level. Consider nesting the multiple ' + 'filters within an `and(...)` statement. For example: ' + 'change `query(query, where(...), or(...))` to ' + '`query(query, and(where(...), or(...)))`.');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Converts Firestore's internal types to the JavaScript types that we expose\r\n * to the user.\r\n *\r\n * @internal\r\n */\nclass AbstractUserDataWriter {\n  convertValue(value, serverTimestampBehavior = 'none') {\n    switch (typeOrder(value)) {\n      case 0 /* TypeOrder.NullValue */:\n        return null;\n      case 1 /* TypeOrder.BooleanValue */:\n        return value.booleanValue;\n      case 2 /* TypeOrder.NumberValue */:\n        return normalizeNumber(value.integerValue || value.doubleValue);\n      case 3 /* TypeOrder.TimestampValue */:\n        return this.convertTimestamp(value.timestampValue);\n      case 4 /* TypeOrder.ServerTimestampValue */:\n        return this.convertServerTimestamp(value, serverTimestampBehavior);\n      case 5 /* TypeOrder.StringValue */:\n        return value.stringValue;\n      case 6 /* TypeOrder.BlobValue */:\n        return this.convertBytes(normalizeByteString(value.bytesValue));\n      case 7 /* TypeOrder.RefValue */:\n        return this.convertReference(value.referenceValue);\n      case 8 /* TypeOrder.GeoPointValue */:\n        return this.convertGeoPoint(value.geoPointValue);\n      case 9 /* TypeOrder.ArrayValue */:\n        return this.convertArray(value.arrayValue, serverTimestampBehavior);\n      case 11 /* TypeOrder.ObjectValue */:\n        return this.convertObject(value.mapValue, serverTimestampBehavior);\n      case 10 /* TypeOrder.VectorValue */:\n        return this.convertVectorValue(value.mapValue);\n      default:\n        throw fail();\n    }\n  }\n  convertObject(mapValue, serverTimestampBehavior) {\n    return this.convertObjectMap(mapValue.fields, serverTimestampBehavior);\n  }\n  /**\r\n   * @internal\r\n   */\n  convertObjectMap(fields, serverTimestampBehavior = 'none') {\n    const result = {};\n    forEach(fields, (key, value) => {\n      result[key] = this.convertValue(value, serverTimestampBehavior);\n    });\n    return result;\n  }\n  /**\r\n   * @internal\r\n   */\n  convertVectorValue(mapValue) {\n    var _a, _b, _c;\n    const values = (_c = (_b = (_a = mapValue.fields) === null || _a === void 0 ? void 0 : _a[VECTOR_MAP_VECTORS_KEY].arrayValue) === null || _b === void 0 ? void 0 : _b.values) === null || _c === void 0 ? void 0 : _c.map(value => {\n      return normalizeNumber(value.doubleValue);\n    });\n    return new VectorValue(values);\n  }\n  convertGeoPoint(value) {\n    return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));\n  }\n  convertArray(arrayValue, serverTimestampBehavior) {\n    return (arrayValue.values || []).map(value => this.convertValue(value, serverTimestampBehavior));\n  }\n  convertServerTimestamp(value, serverTimestampBehavior) {\n    switch (serverTimestampBehavior) {\n      case 'previous':\n        const previousValue = getPreviousValue(value);\n        if (previousValue == null) {\n          return null;\n        }\n        return this.convertValue(previousValue, serverTimestampBehavior);\n      case 'estimate':\n        return this.convertTimestamp(getLocalWriteTime(value));\n      default:\n        return null;\n    }\n  }\n  convertTimestamp(value) {\n    const normalizedValue = normalizeTimestamp(value);\n    return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);\n  }\n  convertDocumentKey(name, expectedDatabaseId) {\n    const resourcePath = ResourcePath.fromString(name);\n    hardAssert(isValidResourceName(resourcePath));\n    const databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));\n    const key = new DocumentKey(resourcePath.popFirst(5));\n    if (!databaseId.isEqual(expectedDatabaseId)) {\n      // TODO(b/64130202): Somehow support foreign references.\n      logError(`Document ${key} contains a document ` + `reference within a different database (` + `${databaseId.projectId}/${databaseId.database}) which is not ` + `supported. It will be treated as a reference in the current ` + `database (${expectedDatabaseId.projectId}/${expectedDatabaseId.database}) ` + `instead.`);\n    }\n    return key;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Converts custom model object of type T into `DocumentData` by applying the\r\n * converter if it exists.\r\n *\r\n * This function is used when converting user objects to `DocumentData`\r\n * because we want to provide the user with a more specific error message if\r\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\r\n * call.\r\n */\nfunction applyFirestoreDataConverter(converter, value, options) {\n  let convertedValue;\n  if (converter) {\n    if (options && (options.merge || options.mergeFields)) {\n      // Cast to `any` in order to satisfy the union type constraint on\n      // toFirestore().\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      convertedValue = converter.toFirestore(value, options);\n    } else {\n      convertedValue = converter.toFirestore(value);\n    }\n  } else {\n    convertedValue = value;\n  }\n  return convertedValue;\n}\nclass LiteUserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n  convertBytes(bytes) {\n    return new Bytes(bytes);\n  }\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, /* converter= */null, key);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Create an AggregateField object that can be used to compute the sum of\r\n * a specified field over a range of documents in the result set of a query.\r\n * @param field Specifies the field to sum across the result set.\r\n */\nfunction sum(field) {\n  return new AggregateField('sum', fieldPathFromArgument$1('sum', field));\n}\n/**\r\n * Create an AggregateField object that can be used to compute the average of\r\n * a specified field over a range of documents in the result set of a query.\r\n * @param field Specifies the field to average across the result set.\r\n */\nfunction average(field) {\n  return new AggregateField('avg', fieldPathFromArgument$1('average', field));\n}\n/**\r\n * Create an AggregateField object that can be used to compute the count of\r\n * documents in the result set of a query.\r\n */\nfunction count() {\n  return new AggregateField('count');\n}\n/**\r\n * Compares two 'AggregateField` instances for equality.\r\n *\r\n * @param left Compare this AggregateField to the `right`.\r\n * @param right Compare this AggregateField to the `left`.\r\n */\nfunction aggregateFieldEqual(left, right) {\n  var _a, _b;\n  return left instanceof AggregateField && right instanceof AggregateField && left.aggregateType === right.aggregateType && ((_a = left._internalFieldPath) === null || _a === void 0 ? void 0 : _a.canonicalString()) === ((_b = right._internalFieldPath) === null || _b === void 0 ? void 0 : _b.canonicalString());\n}\n/**\r\n * Compares two `AggregateQuerySnapshot` instances for equality.\r\n *\r\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\r\n * underlying queries that compare equal, and the same data.\r\n *\r\n * @param left - The first `AggregateQuerySnapshot` to compare.\r\n * @param right - The second `AggregateQuerySnapshot` to compare.\r\n *\r\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\r\n * otherwise.\r\n */\nfunction aggregateQuerySnapshotEqual(left, right) {\n  return queryEqual(left.query, right.query) && deepEqual(left.data(), right.data());\n}\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isPartialObserver(obj) {\n  return implementsAnyMethods(obj, ['next', 'error', 'complete']);\n}\n/**\r\n * Returns true if obj is an object and contains at least one of the specified\r\n * methods.\r\n */\nfunction implementsAnyMethods(obj, methods) {\n  if (typeof obj !== 'object' || obj === null) {\n    return false;\n  }\n  const object = obj;\n  for (const method of methods) {\n    if (method in object && typeof object[method] === 'function') {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Metadata about a snapshot, describing the state of the snapshot.\r\n */\nclass SnapshotMetadata {\n  /** @hideconstructor */\n  constructor(hasPendingWrites, fromCache) {\n    this.hasPendingWrites = hasPendingWrites;\n    this.fromCache = fromCache;\n  }\n  /**\r\n   * Returns true if this `SnapshotMetadata` is equal to the provided one.\r\n   *\r\n   * @param other - The `SnapshotMetadata` to compare against.\r\n   * @returns true if this `SnapshotMetadata` is equal to the provided one.\r\n   */\n  isEqual(other) {\n    return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;\n  }\n}\n/**\r\n * A `DocumentSnapshot` contains data read from a document in your Firestore\r\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\r\n * get a specific field.\r\n *\r\n * For a `DocumentSnapshot` that points to a non-existing document, any data\r\n * access will return 'undefined'. You can use the `exists()` method to\r\n * explicitly verify a document's existence.\r\n */\nclass DocumentSnapshot extends DocumentSnapshot$1 {\n  /** @hideconstructor protected */\n  constructor(_firestore, userDataWriter, key, document, metadata, converter) {\n    super(_firestore, userDataWriter, key, document, converter);\n    this._firestore = _firestore;\n    this._firestoreImpl = _firestore;\n    this.metadata = metadata;\n  }\n  /**\r\n   * Returns whether or not the data exists. True if the document exists.\r\n   */\n  exists() {\n    return super.exists();\n  }\n  /**\r\n   * Retrieves all fields in the document as an `Object`. Returns `undefined` if\r\n   * the document doesn't exist.\r\n   *\r\n   * By default, `serverTimestamp()` values that have not yet been\r\n   * set to their final value will be returned as `null`. You can override\r\n   * this by passing an options object.\r\n   *\r\n   * @param options - An options object to configure how data is retrieved from\r\n   * the snapshot (for example the desired behavior for server timestamps that\r\n   * have not yet been set to their final value).\r\n   * @returns An `Object` containing all fields in the document or `undefined` if\r\n   * the document doesn't exist.\r\n   */\n  data(options = {}) {\n    if (!this._document) {\n      return undefined;\n    } else if (this._converter) {\n      // We only want to use the converter and create a new DocumentSnapshot\n      // if a converter has been provided.\n      const snapshot = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, /* converter= */null);\n      return this._converter.fromFirestore(snapshot, options);\n    } else {\n      return this._userDataWriter.convertValue(this._document.data.value, options.serverTimestamps);\n    }\n  }\n  /**\r\n   * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\r\n   * document or field doesn't exist.\r\n   *\r\n   * By default, a `serverTimestamp()` that has not yet been set to\r\n   * its final value will be returned as `null`. You can override this by\r\n   * passing an options object.\r\n   *\r\n   * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\r\n   * field.\r\n   * @param options - An options object to configure how the field is retrieved\r\n   * from the snapshot (for example the desired behavior for server timestamps\r\n   * that have not yet been set to their final value).\r\n   * @returns The data at the specified field location or undefined if no such\r\n   * field exists in the document.\r\n   */\n  // We are using `any` here to avoid an explicit cast by our users.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  get(fieldPath, options = {}) {\n    if (this._document) {\n      const value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));\n      if (value !== null) {\n        return this._userDataWriter.convertValue(value, options.serverTimestamps);\n      }\n    }\n    return undefined;\n  }\n}\n/**\r\n * A `QueryDocumentSnapshot` contains data read from a document in your\r\n * Firestore database as part of a query. The document is guaranteed to exist\r\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\r\n * specific field.\r\n *\r\n * A `QueryDocumentSnapshot` offers the same API surface as a\r\n * `DocumentSnapshot`. Since query results contain only existing documents, the\r\n * `exists` property will always be true and `data()` will never return\r\n * 'undefined'.\r\n */\nclass QueryDocumentSnapshot extends DocumentSnapshot {\n  /**\r\n   * Retrieves all fields in the document as an `Object`.\r\n   *\r\n   * By default, `serverTimestamp()` values that have not yet been\r\n   * set to their final value will be returned as `null`. You can override\r\n   * this by passing an options object.\r\n   *\r\n   * @override\r\n   * @param options - An options object to configure how data is retrieved from\r\n   * the snapshot (for example the desired behavior for server timestamps that\r\n   * have not yet been set to their final value).\r\n   * @returns An `Object` containing all fields in the document.\r\n   */\n  data(options = {}) {\n    return super.data(options);\n  }\n}\n/**\r\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\r\n * representing the results of a query. The documents can be accessed as an\r\n * array via the `docs` property or enumerated using the `forEach` method. The\r\n * number of documents can be determined via the `empty` and `size`\r\n * properties.\r\n */\nclass QuerySnapshot {\n  /** @hideconstructor */\n  constructor(_firestore, _userDataWriter, query, _snapshot) {\n    this._firestore = _firestore;\n    this._userDataWriter = _userDataWriter;\n    this._snapshot = _snapshot;\n    this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);\n    this.query = query;\n  }\n  /** An array of all the documents in the `QuerySnapshot`. */\n  get docs() {\n    const result = [];\n    this.forEach(doc => result.push(doc));\n    return result;\n  }\n  /** The number of documents in the `QuerySnapshot`. */\n  get size() {\n    return this._snapshot.docs.size;\n  }\n  /** True if there are no documents in the `QuerySnapshot`. */\n  get empty() {\n    return this.size === 0;\n  }\n  /**\r\n   * Enumerates all of the documents in the `QuerySnapshot`.\r\n   *\r\n   * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\r\n   * each document in the snapshot.\r\n   * @param thisArg - The `this` binding for the callback.\r\n   */\n  forEach(callback, thisArg) {\n    this._snapshot.docs.forEach(doc => {\n      callback.call(thisArg, new QueryDocumentSnapshot(this._firestore, this._userDataWriter, doc.key, doc, new SnapshotMetadata(this._snapshot.mutatedKeys.has(doc.key), this._snapshot.fromCache), this.query.converter));\n    });\n  }\n  /**\r\n   * Returns an array of the documents changes since the last snapshot. If this\r\n   * is the first snapshot, all documents will be in the list as 'added'\r\n   * changes.\r\n   *\r\n   * @param options - `SnapshotListenOptions` that control whether metadata-only\r\n   * changes (i.e. only `DocumentSnapshot.metadata` changed) should trigger\r\n   * snapshot events.\r\n   */\n  docChanges(options = {}) {\n    const includeMetadataChanges = !!options.includeMetadataChanges;\n    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {\n      throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' + 'also pass { includeMetadataChanges:true } to onSnapshot().');\n    }\n    if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {\n      this._cachedChanges = changesFromSnapshot(this, includeMetadataChanges);\n      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;\n    }\n    return this._cachedChanges;\n  }\n}\n/** Calculates the array of `DocumentChange`s for a given `ViewSnapshot`. */\nfunction changesFromSnapshot(querySnapshot, includeMetadataChanges) {\n  if (querySnapshot._snapshot.oldDocs.isEmpty()) {\n    let index = 0;\n    return querySnapshot._snapshot.docChanges.map(change => {\n      const doc = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\n      change.doc;\n      return {\n        type: 'added',\n        doc,\n        oldIndex: -1,\n        newIndex: index++\n      };\n    });\n  } else {\n    // A `DocumentSet` that is updated incrementally as changes are applied to use\n    // to lookup the index of a document.\n    let indexTracker = querySnapshot._snapshot.oldDocs;\n    return querySnapshot._snapshot.docChanges.filter(change => includeMetadataChanges || change.type !== 3 /* ChangeType.Metadata */).map(change => {\n      const doc = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);\n      let oldIndex = -1;\n      let newIndex = -1;\n      if (change.type !== 0 /* ChangeType.Added */) {\n        oldIndex = indexTracker.indexOf(change.doc.key);\n        indexTracker = indexTracker.delete(change.doc.key);\n      }\n      if (change.type !== 1 /* ChangeType.Removed */) {\n        indexTracker = indexTracker.add(change.doc);\n        newIndex = indexTracker.indexOf(change.doc.key);\n      }\n      return {\n        type: resultChangeType(change.type),\n        doc,\n        oldIndex,\n        newIndex\n      };\n    });\n  }\n}\nfunction resultChangeType(type) {\n  switch (type) {\n    case 0 /* ChangeType.Added */:\n      return 'added';\n    case 2 /* ChangeType.Modified */:\n    case 3 /* ChangeType.Metadata */:\n      return 'modified';\n    case 1 /* ChangeType.Removed */:\n      return 'removed';\n    default:\n      return fail();\n  }\n}\n// TODO(firestoreexp): Add tests for snapshotEqual with different snapshot\n// metadata\n/**\r\n * Returns true if the provided snapshots are equal.\r\n *\r\n * @param left - A snapshot to compare.\r\n * @param right - A snapshot to compare.\r\n * @returns true if the snapshots are equal.\r\n */\nfunction snapshotEqual(left, right) {\n  if (left instanceof DocumentSnapshot && right instanceof DocumentSnapshot) {\n    return left._firestore === right._firestore && left._key.isEqual(right._key) && (left._document === null ? right._document === null : left._document.isEqual(right._document)) && left._converter === right._converter;\n  } else if (left instanceof QuerySnapshot && right instanceof QuerySnapshot) {\n    return left._firestore === right._firestore && queryEqual(left.query, right.query) && left.metadata.isEqual(right.metadata) && left._snapshot.isEqual(right._snapshot);\n  }\n  return false;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Reads the document referred to by this `DocumentReference`.\r\n *\r\n * Note: `getDoc()` attempts to provide up-to-date data when possible by waiting\r\n * for data from the server, but it may return cached data or fail if you are\r\n * offline and the server cannot be reached. To specify this behavior, invoke\r\n * {@link getDocFromCache} or {@link getDocFromServer}.\r\n *\r\n * @param reference - The reference of the document to fetch.\r\n * @returns A Promise resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\nfunction getDoc(reference) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetDocumentViaSnapshotListener(client, reference._key).then(snapshot => convertToDocSnapshot(firestore, reference, snapshot));\n}\nclass ExpUserDataWriter extends AbstractUserDataWriter {\n  constructor(firestore) {\n    super();\n    this.firestore = firestore;\n  }\n  convertBytes(bytes) {\n    return new Bytes(bytes);\n  }\n  convertReference(name) {\n    const key = this.convertDocumentKey(name, this.firestore._databaseId);\n    return new DocumentReference(this.firestore, /* converter= */null, key);\n  }\n}\n/**\r\n * Reads the document referred to by this `DocumentReference` from cache.\r\n * Returns an error if the document is not currently cached.\r\n *\r\n * @returns A `Promise` resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\nfunction getDocFromCache(reference) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentFromLocalCache(client, reference._key).then(doc => new DocumentSnapshot(firestore, userDataWriter, reference._key, doc, new SnapshotMetadata(doc !== null && doc.hasLocalMutations, /* fromCache= */true), reference.converter));\n}\n/**\r\n * Reads the document referred to by this `DocumentReference` from the server.\r\n * Returns an error if the network is not available.\r\n *\r\n * @returns A `Promise` resolved with a `DocumentSnapshot` containing the\r\n * current document contents.\r\n */\nfunction getDocFromServer(reference) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientGetDocumentViaSnapshotListener(client, reference._key, {\n    source: 'server'\n  }).then(snapshot => convertToDocSnapshot(firestore, reference, snapshot));\n}\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot`.\r\n *\r\n * Note: `getDocs()` attempts to provide up-to-date data when possible by\r\n * waiting for data from the server, but it may return cached data or fail if\r\n * you are offline and the server cannot be reached. To specify this behavior,\r\n * invoke {@link getDocsFromCache} or {@link getDocsFromServer}.\r\n *\r\n * @returns A `Promise` that will be resolved with the results of the query.\r\n */\nfunction getDocs(query) {\n  query = cast(query, Query);\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  validateHasExplicitOrderByForLimitToLast(query._query);\n  return firestoreClientGetDocumentsViaSnapshotListener(client, query._query).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n}\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from cache.\r\n * Returns an empty result set if no documents matching the query are currently\r\n * cached.\r\n *\r\n * @returns A `Promise` that will be resolved with the results of the query.\r\n */\nfunction getDocsFromCache(query) {\n  query = cast(query, Query);\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentsFromLocalCache(client, query._query).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n}\n/**\r\n * Executes the query and returns the results as a `QuerySnapshot` from the\r\n * server. Returns an error if the network is not available.\r\n *\r\n * @returns A `Promise` that will be resolved with the results of the query.\r\n */\nfunction getDocsFromServer(query) {\n  query = cast(query, Query);\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return firestoreClientGetDocumentsViaSnapshotListener(client, query._query, {\n    source: 'server'\n  }).then(snapshot => new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n}\nfunction setDoc(reference, data, options) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const convertedValue = applyFirestoreDataConverter(reference.converter, data, options);\n  const dataReader = newUserDataReader(firestore);\n  const parsed = parseSetData(dataReader, 'setDoc', reference._key, convertedValue, reference.converter !== null, options);\n  const mutation = parsed.toMutation(reference._key, Precondition.none());\n  return executeWrite(firestore, [mutation]);\n}\nfunction updateDoc(reference, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n  reference = cast(reference, DocumentReference);\n  const firestore = cast(reference.firestore, Firestore);\n  const dataReader = newUserDataReader(firestore);\n  // For Compat types, we have to \"extract\" the underlying types before\n  // performing validation.\n  fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n  let parsed;\n  if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n    parsed = parseUpdateVarargs(dataReader, 'updateDoc', reference._key, fieldOrUpdateData, value, moreFieldsAndValues);\n  } else {\n    parsed = parseUpdateData(dataReader, 'updateDoc', reference._key, fieldOrUpdateData);\n  }\n  const mutation = parsed.toMutation(reference._key, Precondition.exists(true));\n  return executeWrite(firestore, [mutation]);\n}\n/**\r\n * Deletes the document referred to by the specified `DocumentReference`.\r\n *\r\n * @param reference - A reference to the document to delete.\r\n * @returns A Promise resolved once the document has been successfully\r\n * deleted from the backend (note that it won't resolve while you're offline).\r\n */\nfunction deleteDoc(reference) {\n  const firestore = cast(reference.firestore, Firestore);\n  const mutations = [new DeleteMutation(reference._key, Precondition.none())];\n  return executeWrite(firestore, mutations);\n}\n/**\r\n * Add a new document to specified `CollectionReference` with the given data,\r\n * assigning it a document ID automatically.\r\n *\r\n * @param reference - A reference to the collection to add this document to.\r\n * @param data - An Object containing the data for the new document.\r\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\r\n * newly created document after it has been written to the backend (Note that it\r\n * won't resolve while you're offline).\r\n */\nfunction addDoc(reference, data) {\n  const firestore = cast(reference.firestore, Firestore);\n  const docRef = doc(reference);\n  const convertedValue = applyFirestoreDataConverter(reference.converter, data);\n  const dataReader = newUserDataReader(reference.firestore);\n  const parsed = parseSetData(dataReader, 'addDoc', docRef._key, convertedValue, reference.converter !== null, {});\n  const mutation = parsed.toMutation(docRef._key, Precondition.exists(false));\n  return executeWrite(firestore, [mutation]).then(() => docRef);\n}\nfunction onSnapshot(reference, ...args) {\n  var _a, _b, _c;\n  reference = getModularInstance(reference);\n  let options = {\n    includeMetadataChanges: false,\n    source: 'default'\n  };\n  let currArg = 0;\n  if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {\n    options = args[currArg];\n    currArg++;\n  }\n  const internalOptions = {\n    includeMetadataChanges: options.includeMetadataChanges,\n    source: options.source\n  };\n  if (isPartialObserver(args[currArg])) {\n    const userObserver = args[currArg];\n    args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);\n    args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);\n    args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);\n  }\n  let observer;\n  let firestore;\n  let internalQuery;\n  if (reference instanceof DocumentReference) {\n    firestore = cast(reference.firestore, Firestore);\n    internalQuery = newQueryForPath(reference._key.path);\n    observer = {\n      next: snapshot => {\n        if (args[currArg]) {\n          args[currArg](convertToDocSnapshot(firestore, reference, snapshot));\n        }\n      },\n      error: args[currArg + 1],\n      complete: args[currArg + 2]\n    };\n  } else {\n    const query = cast(reference, Query);\n    firestore = cast(query.firestore, Firestore);\n    internalQuery = query._query;\n    const userDataWriter = new ExpUserDataWriter(firestore);\n    observer = {\n      next: snapshot => {\n        if (args[currArg]) {\n          args[currArg](new QuerySnapshot(firestore, userDataWriter, query, snapshot));\n        }\n      },\n      error: args[currArg + 1],\n      complete: args[currArg + 2]\n    };\n    validateHasExplicitOrderByForLimitToLast(reference._query);\n  }\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientListen(client, internalQuery, internalOptions, observer);\n}\nfunction onSnapshotsInSync(firestore, arg) {\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const observer = isPartialObserver(arg) ? arg : {\n    next: arg\n  };\n  return firestoreClientAddSnapshotsInSyncListener(client, observer);\n}\n/**\r\n * Locally writes `mutations` on the async queue.\r\n * @internal\r\n */\nfunction executeWrite(firestore, mutations) {\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientWrite(client, mutations);\n}\n/**\r\n * Converts a {@link ViewSnapshot} that contains the single document specified by `ref`\r\n * to a {@link DocumentSnapshot}.\r\n */\nfunction convertToDocSnapshot(firestore, ref, snapshot) {\n  const doc = snapshot.docs.get(ref._key);\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  return new DocumentSnapshot(firestore, userDataWriter, ref._key, doc, new SnapshotMetadata(snapshot.hasPendingWrites, snapshot.fromCache), ref.converter);\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Calculates the number of documents in the result set of the given query\r\n * without actually downloading the documents.\r\n *\r\n * Using this function to count the documents is efficient because only the\r\n * final count, not the documents' data, is downloaded. This function can\r\n * count the documents in cases where the result set is prohibitively large to\r\n * download entirely (thousands of documents).\r\n *\r\n * The result received from the server is presented, unaltered, without\r\n * considering any local state. That is, documents in the local cache are not\r\n * taken into consideration, neither are local modifications not yet\r\n * synchronized with the server. Previously-downloaded results, if any, are not\r\n * used. Every invocation of this function necessarily involves a round trip to\r\n * the server.\r\n *\r\n * @param query The query whose result set size is calculated.\r\n * @returns A Promise that will be resolved with the count; the count can be\r\n * retrieved from `snapshot.data().count`, where `snapshot` is the\r\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\r\n */\nfunction getCountFromServer(query) {\n  const countQuerySpec = {\n    count: count()\n  };\n  return getAggregateFromServer(query, countQuerySpec);\n}\n/**\r\n * Calculates the specified aggregations over the documents in the result\r\n * set of the given query without actually downloading the documents.\r\n *\r\n * Using this function to perform aggregations is efficient because only the\r\n * final aggregation values, not the documents' data, are downloaded. This\r\n * function can perform aggregations of the documents in cases where the result\r\n * set is prohibitively large to download entirely (thousands of documents).\r\n *\r\n * The result received from the server is presented, unaltered, without\r\n * considering any local state. That is, documents in the local cache are not\r\n * taken into consideration, neither are local modifications not yet\r\n * synchronized with the server. Previously-downloaded results, if any, are not\r\n * used. Every invocation of this function necessarily involves a round trip to\r\n * the server.\r\n *\r\n * @param query The query whose result set is aggregated over.\r\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\r\n * to perform over the result set. The AggregateSpec specifies aliases for each\r\n * aggregate, which can be used to retrieve the aggregate result.\r\n * @example\r\n * ```typescript\r\n * const aggregateSnapshot = await getAggregateFromServer(query, {\r\n *   countOfDocs: count(),\r\n *   totalHours: sum('hours'),\r\n *   averageScore: average('score')\r\n * });\r\n *\r\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\r\n * const totalHours: number = aggregateSnapshot.data().totalHours;\r\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\r\n * ```\r\n */\nfunction getAggregateFromServer(query, aggregateSpec) {\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const internalAggregates = mapToArray(aggregateSpec, (aggregate, alias) => {\n    return new AggregateImpl(alias, aggregate.aggregateType, aggregate._internalFieldPath);\n  });\n  // Run the aggregation and convert the results\n  return firestoreClientRunAggregateQuery(client, query._query, internalAggregates).then(aggregateResult => convertToAggregateQuerySnapshot(firestore, query, aggregateResult));\n}\n/**\r\n * Converts the core aggregation result to an `AggregateQuerySnapshot`\r\n * that can be returned to the consumer.\r\n * @param query\r\n * @param aggregateResult Core aggregation result\r\n * @internal\r\n */\nfunction convertToAggregateQuerySnapshot(firestore, query, aggregateResult) {\n  const userDataWriter = new ExpUserDataWriter(firestore);\n  const querySnapshot = new AggregateQuerySnapshot(query, userDataWriter, aggregateResult);\n  return querySnapshot;\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nclass MemoryLocalCacheImpl {\n  constructor(settings) {\n    this.kind = 'memory';\n    this._onlineComponentProvider = new OnlineComponentProvider();\n    if (settings === null || settings === void 0 ? void 0 : settings.garbageCollector) {\n      this._offlineComponentProvider = settings.garbageCollector._offlineComponentProvider;\n    } else {\n      this._offlineComponentProvider = new MemoryOfflineComponentProvider();\n    }\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\nclass PersistentLocalCacheImpl {\n  constructor(settings) {\n    this.kind = 'persistent';\n    let tabManager;\n    if (settings === null || settings === void 0 ? void 0 : settings.tabManager) {\n      settings.tabManager._initialize(settings);\n      tabManager = settings.tabManager;\n    } else {\n      tabManager = persistentSingleTabManager(undefined);\n      tabManager._initialize(settings);\n    }\n    this._onlineComponentProvider = tabManager._onlineComponentProvider;\n    this._offlineComponentProvider = tabManager._offlineComponentProvider;\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\nclass MemoryEagerGarbageCollectorImpl {\n  constructor() {\n    this.kind = 'memoryEager';\n    this._offlineComponentProvider = new MemoryOfflineComponentProvider();\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\nclass MemoryLruGarbageCollectorImpl {\n  constructor(cacheSize) {\n    this.kind = 'memoryLru';\n    this._offlineComponentProvider = new LruGcMemoryOfflineComponentProvider(cacheSize);\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n}\n/**\r\n * Creates an instance of `MemoryEagerGarbageCollector`. This is also the\r\n * default garbage collector unless it is explicitly specified otherwise.\r\n */\nfunction memoryEagerGarbageCollector() {\n  return new MemoryEagerGarbageCollectorImpl();\n}\n/**\r\n * Creates an instance of `MemoryLruGarbageCollector`.\r\n *\r\n * A target size can be specified as part of the setting parameter. The\r\n * collector will start deleting documents once the cache size exceeds\r\n * the given size. The default cache size is 40MB (40 * 1024 * 1024 bytes).\r\n */\nfunction memoryLruGarbageCollector(settings) {\n  return new MemoryLruGarbageCollectorImpl(settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes);\n}\n/**\r\n * Creates an instance of `MemoryLocalCache`. The instance can be set to\r\n * `FirestoreSettings.cache` to tell the SDK which cache layer to use.\r\n */\nfunction memoryLocalCache(settings) {\n  return new MemoryLocalCacheImpl(settings);\n}\n/**\r\n * Creates an instance of `PersistentLocalCache`. The instance can be set to\r\n * `FirestoreSettings.cache` to tell the SDK which cache layer to use.\r\n *\r\n * Persistent cache cannot be used in a Node.js environment.\r\n */\nfunction persistentLocalCache(settings) {\n  return new PersistentLocalCacheImpl(settings);\n}\nclass SingleTabManagerImpl {\n  constructor(forceOwnership) {\n    this.forceOwnership = forceOwnership;\n    this.kind = 'persistentSingleTab';\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n  /**\r\n   * @internal\r\n   */\n  _initialize(settings) {\n    this._onlineComponentProvider = new OnlineComponentProvider();\n    this._offlineComponentProvider = new IndexedDbOfflineComponentProvider(this._onlineComponentProvider, settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes, this.forceOwnership);\n  }\n}\nclass MultiTabManagerImpl {\n  constructor() {\n    this.kind = 'PersistentMultipleTab';\n  }\n  toJSON() {\n    return {\n      kind: this.kind\n    };\n  }\n  /**\r\n   * @internal\r\n   */\n  _initialize(settings) {\n    this._onlineComponentProvider = new OnlineComponentProvider();\n    this._offlineComponentProvider = new MultiTabOfflineComponentProvider(this._onlineComponentProvider, settings === null || settings === void 0 ? void 0 : settings.cacheSizeBytes);\n  }\n}\n/**\r\n * Creates an instance of `PersistentSingleTabManager`.\r\n *\r\n * @param settings Configures the created tab manager.\r\n */\nfunction persistentSingleTabManager(settings) {\n  return new SingleTabManagerImpl(settings === null || settings === void 0 ? void 0 : settings.forceOwnership);\n}\n/**\r\n * Creates an instance of `PersistentMultipleTabManager`.\r\n */\nfunction persistentMultipleTabManager() {\n  return new MultiTabManagerImpl();\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nconst DEFAULT_TRANSACTION_OPTIONS = {\n  maxAttempts: 5\n};\nfunction validateTransactionOptions(options) {\n  if (options.maxAttempts < 1) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Max attempts must be at least 1');\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A write batch, used to perform multiple writes as a single atomic unit.\r\n *\r\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\r\n * provides methods for adding writes to the write batch. None of the writes\r\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\r\n * called.\r\n */\nclass WriteBatch {\n  /** @hideconstructor */\n  constructor(_firestore, _commitHandler) {\n    this._firestore = _firestore;\n    this._commitHandler = _commitHandler;\n    this._mutations = [];\n    this._committed = false;\n    this._dataReader = newUserDataReader(_firestore);\n  }\n  set(documentRef, data, options) {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    const convertedValue = applyFirestoreDataConverter(ref.converter, data, options);\n    const parsed = parseSetData(this._dataReader, 'WriteBatch.set', ref._key, convertedValue, ref.converter !== null, options);\n    this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));\n    return this;\n  }\n  update(documentRef, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n    let parsed;\n    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n      parsed = parseUpdateVarargs(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\n    } else {\n      parsed = parseUpdateData(this._dataReader, 'WriteBatch.update', ref._key, fieldOrUpdateData);\n    }\n    this._mutations.push(parsed.toMutation(ref._key, Precondition.exists(true)));\n    return this;\n  }\n  /**\r\n   * Deletes the document referred to by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be deleted.\r\n   * @returns This `WriteBatch` instance. Used for chaining method calls.\r\n   */\n  delete(documentRef) {\n    this._verifyNotCommitted();\n    const ref = validateReference(documentRef, this._firestore);\n    this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));\n    return this;\n  }\n  /**\r\n   * Commits all of the writes in this write batch as a single atomic unit.\r\n   *\r\n   * The result of these writes will only be reflected in document reads that\r\n   * occur after the returned promise resolves. If the client is offline, the\r\n   * write fails. If you would like to see local modifications or buffer writes\r\n   * until the client is online, use the full Firestore SDK.\r\n   *\r\n   * @returns A `Promise` resolved once all of the writes in the batch have been\r\n   * successfully written to the backend as an atomic unit (note that it won't\r\n   * resolve while you're offline).\r\n   */\n  commit() {\n    this._verifyNotCommitted();\n    this._committed = true;\n    if (this._mutations.length > 0) {\n      return this._commitHandler(this._mutations);\n    }\n    return Promise.resolve();\n  }\n  _verifyNotCommitted() {\n    if (this._committed) {\n      throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' + 'has been called.');\n    }\n  }\n}\nfunction validateReference(documentRef, firestore) {\n  documentRef = getModularInstance(documentRef);\n  if (documentRef.firestore !== firestore) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');\n  } else {\n    return documentRef;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n// legacy SDK.\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\nclass Transaction$1 {\n  /** @hideconstructor */\n  constructor(_firestore, _transaction) {\n    this._firestore = _firestore;\n    this._transaction = _transaction;\n    this._dataReader = newUserDataReader(_firestore);\n  }\n  /**\r\n   * Reads the document referenced by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be read.\r\n   * @returns A `DocumentSnapshot` with the read data.\r\n   */\n  get(documentRef) {\n    const ref = validateReference(documentRef, this._firestore);\n    const userDataWriter = new LiteUserDataWriter(this._firestore);\n    return this._transaction.lookup([ref._key]).then(docs => {\n      if (!docs || docs.length !== 1) {\n        return fail();\n      }\n      const doc = docs[0];\n      if (doc.isFoundDocument()) {\n        return new DocumentSnapshot$1(this._firestore, userDataWriter, doc.key, doc, ref.converter);\n      } else if (doc.isNoDocument()) {\n        return new DocumentSnapshot$1(this._firestore, userDataWriter, ref._key, null, ref.converter);\n      } else {\n        throw fail();\n      }\n    });\n  }\n  set(documentRef, value, options) {\n    const ref = validateReference(documentRef, this._firestore);\n    const convertedValue = applyFirestoreDataConverter(ref.converter, value, options);\n    const parsed = parseSetData(this._dataReader, 'Transaction.set', ref._key, convertedValue, ref.converter !== null, options);\n    this._transaction.set(ref._key, parsed);\n    return this;\n  }\n  update(documentRef, fieldOrUpdateData, value, ...moreFieldsAndValues) {\n    const ref = validateReference(documentRef, this._firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n    fieldOrUpdateData = getModularInstance(fieldOrUpdateData);\n    let parsed;\n    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath) {\n      parsed = parseUpdateVarargs(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData, value, moreFieldsAndValues);\n    } else {\n      parsed = parseUpdateData(this._dataReader, 'Transaction.update', ref._key, fieldOrUpdateData);\n    }\n    this._transaction.update(ref._key, parsed);\n    return this;\n  }\n  /**\r\n   * Deletes the document referred to by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be deleted.\r\n   * @returns This `Transaction` instance. Used for chaining method calls.\r\n   */\n  delete(documentRef) {\n    const ref = validateReference(documentRef, this._firestore);\n    this._transaction.delete(ref._key);\n    return this;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A reference to a transaction.\r\n *\r\n * The `Transaction` object passed to a transaction's `updateFunction` provides\r\n * the methods to read and write data within the transaction context. See\r\n * {@link runTransaction}.\r\n */\nclass Transaction extends Transaction$1 {\n  // This class implements the same logic as the Transaction API in the Lite SDK\n  // but is subclassed in order to return its own DocumentSnapshot types.\n  /** @hideconstructor */\n  constructor(_firestore, _transaction) {\n    super(_firestore, _transaction);\n    this._firestore = _firestore;\n  }\n  /**\r\n   * Reads the document referenced by the provided {@link DocumentReference}.\r\n   *\r\n   * @param documentRef - A reference to the document to be read.\r\n   * @returns A `DocumentSnapshot` with the read data.\r\n   */\n  get(documentRef) {\n    const ref = validateReference(documentRef, this._firestore);\n    const userDataWriter = new ExpUserDataWriter(this._firestore);\n    return super.get(documentRef).then(liteDocumentSnapshot => new DocumentSnapshot(this._firestore, userDataWriter, ref._key, liteDocumentSnapshot._document, new SnapshotMetadata( /* hasPendingWrites= */false, /* fromCache= */false), ref.converter));\n  }\n}\n/**\r\n * Executes the given `updateFunction` and then attempts to commit the changes\r\n * applied within the transaction. If any document read within the transaction\r\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\r\n * commit after 5 attempts, the transaction fails.\r\n *\r\n * The maximum number of writes allowed in a single transaction is 500.\r\n *\r\n * @param firestore - A reference to the Firestore database to run this\r\n * transaction against.\r\n * @param updateFunction - The function to execute within the transaction\r\n * context.\r\n * @param options - An options object to configure maximum number of attempts to\r\n * commit.\r\n * @returns If the transaction completed successfully or was explicitly aborted\r\n * (the `updateFunction` returned a failed promise), the promise returned by the\r\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\r\n * rejected promise with the corresponding failure error is returned.\r\n */\nfunction runTransaction(firestore, updateFunction, options) {\n  firestore = cast(firestore, Firestore);\n  const optionsWithDefaults = Object.assign(Object.assign({}, DEFAULT_TRANSACTION_OPTIONS), options);\n  validateTransactionOptions(optionsWithDefaults);\n  const client = ensureFirestoreConfigured(firestore);\n  return firestoreClientTransaction(client, internalTransaction => updateFunction(new Transaction(firestore, internalTransaction)), optionsWithDefaults);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\r\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\r\n */\nfunction deleteField() {\n  return new DeleteFieldValueImpl('deleteField');\n}\n/**\r\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\r\n * include a server-generated timestamp in the written data.\r\n */\nfunction serverTimestamp() {\n  return new ServerTimestampFieldValueImpl('serverTimestamp');\n}\n/**\r\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\r\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\r\n * value that already exists on the server. Each specified element that doesn't\r\n * already exist in the array will be added to the end. If the field being\r\n * modified is not already an array it will be overwritten with an array\r\n * containing exactly the specified elements.\r\n *\r\n * @param elements - The elements to union into the array.\r\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\r\n * `updateDoc()`.\r\n */\nfunction arrayUnion(...elements) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayUnionFieldValueImpl('arrayUnion', elements);\n}\n/**\r\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\r\n * updateDoc:1} that tells the server to remove the given elements from any\r\n * array value that already exists on the server. All instances of each element\r\n * specified will be removed from the array. If the field being modified is not\r\n * already an array it will be overwritten with an empty array.\r\n *\r\n * @param elements - The elements to remove from the array.\r\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\r\n * `updateDoc()`\r\n */\nfunction arrayRemove(...elements) {\n  // NOTE: We don't actually parse the data until it's used in set() or\n  // update() since we'd need the Firestore instance to do this.\n  return new ArrayRemoveFieldValueImpl('arrayRemove', elements);\n}\n/**\r\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\r\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\r\n * the given value.\r\n *\r\n * If either the operand or the current field value uses floating point\r\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\r\n * integers, values outside of JavaScript's safe number range\r\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\r\n * precision loss. Furthermore, once processed by the Firestore backend, all\r\n * integer operations are capped between -2^63 and 2^63-1.\r\n *\r\n * If the current field value is not of type `number`, or if the field does not\r\n * yet exist, the transformation sets the field to the given value.\r\n *\r\n * @param n - The value to increment by.\r\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\r\n * `updateDoc()`\r\n */\nfunction increment(n) {\n  return new NumericIncrementFieldValueImpl('increment', n);\n}\n/**\r\n * Creates a new `VectorValue` constructed with a copy of the given array of numbers.\r\n *\r\n * @param values - Create a `VectorValue` instance with a copy of this array of numbers.\r\n *\r\n * @returns A new `VectorValue` constructed with a copy of the given array of numbers.\r\n */\nfunction vector(values) {\n  return new VectorValue(values);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Creates a write batch, used for performing multiple writes as a single\r\n * atomic operation. The maximum number of writes allowed in a single {@link WriteBatch}\r\n * is 500.\r\n *\r\n * Unlike transactions, write batches are persisted offline and therefore are\r\n * preferable when you don't need to condition your writes on read data.\r\n *\r\n * @returns A {@link WriteBatch} that can be used to atomically execute multiple\r\n * writes.\r\n */\nfunction writeBatch(firestore) {\n  firestore = cast(firestore, Firestore);\n  ensureFirestoreConfigured(firestore);\n  return new WriteBatch(firestore, mutations => executeWrite(firestore, mutations));\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction setIndexConfiguration(firestore, jsonOrConfiguration) {\n  var _a;\n  firestore = cast(firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  if (!client._uninitializedComponentsProvider || ((_a = client._uninitializedComponentsProvider) === null || _a === void 0 ? void 0 : _a._offlineKind) === 'memory') {\n    // PORTING NOTE: We don't return an error if the user has not enabled\n    // persistence since `enableIndexeddbPersistence()` can fail on the Web.\n    logWarn('Cannot enable indexes when persistence is disabled');\n    return Promise.resolve();\n  }\n  const parsedIndexes = parseIndexes(jsonOrConfiguration);\n  return firestoreClientSetIndexConfiguration(client, parsedIndexes);\n}\nfunction parseIndexes(jsonOrConfiguration) {\n  const indexConfiguration = typeof jsonOrConfiguration === 'string' ? tryParseJson(jsonOrConfiguration) : jsonOrConfiguration;\n  const parsedIndexes = [];\n  if (Array.isArray(indexConfiguration.indexes)) {\n    for (const index of indexConfiguration.indexes) {\n      const collectionGroup = tryGetString(index, 'collectionGroup');\n      const segments = [];\n      if (Array.isArray(index.fields)) {\n        for (const field of index.fields) {\n          const fieldPathString = tryGetString(field, 'fieldPath');\n          const fieldPath = fieldPathFromDotSeparatedString('setIndexConfiguration', fieldPathString);\n          if (field.arrayConfig === 'CONTAINS') {\n            segments.push(new IndexSegment(fieldPath, 2 /* IndexKind.CONTAINS */));\n          } else if (field.order === 'ASCENDING') {\n            segments.push(new IndexSegment(fieldPath, 0 /* IndexKind.ASCENDING */));\n          } else if (field.order === 'DESCENDING') {\n            segments.push(new IndexSegment(fieldPath, 1 /* IndexKind.DESCENDING */));\n          }\n        }\n      }\n      parsedIndexes.push(new FieldIndex(FieldIndex.UNKNOWN_ID, collectionGroup, segments, IndexState.empty()));\n    }\n  }\n  return parsedIndexes;\n}\nfunction tryParseJson(json) {\n  try {\n    return JSON.parse(json);\n  } catch (e) {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to parse JSON: ' + (e === null || e === void 0 ? void 0 : e.message));\n  }\n}\nfunction tryGetString(data, property) {\n  if (typeof data[property] !== 'string') {\n    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Missing string value for: ' + property);\n  }\n  return data[property];\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A `PersistentCacheIndexManager` for configuring persistent cache indexes used\r\n * for local query execution.\r\n *\r\n * To use, call `getPersistentCacheIndexManager()` to get an instance.\r\n */\nclass PersistentCacheIndexManager {\n  /** @hideconstructor */\n  constructor(_client) {\n    this._client = _client;\n    /** A type string to uniquely identify instances of this class. */\n    this.type = 'PersistentCacheIndexManager';\n  }\n}\n/**\r\n * Returns the PersistentCache Index Manager used by the given `Firestore`\r\n * object.\r\n *\r\n * @return The `PersistentCacheIndexManager` instance, or `null` if local\r\n * persistent storage is not in use.\r\n */\nfunction getPersistentCacheIndexManager(firestore) {\n  var _a;\n  firestore = cast(firestore, Firestore);\n  const cachedInstance = persistentCacheIndexManagerByFirestore.get(firestore);\n  if (cachedInstance) {\n    return cachedInstance;\n  }\n  const client = ensureFirestoreConfigured(firestore);\n  if (((_a = client._uninitializedComponentsProvider) === null || _a === void 0 ? void 0 : _a._offlineKind) !== 'persistent') {\n    return null;\n  }\n  const instance = new PersistentCacheIndexManager(client);\n  persistentCacheIndexManagerByFirestore.set(firestore, instance);\n  return instance;\n}\n/**\r\n * Enables the SDK to create persistent cache indexes automatically for local\r\n * query execution when the SDK believes cache indexes can help improve\r\n * performance.\r\n *\r\n * This feature is disabled by default.\r\n */\nfunction enablePersistentCacheIndexAutoCreation(indexManager) {\n  setPersistentCacheIndexAutoCreationEnabled(indexManager, true);\n}\n/**\r\n * Stops creating persistent cache indexes automatically for local query\r\n * execution. The indexes which have been created by calling\r\n * `enablePersistentCacheIndexAutoCreation()` still take effect.\r\n */\nfunction disablePersistentCacheIndexAutoCreation(indexManager) {\n  setPersistentCacheIndexAutoCreationEnabled(indexManager, false);\n}\n/**\r\n * Removes all persistent cache indexes.\r\n *\r\n * Please note this function will also deletes indexes generated by\r\n * `setIndexConfiguration()`, which is deprecated.\r\n */\nfunction deleteAllPersistentCacheIndexes(indexManager) {\n  indexManager._client.verifyNotTerminated();\n  const promise = firestoreClientDeleteAllFieldIndexes(indexManager._client);\n  promise.then(_ => logDebug('deleting all persistent cache indexes succeeded')).catch(error => logWarn('deleting all persistent cache indexes failed', error));\n}\nfunction setPersistentCacheIndexAutoCreationEnabled(indexManager, isEnabled) {\n  indexManager._client.verifyNotTerminated();\n  const promise = firestoreClientSetPersistentCacheIndexAutoCreationEnabled(indexManager._client, isEnabled);\n  promise.then(_ => logDebug(`setting persistent cache index auto creation ` + `isEnabled=${isEnabled} succeeded`)).catch(error => logWarn(`setting persistent cache index auto creation ` + `isEnabled=${isEnabled} failed`, error));\n}\n/**\r\n * Maps `Firestore` instances to their corresponding\r\n * `PersistentCacheIndexManager` instances.\r\n *\r\n * Use a `WeakMap` so that the mapping will be automatically dropped when the\r\n * `Firestore` instance is garbage collected. This emulates a private member\r\n * as described in https://goo.gle/454yvug.\r\n */\nconst persistentCacheIndexManagerByFirestore = new WeakMap();\n\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * @internal\r\n * @private\r\n *\r\n * This function is for internal use only.\r\n *\r\n * Returns the `QueryTarget` representation of the given query. Returns `null`\r\n * if the Firestore client associated with the given query has not been\r\n * initialized or has been terminated.\r\n *\r\n * @param query - The Query to convert to proto representation.\r\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction _internalQueryToProtoQueryTarget(query) {\n  var _a;\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const serializer = (_a = client._onlineComponents) === null || _a === void 0 ? void 0 : _a.datastore.serializer;\n  if (serializer === undefined) {\n    return null;\n  }\n  return toQueryTarget(serializer, queryToTarget(query._query)).queryTarget;\n}\n/**\r\n * @internal\r\n * @private\r\n *\r\n * This function is for internal use only.\r\n *\r\n * Returns `RunAggregationQueryRequest` which contains the proto representation\r\n * of the given aggregation query request. Returns null if the Firestore client\r\n * associated with the given query has not been initialized or has been\r\n * terminated.\r\n *\r\n * @param query - The Query to convert to proto representation.\r\n * @param aggregateSpec - The set of aggregations and their aliases.\r\n */\nfunction _internalAggregationQueryToProtoRunAggregationQueryRequest(query, aggregateSpec) {\n  var _a;\n  const aggregates = mapToArray(aggregateSpec, (aggregate, alias) => {\n    return new AggregateImpl(alias, aggregate.aggregateType, aggregate._internalFieldPath);\n  });\n  const firestore = cast(query.firestore, Firestore);\n  const client = ensureFirestoreConfigured(firestore);\n  const serializer = (_a = client._onlineComponents) === null || _a === void 0 ? void 0 : _a.datastore.serializer;\n  if (serializer === undefined) {\n    return null;\n  }\n  return toRunAggregationQueryRequest(serializer, queryToAggregateTarget(query._query), aggregates, /* skipAliasing= */true).request;\n}\n\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Testing hooks for use by Firestore's integration test suite to reach into the\r\n * SDK internals to validate logic and behavior that is not visible from the\r\n * public API surface.\r\n *\r\n * @internal\r\n */\nclass TestingHooks {\n  constructor() {\n    throw new Error('instances of this class should not be created');\n  }\n  /**\r\n   * Registers a callback to be notified when an existence filter mismatch\r\n   * occurs in the Watch listen stream.\r\n   *\r\n   * The relative order in which callbacks are notified is unspecified; do not\r\n   * rely on any particular ordering. If a given callback is registered multiple\r\n   * times then it will be notified multiple times, once per registration.\r\n   *\r\n   * @param callback the callback to invoke upon existence filter mismatch.\r\n   *\r\n   * @return a function that, when called, unregisters the given callback; only\r\n   * the first invocation of the returned function does anything; all subsequent\r\n   * invocations do nothing.\r\n   */\n  static onExistenceFilterMismatch(callback) {\n    return TestingHooksSpiImpl.instance.onExistenceFilterMismatch(callback);\n  }\n}\n/**\r\n * The implementation of `TestingHooksSpi`.\r\n */\nclass TestingHooksSpiImpl {\n  constructor() {\n    this.existenceFilterMismatchCallbacksById = new Map();\n  }\n  static get instance() {\n    if (!testingHooksSpiImplInstance) {\n      testingHooksSpiImplInstance = new TestingHooksSpiImpl();\n      setTestingHooksSpi(testingHooksSpiImplInstance);\n    }\n    return testingHooksSpiImplInstance;\n  }\n  notifyOnExistenceFilterMismatch(info) {\n    this.existenceFilterMismatchCallbacksById.forEach(callback => callback(info));\n  }\n  onExistenceFilterMismatch(callback) {\n    const id = Symbol();\n    const callbacks = this.existenceFilterMismatchCallbacksById;\n    callbacks.set(id, callback);\n    return () => callbacks.delete(id);\n  }\n}\nlet testingHooksSpiImplInstance = null;\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nregisterFirestore('node');\nexport { AbstractUserDataWriter, AggregateField, AggregateQuerySnapshot, Bytes, CACHE_SIZE_UNLIMITED, CollectionReference, DocumentReference, DocumentSnapshot, FieldPath, FieldValue, Firestore, FirestoreError, GeoPoint, LoadBundleTask, PersistentCacheIndexManager, Query, QueryCompositeFilterConstraint, QueryConstraint, QueryDocumentSnapshot, QueryEndAtConstraint, QueryFieldFilterConstraint, QueryLimitConstraint, QueryOrderByConstraint, QuerySnapshot, QueryStartAtConstraint, SnapshotMetadata, Timestamp, Transaction, VectorValue, WriteBatch, AutoId as _AutoId, ByteString as _ByteString, DatabaseId as _DatabaseId, DocumentKey as _DocumentKey, EmptyAppCheckTokenProvider as _EmptyAppCheckTokenProvider, EmptyAuthCredentialsProvider as _EmptyAuthCredentialsProvider, FieldPath$1 as _FieldPath, TestingHooks as _TestingHooks, cast as _cast, debugAssert as _debugAssert, _internalAggregationQueryToProtoRunAggregationQueryRequest, _internalQueryToProtoQueryTarget, isBase64Available as _isBase64Available, logWarn as _logWarn, validateIsNotUsedTogether as _validateIsNotUsedTogether, addDoc, aggregateFieldEqual, aggregateQuerySnapshotEqual, and, arrayRemove, arrayUnion, average, clearIndexedDbPersistence, collection, collectionGroup, connectFirestoreEmulator, count, deleteAllPersistentCacheIndexes, deleteDoc, deleteField, disableNetwork, disablePersistentCacheIndexAutoCreation, doc, documentId, enableIndexedDbPersistence, enableMultiTabIndexedDbPersistence, enableNetwork, enablePersistentCacheIndexAutoCreation, endAt, endBefore, ensureFirestoreConfigured, executeWrite, getAggregateFromServer, getCountFromServer, getDoc, getDocFromCache, getDocFromServer, getDocs, getDocsFromCache, getDocsFromServer, getFirestore, getPersistentCacheIndexManager, increment, initializeFirestore, limit, limitToLast, loadBundle, memoryEagerGarbageCollector, memoryLocalCache, memoryLruGarbageCollector, namedQuery, onSnapshot, onSnapshotsInSync, or, orderBy, persistentLocalCache, persistentMultipleTabManager, persistentSingleTabManager, query, queryEqual, refEqual, runTransaction, serverTimestamp, setDoc, setIndexConfiguration, setLogLevel, snapshotEqual, startAfter, startAt, sum, terminate, updateDoc, vector, waitForPendingWrites, where, writeBatch };\n", "var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\nvar bloom_blob_es2018 = {};\n\n/** @license\nCopyright The Closure Library Authors.\nSPDX-License-Identifier: Apache-2.0\n*/\n\nvar Integer;\nvar Md5;\n(function () {\n  var h; /** @license\n         Copyright The Closure Library Authors.\n         SPDX-License-Identifier: Apache-2.0\n         */\n  function k(f, a) {\n    function c() {}\n    c.prototype = a.prototype;\n    f.D = a.prototype;\n    f.prototype = new c();\n    f.prototype.constructor = f;\n    f.C = function (d, e, g) {\n      for (var b = Array(arguments.length - 2), r = 2; r < arguments.length; r++) b[r - 2] = arguments[r];\n      return a.prototype[e].apply(d, b);\n    };\n  }\n  function l() {\n    this.blockSize = -1;\n  }\n  function m() {\n    this.blockSize = -1;\n    this.blockSize = 64;\n    this.g = Array(4);\n    this.B = Array(this.blockSize);\n    this.o = this.h = 0;\n    this.s();\n  }\n  k(m, l);\n  m.prototype.s = function () {\n    this.g[0] = 1732584193;\n    this.g[1] = 4023233417;\n    this.g[2] = 2562383102;\n    this.g[3] = 271733878;\n    this.o = this.h = 0;\n  };\n  function n(f, a, c) {\n    c || (c = 0);\n    var d = Array(16);\n    if (\"string\" === typeof a) for (var e = 0; 16 > e; ++e) d[e] = a.charCodeAt(c++) | a.charCodeAt(c++) << 8 | a.charCodeAt(c++) << 16 | a.charCodeAt(c++) << 24;else for (e = 0; 16 > e; ++e) d[e] = a[c++] | a[c++] << 8 | a[c++] << 16 | a[c++] << 24;\n    a = f.g[0];\n    c = f.g[1];\n    e = f.g[2];\n    var g = f.g[3];\n    var b = a + (g ^ c & (e ^ g)) + d[0] + 3614090360 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[1] + 3905402710 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[2] + 606105819 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[3] + 3250441966 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (g ^ c & (e ^ g)) + d[4] + 4118548399 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[5] + 1200080426 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[6] + 2821735955 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[7] + 4249261313 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (g ^ c & (e ^ g)) + d[8] + 1770035416 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[9] + 2336552879 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[10] + 4294925233 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[11] + 2304563134 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (g ^ c & (e ^ g)) + d[12] + 1804603682 & 4294967295;\n    a = c + (b << 7 & 4294967295 | b >>> 25);\n    b = g + (e ^ a & (c ^ e)) + d[13] + 4254626195 & 4294967295;\n    g = a + (b << 12 & 4294967295 | b >>> 20);\n    b = e + (c ^ g & (a ^ c)) + d[14] + 2792965006 & 4294967295;\n    e = g + (b << 17 & 4294967295 | b >>> 15);\n    b = c + (a ^ e & (g ^ a)) + d[15] + 1236535329 & 4294967295;\n    c = e + (b << 22 & 4294967295 | b >>> 10);\n    b = a + (e ^ g & (c ^ e)) + d[1] + 4129170786 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[6] + 3225465664 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[11] + 643717713 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[0] + 3921069994 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (e ^ g & (c ^ e)) + d[5] + 3593408605 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[10] + 38016083 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[15] + 3634488961 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[4] + 3889429448 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (e ^ g & (c ^ e)) + d[9] + 568446438 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[14] + 3275163606 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[3] + 4107603335 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[8] + 1163531501 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (e ^ g & (c ^ e)) + d[13] + 2850285829 & 4294967295;\n    a = c + (b << 5 & 4294967295 | b >>> 27);\n    b = g + (c ^ e & (a ^ c)) + d[2] + 4243563512 & 4294967295;\n    g = a + (b << 9 & 4294967295 | b >>> 23);\n    b = e + (a ^ c & (g ^ a)) + d[7] + 1735328473 & 4294967295;\n    e = g + (b << 14 & 4294967295 | b >>> 18);\n    b = c + (g ^ a & (e ^ g)) + d[12] + 2368359562 & 4294967295;\n    c = e + (b << 20 & 4294967295 | b >>> 12);\n    b = a + (c ^ e ^ g) + d[5] + 4294588738 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[8] + 2272392833 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[11] + 1839030562 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[14] + 4259657740 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (c ^ e ^ g) + d[1] + 2763975236 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[4] + 1272893353 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[7] + 4139469664 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[10] + 3200236656 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (c ^ e ^ g) + d[13] + 681279174 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[0] + 3936430074 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[3] + 3572445317 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[6] + 76029189 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (c ^ e ^ g) + d[9] + 3654602809 & 4294967295;\n    a = c + (b << 4 & 4294967295 | b >>> 28);\n    b = g + (a ^ c ^ e) + d[12] + 3873151461 & 4294967295;\n    g = a + (b << 11 & 4294967295 | b >>> 21);\n    b = e + (g ^ a ^ c) + d[15] + 530742520 & 4294967295;\n    e = g + (b << 16 & 4294967295 | b >>> 16);\n    b = c + (e ^ g ^ a) + d[2] + 3299628645 & 4294967295;\n    c = e + (b << 23 & 4294967295 | b >>> 9);\n    b = a + (e ^ (c | ~g)) + d[0] + 4096336452 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[7] + 1126891415 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[14] + 2878612391 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[5] + 4237533241 & 4294967295;\n    c = e + (b << 21 & 4294967295 | b >>> 11);\n    b = a + (e ^ (c | ~g)) + d[12] + 1700485571 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[3] + 2399980690 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[10] + 4293915773 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[1] + 2240044497 & 4294967295;\n    c = e + (b << 21 & 4294967295 | b >>> 11);\n    b = a + (e ^ (c | ~g)) + d[8] + 1873313359 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[15] + 4264355552 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[6] + 2734768916 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[13] + 1309151649 & 4294967295;\n    c = e + (b << 21 & 4294967295 | b >>> 11);\n    b = a + (e ^ (c | ~g)) + d[4] + 4149444226 & 4294967295;\n    a = c + (b << 6 & 4294967295 | b >>> 26);\n    b = g + (c ^ (a | ~e)) + d[11] + 3174756917 & 4294967295;\n    g = a + (b << 10 & 4294967295 | b >>> 22);\n    b = e + (a ^ (g | ~c)) + d[2] + 718787259 & 4294967295;\n    e = g + (b << 15 & 4294967295 | b >>> 17);\n    b = c + (g ^ (e | ~a)) + d[9] + 3951481745 & 4294967295;\n    f.g[0] = f.g[0] + a & 4294967295;\n    f.g[1] = f.g[1] + (e + (b << 21 & 4294967295 | b >>> 11)) & 4294967295;\n    f.g[2] = f.g[2] + e & 4294967295;\n    f.g[3] = f.g[3] + g & 4294967295;\n  }\n  m.prototype.u = function (f, a) {\n    void 0 === a && (a = f.length);\n    for (var c = a - this.blockSize, d = this.B, e = this.h, g = 0; g < a;) {\n      if (0 == e) for (; g <= c;) n(this, f, g), g += this.blockSize;\n      if (\"string\" === typeof f) for (; g < a;) {\n        if (d[e++] = f.charCodeAt(g++), e == this.blockSize) {\n          n(this, d);\n          e = 0;\n          break;\n        }\n      } else for (; g < a;) if (d[e++] = f[g++], e == this.blockSize) {\n        n(this, d);\n        e = 0;\n        break;\n      }\n    }\n    this.h = e;\n    this.o += a;\n  };\n  m.prototype.v = function () {\n    var f = Array((56 > this.h ? this.blockSize : 2 * this.blockSize) - this.h);\n    f[0] = 128;\n    for (var a = 1; a < f.length - 8; ++a) f[a] = 0;\n    var c = 8 * this.o;\n    for (a = f.length - 8; a < f.length; ++a) f[a] = c & 255, c /= 256;\n    this.u(f);\n    f = Array(16);\n    for (a = c = 0; 4 > a; ++a) for (var d = 0; 32 > d; d += 8) f[c++] = this.g[a] >>> d & 255;\n    return f;\n  };\n  function p(f, a) {\n    var c = q;\n    return Object.prototype.hasOwnProperty.call(c, f) ? c[f] : c[f] = a(f);\n  }\n  function t(f, a) {\n    this.h = a;\n    for (var c = [], d = !0, e = f.length - 1; 0 <= e; e--) {\n      var g = f[e] | 0;\n      d && g == a || (c[e] = g, d = !1);\n    }\n    this.g = c;\n  }\n  var q = {};\n  function u(f) {\n    return -128 <= f && 128 > f ? p(f, function (a) {\n      return new t([a | 0], 0 > a ? -1 : 0);\n    }) : new t([f | 0], 0 > f ? -1 : 0);\n  }\n  function v(f) {\n    if (isNaN(f) || !isFinite(f)) return w;\n    if (0 > f) return x(v(-f));\n    for (var a = [], c = 1, d = 0; f >= c; d++) a[d] = f / c | 0, c *= 4294967296;\n    return new t(a, 0);\n  }\n  function y(f, a) {\n    if (0 == f.length) throw Error(\"number format error: empty string\");\n    a = a || 10;\n    if (2 > a || 36 < a) throw Error(\"radix out of range: \" + a);\n    if (\"-\" == f.charAt(0)) return x(y(f.substring(1), a));\n    if (0 <= f.indexOf(\"-\")) throw Error('number format error: interior \"-\" character');\n    for (var c = v(Math.pow(a, 8)), d = w, e = 0; e < f.length; e += 8) {\n      var g = Math.min(8, f.length - e),\n        b = parseInt(f.substring(e, e + g), a);\n      8 > g ? (g = v(Math.pow(a, g)), d = d.j(g).add(v(b))) : (d = d.j(c), d = d.add(v(b)));\n    }\n    return d;\n  }\n  var w = u(0),\n    z = u(1),\n    A = u(16777216);\n  h = t.prototype;\n  h.m = function () {\n    if (B(this)) return -x(this).m();\n    for (var f = 0, a = 1, c = 0; c < this.g.length; c++) {\n      var d = this.i(c);\n      f += (0 <= d ? d : 4294967296 + d) * a;\n      a *= 4294967296;\n    }\n    return f;\n  };\n  h.toString = function (f) {\n    f = f || 10;\n    if (2 > f || 36 < f) throw Error(\"radix out of range: \" + f);\n    if (C(this)) return \"0\";\n    if (B(this)) return \"-\" + x(this).toString(f);\n    for (var a = v(Math.pow(f, 6)), c = this, d = \"\";;) {\n      var e = D(c, a).g;\n      c = F(c, e.j(a));\n      var g = ((0 < c.g.length ? c.g[0] : c.h) >>> 0).toString(f);\n      c = e;\n      if (C(c)) return g + d;\n      for (; 6 > g.length;) g = \"0\" + g;\n      d = g + d;\n    }\n  };\n  h.i = function (f) {\n    return 0 > f ? 0 : f < this.g.length ? this.g[f] : this.h;\n  };\n  function C(f) {\n    if (0 != f.h) return !1;\n    for (var a = 0; a < f.g.length; a++) if (0 != f.g[a]) return !1;\n    return !0;\n  }\n  function B(f) {\n    return -1 == f.h;\n  }\n  h.l = function (f) {\n    f = F(this, f);\n    return B(f) ? -1 : C(f) ? 0 : 1;\n  };\n  function x(f) {\n    for (var a = f.g.length, c = [], d = 0; d < a; d++) c[d] = ~f.g[d];\n    return new t(c, ~f.h).add(z);\n  }\n  h.abs = function () {\n    return B(this) ? x(this) : this;\n  };\n  h.add = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0, e = 0; e <= a; e++) {\n      var g = d + (this.i(e) & 65535) + (f.i(e) & 65535),\n        b = (g >>> 16) + (this.i(e) >>> 16) + (f.i(e) >>> 16);\n      d = b >>> 16;\n      g &= 65535;\n      b &= 65535;\n      c[e] = b << 16 | g;\n    }\n    return new t(c, c[c.length - 1] & -2147483648 ? -1 : 0);\n  };\n  function F(f, a) {\n    return f.add(x(a));\n  }\n  h.j = function (f) {\n    if (C(this) || C(f)) return w;\n    if (B(this)) return B(f) ? x(this).j(x(f)) : x(x(this).j(f));\n    if (B(f)) return x(this.j(x(f)));\n    if (0 > this.l(A) && 0 > f.l(A)) return v(this.m() * f.m());\n    for (var a = this.g.length + f.g.length, c = [], d = 0; d < 2 * a; d++) c[d] = 0;\n    for (d = 0; d < this.g.length; d++) for (var e = 0; e < f.g.length; e++) {\n      var g = this.i(d) >>> 16,\n        b = this.i(d) & 65535,\n        r = f.i(e) >>> 16,\n        E = f.i(e) & 65535;\n      c[2 * d + 2 * e] += b * E;\n      G(c, 2 * d + 2 * e);\n      c[2 * d + 2 * e + 1] += g * E;\n      G(c, 2 * d + 2 * e + 1);\n      c[2 * d + 2 * e + 1] += b * r;\n      G(c, 2 * d + 2 * e + 1);\n      c[2 * d + 2 * e + 2] += g * r;\n      G(c, 2 * d + 2 * e + 2);\n    }\n    for (d = 0; d < a; d++) c[d] = c[2 * d + 1] << 16 | c[2 * d];\n    for (d = a; d < 2 * a; d++) c[d] = 0;\n    return new t(c, 0);\n  };\n  function G(f, a) {\n    for (; (f[a] & 65535) != f[a];) f[a + 1] += f[a] >>> 16, f[a] &= 65535, a++;\n  }\n  function H(f, a) {\n    this.g = f;\n    this.h = a;\n  }\n  function D(f, a) {\n    if (C(a)) throw Error(\"division by zero\");\n    if (C(f)) return new H(w, w);\n    if (B(f)) return a = D(x(f), a), new H(x(a.g), x(a.h));\n    if (B(a)) return a = D(f, x(a)), new H(x(a.g), a.h);\n    if (30 < f.g.length) {\n      if (B(f) || B(a)) throw Error(\"slowDivide_ only works with positive integers.\");\n      for (var c = z, d = a; 0 >= d.l(f);) c = I(c), d = I(d);\n      var e = J(c, 1),\n        g = J(d, 1);\n      d = J(d, 2);\n      for (c = J(c, 2); !C(d);) {\n        var b = g.add(d);\n        0 >= b.l(f) && (e = e.add(c), g = b);\n        d = J(d, 1);\n        c = J(c, 1);\n      }\n      a = F(f, e.j(a));\n      return new H(e, a);\n    }\n    for (e = w; 0 <= f.l(a);) {\n      c = Math.max(1, Math.floor(f.m() / a.m()));\n      d = Math.ceil(Math.log(c) / Math.LN2);\n      d = 48 >= d ? 1 : Math.pow(2, d - 48);\n      g = v(c);\n      for (b = g.j(a); B(b) || 0 < b.l(f);) c -= d, g = v(c), b = g.j(a);\n      C(g) && (g = z);\n      e = e.add(g);\n      f = F(f, b);\n    }\n    return new H(e, f);\n  }\n  h.A = function (f) {\n    return D(this, f).h;\n  };\n  h.and = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) & f.i(d);\n    return new t(c, this.h & f.h);\n  };\n  h.or = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) | f.i(d);\n    return new t(c, this.h | f.h);\n  };\n  h.xor = function (f) {\n    for (var a = Math.max(this.g.length, f.g.length), c = [], d = 0; d < a; d++) c[d] = this.i(d) ^ f.i(d);\n    return new t(c, this.h ^ f.h);\n  };\n  function I(f) {\n    for (var a = f.g.length + 1, c = [], d = 0; d < a; d++) c[d] = f.i(d) << 1 | f.i(d - 1) >>> 31;\n    return new t(c, f.h);\n  }\n  function J(f, a) {\n    var c = a >> 5;\n    a %= 32;\n    for (var d = f.g.length - c, e = [], g = 0; g < d; g++) e[g] = 0 < a ? f.i(g + c) >>> a | f.i(g + c + 1) << 32 - a : f.i(g + c);\n    return new t(e, f.h);\n  }\n  m.prototype.digest = m.prototype.v;\n  m.prototype.reset = m.prototype.s;\n  m.prototype.update = m.prototype.u;\n  Md5 = bloom_blob_es2018.Md5 = m;\n  t.prototype.add = t.prototype.add;\n  t.prototype.multiply = t.prototype.j;\n  t.prototype.modulo = t.prototype.A;\n  t.prototype.compare = t.prototype.l;\n  t.prototype.toNumber = t.prototype.m;\n  t.prototype.toString = t.prototype.toString;\n  t.prototype.getBits = t.prototype.i;\n  t.fromNumber = v;\n  t.fromString = y;\n  Integer = bloom_blob_es2018.Integer = t;\n}).apply(typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});\nexport { Integer, Md5, bloom_blob_es2018 as default };\n"],
  "mappings": "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CV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MACV,KAAU;AAAA,MA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G,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,KAAK,KAAK,KAAK,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,KAAK,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,GAAG,KAAK,KAAK,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,GAAG,GAAG,GAAG,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,GAAG,GAAG,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,KAAK,KAAK,IAAI,GAAG,IAAI,IAAI,KAAK,KAAK,IAAI,GAAG,IAAI,GAAG,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;AAAA,MAC9sC,SAAS,GAAG;AAAA,MACZ;AAYA,eAASE,MAAK,KAAK,MAAM,UAAU;AAKjC,aAAK,MAAM,MAAM;AAMjB,aAAK,OAAO,OAAO;AAMnB,aAAK,WAAW,CAAC,CAAC;AAAA,MACpB;AAwBA,MAAAA,MAAK,UAAU;AACf,aAAO,eAAeA,MAAK,WAAW,cAAc;AAAA,QAClD,OAAO;AAAA,MACT,CAAC;AAQD,eAAS,OAAO,KAAK;AACnB,gBAAQ,OAAO,IAAI,YAAY,OAAO;AAAA,MACxC;AAQA,eAAS,MAAM,OAAO;AACpB,YAAI,IAAI,KAAK,MAAM,QAAQ,CAAC,KAAK;AACjC,eAAO,QAAQ,KAAK,IAAI;AAAA,MAC1B;AAQA,MAAAA,MAAK,SAAS;AAOd,UAAI,YAAY,CAAC;AAOjB,UAAI,aAAa,CAAC;AAQlB,eAAS,QAAQ,OAAO,UAAU;AAChC,YAAI,KAAK,WAAW;AACpB,YAAI,UAAU;AACZ,qBAAW;AACX,cAAI,QAAQ,KAAK,SAAS,QAAQ,KAAK;AACrC,wBAAY,WAAW,KAAK;AAC5B,gBAAI,UAAW,QAAO;AAAA,UACxB;AACA,gBAAM,SAAS,OAAO,GAAG,IAAI;AAC7B,cAAI,MAAO,YAAW,KAAK,IAAI;AAC/B,iBAAO;AAAA,QACT,OAAO;AACL,mBAAS;AACT,cAAI,QAAQ,QAAQ,SAAS,QAAQ,KAAK;AACxC,wBAAY,UAAU,KAAK;AAC3B,gBAAI,UAAW,QAAO;AAAA,UACxB;AACA,gBAAM,SAAS,OAAO,QAAQ,IAAI,KAAK,GAAG,KAAK;AAC/C,cAAI,MAAO,WAAU,KAAK,IAAI;AAC9B,iBAAO;AAAA,QACT;AAAA,MACF;AASA,MAAAA,MAAK,UAAU;AAQf,eAAS,WAAW,OAAO,UAAU;AACnC,YAAI,MAAM,KAAK,EAAG,QAAO,WAAW,QAAQ;AAC5C,YAAI,UAAU;AACZ,cAAI,QAAQ,EAAG,QAAO;AACtB,cAAI,SAAS,eAAgB,QAAO;AAAA,QACtC,OAAO;AACL,cAAI,SAAS,CAAC,eAAgB,QAAOC;AACrC,cAAI,QAAQ,KAAK,eAAgB,QAAOC;AAAA,QAC1C;AACA,YAAI,QAAQ,EAAG,QAAO,WAAW,CAAC,OAAO,QAAQ,EAAE,IAAI;AACvD,eAAO,SAAS,QAAQ,iBAAiB,GAAG,QAAQ,iBAAiB,GAAG,QAAQ;AAAA,MAClF;AASA,MAAAF,MAAK,aAAa;AASlB,eAAS,SAAS,SAAS,UAAU,UAAU;AAC7C,eAAO,IAAIA,MAAK,SAAS,UAAU,QAAQ;AAAA,MAC7C;AAWA,MAAAA,MAAK,WAAW;AAShB,UAAI,UAAU,KAAK;AAUnB,eAAS,WAAW,KAAK,UAAU,OAAO;AACxC,YAAI,IAAI,WAAW,EAAG,OAAM,MAAM,cAAc;AAChD,YAAI,OAAO,aAAa,UAAU;AAEhC,kBAAQ;AACR,qBAAW;AAAA,QACb,OAAO;AACL,qBAAW,CAAC,CAAC;AAAA,QACf;AACA,YAAI,QAAQ,SAAS,QAAQ,cAAc,QAAQ,eAAe,QAAQ,YAAa,QAAO,WAAW,QAAQ;AACjH,gBAAQ,SAAS;AACjB,YAAI,QAAQ,KAAK,KAAK,MAAO,OAAM,WAAW,OAAO;AACrD,YAAI;AACJ,aAAK,IAAI,IAAI,QAAQ,GAAG,KAAK,EAAG,OAAM,MAAM,iBAAiB;AAAA,iBAAW,MAAM,GAAG;AAC/E,iBAAO,WAAW,IAAI,UAAU,CAAC,GAAG,UAAU,KAAK,EAAE,IAAI;AAAA,QAC3D;AAGA,YAAI,eAAe,WAAW,QAAQ,OAAO,CAAC,CAAC;AAC/C,YAAI,SAAS;AACb,iBAAS,IAAI,GAAG,IAAI,IAAI,QAAQ,KAAK,GAAG;AACtC,cAAI,OAAO,KAAK,IAAI,GAAG,IAAI,SAAS,CAAC,GACnC,QAAQ,SAAS,IAAI,UAAU,GAAG,IAAI,IAAI,GAAG,KAAK;AACpD,cAAI,OAAO,GAAG;AACZ,gBAAI,QAAQ,WAAW,QAAQ,OAAO,IAAI,CAAC;AAC3C,qBAAS,OAAO,IAAI,KAAK,EAAE,IAAI,WAAW,KAAK,CAAC;AAAA,UAClD,OAAO;AACL,qBAAS,OAAO,IAAI,YAAY;AAChC,qBAAS,OAAO,IAAI,WAAW,KAAK,CAAC;AAAA,UACvC;AAAA,QACF;AACA,eAAO,WAAW;AAClB,eAAO;AAAA,MACT;AAUA,MAAAA,MAAK,aAAa;AASlB,eAAS,UAAU,KAAK,UAAU;AAChC,YAAI,OAAO,QAAQ,SAAU,QAAO,WAAW,KAAK,QAAQ;AAC5D,YAAI,OAAO,QAAQ,SAAU,QAAO,WAAW,KAAK,QAAQ;AAE5D,eAAO,SAAS,IAAI,KAAK,IAAI,MAAM,OAAO,aAAa,YAAY,WAAW,IAAI,QAAQ;AAAA,MAC5F;AASA,MAAAA,MAAK,YAAY;AASjB,UAAI,iBAAiB,KAAK;AAO1B,UAAI,iBAAiB,KAAK;AAO1B,UAAI,iBAAiB,iBAAiB;AAOtC,UAAI,iBAAiB,iBAAiB;AAOtC,UAAI,iBAAiB,iBAAiB;AAOtC,UAAI,aAAa,QAAQ,cAAc;AAMvC,UAAI,OAAO,QAAQ,CAAC;AAMpB,MAAAA,MAAK,OAAO;AAMZ,UAAI,QAAQ,QAAQ,GAAG,IAAI;AAM3B,MAAAA,MAAK,QAAQ;AAMb,UAAI,MAAM,QAAQ,CAAC;AAMnB,MAAAA,MAAK,MAAM;AAMX,UAAI,OAAO,QAAQ,GAAG,IAAI;AAM1B,MAAAA,MAAK,OAAO;AAMZ,UAAI,UAAU,QAAQ,EAAE;AAMxB,MAAAA,MAAK,UAAU;AAMf,UAAIE,aAAY,SAAS,aAAa,GAAG,aAAa,GAAG,KAAK;AAM9D,MAAAF,MAAK,YAAYE;AAMjB,UAAI,qBAAqB,SAAS,aAAa,GAAG,aAAa,GAAG,IAAI;AAMtE,MAAAF,MAAK,qBAAqB;AAM1B,UAAIC,aAAY,SAAS,GAAG,aAAa,GAAG,KAAK;AAMjD,MAAAD,MAAK,YAAYC;AAMjB,UAAI,gBAAgBD,MAAK;AAOzB,oBAAc,QAAQ,SAAS,QAAQ;AACrC,eAAO,KAAK,WAAW,KAAK,QAAQ,IAAI,KAAK;AAAA,MAC/C;AAOA,oBAAc,WAAW,SAASG,YAAW;AAC3C,YAAI,KAAK,SAAU,SAAQ,KAAK,SAAS,KAAK,kBAAkB,KAAK,QAAQ;AAC7E,eAAO,KAAK,OAAO,kBAAkB,KAAK,QAAQ;AAAA,MACpD;AAUA,oBAAc,WAAW,SAAS,SAAS,OAAO;AAChD,gBAAQ,SAAS;AACjB,YAAI,QAAQ,KAAK,KAAK,MAAO,OAAM,WAAW,OAAO;AACrD,YAAI,KAAK,OAAO,EAAG,QAAO;AAC1B,YAAI,KAAK,WAAW,GAAG;AAErB,cAAI,KAAK,GAAGF,UAAS,GAAG;AAGtB,gBAAI,YAAY,WAAW,KAAK,GAC9B,MAAM,KAAK,IAAI,SAAS,GACxB,OAAO,IAAI,IAAI,SAAS,EAAE,IAAI,IAAI;AACpC,mBAAO,IAAI,SAAS,KAAK,IAAI,KAAK,MAAM,EAAE,SAAS,KAAK;AAAA,UAC1D,MAAO,QAAO,MAAM,KAAK,IAAI,EAAE,SAAS,KAAK;AAAA,QAC/C;AAGA,YAAI,eAAe,WAAW,QAAQ,OAAO,CAAC,GAAG,KAAK,QAAQ,GAC5D,MAAM;AACR,YAAI,SAAS;AACb,eAAO,MAAM;AACX,cAAI,SAAS,IAAI,IAAI,YAAY,GAC/B,SAAS,IAAI,IAAI,OAAO,IAAI,YAAY,CAAC,EAAE,MAAM,MAAM,GACvD,SAAS,OAAO,SAAS,KAAK;AAChC,gBAAM;AACN,cAAI,IAAI,OAAO,EAAG,QAAO,SAAS;AAAA,eAAY;AAC5C,mBAAO,OAAO,SAAS,EAAG,UAAS,MAAM;AACzC,qBAAS,KAAK,SAAS;AAAA,UACzB;AAAA,QACF;AAAA,MACF;AAOA,oBAAc,cAAc,SAAS,cAAc;AACjD,eAAO,KAAK;AAAA,MACd;AAOA,oBAAc,sBAAsB,SAAS,sBAAsB;AACjE,eAAO,KAAK,SAAS;AAAA,MACvB;AAOA,oBAAc,aAAa,SAAS,aAAa;AAC/C,eAAO,KAAK;AAAA,MACd;AAOA,oBAAc,qBAAqB,SAAS,qBAAqB;AAC/D,eAAO,KAAK,QAAQ;AAAA,MACtB;AAOA,oBAAc,gBAAgB,SAAS,gBAAgB;AACrD,YAAI,KAAK,WAAW;AAElB,iBAAO,KAAK,GAAGA,UAAS,IAAI,KAAK,KAAK,IAAI,EAAE,cAAc;AAC5D,YAAI,MAAM,KAAK,QAAQ,IAAI,KAAK,OAAO,KAAK;AAC5C,iBAAS,MAAM,IAAI,MAAM,GAAG,MAAO,MAAK,MAAM,KAAK,QAAQ,EAAG;AAC9D,eAAO,KAAK,QAAQ,IAAI,MAAM,KAAK,MAAM;AAAA,MAC3C;AAOA,oBAAc,SAAS,SAAS,SAAS;AACvC,eAAO,KAAK,SAAS,KAAK,KAAK,QAAQ;AAAA,MACzC;AAMA,oBAAc,MAAM,cAAc;AAOlC,oBAAc,aAAa,SAAS,aAAa;AAC/C,eAAO,CAAC,KAAK,YAAY,KAAK,OAAO;AAAA,MACvC;AAOA,oBAAc,aAAa,SAAS,aAAa;AAC/C,eAAO,KAAK,YAAY,KAAK,QAAQ;AAAA,MACvC;AAOA,oBAAc,QAAQ,SAAS,QAAQ;AACrC,gBAAQ,KAAK,MAAM,OAAO;AAAA,MAC5B;AAOA,oBAAc,SAAS,SAAS,SAAS;AACvC,gBAAQ,KAAK,MAAM,OAAO;AAAA,MAC5B;AAQA,oBAAc,SAAS,SAAS,OAAO,OAAO;AAC5C,YAAI,CAAC,OAAO,KAAK,EAAG,SAAQ,UAAU,KAAK;AAC3C,YAAI,KAAK,aAAa,MAAM,YAAY,KAAK,SAAS,OAAO,KAAK,MAAM,SAAS,OAAO,EAAG,QAAO;AAClG,eAAO,KAAK,SAAS,MAAM,QAAQ,KAAK,QAAQ,MAAM;AAAA,MACxD;AAQA,oBAAc,KAAK,cAAc;AAQjC,oBAAc,YAAY,SAAS,UAAU,OAAO;AAClD,eAAO,CAAC,KAAK;AAAA;AAAA,UACb;AAAA,QAAK;AAAA,MACP;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,KAAK,cAAc;AAQjC,oBAAc,WAAW,SAAS,SAAS,OAAO;AAChD,eAAO,KAAK;AAAA;AAAA,UACZ;AAAA,QAAK,IAAI;AAAA,MACX;AAQA,oBAAc,KAAK,cAAc;AAQjC,oBAAc,kBAAkB,SAAS,gBAAgB,OAAO;AAC9D,eAAO,KAAK;AAAA;AAAA,UACZ;AAAA,QAAK,KAAK;AAAA,MACZ;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,KAAK,cAAc;AAQjC,oBAAc,cAAc,SAAS,YAAY,OAAO;AACtD,eAAO,KAAK;AAAA;AAAA,UACZ;AAAA,QAAK,IAAI;AAAA,MACX;AAQA,oBAAc,KAAK,cAAc;AAQjC,oBAAc,qBAAqB,SAAS,mBAAmB,OAAO;AACpE,eAAO,KAAK;AAAA;AAAA,UACZ;AAAA,QAAK,KAAK;AAAA,MACZ;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,KAAK,cAAc;AASjC,oBAAc,UAAU,SAAS,QAAQ,OAAO;AAC9C,YAAI,CAAC,OAAO,KAAK,EAAG,SAAQ,UAAU,KAAK;AAC3C,YAAI,KAAK,GAAG,KAAK,EAAG,QAAO;AAC3B,YAAI,UAAU,KAAK,WAAW,GAC5B,WAAW,MAAM,WAAW;AAC9B,YAAI,WAAW,CAAC,SAAU,QAAO;AACjC,YAAI,CAAC,WAAW,SAAU,QAAO;AAEjC,YAAI,CAAC,KAAK,SAAU,QAAO,KAAK,IAAI,KAAK,EAAE,WAAW,IAAI,KAAK;AAE/D,eAAO,MAAM,SAAS,IAAI,KAAK,SAAS,KAAK,MAAM,SAAS,KAAK,QAAQ,MAAM,QAAQ,IAAI,KAAK,QAAQ,IAAI,KAAK;AAAA,MACnH;AASA,oBAAc,OAAO,cAAc;AAOnC,oBAAc,SAAS,SAAS,SAAS;AACvC,YAAI,CAAC,KAAK,YAAY,KAAK,GAAGA,UAAS,EAAG,QAAOA;AACjD,eAAO,KAAK,IAAI,EAAE,IAAI,GAAG;AAAA,MAC3B;AAOA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,MAAM,SAAS,IAAI,QAAQ;AACvC,YAAI,CAAC,OAAO,MAAM,EAAG,UAAS,UAAU,MAAM;AAE9C,YAAI,MAAM,KAAK,SAAS;AACxB,YAAI,MAAM,KAAK,OAAO;AACtB,YAAI,MAAM,KAAK,QAAQ;AACvB,YAAI,MAAM,KAAK,MAAM;AACrB,YAAI,MAAM,OAAO,SAAS;AAC1B,YAAI,MAAM,OAAO,OAAO;AACxB,YAAI,MAAM,OAAO,QAAQ;AACzB,YAAI,MAAM,OAAO,MAAM;AACvB,YAAI,MAAM,GACR,MAAM,GACN,MAAM,GACN,MAAM;AACR,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO;AACP,eAAO,SAAS,OAAO,KAAK,KAAK,OAAO,KAAK,KAAK,KAAK,QAAQ;AAAA,MACjE;AAQA,oBAAc,WAAW,SAAS,SAAS,YAAY;AACrD,YAAI,CAAC,OAAO,UAAU,EAAG,cAAa,UAAU,UAAU;AAC1D,eAAO,KAAK,IAAI,WAAW,IAAI,CAAC;AAAA,MAClC;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,WAAW,SAAS,SAAS,YAAY;AACrD,YAAI,KAAK,OAAO,EAAG,QAAO;AAC1B,YAAI,CAAC,OAAO,UAAU,EAAG,cAAa,UAAU,UAAU;AAE1D,YAAI,MAAM;AACR,cAAI,MAAM,KAAK,KAAK,EAAE,KAAK,KAAK,KAAK,MAAM,WAAW,KAAK,WAAW,IAAI;AAC1E,iBAAO,SAAS,KAAK,KAAK,UAAU,EAAE,GAAG,KAAK,QAAQ;AAAA,QACxD;AACA,YAAI,WAAW,OAAO,EAAG,QAAO,KAAK,WAAW,QAAQ;AACxD,YAAI,KAAK,GAAGA,UAAS,EAAG,QAAO,WAAW,MAAM,IAAIA,aAAY;AAChE,YAAI,WAAW,GAAGA,UAAS,EAAG,QAAO,KAAK,MAAM,IAAIA,aAAY;AAChE,YAAI,KAAK,WAAW,GAAG;AACrB,cAAI,WAAW,WAAW,EAAG,QAAO,KAAK,IAAI,EAAE,IAAI,WAAW,IAAI,CAAC;AAAA,cAAO,QAAO,KAAK,IAAI,EAAE,IAAI,UAAU,EAAE,IAAI;AAAA,QAClH,WAAW,WAAW,WAAW,EAAG,QAAO,KAAK,IAAI,WAAW,IAAI,CAAC,EAAE,IAAI;AAE1E,YAAI,KAAK,GAAG,UAAU,KAAK,WAAW,GAAG,UAAU,EAAG,QAAO,WAAW,KAAK,SAAS,IAAI,WAAW,SAAS,GAAG,KAAK,QAAQ;AAG9H,YAAI,MAAM,KAAK,SAAS;AACxB,YAAI,MAAM,KAAK,OAAO;AACtB,YAAI,MAAM,KAAK,QAAQ;AACvB,YAAI,MAAM,KAAK,MAAM;AACrB,YAAI,MAAM,WAAW,SAAS;AAC9B,YAAI,MAAM,WAAW,OAAO;AAC5B,YAAI,MAAM,WAAW,QAAQ;AAC7B,YAAI,MAAM,WAAW,MAAM;AAC3B,YAAI,MAAM,GACR,MAAM,GACN,MAAM,GACN,MAAM;AACR,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM;AACb,eAAO,QAAQ;AACf,eAAO;AACP,eAAO,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM,MAAM;AACjD,eAAO;AACP,eAAO,SAAS,OAAO,KAAK,KAAK,OAAO,KAAK,KAAK,KAAK,QAAQ;AAAA,MACjE;AAQA,oBAAc,MAAM,cAAc;AASlC,oBAAc,SAAS,SAAS,OAAO,SAAS;AAC9C,YAAI,CAAC,OAAO,OAAO,EAAG,WAAU,UAAU,OAAO;AACjD,YAAI,QAAQ,OAAO,EAAG,OAAM,MAAM,kBAAkB;AAEpD,YAAI,MAAM;AAIR,cAAI,CAAC,KAAK,YAAY,KAAK,SAAS,eAAe,QAAQ,QAAQ,MAAM,QAAQ,SAAS,IAAI;AAE5F,mBAAO;AAAA,UACT;AACA,cAAI,OAAO,KAAK,WAAW,KAAK,OAAO,IAAI,KAAK,OAAO,GAAG,KAAK,KAAK,KAAK,MAAM,QAAQ,KAAK,QAAQ,IAAI;AACxG,iBAAO,SAAS,KAAK,KAAK,UAAU,EAAE,GAAG,KAAK,QAAQ;AAAA,QACxD;AACA,YAAI,KAAK,OAAO,EAAG,QAAO,KAAK,WAAW,QAAQ;AAClD,YAAI,QAAQ,KAAK;AACjB,YAAI,CAAC,KAAK,UAAU;AAGlB,cAAI,KAAK,GAAGA,UAAS,GAAG;AACtB,gBAAI,QAAQ,GAAG,GAAG,KAAK,QAAQ,GAAG,OAAO,EAAG,QAAOA;AAAA,qBAC1C,QAAQ,GAAGA,UAAS,EAAG,QAAO;AAAA,iBAAS;AAE9C,kBAAI,WAAW,KAAK,IAAI,CAAC;AACzB,uBAAS,SAAS,IAAI,OAAO,EAAE,IAAI,CAAC;AACpC,kBAAI,OAAO,GAAG,IAAI,GAAG;AACnB,uBAAO,QAAQ,WAAW,IAAI,MAAM;AAAA,cACtC,OAAO;AACL,sBAAM,KAAK,IAAI,QAAQ,IAAI,MAAM,CAAC;AAClC,sBAAM,OAAO,IAAI,IAAI,IAAI,OAAO,CAAC;AACjC,uBAAO;AAAA,cACT;AAAA,YACF;AAAA,UACF,WAAW,QAAQ,GAAGA,UAAS,EAAG,QAAO,KAAK,WAAW,QAAQ;AACjE,cAAI,KAAK,WAAW,GAAG;AACrB,gBAAI,QAAQ,WAAW,EAAG,QAAO,KAAK,IAAI,EAAE,IAAI,QAAQ,IAAI,CAAC;AAC7D,mBAAO,KAAK,IAAI,EAAE,IAAI,OAAO,EAAE,IAAI;AAAA,UACrC,WAAW,QAAQ,WAAW,EAAG,QAAO,KAAK,IAAI,QAAQ,IAAI,CAAC,EAAE,IAAI;AACpE,gBAAM;AAAA,QACR,OAAO;AAGL,cAAI,CAAC,QAAQ,SAAU,WAAU,QAAQ,WAAW;AACpD,cAAI,QAAQ,GAAG,IAAI,EAAG,QAAO;AAC7B,cAAI,QAAQ,GAAG,KAAK,KAAK,CAAC,CAAC;AAEzB,mBAAO;AACT,gBAAM;AAAA,QACR;AAMA,cAAM;AACN,eAAO,IAAI,IAAI,OAAO,GAAG;AAGvB,mBAAS,KAAK,IAAI,GAAG,KAAK,MAAM,IAAI,SAAS,IAAI,QAAQ,SAAS,CAAC,CAAC;AAGpE,cAAI,OAAO,KAAK,KAAK,KAAK,IAAI,MAAM,IAAI,KAAK,GAAG,GAC9C,QAAQ,QAAQ,KAAK,IAAI,QAAQ,GAAG,OAAO,EAAE,GAG7C,YAAY,WAAW,MAAM,GAC7B,YAAY,UAAU,IAAI,OAAO;AACnC,iBAAO,UAAU,WAAW,KAAK,UAAU,GAAG,GAAG,GAAG;AAClD,sBAAU;AACV,wBAAY,WAAW,QAAQ,KAAK,QAAQ;AAC5C,wBAAY,UAAU,IAAI,OAAO;AAAA,UACnC;AAGA,cAAI,UAAU,OAAO,EAAG,aAAY;AACpC,gBAAM,IAAI,IAAI,SAAS;AACvB,gBAAM,IAAI,IAAI,SAAS;AAAA,QACzB;AACA,eAAO;AAAA,MACT;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,SAAS,SAAS,OAAO,SAAS;AAC9C,YAAI,CAAC,OAAO,OAAO,EAAG,WAAU,UAAU,OAAO;AAEjD,YAAI,MAAM;AACR,cAAI,OAAO,KAAK,WAAW,KAAK,OAAO,IAAI,KAAK,OAAO,GAAG,KAAK,KAAK,KAAK,MAAM,QAAQ,KAAK,QAAQ,IAAI;AACxG,iBAAO,SAAS,KAAK,KAAK,UAAU,EAAE,GAAG,KAAK,QAAQ;AAAA,QACxD;AACA,eAAO,KAAK,IAAI,KAAK,IAAI,OAAO,EAAE,IAAI,OAAO,CAAC;AAAA,MAChD;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,MAAM,cAAc;AAOlC,oBAAc,MAAM,SAAS,MAAM;AACjC,eAAO,SAAS,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,QAAQ;AAAA,MACtD;AAOA,oBAAc,oBAAoB,SAAS,oBAAoB;AAC7D,eAAO,KAAK,OAAO,KAAK,MAAM,KAAK,IAAI,IAAI,KAAK,MAAM,KAAK,GAAG,IAAI;AAAA,MACpE;AAQA,oBAAc,MAAM,cAAc;AAOlC,oBAAc,qBAAqB,SAAS,qBAAqB;AAC/D,eAAO,KAAK,MAAM,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,IAAI,IAAI;AAAA,MACzD;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,MAAM,SAASG,KAAI,OAAO;AACtC,YAAI,CAAC,OAAO,KAAK,EAAG,SAAQ,UAAU,KAAK;AAC3C,eAAO,SAAS,KAAK,MAAM,MAAM,KAAK,KAAK,OAAO,MAAM,MAAM,KAAK,QAAQ;AAAA,MAC7E;AAQA,oBAAc,KAAK,SAASC,IAAG,OAAO;AACpC,YAAI,CAAC,OAAO,KAAK,EAAG,SAAQ,UAAU,KAAK;AAC3C,eAAO,SAAS,KAAK,MAAM,MAAM,KAAK,KAAK,OAAO,MAAM,MAAM,KAAK,QAAQ;AAAA,MAC7E;AAQA,oBAAc,MAAM,SAAS,IAAI,OAAO;AACtC,YAAI,CAAC,OAAO,KAAK,EAAG,SAAQ,UAAU,KAAK;AAC3C,eAAO,SAAS,KAAK,MAAM,MAAM,KAAK,KAAK,OAAO,MAAM,MAAM,KAAK,QAAQ;AAAA,MAC7E;AAQA,oBAAc,YAAY,SAAS,UAAU,SAAS;AACpD,YAAI,OAAO,OAAO,EAAG,WAAU,QAAQ,MAAM;AAC7C,aAAK,WAAW,QAAQ,EAAG,QAAO;AAAA,iBAAc,UAAU,GAAI,QAAO,SAAS,KAAK,OAAO,SAAS,KAAK,QAAQ,UAAU,KAAK,QAAQ,KAAK,SAAS,KAAK,QAAQ;AAAA,YAAO,QAAO,SAAS,GAAG,KAAK,OAAO,UAAU,IAAI,KAAK,QAAQ;AAAA,MACrO;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,aAAa,SAAS,WAAW,SAAS;AACtD,YAAI,OAAO,OAAO,EAAG,WAAU,QAAQ,MAAM;AAC7C,aAAK,WAAW,QAAQ,EAAG,QAAO;AAAA,iBAAc,UAAU,GAAI,QAAO,SAAS,KAAK,QAAQ,UAAU,KAAK,QAAQ,KAAK,SAAS,KAAK,QAAQ,SAAS,KAAK,QAAQ;AAAA,YAAO,QAAO,SAAS,KAAK,QAAQ,UAAU,IAAI,KAAK,QAAQ,IAAI,IAAI,IAAI,KAAK,QAAQ;AAAA,MAC7P;AAQA,oBAAc,MAAM,cAAc;AAQlC,oBAAc,qBAAqB,SAAS,mBAAmB,SAAS;AACtE,YAAI,OAAO,OAAO,EAAG,WAAU,QAAQ,MAAM;AAC7C,aAAK,WAAW,QAAQ,EAAG,QAAO;AAClC,YAAI,UAAU,GAAI,QAAO,SAAS,KAAK,QAAQ,UAAU,KAAK,QAAQ,KAAK,SAAS,KAAK,SAAS,SAAS,KAAK,QAAQ;AACxH,YAAI,YAAY,GAAI,QAAO,SAAS,KAAK,MAAM,GAAG,KAAK,QAAQ;AAC/D,eAAO,SAAS,KAAK,SAAS,UAAU,IAAI,GAAG,KAAK,QAAQ;AAAA,MAC9D;AAQA,oBAAc,OAAO,cAAc;AAQnC,oBAAc,QAAQ,cAAc;AAQpC,oBAAc,aAAa,SAAS,WAAW,SAAS;AACtD,YAAI;AACJ,YAAI,OAAO,OAAO,EAAG,WAAU,QAAQ,MAAM;AAC7C,aAAK,WAAW,QAAQ,EAAG,QAAO;AAClC,YAAI,YAAY,GAAI,QAAO,SAAS,KAAK,MAAM,KAAK,KAAK,KAAK,QAAQ;AACtE,YAAI,UAAU,IAAI;AAChB,cAAI,KAAK;AACT,iBAAO,SAAS,KAAK,OAAO,UAAU,KAAK,SAAS,GAAG,KAAK,QAAQ,UAAU,KAAK,QAAQ,GAAG,KAAK,QAAQ;AAAA,QAC7G;AACA,mBAAW;AACX,YAAI,KAAK;AACT,eAAO,SAAS,KAAK,QAAQ,UAAU,KAAK,QAAQ,GAAG,KAAK,OAAO,UAAU,KAAK,SAAS,GAAG,KAAK,QAAQ;AAAA,MAC7G;AAQA,oBAAc,OAAO,cAAc;AAQnC,oBAAc,cAAc,SAAS,YAAY,SAAS;AACxD,YAAI;AACJ,YAAI,OAAO,OAAO,EAAG,WAAU,QAAQ,MAAM;AAC7C,aAAK,WAAW,QAAQ,EAAG,QAAO;AAClC,YAAI,YAAY,GAAI,QAAO,SAAS,KAAK,MAAM,KAAK,KAAK,KAAK,QAAQ;AACtE,YAAI,UAAU,IAAI;AAChB,cAAI,KAAK;AACT,iBAAO,SAAS,KAAK,QAAQ,IAAI,KAAK,QAAQ,SAAS,KAAK,OAAO,IAAI,KAAK,SAAS,SAAS,KAAK,QAAQ;AAAA,QAC7G;AACA,mBAAW;AACX,YAAI,KAAK;AACT,eAAO,SAAS,KAAK,OAAO,IAAI,KAAK,SAAS,SAAS,KAAK,QAAQ,IAAI,KAAK,QAAQ,SAAS,KAAK,QAAQ;AAAA,MAC7G;AAQA,oBAAc,OAAO,cAAc;AAOnC,oBAAc,WAAW,SAAS,WAAW;AAC3C,YAAI,CAAC,KAAK,SAAU,QAAO;AAC3B,eAAO,SAAS,KAAK,KAAK,KAAK,MAAM,KAAK;AAAA,MAC5C;AAOA,oBAAc,aAAa,SAAS,aAAa;AAC/C,YAAI,KAAK,SAAU,QAAO;AAC1B,eAAO,SAAS,KAAK,KAAK,KAAK,MAAM,IAAI;AAAA,MAC3C;AAQA,oBAAc,UAAU,SAASC,SAAQ,IAAI;AAC3C,eAAO,KAAK,KAAK,UAAU,IAAI,KAAK,UAAU;AAAA,MAChD;AAOA,oBAAc,YAAY,SAAS,YAAY;AAC7C,YAAI,KAAK,KAAK,MACZ,KAAK,KAAK;AACZ,eAAO,CAAC,KAAK,KAAM,OAAO,IAAI,KAAM,OAAO,KAAK,KAAM,OAAO,IAAI,KAAK,KAAM,OAAO,IAAI,KAAM,OAAO,KAAK,KAAM,OAAO,EAAE;AAAA,MAC1H;AAOA,oBAAc,YAAY,SAAS,YAAY;AAC7C,YAAI,KAAK,KAAK,MACZ,KAAK,KAAK;AACZ,eAAO,CAAC,OAAO,IAAI,OAAO,KAAK,KAAM,OAAO,IAAI,KAAM,KAAK,KAAM,OAAO,IAAI,OAAO,KAAK,KAAM,OAAO,IAAI,KAAM,KAAK,GAAI;AAAA,MAC1H;AASA,MAAAN,MAAK,YAAY,SAASO,WAAU,OAAO,UAAU,IAAI;AACvD,eAAO,KAAKP,MAAK,YAAY,OAAO,QAAQ,IAAIA,MAAK,YAAY,OAAO,QAAQ;AAAA,MAClF;AAQA,MAAAA,MAAK,cAAc,SAAS,YAAY,OAAO,UAAU;AACvD,eAAO,IAAIA,MAAK,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,IAAI,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,IAAI,QAAQ;AAAA,MAClJ;AAQA,MAAAA,MAAK,cAAc,SAAS,YAAY,OAAO,UAAU;AACvD,eAAO,IAAIA,MAAK,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,GAAG,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,IAAI,MAAM,CAAC,GAAG,QAAQ;AAAA,MAClJ;AACA,UAAI,WAAWA;AACf,MAAAF,SAAQ,UAAU;AAClB,aAAO,aAAaA,WAAUA,SAAQ,UAAUA;AAAA,IAClD,EAAE,CAAC,CAAC;AACJ,QAAI,OAAO,WAAW,cAAc,OAAO,IAAK,QAAO,CAAC,GAAG,WAAY;AACrE,aAAO;AAAA,IACT,CAAC;AAAA,aAAW,OAAOC,YAAW,YAAY,OAAOD,aAAY,SAAU,CAAAC,QAAO,UAAU;AAAA;AAAA;;;ACzzCxF,IAAAS,eAAA;AAAA,uDAAAC,UAAA;AAAA;AAmBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,kCAAkCA,SAAQ,kCAAkCA,SAAQ,WAAWA,SAAQ,WAAWA,SAAQ,OAAOA,SAAQ,mBAAmBA,SAAQ,iBAAiBA,SAAQ,OAAO;AAC5M,QAAM,YAAY;AAClB,QAAM,WAAW;AACjB,QAAM,aAAa;AACnB,QAAM,SAAS;AACf,QAAM,OAAO;AACb,IAAAA,SAAQ,OAAO;AACf,aAAS,eAAe,KAAK;AAC3B,aAAO,WAAW,OAAO,OAAO,IAAI,OAAO,MAAM;AAAA,IACnD;AACA,IAAAA,SAAQ,iBAAiB;AACzB,QAAI;AACJ,KAAC,SAAUC,mBAAkB;AAC3B,MAAAA,kBAAiB,qBAAqB,IAAI;AAC1C,MAAAA,kBAAiB,iBAAiB,IAAI;AACtC,MAAAA,kBAAiB,YAAY,IAAI;AAAA,IACnC,GAAG,mBAAmBD,SAAQ,qBAAqBA,SAAQ,mBAAmB,CAAC,EAAE;AACjF,QAAM,oBAAoB;AAAA,MACxB,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,MACP,UAAU;AAAA,MACV,QAAQ;AAAA,MACR,MAAM;AAAA,IACR;AACA,aAAS,SAAS,UAAUE,OAAM;AAChC,UAAI,aAAa,IAAI;AACnB,eAAOA;AAAA,MACT,OAAO;AACL,eAAO,WAAW,MAAMA;AAAA,MAC1B;AAAA,IACF;AACA,aAAS,0BAA0B,KAAK;AACtC,aAAO,eAAe,SAAS,WAAW,eAAe,SAAS,QAAQ,eAAe,SAAS;AAAA,IACpG;AACA,aAAS,gBAAgB,KAAK;AAC5B,aAAO,eAAe,SAAS,aAAa,eAAe,SAAS;AAAA,IACtE;AACA,aAAS,+BAA+B,KAAK,YAAY;AACvD,YAAM,UAAU,SAAS,YAAY,IAAI,IAAI;AAC7C,UAAI,0BAA0B,GAAG,GAAG;AAClC,eAAO,CAAC,CAAC,SAAS,GAAG,CAAC;AAAA,MACxB,OAAO;AACL,YAAI,gBAAgB,GAAG,KAAK,OAAO,IAAI,WAAW,aAAa;AAC7D,iBAAO,OAAO,KAAK,IAAI,MAAM,EAAE,IAAI,CAAAA,UAAQ;AACzC,mBAAO,+BAA+B,IAAI,OAAOA,KAAI,GAAG,OAAO;AAAA,UACjE,CAAC,EAAE,OAAO,CAAC,aAAa,iBAAiB,YAAY,OAAO,YAAY,GAAG,CAAC,CAAC;AAAA,QAC/E;AAAA,MACF;AACA,aAAO,CAAC;AAAA,IACV;AACA,aAAS,mBAAmB,KAAK,SAAS;AACxC,aAAO,SAAS,YAAY,QAAQ;AAClC,eAAO,IAAI,SAAS,IAAI,OAAO,MAAM,GAAG,OAAO;AAAA,MACjD;AAAA,IACF;AACA,aAAS,iBAAiB,KAAK;AAC7B,aAAO,SAAS,UAAU,KAAK;AAC7B,YAAI,MAAM,QAAQ,GAAG,GAAG;AACtB,gBAAM,IAAI,MAAM,qDAAqD,IAAI,IAAI,+BAA+B;AAAA,QAC9G;AACA,cAAM,UAAU,IAAI,WAAW,GAAG;AAClC,eAAO,IAAI,OAAO,OAAO,EAAE,OAAO;AAAA,MACpC;AAAA,IACF;AACA,aAAS,iBAAiB,SAAS;AACjC,cAAQ,WAAW,CAAC,GAAG,OAAO,CAAC,KAAK,SAAS;AAC3C,mBAAW,CAAC,KAAK,KAAK,KAAK,OAAO,QAAQ,IAAI,GAAG;AAC/C,kBAAQ,KAAK;AAAA,YACX,KAAK;AACH,kBAAI,qBAAqB,KAAK,KAAK,oBAAoB;AACvD;AAAA,YACF;AACE,kBAAI,GAAG,IAAI;AAAA,UACf;AAAA,QACF;AACA,eAAO;AAAA,MACT,GAAG;AAAA,QACD,YAAY;AAAA,QACZ,mBAAmB,iBAAiB;AAAA,QACpC,sBAAsB,CAAC;AAAA,MACzB,CAAC;AAAA,IACH;AACA,aAAS,uBAAuB,QAAQ,aAAa,SAAS,iBAAiB;AAG7E,YAAM,cAAc,OAAO;AAC3B,YAAM,eAAe,OAAO;AAC5B,aAAO;AAAA,QACL,MAAM,MAAM,cAAc,MAAM,OAAO;AAAA,QACvC,eAAe,CAAC,CAAC,OAAO;AAAA,QACxB,gBAAgB,CAAC,CAAC,OAAO;AAAA,QACzB,kBAAkB,iBAAiB,WAAW;AAAA,QAC9C,oBAAoB,mBAAmB,aAAa,OAAO;AAAA,QAC3D,mBAAmB,iBAAiB,YAAY;AAAA,QAChD,qBAAqB,mBAAmB,cAAc,OAAO;AAAA;AAAA,QAE7D,cAAc,UAAU,OAAO,IAAI;AAAA,QACnC,aAAa,wBAAwB,aAAa,eAAe;AAAA,QACjE,cAAc,wBAAwB,cAAc,eAAe;AAAA,QACnE,SAAS,iBAAiB,OAAO,aAAa;AAAA,MAChD;AAAA,IACF;AACA,aAAS,wBAAwB,SAASA,OAAM,SAAS,iBAAiB;AACxE,YAAM,MAAM,CAAC;AACb,iBAAW,UAAU,QAAQ,cAAc;AACzC,YAAI,OAAO,IAAI,IAAI,uBAAuB,QAAQA,OAAM,SAAS,eAAe;AAAA,MAClF;AACA,aAAO;AAAA,IACT;AACA,aAAS,wBAAwB,SAAS,iBAAiB;AACzD,YAAM,oBAAoB,QAAQ,aAAa,QAAQ;AACvD,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,kBAAkB,MAAM,SAAS,mBAAmB,iBAAiB;AAAA,QAC3E,sBAAsB;AAAA,MACxB;AAAA,IACF;AACA,aAAS,qBAAqB,UAAU,iBAAiB;AACvD,YAAM,iBAAiB,SAAS,aAAa,QAAQ;AACrD,aAAO;AAAA,QACL,QAAQ;AAAA,QACR,MAAM,eAAe,MAAM,SAAS,gBAAgB,iBAAiB;AAAA,QACrE,sBAAsB;AAAA,MACxB;AAAA,IACF;AAQA,aAAS,iBAAiB,KAAKA,OAAM,SAAS,iBAAiB;AAC7D,UAAI,eAAe,SAAS,SAAS;AACnC,eAAO,wBAAwB,KAAKA,OAAM,SAAS,eAAe;AAAA,MACpE,WAAW,eAAe,SAAS,MAAM;AACvC,eAAO,wBAAwB,KAAK,eAAe;AAAA,MACrD,WAAW,eAAe,SAAS,MAAM;AACvC,eAAO,qBAAqB,KAAK,eAAe;AAAA,MAClD,OAAO;AACL,cAAM,IAAI,MAAM,6CAA6C;AAAA,MAC/D;AAAA,IACF;AACA,aAAS,wBAAwB,MAAM,SAAS;AAC9C,YAAM,MAAM,CAAC;AACb,WAAK,WAAW;AAChB,YAAM,iBAAiB,KAAK,aAAa,QAAQ,EAAE;AACnD,YAAM,aAAa,eAAe,IAAI,WAAS,OAAO,KAAK,WAAW,oBAAoB,OAAO,KAAK,EAAE,OAAO,CAAC,CAAC;AACjH,iBAAW,CAACA,OAAM,GAAG,KAAK,+BAA+B,MAAM,EAAE,GAAG;AAClE,YAAIA,KAAI,IAAI,iBAAiB,KAAKA,OAAM,SAAS,UAAU;AAAA,MAC7D;AACA,aAAO;AAAA,IACT;AACA,aAAS,yCAAyC,sBAAsB,SAAS;AAC/E,gBAAU,WAAW,CAAC;AACtB,YAAM,OAAO,SAAS,KAAK,eAAe,oBAAoB;AAC9D,WAAK,WAAW;AAChB,aAAO,wBAAwB,MAAM,OAAO;AAAA,IAC9C;AA2BA,aAAS,KAAK,UAAU,SAAS;AAC/B,cAAQ,GAAG,OAAO,uBAAuB,UAAU,OAAO,EAAE,KAAK,gBAAc;AAC7E,eAAO,wBAAwB,YAAY,OAAO;AAAA,MACpD,CAAC;AAAA,IACH;AACA,IAAAF,SAAQ,OAAO;AACf,aAAS,SAAS,UAAU,SAAS;AACnC,YAAM,cAAc,GAAG,OAAO,2BAA2B,UAAU,OAAO;AAC1E,aAAO,wBAAwB,YAAY,OAAO;AAAA,IACpD;AACA,IAAAA,SAAQ,WAAW;AACnB,aAASG,UAAS,MAAM,SAAS;AAC/B,gBAAU,WAAW,CAAC;AACtB,YAAM,aAAa,SAAS,KAAK,SAAS,IAAI;AAC9C,iBAAW,WAAW;AACtB,aAAO,wBAAwB,YAAY,OAAO;AAAA,IACpD;AACA,IAAAH,SAAQ,WAAWG;AACnB,aAAS,gCAAgC,eAAe,SAAS;AAC/D,YAAM,uBAAuB,WAAW,kBAAkB,OAAO,aAAa;AAC9E,aAAO,yCAAyC,sBAAsB,OAAO;AAAA,IAC/E;AACA,IAAAH,SAAQ,kCAAkC;AAC1C,aAAS,gCAAgC,eAAe,SAAS;AAC/D,YAAM,uBAAuB,WAAW,kBAAkB,WAAW,aAAa;AAClF,aAAO,yCAAyC,sBAAsB,OAAO;AAAA,IAC/E;AACA,IAAAA,SAAQ,kCAAkC;AAC1C,KAAC,GAAG,OAAO,iBAAiB;AAAA;AAAA;;;AC5O5B;AAAA,qDAAAI,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,QAAQA,SAAQ,+BAA+BA,SAAQ,sBAAsBA,SAAQ,wBAAwBA,SAAQ,yBAAyBA,SAAQ,yBAAyBA,SAAQ,6BAA6BA,SAAQ,0BAA0BA,SAAQ,sBAAsBA,SAAQ,0BAA0BA,SAAQ,gBAAgB;AACtV,QAAM,QAAQ,UAAQ,KAAK;AAC3B,QAAM,uBAAuB;AAC7B,QAAM,cAAc;AACpB,QAAM,uBAAuB;AAC7B,QAAM,UAAU;AAChB,QAAM,gBAAgB;AACtB,aAAS,oBAAoB,KAAK;AAChC,aAAO;AAAA,QACL,YAAY,IAAI;AAAA,QAChB,MAAM,IAAI;AAAA,MACZ;AAAA,IACF;AACA,aAAS,uBAAuB,KAAK;AACnC,aAAO;AAAA,QACL,eAAe,IAAI;AAAA,QACnB,MAAM,IAAI;AAAA,MACZ;AAAA,IACF;AACA,aAAS,mBAAmB,KAAK;AAC/B,aAAO;AAAA,QACL,WAAW,IAAI;AAAA,MACjB;AAAA,IACF;AACA,aAAS,mBAAmB,KAAK;AAC/B,aAAO;AAAA,QACL,WAAW,IAAI;AAAA,QACf,MAAM,IAAI;AAAA,MACZ;AAAA,IACF;AAOA,QAAM,yBAAyB;AAC/B,QAAM,gBAAN,MAAoB;AAAA,MAClB,cAAc;AACZ,aAAK,SAAS,CAAC;AACf,aAAK,eAAe;AACpB,aAAK,oBAAoB,oBAAI,KAAK;AAAA,MACpC;AAAA,MACA,SAAS,UAAU,aAAa,OAAO;AACrC,cAAM,YAAY,oBAAI,KAAK;AAC3B,aAAK,OAAO,KAAK;AAAA,UACf;AAAA,UACA;AAAA,UACA;AAAA,UACA,eAAe,UAAU,QAAQ,UAAU,SAAS,SAAS,MAAM,UAAU,YAAY,QAAQ;AAAA,UACjG,kBAAkB,UAAU,QAAQ,UAAU,SAAS,SAAS,MAAM,UAAU,eAAe,QAAQ;AAAA,QACzG,CAAC;AAED,YAAI,KAAK,OAAO,UAAU,yBAAyB,GAAG;AACpD,eAAK,SAAS,KAAK,OAAO,MAAM,sBAAsB;AAAA,QACxD;AACA,aAAK,gBAAgB;AAAA,MACvB;AAAA,MACA,kBAAkB;AAChB,eAAO;AAAA,UACL,oBAAoB,qBAAqB,KAAK,iBAAiB;AAAA,UAC/D,mBAAmB,KAAK;AAAA,UACxB,QAAQ,KAAK,OAAO,IAAI,WAAS;AAC/B,mBAAO;AAAA,cACL,aAAa,MAAM;AAAA,cACnB,UAAU,MAAM;AAAA,cAChB,WAAW,qBAAqB,MAAM,SAAS;AAAA,cAC/C,aAAa,MAAM,eAAe,oBAAoB,MAAM,YAAY,IAAI;AAAA,cAC5E,gBAAgB,MAAM,kBAAkB,uBAAuB,MAAM,eAAe,IAAI;AAAA,YAC1F;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AACA,IAAAA,SAAQ,gBAAgB;AACxB,QAAM,0BAAN,MAA8B;AAAA,MAC5B,cAAc;AACZ,aAAK,kBAAkB,oBAAI,IAAI;AAC/B,aAAK,qBAAqB,oBAAI,IAAI;AAClC,aAAK,iBAAiB,oBAAI,IAAI;AAAA,MAChC;AAAA,MACA,SAAS,OAAO;AACd,YAAI,IAAI,IAAI;AACZ,gBAAQ,MAAM,MAAM;AAAA,UAClB,KAAK,WACH;AACE,kBAAM,gBAAgB,KAAK,KAAK,gBAAgB,IAAI,MAAM,EAAE,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,cAC9F,KAAK;AAAA,cACL,OAAO;AAAA,YACT;AACA,yBAAa,SAAS;AACtB,iBAAK,gBAAgB,IAAI,MAAM,IAAI,YAAY;AAC/C;AAAA,UACF;AAAA,UACF,KAAK,cACH;AACE,kBAAM,gBAAgB,KAAK,KAAK,mBAAmB,IAAI,MAAM,EAAE,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,cACjG,KAAK;AAAA,cACL,OAAO;AAAA,YACT;AACA,yBAAa,SAAS;AACtB,iBAAK,mBAAmB,IAAI,MAAM,IAAI,YAAY;AAClD;AAAA,UACF;AAAA,UACF,KAAK,UACH;AACE,kBAAM,gBAAgB,KAAK,KAAK,eAAe,IAAI,MAAM,EAAE,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,cAC7F,KAAK;AAAA,cACL,OAAO;AAAA,YACT;AACA,yBAAa,SAAS;AACtB,iBAAK,eAAe,IAAI,MAAM,IAAI,YAAY;AAC9C;AAAA,UACF;AAAA,QACJ;AAAA,MACF;AAAA,MACA,WAAW,OAAO;AAChB,gBAAQ,MAAM,MAAM;AAAA,UAClB,KAAK,WACH;AACE,kBAAM,eAAe,KAAK,gBAAgB,IAAI,MAAM,EAAE;AACtD,gBAAI,iBAAiB,QAAW;AAC9B,2BAAa,SAAS;AACtB,kBAAI,aAAa,UAAU,GAAG;AAC5B,qBAAK,gBAAgB,OAAO,MAAM,EAAE;AAAA,cACtC,OAAO;AACL,qBAAK,gBAAgB,IAAI,MAAM,IAAI,YAAY;AAAA,cACjD;AAAA,YACF;AACA;AAAA,UACF;AAAA,UACF,KAAK,cACH;AACE,kBAAM,eAAe,KAAK,mBAAmB,IAAI,MAAM,EAAE;AACzD,gBAAI,iBAAiB,QAAW;AAC9B,2BAAa,SAAS;AACtB,kBAAI,aAAa,UAAU,GAAG;AAC5B,qBAAK,mBAAmB,OAAO,MAAM,EAAE;AAAA,cACzC,OAAO;AACL,qBAAK,mBAAmB,IAAI,MAAM,IAAI,YAAY;AAAA,cACpD;AAAA,YACF;AACA;AAAA,UACF;AAAA,UACF,KAAK,UACH;AACE,kBAAM,eAAe,KAAK,eAAe,IAAI,MAAM,EAAE;AACrD,gBAAI,iBAAiB,QAAW;AAC9B,2BAAa,SAAS;AACtB,kBAAI,aAAa,UAAU,GAAG;AAC5B,qBAAK,eAAe,OAAO,MAAM,EAAE;AAAA,cACrC,OAAO;AACL,qBAAK,eAAe,IAAI,MAAM,IAAI,YAAY;AAAA,cAChD;AAAA,YACF;AACA;AAAA,UACF;AAAA,QACJ;AAAA,MACF;AAAA,MACA,gBAAgB;AACd,cAAMC,YAAW,CAAC;AAClB,mBAAW;AAAA,UACT;AAAA,QACF,KAAK,KAAK,gBAAgB,OAAO,GAAG;AAClC,UAAAA,UAAS,KAAK,GAAG;AAAA,QACnB;AACA,cAAMC,eAAc,CAAC;AACrB,mBAAW;AAAA,UACT;AAAA,QACF,KAAK,KAAK,mBAAmB,OAAO,GAAG;AACrC,UAAAA,aAAY,KAAK,GAAG;AAAA,QACtB;AACA,cAAMC,WAAU,CAAC;AACjB,mBAAW;AAAA,UACT;AAAA,QACF,KAAK,KAAK,eAAe,OAAO,GAAG;AACjC,UAAAA,SAAQ,KAAK,GAAG;AAAA,QAClB;AACA,eAAO;AAAA,UACL,UAAAF;AAAA,UACA,aAAAC;AAAA,UACA,SAAAC;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,IAAAH,SAAQ,0BAA0B;AAClC,QAAM,sBAAN,MAA0B;AAAA,MACxB,cAAc;AACZ,aAAK,eAAe;AACpB,aAAK,iBAAiB;AACtB,aAAK,cAAc;AACnB,aAAK,2BAA2B;AAAA,MAClC;AAAA,MACA,iBAAiB;AACf,aAAK,gBAAgB;AACrB,aAAK,2BAA2B,oBAAI,KAAK;AAAA,MAC3C;AAAA,MACA,mBAAmB;AACjB,aAAK,kBAAkB;AAAA,MACzB;AAAA,MACA,gBAAgB;AACd,aAAK,eAAe;AAAA,MACtB;AAAA,IACF;AACA,IAAAA,SAAQ,sBAAsB;AAC9B,QAAI,SAAS;AACb,aAAS,YAAY;AACnB,aAAO;AAAA,IACT;AACA,QAAM,WAAW,CAAC;AAClB,QAAM,cAAc,CAAC;AACrB,QAAM,UAAU,CAAC;AACjB,QAAM,UAAU,CAAC;AACjB,aAAS,wBAAwBI,OAAM,SAAS,iBAAiB;AAC/D,YAAM,KAAK,UAAU;AACrB,YAAM,MAAM;AAAA,QACV;AAAA,QACA,MAAAA;AAAA,QACA,MAAM;AAAA,MACR;AACA,UAAI,iBAAiB;AACnB,iBAAS,EAAE,IAAI;AAAA,UACb;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,IAAAJ,SAAQ,0BAA0B;AAClC,aAAS,2BAA2BI,OAAM,SAAS,iBAAiB;AAClE,YAAM,KAAK,UAAU;AACrB,YAAM,MAAM;AAAA,QACV;AAAA,QACA,MAAAA;AAAA,QACA,MAAM;AAAA,MACR;AACA,UAAI,iBAAiB;AACnB,oBAAY,EAAE,IAAI;AAAA,UAChB;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,IAAAJ,SAAQ,6BAA6B;AACrC,aAAS,uBAAuB,SAAS,iBAAiB;AACxD,YAAM,KAAK,UAAU;AACrB,YAAM,MAAM;AAAA,QACV;AAAA,QACA,MAAM;AAAA,MACR;AACA,UAAI,iBAAiB;AACnB,gBAAQ,EAAE,IAAI;AAAA,UACZ;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,IAAAA,SAAQ,yBAAyB;AACjC,aAAS,uBAAuBI,OAAM,SAAS,iBAAiB;AAC9D,YAAM,KAAK,UAAU;AACrB,YAAM,MAAM;AAAA,QACV;AAAA,QACA,MAAAA;AAAA,QACA,MAAM;AAAA,MACR;AACA,UAAI,iBAAiB;AACnB,gBAAQ,EAAE,IAAI;AAAA,UACZ;AAAA,UACA;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,IAAAJ,SAAQ,yBAAyB;AACjC,aAAS,sBAAsB,KAAK;AAClC,cAAQ,IAAI,MAAM;AAAA,QAChB,KAAK;AACH,iBAAO,SAAS,IAAI,EAAE;AACtB;AAAA,QACF,KAAK;AACH,iBAAO,YAAY,IAAI,EAAE;AACzB;AAAA,QACF,KAAK;AACH,iBAAO,QAAQ,IAAI,EAAE;AACrB;AAAA,QACF,KAAK;AACH,iBAAO,QAAQ,IAAI,EAAE;AACrB;AAAA,MACJ;AAAA,IACF;AACA,IAAAA,SAAQ,wBAAwB;AAMhC,aAAS,iBAAiB,gBAAgB;AACxC,YAAM,cAAc,OAAO,SAAS,gBAAgB,EAAE;AACtD,aAAO,CAAC,cAAc,MAAM,GAAG,cAAc,GAAG;AAAA,IAClD;AAOA,aAAS,eAAe,cAAc;AACpC,UAAI,iBAAiB,IAAI;AACvB,eAAO,CAAC;AAAA,MACV;AACA,YAAM,YAAY,aAAa,MAAM,GAAG,EAAE,IAAI,aAAW,iBAAiB,OAAO,CAAC;AAClF,YAAM,SAAS,CAAC;AAChB,aAAO,OAAO,OAAO,GAAG,SAAS;AAAA,IACnC;AAOA,aAAS,wBAAwB,WAAW;AAC1C,WAAK,GAAG,MAAM,QAAQ,SAAS,GAAG;AAChC,eAAO,OAAO,KAAK,WAAW,KAAK,UAAU,MAAM,GAAG,EAAE,IAAI,aAAW,OAAO,SAAS,OAAO,CAAC,CAAC,CAAC;AAAA,MACnG,YAAY,GAAG,MAAM,QAAQ,SAAS,GAAG;AACvC,YAAI;AACJ,YAAI;AACJ,cAAM,mBAAmB,UAAU,QAAQ,IAAI;AAC/C,YAAI,qBAAqB,IAAI;AAC3B,wBAAc;AACd,yBAAe;AAAA,QACjB,OAAO;AACL,wBAAc,UAAU,UAAU,GAAG,gBAAgB;AACrD,yBAAe,UAAU,UAAU,mBAAmB,CAAC;AAAA,QACzD;AACA,cAAM,aAAa,OAAO,KAAK,eAAe,WAAW,CAAC;AAC1D,cAAM,cAAc,OAAO,KAAK,eAAe,YAAY,CAAC;AAC5D,cAAM,eAAe,OAAO,MAAM,KAAK,WAAW,SAAS,YAAY,QAAQ,CAAC;AAChF,eAAO,OAAO,OAAO,CAAC,YAAY,cAAc,WAAW,CAAC;AAAA,MAC9D,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF;AACA,aAAS,2BAA2B,OAAO;AACzC,cAAQ,OAAO;AAAA,QACb,KAAK,qBAAqB,kBAAkB;AAC1C,iBAAO;AAAA,YACL,OAAO;AAAA,UACT;AAAA,QACF,KAAK,qBAAqB,kBAAkB;AAC1C,iBAAO;AAAA,YACL,OAAO;AAAA,UACT;AAAA,QACF,KAAK,qBAAqB,kBAAkB;AAC1C,iBAAO;AAAA,YACL,OAAO;AAAA,UACT;AAAA,QACF,KAAK,qBAAqB,kBAAkB;AAC1C,iBAAO;AAAA,YACL,OAAO;AAAA,UACT;AAAA,QACF,KAAK,qBAAqB,kBAAkB;AAC1C,iBAAO;AAAA,YACL,OAAO;AAAA,UACT;AAAA,QACF;AACE,iBAAO;AAAA,YACL,OAAO;AAAA,UACT;AAAA,MACJ;AAAA,IACF;AACA,aAAS,qBAAqB,MAAM;AAClC,UAAI,CAAC,MAAM;AACT,eAAO;AAAA,MACT;AACA,YAAM,mBAAmB,KAAK,QAAQ;AACtC,aAAO;AAAA,QACL,SAAS,mBAAmB,MAAO;AAAA,QACnC,OAAO,mBAAmB,MAAO;AAAA,MACnC;AAAA,IACF;AACA,aAAS,kBAAkB,cAAc;AACvC,YAAM,eAAe,aAAa,QAAQ;AAC1C,aAAO;AAAA,QACL,KAAK,oBAAoB,aAAa,GAAG;AAAA,QACzC,MAAM;AAAA,UACJ,QAAQ,aAAa;AAAA,UACrB,OAAO,2BAA2B,aAAa,KAAK;AAAA,UACpD,eAAe,aAAa,YAAY;AAAA,UACxC,iBAAiB,aAAa,YAAY;AAAA,UAC1C,cAAc,aAAa,YAAY;AAAA,UACvC,6BAA6B,qBAAqB,aAAa,YAAY,wBAAwB;AAAA,UACnG,OAAO,aAAa,MAAM,gBAAgB;AAAA,QAC5C;AAAA,QACA,aAAa,aAAa,SAAS,SAAS,IAAI,SAAO,oBAAoB,GAAG,CAAC;AAAA,QAC/E,gBAAgB,aAAa,SAAS,YAAY,IAAI,SAAO,uBAAuB,GAAG,CAAC;AAAA,MAC1F;AAAA,IACF;AACA,aAAS,WAAW,MAAM,UAAU;AAClC,YAAM,YAAY,OAAO,SAAS,KAAK,QAAQ,UAAU;AACzD,YAAM,eAAe,SAAS,SAAS;AACvC,UAAI,iBAAiB,QAAW;AAC9B,iBAAS;AAAA,UACP,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,kCAAkC;AAAA,QAC7C,CAAC;AACD;AAAA,MACF;AACA,eAAS,MAAM;AAAA,QACb,SAAS,kBAAkB,YAAY;AAAA,MACzC,CAAC;AAAA,IACH;AACA,aAAS,eAAe,MAAM,UAAU;AACtC,YAAM,aAAa,OAAO,SAAS,KAAK,QAAQ,WAAW;AAC3D,YAAM,aAAa,CAAC;AACpB,UAAI,IAAI,OAAO,SAAS,KAAK,QAAQ,gBAAgB;AACrD,aAAO,IAAI,SAAS,QAAQ,KAAK;AAC/B,cAAM,eAAe,SAAS,CAAC;AAC/B,YAAI,iBAAiB,QAAW;AAC9B;AAAA,QACF;AACA,mBAAW,KAAK,kBAAkB,YAAY,CAAC;AAC/C,YAAI,WAAW,UAAU,YAAY;AACnC;AAAA,QACF;AAAA,MACF;AACA,eAAS,MAAM;AAAA,QACb,SAAS;AAAA,QACT,KAAK,KAAK,QAAQ;AAAA,MACpB,CAAC;AAAA,IACH;AACA,aAAS,iBAAiB,aAAa;AACrC,YAAM,eAAe,YAAY,QAAQ;AACzC,aAAO;AAAA,QACL,KAAK,mBAAmB,YAAY,GAAG;AAAA,QACvC,MAAM;AAAA,UACJ,eAAe,aAAa,YAAY;AAAA,UACxC,iBAAiB,aAAa,YAAY;AAAA,UAC1C,cAAc,aAAa,YAAY;AAAA,UACvC,6BAA6B,qBAAqB,aAAa,YAAY,wBAAwB;AAAA,UACnG,OAAO,aAAa,MAAM,gBAAgB;AAAA,QAC5C;AAAA,QACA,eAAe,aAAa,iBAAiB,QAAQ,IAAI,SAAO,mBAAmB,GAAG,CAAC;AAAA,MACzF;AAAA,IACF;AACA,aAAS,UAAU,MAAM,UAAU;AACjC,YAAM,WAAW,OAAO,SAAS,KAAK,QAAQ,SAAS;AACvD,YAAM,cAAc,QAAQ,QAAQ;AACpC,UAAI,gBAAgB,QAAW;AAC7B,iBAAS;AAAA,UACP,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,iCAAiC;AAAA,QAC5C,CAAC;AACD;AAAA,MACF;AACA,eAAS,MAAM;AAAA,QACb,QAAQ,iBAAiB,WAAW;AAAA,MACtC,CAAC;AAAA,IACH;AACA,aAAS,WAAW,MAAM,UAAU;AAClC,YAAM,aAAa,OAAO,SAAS,KAAK,QAAQ,WAAW;AAC3D,YAAM,aAAa,CAAC;AACpB,UAAI,IAAI,OAAO,SAAS,KAAK,QAAQ,eAAe;AACpD,aAAO,IAAI,QAAQ,QAAQ,KAAK;AAC9B,cAAM,cAAc,QAAQ,CAAC;AAC7B,YAAI,gBAAgB,QAAW;AAC7B;AAAA,QACF;AACA,mBAAW,KAAK,iBAAiB,WAAW,CAAC;AAC7C,YAAI,WAAW,UAAU,YAAY;AACnC;AAAA,QACF;AAAA,MACF;AACA,eAAS,MAAM;AAAA,QACb,QAAQ;AAAA,QACR,KAAK,KAAK,QAAQ;AAAA,MACpB,CAAC;AAAA,IACH;AACA,aAAS,cAAc,MAAM,UAAU;AACrC,YAAM,eAAe,OAAO,SAAS,KAAK,QAAQ,aAAa;AAC/D,YAAM,kBAAkB,YAAY,YAAY;AAChD,UAAI,oBAAoB,QAAW;AACjC,iBAAS;AAAA,UACP,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,qCAAqC;AAAA,QAChD,CAAC;AACD;AAAA,MACF;AACA,YAAM,eAAe,gBAAgB,QAAQ;AAC7C,YAAM,oBAAoB;AAAA,QACxB,KAAK,uBAAuB,gBAAgB,GAAG;AAAA,QAC/C,MAAM;AAAA,UACJ,QAAQ,aAAa;AAAA,UACrB,OAAO,2BAA2B,aAAa,KAAK;AAAA,UACpD,eAAe,aAAa,YAAY;AAAA,UACxC,iBAAiB,aAAa,YAAY;AAAA,UAC1C,cAAc,aAAa,YAAY;AAAA,UACvC,6BAA6B,qBAAqB,aAAa,YAAY,wBAAwB;AAAA,UACnG,OAAO,aAAa,MAAM,gBAAgB;AAAA,QAC5C;AAAA,QACA,YAAY,aAAa,SAAS,QAAQ,IAAI,SAAO,mBAAmB,GAAG,CAAC;AAAA,MAC9E;AACA,eAAS,MAAM;AAAA,QACb,YAAY;AAAA,MACd,CAAC;AAAA,IACH;AACA,aAAS,kCAAkC,mBAAmB;AAC5D,UAAI;AACJ,WAAK,GAAG,qBAAqB,wBAAwB,iBAAiB,GAAG;AACvE,eAAO;AAAA,UACL,SAAS;AAAA,UACT,eAAe;AAAA,YACb,aAAa,KAAK,wBAAwB,kBAAkB,IAAI,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,YACpG,MAAM,kBAAkB;AAAA,UAC1B;AAAA,QACF;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL,SAAS;AAAA,UACT,aAAa;AAAA,YACX,UAAU,kBAAkB;AAAA,UAC9B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,aAAS,UAAU,MAAM,UAAU;AACjC,UAAI,IAAI,IAAI,IAAI,IAAI;AACpB,YAAM,WAAW,OAAO,SAAS,KAAK,QAAQ,SAAS;AACvD,YAAM,cAAc,QAAQ,QAAQ;AACpC,UAAI,gBAAgB,QAAW;AAC7B,iBAAS;AAAA,UACP,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,iCAAiC;AAAA,QAC5C,CAAC;AACD;AAAA,MACF;AACA,YAAM,eAAe,YAAY,QAAQ;AACzC,YAAM,kBAAkB,aAAa,WAAW;AAAA,QAC9C,OAAO;AAAA,QACP,KAAK;AAAA,UACH,cAAc,aAAa,SAAS,0BAA0B,kBAAkB;AAAA,UAChF,gBAAgB,KAAK,aAAa,SAAS,6BAA6B,QAAQ,OAAO,SAAS,KAAK;AAAA,UACrG,aAAa,KAAK,aAAa,SAAS,0BAA0B,QAAQ,OAAO,SAAS,KAAK;AAAA,UAC/F,oBAAoB,KAAK,aAAa,SAAS,sBAAsB,QAAQ,OAAO,SAAS,KAAK;AAAA,UAClG,qBAAqB,KAAK,aAAa,SAAS,uBAAuB,QAAQ,OAAO,SAAS,KAAK;AAAA,QACtG;AAAA,MACF,IAAI;AACJ,YAAM,gBAAgB;AAAA,QACpB,KAAK,mBAAmB,YAAY,GAAG;AAAA,QACvC,OAAO,aAAa,eAAe,kCAAkC,aAAa,YAAY,IAAI;AAAA,QAClG,QAAQ,aAAa,gBAAgB,kCAAkC,aAAa,aAAa,IAAI;AAAA,QACrG,cAAc,KAAK,aAAa,gBAAgB,QAAQ,OAAO,SAAS,KAAK;AAAA,QAC7E,UAAU;AAAA,QACV,MAAM;AAAA,UACJ,kBAAkB,aAAa;AAAA,UAC/B,iBAAiB,aAAa;AAAA,UAC9B,mBAAmB,aAAa;AAAA,UAChC,gBAAgB,aAAa;AAAA,UAC7B,qCAAqC,qBAAqB,aAAa,+BAA+B;AAAA,UACtG,sCAAsC,qBAAqB,aAAa,gCAAgC;AAAA,UACxG,mBAAmB,aAAa;AAAA,UAChC,eAAe,aAAa;AAAA,UAC5B,iCAAiC,qBAAqB,aAAa,4BAA4B;AAAA,UAC/F,6BAA6B,qBAAqB,aAAa,wBAAwB;AAAA,UACvF,2BAA2B,aAAa,yBAAyB;AAAA,YAC/D,OAAO,aAAa;AAAA,UACtB,IAAI;AAAA,UACJ,4BAA4B,aAAa,0BAA0B;AAAA,YACjE,OAAO,aAAa;AAAA,UACtB,IAAI;AAAA,QACN;AAAA,MACF;AACA,eAAS,MAAM;AAAA,QACb,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AACA,aAAS,iBAAiB,MAAM,UAAU;AACxC,YAAM,WAAW,OAAO,SAAS,KAAK,QAAQ,SAAS;AACvD,YAAM,cAAc,QAAQ,QAAQ;AACpC,UAAI,gBAAgB,QAAW;AAC7B,iBAAS;AAAA,UACP,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,iCAAiC;AAAA,QAC5C,CAAC;AACD;AAAA,MACF;AACA,YAAM,UAAU,OAAO,SAAS,KAAK,QAAQ,eAAe;AAC5D,YAAM,aAAa,OAAO,SAAS,KAAK,QAAQ,WAAW;AAC3D,YAAM,eAAe,YAAY,QAAQ;AAIzC,YAAM,aAAa,aAAa,gBAAgB,QAAQ,KAAK,CAAC,MAAM,SAAS,KAAK,KAAK,KAAK,EAAE;AAC9F,YAAM,aAAa,CAAC;AACpB,UAAI,IAAI;AACR,aAAO,IAAI,WAAW,QAAQ,KAAK;AACjC,YAAI,WAAW,CAAC,EAAE,MAAM,SAAS;AAC/B,qBAAW,KAAK,mBAAmB,WAAW,CAAC,CAAC,CAAC;AACjD,cAAI,WAAW,UAAU,YAAY;AACnC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,eAAS,MAAM;AAAA,QACb,YAAY;AAAA,QACZ,KAAK,KAAK,WAAW;AAAA,MACvB,CAAC;AAAA,IACH;AACA,aAAS,sBAAsB;AAC7B,aAAO;AAAA,QACL;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,IAAAA,SAAQ,sBAAsB;AAC9B,QAAI,2BAA2B;AAC/B,aAAS,+BAA+B;AACtC,UAAI,0BAA0B;AAC5B,eAAO;AAAA,MACT;AAGA,YAAM,iBAAiB,eAA8B;AACrD,YAAM,cAAc,eAAe,kBAAkB;AAAA,QACnD,UAAU;AAAA,QACV,OAAO;AAAA,QACP,OAAO;AAAA,QACP,UAAU;AAAA,QACV,QAAQ;AAAA,QACR,aAAa,CAAC,GAAG,SAAS,cAAc;AAAA,MAC1C,CAAC;AACD,YAAM,sBAAsB,GAAG,cAAc,uBAAuB,WAAW;AAC/E,iCAA2B,mBAAmB,KAAK,SAAS,GAAG,SAAS;AACxE,aAAO;AAAA,IACT;AACA,IAAAA,SAAQ,+BAA+B;AACvC,aAAS,QAAQ;AACf,OAAC,GAAG,QAAQ,sBAAsB,8BAA8B,mBAAmB;AAAA,IACrF;AACA,IAAAA,SAAQ,QAAQ;AAAA;AAAA;;;AC1pBhB;AAAA,uDAAAK,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,aAAa;AACrB,QAAM,uBAAuB;AAC7B,QAAM,oBAAoB;AAC1B,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,eAAe;AACrB,QAAM,uBAAuB;AAC7B,QAAM,aAAa;AACnB,QAAM,cAAc;AAIpB,QAAM,wBAAwB,EAAE,KAAK;AACrC,QAAM,aAAN,MAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWf,YAAY,eAAe,mBAAmB,SAASC,cAAa,WAAW;AAC7E,YAAI;AACJ,aAAK,gBAAgB;AACrB,aAAK,oBAAoB;AACzB,aAAK,UAAU;AACf,aAAK,cAAcA;AACnB,aAAK,YAAY;AAKjB,aAAK,oBAAoB,qBAAqB,kBAAkB;AAIhE,aAAK,YAAY;AAKjB,aAAK,qBAAqB;AAM1B,aAAK,iBAAiB,oBAAI,IAAI;AAI9B,aAAK,WAAW;AAEhB,aAAK,kBAAkB;AACvB,aAAK,cAAc,IAAI,WAAW,oBAAoB;AACtD,aAAK,kBAAkB,IAAI,WAAW,wBAAwB;AAE9D,aAAK,gBAAgB,IAAI,WAAW,oBAAoB;AACxD,cAAM,iBAAiB;AAAA,UACrB,cAAc,QAAQ,mCAAmC;AAAA,UACzD,UAAU,QAAQ,+BAA+B;AAAA,QACnD;AACA,aAAK,iBAAiB,IAAI,kBAAkB,eAAe,MAAM;AAC/D,eAAK,mBAAmB;AAAA,QAC1B,GAAG,cAAc;AACjB,aAAK,eAAe,MAAM;AAC1B,aAAK,2BAA2B,GAAG,qBAAqB,2BAA2B,iBAAiB;AACpG,aAAK,iBAAiB,KAAK,QAAQ,wBAAwB,OAAO,QAAQ,OAAO,SAAS,KAAK;AAC/F,YAAI,QAAQ,sBAAsB,MAAM,GAAG;AACzC,eAAK,kBAAkB;AAAA,QACzB;AACA,aAAK,gBAAgB,IAAI,WAAW,cAAc;AAClD,aAAK,eAAe,GAAG,WAAW,4BAA4B,KAAK,yBAAyB,MAAM,KAAK,gBAAgB,GAAG,KAAK,eAAe;AAC9I,YAAI,KAAK,iBAAiB;AACxB,eAAK,cAAc,SAAS,WAAW,oBAAoB;AAAA,QAC7D;AACA,aAAK,MAAM,yCAAyC,KAAK,UAAU,SAAS,QAAW,CAAC,CAAC;AAAA,MAC3F;AAAA,MACA,kBAAkB;AAChB,eAAO;AAAA,UACL,OAAO,KAAK;AAAA,UACZ,OAAO,KAAK;AAAA,UACZ,aAAa,KAAK;AAAA,UAClB,UAAU,KAAK,gBAAgB,cAAc;AAAA,UAC7C,QAAQ,KAAK;AAAA,QACf;AAAA,MACF;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,YAAY,KAAK,OAAO,KAAK,0BAA0B,MAAM,IAAI;AAAA,MACzI;AAAA,MACA,SAAS,MAAM;AACb,gBAAQ,MAAM,YAAY,aAAa,OAAO,uBAAuB,MAAM,KAAK,YAAY,KAAK,OAAO,KAAK,0BAA0B,MAAM,IAAI;AAAA,MACnJ;AAAA,MACA,qBAAqB;AACnB,YAAI,KAAK,oBAAoB;AAC3B,eAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,iBAAiB,GAAG,qBAAqB,kBAAkB,UAAU;AAAA,QACtI,OAAO;AACL,eAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,iBAAiB,GAAG,qBAAqB,kBAAkB,IAAI;AAAA,QAChI;AAAA,MACF;AAAA;AAAA;AAAA;AAAA,MAIA,eAAe;AACb,aAAK,eAAe,QAAQ;AAAA,MAC9B;AAAA,MACA,cAAc;AACZ,aAAK,eAAe,KAAK;AACzB,aAAK,eAAe,MAAM;AAAA,MAC5B;AAAA,MACA,0BAA0B;AACxB,YAAI,UAAU,KAAK;AACnB,YAAI,QAAQ,wBAAwB,GAAG;AACrC,gBAAM,wBAAwB,KAAK,IAAI,KAAK,eAAe,qBAAqB;AAChF,oBAAU,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,GAAG;AAAA,YAClD,0BAA0B;AAAA,UAC5B,CAAC;AAAA,QACH;AACA,aAAK,UAAU,QAAQ,KAAK,mBAAmB,KAAK,aAAa,OAAO,EAAE,KAAK,eAAa;AAC1F,cAAI,KAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,UAAU,GAAG,qBAAqB,kBAAkB,KAAK,GAAG;AAC7H,iBAAK,YAAY;AACjB,gBAAI,KAAK,iBAAiB;AACxB,mBAAK,gBAAgB,SAAS,UAAU,eAAe,CAAC;AAAA,YAC1D;AACA,sBAAU,sBAAsB,kBAAgB;AAC9C,mBAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,KAAK,GAAG,qBAAqB,kBAAkB,IAAI;AAClH,kBAAI,gBAAgB,KAAK,gBAAgB,GAAG;AAC1C,qBAAK,iBAAiB;AACtB,wBAAQ,IAAI,YAAY,aAAa,OAAO,kBAAkB,GAAG,aAAa,aAAa,KAAK,aAAa,CAAC,OAAO,KAAK,uBAAuB,4EAA4E,KAAK,aAAa,KAAK;AAAA,cACtP;AAAA,YACF,CAAC;AAAA,UACH,OAAO;AAGL,sBAAU,SAAS;AAAA,UACrB;AAAA,QACF,GAAG,WAAS;AACV,eAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,UAAU,GAAG,qBAAqB,kBAAkB,mBAAmB,GAAG,KAAK,EAAE;AAAA,QAClJ,CAAC;AAAA,MACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,kBAAkB,WAAW,UAAU,cAAc;AACnD,YAAI,IAAI;AACR,YAAI,UAAU,QAAQ,KAAK,iBAAiB,MAAM,IAAI;AACpD,iBAAO;AAAA,QACT;AACA,aAAK,MAAM,qBAAqB,kBAAkB,KAAK,iBAAiB,IAAI,SAAS,qBAAqB,kBAAkB,QAAQ,CAAC;AACrI,YAAI,KAAK,iBAAiB;AACxB,eAAK,cAAc,SAAS,WAAW,kCAAkC,qBAAqB,kBAAkB,QAAQ,CAAC;AAAA,QAC3H;AACA,cAAM,gBAAgB,KAAK;AAC3B,aAAK,oBAAoB;AACzB,gBAAQ,UAAU;AAAA,UAChB,KAAK,qBAAqB,kBAAkB;AAC1C,iBAAK,YAAY;AACjB;AAAA,UACF,KAAK,qBAAqB,kBAAkB;AAC1C,iBAAK,aAAa;AAClB,iBAAK,wBAAwB;AAC7B,iBAAK,qBAAqB;AAC1B;AAAA,UACF,KAAK,qBAAqB,kBAAkB;AAC1C,gBAAI,KAAK,mBAAmB,KAAK,WAAW;AAC1C,mBAAK,gBAAgB,WAAW,KAAK,UAAU,eAAe,CAAC;AAAA,YACjE;AACA,aAAC,KAAK,KAAK,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,SAAS;AACvE,iBAAK,YAAY;AAIjB,gBAAI,CAAC,KAAK,eAAe,UAAU,GAAG;AACpC,sBAAQ,SAAS,MAAM;AACrB,qBAAK,mBAAmB;AAAA,cAC1B,CAAC;AAAA,YACH;AACA;AAAA,UACF,KAAK,qBAAqB,kBAAkB;AAC1C,gBAAI,KAAK,mBAAmB,KAAK,WAAW;AAC1C,mBAAK,gBAAgB,WAAW,KAAK,UAAU,eAAe,CAAC;AAAA,YACjE;AACA,aAAC,KAAK,KAAK,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,SAAS;AACvE,iBAAK,YAAY;AACjB;AAAA,UACF;AACE,kBAAM,IAAI,MAAM,4CAA4C,QAAQ,EAAE;AAAA,QAC1E;AACA,mBAAW,YAAY,KAAK,gBAAgB;AAC1C,mBAAS,MAAM,eAAe,UAAU,KAAK,eAAe,YAAY;AAAA,QAC1E;AACA,eAAO;AAAA,MACT;AAAA,MACA,MAAM;AACJ,aAAK,SAAS,cAAc,KAAK,WAAW,UAAU,KAAK,WAAW,EAAE;AACxE,aAAK,YAAY;AAAA,MACnB;AAAA,MACA,QAAQ;AACN,aAAK,SAAS,cAAc,KAAK,WAAW,UAAU,KAAK,WAAW,EAAE;AACxE,aAAK,YAAY;AACjB,YAAI,KAAK,aAAa,GAAG;AACvB,cAAI,KAAK,iBAAiB;AACxB,iBAAK,cAAc,SAAS,WAAW,eAAe;AAAA,UACxD;AACA,cAAI,KAAK,iBAAiB;AACxB,aAAC,GAAG,WAAW,uBAAuB,KAAK,WAAW;AAAA,UACxD;AACA,kBAAQ,SAAS,MAAM;AACrB,iBAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,YAAY,qBAAqB,kBAAkB,KAAK,GAAG,qBAAqB,kBAAkB,IAAI;AAAA,UACvK,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,gBAAgB;AACd,YAAI,KAAK,aAAa,GAAG;AACvB,eAAK,MAAM;AACX,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MACA,WAAW,UAAU,MAAM,QAAQ,UAAU;AAC3C,YAAI,CAAC,KAAK,WAAW;AACnB,gBAAM,IAAI,MAAM,0CAA0C;AAAA,QAC5D;AACA,YAAI;AACJ,YAAI,KAAK,iBAAiB;AACxB,eAAK,YAAY,eAAe;AAChC,eAAK,cAAc,eAAe;AAClC,yBAAe;AAAA,YACb,WAAW,YAAU;AACnB,kBAAI,OAAO,SAAS,YAAY,OAAO,IAAI;AACzC,qBAAK,YAAY,iBAAiB;AAAA,cACpC,OAAO;AACL,qBAAK,YAAY,cAAc;AAAA,cACjC;AAAA,YACF;AAAA,UACF;AAAA,QACF,OAAO;AACL,yBAAe,CAAC;AAAA,QAClB;AACA,eAAO,KAAK,UAAU,WAAW,UAAU,MAAM,QAAQ,UAAU,YAAY;AAAA,MACjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,kBAAkB;AAChB,gBAAQ,SAAS,MAAM;AAKrB,cAAI,CAAC,KAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,IAAI,GAAG,qBAAqB,kBAAkB,UAAU,GAAG;AAC7H,gBAAI,KAAK,sBAAsB,qBAAqB,kBAAkB,mBAAmB;AACvF,mBAAK,qBAAqB;AAAA,YAC5B;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA;AAAA;AAAA;AAAA,MAIA,uBAAuB;AACrB,eAAO,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,6BAA6B,UAAU;AACrC,aAAK,eAAe,IAAI,QAAQ;AAAA,MAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,gCAAgC,UAAU;AACxC,aAAK,eAAe,OAAO,QAAQ;AAAA,MACrC;AAAA;AAAA;AAAA;AAAA,MAIA,eAAe;AACb,gBAAQ,SAAS,MAAM;AACrB,eAAK,eAAe,MAAM;AAC1B,eAAK,kBAAkB,CAAC,qBAAqB,kBAAkB,iBAAiB,GAAG,qBAAqB,kBAAkB,UAAU;AAAA,QACtI,CAAC;AAAA,MACH;AAAA,MACA,aAAa;AACX,eAAO,KAAK;AAAA,MACd;AAAA,MACA,iBAAiB;AACf,eAAO,KAAK;AAAA,MACd;AAAA,MACA,oBAAoB;AAClB,eAAO;AAAA,MACT;AAAA,MACA,qBAAqB,OAAO;AAC1B,eAAO,MAAM,kBAAkB,MAAM;AAAA,MACvC;AAAA,MACA,kBAAkB,kBAAkB;AAClC,YAAI,mBAAmB,KAAK,eAAe;AACzC,eAAK,gBAAgB;AAAA,QACvB;AAAA,MACF;AAAA,IACF;AACA,IAAAD,SAAQ,aAAa;AAAA;AAAA;;;ACjVrB;AAAA,yDAAAE,UAAA;AAAA;AAiBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,QAAQA,SAAQ,eAAe;AACvC,QAAM,aAAa;AACnB,QAAM,MAAM,UAAQ,KAAK;AACzB,QAAM,OAAO,UAAQ,MAAM;AAC3B,QAAM,mBAAmB;AACzB,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,eAAe;AACrB,QAAM,QAAQ,UAAQ,KAAK;AAC3B,QAAM,oBAAoB;AAC1B,QAAM,cAAc;AACpB,aAAS,MAAM,MAAM;AACnB,cAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,IAAI;AAAA,IACjE;AAIA,IAAAA,SAAQ,eAAe;AACvB,QAAM,0CAA0C;AAChD,QAAM,oBAAoB,KAAK,UAAU,IAAI,UAAU;AACvD,QAAM,mBAAmB,KAAK,UAAU,IAAI,MAAM;AAKlD,aAAS,eAAe,QAAQ;AAC9B,YAAM,SAAS,CAAC;AAChB,eAAS,IAAI,GAAG,IAAI,KAAK,IAAI,MAAM,MAAM,OAAO,IAAI,WAAS,MAAM,MAAM,CAAC,GAAG,KAAK;AAChF,mBAAW,SAAS,QAAQ;AAC1B,cAAI,IAAI,MAAM,QAAQ;AACpB,mBAAO,KAAK,MAAM,CAAC,CAAC;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAIA,QAAM,cAAN,MAAkB;AAAA,MAChB,YAAY,QAAQ,UAAU,gBAAgB;AAC5C,YAAI,IAAI,IAAI;AACZ,aAAK,SAAS;AACd,aAAK,WAAW;AAChB,aAAK,uBAAuB;AAC5B,aAAK,oBAAoB;AACzB,aAAK,qBAAqB;AAC1B,aAAK,sBAAsB;AAC3B,aAAK,2BAA2B;AAChC,aAAK,oBAAoB;AACzB,aAAK,+BAA+B;AACpC,aAAK,yBAAyB;AAC9B,aAAK,mBAAmB;AACxB,cAAM,sCAAsC,GAAG,aAAa,aAAa,MAAM,CAAC;AAChF,cAAM,YAAY,GAAG,aAAa,eAAe,OAAO,IAAI;AAC5D,YAAI,aAAa,MAAM;AACrB,eAAK,WAAW;AAChB,eAAK,cAAc;AACnB,eAAK,OAAO;AAAA,QACd,OAAO;AACL,eAAK,GAAG,MAAM,QAAQ,SAAS,IAAI,MAAM,GAAG,MAAM,QAAQ,SAAS,IAAI,GAAG;AACxE,iBAAK,WAAW,CAAC;AAAA,cACf,MAAM,SAAS;AAAA,cACf,OAAO,KAAK,SAAS,UAAU,QAAQ,OAAO,SAAS,KAAKA,SAAQ;AAAA,YACtE,CAAC;AACD,iBAAK,cAAc;AACnB,iBAAK,OAAO;AAAA,UACd,OAAO;AACL,iBAAK,WAAW;AAChB,iBAAK,cAAc,SAAS;AAC5B,iBAAK,QAAQ,KAAK,SAAS,UAAU,QAAQ,OAAO,SAAS,KAAKA,SAAQ;AAAA,UAC5E;AAAA,QACF;AACA,aAAK,aAAa,KAAK,OAAO,IAAI;AAClC,YAAI,eAAe,wCAAwC,MAAM,GAAG;AAClE,eAAK,yBAAyB;AAAA,QAChC;AACA,aAAK,yBAAyB;AAAA,UAC5B,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,sCAAsC,GAAG,aAAa,aAAa,KAAK,MAAM,CAAC;AAAA,UACxF,UAAU,IAAI,WAAW,SAAS;AAAA,QACpC;AACA,cAAM,iBAAiB;AAAA,UACrB,cAAc,eAAe,mCAAmC;AAAA,UAChE,UAAU,eAAe,+BAA+B;AAAA,QAC1D;AACA,aAAK,UAAU,IAAI,kBAAkB,eAAe,MAAM;AACxD,cAAI,KAAK,mBAAmB;AAC1B,iBAAK,2BAA2B;AAAA,UAClC;AAAA,QACF,GAAG,cAAc;AACjB,aAAK,QAAQ,MAAM;AACnB,aAAK,+BAA+B,KAAK,eAAe,0CAA0C,OAAO,QAAQ,OAAO,SAAS,KAAK;AACtI,aAAK,sBAAsB,WAAW,MAAM;AAAA,QAAC,GAAG,CAAC;AACjD,qBAAa,KAAK,mBAAmB;AAAA,MACvC;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,kBAAkB;AAChB,YAAI,KAAK,aAAa,MAAM;AAC1B,cAAI,CAAC,KAAK,kBAAkB;AAC1B,kBAAM,sCAAsC,GAAG,aAAa,aAAa,KAAK,MAAM,CAAC;AACrF,yBAAa,MAAM;AACjB,mBAAK,SAAS,uBAAuB,KAAK,UAAU,MAAM,MAAM,MAAM,CAAC,CAAC;AAAA,YAC1E,CAAC;AACD,iBAAK,mBAAmB;AAAA,UAC1B;AACA,eAAK,QAAQ,KAAK;AAClB,eAAK,QAAQ,MAAM;AACnB,eAAK,wBAAwB;AAC7B;AAAA,QACF;AACA,YAAI,KAAK,gBAAgB,MAAM;AAC7B,gBAAM,kCAAkC,GAAG,aAAa,aAAa,KAAK,MAAM,CAAC;AACjF,uBAAa,MAAM;AACjB,iBAAK,SAAS,QAAQ;AAAA,cACpB,MAAM,YAAY,OAAO;AAAA,cACzB,SAAS,gCAAgC,GAAG,aAAa,aAAa,KAAK,MAAM,CAAC;AAAA,cAClF,UAAU,IAAI,WAAW,SAAS;AAAA,YACpC,CAAC;AAAA,UACH,CAAC;AACD,eAAK,wBAAwB;AAAA,QAC/B,OAAO;AACL,cAAI,KAAK,yBAAyB,MAAM;AACtC;AAAA,UACF;AACA,gBAAM,6BAA6B,KAAK,WAAW;AAOnD,eAAK,qBAAqB;AAC1B,gBAAM,WAAW,KAAK;AAKtB,eAAK,uBAAuB,iBAAiB,UAAU;AAAA,YACrD,KAAK;AAAA,UACP,CAAC;AACD,eAAK,qBAAqB,KAAK,iBAAe;AAC5C,gBAAI,KAAK,yBAAyB,MAAM;AACtC;AAAA,YACF;AACA,iBAAK,uBAAuB;AAC5B,iBAAK,QAAQ,MAAM;AACnB,iBAAK,QAAQ,KAAK;AAClB,kBAAM,eAAe,YAAY,OAAO,UAAQ,KAAK,WAAW,CAAC;AACjE,kBAAM,eAAe,YAAY,OAAO,UAAQ,KAAK,WAAW,CAAC;AACjE,iBAAK,qBAAqB,YAAY,cAAc,YAAY,EAAE,IAAI,WAAS;AAAA,cAC7E,MAAM,KAAK;AAAA,cACX,MAAM,CAAC,KAAK;AAAA,YACd,EAAE;AACF,kBAAM,qBAAqB,MAAM,KAAK,mBAAmB,IAAI,UAAQ,KAAK,OAAO,MAAM,KAAK,IAAI,EAAE,KAAK,GAAG,IAAI;AAC9G,kBAAM,oCAAoC,GAAG,aAAa,aAAa,KAAK,MAAM,IAAI,OAAO,kBAAkB;AAC/G,gBAAI,KAAK,mBAAmB,WAAW,GAAG;AACxC,mBAAK,SAAS,QAAQ,KAAK,sBAAsB;AACjD;AAAA,YACF;AAKA,iBAAK,SAAS,uBAAuB,KAAK,oBAAoB,KAAK,qBAAqB,KAAK,0BAA0B,MAAM,CAAC,CAAC;AAAA,UACjI,GAAG,SAAO;AACR,gBAAI,KAAK,yBAAyB,MAAM;AACtC;AAAA,YACF;AACA,kBAAM,kCAAkC,GAAG,aAAa,aAAa,KAAK,MAAM,IAAI,OAAO,IAAI,OAAO;AACtG,iBAAK,uBAAuB;AAC5B,iBAAK,wBAAwB;AAC7B,iBAAK,SAAS,QAAQ,KAAK,sBAAsB;AAAA,UACnD,CAAC;AAGD,cAAI,KAAK,0BAA0B,KAAK,sBAAsB,MAAM;AAIlE,iBAAK,oBAAoB,kBAAkB,QAAQ;AACnD,iBAAK,kBAAkB,KAAK,eAAa;AACvC,kBAAI,KAAK,sBAAsB,MAAM;AACnC;AAAA,cACF;AACA,mBAAK,oBAAoB;AACzB,kBAAI;AACF,qBAAK,uBAAuB,GAAG,iBAAiB,+BAA+B,WAAW,KAAK,UAAU;AAAA,cAC3G,SAAS,KAAK;AACZ,qBAAK,2BAA2B;AAAA,kBAC9B,MAAM,YAAY,OAAO;AAAA,kBACzB,SAAS,4CAA4C,IAAI,OAAO;AAAA,kBAChE,UAAU,IAAI,WAAW,SAAS;AAAA,gBACpC;AAAA,cACF;AACA,kBAAI,KAAK,uBAAuB,MAAM;AAKpC,qBAAK,SAAS,uBAAuB,KAAK,oBAAoB,KAAK,qBAAqB,KAAK,0BAA0B,MAAM,CAAC,CAAC;AAAA,cACjI;AAAA,YACF,GAAG,SAAO;AAAA,YAQV,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAAA,MACA,2BAA2B;AACzB,YAAI,IAAI;AACR,qBAAa,KAAK,mBAAmB;AACrC,aAAK,uBAAuB,MAAM,KAAK,WAAW,MAAM;AACtD,eAAK,wBAAwB;AAC7B,cAAI,KAAK,mBAAmB;AAC1B,iBAAK,2BAA2B;AAAA,UAClC;AAAA,QACF,GAAG,KAAK,2BAA2B,GAAG,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAC5F,aAAK,+BAA+B;AAAA,MACtC;AAAA,MACA,0BAA0B;AACxB,qBAAa,KAAK,mBAAmB;AACrC,aAAK,+BAA+B;AAAA,MACtC;AAAA,MACA,6BAA6B;AAC3B,YAAI,KAAK,yBAAyB,MAAM;AACtC,eAAK,oBAAoB;AACzB,eAAK,QAAQ,QAAQ;AACrB,eAAK,yBAAyB;AAC9B,eAAK,gBAAgB;AAAA,QACvB;AAAA,MACF;AAAA,MACA,mBAAmB;AAKjB,YAAI,KAAK,yBAAyB,MAAM;AACtC,cAAI,KAAK,gCAAgC,KAAK,QAAQ,UAAU,GAAG;AACjE,gBAAI,KAAK,8BAA8B;AACrC,oBAAM,wEAAwE;AAAA,YAChF,OAAO;AACL,oBAAM,sDAAsD,KAAK,QAAQ,WAAW,EAAE,YAAY,CAAC;AAAA,YACrG;AACA,iBAAK,oBAAoB;AAAA,UAC3B,OAAO;AACL,iBAAK,2BAA2B;AAAA,UAClC;AAAA,QACF;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,UAAU;AACR,aAAK,oBAAoB;AACzB,aAAK,QAAQ,MAAM;AACnB,aAAK,QAAQ,KAAK;AAClB,aAAK,wBAAwB;AAC7B,aAAK,uBAAuB;AAC5B,aAAK,oBAAoB;AACzB,aAAK,qBAAqB;AAC1B,aAAK,sBAAsB;AAC3B,aAAK,2BAA2B;AAChC,aAAK,mBAAmB;AAAA,MAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,OAAO,oBAAoB,QAAQ;AACjC,eAAO,OAAO;AAAA,MAChB;AAAA,IACF;AAKA,aAAS,QAAQ;AACf,OAAC,GAAG,WAAW,kBAAkB,OAAO,WAAW;AACnD,OAAC,GAAG,WAAW,uBAAuB,KAAK;AAAA,IAC7C;AACA,IAAAA,SAAQ,QAAQ;AAAA;AAAA;;;AC1ThB;AAAA,uDAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,uBAAuBA,SAAQ,eAAe;AACtD,QAAM,YAAY;AAClB,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,OAAO,UAAQ,MAAM;AAC3B,QAAM,MAAM,UAAQ,KAAK;AACzB,QAAM,UAAU;AAChB,QAAM,uBAAuB;AAC7B,QAAM,eAAe;AACrB,QAAM,QAAQ,UAAQ,KAAK;AAC3B,QAAM,iBAAiB;AACvB,QAAM,cAAc;AACpB,aAAS,MAAM,MAAM;AACnB,cAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,IAAI;AAAA,IACjE;AACA,aAAS,eAAe;AACtB,UAAI,WAAW;AACf,UAAI,SAAS;AAKb,UAAI,QAAQ,IAAI,YAAY;AAC1B,iBAAS;AACT,mBAAW,QAAQ,IAAI;AAAA,MACzB,WAAW,QAAQ,IAAI,aAAa;AAClC,iBAAS;AACT,mBAAW,QAAQ,IAAI;AAAA,MACzB,WAAW,QAAQ,IAAI,YAAY;AACjC,iBAAS;AACT,mBAAW,QAAQ,IAAI;AAAA,MACzB,OAAO;AACL,eAAO,CAAC;AAAA,MACV;AACA,UAAI;AACJ,UAAI;AACF,mBAAW,IAAI,MAAM,IAAI,QAAQ;AAAA,MACnC,SAAS,GAAG;AACV,SAAC,GAAG,UAAU,KAAK,YAAY,aAAa,OAAO,0BAA0B,MAAM,WAAW;AAC9F,eAAO,CAAC;AAAA,MACV;AACA,UAAI,SAAS,aAAa,SAAS;AACjC,SAAC,GAAG,UAAU,KAAK,YAAY,aAAa,OAAO,IAAI,SAAS,QAAQ,qCAAqC;AAC7G,eAAO,CAAC;AAAA,MACV;AACA,UAAI,WAAW;AACf,UAAI,SAAS,UAAU;AACrB,YAAI,SAAS,UAAU;AACrB,WAAC,GAAG,UAAU,KAAK,YAAY,aAAa,MAAM,6BAA6B;AAC/E,qBAAW,GAAG,SAAS,QAAQ,IAAI,SAAS,QAAQ;AAAA,QACtD,OAAO;AACL,qBAAW,SAAS;AAAA,QACtB;AAAA,MACF;AACA,YAAM,WAAW,SAAS;AAC1B,UAAI,OAAO,SAAS;AAIpB,UAAI,SAAS,IAAI;AACf,eAAO;AAAA,MACT;AACA,YAAM,SAAS;AAAA,QACb,SAAS,GAAG,QAAQ,IAAI,IAAI;AAAA,MAC9B;AACA,UAAI,UAAU;AACZ,eAAO,QAAQ;AAAA,MACjB;AACA,YAAM,kBAAkB,OAAO,UAAU,kCAAkC,MAAM;AACjF,aAAO;AAAA,IACT;AACA,aAAS,qBAAqB;AAE5B,UAAI,aAAa,QAAQ,IAAI;AAC7B,UAAI,SAAS;AACb,UAAI,CAAC,YAAY;AACf,qBAAa,QAAQ,IAAI;AACzB,iBAAS;AAAA,MACX;AACA,UAAI,YAAY;AACd,cAAM,sDAAsD,MAAM;AAClE,eAAO,WAAW,MAAM,GAAG;AAAA,MAC7B,OAAO;AACL,eAAO,CAAC;AAAA,MACV;AAAA,IACF;AACA,aAAS,aAAa,QAAQ,SAAS;AACrC,UAAI;AACJ,YAAM,gBAAgB;AAAA,QACpB;AAAA,QACA,cAAc,CAAC;AAAA,MACjB;AACA,YAAM,KAAK,QAAQ,wBAAwB,OAAO,QAAQ,OAAO,SAAS,KAAK,OAAO,GAAG;AACvF,eAAO;AAAA,MACT;AACA,UAAI,OAAO,WAAW,QAAQ;AAC5B,eAAO;AAAA,MACT;AACA,YAAM,YAAY,aAAa;AAC/B,UAAI,CAAC,UAAU,SAAS;AACtB,eAAO;AAAA,MACT;AACA,YAAM,YAAY,GAAG,aAAa,eAAe,OAAO,IAAI;AAC5D,UAAI,CAAC,UAAU;AACb,eAAO;AAAA,MACT;AACA,YAAM,aAAa,SAAS;AAC5B,iBAAW,QAAQ,mBAAmB,GAAG;AACvC,YAAI,SAAS,YAAY;AACvB,gBAAM,mDAAmD,GAAG,aAAa,aAAa,MAAM,CAAC;AAC7F,iBAAO;AAAA,QACT;AAAA,MACF;AACA,YAAM,eAAe;AAAA,QACnB,6BAA6B,GAAG,aAAa,aAAa,MAAM;AAAA,MAClE;AACA,UAAI,UAAU,OAAO;AACnB,qBAAa,yBAAyB,IAAI,UAAU;AAAA,MACtD;AACA,aAAO;AAAA,QACL,QAAQ;AAAA,UACN,QAAQ;AAAA,UACR,MAAM,UAAU;AAAA,QAClB;AAAA,QACA;AAAA,MACF;AAAA,IACF;AACA,IAAAA,SAAQ,eAAe;AACvB,aAAS,qBAAqB,SAAS,gBAAgB,mBAAmB;AACxE,UAAI;AACJ,UAAI,EAAE,8BAA8B,iBAAiB;AACnD,eAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,MAC3B;AACA,YAAM,aAAa,eAAe,0BAA0B;AAC5D,YAAM,gBAAgB,GAAG,aAAa,UAAU,UAAU;AAC1D,UAAI,iBAAiB,MAAM;AACzB,eAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,MAC3B;AACA,YAAM,iBAAiB,GAAG,aAAa,eAAe,aAAa,IAAI;AACvE,UAAI,kBAAkB,MAAM;AAC1B,eAAO,QAAQ,QAAQ,CAAC,CAAC;AAAA,MAC3B;AACA,YAAM,WAAW,GAAG,cAAc,IAAI,KAAK,KAAK,cAAc,UAAU,QAAQ,OAAO,SAAS,KAAK,eAAe,YAAY;AAChI,YAAM,UAAU;AAAA,QACd,QAAQ;AAAA,QACR,MAAM;AAAA,MACR;AACA,YAAM,UAAU;AAAA,QACd,MAAM;AAAA,MACR;AAEA,WAAK,GAAG,qBAAqB,wBAAwB,OAAO,GAAG;AAC7D,gBAAQ,OAAO,QAAQ;AACvB,gBAAQ,OAAO,QAAQ;AAAA,MACzB,OAAO;AACL,gBAAQ,aAAa,QAAQ;AAAA,MAC/B;AACA,UAAI,6BAA6B,gBAAgB;AAC/C,gBAAQ,qBAAqB,IAAI,WAAW,OAAO,KAAK,eAAe,yBAAyB,CAAC,EAAE,SAAS,QAAQ;AAAA,MACtH;AACA,cAAQ,UAAU;AAClB,YAAM,sBAAsB,GAAG,qBAAqB,2BAA2B,OAAO;AACtF,YAAM,iBAAiB,qBAAqB,oBAAoB,QAAQ,IAAI;AAC5E,aAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAM,UAAU,KAAK,QAAQ,OAAO;AACpC,gBAAQ,KAAK,WAAW,CAAC,KAAK,QAAQ,SAAS;AAC7C,cAAIC;AACJ,kBAAQ,mBAAmB;AAC3B,iBAAO,mBAAmB;AAC1B,cAAI,IAAI,eAAe,KAAK;AAC1B,kBAAM,+BAA+B,QAAQ,OAAO,oBAAoB,kBAAkB;AAC1F,gBAAI,mBAAmB,mBAAmB;AAKxC,oBAAM,cAAc,GAAG,WAAW,qBAAqB,YAAY;AACnE,oBAAMC,aAAY,GAAG,aAAa,eAAe,UAAU;AAC3D,oBAAM,cAAcD,MAAKC,cAAa,QAAQA,cAAa,SAAS,SAASA,UAAS,UAAU,QAAQD,QAAO,SAASA,MAAK;AAC7H,oBAAM,MAAM,IAAI,QAAQ,OAAO,OAAO;AAAA,gBACpC,MAAM;AAAA,gBACN,YAAY;AAAA,gBACZ;AAAA,cACF,GAAG,iBAAiB,GAAG,MAAM;AAC3B,sBAAM,kDAAkD,QAAQ,OAAO,oBAAoB,kBAAkB;AAC7G,wBAAQ;AAAA,kBACN,QAAQ;AAAA,kBACR,YAAY;AAAA,gBACd,CAAC;AAAA,cACH,CAAC;AACD,kBAAI,GAAG,SAAS,WAAS;AACvB,sBAAM,6CAA6C,QAAQ,OAAO,oBAAoB,qBAAqB,iBAAiB,MAAM,OAAO;AACzI,uBAAO;AAAA,cACT,CAAC;AAAA,YACH,OAAO;AACL,oBAAM,wDAAwD,QAAQ,OAAO,oBAAoB,kBAAkB;AACnH,sBAAQ;AAAA,gBACN;AAAA,gBACA,YAAY;AAAA,cACd,CAAC;AAAA,YACH;AAAA,UACF,OAAO;AACL,aAAC,GAAG,UAAU,KAAK,YAAY,aAAa,OAAO,0BAA0B,QAAQ,OAAO,oBAAoB,qBAAqB,kBAAkB,IAAI,UAAU;AACrK,mBAAO;AAAA,UACT;AAAA,QACF,CAAC;AACD,gBAAQ,KAAK,SAAS,SAAO;AAC3B,kBAAQ,mBAAmB;AAC3B,WAAC,GAAG,UAAU,KAAK,YAAY,aAAa,OAAO,gCAAgC,qBAAqB,iBAAiB,IAAI,OAAO;AACpI,iBAAO;AAAA,QACT,CAAC;AACD,gBAAQ,IAAI;AAAA,MACd,CAAC;AAAA,IACH;AACA,IAAAD,SAAQ,uBAAuB;AAAA;AAAA;;;AC3O/B;AAAA,2DAAAG,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,gBAAgB;AACxB,QAAI;AACJ,KAAC,SAAUC,YAAW;AACpB,MAAAA,WAAUA,WAAU,SAAS,IAAI,CAAC,IAAI;AACtC,MAAAA,WAAUA,WAAU,cAAc,IAAI,CAAC,IAAI;AAC3C,MAAAA,WAAUA,WAAU,iBAAiB,IAAI,CAAC,IAAI;AAAA,IAChD,GAAG,cAAc,YAAY,CAAC,EAAE;AAChC,QAAM,gBAAN,MAAoB;AAAA,MAClB,YAAY,sBAAsB;AAChC,aAAK,uBAAuB;AAC5B,aAAK,YAAY,UAAU;AAC3B,aAAK,mBAAmB,OAAO,MAAM,CAAC;AACtC,aAAK,kBAAkB,OAAO,MAAM,CAAC;AACrC,aAAK,oBAAoB;AACzB,aAAK,kBAAkB;AACvB,aAAK,qBAAqB,CAAC;AAC3B,aAAK,uBAAuB;AAAA,MAC9B;AAAA,MACA,MAAM,MAAM;AACV,YAAI,WAAW;AACf,YAAI;AACJ,cAAM,SAAS,CAAC;AAChB,eAAO,WAAW,KAAK,QAAQ;AAC7B,kBAAQ,KAAK,WAAW;AAAA,YACtB,KAAK,UAAU;AACb,mBAAK,mBAAmB,KAAK,MAAM,UAAU,WAAW,CAAC;AACzD,0BAAY;AACZ,mBAAK,YAAY,UAAU;AAC3B,mBAAK,gBAAgB,KAAK,CAAC;AAC3B,mBAAK,oBAAoB;AACzB,mBAAK,kBAAkB;AACvB,mBAAK,uBAAuB;AAC5B,mBAAK,qBAAqB,CAAC;AAC3B;AAAA,YACF,KAAK,UAAU;AACb,uBAAS,KAAK,IAAI,KAAK,SAAS,UAAU,KAAK,iBAAiB;AAChE,mBAAK,KAAK,KAAK,iBAAiB,IAAI,KAAK,mBAAmB,UAAU,WAAW,MAAM;AACvF,mBAAK,qBAAqB;AAC1B,0BAAY;AAEZ,kBAAI,KAAK,sBAAsB,GAAG;AAChC,qBAAK,kBAAkB,KAAK,gBAAgB,aAAa,CAAC;AAC1D,oBAAI,KAAK,yBAAyB,MAAM,KAAK,kBAAkB,KAAK,sBAAsB;AACxF,wBAAM,IAAI,MAAM,qCAAqC,KAAK,eAAe,OAAO,KAAK,oBAAoB,GAAG;AAAA,gBAC9G;AACA,qBAAK,uBAAuB,KAAK;AACjC,oBAAI,KAAK,uBAAuB,GAAG;AACjC,uBAAK,YAAY,UAAU;AAAA,gBAC7B,OAAO;AACL,wBAAM,UAAU,OAAO,OAAO,CAAC,KAAK,kBAAkB,KAAK,eAAe,GAAG,CAAC;AAC9E,uBAAK,YAAY,UAAU;AAC3B,yBAAO,KAAK,OAAO;AAAA,gBACrB;AAAA,cACF;AACA;AAAA,YACF,KAAK,UAAU;AACb,uBAAS,KAAK,IAAI,KAAK,SAAS,UAAU,KAAK,oBAAoB;AACnE,mBAAK,mBAAmB,KAAK,KAAK,MAAM,UAAU,WAAW,MAAM,CAAC;AACpE,mBAAK,wBAAwB;AAC7B,0BAAY;AAEZ,kBAAI,KAAK,yBAAyB,GAAG;AAEnC,sBAAM,uBAAuB,CAAC,KAAK,kBAAkB,KAAK,eAAe,EAAE,OAAO,KAAK,kBAAkB;AACzG,sBAAM,gBAAgB,OAAO,OAAO,sBAAsB,KAAK,kBAAkB,CAAC;AAClF,qBAAK,YAAY,UAAU;AAC3B,uBAAO,KAAK,aAAa;AAAA,cAC3B;AACA;AAAA,YACF;AACE,oBAAM,IAAI,MAAM,uBAAuB;AAAA,UAC3C;AAAA,QACF;AACA,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAD,SAAQ,gBAAgB;AAAA;AAAA;;;ACjGxB;AAAA,4DAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,sBAAsB;AAC9B,QAAM,QAAQ,UAAQ,OAAO;AAC7B,QAAM,KAAK,UAAQ,IAAI;AACvB,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,mBAAmB;AACzB,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,cAAc;AAOpB,aAAS,mBAAmB,OAAO;AACjC,iBAAW,CAACC,OAAM,GAAG,KAAK,OAAO,QAAQ,GAAG,UAAU,KAAK,GAAG;AAC5D,YAAI,QAAQ,OAAO;AACjB,iBAAOA;AAAA,QACT;AAAA,MACF;AACA,aAAO,0BAA0B;AAAA,IACnC;AACA,QAAM,sBAAN,MAA0B;AAAA,MACxB,YAAY,aAAa,kBAAkB,UAAU,WAAW,QAAQ;AACtE,YAAI;AACJ,aAAK,cAAc;AACnB,aAAK,mBAAmB;AACxB,aAAK,WAAW;AAChB,aAAK,YAAY;AACjB,aAAK,SAAS;AACd,aAAK,sBAAsB;AAC3B,aAAK,gBAAgB;AACrB,aAAK,UAAU;AAKf,aAAK,cAAc;AACnB,aAAK,eAAe;AACpB,aAAK,uBAAuB,CAAC;AAE7B,aAAK,mBAAmB,YAAY,OAAO;AAE3C,aAAK,cAAc;AACnB,aAAK,gBAAgB;AACrB,cAAM,2BAA2B,KAAK,UAAU,WAAW,EAAE,iCAAiC,OAAO,QAAQ,OAAO,SAAS,KAAK,YAAY;AAC9I,aAAK,UAAU,IAAI,iBAAiB,cAAc,uBAAuB;AACzE,oBAAY,GAAG,YAAY,CAAC,SAAS,UAAU;AAC7C,cAAI,gBAAgB;AACpB,qBAAW,UAAU,OAAO,KAAK,OAAO,GAAG;AACzC,6BAAiB,OAAS,SAAS,OAAO,QAAQ,MAAM,IAAI;AAAA,UAC9D;AACA,eAAK,MAAM,+BAA+B,aAAa;AACvD,kBAAQ,QAAQ,SAAS,GAAG;AAAA,YAE1B,KAAK;AACH,mBAAK,mBAAmB,YAAY,OAAO;AAC3C;AAAA,YACF,KAAK;AACH,mBAAK,mBAAmB,YAAY,OAAO;AAC3C;AAAA,YACF,KAAK;AACH,mBAAK,mBAAmB,YAAY,OAAO;AAC3C;AAAA,YACF,KAAK;AACH,mBAAK,mBAAmB,YAAY,OAAO;AAC3C;AAAA,YACF,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AAAA,YACL,KAAK;AACH,mBAAK,mBAAmB,YAAY,OAAO;AAC3C;AAAA,YACF;AACE,mBAAK,mBAAmB,YAAY,OAAO;AAAA,UAC/C;AACA,cAAI,QAAQ,MAAM,UAAU,yBAAyB;AACnD,iBAAK,eAAe,OAAO;AAAA,UAC7B,OAAO;AACL,gBAAI;AACJ,gBAAI;AACF,yBAAW,WAAW,SAAS,iBAAiB,OAAO;AAAA,YACzD,SAAS,OAAO;AACd,mBAAK,QAAQ;AAAA,gBACX,MAAM,YAAY,OAAO;AAAA,gBACzB,SAAS,MAAM;AAAA,gBACf,UAAU,IAAI,WAAW,SAAS;AAAA,cACpC,CAAC;AACD;AAAA,YACF;AACA,iBAAK,SAAS,kBAAkB,QAAQ;AAAA,UAC1C;AAAA,QACF,CAAC;AACD,oBAAY,GAAG,YAAY,aAAW;AACpC,eAAK,eAAe,OAAO;AAAA,QAC7B,CAAC;AACD,oBAAY,GAAG,QAAQ,UAAQ;AAG7B,cAAI,KAAK,cAAc;AACrB;AAAA,UACF;AACA,eAAK,MAAM,yCAAyC,KAAK,MAAM;AAC/D,cAAI;AACJ,cAAI;AACF,uBAAW,KAAK,QAAQ,MAAM,IAAI;AAAA,UACpC,SAAS,GAAG;AACV,iBAAK,iBAAiB,YAAY,OAAO,oBAAoB,EAAE,OAAO;AACtE;AAAA,UACF;AACA,qBAAW,WAAW,UAAU;AAC9B,iBAAK,MAAM,8BAA8B,QAAQ,MAAM;AACvD,iBAAK,iBAAiB,mBAAmB;AACzC,iBAAK,QAAQ,OAAO;AAAA,UACtB;AAAA,QACF,CAAC;AACD,oBAAY,GAAG,OAAO,MAAM;AAC1B,eAAK,cAAc;AACnB,eAAK,kBAAkB;AAAA,QACzB,CAAC;AACD,oBAAY,GAAG,SAAS,MAAM;AAI5B,kBAAQ,SAAS,MAAM;AACrB,gBAAIC;AACJ,iBAAK,MAAM,oCAAoC,YAAY,OAAO;AAKlE,kBAAMA,MAAK,KAAK,iBAAiB,QAAQA,QAAO,SAAS,SAASA,IAAG,UAAU,YAAY,OAAO,IAAI;AACpG;AAAA,YACF;AACA,gBAAI;AACJ,gBAAI,UAAU;AACd,oBAAQ,YAAY,SAAS;AAAA,cAC3B,KAAK,MAAM,UAAU;AAInB,oBAAI,KAAK,gBAAgB,MAAM;AAC7B;AAAA,gBACF;AACA,uBAAO,YAAY,OAAO;AAC1B,0BAAU,iCAAiC,YAAY,OAAO;AAC9D;AAAA,cACF,KAAK,MAAM,UAAU;AACnB,uBAAO,YAAY,OAAO;AAC1B,0BAAU;AACV;AAAA,cACF,KAAK,MAAM,UAAU;AACnB,uBAAO,YAAY,OAAO;AAC1B,0BAAU;AACV;AAAA,cACF,KAAK,MAAM,UAAU;AACnB,uBAAO,YAAY,OAAO;AAC1B,0BAAU;AACV;AAAA,cACF,KAAK,MAAM,UAAU;AACnB,uBAAO,YAAY,OAAO;AAC1B,0BAAU;AACV;AAAA,cACF,KAAK,MAAM,UAAU;AACnB,uBAAO,YAAY,OAAO;AAC1B,oBAAI,KAAK,kBAAkB,MAAM;AAM/B,4BAAU,iCAAiC,YAAY,OAAO;AAAA,gBAChE,OAAO;AACL,sBAAI,KAAK,cAAc,SAAS,gBAAgB,KAAK,cAAc,SAAS,aAAa;AACvF,2BAAO,YAAY,OAAO;AAC1B,8BAAU,KAAK,cAAc;AAAA,kBAC/B,OAAO;AAKL,8BAAU,iCAAiC,YAAY,OAAO,wCAAwC,KAAK,cAAc,OAAO;AAAA,kBAClI;AAAA,gBACF;AACA;AAAA,cACF;AACE,uBAAO,YAAY,OAAO;AAC1B,0BAAU,iCAAiC,YAAY,OAAO;AAAA,YAClE;AAKA,iBAAK,QAAQ;AAAA,cACX;AAAA,cACA;AAAA,cACA,UAAU,IAAI,WAAW,SAAS;AAAA,cAClC,SAAS,YAAY;AAAA,YACvB,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC;AACD,oBAAY,GAAG,SAAS,SAAO;AAQ7B,cAAI,IAAI,SAAS,0BAA0B;AACzC,iBAAK,MAAM,+BAA+B,IAAI,UAAU,WAAW,IAAI,OAAO,YAAY,mBAAmB,IAAI,KAAK,IAAI,cAAc,IAAI,OAAO;AACnJ,iBAAK,gBAAgB;AAAA,UACvB;AACA,eAAK,iBAAiB,YAAY,KAAK;AAAA,QACzC,CAAC;AAAA,MACH;AAAA,MACA,eAAe;AACb,aAAK,QAAQ;AAAA,UACX,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS;AAAA,UACT,UAAU,IAAI,WAAW,SAAS;AAAA,QACpC,CAAC;AAAA,MACH;AAAA,MACA,eAAe;AAEb,YAAI,CAAC,KAAK,cAAc;AACtB,eAAK,eAAe;AACpB,eAAK,MAAM,6BAA6B,KAAK,YAAY,OAAO,eAAe,KAAK,YAAY,UAAU,GAAG;AAC7G,eAAK,iBAAiB,UAAU,KAAK,WAAW;AAOhD,kBAAQ,SAAS,MAAM;AACrB,iBAAK,SAAS,gBAAgB,KAAK,WAAW;AAAA,UAChD,CAAC;AAKD,eAAK,YAAY,OAAO;AAAA,QAC1B;AAAA,MACF;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,SAAS,OAAO,IAAI;AAAA,MAC5F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,QAAQ,QAAQ;AAGd,YAAI,KAAK,gBAAgB,QAAQ,KAAK,YAAY,SAAS,YAAY,OAAO,IAAI;AAChF,eAAK,cAAc;AACnB,eAAK,kBAAkB;AAAA,QACzB;AACA,aAAK,mBAAmB;AAAA,MAC1B;AAAA,MACA,oBAAoB;AAClB,YAAI,KAAK,gBAAgB,MAAM;AAI7B,cAAI,KAAK,YAAY,SAAS,YAAY,OAAO,MAAM,KAAK,eAAe,KAAK,qBAAqB,WAAW,KAAK,CAAC,KAAK,uBAAuB,CAAC,KAAK,eAAe;AACrK,iBAAK,aAAa;AAAA,UACpB;AAAA,QACF;AAAA,MACF;AAAA,MACA,KAAK,SAAS;AACZ,aAAK,MAAM,0CAA0C,mBAAmB,SAAS,QAAQ,SAAS,KAAK;AACvG,aAAK,UAAU;AACf,aAAK,gBAAgB;AACrB,gBAAQ,SAAS,MAAM;AACrB,eAAK,gBAAgB;AAKrB,cAAI,KAAK,cAAc;AACrB;AAAA,UACF;AACA,eAAK,SAAS,iBAAiB,OAAO;AACtC,eAAK,kBAAkB;AAAA,QACzB,CAAC;AAAA,MACH;AAAA,MACA,QAAQ,cAAc;AACpB,YAAI,KAAK,SAAS;AAChB,eAAK,YAAY,MAAM;AACvB,eAAK,KAAK,YAAY;AAAA,QACxB,OAAO;AACL,eAAK,MAAM,iDAAiD,aAAa,MAAM;AAC/E,eAAK,qBAAqB,KAAK,YAAY;AAAA,QAC7C;AAAA,MACF;AAAA,MACA,eAAe,SAAS;AACtB,aAAK,iBAAiB,YAAY,IAAI;AACtC,YAAI,gBAAgB;AACpB,mBAAW,UAAU,OAAO,KAAK,OAAO,GAAG;AACzC,2BAAiB,OAAS,SAAS,OAAO,QAAQ,MAAM,IAAI;AAAA,QAC9D;AACA,aAAK,MAAM,gCAAgC,aAAa;AACxD,YAAI;AACJ,YAAI;AACF,qBAAW,WAAW,SAAS,iBAAiB,OAAO;AAAA,QACzD,SAAS,GAAG;AACV,qBAAW,IAAI,WAAW,SAAS;AAAA,QACrC;AACA,cAAM,cAAc,SAAS,OAAO;AACpC,YAAI,OAAO,KAAK;AAChB,YAAI,SAAS,YAAY,OAAO,WAAW,OAAO,YAAY,aAAa,MAAM,UAAU;AACzF,gBAAM,iBAAiB,OAAO,YAAY,aAAa,CAAC;AACxD,cAAI,kBAAkB,YAAY,QAAQ;AACxC,mBAAO;AACP,iBAAK,MAAM,0BAA0B,iBAAiB,cAAc;AAAA,UACtE;AACA,mBAAS,OAAO,aAAa;AAAA,QAC/B;AACA,YAAI,UAAU;AACd,YAAI,OAAO,YAAY,cAAc,MAAM,UAAU;AACnD,cAAI;AACF,sBAAU,UAAU,YAAY,cAAc,CAAC;AAAA,UACjD,SAAS,GAAG;AACV,sBAAU,YAAY,cAAc;AAAA,UACtC;AACA,mBAAS,OAAO,cAAc;AAC9B,eAAK,MAAM,qCAAqC,UAAU,eAAe;AAAA,QAC3E;AACA,cAAM,SAAS;AAAA,UACb;AAAA,UACA;AAAA,UACA;AAAA,QACF;AAEA,aAAK,QAAQ,MAAM;AAAA,MACrB;AAAA,MACA,qBAAqB;AACnB,YAAI;AAGJ,YAAI,CAAC,KAAK,YAAY,WAAW;AAI/B,cAAI;AACJ,gBAAM,KAAK,KAAK,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,YAAY,OAAO,IAAI;AACpG,mBAAO,MAAM,UAAU;AAAA,UACzB,OAAO;AACL,mBAAO,MAAM,UAAU;AAAA,UACzB;AACA,eAAK,MAAM,kCAAkC,IAAI;AACjD,eAAK,YAAY,MAAM,IAAI;AAAA,QAC7B;AAAA,MACF;AAAA,MACA,iBAAiB,QAAQ,SAAS;AAChC,aAAK,MAAM,4BAA4B,SAAS,gBAAgB,UAAU,GAAG;AAC7E,aAAK,QAAQ;AAAA,UACX,MAAM;AAAA,UACN;AAAA,UACA,UAAU,IAAI,WAAW,SAAS;AAAA,QACpC,CAAC;AAAA,MACH;AAAA,MACA,YAAY;AACV,eAAO,KAAK;AAAA,MACd;AAAA,MACA,UAAU;AACR,eAAO,KAAK,UAAU,YAAY;AAAA,MACpC;AAAA,MACA,gBAAgB;AACd,eAAO,KAAK;AAAA,MACd;AAAA,MACA,YAAY;AAGV,YAAI,KAAK,gBAAgB,QAAQ,KAAK,YAAY,SAAS,YAAY,OAAO,IAAI;AAChF,eAAK,cAAc;AACnB,eAAK,kBAAkB;AACvB;AAAA,QACF;AACA,aAAK,UAAU;AACf,YAAI,KAAK,qBAAqB,SAAS,GAAG;AACxC,gBAAM,cAAc,KAAK,qBAAqB,MAAM;AACpD,eAAK,KAAK,WAAW;AACrB;AAAA,QACF;AAGA,aAAK,YAAY,OAAO;AAAA,MAC1B;AAAA,MACA,uBAAuB,SAAS,SAAS;AACvC,aAAK,MAAM,2CAA2C,QAAQ,MAAM;AACpE,cAAM,KAAK,WAAS;AAIlB,kBAAQ,SAAS,MAAM;AACrB,gBAAI;AACJ,gBAAI,OAAO,YAAY,OAAO;AAC9B,iBAAK,UAAU,QAAQ,UAAU,SAAS,SAAS,MAAM,UAAU,8BAA8B;AAC/F,qBAAO,YAAY,OAAO;AAAA,YAC5B;AACA,gBAAI,OAAO;AACT,mBAAK,iBAAiB,MAAM,gBAAgB,MAAM,OAAO,EAAE;AAAA,YAC7D;AACA,aAAC,KAAK,QAAQ,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,OAAO;AAAA,UAC9E,CAAC;AAAA,QACH;AACA,aAAK,MAAM,kCAAkC,QAAQ,MAAM;AAC3D,aAAK,iBAAiB,eAAe;AACrC,YAAI;AACF,eAAK,YAAY,MAAM,SAAS,EAAE;AAAA,QACpC,SAAS,OAAO;AACd,eAAK,QAAQ;AAAA,YACX,MAAM,YAAY,OAAO;AAAA,YACzB,SAAS,2BAA2B,MAAM,OAAO;AAAA,YACjD,UAAU,IAAI,WAAW,SAAS;AAAA,UACpC,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,YAAY;AACV,aAAK,MAAM,cAAc;AACzB,aAAK,MAAM,gCAAgC;AAC3C,aAAK,YAAY,IAAI;AAAA,MACvB;AAAA,IACF;AACA,IAAAF,SAAQ,sBAAsB;AAAA;AAAA;;;AClc9B;AAAA,wDAAAG,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,oBAAoB;AAC5B,QAAI,iBAAiB;AACrB,aAAS,oBAAoB;AAC3B,aAAO;AAAA,IACT;AACA,IAAAA,SAAQ,oBAAoB;AAAA;AAAA;;;AC1B5B;AAAA,sDAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,2BAA2B;AACnC,QAAM,QAAQ,UAAQ,OAAO;AAC7B,QAAM,QAAQ,UAAQ,KAAK;AAC3B,QAAM,aAAa;AACnB,QAAM,cAAc;AACpB,QAAM,eAAe;AACrB,QAAM,UAAU;AAChB,QAAM,aAAa;AACnB,QAAM,uBAAuB;AAC7B,QAAM,eAAe;AACrB,QAAM,MAAM,UAAQ,KAAK;AACzB,QAAM,oBAAoB;AAC1B,QAAM,gBAAgB;AACtB,QAAM,cAAc;AACpB,QAAM,2BAA2B;AACjC,QAAM,gBAAgB,kBAA8B;AACpD,QAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,MAAM;AACV,QAAM,uBAAuB;AAC7B,QAAM,mBAAmB,OAAO,KAAK,kBAAkB,OAAO;AAC9D,QAAM,iBAAN,MAAqB;AAAA,MACnB,YAAY,SAAS,mBAAmB,SAKxC,YAAY;AACV,aAAK,UAAU;AACf,aAAK,UAAU;AACf,aAAK,aAAa;AAIlB,aAAK,kBAAkB;AAIvB,aAAK,qBAAqB;AAI1B,aAAK,mBAAmB;AAKxB,aAAK,2BAA2B;AAIhC,aAAK,qBAAqB;AAI1B,aAAK,wBAAwB;AAC7B,aAAK,cAAc,oBAAI,IAAI;AAC3B,aAAK,sBAAsB,CAAC;AAC5B,aAAK,oBAAoB;AACzB,aAAK,kBAAkB;AACvB,aAAK,gBAAgB,IAAI,WAAW,oBAAoB;AACxD,aAAK,iBAAiB;AACtB,aAAK,eAAe;AACpB,aAAK,mBAAmB;AACxB,aAAK,2BAA2B;AAChC,aAAK,+BAA+B;AAGpC,aAAK,2BAA2B,GAAG,qBAAqB,2BAA2B,iBAAiB;AACpG,YAAI,QAAQ,sBAAsB,MAAM,GAAG;AACzC,eAAK,kBAAkB;AAAA,QACzB;AACA,aAAK,eAAe,GAAG,WAAW,wBAAwB,KAAK,yBAAyB,MAAM,KAAK,gBAAgB,GAAG,KAAK,eAAe;AAE1I,aAAK,YAAY,CAAC,QAAQ,yBAAyB,GAAG,gBAAgB,aAAa,IAAI,QAAQ,2BAA2B,CAAC,EAAE,OAAO,OAAK,CAAC,EAAE,KAAK,GAAG;AACpJ,YAAI,4BAA4B,SAAS;AACvC,eAAK,kBAAkB,QAAQ,wBAAwB;AAAA,QACzD;AACA,YAAI,+BAA+B,SAAS;AAC1C,eAAK,qBAAqB,QAAQ,2BAA2B;AAAA,QAC/D;AACA,YAAI,yCAAyC,SAAS;AACpD,eAAK,wBAAwB,QAAQ,qCAAqC,MAAM;AAAA,QAClF,OAAO;AACL,eAAK,wBAAwB;AAAA,QAC/B;AACA,gBAAQ,KAAK,SAAS,MAAM;AAC1B,eAAK,MAAM,gBAAgB;AAC3B,eAAK,mBAAmB;AACxB,eAAK,iBAAiB;AAAA,QACxB,CAAC;AACD,gBAAQ,KAAK,UAAU,CAAC,WAAW,cAAc,eAAe;AAC9D,cAAI,eAAe;AAGnB,cAAI,cAAc,MAAM,UAAU,6BAA6B,cAAc,WAAW,OAAO,gBAAgB,GAAG;AAChH,2BAAe;AAAA,UACjB;AACA,eAAK,MAAM,2CAA2C,YAAY,gBAAgB,eAAe,QAAQ,eAAe,SAAS,SAAS,WAAW,SAAS,EAAE;AAChK,eAAK,wBAAwB,YAAY;AAAA,QAC3C,CAAC;AACD,gBAAQ,KAAK,SAAS,WAAS;AAG7B,eAAK,MAAM,kCAAkC,MAAM,OAAO;AAAA,QAC5D,CAAC;AACD,YAAI,QAAQ,gBAAgB,WAAW,GAAG;AACxC,kBAAQ,GAAG,kBAAkB,cAAY;AACvC,iBAAK,MAAM,2BAA2B,KAAK,YAAY,UAAU,2BAA2B,MAAM,OAAO,KAAK,UAAU,QAAQ,CAAC;AAAA,UACnI,CAAC;AACD,kBAAQ,GAAG,iBAAiB,cAAY;AACtC,iBAAK,MAAM,2CAA2C,KAAK,YAAY,UAAU,2BAA2B,MAAM,OAAO,KAAK,UAAU,QAAQ,CAAC;AAAA,UACnJ,CAAC;AAAA,QACH;AAGA,YAAI,KAAK,uBAAuB;AAC9B,eAAK,6BAA6B;AAAA,QACpC;AAAA,MACF;AAAA,MACA,kBAAkB;AAChB,YAAI,IAAI,IAAI;AACZ,cAAM,gBAAgB,KAAK,QAAQ;AACnC,cAAM,gBAAgB,cAAc,iBAAiB,GAAG,qBAAqB,2BAA2B,cAAc,eAAe,cAAc,UAAU,IAAI;AACjK,cAAM,eAAe,cAAc,gBAAgB,GAAG,qBAAqB,2BAA2B,cAAc,cAAc,cAAc,SAAS,IAAI;AAC7J,YAAI;AACJ,YAAI,KAAK,QAAQ,WAAW;AAC1B,gBAAM,YAAY;AAClB,gBAAM,aAAa,UAAU,UAAU;AACvC,gBAAM,cAAc,UAAU,eAAe;AAC7C,gBAAM,kBAAkB,UAAU,mBAAmB;AACrD,oBAAU;AAAA,YACR,0BAA0B,KAAK,WAAW,kBAAkB,QAAQ,OAAO,SAAS,KAAK;AAAA,YACzF,sBAAsB,WAAW,eAAe,OAAO,WAAW;AAAA,YAClE,kBAAkB,eAAe,SAAS,cAAc,YAAY,MAAM;AAAA,YAC1E,mBAAmB,mBAAmB,SAAS,kBAAkB,gBAAgB,MAAM;AAAA,UACzF;AAAA,QACF,OAAO;AACL,oBAAU;AAAA,QACZ;AACA,cAAM,aAAa;AAAA,UACjB;AAAA,UACA;AAAA,UACA,UAAU;AAAA,UACV,YAAY,KAAK;AAAA,UACjB,gBAAgB,KAAK,cAAc;AAAA,UACnC,kBAAkB,KAAK,cAAc;AAAA,UACrC,eAAe,KAAK,cAAc;AAAA,UAClC,cAAc,KAAK;AAAA,UACnB,kBAAkB,KAAK;AAAA,UACvB,gBAAgB,KAAK;AAAA,UACrB,iCAAiC,KAAK,cAAc;AAAA,UACpD,kCAAkC;AAAA,UAClC,0BAA0B,KAAK;AAAA,UAC/B,8BAA8B,KAAK;AAAA,UACnC,yBAAyB,KAAK,KAAK,QAAQ,MAAM,qBAAqB,QAAQ,OAAO,SAAS,KAAK;AAAA,UACnG,0BAA0B,KAAK,KAAK,QAAQ,MAAM,sBAAsB,QAAQ,OAAO,SAAS,KAAK;AAAA,QACvG;AACA,eAAO;AAAA,MACT;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,YAAY,KAAK,OAAO,KAAK,0BAA0B,MAAM,IAAI;AAAA,MACzI;AAAA,MACA,eAAe,MAAM;AACnB,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,YAAY,KAAK,OAAO,KAAK,0BAA0B,MAAM,IAAI;AAAA,MACzI;AAAA,MACA,iBAAiB,MAAM;AACrB,gBAAQ,MAAM,YAAY,aAAa,OAAO,0BAA0B,MAAM,KAAK,YAAY,KAAK,OAAO,KAAK,0BAA0B,MAAM,IAAI;AAAA,MACtJ;AAAA,MACA,eAAe,MAAM;AACnB,gBAAQ,MAAM,YAAY,aAAa,OAAO,uBAAuB,MAAM,KAAK,YAAY,KAAK,OAAO,KAAK,0BAA0B,MAAM,IAAI;AAAA,MACnJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,wBAAwB,cAAc;AACpC,YAAI,KAAK,mBAAmB;AAC1B;AAAA,QACF;AACA,aAAK,oBAAoB;AACzB,aAAK,oBAAoB,QAAQ,cAAY,SAAS,YAAY,CAAC;AAAA,MACrE;AAAA;AAAA;AAAA;AAAA,MAIA,mBAAmB;AACjB,aAAK,wBAAwB,KAAK;AAGlC,qBAAa,MAAM;AACjB,qBAAW,QAAQ,KAAK,aAAa;AACnC,iBAAK,aAAa;AAAA,UACpB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,sBAAsB,UAAU;AAC9B,aAAK,oBAAoB,KAAK,QAAQ;AAAA,MACxC;AAAA,MACA,sBAAsB;AACpB,YAAI,CAAC,KAAK,kBAAkB;AAC1B;AAAA,QACF;AACA,qBAAa,KAAK,gBAAgB;AAClC,aAAK,mBAAmB;AAAA,MAC1B;AAAA,MACA,wBAAwB;AACtB,YAAI,CAAC,KAAK,oBAAoB;AAC5B;AAAA,QACF;AACA,qBAAa,KAAK,kBAAkB;AACpC,aAAK,qBAAqB;AAAA,MAC5B;AAAA,MACA,cAAc;AACZ,eAAO,KAAK,kBAAkB,MAAM,KAAK,yBAAyB,KAAK,YAAY,OAAO;AAAA,MAC5F;AAAA,MACA,gBAAgB;AACd,YAAI,IAAI;AACR,aAAK,oBAAoB;AACzB,YAAI,CAAC,KAAK,YAAY,GAAG;AACvB,eAAK,2BAA2B;AAChC;AAAA,QACF;AACA,YAAI,KAAK,iBAAiB;AACxB,eAAK,kBAAkB;AAAA,QACzB;AACA,aAAK,eAAe,+BAA+B,KAAK,qBAAqB,IAAI;AACjF,YAAI,CAAC,KAAK,oBAAoB;AAC5B,eAAK,qBAAqB,WAAW,MAAM;AACzC,iBAAK,eAAe,sCAAsC;AAC1D,iBAAK,iBAAiB;AAAA,UACxB,GAAG,KAAK,kBAAkB;AAC1B,WAAC,MAAM,KAAK,KAAK,oBAAoB,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,QAC7F;AACA,YAAI;AACF,eAAK,QAAQ,KAAK,CAAC,KAAK,UAAU,YAAY;AAC5C,gBAAI,KAAK;AACP,mBAAK,eAAe,4BAA4B,IAAI,OAAO;AAC3D,mBAAK,iBAAiB;AAAA,YACxB;AACA,iBAAK,eAAe,wBAAwB;AAC5C,iBAAK,sBAAsB;AAC3B,iBAAK,6BAA6B;AAAA,UACpC,CAAC;AAAA,QACH,SAAS,GAAG;AAGV,eAAK,iBAAiB;AAAA,QACxB;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,+BAA+B;AAC7B,YAAI,IAAI;AACR,YAAI,CAAC,KAAK,YAAY,GAAG;AACvB;AAAA,QACF;AACA,YAAI,KAAK,0BAA0B;AACjC,eAAK,2BAA2B;AAChC,eAAK,cAAc;AAAA,QACrB,WAAW,CAAC,KAAK,oBAAoB,CAAC,KAAK,oBAAoB;AAC7D,eAAK,eAAe,kCAAkC,KAAK,kBAAkB,IAAI;AACjF,eAAK,oBAAoB,MAAM,KAAK,WAAW,MAAM;AACnD,iBAAK,cAAc;AAAA,UACrB,GAAG,KAAK,eAAe,GAAG,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,QAClF;AAAA,MAGF;AAAA,MACA,qBAAqB;AACnB,YAAI,KAAK,kBAAkB;AACzB,uBAAa,KAAK,gBAAgB;AAClC,eAAK,mBAAmB;AAAA,QAC1B;AACA,aAAK,sBAAsB;AAAA,MAC7B;AAAA,MACA,iBAAiB,MAAM;AACrB,aAAK,YAAY,OAAO,IAAI;AAC5B,YAAI,KAAK,YAAY,SAAS,GAAG;AAC/B,eAAK,QAAQ,MAAM;AAAA,QACrB;AAAA,MACF;AAAA,MACA,cAAc,MAAM;AAClB,aAAK,YAAY,IAAI,IAAI;AACzB,YAAI,KAAK,YAAY,SAAS,GAAG;AAC/B,eAAK,QAAQ,IAAI;AACjB,cAAI,CAAC,KAAK,uBAAuB;AAC/B,iBAAK,6BAA6B;AAAA,UACpC;AAAA,QACF;AAAA,MACF;AAAA,MACA,WAAW,UAAU,MAAM,QAAQ,UAAU,4BAA4B;AACvE,cAAM,UAAU,SAAS,eAAe;AACxC,gBAAQ,sBAAsB,IAAI;AAClC,gBAAQ,uBAAuB,IAAI,KAAK;AACxC,gBAAQ,yBAAyB,IAAI;AACrC,gBAAQ,mBAAmB,IAAI;AAC/B,gBAAQ,iBAAiB,IAAI;AAC7B,gBAAQ,eAAe,IAAI;AAC3B,YAAI;AASJ,YAAI;AACF,wBAAc,KAAK,QAAQ,QAAQ,OAAO;AAAA,QAC5C,SAAS,GAAG;AACV,eAAK,iBAAiB;AACtB,gBAAM;AAAA,QACR;AACA,aAAK,iBAAiB,wBAAwB,KAAK,QAAQ,MAAM,kBAAkB,0BAA0B,KAAK,QAAQ,MAAM,gBAAgB;AAChJ,aAAK,eAAe,oBAAoB,KAAK,QAAQ,SAAS,wBAAwB,KAAK,QAAQ,YAAY,+BAA+B,KAAK,QAAQ,OAAO,SAAS;AAC3K,YAAI;AAEJ,YAAI;AACJ,YAAI,KAAK,iBAAiB;AACxB,eAAK,cAAc,eAAe;AAClC,yBAAe;AAAA,YACb,gBAAgB,MAAM;AACpB,kBAAI;AACJ,mBAAK,gBAAgB;AACrB,mBAAK,2BAA2B,oBAAI,KAAK;AACzC,eAAC,KAAK,2BAA2B,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,0BAA0B;AAAA,YAC1H;AAAA,YACA,oBAAoB,MAAM;AACxB,kBAAI;AACJ,mBAAK,oBAAoB;AACzB,mBAAK,+BAA+B,oBAAI,KAAK;AAC7C,eAAC,KAAK,2BAA2B,wBAAwB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,0BAA0B;AAAA,YAC9H;AAAA,YACA,WAAW,YAAU;AACnB,kBAAI;AACJ,eAAC,KAAK,2BAA2B,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,4BAA4B,MAAM;AAC3H,mBAAK,iBAAiB,IAAI;AAAA,YAC5B;AAAA,YACA,aAAa,aAAW;AACtB,kBAAI;AACJ,kBAAI,SAAS;AACX,qBAAK,cAAc,iBAAiB;AAAA,cACtC,OAAO;AACL,qBAAK,cAAc,cAAc;AAAA,cACnC;AACA,eAAC,KAAK,2BAA2B,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,4BAA4B,OAAO;AAAA,YAChI;AAAA,UACF;AAAA,QACF,OAAO;AACL,yBAAe;AAAA,YACb,gBAAgB,MAAM;AACpB,kBAAI;AACJ,eAAC,KAAK,2BAA2B,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,0BAA0B;AAAA,YAC1H;AAAA,YACA,oBAAoB,MAAM;AACxB,kBAAI;AACJ,eAAC,KAAK,2BAA2B,wBAAwB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,0BAA0B;AAAA,YAC9H;AAAA,YACA,WAAW,YAAU;AACnB,kBAAI;AACJ,eAAC,KAAK,2BAA2B,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,4BAA4B,MAAM;AAC3H,mBAAK,iBAAiB,IAAI;AAAA,YAC5B;AAAA,YACA,aAAa,aAAW;AACtB,kBAAI;AACJ,eAAC,KAAK,2BAA2B,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,4BAA4B,OAAO;AAAA,YAChI;AAAA,UACF;AAAA,QACF;AACA,eAAO,IAAI,kBAAkB,oBAAoB,aAAa,cAAc,UAAU,OAAO,GAAG,cAAc,mBAAmB,CAAC;AAClI,aAAK,cAAc,IAAI;AACvB,eAAO;AAAA,MACT;AAAA,MACA,iBAAiB;AACf,eAAO,KAAK;AAAA,MACd;AAAA,MACA,cAAc;AACZ,eAAO,KAAK;AAAA,MACd;AAAA,MACA,aAAa;AACX,eAAO,KAAK;AAAA,MACd;AAAA,MACA,WAAW;AACT,aAAK,QAAQ,MAAM;AACnB,SAAC,GAAG,WAAW,uBAAuB,KAAK,WAAW;AAAA,MACxD;AAAA,IACF;AACA,QAAM,2BAAN,MAA+B;AAAA,MAC7B,YAAY,eAAe;AACzB,aAAK,gBAAgB;AACrB,aAAK,UAAU;AACf,aAAK,aAAa;AAAA,MACpB;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,cAAc,GAAG,aAAa,aAAa,KAAK,aAAa,IAAI,MAAM,IAAI;AAAA,MAC3H;AAAA,MACA,cAAc,SAASC,cAAa,SAAS,uBAAuB;AAClE,YAAI,KAAK,YAAY;AACnB,iBAAO,QAAQ,OAAO;AAAA,QACxB;AACA,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAI,IAAI,IAAI;AACZ,cAAI;AACJ,cAAI,sBAAsB,YAAY;AACpC,0BAAc,GAAG,aAAa,aAAa,sBAAsB,UAAU;AAC3E,iBAAK,MAAM,+CAA+C,GAAG,aAAa,aAAa,sBAAsB,UAAU,CAAC;AAAA,UAC1H,OAAO;AACL,yBAAa;AACb,iBAAK,MAAM,iCAAiC,GAAG,qBAAqB,2BAA2B,OAAO,CAAC;AAAA,UACzG;AACA,gBAAM,mBAAmB,GAAG,WAAW,sBAAsB,KAAK,sBAAsB,gBAAgB,QAAQ,OAAO,SAAS,KAAK,KAAK,aAAa;AACvJ,cAAI,oBAAoBA,aAAY,sBAAsB,KAAK,CAAC;AAChE,4BAAkB,2BAA2B,OAAO;AACpD,cAAI,kCAAkC,SAAS;AAC7C,8BAAkB,mBAAmB,QAAQ,8BAA8B;AAAA,UAC7E,OAAO;AAKL,8BAAkB,mBAAmB,OAAO;AAAA,UAC9C;AACA,cAAI,gBAAgB;AACpB,cAAI,mBAAmB,mBAAmB;AACxC,4BAAgB;AAIhB,gBAAI,QAAQ,+BAA+B,GAAG;AAC5C,oBAAM,wBAAwB,QAAQ,+BAA+B;AACrE,gCAAkB,sBAAsB,CAAC,MAAM,SAAS;AACtD,wBAAQ,GAAG,MAAM,qBAAqB,uBAAuB,IAAI;AAAA,cACnE;AACA,gCAAkB,aAAa;AAAA,YACjC,OAAO;AACL,oBAAM,qBAAqB,MAAM,MAAM,GAAG,aAAa,eAAe,eAAe,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,QAAQ,OAAO,SAAS,KAAK;AAEvK,gCAAkB,aAAa;AAAA,YACjC;AACA,gBAAI,sBAAsB,QAAQ;AAMhC,gCAAkB,mBAAmB,CAAC,WAAW,WAAW;AAC1D,uBAAO,sBAAsB;AAAA,cAC/B;AAAA,YACF;AAAA,UACF,OAAO;AAIL,8BAAkB,mBAAmB,CAAC,WAAW,WAAW;AAC1D,kBAAI,sBAAsB,QAAQ;AAChC,uBAAO,sBAAsB;AAAA,cAC/B,OAAO;AAIL,uBAAO,IAAI,QAAQ,OAAO;AAAA,cAC5B;AAAA,YACF;AAAA,UACF;AACA,8BAAoB,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,iBAAiB,GAAG,OAAO,GAAG;AAAA,YAC9F,aAAa,QAAQ,4BAA4B,MAAM;AAAA,UACzD,CAAC;AAkBD,gBAAM,UAAU,MAAM,QAAQ,gBAAgB,iBAAiB,iBAAiB;AAChF,eAAK,UAAU;AACf,cAAI,eAAe;AACnB,kBAAQ,MAAM;AACd,kBAAQ,KAAK,WAAW,MAAM;AAC5B,oBAAQ,mBAAmB;AAC3B,oBAAQ,IAAI,eAAe,SAAS,SAAS,SAAS,UAAU,CAAC;AACjE,iBAAK,UAAU;AAAA,UACjB,CAAC;AACD,kBAAQ,KAAK,SAAS,MAAM;AAC1B,iBAAK,UAAU;AAEf,yBAAa,MAAM;AACjB,qBAAO,GAAG,YAAY,MAAK,oBAAI,KAAK,GAAE,YAAY,CAAC,GAAG;AAAA,YACxD,CAAC;AAAA,UACH,CAAC;AACD,kBAAQ,KAAK,SAAS,WAAS;AAC7B,2BAAe,MAAM;AACrB,iBAAK,MAAM,kCAAkC,YAAY;AAAA,UAC3D,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,MACA,QAAQ,SAASA,cAAa,SAAS;AACrC,YAAI,IAAI;AACR,YAAI,KAAK,YAAY;AACnB,iBAAO,QAAQ,OAAO;AAAA,QACxB;AAKA,cAAM,oBAAoBA,aAAY,sBAAsB,KAAK,CAAC;AAClE,YAAI,mBAAmB,mBAAmB;AACxC,4BAAkB,gBAAgB,CAAC,IAAI;AAIvC,cAAI,QAAQ,+BAA+B,GAAG;AAC5C,kBAAM,wBAAwB,QAAQ,+BAA+B;AACrE,8BAAkB,sBAAsB,CAAC,MAAM,SAAS;AACtD,sBAAQ,GAAG,MAAM,qBAAqB,uBAAuB,IAAI;AAAA,YACnE;AACA,8BAAkB,aAAa;AAAA,UACjC,OAAO;AACL,gBAAI,8BAA8B,SAAS;AAKzC,oBAAM,cAAc,GAAG,WAAW,sBAAsB,MAAM,GAAG,aAAa,UAAU,QAAQ,0BAA0B,CAAC,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,gBAC7J,MAAM;AAAA,cACR,CAAC;AACD,oBAAM,YAAY,GAAG,aAAa,eAAe,UAAU;AAC3D,gCAAkB,cAAc,KAAK,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,UAAU,QAAQ,OAAO,SAAS,KAAK;AAAA,YAC3I;AAAA,UACF;AACA,cAAI,QAAQ,4BAA4B,GAAG;AACzC,8BAAkB,cAAc;AAAA,UAClC;AAAA,QACF;AACA,gBAAQ,GAAG,aAAa,sBAAsB,SAAS,SAAS,iBAAiB,EAAE,KAAK,YAAU,KAAK,cAAc,SAASA,cAAa,SAAS,MAAM,CAAC;AAAA,MAC7J;AAAA,MACA,WAAW;AACT,YAAI;AACJ,aAAK,aAAa;AAClB,SAAC,KAAK,KAAK,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG,MAAM;AAClE,aAAK,UAAU;AAAA,MACjB;AAAA,IACF;AACA,IAAAD,SAAQ,2BAA2B;AAAA;AAAA;;;AC7kBnC;AAAA,4DAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,oBAAoBA,SAAQ,iBAAiB;AACrD,QAAM,oBAAoB;AAC1B,QAAM,eAAe;AACrB,QAAM,uBAAuB;AAC7B,QAAM,eAAe;AACrB,QAAM,cAAc;AAMpB,QAAM,qBAAqB;AAC3B,QAAM,iBAAN,MAAqB;AAAA;AAAA;AAAA;AAAA;AAAA,MAKnB,cAAc;AACZ,aAAK,OAAO,uBAAO,OAAO,IAAI;AAI9B,aAAK,eAAe;AAAA,MACtB;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,yBAAyB;AACvB,YAAI,wBAAwB;AAK5B,mBAAW,iBAAiB,KAAK,MAAM;AACrC,gBAAM,qBAAqB,KAAK,KAAK,aAAa;AAClD,gBAAM,mBAAmB,mBAAmB,OAAO,WAAS,CAAC,MAAM,WAAW,cAAc,CAAC;AAC7F,cAAI,iBAAiB,SAAS,GAAG;AAC/B,oCAAwB;AAAA,UAC1B;AAIA,eAAK,KAAK,aAAa,IAAI;AAAA,QAC7B;AAIA,YAAI,yBAAyB,KAAK,iBAAiB,MAAM;AACvD,wBAAc,KAAK,YAAY;AAC/B,eAAK,eAAe;AAAA,QACtB;AAAA,MACF;AAAA;AAAA;AAAA;AAAA,MAIA,oBAAoB;AAClB,YAAI,IAAI;AACR,YAAI,KAAK,iBAAiB,MAAM;AAC9B,eAAK,eAAe,YAAY,MAAM;AACpC,iBAAK,uBAAuB;AAAA,UAC9B,GAAG,kBAAkB;AAGrB,WAAC,MAAM,KAAK,KAAK,cAAc,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,QACvF;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,sBAAsB,kBAAkB,kBAAkB,kBAAkB,oBAAoB;AAC9F,aAAK,kBAAkB;AACvB,cAAM,iBAAiB,GAAG,aAAa,aAAa,gBAAgB;AACpE,YAAI,iBAAiB,KAAK,MAAM;AAC9B,gBAAM,qBAAqB,KAAK,KAAK,aAAa;AAClD,qBAAW,iBAAiB,oBAAoB;AAC9C,iBAAK,GAAG,qBAAqB,wBAAwB,kBAAkB,cAAc,iBAAiB,MAAM,GAAG,kBAAkB,qBAAqB,kBAAkB,cAAc,gBAAgB,KAAK,mBAAmB,QAAQ,cAAc,kBAAkB,GAAG;AACvQ,qBAAO,cAAc;AAAA,YACvB;AAAA,UACF;AAAA,QACF;AAEA,cAAM,aAAa,IAAI,aAAa,WAAW,kBAAkB,kBAAkB,kBAAkB,oBAAoB,IAAI,YAAY,yBAAyB,gBAAgB,CAAC;AACnL,YAAI,EAAE,iBAAiB,KAAK,OAAO;AACjC,eAAK,KAAK,aAAa,IAAI,CAAC;AAAA,QAC9B;AACA,aAAK,KAAK,aAAa,EAAE,KAAK;AAAA,UAC5B,mBAAmB;AAAA,UACnB;AAAA,UACA;AAAA,UACA;AAAA,QACF,CAAC;AACD,mBAAW,IAAI;AACf,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAA,SAAQ,iBAAiB;AACzB,QAAM,uBAAuB,IAAI,eAAe;AAKhD,aAAS,kBAAkBC,SAAQ;AACjC,UAAIA,SAAQ;AACV,eAAO;AAAA,MACT,OAAO;AACL,eAAO,IAAI,eAAe;AAAA,MAC5B;AAAA,IACF;AACA,IAAAD,SAAQ,oBAAoB;AAAA;AAAA;;;ACvI5B;AAAA,yDAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,qBAAqBA,SAAQ,cAAc;AACnD,QAAM,cAAN,MAAkB;AAAA,MAChB,YAAY,SAAS;AACnB,aAAK,UAAU;AAAA,MACjB;AAAA,MACA,aAAa,UAAU;AACrB,YAAI,SAAS;AACb,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,mBAAS,KAAK,QAAQ,CAAC,EAAE,aAAa,MAAM;AAAA,QAC9C;AACA,eAAO;AAAA,MACT;AAAA,MACA,gBAAgB,UAAU;AACxB,YAAI,SAAS;AACb,iBAAS,IAAI,KAAK,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,mBAAS,KAAK,QAAQ,CAAC,EAAE,gBAAgB,MAAM;AAAA,QACjD;AACA,eAAO;AAAA,MACT;AAAA,MACA,YAAY,SAAS;AACnB,YAAI,SAAS;AACb,iBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,mBAAS,KAAK,QAAQ,CAAC,EAAE,YAAY,MAAM;AAAA,QAC7C;AACA,eAAO;AAAA,MACT;AAAA,MACA,eAAe,SAAS;AACtB,YAAI,SAAS;AACb,iBAAS,IAAI,KAAK,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,mBAAS,KAAK,QAAQ,CAAC,EAAE,eAAe,MAAM;AAAA,QAChD;AACA,eAAO;AAAA,MACT;AAAA,MACA,gBAAgB,QAAQ;AACtB,YAAI,SAAS;AACb,iBAAS,IAAI,KAAK,QAAQ,SAAS,GAAG,KAAK,GAAG,KAAK;AACjD,mBAAS,KAAK,QAAQ,CAAC,EAAE,gBAAgB,MAAM;AAAA,QACjD;AACA,eAAO;AAAA,MACT;AAAA,MACA,KAAK,SAAS;AACZ,aAAK,QAAQ,QAAQ,GAAG,OAAO;AAAA,MACjC;AAAA,MACA,aAAa;AACX,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AACA,IAAAA,SAAQ,cAAc;AACtB,QAAM,qBAAN,MAAM,oBAAmB;AAAA,MACvB,YAAY,WAAW;AACrB,aAAK,YAAY;AAAA,MACnB;AAAA,MACA,KAAK,iBAAiB;AACpB,aAAK,UAAU,QAAQ,GAAG,eAAe;AAAA,MAC3C;AAAA,MACA,QAAQ;AACN,eAAO,IAAI,oBAAmB,CAAC,GAAG,KAAK,SAAS,CAAC;AAAA,MACnD;AAAA,MACA,eAAe;AACb,eAAO,IAAI,YAAY,KAAK,UAAU,IAAI,aAAW,QAAQ,aAAa,CAAC,CAAC;AAAA,MAC9E;AAAA,IACF;AACA,IAAAA,SAAQ,qBAAqB;AAAA;AAAA;;;ACnF7B;AAAA,mEAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,wBAAwB;AAChC,QAAI;AACJ,KAAC,SAAUC,wBAAuB;AAChC,MAAAA,uBAAsBA,uBAAsB,UAAU,IAAI,CAAC,IAAI;AAC/D,MAAAA,uBAAsBA,uBAAsB,SAAS,IAAI,CAAC,IAAI;AAC9D,MAAAA,uBAAsBA,uBAAsB,MAAM,IAAI,CAAC,IAAI;AAAA,IAC7D,GAAG,0BAA0BD,SAAQ,wBAAwB,wBAAwB,CAAC,EAAE;AAAA;AAAA;;;AC3BxF;AAAA,mDAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,aAAa;AACrB,QAAM,aAAN,MAAiB;AAAA,MACT,aAAa,UAAU;AAAA;AAC3B,iBAAO;AAAA,QACT;AAAA;AAAA,MACA,gBAAgB,UAAU;AACxB,eAAO;AAAA,MACT;AAAA,MACM,YAAY,SAAS;AAAA;AACzB,iBAAO;AAAA,QACT;AAAA;AAAA,MACM,eAAe,SAAS;AAAA;AAC5B,iBAAO;AAAA,QACT;AAAA;AAAA,MACA,gBAAgB,QAAQ;AACtB,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAA,SAAQ,aAAa;AAAA;AAAA;;;ACvCrB;AAAA,+DAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,2BAA2BA,SAAQ,oBAAoB;AAC/D,QAAM,OAAO,UAAQ,MAAM;AAC3B,QAAM,2BAA2B;AACjC,QAAM,cAAc;AACpB,QAAM,WAAW;AACjB,QAAM,UAAU;AAChB,QAAM,4BAA4B,SAAO;AACvC,aAAO,OAAO,QAAQ,YAAY,OAAO,yBAAyB,sBAAsB,GAAG,MAAM;AAAA,IACnG;AACA,QAAM,qBAAN,MAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMjB,aAAa,SAAS,UAAU;AAAA;AACpC,cAAI,gBAAgB;AACpB,cAAI,UAAU;AACZ,4BAAgB,MAAM,KAAK,gBAAgB,aAAa;AAAA,UAC1D;AACA,gBAAM,SAAS,OAAO,YAAY,cAAc,SAAS,CAAC;AAC1D,iBAAO,WAAW,WAAW,IAAI,GAAG,CAAC;AACrC,iBAAO,cAAc,cAAc,QAAQ,CAAC;AAC5C,wBAAc,KAAK,QAAQ,CAAC;AAC5B,iBAAO;AAAA,QACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAKM,YAAY,MAAM;AAAA;AACtB,gBAAM,aAAa,KAAK,UAAU,CAAC,MAAM;AACzC,cAAI,gBAAgB,KAAK,MAAM,CAAC;AAChC,cAAI,YAAY;AACd,4BAAgB,MAAM,KAAK,kBAAkB,aAAa;AAAA,UAC5D;AACA,iBAAO;AAAA,QACT;AAAA;AAAA,IACF;AACA,QAAM,kBAAN,cAA8B,mBAAmB;AAAA,MACzC,gBAAgB,SAAS;AAAA;AAC7B,iBAAO;AAAA,QACT;AAAA;AAAA,MACM,aAAa,SAAS,UAAU;AAAA;AACpC,gBAAM,SAAS,OAAO,YAAY,QAAQ,SAAS,CAAC;AAGpD,iBAAO,WAAW,GAAG,CAAC;AACtB,iBAAO,cAAc,QAAQ,QAAQ,CAAC;AACtC,kBAAQ,KAAK,QAAQ,CAAC;AACtB,iBAAO;AAAA,QACT;AAAA;AAAA,MACA,kBAAkB,SAAS;AACzB,eAAO,QAAQ,OAAO,IAAI,MAAM,qEAAqE,CAAC;AAAA,MACxG;AAAA,IACF;AACA,QAAM,iBAAN,cAA6B,mBAAmB;AAAA,MAC9C,YAAY,sBAAsB;AAChC,cAAM;AACN,aAAK,uBAAuB;AAAA,MAC9B;AAAA,MACA,gBAAgB,SAAS;AACvB,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,eAAK,QAAQ,SAAS,CAAC,KAAK,WAAW;AACrC,gBAAI,KAAK;AACP,qBAAO,GAAG;AAAA,YACZ,OAAO;AACL,sBAAQ,MAAM;AAAA,YAChB;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,MACA,kBAAkB,SAAS;AACzB,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAI,cAAc;AAClB,gBAAM,eAAe,CAAC;AACtB,gBAAM,eAAe,KAAK,cAAc;AACxC,uBAAa,GAAG,QAAQ,WAAS;AAC/B,yBAAa,KAAK,KAAK;AACvB,2BAAe,MAAM;AACrB,gBAAI,KAAK,yBAAyB,MAAM,cAAc,KAAK,sBAAsB;AAC/E,2BAAa,QAAQ;AACrB,qBAAO;AAAA,gBACL,MAAM,YAAY,OAAO;AAAA,gBACzB,SAAS,4DAA4D,KAAK,oBAAoB;AAAA,cAChG,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AACD,uBAAa,GAAG,OAAO,MAAM;AAC3B,oBAAQ,OAAO,OAAO,YAAY,CAAC;AAAA,UACrC,CAAC;AACD,uBAAa,MAAM,OAAO;AAC1B,uBAAa,IAAI;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AACA,QAAM,cAAN,cAA0B,mBAAmB;AAAA,MAC3C,YAAY,sBAAsB;AAChC,cAAM;AACN,aAAK,uBAAuB;AAAA,MAC9B;AAAA,MACA,gBAAgB,SAAS;AACvB,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,eAAK,KAAK,SAAS,CAAC,KAAK,WAAW;AAClC,gBAAI,KAAK;AACP,qBAAO,GAAG;AAAA,YACZ,OAAO;AACL,sBAAQ,MAAM;AAAA,YAChB;AAAA,UACF,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,MACA,kBAAkB,SAAS;AACzB,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAI,cAAc;AAClB,gBAAM,eAAe,CAAC;AACtB,gBAAM,eAAe,KAAK,aAAa;AACvC,uBAAa,GAAG,QAAQ,WAAS;AAC/B,yBAAa,KAAK,KAAK;AACvB,2BAAe,MAAM;AACrB,gBAAI,KAAK,yBAAyB,MAAM,cAAc,KAAK,sBAAsB;AAC/E,2BAAa,QAAQ;AACrB,qBAAO;AAAA,gBACL,MAAM,YAAY,OAAO;AAAA,gBACzB,SAAS,4DAA4D,KAAK,oBAAoB;AAAA,cAChG,CAAC;AAAA,YACH;AAAA,UACF,CAAC;AACD,uBAAa,GAAG,OAAO,MAAM;AAC3B,oBAAQ,OAAO,OAAO,YAAY,CAAC;AAAA,UACrC,CAAC;AACD,uBAAa,MAAM,OAAO;AAC1B,uBAAa,IAAI;AAAA,QACnB,CAAC;AAAA,MACH;AAAA,IACF;AACA,QAAM,iBAAN,cAA6B,mBAAmB;AAAA,MAC9C,YAAY,iBAAiB;AAC3B,cAAM;AACN,aAAK,kBAAkB;AAAA,MACzB;AAAA,MACA,gBAAgB,SAAS;AACvB,eAAO,QAAQ,OAAO,IAAI,MAAM,mEAAmE,KAAK,eAAe,EAAE,CAAC;AAAA,MAC5H;AAAA,MACA,kBAAkB,SAAS;AAEzB,eAAO,QAAQ,OAAO,IAAI,MAAM,qCAAqC,KAAK,eAAe,EAAE,CAAC;AAAA,MAC9F;AAAA,IACF;AACA,aAAS,sBAAsB,iBAAiB,uBAAuB;AACrE,cAAQ,iBAAiB;AAAA,QACvB,KAAK;AACH,iBAAO,IAAI,gBAAgB;AAAA,QAC7B,KAAK;AACH,iBAAO,IAAI,eAAe,qBAAqB;AAAA,QACjD,KAAK;AACH,iBAAO,IAAI,YAAY,qBAAqB;AAAA,QAC9C;AACE,iBAAO,IAAI,eAAe,eAAe;AAAA,MAC7C;AAAA,IACF;AACA,QAAM,oBAAN,cAAgC,SAAS,WAAW;AAAA,MAClD,YAAY,gBAAgB,oBAAoB;AAC9C,YAAI,IAAI;AACR,cAAM;AACN,aAAK,qBAAqB;AAC1B,aAAK,kBAAkB,IAAI,gBAAgB;AAC3C,aAAK,qBAAqB,IAAI,gBAAgB;AAC9C,aAAK,8BAA8B;AACnC,cAAM,0BAA0B,eAAe,oCAAoC;AACnF,aAAK,2BAA2B,KAAK,eAAe,iCAAiC,OAAO,QAAQ,OAAO,SAAS,KAAK,YAAY;AACrI,YAAI,4BAA4B,QAAW;AACzC,cAAI,0BAA0B,uBAAuB,GAAG;AACtD,kBAAM,yBAAyB,yBAAyB,sBAAsB,uBAAuB;AACrG,kBAAM,4BAA4B,KAAK,mBAAmB,mCAAmC,QAAQ,OAAO,SAAS,SAAS,GAAG,MAAM,GAAG;AAQ1I,gBAAI,CAAC,4BAA4B,yBAAyB,SAAS,sBAAsB,GAAG;AAC1F,mBAAK,8BAA8B;AACnC,mBAAK,kBAAkB,sBAAsB,KAAK,6BAA6B,EAAE;AAAA,YACnF;AAAA,UACF,OAAO;AACL,oBAAQ,IAAI,YAAY,aAAa,OAAO,yEAAyE,uBAAuB,EAAE;AAAA,UAChJ;AAAA,QACF;AAAA,MACF;AAAA,MACM,aAAa,UAAU;AAAA;AAC3B,gBAAM,UAAU,MAAM;AACtB,kBAAQ,IAAI,wBAAwB,uBAAuB;AAC3D,kBAAQ,IAAI,mBAAmB,UAAU;AAEzC,cAAI,KAAK,gCAAgC,YAAY;AACnD,oBAAQ,OAAO,eAAe;AAAA,UAChC,OAAO;AACL,oBAAQ,IAAI,iBAAiB,KAAK,2BAA2B;AAAA,UAC/D;AACA,iBAAO;AAAA,QACT;AAAA;AAAA,MACA,gBAAgB,UAAU;AACxB,cAAM,kBAAkB,SAAS,IAAI,eAAe;AACpD,YAAI,gBAAgB,SAAS,GAAG;AAC9B,gBAAM,WAAW,gBAAgB,CAAC;AAClC,cAAI,OAAO,aAAa,UAAU;AAChC,iBAAK,qBAAqB,sBAAsB,UAAU,KAAK,uBAAuB;AAAA,UACxF;AAAA,QACF;AACA,iBAAS,OAAO,eAAe;AAG/B,cAAM,iCAAiC,SAAS,IAAI,sBAAsB,EAAE,CAAC;AAC7E,YAAI,gCAAgC;AAClC,eAAK,mBAAmB,gCAAgC;AACxD,gBAAM,2BAA2B,+BAA+B,MAAM,GAAG;AACzE,cAAI,CAAC,yBAAyB,SAAS,KAAK,2BAA2B,GAAG;AACxE,iBAAK,kBAAkB,IAAI,gBAAgB;AAC3C,iBAAK,8BAA8B;AAAA,UACrC;AAAA,QACF;AACA,iBAAS,OAAO,sBAAsB;AACtC,eAAO;AAAA,MACT;AAAA,MACM,YAAY,SAAS;AAAA;AACzB,cAAI;AAIJ,gBAAM,kBAAkB,MAAM;AAC9B,cAAI;AACJ,cAAI,KAAK,2BAA2B,iBAAiB;AACnD,uBAAW;AAAA,UACb,OAAO;AACL,0BAAc,KAAK,gBAAgB,WAAW,QAAQ,OAAO,SAAS,KAAK,KAAK,OAAmC;AAAA,UACrH;AACA,iBAAO;AAAA,YACL,SAAS,MAAM,KAAK,gBAAgB,aAAa,gBAAgB,SAAS,QAAQ;AAAA,YAClF,OAAO,gBAAgB;AAAA,UACzB;AAAA,QACF;AAAA;AAAA,MACM,eAAe,SAAS;AAAA;AAK5B,iBAAO,KAAK,mBAAmB,YAAY,MAAM,OAAO;AAAA,QAC1D;AAAA;AAAA,IACF;AACA,IAAAA,SAAQ,oBAAoB;AAC5B,QAAM,2BAAN,MAA+B;AAAA,MAC7B,YAAY,SAAS,SAAS;AAC5B,aAAK,UAAU;AACf,aAAK,qBAAqB,CAAC;AAAA,MAC7B;AAAA,MACA,eAAe;AACb,eAAO,IAAI,kBAAkB,KAAK,SAAS,KAAK,kBAAkB;AAAA,MACpE;AAAA,IACF;AACA,IAAAA,SAAQ,2BAA2B;AAAA;AAAA;;;AC1RnC;AAAA,qDAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,mBAAmBA,SAAQ,qBAAqBA,SAAQ,2BAA2BA,SAAQ,cAAc;AACjH,aAAS,eAAe,cAAc;AACpC,UAAI,WAAW;AACf,iBAAW,YAAY,cAAc;AACnC,cAAM,gBAAgB,oBAAoB,OAAO,SAAS,QAAQ,IAAI;AACtE,YAAI,gBAAgB,UAAU;AAC5B,qBAAW;AAAA,QACb;AAAA,MACF;AACA,aAAO;AAAA,IACT;AACA,IAAAA,SAAQ,cAAc;AACtB,QAAM,QAAQ,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,GAAI,GAAG,CAAC,KAAK,KAAK,GAAI,GAAG,CAAC,KAAK,KAAK,KAAK,GAAI,CAAC;AAC7E,aAAS,yBAAyB,UAAU;AAC1C,YAAM,OAAM,oBAAI,KAAK,GAAE,QAAQ;AAC/B,UAAI,oBAAoB,MAAM;AAC5B,mBAAW,SAAS,QAAQ;AAAA,MAC9B;AACA,YAAM,YAAY,KAAK,IAAI,WAAW,KAAK,CAAC;AAC5C,iBAAW,CAAC,MAAM,MAAM,KAAK,OAAO;AAClC,cAAM,SAAS,YAAY;AAC3B,YAAI,SAAS,KAAK;AAChB,iBAAO,OAAO,KAAK,KAAK,MAAM,CAAC,IAAI;AAAA,QACrC;AAAA,MACF;AACA,YAAM,IAAI,MAAM,mCAAmC;AAAA,IACrD;AACA,IAAAA,SAAQ,2BAA2B;AAOnC,QAAM,mBAAmB;AAUzB,aAAS,mBAAmB,UAAU;AACpC,YAAM,aAAa,oBAAoB,OAAO,SAAS,QAAQ,IAAI;AACnE,YAAM,OAAM,oBAAI,KAAK,GAAE,QAAQ;AAC/B,YAAM,UAAU,aAAa;AAC7B,UAAI,UAAU,GAAG;AACf,eAAO;AAAA,MACT,WAAW,UAAU,kBAAkB;AACrC,eAAO;AAAA,MACT,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAA,SAAQ,qBAAqB;AAC7B,aAAS,iBAAiB,UAAU;AAClC,UAAI,oBAAoB,MAAM;AAC5B,eAAO,SAAS,YAAY;AAAA,MAC9B,OAAO;AACL,cAAM,eAAe,IAAI,KAAK,QAAQ;AACtC,YAAI,OAAO,MAAM,aAAa,QAAQ,CAAC,GAAG;AACxC,iBAAO,KAAK;AAAA,QACd,OAAO;AACL,iBAAO,aAAa,YAAY;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AACA,IAAAA,SAAQ,mBAAmB;AAAA;AAAA;;;AC1F3B;AAAA,iEAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,iCAAiC;AACzC,QAAM,cAAc;AACpB,QAAM,oCAAoC,CAAC,YAAY,OAAO,IAAI,YAAY,OAAO,kBAAkB,YAAY,OAAO,WAAW,YAAY,OAAO,gBAAgB,YAAY,OAAO,qBAAqB,YAAY,OAAO,SAAS,YAAY,OAAO,cAAc,YAAY,OAAO,SAAS;AACzS,aAAS,+BAA+B,MAAM,SAAS;AACrD,UAAI,kCAAkC,SAAS,IAAI,GAAG;AACpD,eAAO;AAAA,UACL,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,sCAAsC,IAAI,IAAI,YAAY,OAAO,IAAI,CAAC,IAAI,OAAO;AAAA,QAC5F;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF;AAAA,IACF;AACA,IAAAA,SAAQ,iCAAiC;AAAA;AAAA;;;ACrCzC;AAAA,gEAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,oBAAoB;AAC5B,QAAM,uBAAuB;AAC7B,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,aAAa;AACnB,QAAM,WAAW;AACjB,QAAM,eAAe;AACrB,QAAM,UAAU;AAChB,QAAM,yBAAyB;AAC/B,QAAM,QAAQ,UAAQ,OAAO;AAC7B,QAAM,cAAc;AACpB,QAAM,oBAAN,MAAwB;AAAA,MACtB,YAAY,SAAS,YAAY,YAAY,MAAMC,cAAa,UAAU,YAAY;AACpF,YAAI,IAAI;AACR,aAAK,UAAU;AACf,aAAK,aAAa;AAClB,aAAK,aAAa;AAClB,aAAK,OAAO;AACZ,aAAK,cAAcA;AACnB,aAAK,WAAW;AAChB,aAAK,aAAa;AAClB,aAAK,QAAQ;AACb,aAAK,cAAc;AACnB,aAAK,iBAAiB;AACtB,aAAK,mBAAmB;AACxB,aAAK,QAAQ;AACb,aAAK,WAAW;AAChB,aAAK,WAAW;AAChB,aAAK,cAAc;AACnB,cAAM,YAAY,KAAK,WAAW,MAAM,GAAG;AAC3C,YAAI,cAAc;AAIlB,YAAI,UAAU,UAAU,GAAG;AACzB,wBAAc,UAAU,CAAC;AAAA,QAC3B;AACA,cAAM,YAAY,MAAM,MAAM,GAAG,aAAa,eAAe,KAAK,IAAI,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,QAAQ,OAAO,SAAS,KAAK;AAGxJ,aAAK,aAAa,WAAW,QAAQ,IAAI,WAAW;AAAA,MACtD;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,aAAa,OAAO,IAAI;AAAA,MAChG;AAAA,MACA,aAAa,QAAQ,UAAU;AAC7B,YAAI,IAAI;AACR,YAAI,CAAC,KAAK,OAAO;AACf,eAAK,QAAQ;AACb,eAAK,MAAM,6BAA6B,OAAO,OAAO,eAAe,OAAO,UAAU,GAAG;AACzF,gBAAM,cAAc,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,MAAM,GAAG;AAAA,YAC3D;AAAA,UACF,CAAC;AACD,WAAC,KAAK,KAAK,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,gBAAgB,WAAW;AACxF,WAAC,KAAK,KAAK,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,MAAM,YAAY,IAAI;AAAA,QAC7F;AAAA,MACF;AAAA,MACA,SAAS;AACP,YAAI,IAAI;AACR,YAAI,KAAK,OAAO;AACd;AAAA,QACF;AACA,YAAI,CAAC,KAAK,UAAU;AAClB,gBAAM,IAAI,MAAM,4BAA4B;AAAA,QAC9C;AACA,aAAK,MAAM,aAAa;AACxB,cAAM,aAAa,KAAK,QAAQ,OAAO,KAAK,UAAU,KAAK,WAAW,eAAe;AACrF,cAAM,mBAAmB,WAAW,aAAa,MAAM,WAAW,WAAW,eAAe,EAAE,KAAK,OAAO,WAAW,WAAW,WAAW,IAAI,KAAK,WAAW;AAC/J,aAAK,MAAM,kBAAkB,SAAS,eAAe,WAAW,cAAc,IAAI,kBAAkB,mBAAmB,gBAAgB,KAAK,WAAW,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,QAAQ,KAAK,WAAW,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ;AAC/R,gBAAQ,WAAW,gBAAgB;AAAA,UACjC,KAAK,SAAS,eAAe;AAC3B,iBAAK,YAAY,iBAAiB;AAAA,cAChC,aAAa,KAAK;AAAA,YACpB,CAAC,EAAE,KAAK,mBAAiB;AACvB,kBAAIC,KAAIC,KAAI;AAIZ,kBAAI,KAAK,OAAO;AACd,qBAAK,MAAM,2DAA2D;AACtE;AAAA,cACF;AACA,oBAAM,gBAAgB,KAAK,SAAS,MAAM;AAC1C,4BAAc,MAAM,aAAa;AACjC,kBAAI,cAAc,IAAI,eAAe,EAAE,SAAS,GAAG;AACjD,qBAAK,aAAa;AAAA,kBAChB,MAAM,YAAY,OAAO;AAAA,kBACzB,SAAS;AAAA,kBACT,UAAU,IAAI,WAAW,SAAS;AAAA,gBACpC,GAAG,WAAW;AAAA,cAChB;AACA,kBAAI,WAAW,WAAW,qBAAqB,MAAM,qBAAqB,kBAAkB,OAAO;AACjG,qBAAK,MAAM,uBAAuB,mBAAmB,gBAAgB,qBAAqB,kBAAkB,WAAW,WAAW,qBAAqB,CAAC,IAAI,oDAAoD;AAChN,qBAAK,OAAO;AACZ;AAAA,cACF;AACA,kBAAI,KAAK,aAAa,UAAU;AAC9B,8BAAc,IAAI,iBAAiB,GAAG,WAAW,0BAA0B,KAAK,QAAQ,CAAC;AAAA,cAC3F;AACA,kBAAI;AACF,qBAAK,QAAQ,WAAW,WAAW,kBAAkB,EAAE,WAAW,eAAe,KAAK,MAAM,KAAK,YAAY;AAAA,kBAC3G,mBAAmB,cAAY;AAC7B,yBAAK,MAAM,mBAAmB;AAC9B,yBAAK,SAAS,kBAAkB,QAAQ;AAAA,kBAC1C;AAAA,kBACA,kBAAkB,aAAW;AAC3B,yBAAK,MAAM,kBAAkB;AAC7B,yBAAK,SAAS,iBAAiB,OAAO;AAAA,kBACxC;AAAA,kBACA,iBAAiB,YAAU;AACzB,yBAAK,MAAM,iBAAiB;AAC5B,wBAAI,OAAO,YAAY,MAAM,UAAU,wBAAwB;AAC7D,2BAAK,aAAa,QAAQ,SAAS;AAAA,oBACrC,OAAO;AACL,2BAAK,aAAa,QAAQ,WAAW;AAAA,oBACvC;AAAA,kBACF;AAAA,gBACF,CAAC;AAAA,cACH,SAAS,OAAO;AACd,qBAAK,MAAM,+CAA+C,mBAAmB,iBAAiB,MAAM,OAAO;AAC3G,qBAAK,aAAa;AAAA,kBAChB,MAAM,YAAY,OAAO;AAAA,kBACzB,SAAS,8CAA8C,MAAM;AAAA,kBAC7D,UAAU,IAAI,WAAW,SAAS;AAAA,gBACpC,GAAG,aAAa;AAChB;AAAA,cACF;AACA,eAACA,OAAMD,MAAK,KAAK,YAAY,iBAAiB,QAAQC,QAAO,SAAS,SAASA,IAAG,KAAKD,GAAE;AACzF,eAAC,KAAK,WAAW,mBAAmB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,UAAU;AACvF,mBAAK,cAAc,WAAW;AAC9B,mBAAK,MAAM,yBAAyB,KAAK,MAAM,cAAc,IAAI,GAAG;AACpE,kBAAI,KAAK,aAAa;AACpB,qBAAK,MAAM,UAAU;AAAA,cACvB;AACA,kBAAI,KAAK,gBAAgB;AACvB,qBAAK,MAAM,uBAAuB,KAAK,eAAe,SAAS,KAAK,eAAe,OAAO;AAAA,cAC5F;AACA,kBAAI,KAAK,kBAAkB;AACzB,qBAAK,MAAM,UAAU;AAAA,cACvB;AAAA,YACF,GAAG,WAAS;AAEV,oBAAM;AAAA,gBACJ,MAAAE;AAAA,gBACA,SAAAC;AAAA,cACF,KAAK,GAAG,uBAAuB,gCAAgC,OAAO,MAAM,SAAS,WAAW,MAAM,OAAO,YAAY,OAAO,SAAS,mDAAmD,MAAM,OAAO,EAAE;AAC3M,mBAAK,aAAa;AAAA,gBAChB,MAAMD;AAAA,gBACN,SAASC;AAAA,gBACT,UAAU,IAAI,WAAW,SAAS;AAAA,cACpC,GAAG,WAAW;AAAA,YAChB,CAAC;AACD;AAAA,UACF,KAAK,SAAS,eAAe;AAC3B,kBAAM;AAAA,cACJ;AAAA,cACA;AAAA,YACF,KAAK,GAAG,uBAAuB,gCAAgC,WAAW,OAAO,MAAM,WAAW,OAAO,OAAO;AAChH,yBAAa,MAAM;AACjB,mBAAK,aAAa;AAAA,gBAChB;AAAA,gBACA;AAAA,gBACA,UAAU,WAAW,OAAO;AAAA,cAC9B,GAAG,MAAM;AAAA,YACX,CAAC;AACD;AAAA,UACF,KAAK,SAAS,eAAe;AAC3B,gBAAI,KAAK,SAAS,WAAW,EAAE,cAAc;AAC3C,mBAAK,QAAQ,iBAAiB,IAAI;AAAA,YACpC,OAAO;AACL,oBAAM;AAAA,gBACJ,MAAAD;AAAA,gBACA,SAAAC;AAAA,cACF,KAAK,GAAG,uBAAuB,gCAAgC,WAAW,OAAO,MAAM,WAAW,OAAO,OAAO;AAChH,2BAAa,MAAM;AACjB,qBAAK,aAAa;AAAA,kBAChB,MAAAD;AAAA,kBACA,SAAAC;AAAA,kBACA,UAAU,WAAW,OAAO;AAAA,gBAC9B,GAAG,WAAW;AAAA,cAChB,CAAC;AAAA,YACH;AACA;AAAA,UACF,KAAK,SAAS,eAAe;AAC3B,iBAAK,QAAQ,iBAAiB,IAAI;AAAA,QACtC;AAAA,MACF;AAAA,MACA,iBAAiB,QAAQ,SAAS;AAChC,YAAI;AACJ,aAAK,MAAM,4BAA4B,SAAS,gBAAgB,UAAU,GAAG;AAC7E,SAAC,KAAK,KAAK,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,iBAAiB,QAAQ,OAAO;AAC1F,aAAK,aAAa;AAAA,UAChB,MAAM;AAAA,UACN;AAAA,UACA,UAAU,IAAI,WAAW,SAAS;AAAA,QACpC,GAAG,WAAW;AAAA,MAChB;AAAA,MACA,UAAU;AACR,YAAI,IAAI;AACR,gBAAQ,MAAM,KAAK,KAAK,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,OAAO,QAAQ,OAAO,SAAS,KAAK,KAAK,QAAQ,UAAU;AAAA,MAC5I;AAAA,MACA,MAAM,UAAU,UAAU;AACxB,aAAK,MAAM,cAAc;AACzB,aAAK,WAAW;AAChB,aAAK,WAAW;AAChB,aAAK,OAAO;AAAA,MACd;AAAA,MACA,uBAAuB,SAAS,SAAS;AACvC,aAAK,MAAM,2CAA2C,QAAQ,MAAM;AACpE,YAAI,KAAK,OAAO;AACd,eAAK,MAAM,uBAAuB,SAAS,OAAO;AAAA,QACpD,OAAO;AACL,eAAK,iBAAiB;AAAA,YACpB;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,YAAY;AACV,aAAK,MAAM,kBAAkB;AAC7B,YAAI,KAAK,OAAO;AACd,eAAK,MAAM,UAAU;AAAA,QACvB,OAAO;AACL,eAAK,cAAc;AAAA,QACrB;AAAA,MACF;AAAA,MACA,YAAY;AACV,aAAK,MAAM,kBAAkB;AAC7B,YAAI,KAAK,OAAO;AACd,eAAK,MAAM,UAAU;AAAA,QACvB,OAAO;AACL,eAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MACA,eAAeJ,cAAa;AAC1B,cAAM,IAAI,MAAM,yBAAyB;AAAA,MAC3C;AAAA,MACA,gBAAgB;AACd,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AACA,IAAAD,SAAQ,oBAAoB;AAAA;AAAA;;;ACtQ5B;AAAA,2DAAAM,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,gBAAgB;AACxB,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,aAAa;AACnB,QAAM,UAAU;AAChB,QAAM,yBAAyB;AAC/B,QAAM,cAAc;AACpB,QAAM,gBAAN,MAAoB;AAAA,MAClB,YAAY,SAAS,QAAQ,SAAS,oBAAoBC,cAAa,YAAY;AACjF,aAAK,UAAU;AACf,aAAK,SAAS;AACd,aAAK,qBAAqB;AAC1B,aAAK,cAAcA;AACnB,aAAK,aAAa;AAClB,aAAK,QAAQ;AACb,aAAK,cAAc;AACnB,aAAK,iBAAiB;AACtB,aAAK,mBAAmB;AACxB,aAAK,QAAQ;AACb,aAAK,oBAAoB;AACzB,aAAK,qBAAqB;AAC1B,aAAK,qBAAqB;AAC1B,aAAK,WAAW;AAChB,aAAK,WAAW;AAChB,aAAK,iBAAiB,CAAC;AACvB,aAAK,gBAAgB,WAAW,MAAM;AAAA,QAAC,GAAG,CAAC;AAC3C,aAAK,cAAc;AACnB,aAAK,WAAW,QAAQ;AACxB,aAAK,OAAO,QAAQ;AACpB,YAAI,QAAQ,YAAY;AACtB,cAAI,QAAQ,QAAQ,YAAY,UAAU,cAAc;AACtD,oBAAQ,WAAW,GAAG,aAAa,MAAM;AACvC,mBAAK,iBAAiB,YAAY,OAAO,WAAW,0BAA0B;AAAA,YAChF,CAAC;AAAA,UACH;AACA,cAAI,QAAQ,QAAQ,YAAY,UAAU,UAAU;AAClD,iBAAK,MAAM,uCAAuC,QAAQ,WAAW,YAAY,CAAC;AAClF,iBAAK,YAAY,GAAG,WAAW,aAAa,KAAK,UAAU,QAAQ,WAAW,YAAY,CAAC;AAAA,UAC7F;AAAA,QACF;AACA,aAAK,MAAM,SAAS;AACpB,aAAK,iBAAiB;AAAA,MACxB;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,aAAa,OAAO,IAAI;AAAA,MAChG;AAAA,MACA,mBAAmB;AACjB,qBAAa,KAAK,aAAa;AAC/B,aAAK,MAAM,gBAAgB,GAAG,WAAW,kBAAkB,KAAK,QAAQ,CAAC;AACzE,cAAM,WAAW,GAAG,WAAW,oBAAoB,KAAK,QAAQ;AAChE,YAAI,YAAY,UAAU;AACxB,eAAK,MAAM,iCAAiC,UAAU,IAAI;AAC1D,gBAAM,iBAAiB,MAAM;AAC3B,iBAAK,iBAAiB,YAAY,OAAO,mBAAmB,mBAAmB;AAAA,UACjF;AACA,cAAI,WAAW,GAAG;AAChB,oBAAQ,SAAS,cAAc;AAAA,UACjC,OAAO;AACL,iBAAK,gBAAgB,WAAW,gBAAgB,OAAO;AAAA,UACzD;AAAA,QACF;AAAA,MACF;AAAA,MACA,aAAa,QAAQ;AACnB,YAAI,CAAC,KAAK,OAAO;AACf,eAAK,QAAQ;AACb,cAAI,CAAC,KAAK,aAAa;AACrB,iBAAK,cAAc,KAAK,mBAAmB,aAAa;AAAA,UAC1D;AACA,uBAAa,KAAK,aAAa;AAC/B,gBAAM,iBAAiB,KAAK,YAAY,gBAAgB,MAAM;AAC9D,eAAK,MAAM,6BAA6B,eAAe,OAAO,eAAe,eAAe,UAAU,GAAG;AACzG,eAAK,eAAe,QAAQ,aAAW,QAAQ,cAAc,CAAC;AAC9D,kBAAQ,SAAS,MAAM;AACrB,gBAAI;AACJ,aAAC,KAAK,KAAK,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,gBAAgB,cAAc;AAAA,UAC7F,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,mBAAmB,SAAS,SAAS;AACnC,YAAI,CAAC,KAAK,OAAO;AACf,gBAAM,IAAI,MAAM,oDAAoD;AAAA,QACtE;AACA,cAAM,QAAQ,KAAK;AACnB,aAAK,qBAAqB;AAC1B,aAAK,YAAY,YAAY,QAAQ,QAAQ;AAAA,UAC3C;AAAA,UACA,OAAO,QAAQ;AAAA,QACjB,CAAC,CAAC,EAAE,KAAK,qBAAmB;AAC1B,eAAK,qBAAqB;AAC1B,gBAAM,uBAAuB,SAAS,gBAAgB,OAAO;AAC7D,cAAI,KAAK,kBAAkB;AACzB,kBAAM,UAAU;AAAA,UAClB;AAAA,QACF,GAAG,YAAU;AACX,eAAK,iBAAiB,OAAO,MAAM,OAAO,OAAO;AAAA,QACnD,CAAC;AAAA,MACH;AAAA,MACA,YAAY;AACV,YAAI,KAAK,OAAO;AACd;AAAA,QACF;AACA,YAAI,CAAC,KAAK,YAAY,CAAC,KAAK,UAAU;AACpC,gBAAM,IAAI,MAAM,+BAA+B;AAAA,QACjD;AACA,cAAM,eAAe,KAAK,QAAQ,UAAU,KAAK,QAAQ,KAAK,QAAQ;AACtE,YAAI,aAAa,SAAS,QAAQ;AAChC,eAAK,QAAQ,mBAAmB,IAAI;AACpC;AAAA,QACF,WAAW,aAAa,SAAS,SAAS;AACxC,cAAI,KAAK,SAAS,WAAW,EAAE,cAAc;AAC3C,iBAAK,QAAQ,mBAAmB,IAAI;AAAA,UACtC,OAAO;AACL,iBAAK,aAAa,aAAa,KAAK;AAAA,UACtC;AACA;AAAA,QACF;AAEA,cAAM,SAAS,aAAa;AAC5B,YAAI,OAAO,WAAW,YAAY,OAAO,IAAI;AAC3C,gBAAM;AAAA,YACJ;AAAA,YACA;AAAA,UACF,KAAK,GAAG,uBAAuB,gCAAgC,OAAO,QAAQ,oCAAoC,KAAK,MAAM;AAC7H,eAAK,aAAa;AAAA,YAChB;AAAA,YACA;AAAA,YACA,UAAU,IAAI,WAAW,SAAS;AAAA,UACpC,CAAC;AACD;AAAA,QACF;AACA,YAAI,OAAO,aAAa,SAAS;AAC/B,gBAAM,iBAAiB,oBAAI,KAAK;AAChC,yBAAe,WAAW,eAAe,WAAW,IAAI,OAAO,aAAa,QAAQ,OAAO;AAC3F,yBAAe,gBAAgB,eAAe,gBAAgB,IAAI,OAAO,aAAa,QAAQ,QAAQ,GAAO;AAC7G,eAAK,YAAY,GAAG,WAAW,aAAa,KAAK,UAAU,cAAc;AACzE,eAAK,iBAAiB;AAAA,QACxB;AACA,aAAK,mBAAmB,KAAK,OAAO,sBAAsB;AAC1D,aAAK,cAAc,KAAK,mBAAmB,aAAa;AACxD,aAAK,YAAY,aAAa,QAAQ,QAAQ,KAAK,QAAQ,CAAC,EAAE,KAAK,sBAAoB;AACrF,eAAK,QAAQ,KAAK,QAAQ,gBAAgB,QAAQ,KAAK,QAAQ,KAAK,MAAM,KAAK,aAAa,KAAK,QAAQ;AACzG,eAAK,MAAM,oBAAoB,KAAK,MAAM,cAAc,IAAI,GAAG;AAC/D,eAAK,MAAM,MAAM,kBAAkB;AAAA,YACjC,mBAAmB,cAAY;AAC7B,mBAAK,MAAM,mBAAmB;AAC9B,mBAAK,SAAS,kBAAkB,KAAK,YAAY,gBAAgB,QAAQ,CAAC;AAAA,YAC5E;AAAA,YACA,kBAAkB,aAAW;AAC3B,mBAAK,MAAM,kBAAkB;AAC7B,mBAAK,oBAAoB;AACzB,mBAAK,YAAY,eAAe,OAAO,EAAE,KAAK,sBAAoB;AAChE,qBAAK,MAAM,qCAAqC;AAChD,qBAAK,oBAAoB;AACzB,qBAAK,SAAS,iBAAiB,gBAAgB;AAC/C,oBAAI,KAAK,oBAAoB;AAC3B,uBAAK,aAAa,KAAK,kBAAkB;AAAA,gBAC3C;AAAA,cACF,GAAG,YAAU;AACX,qBAAK,iBAAiB,OAAO,MAAM,OAAO,OAAO;AAAA,cACnD,CAAC;AAAA,YACH;AAAA,YACA,iBAAiB,YAAU;AACzB,mBAAK,MAAM,iBAAiB;AAC5B,kBAAI,KAAK,mBAAmB;AAC1B,qBAAK,qBAAqB;AAAA,cAC5B,OAAO;AACL,qBAAK,aAAa,MAAM;AAAA,cAC1B;AAAA,YACF;AAAA,UACF,CAAC;AACD,cAAI,KAAK,aAAa;AACpB,iBAAK,MAAM,UAAU;AAAA,UACvB;AACA,cAAI,KAAK,gBAAgB;AACvB,iBAAK,mBAAmB,KAAK,eAAe,SAAS,KAAK,eAAe,OAAO;AAAA,UAClF,WAAW,KAAK,kBAAkB;AAChC,iBAAK,MAAM,UAAU;AAAA,UACvB;AAAA,QACF,GAAG,YAAU;AACX,eAAK,aAAa,MAAM;AAAA,QAC1B,CAAC;AAAA,MACH;AAAA,MACA,oBAAoB,QAAQ;AAC1B,YAAI;AACJ,aAAK,KAAK,KAAK,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,EAAE,cAAc;AAC1F,eAAK,QAAQ,mBAAmB,IAAI;AAAA,QACtC,OAAO;AACL,eAAK,aAAa,MAAM;AAAA,QAC1B;AAAA,MACF;AAAA,MACA,iBAAiB,QAAQ,SAAS;AAChC,YAAI;AACJ,aAAK,MAAM,4BAA4B,SAAS,gBAAgB,UAAU,GAAG;AAC7E,SAAC,KAAK,KAAK,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,iBAAiB,QAAQ,OAAO;AAC1F,aAAK,aAAa;AAAA,UAChB,MAAM;AAAA,UACN;AAAA,UACA,UAAU,IAAI,WAAW,SAAS;AAAA,QACpC,CAAC;AAAA,MACH;AAAA,MACA,UAAU;AACR,YAAI,IAAI;AACR,gBAAQ,MAAM,KAAK,KAAK,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,OAAO,QAAQ,OAAO,SAAS,KAAK,KAAK,QAAQ,UAAU;AAAA,MAC5I;AAAA,MACA,MAAM,UAAU,UAAU;AACxB,aAAK,MAAM,cAAc;AACzB,aAAK,WAAW,SAAS,MAAM;AAC/B,aAAK,WAAW;AAChB,aAAK,UAAU;AAAA,MACjB;AAAA,MACA,uBAAuB,SAAS,SAAS;AACvC,aAAK,MAAM,2CAA2C,QAAQ,MAAM;AACpE,YAAI,KAAK,OAAO;AACd,eAAK,mBAAmB,SAAS,OAAO;AAAA,QAC1C,OAAO;AACL,eAAK,iBAAiB;AAAA,YACpB;AAAA,YACA;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,YAAY;AACV,aAAK,MAAM,kBAAkB;AAC7B,YAAI,KAAK,OAAO;AACd,eAAK,MAAM,UAAU;AAAA,QACvB,OAAO;AACL,eAAK,cAAc;AAAA,QACrB;AAAA,MACF;AAAA,MACA,YAAY;AACV,aAAK,MAAM,kBAAkB;AAC7B,YAAI,KAAK,SAAS,CAAC,KAAK,oBAAoB;AAC1C,eAAK,MAAM,UAAU;AAAA,QACvB,OAAO;AACL,eAAK,mBAAmB;AAAA,QAC1B;AAAA,MACF;AAAA,MACA,eAAeA,cAAa;AAC1B,aAAK,cAAc,KAAK,YAAY,QAAQA,YAAW;AAAA,MACzD;AAAA,MACA,iBAAiB,SAAS;AACxB,aAAK,eAAe,KAAK,OAAO;AAAA,MAClC;AAAA,MACA,gBAAgB;AACd,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AACA,IAAAD,SAAQ,gBAAgB;AAAA;AAAA;;;AC5QxB;AAAA,0DAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,eAAeA,SAAQ,uBAAuBA,SAAQ,iBAAiB;AAC/E,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,iBAAN,MAAqB;AAAA,MACnB,YAAY,WAAW,YAAY,wBAAwB;AACzD,aAAK,YAAY;AACjB,aAAK,aAAa;AAClB,YAAI,wBAAwB;AAG1B,eAAK,SAAS,uBAAuB,UAAU,YAAY,uBAAuB;AAAA,QACpF,OAAO;AACL,eAAK,SAAS;AAAA,QAChB;AAAA,MACF;AAAA,MACA,mBAAmB;AACjB,aAAK,SAAS,KAAK,IAAI,KAAK,SAAS,KAAK,YAAY,KAAK,SAAS;AAAA,MACtE;AAAA,MACA,gBAAgB;AACd,aAAK,SAAS,KAAK,IAAI,KAAK,SAAS,GAAG,CAAC;AAAA,MAC3C;AAAA,MACA,eAAe;AACb,eAAO,KAAK,SAAS,KAAK,YAAY;AAAA,MACxC;AAAA,IACF;AACA,IAAAA,SAAQ,iBAAiB;AACzB,QAAM,uBAAN,MAA2B;AAAA,MACzB,YAAY,YAAY,cAAc;AACpC,aAAK,aAAa;AAClB,aAAK,eAAe;AACpB,aAAK,iBAAiB;AACtB,aAAK,mBAAmB,oBAAI,IAAI;AAAA,MAClC;AAAA,MACA,SAAS,MAAM,QAAQ;AACrB,YAAI;AACJ,cAAM,kBAAkB,KAAK,KAAK,iBAAiB,IAAI,MAAM,OAAO,QAAQ,OAAO,SAAS,KAAK;AACjG,YAAI,KAAK,eAAe,iBAAiB,QAAQ,KAAK,aAAa,KAAK,iBAAiB,MAAM;AAC7F,iBAAO;AAAA,QACT;AACA,aAAK,iBAAiB,IAAI,QAAQ,iBAAiB,IAAI;AACvD,aAAK,kBAAkB;AACvB,eAAO;AAAA,MACT;AAAA,MACA,KAAK,MAAM,QAAQ;AACjB,YAAI;AACJ,YAAI,KAAK,iBAAiB,MAAM;AAC9B,gBAAM,IAAI,MAAM,yCAAyC,MAAM,UAAU,IAAI,sBAAsB,KAAK,cAAc,EAAE;AAAA,QAC1H;AACA,aAAK,kBAAkB;AACvB,cAAM,kBAAkB,KAAK,KAAK,iBAAiB,IAAI,MAAM,OAAO,QAAQ,OAAO,SAAS,KAAK;AACjG,YAAI,iBAAiB,MAAM;AACzB,gBAAM,IAAI,MAAM,yCAAyC,MAAM,UAAU,IAAI,yBAAyB,cAAc,EAAE;AAAA,QACxH;AACA,aAAK,iBAAiB,IAAI,QAAQ,iBAAiB,IAAI;AAAA,MACzD;AAAA,MACA,QAAQ,QAAQ;AACd,YAAI;AACJ,cAAM,kBAAkB,KAAK,KAAK,iBAAiB,IAAI,MAAM,OAAO,QAAQ,OAAO,SAAS,KAAK;AACjG,YAAI,KAAK,iBAAiB,gBAAgB;AACxC,gBAAM,IAAI,MAAM,yCAAyC,MAAM,cAAc,cAAc,sBAAsB,KAAK,cAAc,EAAE;AAAA,QACxI;AACA,aAAK,kBAAkB;AACvB,aAAK,iBAAiB,OAAO,MAAM;AAAA,MACrC;AAAA,IACF;AACA,IAAAA,SAAQ,uBAAuB;AAC/B,QAAM,qCAAqC;AAC3C,QAAM,eAAN,MAAmB;AAAA,MACjB,YAAY,SAAS,YAAY,YAAY,MAAMC,cAAa,UAAU,YAAY,eAAe,gBAAgB;AACnH,aAAK,UAAU;AACf,aAAK,aAAa;AAClB,aAAK,aAAa;AAClB,aAAK,OAAO;AACZ,aAAK,cAAcA;AACnB,aAAK,WAAW;AAChB,aAAK,aAAa;AAClB,aAAK,gBAAgB;AACrB,aAAK,iBAAiB;AACtB,aAAK,WAAW;AAChB,aAAK,kBAAkB;AACvB,aAAK,kBAAkB,CAAC;AACxB,aAAK,cAAc,CAAC;AAMpB,aAAK,oBAAoB;AAOzB,aAAK,cAAc;AACnB,aAAK,uBAAuB;AAI5B,aAAK,WAAW;AAChB,aAAK,eAAe;AACpB,aAAK,qBAAqB;AAC1B,aAAK,yBAAyB;AAC9B,aAAK,sBAAsB;AAC3B,YAAI,WAAW,aAAa,aAAa;AACvC,eAAK,QAAQ;AACb,gBAAM,cAAc,WAAW,aAAa;AAC5C,eAAK,sBAAsB,KAAK,yBAAyB,OAAO,YAAY,eAAe,UAAU,GAAG,YAAY,eAAe,SAAS,CAAC,CAAC;AAAA,QAChJ,WAAW,WAAW,aAAa,eAAe;AAChD,eAAK,QAAQ;AAAA,QACf,OAAO;AACL,eAAK,QAAQ;AAAA,QACf;AAAA,MACF;AAAA,MACA,gBAAgB;AACd,eAAO,KAAK;AAAA,MACd;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,aAAa,OAAO,IAAI;AAAA,MAChG;AAAA,MACA,aAAa,cAAc;AACzB,aAAK,MAAM,6BAA6B,aAAa,OAAO,eAAe,aAAa,UAAU,GAAG;AACrG,aAAK,cAAc,QAAQ,KAAK,UAAU;AAC1C,aAAK,oBAAoB,KAAK,oBAAoB,KAAK,YAAY;AACnE,aAAK,cAAc,CAAC;AACpB,gBAAQ,SAAS,MAAM;AACrB,cAAI;AAEJ,WAAC,KAAK,KAAK,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,gBAAgB;AAAA,YAC3E,MAAM,aAAa;AAAA,YACnB,SAAS,aAAa;AAAA,YACtB,UAAU,aAAa;AAAA,UACzB,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,MACA,iBAAiB,QAAQ,SAAS;AAChC,aAAK,MAAM,4BAA4B,SAAS,gBAAgB,UAAU,GAAG;AAC7E,aAAK,aAAa;AAAA,UAChB,MAAM;AAAA,UACN;AAAA,UACA,UAAU,IAAI,WAAW,SAAS;AAAA,QACpC,CAAC;AACD,mBAAW;AAAA,UACT;AAAA,QACF,KAAK,KAAK,iBAAiB;AACzB,eAAK,iBAAiB,QAAQ,OAAO;AAAA,QACvC;AAAA,MACF;AAAA,MACA,UAAU;AACR,YAAI,KAAK,uBAAuB,MAAM;AACpC,iBAAO,KAAK,gBAAgB,KAAK,kBAAkB,EAAE,KAAK,QAAQ;AAAA,QACpE,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,eAAe,cAAc;AAC3B,YAAI;AACJ,gBAAQ,KAAK,KAAK,YAAY,eAAe,KAAK,iBAAiB,OAAO,QAAQ,OAAO,SAAS,KAAK;AAAA,UACrG,WAAW;AAAA,UACX,WAAW;AAAA,QACb;AAAA,MACF;AAAA,MACA,qBAAqB;AACnB,eAAO,KAAK,oBAAoB,KAAK,YAAY;AAAA,MACnD;AAAA,MACA,oBAAoB;AAClB,YAAI,KAAK,UAAU,aAAa;AAC9B;AAAA,QACF;AACA,cAAM,6BAA6B,KAAK,gBAAgB,KAAK,kBAAkB,EAAE;AACjF,iBAAS,eAAe,KAAK,mBAAmB,eAAe,4BAA4B,gBAAgB;AACzG,gBAAM,cAAc,KAAK,eAAe,YAAY;AACpD,cAAI,YAAY,WAAW;AACzB,iBAAK,cAAc,KAAK,YAAY,QAAQ,QAAQ,QAAQ,KAAK,UAAU;AAAA,UAC7E;AAAA,QACF;AACA,aAAK,cAAc,KAAK,YAAY,MAAM,6BAA6B,KAAK,iBAAiB;AAC7F,aAAK,oBAAoB;AAAA,MAC3B;AAAA,MACA,WAAW,OAAO;AAChB,YAAI,KAAK,UAAU,aAAa;AAC9B;AAAA,QACF;AACA,YAAI,KAAK,gBAAgB,KAAK,EAAE,UAAU,aAAa;AACrD;AAAA,QACF;AACA,aAAK,MAAM,sBAAsB,KAAK,gBAAgB,KAAK,EAAE,KAAK,cAAc,IAAI,gBAAgB,KAAK;AACzG,aAAK,QAAQ;AACb,aAAK,qBAAqB;AAC1B,iBAAS,IAAI,GAAG,IAAI,KAAK,gBAAgB,QAAQ,KAAK;AACpD,cAAI,MAAM,OAAO;AACf;AAAA,UACF;AACA,cAAI,KAAK,gBAAgB,CAAC,EAAE,UAAU,aAAa;AACjD;AAAA,UACF;AACA,eAAK,gBAAgB,CAAC,EAAE,QAAQ;AAChC,eAAK,gBAAgB,CAAC,EAAE,KAAK,iBAAiB,YAAY,OAAO,WAAW,4CAA4C;AAAA,QAC1H;AACA,aAAK,kBAAkB;AAAA,MACzB;AAAA,MACA,6BAA6B;AAC3B,YAAI,KAAK,UAAU,aAAa;AAC9B;AAAA,QACF;AACA,YAAI,eAAe;AACnB,YAAI,uBAAuB;AAC3B,mBAAW,CAAC,OAAO,SAAS,KAAK,KAAK,gBAAgB,QAAQ,GAAG;AAC/D,cAAI,UAAU,UAAU,YAAY,UAAU,oBAAoB,cAAc;AAC9E,2BAAe,UAAU;AACzB,mCAAuB;AAAA,UACzB;AAAA,QACF;AACA,YAAI,yBAAyB,IAAI;AAG/B,eAAK,QAAQ;AAAA,QACf,OAAO;AACL,eAAK,WAAW,oBAAoB;AAAA,QACtC;AAAA,MACF;AAAA,MACA,mBAAmB,MAAM,MAAM;AAC7B,eAAO,KAAK,KAAK,WAAS,UAAU,QAAQ,MAAM,SAAS,EAAE,YAAY,MAAM,YAAY,OAAO,IAAI,EAAE,YAAY,CAAC;AAAA,MACvH;AAAA,MACA,wBAAwB;AACtB,YAAI;AACJ,cAAM,eAAe,KAAK,KAAK,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,aAAa;AAChG,YAAI,CAAC,aAAa;AAChB,iBAAO;AAAA,QACT;AACA,cAAM,gBAAgB,KAAK,OAAO,IAAI,KAAK,sBAAsB;AACjE,cAAM,gBAAgB,OAAO,YAAY,WAAW,UAAU,GAAG,YAAY,WAAW,SAAS,CAAC,CAAC;AACnG,aAAK,sBAAsB,KAAK,IAAI,KAAK,sBAAsB,YAAY,mBAAmB,aAAa;AAC3G,eAAO;AAAA,MACT;AAAA,MACA,eAAe,UAAU,UAAU;AACjC,YAAI,KAAK,UAAU,SAAS;AAC1B,mBAAS,KAAK;AACd;AAAA,QACF;AACA,cAAM,cAAc,KAAK,WAAW,aAAa;AACjD,YAAI,KAAK,YAAY,KAAK,IAAI,YAAY,aAAa,CAAC,GAAG;AACzD,mBAAS,KAAK;AACd;AAAA,QACF;AACA,YAAI;AACJ,YAAI,aAAa,MAAM;AACrB,yBAAe,KAAK,sBAAsB;AAAA,QAC5C,WAAW,WAAW,GAAG;AACvB,eAAK,QAAQ;AACb,mBAAS,KAAK;AACd;AAAA,QACF,OAAO;AACL,yBAAe;AACf,eAAK,sBAAsB,KAAK;AAAA,QAClC;AACA,mBAAW,MAAM;AACf,cAAI,IAAI;AACR,cAAI,KAAK,UAAU,SAAS;AAC1B,qBAAS,KAAK;AACd;AAAA,UACF;AACA,eAAK,MAAM,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,aAAa,OAAO,QAAQ,OAAO,SAAS,KAAK,MAAM;AAClI,qBAAS,IAAI;AACb,iBAAK,YAAY;AACjB,iBAAK,gBAAgB;AAAA,UACvB;AAAA,QACF,GAAG,YAAY;AAAA,MACjB;AAAA,MACA,mBAAmB;AACjB,YAAIC,SAAQ;AACZ,mBAAW,QAAQ,KAAK,iBAAiB;AACvC,eAAK,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,WAAW,UAAU;AACzE,YAAAA,UAAS;AAAA,UACX;AAAA,QACF;AACA,eAAOA;AAAA,MACT;AAAA,MACA,sBAAsB,QAAQ,WAAW,UAAU;AACjD,YAAI,IAAI,IAAI;AACZ,gBAAQ,KAAK,OAAO;AAAA,UAClB,KAAK;AAAA,UACL,KAAK;AACH,iBAAK,WAAW,SAAS;AACzB,iBAAK,aAAa,MAAM;AACxB;AAAA,UACF,KAAK;AACH,gBAAI,KAAK,oBAAoB,KAAK,KAAK,WAAW,aAAa,cAAc,yBAAyB,QAAQ,OAAO,SAAS,KAAK,CAAC,GAAG,OAAO,IAAI,GAAG;AACnJ,eAAC,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,cAAc;AACjF,kBAAI;AACJ,kBAAI,aAAa,MAAM;AACrB,0BAAU;AAAA,cACZ,WAAW,WAAW,GAAG;AACvB,qBAAK,QAAQ;AACb,qBAAK,WAAW,SAAS;AACzB,qBAAK,aAAa,MAAM;AACxB;AAAA,cACF,OAAO;AACL,0BAAU;AAAA,cACZ;AACA,yBAAW,MAAM;AACf,qBAAK,yBAAyB;AAE9B,oBAAI,KAAK,iBAAiB,MAAM,GAAG;AACjC,uBAAK,WAAW,SAAS;AACzB,uBAAK,aAAa,MAAM;AAAA,gBAC1B;AAAA,cACF,GAAG,OAAO;AAAA,YACZ,OAAO;AACL,mBAAK,WAAW,SAAS;AACzB,mBAAK,aAAa,MAAM;AAAA,YAC1B;AACA;AAAA,UACF,KAAK;AACH,gBAAI,KAAK,mBAAmB,KAAK,WAAW,aAAa,YAAY,sBAAsB,OAAO,IAAI,GAAG;AACvG,eAAC,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,cAAc;AACjF,mBAAK,eAAe,UAAU,aAAW;AACvC,oBAAI,CAAC,SAAS;AACZ,uBAAK,WAAW,SAAS;AACzB,uBAAK,aAAa,MAAM;AAAA,gBAC1B;AAAA,cACF,CAAC;AAAA,YACH,OAAO;AACL,mBAAK,WAAW,SAAS;AACzB,mBAAK,aAAa,MAAM;AAAA,YAC1B;AACA;AAAA,QACJ;AAAA,MACF;AAAA,MACA,YAAY,UAAU;AACpB,cAAM,UAAU,SAAS,IAAI,wBAAwB;AACrD,YAAI,QAAQ,WAAW,GAAG;AACxB,iBAAO;AAAA,QACT;AACA,YAAI;AACF,iBAAO,SAAS,QAAQ,CAAC,CAAC;AAAA,QAC5B,SAAS,GAAG;AACV,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,kBAAkB,QAAQ,WAAW;AACnC,YAAI;AACJ,YAAI,KAAK,gBAAgB,SAAS,EAAE,UAAU,aAAa;AACzD;AAAA,QACF;AACA,aAAK,MAAM,WAAW,KAAK,QAAQ,oCAAoC,OAAO,WAAW,kBAAkB,KAAK,gBAAgB,SAAS,EAAE,KAAK,cAAc,IAAI,gBAAgB,KAAK,gBAAgB,SAAS,EAAE,KAAK;AACvN,aAAK,gBAAgB,SAAS,EAAE,QAAQ;AACxC,YAAI,OAAO,SAAS,YAAY,OAAO,IAAI;AACzC,WAAC,KAAK,KAAK,oBAAoB,QAAQ,OAAO,SAAS,SAAS,GAAG,iBAAiB;AACpF,eAAK,WAAW,SAAS;AACzB,eAAK,aAAa,MAAM;AACxB;AAAA,QACF;AACA,YAAI,KAAK,UAAU,aAAa;AAC9B,eAAK,aAAa,MAAM;AACxB;AAAA,QACF;AACA,cAAM,WAAW,KAAK,YAAY,OAAO,QAAQ;AACjD,gBAAQ,OAAO,UAAU;AAAA,UACvB,KAAK;AAEH,iBAAK,gBAAgB;AACrB;AAAA,UACF,KAAK;AAEH,gBAAI,KAAK,sBAAsB;AAC7B,mBAAK,sBAAsB,QAAQ,WAAW,QAAQ;AAAA,YACxD,OAAO;AACL,mBAAK,uBAAuB;AAC5B,mBAAK,gBAAgB;AAAA,YACvB;AACA;AAAA,UACF,KAAK;AACH,iBAAK,WAAW,SAAS;AACzB,iBAAK,aAAa,MAAM;AACxB;AAAA,UACF,KAAK;AACH,iBAAK,sBAAsB,QAAQ,WAAW,QAAQ;AACtD;AAAA,QACJ;AAAA,MACF;AAAA,MACA,2BAA2B;AACzB,YAAI,KAAK,UAAU,WAAW;AAC5B;AAAA,QACF;AACA,YAAI,CAAC,KAAK,WAAW,aAAa,eAAe;AAC/C;AAAA,QACF;AACA,cAAM,gBAAgB,KAAK,WAAW,aAAa;AACnD,YAAI,KAAK,YAAY,KAAK,IAAI,cAAc,aAAa,CAAC,GAAG;AAC3D;AAAA,QACF;AACA,aAAK,YAAY;AACjB,aAAK,gBAAgB;AACrB,aAAK,uBAAuB;AAAA,MAC9B;AAAA,MACA,yBAAyB;AACvB,YAAI,IAAI,IAAI;AACZ,YAAI,KAAK,cAAc;AACrB,uBAAa,KAAK,YAAY;AAAA,QAChC;AACA,YAAI,KAAK,UAAU,WAAW;AAC5B;AAAA,QACF;AACA,YAAI,CAAC,KAAK,WAAW,aAAa,eAAe;AAC/C;AAAA,QACF;AACA,cAAM,gBAAgB,KAAK,WAAW,aAAa;AACnD,YAAI,KAAK,YAAY,KAAK,IAAI,cAAc,aAAa,CAAC,GAAG;AAC3D;AAAA,QACF;AACA,cAAM,sBAAsB,KAAK,cAAc,kBAAkB,QAAQ,OAAO,SAAS,KAAK;AAC9F,cAAM,kBAAkB,OAAO,mBAAmB,UAAU,GAAG,mBAAmB,SAAS,CAAC,CAAC;AAC7F,aAAK,eAAe,WAAW,MAAM;AACnC,eAAK,yBAAyB;AAAA,QAChC,GAAG,kBAAkB,GAAI;AACzB,SAAC,MAAM,KAAK,KAAK,cAAc,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,MACvF;AAAA,MACA,kBAAkB;AAChB,cAAM,QAAQ,KAAK,QAAQ,wBAAwB,KAAK,YAAY,KAAK,YAAY,KAAK,MAAM,KAAK,aAAa,KAAK,QAAQ;AAC/H,aAAK,MAAM,yBAAyB,MAAM,cAAc,IAAI,mBAAmB,KAAK,QAAQ;AAC5F,cAAM,QAAQ,KAAK,gBAAgB;AACnC,aAAK,gBAAgB,KAAK;AAAA,UACxB,OAAO;AAAA,UACP,MAAM;AAAA,UACN,mBAAmB;AAAA,QACrB,CAAC;AACD,cAAM,mBAAmB,KAAK,WAAW;AACzC,cAAM,kBAAkB,KAAK,gBAAgB,MAAM;AACnD,YAAI,mBAAmB,GAAG;AACxB,0BAAgB,IAAI,oCAAoC,GAAG,gBAAgB,EAAE;AAAA,QAC/E;AACA,YAAI,mBAAmB;AACvB,cAAM,MAAM,iBAAiB;AAAA,UAC3B,mBAAmB,cAAY;AAC7B,iBAAK,MAAM,mCAAmC,MAAM,cAAc,IAAI,GAAG;AACzE,iBAAK,WAAW,KAAK;AACrB,+BAAmB;AACnB,gBAAI,mBAAmB,GAAG;AACxB,uBAAS,IAAI,oCAAoC,GAAG,gBAAgB,EAAE;AAAA,YACxE;AACA,gBAAI,KAAK,gBAAgB,KAAK,EAAE,UAAU,UAAU;AAClD,mBAAK,SAAS,kBAAkB,QAAQ;AAAA,YAC1C;AAAA,UACF;AAAA,UACA,kBAAkB,aAAW;AAC3B,iBAAK,MAAM,kCAAkC,MAAM,cAAc,IAAI,GAAG;AACxE,iBAAK,WAAW,KAAK;AACrB,gBAAI,KAAK,gBAAgB,KAAK,EAAE,UAAU,UAAU;AAClD,mBAAK,SAAS,iBAAiB,OAAO;AAAA,YACxC;AAAA,UACF;AAAA,UACA,iBAAiB,YAAU;AACzB,iBAAK,MAAM,iCAAiC,MAAM,cAAc,IAAI,GAAG;AACvE,gBAAI,CAAC,oBAAoB,mBAAmB,GAAG;AAC7C,qBAAO,SAAS,IAAI,oCAAoC,GAAG,gBAAgB,EAAE;AAAA,YAC/E;AACA,iBAAK,kBAAkB,QAAQ,KAAK;AAAA,UACtC;AAAA,QACF,CAAC;AACD,aAAK,qBAAqB,KAAK;AAC/B,YAAI,KAAK,aAAa;AACpB,gBAAM,UAAU;AAAA,QAClB;AAAA,MACF;AAAA,MACA,MAAM,UAAU,UAAU;AACxB,aAAK,MAAM,cAAc;AACzB,aAAK,WAAW;AAChB,aAAK,kBAAkB;AACvB,aAAK,YAAY;AACjB,aAAK,gBAAgB;AACrB,aAAK,uBAAuB;AAAA,MAC9B;AAAA,MACA,0BAA0B,YAAY;AACpC,YAAI,IAAI;AACR,cAAM,YAAY,KAAK,gBAAgB,UAAU;AACjD,cAAM,eAAe,UAAU;AAC/B,SAAC,MAAM,KAAK,KAAK,eAAe,YAAY,GAAG,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AACxG,aAAK,kBAAkB;AACvB,kBAAU,qBAAqB;AAC/B,aAAK,qBAAqB,UAAU;AAAA,MACtC;AAAA,MACA,qBAAqB,YAAY;AAC/B,cAAM,YAAY,KAAK,gBAAgB,UAAU;AACjD,YAAI,UAAU,UAAU,aAAa;AACnC;AAAA,QACF;AACA,YAAI,KAAK,eAAe,UAAU,iBAAiB,GAAG;AACpD,gBAAM,cAAc,KAAK,eAAe,UAAU,iBAAiB;AACnE,kBAAQ,YAAY,WAAW;AAAA,YAC7B,KAAK;AACH,wBAAU,KAAK,uBAAuB;AAAA,gBACpC,UAAU,WAAS;AAEjB,uBAAK,0BAA0B,UAAU;AAAA,gBAC3C;AAAA,cACF,GAAG,YAAY,QAAQ,OAAO;AAC9B;AAAA,YACF,KAAK;AACH,wBAAU,qBAAqB;AAC/B,wBAAU,KAAK,UAAU;AACzB;AAAA,YACF,KAAK;AAEH;AAAA,UACJ;AAAA,QACF;AAAA,MACF;AAAA,MACA,uBAAuB,SAAS,SAAS;AACvC,YAAI;AACJ,aAAK,MAAM,2CAA2C,QAAQ,MAAM;AACpE,cAAM,WAAW;AAAA,UACf;AAAA,UACA,OAAO,QAAQ;AAAA,QACjB;AACA,cAAM,eAAe,KAAK,mBAAmB;AAC7C,cAAM,cAAc;AAAA,UAClB,WAAW;AAAA,UACX,SAAS;AAAA,UACT,WAAW,KAAK,cAAc,SAAS,QAAQ,QAAQ,KAAK,UAAU;AAAA,QACxE;AACA,aAAK,YAAY,KAAK,WAAW;AACjC,YAAI,YAAY,WAAW;AACzB,WAAC,KAAK,QAAQ,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,OAAO;AAC5E,qBAAW,CAAC,WAAW,IAAI,KAAK,KAAK,gBAAgB,QAAQ,GAAG;AAC9D,gBAAI,KAAK,UAAU,YAAY,KAAK,sBAAsB,cAAc;AACtE,mBAAK,KAAK,uBAAuB;AAAA,gBAC/B,UAAU,WAAS;AAEjB,uBAAK,0BAA0B,SAAS;AAAA,gBAC1C;AAAA,cACF,GAAG,OAAO;AAAA,YACZ;AAAA,UACF;AAAA,QACF,OAAO;AACL,eAAK,2BAA2B;AAEhC,cAAI,KAAK,uBAAuB,MAAM;AACpC;AAAA,UACF;AACA,gBAAM,OAAO,KAAK,gBAAgB,KAAK,kBAAkB;AACzD,sBAAY,WAAW,QAAQ;AAC/B,cAAI,KAAK,UAAU,YAAY,KAAK,sBAAsB,cAAc;AACtE,iBAAK,KAAK,uBAAuB;AAAA,cAC/B,UAAU,WAAS;AAEjB,qBAAK,0BAA0B,KAAK,kBAAkB;AAAA,cACxD;AAAA,YACF,GAAG,OAAO;AAAA,UACZ;AAAA,QACF;AAAA,MACF;AAAA,MACA,YAAY;AACV,aAAK,MAAM,kBAAkB;AAC7B,aAAK,cAAc;AACnB,mBAAW,kBAAkB,KAAK,iBAAiB;AACjD,eAAK,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,WAAW,UAAU;AACvG,2BAAe,KAAK,UAAU;AAAA,UAChC;AAAA,QACF;AAAA,MACF;AAAA,MACA,YAAY;AACV,aAAK,MAAM,kBAAkB;AAC7B,cAAM,iBAAiB,KAAK,mBAAmB;AAC/C,aAAK,YAAY,KAAK;AAAA,UACpB,WAAW;AAAA,UACX,WAAW;AAAA,QACb,CAAC;AACD,mBAAW,QAAQ,KAAK,iBAAiB;AACvC,eAAK,SAAS,QAAQ,SAAS,SAAS,SAAS,KAAK,WAAW,YAAY,KAAK,sBAAsB,gBAAgB;AACtH,iBAAK,qBAAqB;AAC1B,iBAAK,KAAK,UAAU;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,MACA,eAAe,gBAAgB;AAC7B,cAAM,IAAI,MAAM,yBAAyB;AAAA,MAC3C;AAAA,MACA,YAAY;AACV,eAAO,KAAK;AAAA,MACd;AAAA,MACA,UAAU;AACR,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AACA,IAAAF,SAAQ,eAAe;AAAA;AAAA;;;AChmBvB;AAAA,iEAAAG,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,wBAAwB;AAChC,QAAM,wBAAN,MAA4B;AAAA,MAC1B,YAAY,OAAO;AACjB,aAAK,QAAQ;AAAA,MACf;AAAA,MACA,uBAAuB;AACrB,eAAO,KAAK,MAAM,qBAAqB;AAAA,MACzC;AAAA,MACA,6BAA6B,UAAU;AACrC,aAAK,MAAM,6BAA6B,QAAQ;AAAA,MAClD;AAAA,MACA,gCAAgC,UAAU;AACxC,aAAK,MAAM,gCAAgC,QAAQ;AAAA,MACrD;AAAA,MACA,kBAAkB;AAChB,aAAK,MAAM,gBAAgB;AAAA,MAC7B;AAAA,MACA,aAAa;AACX,eAAO,KAAK,MAAM,WAAW;AAAA,MAC/B;AAAA,MACA,kBAAkB,kBAAkB;AAClC,aAAK,MAAM,kBAAkB,gBAAgB;AAAA,MAC/C;AAAA,MACA,MAAM;AACJ,aAAK,MAAM,IAAI;AAAA,MACjB;AAAA,MACA,QAAQ;AACN,aAAK,MAAM,MAAM;AAAA,MACnB;AAAA,MACA,iBAAiB;AACf,eAAO,KAAK,MAAM,eAAe;AAAA,MACnC;AAAA,MACA,oBAAoB;AAClB,eAAO,KAAK,MAAM,kBAAkB;AAAA,MACtC;AAAA,MACA,qBAAqB,OAAO;AAC1B,eAAO,KAAK,kBAAkB,MAAM,MAAM,kBAAkB;AAAA,MAC9D;AAAA,IACF;AACA,IAAAA,SAAQ,wBAAwB;AAAA;AAAA;;;AC5DhC;AAAA,6DAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,kBAAkB;AAC1B,QAAM,wBAAwB;AAC9B,QAAM,4BAA4B;AAClC,QAAM,oBAAoB;AAC1B,QAAM,WAAW;AACjB,QAAM,cAAc;AACpB,QAAM,iBAAiB;AACvB,QAAM,uBAAuB;AAC7B,QAAM,aAAa;AACnB,QAAM,YAAY;AAClB,QAAM,eAAe;AACrB,QAAM,eAAe;AACrB,QAAM,uBAAuB;AAC7B,QAAM,aAAa;AACnB,QAAM,wBAAwB;AAC9B,QAAM,aAAa;AACnB,QAAM,mBAAmB;AACzB,QAAM,gBAAgB;AACtB,QAAM,yBAAyB;AAC/B,QAAM,kBAAkB;AACxB,QAAM,yBAAyB;AAI/B,QAAM,mBAAmB;AACzB,QAAM,sBAAsB;AAE5B,QAAM,0BAA0B,KAAK,KAAK;AAC1C,QAAM,sBAAsB,oBAAI,IAAI;AACpC,QAAM,kCAAkC,KAAK;AAC7C,QAAM,0CAA0C,KAAK;AACrD,QAAM,2BAAN,cAAuC,uBAAuB,sBAAsB;AAAA,MAClF,YAAY,iBAAiB,SAAS;AACpC,cAAM,eAAe;AACrB,aAAK,UAAU;AACf,aAAK,WAAW;AAChB,aAAK,0BAA0B,CAAC,YAAY,eAAe,UAAU,kBAAkB;AACrF,kBAAQ,kBAAkB,aAAa;AAAA,QACzC;AACA,wBAAgB,6BAA6B,KAAK,uBAAuB;AAAA,MAC3E;AAAA,MACA,MAAM;AACJ,aAAK,MAAM,IAAI;AACf,aAAK,YAAY;AAAA,MACnB;AAAA,MACA,QAAQ;AACN,aAAK,MAAM,MAAM;AACjB,aAAK,YAAY;AACjB,YAAI,KAAK,YAAY,GAAG;AACtB,eAAK,MAAM,gCAAgC,KAAK,uBAAuB;AACvE,eAAK,QAAQ,wBAAwB,IAAI;AAAA,QAC3C;AAAA,MACF;AAAA,IACF;AACA,QAAM,kBAAN,MAAsB;AAAA,MACpB,YAAY,QAAQC,cAAa,SAAS;AACxC,YAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AAChC,aAAK,cAAcA;AACnB,aAAK,UAAU;AACf,aAAK,oBAAoB,qBAAqB,kBAAkB;AAChE,aAAK,gBAAgB,IAAI,SAAS,kBAAkB;AAKpD,aAAK,uBAAuB,CAAC;AAC7B,aAAK,YAAY,CAAC;AAClB,aAAK,4BAA4B,CAAC;AAClC,aAAK,iBAAiB;AAQtB,aAAK,yBAAyB;AAC9B,aAAK,qBAAqB,oBAAI,IAAI;AAClC,aAAK,YAAY;AACjB,aAAK,YAAY;AAEjB,aAAK,kBAAkB;AACvB,aAAK,cAAc,IAAI,WAAW,oBAAoB;AACtD,aAAK,kBAAkB,IAAI,WAAW,wBAAwB;AAC9D,YAAI,OAAO,WAAW,UAAU;AAC9B,gBAAM,IAAI,UAAU,iCAAiC;AAAA,QACvD;AACA,YAAI,EAAEA,wBAAuB,sBAAsB,qBAAqB;AACtE,gBAAM,IAAI,UAAU,yDAAyD;AAAA,QAC/E;AACA,YAAI,SAAS;AACX,cAAI,OAAO,YAAY,UAAU;AAC/B,kBAAM,IAAI,UAAU,mCAAmC;AAAA,UACzD;AAAA,QACF;AACA,aAAK,iBAAiB;AACtB,cAAM,qBAAqB,GAAG,aAAa,UAAU,MAAM;AAC3D,YAAI,sBAAsB,MAAM;AAC9B,gBAAM,IAAI,MAAM,gCAAgC,MAAM,GAAG;AAAA,QAC3D;AAGA,cAAM,0BAA0B,GAAG,WAAW,qBAAqB,iBAAiB;AACpF,YAAI,2BAA2B,MAAM;AACnC,gBAAM,IAAI,MAAM,oDAAoD,MAAM,GAAG;AAAA,QAC/E;AACA,aAAK,eAAe,YAAY,MAAM;AAAA,QAAC,GAAG,gBAAgB;AAC1D,SAAC,MAAM,KAAK,KAAK,cAAc,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AACrF,YAAI,KAAK,QAAQ,sBAAsB,MAAM,GAAG;AAC9C,eAAK,kBAAkB;AAAA,QACzB;AACA,aAAK,gBAAgB,IAAI,WAAW,cAAc;AAClD,aAAK,eAAe,GAAG,WAAW,yBAAyB,QAAQ,MAAM,KAAK,gBAAgB,GAAG,KAAK,eAAe;AACrH,YAAI,KAAK,iBAAiB;AACxB,eAAK,cAAc,SAAS,WAAW,iBAAiB;AAAA,QAC1D;AACA,YAAI,KAAK,QAAQ,wBAAwB,GAAG;AAC1C,eAAK,mBAAmB,KAAK,QAAQ,wBAAwB;AAAA,QAC/D,OAAO;AACL,eAAK,oBAAoB,GAAG,WAAW,qBAAqB,sBAAsB;AAAA,QACpF;AACA,cAAM,kBAAkB,GAAG,aAAa,cAAc,wBAAwB,OAAO;AACrF,aAAK,SAAS,eAAe;AAC7B,aAAK,UAAU,OAAO,OAAO,CAAC,GAAG,KAAK,SAAS,eAAe,YAAY;AAG1E,aAAK,kBAAkB,GAAG,kBAAkB,qBAAqB,KAAK,QAAQ,gCAAgC,OAAO,QAAQ,OAAO,SAAS,KAAK,OAAO,CAAC;AAC1J,aAAK,qBAAqB,IAAI,gBAAgB,sBAAsB,KAAK,QAAQ,wBAAwB,OAAO,QAAQ,OAAO,SAAS,KAAK,kCAAkC,KAAK,QAAQ,gCAAgC,OAAO,QAAQ,OAAO,SAAS,KAAK,uCAAuC;AACvS,aAAK,iBAAiB,KAAK,QAAQ,wBAAwB,OAAO,QAAQ,OAAO,SAAS,KAAK;AAC/F,aAAK,gBAAgB,KAAK,KAAK,KAAK,QAAQ,6BAA6B,OAAO,QAAQ,OAAO,SAAS,KAAK,yBAAyB,mBAAmB;AACzJ,cAAM,uBAAuB;AAAA,UAC3B,kBAAkB,CAAC,mBAAmB,mBAAmB;AACvD,kBAAM,aAAa,KAAK,eAAe,sBAAsB,KAAK,QAAQ,mBAAmB,OAAO,OAAO,CAAC,GAAG,KAAK,SAAS,cAAc,GAAG,KAAK,WAAW;AAC9J,uBAAW,kBAAkB,KAAK,aAAa;AAC/C,gBAAI,KAAK,iBAAiB;AACxB,mBAAK,cAAc,SAAS,WAAW,kDAAkD,WAAW,eAAe,CAAC;AAAA,YACtH;AACA,kBAAM,oBAAoB,IAAI,yBAAyB,YAAY,IAAI;AACvE,iBAAK,mBAAmB,IAAI,iBAAiB;AAC7C,mBAAO;AAAA,UACT;AAAA,UACA,aAAa,CAAC,mBAAmB,WAAW;AAC1C,iBAAK,gBAAgB;AACrB,kBAAM,YAAY,KAAK,UAAU,MAAM;AACvC,iBAAK,YAAY,CAAC;AAClB,gBAAI,UAAU,SAAS,GAAG;AACxB,mBAAK,kBAAkB;AAAA,YACzB;AACA,uBAAW,QAAQ,WAAW;AAC5B,mBAAK,OAAO;AAAA,YACd;AACA,iBAAK,YAAY,iBAAiB;AAAA,UACpC;AAAA,UACA,qBAAqB,MAAM;AAEzB,kBAAM,IAAI,MAAM,+DAA+D;AAAA,UACjF;AAAA,UACA,kBAAkB,WAAS;AACzB,gBAAI,KAAK,iBAAiB;AACxB,mBAAK,gBAAgB,SAAS,KAAK;AAAA,YACrC;AAAA,UACF;AAAA,UACA,qBAAqB,WAAS;AAC5B,gBAAI,KAAK,iBAAiB;AACxB,mBAAK,gBAAgB,WAAW,KAAK;AAAA,YACvC;AAAA,UACF;AAAA,QACF;AACA,aAAK,wBAAwB,IAAI,0BAA0B,sBAAsB,KAAK,QAAQ,sBAAsB,SAAS,CAAC,eAAe,mBAAmB;AAC9J,cAAI,cAAc,iBAAiB;AACjC,gCAAoB,IAAI,KAAK,UAAU,GAAG,IAAI,gBAAgB,eAAe,cAAc,gBAAgB,WAAW,cAAc,gBAAgB,YAAY,oBAAoB,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC;AAAA,UAC5M,OAAO;AACL,gCAAoB,OAAO,KAAK,UAAU,CAAC;AAAA,UAC7C;AACA,cAAI,KAAK,iBAAiB;AACxB,iBAAK,cAAc,SAAS,WAAW,8BAA8B;AAAA,UACvE;AACA,eAAK,iBAAiB;AACtB,eAAK,yBAAyB;AAG9B,kBAAQ,SAAS,MAAM;AACrB,kBAAM,aAAa,KAAK;AACxB,iBAAK,uBAAuB,CAAC;AAC7B,gBAAI,WAAW,SAAS,GAAG;AACzB,mBAAK,kBAAkB;AAAA,YACzB;AACA,uBAAW,QAAQ,YAAY;AAC7B,mBAAK,UAAU;AAAA,YACjB;AAAA,UACF,CAAC;AAAA,QACH,GAAG,YAAU;AACX,cAAI,KAAK,iBAAiB;AACxB,iBAAK,cAAc,SAAS,cAAc,yCAAyC,OAAO,OAAO,mBAAmB,OAAO,UAAU,GAAG;AAAA,UAC1I;AACA,cAAI,KAAK,qBAAqB,SAAS,GAAG;AACxC,iBAAK,MAAM,+DAA+D;AAAA,UAC5E;AACA,cAAI,KAAK,mBAAmB,MAAM;AAChC,iBAAK,yBAAyB,OAAO,OAAO,OAAO,OAAO,CAAC,IAAI,GAAG,uBAAuB,gCAAgC,OAAO,MAAM,OAAO,OAAO,CAAC,GAAG;AAAA,cACtJ,UAAU,OAAO;AAAA,YACnB,CAAC;AAAA,UACH;AACA,gBAAM,aAAa,KAAK;AACxB,eAAK,uBAAuB,CAAC;AAC7B,cAAI,WAAW,SAAS,GAAG;AACzB,iBAAK,kBAAkB;AAAA,UACzB;AACA,qBAAW,QAAQ,YAAY;AAC7B,iBAAK,oBAAoB,MAAM;AAAA,UACjC;AAAA,QACF,CAAC;AACD,aAAK,qBAAqB,IAAI,eAAe,mBAAmB,CAAC,IAAI,qBAAqB,yBAAyB,MAAM,KAAK,OAAO,CAAC,CAAC;AACvI,aAAK,MAAM,sCAAsC,KAAK,UAAU,SAAS,QAAW,CAAC,CAAC;AACtF,cAAM,QAAQ,IAAI,MAAM;AACxB,SAAC,GAAG,UAAU,OAAO,YAAY,aAAa,OAAO,sBAAsB,MAAM,KAAK,YAAY,KAAK,+BAAoC,KAAK,MAAM,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU,MAAM,MAAM,QAAQ,IAAI,IAAI,CAAC,EAAE;AAC9O,aAAK,wBAAwB,oBAAI,KAAK;AAAA,MACxC;AAAA,MACA,kBAAkB;AAChB,eAAO;AAAA,UACL,QAAQ,KAAK;AAAA,UACb,OAAO,KAAK;AAAA,UACZ,OAAO,KAAK;AAAA,UACZ,aAAa,KAAK;AAAA,UAClB,UAAU,KAAK,gBAAgB,cAAc;AAAA,QAC/C;AAAA,MACF;AAAA,MACA,MAAM,MAAM,mBAAmB;AAC7B,SAAC,GAAG,UAAU,OAAO,sBAAsB,QAAQ,sBAAsB,SAAS,oBAAoB,YAAY,aAAa,OAAO,WAAW,MAAM,KAAK,YAAY,KAAK,QAAQ,GAAG,aAAa,aAAa,KAAK,MAAM,IAAI,MAAM,IAAI;AAAA,MAC7O;AAAA,MACA,kBAAkB;AAChB,YAAI,IAAI,IAAI,IAAI;AAEhB,YAAI,GAAG,MAAM,KAAK,KAAK,cAAc,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE,IAAI;AAC9F,eAAK,MAAM,oDAAoD,KAAK,qBAAqB,SAAS,uBAAuB,KAAK,UAAU,MAAM;AAC9I,WAAC,MAAM,KAAK,KAAK,cAAc,SAAS,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,QACrF;AAAA,MACF;AAAA,MACA,oBAAoB;AAClB,YAAI,IAAI;AAER,YAAI,CAAC,KAAK,aAAa,UAAU,KAAK,aAAa,OAAO,GAAG;AAC3D,eAAK,MAAM,sDAAsD,KAAK,qBAAqB,SAAS,uBAAuB,KAAK,UAAU,MAAM;AAChJ,WAAC,MAAM,KAAK,KAAK,cAAc,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,QACvF;AAAA,MACF;AAAA,MACA,+BAA+B,eAAe;AAC5C,cAAM,eAAe,KAAK,0BAA0B,UAAU,WAAS,UAAU,aAAa;AAC9F,YAAI,gBAAgB,GAAG;AACrB,eAAK,0BAA0B,OAAO,cAAc,CAAC;AAAA,QACvD;AAAA,MACF;AAAA,MACA,YAAY,UAAU;AACpB,SAAC,GAAG,UAAU,OAAO,YAAY,aAAa,OAAO,sBAAsB,MAAM,KAAK,YAAY,KAAK,QAAQ,GAAG,aAAa,aAAa,KAAK,MAAM,IAAI,MAAM,qBAAqB,kBAAkB,KAAK,iBAAiB,IAAI,SAAS,qBAAqB,kBAAkB,QAAQ,CAAC;AAC3R,YAAI,KAAK,iBAAiB;AACxB,eAAK,cAAc,SAAS,WAAW,kCAAkC,qBAAqB,kBAAkB,QAAQ,CAAC;AAAA,QAC3H;AACA,aAAK,oBAAoB;AACzB,cAAM,eAAe,KAAK,0BAA0B,MAAM;AAC1D,mBAAW,iBAAiB,cAAc;AACxC,cAAI,aAAa,cAAc,cAAc;AAC3C,gBAAI,cAAc,OAAO;AACvB,2BAAa,cAAc,KAAK;AAAA,YAClC;AACA,iBAAK,+BAA+B,aAAa;AACjD,0BAAc,SAAS;AAAA,UACzB;AAAA,QACF;AACA,YAAI,aAAa,qBAAqB,kBAAkB,mBAAmB;AACzE,eAAK,yBAAyB;AAAA,QAChC;AAAA,MACF;AAAA,MACA,kBAAkB,kBAAkB;AAClC,YAAI,mBAAmB,KAAK,eAAe;AACzC,eAAK,gBAAgB;AACrB,qBAAW,qBAAqB,KAAK,oBAAoB;AACvD,8BAAkB,kBAAkB,gBAAgB;AAAA,UACtD;AAAA,QACF;AAAA,MACF;AAAA,MACA,wBAAwB,mBAAmB;AACzC,aAAK,mBAAmB,OAAO,iBAAiB;AAAA,MAClD;AAAA,MACA,OAAO,UAAU,eAAe;AAC9B,eAAO,KAAK,cAAc,KAAK;AAAA,UAC7B;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,iBAAiB,MAAM;AACrB,aAAK,UAAU,KAAK,IAAI;AACxB,aAAK,gBAAgB;AAAA,MACvB;AAAA,MACA,UAAU,QAAQ,UAAU;AAC1B,aAAK,sBAAsB,SAAS;AACpC,YAAI,KAAK,gBAAgB;AACvB,iBAAO;AAAA,YACL,MAAM;AAAA,YACN,QAAQ,KAAK,eAAe,QAAQ,QAAQ;AAAA,UAC9C;AAAA,QACF,OAAO;AACL,cAAI,KAAK,wBAAwB;AAC/B,mBAAO;AAAA,cACL,MAAM;AAAA,cACN,OAAO,KAAK;AAAA,YACd;AAAA,UACF,OAAO;AACL,mBAAO;AAAA,cACL,MAAM;AAAA,YACR;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,mBAAmB,MAAM;AACvB,aAAK,qBAAqB,KAAK,IAAI;AACnC,aAAK,gBAAgB;AAAA,MACvB;AAAA,MACA,YAAY;AACV,aAAK,sBAAsB,QAAQ;AACnC,aAAK,YAAY,qBAAqB,kBAAkB,IAAI;AAC5D,aAAK,gBAAgB,IAAI,SAAS,YAAY,KAAK,qBAAqB;AACxE,YAAI,KAAK,WAAW;AAClB,uBAAa,KAAK,SAAS;AAC3B,eAAK,YAAY;AAAA,QACnB;AAAA,MACF;AAAA,MACA,iBAAiB,WAAW;AAC1B,YAAI,IAAI;AACR,aAAK,YAAY,WAAW,MAAM;AAChC,cAAI,KAAK,YAAY,GAAG;AAItB,iBAAK,iBAAiB,KAAK,aAAa;AACxC;AAAA,UACF;AACA,gBAAM,MAAM,oBAAI,KAAK;AACrB,gBAAM,wBAAwB,IAAI,QAAQ,IAAI,KAAK,sBAAsB,QAAQ;AACjF,cAAI,yBAAyB,KAAK,eAAe;AAC/C,iBAAK,MAAM,gCAAgC,KAAK,gBAAgB,kBAAkB;AAClF,iBAAK,UAAU;AAAA,UACjB,OAAO;AAKL,iBAAK,iBAAiB,KAAK,gBAAgB,qBAAqB;AAAA,UAClE;AAAA,QACF,GAAG,SAAS;AACZ,SAAC,MAAM,KAAK,KAAK,WAAW,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,MACpF;AAAA,MACA,sBAAsB;AACpB,YAAI,KAAK,sBAAsB,qBAAqB,kBAAkB,YAAY,CAAC,KAAK,WAAW;AACjG,eAAK,iBAAiB,KAAK,aAAa;AAAA,QAC1C;AAAA,MACF;AAAA,MACA,cAAc;AACZ,YAAI,KAAK,iBAAiB;AACxB,eAAK,YAAY,eAAe;AAAA,QAClC;AACA,aAAK,aAAa;AAAA,MACpB;AAAA,MACA,UAAU,QAAQ;AAChB,YAAI,KAAK,iBAAiB;AACxB,cAAI,OAAO,SAAS,YAAY,OAAO,IAAI;AACzC,iBAAK,YAAY,iBAAiB;AAAA,UACpC,OAAO;AACL,iBAAK,YAAY,cAAc;AAAA,UACjC;AAAA,QACF;AACA,aAAK,aAAa;AAClB,aAAK,wBAAwB,oBAAI,KAAK;AACtC,aAAK,oBAAoB;AAAA,MAC3B;AAAA,MACA,wBAAwB,YAAY,QAAQ,MAAMA,cAAa,UAAU;AACvE,cAAM,cAAc,GAAG,cAAc,mBAAmB;AACxD,aAAK,MAAM,8BAA8B,aAAa,eAAe,SAAS,GAAG;AACjF,eAAO,IAAI,sBAAsB,kBAAkB,MAAM,YAAY,QAAQ,MAAMA,cAAa,UAAU,UAAU;AAAA,MACtH;AAAA,MACA,mBAAmB,YAAY,QAAQ,MAAMA,cAAa,UAAU;AAClE,cAAM,cAAc,GAAG,cAAc,mBAAmB;AACxD,aAAK,MAAM,yBAAyB,aAAa,eAAe,SAAS,GAAG;AAC5E,eAAO,IAAI,gBAAgB,aAAa,MAAM,YAAY,QAAQ,MAAMA,cAAa,UAAU,YAAY,KAAK,oBAAoB,oBAAoB,IAAI,KAAK,UAAU,CAAC,CAAC;AAAA,MAC/K;AAAA,MACA,gBAAgB,YAAY,QAAQ,MAAMA,cAAa,UAAU;AAE/D,YAAI,KAAK,QAAQ,qBAAqB,MAAM,GAAG;AAC7C,iBAAO,KAAK,wBAAwB,YAAY,QAAQ,MAAMA,cAAa,QAAQ;AAAA,QACrF,OAAO;AACL,iBAAO,KAAK,mBAAmB,YAAY,QAAQ,MAAMA,cAAa,QAAQ;AAAA,QAChF;AAAA,MACF;AAAA,MACA,oBAAoB,QAAQ,UAAU,MAAM,YAAY,gBAAgB;AACtE,cAAM,cAAc,GAAG,cAAc,mBAAmB;AACxD,aAAK,MAAM,0BAA0B,aAAa,eAAe,SAAS,kBAAkB,GAAG,WAAW,kBAAkB,QAAQ,CAAC;AACrI,cAAM,eAAe;AAAA,UACnB;AAAA,UACA,OAAO,mBAAmB,QAAQ,mBAAmB,SAAS,iBAAiB,YAAY,UAAU;AAAA,UACrG,MAAM,SAAS,QAAQ,SAAS,SAAS,OAAO,KAAK;AAAA,UACrD;AAAA,QACF;AACA,cAAM,OAAO,IAAI,iBAAiB,cAAc,MAAM,QAAQ,cAAc,KAAK,mBAAmB,MAAM,GAAG,KAAK,YAAY,oBAAoB,GAAG,UAAU;AAC/J,aAAK,YAAY;AACjB,aAAK,iBAAiB,YAAU;AAC9B,eAAK,UAAU,MAAM;AAAA,QACvB,CAAC;AACD,eAAO;AAAA,MACT;AAAA,MACA,QAAQ;AACN,aAAK,sBAAsB,QAAQ;AACnC,aAAK,YAAY,qBAAqB,kBAAkB,QAAQ;AAChE,sBAAc,KAAK,YAAY;AAC/B,YAAI,KAAK,WAAW;AAClB,uBAAa,KAAK,SAAS;AAAA,QAC7B;AACA,YAAI,KAAK,iBAAiB;AACxB,WAAC,GAAG,WAAW,uBAAuB,KAAK,WAAW;AAAA,QACxD;AACA,aAAK,eAAe,uBAAuB;AAAA,MAC7C;AAAA,MACA,YAAY;AACV,gBAAQ,GAAG,aAAa,aAAa,KAAK,MAAM;AAAA,MAClD;AAAA,MACA,qBAAqB,cAAc;AACjC,cAAM,oBAAoB,KAAK;AAC/B,YAAI,cAAc;AAChB,eAAK,sBAAsB,SAAS;AACpC,eAAK,wBAAwB,oBAAI,KAAK;AACtC,eAAK,oBAAoB;AAAA,QAC3B;AACA,eAAO;AAAA,MACT;AAAA,MACA,uBAAuB,cAAc,UAAU,UAAU;AACvD,YAAI,KAAK,sBAAsB,qBAAqB,kBAAkB,UAAU;AAC9E,gBAAM,IAAI,MAAM,4BAA4B;AAAA,QAC9C;AACA,YAAI,QAAQ;AACZ,YAAI,aAAa,UAAU;AACzB,gBAAM,eAAe,oBAAoB,OAAO,WAAW,IAAI,KAAK,QAAQ;AAC5E,gBAAM,MAAM,oBAAI,KAAK;AACrB,cAAI,aAAa,aAAa,gBAAgB,KAAK;AACjD,oBAAQ,SAAS,UAAU,IAAI,MAAM,mDAAmD,CAAC;AACzF;AAAA,UACF;AACA,kBAAQ,WAAW,MAAM;AACvB,iBAAK,+BAA+B,aAAa;AACjD,qBAAS,IAAI,MAAM,mDAAmD,CAAC;AAAA,UACzE,GAAG,aAAa,QAAQ,IAAI,IAAI,QAAQ,CAAC;AAAA,QAC3C;AACA,cAAM,gBAAgB;AAAA,UACpB;AAAA,UACA;AAAA,UACA;AAAA,QACF;AACA,aAAK,0BAA0B,KAAK,aAAa;AAAA,MACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,iBAAiB;AACf,eAAO,KAAK;AAAA,MACd;AAAA,MACA,WAAW,QAAQ,UAAU,MAAM,YAAY,gBAAgB;AAC7D,YAAI,OAAO,WAAW,UAAU;AAC9B,gBAAM,IAAI,UAAU,6CAA6C;AAAA,QACnE;AACA,YAAI,EAAE,OAAO,aAAa,YAAY,oBAAoB,OAAO;AAC/D,gBAAM,IAAI,UAAU,uDAAuD;AAAA,QAC7E;AACA,YAAI,KAAK,sBAAsB,qBAAqB,kBAAkB,UAAU;AAC9E,gBAAM,IAAI,MAAM,4BAA4B;AAAA,QAC9C;AACA,eAAO,KAAK,oBAAoB,QAAQ,UAAU,MAAM,YAAY,cAAc;AAAA,MACpF;AAAA,IACF;AACA,IAAAD,SAAQ,kBAAkB;AAAA;AAAA;;;AClf1B;AAAA,oDAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,wBAAwB;AAChC,QAAM,wBAAwB;AAC9B,QAAM,qBAAqB;AAC3B,QAAM,wBAAN,MAA4B;AAAA,MAC1B,YAAY,QAAQC,cAAa,SAAS;AACxC,YAAI,OAAO,WAAW,UAAU;AAC9B,gBAAM,IAAI,UAAU,iCAAiC;AAAA,QACvD;AACA,YAAI,EAAEA,wBAAuB,sBAAsB,qBAAqB;AACtE,gBAAM,IAAI,UAAU,yDAAyD;AAAA,QAC/E;AACA,YAAI,SAAS;AACX,cAAI,OAAO,YAAY,UAAU;AAC/B,kBAAM,IAAI,UAAU,mCAAmC;AAAA,UACzD;AAAA,QACF;AACA,aAAK,kBAAkB,IAAI,mBAAmB,gBAAgB,QAAQA,cAAa,OAAO;AAAA,MAC5F;AAAA,MACA,QAAQ;AACN,aAAK,gBAAgB,MAAM;AAAA,MAC7B;AAAA,MACA,YAAY;AACV,eAAO,KAAK,gBAAgB,UAAU;AAAA,MACxC;AAAA,MACA,qBAAqB,cAAc;AACjC,eAAO,KAAK,gBAAgB,qBAAqB,YAAY;AAAA,MAC/D;AAAA,MACA,uBAAuB,cAAc,UAAU,UAAU;AACvD,aAAK,gBAAgB,uBAAuB,cAAc,UAAU,QAAQ;AAAA,MAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,iBAAiB;AACf,eAAO,KAAK,gBAAgB,eAAe;AAAA,MAC7C;AAAA,MACA,WAAW,QAAQ,UAAU,MAAM,YAAY,gBAAgB;AAC7D,YAAI,OAAO,WAAW,UAAU;AAC9B,gBAAM,IAAI,UAAU,6CAA6C;AAAA,QACnE;AACA,YAAI,EAAE,OAAO,aAAa,YAAY,oBAAoB,OAAO;AAC/D,gBAAM,IAAI,UAAU,uDAAuD;AAAA,QAC7E;AACA,eAAO,KAAK,gBAAgB,WAAW,QAAQ,UAAU,MAAM,YAAY,cAAc;AAAA,MAC3F;AAAA,IACF;AACA,IAAAD,SAAQ,wBAAwB;AAAA;AAAA;;;ACrEhC;AAAA,wDAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,wBAAwBA,SAAQ,yBAAyBA,SAAQ,2BAA2BA,SAAQ,2BAA2BA,SAAQ,sBAAsB;AACrK,QAAM,WAAW;AACjB,QAAM,QAAQ,UAAQ,OAAO;AAC7B,QAAM,WAAW,UAAQ,QAAQ;AACjC,QAAM,OAAO,UAAQ,MAAM;AAC3B,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,mBAAmB;AACzB,QAAM,UAAU;AAChB,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,aAAS,MAAM,MAAM;AACnB,cAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,IAAI;AAAA,IACjE;AACA,QAAM,8BAA8B;AACpC,QAAM,uBAAuB;AAC7B,QAAM,sBAAsB;AAC5B,QAAM,qBAAqB;AAC3B,QAAM,sBAAsB;AAC5B,QAAM,iBAAiB;AACvB,QAAM,oBAAoB;AAAA,MACxB,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AACA,QAAM,4BAA4B;AAAA;AAAA;AAAA,MAGhC,CAAC,2BAA2B,GAAG;AAAA,MAC/B,CAAC,oBAAoB,GAAG;AAAA,IAC1B;AACA,QAAM,yBAAyB;AAAA,MAC7B,CAAC,MAAM,UAAU,mBAAmB,GAAG,MAAM,UAAU;AAAA,MACvD,CAAC,MAAM,UAAU,yBAAyB,GAAG;AAAA,IAC/C;AACA,QAAM,yBAAyB;AAAA,MAC7B,iBAAiB;AAAA,IACnB;AACA,QAAM,sBAAN,cAAkC,SAAS,aAAa;AAAA,MACtD,YAAY,MAAM,UAAU,SAAS;AACnC,cAAM;AACN,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,UAAU;AACf,aAAK,YAAY;AACjB,aAAK,KAAK,iBAAiB,IAAI;AAAA,MACjC;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA,MACA,aAAa,kBAAkB;AAC7B,aAAK,KAAK,aAAa,gBAAgB;AAAA,MACzC;AAAA,MACA,cAAc;AACZ,eAAO,KAAK,KAAK,YAAY;AAAA,MAC/B;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA,IACF;AACA,IAAAA,SAAQ,sBAAsB;AAC9B,QAAM,2BAAN,cAAuC,SAAS,SAAS;AAAA,MACvD,YAAY,MAAM,UAAU,aAAa,UAAU;AACjD,cAAM;AAAA,UACJ,YAAY;AAAA,QACd,CAAC;AACD,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,cAAc;AACnB,aAAK,YAAY;AACjB,aAAK,KAAK,iBAAiB,IAAI;AAC/B,aAAK,KAAK,cAAc,MAAM,QAAQ;AAAA,MACxC;AAAA,MACA,MAAM,MAAM;AACV,YAAI,CAAC,KAAK,KAAK,wBAAwB,IAAI,GAAG;AAC5C;AAAA,QACF;AACA,aAAK,KAAK,OAAO;AAAA,MACnB;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA,MACA,aAAa,kBAAkB;AAC7B,aAAK,KAAK,aAAa,gBAAgB;AAAA,MACzC;AAAA,MACA,cAAc;AACZ,eAAO,KAAK,KAAK,YAAY;AAAA,MAC/B;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA,IACF;AACA,IAAAA,SAAQ,2BAA2B;AACnC,QAAM,2BAAN,cAAuC,SAAS,SAAS;AAAA,MACvD,YAAY,MAAM,UAAU,WAAW,SAAS;AAC9C,cAAM;AAAA,UACJ,YAAY;AAAA,QACd,CAAC;AACD,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,YAAY;AACjB,aAAK,UAAU;AACf,aAAK,YAAY;AACjB,aAAK,mBAAmB,IAAI,WAAW,SAAS;AAChD,aAAK,KAAK,iBAAiB,IAAI;AAC/B,aAAK,GAAG,SAAS,SAAO;AACtB,eAAK,KAAK,UAAU,GAAG;AACvB,eAAK,IAAI;AAAA,QACX,CAAC;AAAA,MACH;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA,MACA,aAAa,kBAAkB;AAC7B,aAAK,KAAK,aAAa,gBAAgB;AAAA,MACzC;AAAA,MACA,cAAc;AACZ,eAAO,KAAK,KAAK,YAAY;AAAA,MAC/B;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA,MACA,OAAO,OAAO,UAEd,UAAU;AACR,YAAI;AACF,gBAAM,WAAW,KAAK,KAAK,iBAAiB,KAAK;AACjD,cAAI,CAAC,KAAK,KAAK,MAAM,QAAQ,GAAG;AAC9B,iBAAK,KAAK,KAAK,SAAS,QAAQ;AAChC;AAAA,UACF;AAAA,QACF,SAAS,KAAK;AACZ,eAAK,KAAK,SAAS;AAAA,YACjB,UAAU,GAAG,QAAQ,iBAAiB,GAAG;AAAA,YACzC,MAAM,YAAY,OAAO;AAAA,UAC3B,CAAC;AAAA,QACH;AACA,iBAAS;AAAA,MACX;AAAA,MACA,OAAO,UAAU;AACf,aAAK,KAAK,WAAW;AAAA,UACnB,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS;AAAA,UACT,UAAU,KAAK;AAAA,QACjB,CAAC;AACD,iBAAS,IAAI;AAAA,MACf;AAAA;AAAA,MAEA,IAAI,UAAU;AACZ,YAAI,UAAU;AACZ,eAAK,mBAAmB;AAAA,QAC1B;AACA,eAAO,MAAM,IAAI;AAAA,MACnB;AAAA,IACF;AACA,IAAAA,SAAQ,2BAA2B;AACnC,QAAM,yBAAN,cAAqC,SAAS,OAAO;AAAA,MACnD,YAAY,MAAM,UAAU,WAAW,aAAa,UAAU;AAC5D,cAAM;AAAA,UACJ,YAAY;AAAA,QACd,CAAC;AACD,aAAK,OAAO;AACZ,aAAK,WAAW;AAChB,aAAK,YAAY;AACjB,aAAK,cAAc;AACnB,aAAK,YAAY;AACjB,aAAK,mBAAmB,IAAI,WAAW,SAAS;AAChD,aAAK,KAAK,iBAAiB,IAAI;AAC/B,aAAK,KAAK,cAAc,MAAM,QAAQ;AACtC,aAAK,GAAG,SAAS,SAAO;AACtB,eAAK,KAAK,UAAU,GAAG;AACvB,eAAK,IAAI;AAAA,QACX,CAAC;AAAA,MACH;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA,MACA,aAAa,kBAAkB;AAC7B,aAAK,KAAK,aAAa,gBAAgB;AAAA,MACzC;AAAA,MACA,cAAc;AACZ,eAAO,KAAK,KAAK,YAAY;AAAA,MAC/B;AAAA,MACA,UAAU;AACR,eAAO,KAAK,KAAK,QAAQ;AAAA,MAC3B;AAAA;AAAA,MAEA,IAAI,UAAU;AACZ,YAAI,UAAU;AACZ,eAAK,mBAAmB;AAAA,QAC1B;AACA,eAAO,MAAM,IAAI;AAAA,MACnB;AAAA,IACF;AACA,IAAAA,SAAQ,yBAAyB;AACjC,2BAAuB,UAAU,QAAQ,yBAAyB,UAAU;AAC5E,2BAAuB,UAAU,SAAS,yBAAyB,UAAU;AAC7E,2BAAuB,UAAU,SAAS,yBAAyB,UAAU;AAE7E,QAAM,wBAAN,cAAoC,SAAS,aAAa;AAAA,MACxD,YAAY,QAAQ,SAAS,SAAS;AACpC,cAAM;AACN,aAAK,SAAS;AACd,aAAK,UAAU;AACf,aAAK,YAAY;AACjB,aAAK,gBAAgB;AACrB,aAAK,aAAa;AAClB,aAAK,WAAW;AAChB,aAAK,eAAe;AACpB,aAAK,eAAe;AACpB,aAAK,UAAU;AACf,aAAK,gBAAgB;AACrB,aAAK,mBAAmB,CAAC;AACzB,aAAK,iBAAiB,CAAC;AACvB,aAAK,qBAAqB,YAAY;AACtC,aAAK,wBAAwB,YAAY;AACzC,aAAK,OAAO,KAAK,SAAS,SAAO;AAAA,QAMjC,CAAC;AACD,aAAK,OAAO,KAAK,SAAS,MAAM;AAC9B,cAAI;AACJ,gBAAM,yBAAyB,KAAK,KAAK,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,iCAAiC,KAAK,OAAO,OAAO;AACtJ,cAAI,CAAC,KAAK,YAAY;AACpB,iBAAK,YAAY;AACjB,iBAAK,KAAK,aAAa,WAAW;AAClC,iBAAK,KAAK,aAAa,KAAK;AAC5B,iBAAK,WAAW;AAAA,cACd,MAAM,YAAY,OAAO;AAAA,cACzB,SAAS;AAAA,cACT,UAAU;AAAA,YACZ,CAAC;AACD,gBAAI,KAAK,cAAe,cAAa,KAAK,aAAa;AAAA,UACzD;AAAA,QACF,CAAC;AACD,aAAK,OAAO,GAAG,SAAS,MAAM;AAC5B,eAAK,KAAK,OAAO;AAAA,QACnB,CAAC;AACD,YAAI,kCAAkC,SAAS;AAC7C,eAAK,qBAAqB,QAAQ,8BAA8B;AAAA,QAClE;AACA,YAAI,qCAAqC,SAAS;AAChD,eAAK,wBAAwB,QAAQ,iCAAiC;AAAA,QACxE;AAAA,MACF;AAAA,MACA,iBAAiB;AAGf,YAAI,KAAK,OAAO,aAAa,KAAK,OAAO,QAAQ;AAC/C,eAAK,YAAY;AAAA,QACnB;AACA,eAAO,KAAK;AAAA,MACd;AAAA,MACA,uBAAuB,SAAS,UAAU;AACxC,cAAM,kBAAkB,QAAQ,SAAS,CAAC;AAC1C,YAAI,aAAa,YAAY;AAC3B,iBAAO;AAAA,QACT,WAAW,aAAa,aAAa,aAAa,QAAQ;AACxD,cAAI;AACJ,cAAI,aAAa,WAAW;AAC1B,2BAAe,KAAK,cAAc;AAAA,UACpC,OAAO;AACL,2BAAe,KAAK,aAAa;AAAA,UACnC;AACA,iBAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAI,cAAc;AAClB,kBAAM,eAAe,CAAC;AACtB,yBAAa,GAAG,QAAQ,WAAS;AAC/B,2BAAa,KAAK,KAAK;AACvB,6BAAe,MAAM;AACrB,kBAAI,KAAK,0BAA0B,MAAM,cAAc,KAAK,uBAAuB;AACjF,6BAAa,QAAQ;AACrB,uBAAO;AAAA,kBACL,MAAM,YAAY,OAAO;AAAA,kBACzB,SAAS,4DAA4D,KAAK,qBAAqB;AAAA,gBACjG,CAAC;AAAA,cACH;AAAA,YACF,CAAC;AACD,yBAAa,GAAG,OAAO,MAAM;AAC3B,sBAAQ,OAAO,OAAO,YAAY,CAAC;AAAA,YACrC,CAAC;AACD,yBAAa,MAAM,eAAe;AAClC,yBAAa,IAAI;AAAA,UACnB,CAAC;AAAA,QACH,OAAO;AACL,iBAAO,QAAQ,OAAO;AAAA,YACpB,MAAM,YAAY,OAAO;AAAA,YACzB,SAAS,0DAA0D,QAAQ;AAAA,UAC7E,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,aAAa,gBAAgB;AAC3B,YAAI,KAAK,eAAe,GAAG;AACzB;AAAA,QACF;AACA,YAAI,KAAK,cAAc;AACrB;AAAA,QACF;AACA,aAAK,eAAe;AACpB,cAAM,SAAS,iBAAiB,eAAe,eAAe,IAAI;AAElE,cAAM,UAAU,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,sBAAsB,GAAG,yBAAyB,GAAG,MAAM;AACzH,aAAK,OAAO,QAAQ,SAAS,sBAAsB;AAAA,MACrD;AAAA,MACA,gBAAgB,SAAS;AACvB,cAAM,WAAW,WAAW,SAAS,iBAAiB,OAAO;AAC7D,YAAI,QAAQ,gBAAgB,WAAW,GAAG;AACxC,gBAAM,gBAAgB,KAAK,QAAQ,OAAO,uBAAuB,KAAK,UAAU,SAAS,OAAO,CAAC,CAAC;AAAA,QACpG;AAEA,cAAM,gBAAgB,SAAS,IAAI,mBAAmB;AACtD,YAAI,cAAc,SAAS,GAAG;AAC5B,gBAAM,QAAQ,cAAc,CAAC,EAAE,SAAS,EAAE,MAAM,cAAc;AAC9D,cAAI,UAAU,MAAM;AAClB,kBAAM,MAAM,IAAI,MAAM,kBAAkB;AACxC,gBAAI,OAAO,YAAY,OAAO;AAC9B,iBAAK,UAAU,GAAG;AAClB,mBAAO;AAAA,UACT;AACA,gBAAM,UAAU,CAAC,MAAM,CAAC,IAAI,kBAAkB,MAAM,CAAC,CAAC,IAAI;AAC1D,gBAAM,MAAM,oBAAI,KAAK;AACrB,eAAK,WAAW,IAAI,gBAAgB,IAAI,gBAAgB,IAAI,OAAO;AACnE,eAAK,gBAAgB,WAAW,uBAAuB,SAAS,IAAI;AACpE,mBAAS,OAAO,mBAAmB;AAAA,QACrC;AAEA,iBAAS,OAAO,MAAM,UAAU,4BAA4B;AAC5D,iBAAS,OAAO,MAAM,UAAU,eAAe;AAC/C,iBAAS,OAAO,MAAM,UAAU,yBAAyB;AACzD,iBAAS,OAAO,sBAAsB;AACtC,eAAO;AAAA,MACT;AAAA,MACA,oBAAoB,UAAU;AAC5B,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,gBAAM;AAAA,YACJ;AAAA,UACF,IAAI;AACJ,cAAI,iBAAiB;AAErB,gBAAM,OAAO;AACb,gBAAM,OAAO,CAAC;AACd,gBAAMC,SAAQ,KAAK;AACnB,eAAK,OAAO,GAAG,QAAQ,MAAM;AAC7B,eAAK,OAAO,GAAG,OAAO,KAAK;AAC3B,eAAK,OAAO,GAAG,SAAS,KAAK;AAC7B,mBAAS,OAAO,OAAO;AACrB,8BAAkB,MAAM;AACxB,gBAAIA,WAAU,MAAM,iBAAiBA,QAAO;AAC1C,qBAAO,eAAe,QAAQ,MAAM;AACpC,qBAAO,eAAe,OAAO,KAAK;AAClC,qBAAO,eAAe,SAAS,KAAK;AACpC,qBAAO;AAAA,gBACL,MAAM,YAAY,OAAO;AAAA,gBACzB,SAAS,qCAAqC,cAAc,QAAQA,MAAK;AAAA,cAC3E,CAAC;AACD;AAAA,YACF;AACA,iBAAK,KAAK,KAAK;AAAA,UACjB;AACA,mBAAS,MAAM,KAAK;AAClB,mBAAO,eAAe,QAAQ,MAAM;AACpC,mBAAO,eAAe,OAAO,KAAK;AAClC,mBAAO,eAAe,SAAS,KAAK;AACpC,gBAAI,QAAQ,QAAW;AACrB,qBAAO;AAAA,gBACL,MAAM,YAAY,OAAO;AAAA,gBACzB,SAAS,IAAI;AAAA,cACf,CAAC;AACD;AAAA,YACF;AACA,gBAAI,mBAAmB,GAAG;AACxB,qBAAO;AAAA,gBACL,MAAM,YAAY,OAAO;AAAA,gBACzB,SAAS;AAAA,cACX,CAAC;AACD;AAAA,YACF;AACA,iBAAK,KAAK,gBAAgB;AAC1B,kBAAM,eAAe,OAAO,OAAO,MAAM,cAAc;AACvD,kBAAM,aAAa,aAAa,UAAU,CAAC,MAAM;AACjD,kBAAM,4BAA4B,aAAa,WAAW;AAC1D,kBAAM,sBAAsB,KAAK,uBAAuB,cAAc,yBAAyB;AAC/F,gBAAI,OAAO,SAAS,mBAAmB,GAAG;AACxC,sBAAQ,KAAK,oCAAoC,mBAAmB,CAAC;AACrE;AAAA,YACF;AACA,gCAAoB,KAAK,kBAAgB,QAAQ,KAAK,oCAAoC,YAAY,CAAC,GAAG,CAAAC,SAAO,OAAOA,KAAI,OAAOA,OAAM;AAAA,cACvI,MAAM,YAAY,OAAO;AAAA,cACzB,SAAS,oCAAoC,QAAQ,SAAS,QAAQ;AAAA,YACxE,CAAC,CAAC;AAAA,UACJ;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACM,oCAAoC,QAAQ;AAAA;AAChD,cAAI;AACF,mBAAO,KAAK,mBAAmB,MAAM;AAAA,UACvC,SAAS,KAAK;AACZ,kBAAM;AAAA,cACJ,UAAU,GAAG,QAAQ,iBAAiB,GAAG;AAAA,cACzC,MAAM,YAAY,OAAO;AAAA,YAC3B;AAAA,UACF;AAAA,QACF;AAAA;AAAA,MACA,iBAAiB,OAAO;AACtB,cAAM,gBAAgB,KAAK,QAAQ,UAAU,KAAK;AAElD,cAAM,aAAa,cAAc;AACjC,cAAM,SAAS,OAAO,YAAY,aAAa,CAAC;AAChD,eAAO,WAAW,GAAG,CAAC;AACtB,eAAO,cAAc,YAAY,CAAC;AAClC,sBAAc,KAAK,QAAQ,CAAC;AAC5B,eAAO;AAAA,MACT;AAAA,MACA,mBAAmB,OAAO;AACxB,eAAO,KAAK,QAAQ,YAAY,KAAK;AAAA,MACvC;AAAA,MACM,iBAAiB,KAAK,OAAO,UAAU,OAAO;AAAA;AAClD,cAAI,KAAK,eAAe,GAAG;AACzB;AAAA,UACF;AACA,cAAI,aAAa,QAAW;AAC1B,uBAAW;AAAA,UACb;AACA,cAAI,KAAK;AACP,gBAAI,CAAC,OAAO,UAAU,eAAe,KAAK,KAAK,UAAU,KAAK,UAAU;AACtE,kBAAI,WAAW;AAAA,YACjB;AACA,iBAAK,UAAU,GAAG;AAClB;AAAA,UACF;AACA,cAAI;AACF,kBAAM,WAAW,KAAK,iBAAiB,KAAK;AAC5C,iBAAK,MAAM,QAAQ;AACnB,iBAAK,WAAW;AAAA,cACd,MAAM,YAAY,OAAO;AAAA,cACzB,SAAS;AAAA,cACT;AAAA,YACF,CAAC;AAAA,UACH,SAASA,MAAK;AACZ,iBAAK,UAAU;AAAA,cACb,UAAU,GAAG,QAAQ,iBAAiBA,IAAG;AAAA,cACzC,MAAM,YAAY,OAAO;AAAA,YAC3B,CAAC;AAAA,UACH;AAAA,QACF;AAAA;AAAA,MACA,WAAW,WAAW;AACpB,YAAI,IAAI;AACR,aAAK,KAAK,WAAW,UAAU,IAAI;AACnC,aAAK,KAAK,aAAa,UAAU,SAAS,YAAY,OAAO,EAAE;AAC/D,YAAI,KAAK,eAAe,GAAG;AACzB;AAAA,QACF;AACA,cAAM,yBAAyB,KAAK,KAAK,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,8BAA8B,YAAY,OAAO,UAAU,IAAI,IAAI,eAAe,UAAU,OAAO;AACrM,YAAI,KAAK,cAAe,cAAa,KAAK,aAAa;AACvD,YAAI,KAAK,OAAO,aAAa;AAC3B,cAAI,CAAC,KAAK,cAAc;AACtB,iBAAK,eAAe;AACpB,iBAAK,OAAO,KAAK,gBAAgB,MAAM;AACrC,kBAAIC;AACJ,oBAAM,iBAAiB,OAAO,OAAO;AAAA,gBACnC,CAAC,kBAAkB,GAAG,UAAU;AAAA,gBAChC,CAAC,mBAAmB,GAAG,UAAU,UAAU,OAAO;AAAA,cACpD,IAAIA,MAAK,UAAU,cAAc,QAAQA,QAAO,SAAS,SAASA,IAAG,eAAe,CAAC;AACrF,mBAAK,OAAO,aAAa,cAAc;AACvC,mBAAK,aAAa;AAAA,YACpB,CAAC;AACD,iBAAK,OAAO,IAAI;AAAA,UAClB;AAAA,QACF,OAAO;AAEL,gBAAM,iBAAiB,OAAO,OAAO,OAAO,OAAO;AAAA,YACjD,CAAC,kBAAkB,GAAG,UAAU;AAAA,YAChC,CAAC,mBAAmB,GAAG,UAAU,UAAU,OAAO;AAAA,UACpD,GAAG,sBAAsB,IAAI,KAAK,UAAU,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,eAAe,CAAC;AAC9G,eAAK,OAAO,QAAQ,gBAAgB;AAAA,YAClC,WAAW;AAAA,UACb,CAAC;AACD,eAAK,aAAa;AAAA,QACpB;AAAA,MACF;AAAA,MACA,UAAU,OAAO;AACf,cAAM,SAAS;AAAA,UACb,MAAM,YAAY,OAAO;AAAA,UACzB,SAAS,aAAa,QAAQ,MAAM,UAAU;AAAA,UAC9C,UAAU,cAAc,SAAS,MAAM,aAAa,SAAY,MAAM,WAAW;AAAA,QACnF;AACA,YAAI,UAAU,SAAS,OAAO,MAAM,SAAS,YAAY,OAAO,UAAU,MAAM,IAAI,GAAG;AACrF,iBAAO,OAAO,MAAM;AACpB,cAAI,aAAa,SAAS,OAAO,MAAM,YAAY,UAAU;AAC3D,mBAAO,UAAU,MAAM;AAAA,UACzB;AAAA,QACF;AACA,aAAK,WAAW,MAAM;AAAA,MACxB;AAAA,MACA,MAAM,OAAO;AACX,YAAI,KAAK,eAAe,GAAG;AACzB;AAAA,QACF;AACA,YAAI,KAAK,uBAAuB,MAAM,MAAM,SAAS,KAAK,oBAAoB;AAC5E,eAAK,UAAU;AAAA,YACb,MAAM,YAAY,OAAO;AAAA,YACzB,SAAS,iCAAiC,MAAM,MAAM,QAAQ,KAAK,kBAAkB;AAAA,UACvF,CAAC;AACD;AAAA,QACF;AACA,aAAK,aAAa;AAClB,aAAK,KAAK,aAAa;AACvB,eAAO,KAAK,OAAO,MAAM,KAAK;AAAA,MAChC;AAAA,MACA,SAAS;AACP,aAAK,OAAO,OAAO;AAAA,MACrB;AAAA,MACA,iBAAiB,MAAM;AACrB,aAAK,KAAK,aAAa,YAAU;AAC/B,eAAK,YAAY;AACjB,eAAK,KAAK,aAAa,MAAM;AAAA,QAC/B,CAAC;AACD,aAAK,KAAK,WAAW,YAAU,KAAK,KAAK,WAAW,MAAM,CAAC;AAAA,MAC7D;AAAA,MACA,cAAc,UAAU,UAAU;AAChC,cAAM,UAAU,IAAI,iBAAiB,cAAc,KAAK,qBAAqB;AAC7E,YAAI,YAAY;AAChB,YAAI,2BAA2B;AAC/B,YAAI,YAAY;AAChB,cAAM,eAAe,MAAY;AAC/B,cAAI,CAAC,aAAa,aAAa,CAAC,0BAA0B;AACxD,wBAAY;AACZ,kBAAM,KAAK,oBAAoB,UAAU,IAAI;AAAA,UAC/C;AAAA,QACF;AACA,aAAK,OAAO,GAAG,QAAQ,CAAM,SAAQ;AACnC,cAAI;AACJ,cAAI;AACF,uBAAW,QAAQ,MAAM,IAAI;AAAA,UAC/B,SAAS,GAAG;AACV,iBAAK,UAAU;AAAA,cACb,MAAM,YAAY,OAAO;AAAA,cACzB,SAAS,EAAE;AAAA,YACb,CAAC;AACD;AAAA,UACF;AACA,qCAA2B;AAC3B,eAAK,OAAO,MAAM;AAClB,qBAAW,WAAW,UAAU;AAC9B,iBAAK,KAAK,gBAAgB;AAC1B,kBAAM,aAAa,QAAQ,UAAU,CAAC,MAAM;AAC5C,kBAAM,4BAA4B,aAAa,WAAW;AAC1D,gBAAI;AACJ,gBAAI;AACF,oCAAsB,MAAM,KAAK,uBAAuB,SAAS,yBAAyB;AAAA,YAC5F,SAAS,GAAG;AACV,mBAAK,UAAU,CAAC;AAChB;AAAA,YACF;AAGA,gBAAI,CAAC,oBAAqB;AAC1B,kBAAM,KAAK,oBAAoB,UAAU,mBAAmB;AAAA,UAC9D;AACA,qCAA2B;AAC3B,eAAK,OAAO,OAAO;AACnB,gBAAM,aAAa;AAAA,QACrB,EAAC;AACD,aAAK,OAAO,KAAK,OAAO,MAAY;AAClC,sBAAY;AACZ,gBAAM,aAAa;AAAA,QACrB,EAAC;AAAA,MACH;AAAA,MACA,wBAAwB,UAAU;AAChC,aAAK,UAAU;AACf,eAAO,KAAK,eAAe,SAAS,GAAG;AACrC,gBAAM,cAAc,KAAK,eAAe,MAAM;AAC9C,gBAAM,UAAU,SAAS,KAAK,WAAW;AACzC,cAAI,gBAAgB,QAAQ,YAAY,OAAO;AAC7C,iBAAK,UAAU;AACf;AAAA,UACF;AAAA,QACF;AACA,eAAO,KAAK;AAAA,MACd;AAAA,MACM,oBAAoB,UAAU,cAAc;AAAA;AAChD,cAAI,KAAK,eAAe;AACtB,iBAAK,iBAAiB,KAAK,YAAY;AAAA,UACzC,OAAO;AACL,kBAAM,KAAK,YAAY,UAAU,YAAY;AAAA,UAC/C;AAAA,QACF;AAAA;AAAA,MACM,YAAY,UAAU,cAAc;AAAA;AACxC,cAAI,iBAAiB,MAAM;AACzB,kBAAM,wBAAwB;AAC9B,gBAAI,KAAK,SAAS;AAChB,uBAAS,KAAK,IAAI;AAAA,YACpB,OAAO;AACL,mBAAK,eAAe,KAAK,IAAI;AAAA,YAC/B;AACA;AAAA,UACF;AACA,gBAAM,gCAAgC,aAAa,MAAM;AACzD,eAAK,gBAAgB;AACrB,cAAI;AACF,kBAAM,eAAe,MAAM,KAAK,mBAAmB,YAAY;AAC/D,gBAAI,KAAK,SAAS;AAChB,kBAAI,CAAC,SAAS,KAAK,YAAY,GAAG;AAChC,qBAAK,UAAU;AACf,qBAAK,OAAO,MAAM;AAAA,cACpB;AAAA,YACF,OAAO;AACL,mBAAK,eAAe,KAAK,YAAY;AAAA,YACvC;AAAA,UACF,SAAS,OAAO;AAEd,iBAAK,iBAAiB,SAAS;AAC/B,gBAAI,QAAQ,GAAG,QAAQ,cAAc,KAAK;AAC1C,gBAAI,SAAS,QAAQ,OAAO,YAAY,OAAO,MAAM,OAAO,YAAY,OAAO,iBAAiB;AAC9F,qBAAO,YAAY,OAAO;AAAA,YAC5B;AACA,qBAAS,KAAK,SAAS;AAAA,cACrB,UAAU,GAAG,QAAQ,iBAAiB,KAAK;AAAA,cAC3C;AAAA,YACF,CAAC;AAAA,UACH;AACA,eAAK,gBAAgB;AACrB,cAAI,KAAK,iBAAiB,SAAS,GAAG;AACpC,kBAAM,KAAK,YAAY,UAAU,KAAK,iBAAiB,MAAM,CAAC;AAAA,UAChE;AAAA,QACF;AAAA;AAAA,MACA,UAAU;AACR,YAAI;AACJ,cAAM,UAAU,KAAK,KAAK,OAAO,aAAa,QAAQ,OAAO,SAAS,SAAS,GAAG;AAClF,YAAI,WAAW,QAAQ,WAAW,SAAS,SAAS,OAAO,eAAe;AACxE,cAAI,OAAO,YAAY;AACrB,mBAAO,GAAG,OAAO,aAAa,IAAI,OAAO,UAAU;AAAA,UACrD,OAAO;AACL,mBAAO,OAAO;AAAA,UAChB;AAAA,QACF,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,cAAc;AACZ,eAAO,KAAK;AAAA,MACd;AAAA,MACA,UAAU;AACR,eAAO,KAAK,QAAQ;AAAA,MACtB;AAAA,IACF;AACA,IAAAH,SAAQ,wBAAwB;AAChC,aAAS,sBAAsB,MAAM;AACnC,YAAM,MAAM,IAAI,MAAM,mBAAmB;AACzC,UAAI,OAAO,YAAY,OAAO;AAC9B,WAAK,UAAU,GAAG;AAClB,WAAK,YAAY;AACjB,WAAK,KAAK,aAAa,UAAU;AAAA,IACnC;AAAA;AAAA;;;ACxqBA;AAAA,+DAAAI,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,oBAAoB;AAC5B,QAAM,gBAAgB;AACtB,QAAM,oBAAN,MAAwB;AAAA,MACtB,OAAO,iBAAiB;AACtB,eAAO,IAAI,0BAA0B;AAAA,MACvC;AAAA,MACA,OAAO,UAAU,WAAW,cAAc,yBAAyB,OAAO;AACxE,YAAI,cAAc,QAAQ,CAAC,OAAO,SAAS,SAAS,GAAG;AACrD,gBAAM,IAAI,UAAU,oCAAoC;AAAA,QAC1D;AACA,YAAI,CAAC,MAAM,QAAQ,YAAY,GAAG;AAChC,gBAAM,IAAI,UAAU,+BAA+B;AAAA,QACrD;AACA,YAAI,OAAO,2BAA2B,WAAW;AAC/C,gBAAM,IAAI,UAAU,0CAA0C;AAAA,QAChE;AACA,cAAM,OAAO,CAAC;AACd,cAAM,MAAM,CAAC;AACb,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,gBAAM,OAAO,aAAa,CAAC;AAC3B,cAAI,SAAS,QAAQ,OAAO,SAAS,UAAU;AAC7C,kBAAM,IAAI,UAAU,eAAe,CAAC,qBAAqB;AAAA,UAC3D;AACA,cAAI,CAAC,OAAO,SAAS,KAAK,WAAW,GAAG;AACtC,kBAAM,IAAI,UAAU,eAAe,CAAC,gCAAgC;AAAA,UACtE;AACA,cAAI,CAAC,OAAO,SAAS,KAAK,UAAU,GAAG;AACrC,kBAAM,IAAI,UAAU,eAAe,CAAC,+BAA+B;AAAA,UACrE;AACA,eAAK,KAAK,KAAK,UAAU;AACzB,cAAI,KAAK,KAAK,WAAW;AAAA,QAC3B;AACA,eAAO,IAAI,wBAAwB;AAAA,UACjC,IAAI,cAAc,GAAG,cAAc,qBAAqB,KAAK;AAAA,UAC7D;AAAA,UACA;AAAA,UACA,aAAa;AAAA,UACb,SAAS,cAAc;AAAA,QACzB,CAAC;AAAA,MACH;AAAA,IACF;AACA,IAAAA,SAAQ,oBAAoB;AAC5B,QAAM,4BAAN,cAAwC,kBAAkB;AAAA,MACxD,YAAY;AACV,eAAO;AAAA,MACT;AAAA,MACA,eAAe;AACb,eAAO;AAAA,MACT;AAAA,IACF;AACA,QAAM,0BAAN,cAAsC,kBAAkB;AAAA,MACtD,YAAY,SAAS;AACnB,cAAM;AACN,aAAK,UAAU;AAAA,MACjB;AAAA,MACA,YAAY;AACV,eAAO;AAAA,MACT;AAAA,MACA,eAAe;AACb,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAAA;AAAA;;;AClFA;AAAA,mDAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,SAAS;AACjB,QAAM,QAAQ,UAAQ,OAAO;AAC7B,QAAM,cAAc;AACpB,QAAM,gBAAgB;AACtB,QAAM,uBAAuB;AAC7B,QAAM,aAAa;AACnB,QAAM,UAAU;AAChB,QAAM,uBAAuB;AAC7B,QAAM,eAAe;AACrB,QAAM,aAAa;AACnB,QAAM,8BAA8B,EAAE,KAAK;AAC3C,QAAM,wBAAwB,EAAE,KAAK;AACrC,QAAM,uBAAuB;AAC7B,QAAM;AAAA,MACJ;AAAA,IACF,IAAI,MAAM;AACV,QAAM,cAAc;AACpB,aAAS,OAAO;AAAA,IAAC;AACjB,aAAS,+BAA+B,YAAY;AAClD,aAAO;AAAA,QACL,MAAM,YAAY,OAAO;AAAA,QACzB,SAAS,4CAA4C,UAAU;AAAA,MACjE;AAAA,IACF;AACA,aAAS,kBAAkB,aAAa,YAAY;AAClD,YAAM,8BAA8B,+BAA+B,UAAU;AAC7E,cAAQ,aAAa;AAAA,QACnB,KAAK;AACH,iBAAO,CAAC,MAAM,aAAa;AACzB,qBAAS,6BAA6B,IAAI;AAAA,UAC5C;AAAA,QACF,KAAK;AACH,iBAAO,CAAC,MAAM,aAAa;AACzB,qBAAS,6BAA6B,IAAI;AAAA,UAC5C;AAAA,QACF,KAAK;AACH,iBAAO,UAAQ;AACb,iBAAK,KAAK,SAAS,2BAA2B;AAAA,UAChD;AAAA,QACF,KAAK;AACH,iBAAO,UAAQ;AACb,iBAAK,KAAK,SAAS,2BAA2B;AAAA,UAChD;AAAA,QACF;AACE,gBAAM,IAAI,MAAM,uBAAuB,WAAW,EAAE;AAAA,MACxD;AAAA,IACF;AACA,QAAM,SAAN,MAAa;AAAA,MACX,YAAY,SAAS;AACnB,YAAI,IAAI,IAAI,IAAI;AAChB,aAAK,kBAAkB,CAAC;AACxB,aAAK,WAAW,oBAAI,IAAI;AACxB,aAAK,WAAW,oBAAI,IAAI;AACxB,aAAK,UAAU;AACf,aAAK,WAAW;AAChB,aAAK,sBAAsB;AAE3B,aAAK,kBAAkB;AACvB,aAAK,gBAAgB,IAAI,WAAW,cAAc;AAClD,aAAK,cAAc,IAAI,WAAW,oBAAoB;AACtD,aAAK,0BAA0B,IAAI,WAAW,wBAAwB;AACtE,aAAK,yBAAyB,IAAI,WAAW,wBAAwB;AACrE,aAAK,UAAU,YAAY,QAAQ,YAAY,SAAS,UAAU,CAAC;AACnE,YAAI,KAAK,QAAQ,sBAAsB,MAAM,GAAG;AAC9C,eAAK,kBAAkB;AAAA,QACzB;AACA,aAAK,eAAe,GAAG,WAAW,wBAAwB,MAAM,KAAK,gBAAgB,GAAG,KAAK,eAAe;AAC5G,YAAI,KAAK,iBAAiB;AACxB,eAAK,cAAc,SAAS,WAAW,gBAAgB;AAAA,QACzD;AACA,aAAK,sBAAsB,KAAK,KAAK,QAAQ,4BAA4B,OAAO,QAAQ,OAAO,SAAS,KAAK;AAC7G,aAAK,2BAA2B,KAAK,KAAK,QAAQ,kCAAkC,OAAO,QAAQ,OAAO,SAAS,KAAK;AACxH,aAAK,mBAAmB,KAAK,KAAK,QAAQ,wBAAwB,OAAO,QAAQ,OAAO,SAAS,KAAK;AACtG,aAAK,sBAAsB,KAAK,KAAK,QAAQ,2BAA2B,OAAO,QAAQ,OAAO,SAAS,KAAK;AAC5G,aAAK,MAAM,oBAAoB;AAAA,MACjC;AAAA,MACA,kBAAkB;AAChB,eAAO;AAAA,UACL,OAAO,KAAK;AAAA,UACZ,aAAa,KAAK;AAAA,UAClB,kBAAkB,KAAK,wBAAwB,cAAc;AAAA,UAC7D,iBAAiB,KAAK,uBAAuB,cAAc;AAAA,QAC7D;AAAA,MACF;AAAA,MACA,6BAA6B,SAAS;AACpC,eAAO,MAAM;AACX,cAAI,IAAI,IAAI;AACZ,gBAAM,cAAc,KAAK,SAAS,IAAI,OAAO;AAC7C,gBAAM,gBAAgB,QAAQ;AAC9B,gBAAM,gBAAgB,cAAc,iBAAiB,GAAG,qBAAqB,2BAA2B,cAAc,eAAe,cAAc,UAAU,IAAI;AACjK,gBAAM,eAAe,cAAc,gBAAgB,GAAG,qBAAqB,2BAA2B,cAAc,cAAc,cAAc,SAAS,IAAI;AAC7J,cAAI;AACJ,cAAI,QAAQ,WAAW;AACrB,kBAAM,YAAY;AAClB,kBAAM,aAAa,UAAU,UAAU;AACvC,kBAAM,cAAc,UAAU,eAAe;AAC7C,kBAAM,kBAAkB,UAAU,mBAAmB;AACrD,sBAAU;AAAA,cACR,0BAA0B,KAAK,WAAW,kBAAkB,QAAQ,OAAO,SAAS,KAAK;AAAA,cACzF,sBAAsB,WAAW,eAAe,OAAO,WAAW;AAAA,cAClE,kBAAkB,eAAe,SAAS,cAAc,YAAY,MAAM;AAAA,cAC1E,mBAAmB,mBAAmB,SAAS,kBAAkB,gBAAgB,MAAM;AAAA,YACzF;AAAA,UACF,OAAO;AACL,sBAAU;AAAA,UACZ;AACA,gBAAM,aAAa;AAAA,YACjB;AAAA,YACA;AAAA,YACA,UAAU;AAAA,YACV,YAAY;AAAA,YACZ,gBAAgB,YAAY,cAAc;AAAA,YAC1C,kBAAkB,YAAY,cAAc;AAAA,YAC5C,eAAe,YAAY,cAAc;AAAA,YACzC,cAAc,YAAY;AAAA,YAC1B,kBAAkB,YAAY;AAAA,YAC9B,gBAAgB;AAAA,YAChB,iCAAiC;AAAA,YACjC,kCAAkC,YAAY,cAAc;AAAA,YAC5D,0BAA0B,YAAY;AAAA,YACtC,8BAA8B,YAAY;AAAA,YAC1C,yBAAyB,KAAK,QAAQ,MAAM,qBAAqB,QAAQ,OAAO,SAAS,KAAK;AAAA,YAC9F,0BAA0B,KAAK,QAAQ,MAAM,sBAAsB,QAAQ,OAAO,SAAS,KAAK;AAAA,UAClG;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,MACA,MAAM,MAAM;AACV,gBAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,MAAM,KAAK,YAAY,KAAK,OAAO,IAAI;AAAA,MACpG;AAAA,MACA,kBAAkB;AAChB,cAAM,IAAI,MAAM,2CAA2C;AAAA,MAC7D;AAAA,MACA,WAAW,SAAS,gBAAgB;AAClC,YAAI,YAAY,QAAQ,OAAO,YAAY,YAAY,mBAAmB,QAAQ,OAAO,mBAAmB,UAAU;AACpH,gBAAM,IAAI,MAAM,gDAAgD;AAAA,QAClE;AACA,cAAM,cAAc,OAAO,KAAK,OAAO;AACvC,YAAI,YAAY,WAAW,GAAG;AAC5B,gBAAM,IAAI,MAAM,yCAAyC;AAAA,QAC3D;AACA,oBAAY,QAAQ,CAAAC,UAAQ;AAC1B,gBAAM,QAAQ,QAAQA,KAAI;AAC1B,cAAI;AACJ,cAAI,MAAM,eAAe;AACvB,gBAAI,MAAM,gBAAgB;AACxB,2BAAa;AAAA,YACf,OAAO;AACL,2BAAa;AAAA,YACf;AAAA,UACF,OAAO;AACL,gBAAI,MAAM,gBAAgB;AACxB,2BAAa;AAAA,YACf,OAAO;AACL,2BAAa;AAAA,YACf;AAAA,UACF;AACA,cAAI,SAAS,eAAeA,KAAI;AAChC,cAAI;AACJ,cAAI,WAAW,UAAa,OAAO,MAAM,iBAAiB,UAAU;AAClE,qBAAS,eAAe,MAAM,YAAY;AAAA,UAC5C;AACA,cAAI,WAAW,QAAW;AACxB,mBAAO,OAAO,KAAK,cAAc;AAAA,UACnC,OAAO;AACL,mBAAO,kBAAkB,YAAYA,KAAI;AAAA,UAC3C;AACA,gBAAM,UAAU,KAAK,SAAS,MAAM,MAAM,MAAM,MAAM,mBAAmB,MAAM,oBAAoB,UAAU;AAC7G,cAAI,YAAY,OAAO;AACrB,kBAAM,IAAI,MAAM,sBAAsB,MAAM,IAAI,oBAAoB;AAAA,UACtE;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,cAAc,SAAS;AACrB,YAAI,YAAY,QAAQ,OAAO,YAAY,UAAU;AACnD,gBAAM,IAAI,MAAM,6CAA6C;AAAA,QAC/D;AACA,cAAM,cAAc,OAAO,KAAK,OAAO;AACvC,oBAAY,QAAQ,CAAAA,UAAQ;AAC1B,gBAAM,QAAQ,QAAQA,KAAI;AAC1B,eAAK,WAAW,MAAM,IAAI;AAAA,QAC5B,CAAC;AAAA,MACH;AAAA,MACA,KAAK,MAAM,OAAO;AAChB,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC5D;AAAA,MACA,UAAU,MAAM,OAAO,UAAU;AAC/B,YAAI,KAAK,YAAY,MAAM;AACzB,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC7C;AACA,YAAI,KAAK,UAAU;AACjB,gBAAM,IAAI,MAAM,iCAAiC;AAAA,QACnD;AACA,YAAI,OAAO,SAAS,UAAU;AAC5B,gBAAM,IAAI,UAAU,uBAAuB;AAAA,QAC7C;AACA,YAAI,UAAU,QAAQ,EAAE,iBAAiB,qBAAqB,oBAAoB;AAChF,gBAAM,IAAI,UAAU,0CAA0C;AAAA,QAChE;AACA,YAAI,OAAO,aAAa,YAAY;AAClC,gBAAM,IAAI,UAAU,6BAA6B;AAAA,QACnD;AACA,cAAM,kBAAkB,GAAG,aAAa,UAAU,IAAI;AACtD,YAAI,mBAAmB,MAAM;AAC3B,gBAAM,IAAI,MAAM,yBAAyB,IAAI,GAAG;AAAA,QAClD;AACA,cAAM,WAAW,GAAG,WAAW,qBAAqB,cAAc;AAClE,YAAI,YAAY,MAAM;AACpB,gBAAM,IAAI,MAAM,4CAA4C,IAAI,GAAG;AAAA,QACrE;AACA,cAAM,gBAAgB;AAAA,UACpB,0BAA0B,OAAO;AAAA,QACnC;AACA,YAAI,kCAAkC,KAAK,SAAS;AAClD,wBAAc,mBAAmB,KAAK,QAAQ,8BAA8B;AAAA,QAC9E,OAAO;AAKL,wBAAc,mBAAmB,OAAO;AAAA,QAC1C;AACA,YAAI,iCAAiC,KAAK,SAAS;AACjD,wBAAc,WAAW;AAAA,YACvB,sBAAsB,KAAK,QAAQ,6BAA6B;AAAA,UAClE;AAAA,QACF;AACA,cAAM,mBAAmB,CAAC,OAAOC,UAAS;AACxC,kBAAQ,SAAS,MAAM,SAAS,OAAOA,KAAI,CAAC;AAAA,QAC9C;AACA,cAAM,cAAc,MAAM;AACxB,cAAI;AACJ,cAAI,MAAM,UAAU,GAAG;AACrB,kBAAM,sBAAsB,OAAO,OAAO,eAAe,MAAM,aAAa,CAAC;AAC7E,gCAAoB,cAAc,KAAK,QAAQ,4BAA4B,MAAM;AACjF,0BAAc,MAAM,mBAAmB,mBAAmB;AAC1D,wBAAY,GAAG,oBAAoB,YAAU;AAG3C,qBAAO,GAAG,SAAS,OAAK;AACtB,qBAAK,MAAM,mDAAmD,EAAE,OAAO;AAAA,cACzE,CAAC;AAAA,YACH,CAAC;AAAA,UACH,OAAO;AACL,0BAAc,MAAM,aAAa,aAAa;AAAA,UAChD;AACA,sBAAY,WAAW,GAAG,IAAI;AAC9B,eAAK,eAAe,WAAW;AAC/B,iBAAO;AAAA,QACT;AACA,cAAM,mBAAmB,CAAC,aAAa,SAAS,kBAAkB;AAChE,cAAI,YAAY,WAAW,GAAG;AAC5B,mBAAO,QAAQ,QAAQ;AAAA,cACrB,MAAM;AAAA,cACN,OAAO;AAAA,YACT,CAAC;AAAA,UACH;AACA,iBAAO,QAAQ,IAAI,YAAY,IAAI,aAAW;AAC5C,iBAAK,MAAM,yBAAyB,GAAG,qBAAqB,2BAA2B,OAAO,CAAC;AAC/F,gBAAI;AACJ,iBAAK,GAAG,qBAAqB,wBAAwB,OAAO,GAAG;AAC7D,qBAAO;AAAA,gBACL,MAAM,QAAQ;AAAA,gBACd,MAAM;AAAA,cACR;AAAA,YACF,OAAO;AACL,qBAAO;AAAA,YACT;AACA,kBAAM,cAAc,YAAY;AAChC,mBAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,oBAAM,UAAU,SAAO;AACrB,qBAAK,MAAM,qBAAqB,GAAG,qBAAqB,2BAA2B,OAAO,IAAI,iBAAiB,IAAI,OAAO;AAC1H,wBAAQ,GAAG;AAAA,cACb;AACA,0BAAY,KAAK,SAAS,OAAO;AACjC,0BAAY,OAAO,MAAM,MAAM;AAC7B,oBAAI,KAAK,UAAU;AACjB,8BAAY,MAAM;AAClB,0BAAQ,IAAI,MAAM,6CAA6C,CAAC;AAChE;AAAA,gBACF;AACA,sBAAM,eAAe,YAAY,QAAQ;AACzC,oBAAI;AACJ,oBAAI,OAAO,iBAAiB,UAAU;AACpC,2CAAyB;AAAA,oBACvB,MAAM;AAAA,kBACR;AAAA,gBACF,OAAO;AACL,2CAAyB;AAAA,oBACvB,MAAM,aAAa;AAAA,oBACnB,MAAM,aAAa;AAAA,kBACrB;AAAA,gBACF;AACA,sBAAM,eAAe,GAAG,WAAW,yBAAyB,GAAG,qBAAqB,2BAA2B,sBAAsB,GAAG,MAAM;AAC5I,yBAAO;AAAA,oBACL,cAAc;AAAA,oBACd,eAAe;AAAA,oBACf,UAAU;AAAA,oBACV,YAAY;AAAA,oBACZ,gBAAgB;AAAA,oBAChB,kBAAkB;AAAA,oBAClB,eAAe;AAAA,oBACf,cAAc;AAAA,oBACd,kBAAkB;AAAA,oBAClB,gBAAgB;AAAA,oBAChB,iCAAiC;AAAA,oBACjC,kCAAkC;AAAA,oBAClC,0BAA0B;AAAA,oBAC1B,8BAA8B;AAAA,oBAC9B,wBAAwB;AAAA,oBACxB,yBAAyB;AAAA,kBAC3B;AAAA,gBACF,GAAG,KAAK,eAAe;AACvB,oBAAI,KAAK,iBAAiB;AACxB,uBAAK,wBAAwB,SAAS,WAAW;AAAA,gBACnD;AACA,qBAAK,gBAAgB,KAAK;AAAA,kBACxB,QAAQ;AAAA,kBACR;AAAA,gBACF,CAAC;AACD,qBAAK,MAAM,yBAAyB,GAAG,qBAAqB,2BAA2B,sBAAsB,CAAC;AAC9G,wBAAQ,UAAU,yBAAyB,uBAAuB,OAAO,OAAO;AAChF,4BAAY,eAAe,SAAS,OAAO;AAAA,cAC7C,CAAC;AAAA,YACH,CAAC;AAAA,UACH,CAAC,CAAC,EAAE,KAAK,aAAW;AAClB,gBAAIC,SAAQ;AACZ,uBAAW,UAAU,SAAS;AAC5B,kBAAI,OAAO,WAAW,UAAU;AAC9B,gBAAAA,UAAS;AACT,oBAAI,WAAW,SAAS;AACtB,wBAAM,IAAI,MAAM,gEAAgE;AAAA,gBAClF;AAAA,cACF;AAAA,YACF;AACA,mBAAO;AAAA,cACL,MAAM;AAAA,cACN,OAAOA,SAAQ;AAAA,YACjB;AAAA,UACF,CAAC;AAAA,QACH;AACA,cAAM,mBAAmB,iBAAe;AACtC,cAAI,YAAY,WAAW,GAAG;AAC5B,mBAAO,QAAQ,QAAQ;AAAA,cACrB,MAAM;AAAA,cACN,OAAO;AAAA,YACT,CAAC;AAAA,UACH;AACA,gBAAM,UAAU,YAAY,CAAC;AAC7B,gBAAM,cAAc,YAAY;AAChC,iBAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,kBAAM,UAAU,SAAO;AACrB,mBAAK,MAAM,qBAAqB,GAAG,qBAAqB,2BAA2B,OAAO,IAAI,iBAAiB,IAAI,OAAO;AAC1H,sBAAQ,iBAAiB,YAAY,MAAM,CAAC,CAAC,CAAC;AAAA,YAChD;AACA,wBAAY,KAAK,SAAS,OAAO;AACjC,wBAAY,OAAO,SAAS,MAAM;AAChC,kBAAI,KAAK,UAAU;AACjB,4BAAY,MAAM;AAClB,wBAAQ;AAAA,kBACN,MAAM;AAAA,kBACN,OAAO;AAAA,gBACT,CAAC;AACD;AAAA,cACF;AACA,oBAAM,eAAe,YAAY,QAAQ;AACzC,oBAAM,yBAAyB;AAAA,gBAC7B,MAAM,aAAa;AAAA,gBACnB,MAAM,aAAa;AAAA,cACrB;AACA,oBAAM,eAAe,GAAG,WAAW,yBAAyB,GAAG,qBAAqB,2BAA2B,sBAAsB,GAAG,MAAM;AAC5I,uBAAO;AAAA,kBACL,cAAc;AAAA,kBACd,eAAe;AAAA,kBACf,UAAU;AAAA,kBACV,YAAY;AAAA,kBACZ,gBAAgB;AAAA,kBAChB,kBAAkB;AAAA,kBAClB,eAAe;AAAA,kBACf,cAAc;AAAA,kBACd,kBAAkB;AAAA,kBAClB,gBAAgB;AAAA,kBAChB,iCAAiC;AAAA,kBACjC,kCAAkC;AAAA,kBAClC,0BAA0B;AAAA,kBAC1B,8BAA8B;AAAA,kBAC9B,wBAAwB;AAAA,kBACxB,yBAAyB;AAAA,gBAC3B;AAAA,cACF,GAAG,KAAK,eAAe;AACvB,kBAAI,KAAK,iBAAiB;AACxB,qBAAK,wBAAwB,SAAS,WAAW;AAAA,cACnD;AACA,mBAAK,gBAAgB,KAAK;AAAA,gBACxB,QAAQ;AAAA,gBACR;AAAA,cACF,CAAC;AACD,mBAAK,MAAM,yBAAyB,GAAG,qBAAqB,2BAA2B,sBAAsB,CAAC;AAC9G,sBAAQ,iBAAiB,YAAY,MAAM,CAAC,GAAG,aAAa,MAAM,CAAC,CAAC;AACpE,0BAAY,eAAe,SAAS,OAAO;AAAA,YAC7C,CAAC;AAAA,UACH,CAAC;AAAA,QACH;AACA,cAAM,mBAAmB;AAAA,UACvB,wBAAwB,CAAC,aAAa,eAAe,uBAAuB;AAE1E,6BAAiB,yBAAyB,MAAM;AAAA,YAAC;AACjD,gBAAI,KAAK,UAAU;AACjB,+BAAiB,IAAI,MAAM,6CAA6C,GAAG,CAAC;AAAA,YAC9E;AACA,gBAAI,YAAY,WAAW,GAAG;AAC5B,+BAAiB,IAAI,MAAM,kCAAkC,IAAI,EAAE,GAAG,CAAC;AACvE;AAAA,YACF;AACA,gBAAI;AACJ,iBAAK,GAAG,qBAAqB,wBAAwB,YAAY,CAAC,CAAC,GAAG;AACpE,kBAAI,YAAY,CAAC,EAAE,SAAS,GAAG;AAC7B,oCAAoB,iBAAiB,WAAW;AAAA,cAClD,OAAO;AACL,oCAAoB,iBAAiB,aAAa,YAAY,CAAC,EAAE,MAAM,CAAC;AAAA,cAC1E;AAAA,YACF,OAAO;AAEL,kCAAoB,iBAAiB,aAAa,GAAG,CAAC;AAAA,YACxD;AACA,8BAAkB,KAAK,gBAAc;AACnC,kBAAI,WAAW,UAAU,GAAG;AAC1B,sBAAM,cAAc,iCAAiC,YAAY,MAAM;AACvE,wBAAQ,IAAI,YAAY,aAAa,OAAO,WAAW;AACvD,iCAAiB,IAAI,MAAM,WAAW,GAAG,CAAC;AAAA,cAC5C,OAAO;AACL,oBAAI,WAAW,QAAQ,YAAY,QAAQ;AACzC,0BAAQ,IAAI,YAAY,aAAa,MAAM,gBAAgB,WAAW,KAAK,iCAAiC,YAAY,MAAM,WAAW;AAAA,gBAC3I;AACA,iCAAiB,MAAM,WAAW,IAAI;AAAA,cACxC;AAAA,YACF,GAAG,WAAS;AACV,oBAAM,cAAc,iCAAiC,YAAY,MAAM;AACvE,sBAAQ,IAAI,YAAY,aAAa,OAAO,WAAW;AACvD,+BAAiB,IAAI,MAAM,WAAW,GAAG,CAAC;AAAA,YAC5C,CAAC;AAAA,UACH;AAAA,UACA,SAAS,WAAS;AAChB,6BAAiB,IAAI,MAAM,MAAM,OAAO,GAAG,CAAC;AAAA,UAC9C;AAAA,QACF;AACA,cAAM,YAAY,GAAG,WAAW,gBAAgB,SAAS,kBAAkB,KAAK,OAAO;AACvF,iBAAS,iBAAiB;AAAA,MAC5B;AAAA,MACA,gBAAgB;AAEd,mBAAW;AAAA,UACT,QAAQ;AAAA,UACR,aAAa;AAAA,QACf,KAAK,KAAK,iBAAiB;AACzB,cAAI,YAAY,WAAW;AACzB,wBAAY,MAAM,MAAM;AACtB,kBAAI,KAAK,iBAAiB;AACxB,qBAAK,wBAAwB,WAAW,GAAG;AAC3C,iBAAC,GAAG,WAAW,uBAAuB,GAAG;AAAA,cAC3C;AAAA,YACF,CAAC;AAAA,UACH;AAAA,QACF;AACA,aAAK,UAAU;AACf,aAAK,WAAW;AAGhB,aAAK,SAAS,QAAQ,CAAC,cAAc,YAAY;AAI/C,kBAAQ,QAAQ,MAAM,UAAU,cAAc;AAAA,QAChD,CAAC;AACD,aAAK,SAAS,MAAM;AACpB,YAAI,KAAK,iBAAiB;AACxB,WAAC,GAAG,WAAW,uBAAuB,KAAK,WAAW;AAAA,QACxD;AAAA,MACF;AAAA,MACA,SAASF,OAAM,SAAS,WAAW,aAAa,MAAM;AACpD,YAAI,KAAK,SAAS,IAAIA,KAAI,GAAG;AAC3B,iBAAO;AAAA,QACT;AACA,aAAK,SAAS,IAAIA,OAAM;AAAA,UACtB,MAAM;AAAA,UACN;AAAA,UACA;AAAA,UACA;AAAA,UACA,MAAMA;AAAA,QACR,CAAC;AACD,eAAO;AAAA,MACT;AAAA,MACA,WAAWA,OAAM;AACf,eAAO,KAAK,SAAS,OAAOA,KAAI;AAAA,MAClC;AAAA,MACA,QAAQ;AACN,YAAI,KAAK,gBAAgB,WAAW,KAAK,KAAK,gBAAgB,MAAM,CAAC;AAAA,UACnE,QAAQ;AAAA,QACV,MAAM,YAAY,cAAc,IAAI,GAAG;AACrC,gBAAM,IAAI,MAAM,wCAAwC;AAAA,QAC1D;AACA,YAAI,KAAK,YAAY,MAAM;AACzB,gBAAM,IAAI,MAAM,2BAA2B;AAAA,QAC7C;AACA,YAAI,KAAK,iBAAiB;AACxB,eAAK,cAAc,SAAS,WAAW,UAAU;AAAA,QACnD;AACA,aAAK,UAAU;AAAA,MACjB;AAAA,MACA,YAAY,UAAU;AACpB,cAAM,kBAAkB,WAAS;AAC/B,cAAI,KAAK,iBAAiB;AACxB,aAAC,GAAG,WAAW,uBAAuB,KAAK,WAAW;AAAA,UACxD;AACA,mBAAS,KAAK;AAAA,QAChB;AACA,YAAI,gBAAgB;AACpB,iBAAS,gBAAgB;AACvB;AACA,cAAI,kBAAkB,GAAG;AACvB,4BAAgB;AAAA,UAClB;AAAA,QACF;AAEA,aAAK,UAAU;AACf,aAAK,WAAW;AAChB,mBAAW;AAAA,UACT,QAAQ;AAAA,UACR,aAAa;AAAA,QACf,KAAK,KAAK,iBAAiB;AACzB,cAAI,YAAY,WAAW;AACzB;AACA,wBAAY,MAAM,MAAM;AACtB,kBAAI,KAAK,iBAAiB;AACxB,qBAAK,wBAAwB,WAAW,GAAG;AAC3C,iBAAC,GAAG,WAAW,uBAAuB,GAAG;AAAA,cAC3C;AACA,4BAAc;AAAA,YAChB,CAAC;AAAA,UACH;AAAA,QACF;AACA,aAAK,SAAS,QAAQ,CAAC,cAAc,YAAY;AAC/C,cAAI,CAAC,QAAQ,QAAQ;AACnB,6BAAiB;AACjB,oBAAQ,MAAM,aAAa;AAAA,UAC7B;AAAA,QACF,CAAC;AACD,YAAI,kBAAkB,GAAG;AACvB,0BAAgB;AAAA,QAClB;AAAA,MACF;AAAA,MACA,eAAe;AACb,cAAM,IAAI,MAAM,qBAAqB;AAAA,MACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,iBAAiB;AACf,eAAO,KAAK;AAAA,MACd;AAAA,MACA,mBAAmB,QAAQ,SAAS;AAClC,cAAM,cAAc,QAAQ,MAAM,UAAU,yBAAyB;AACrE,YAAI,OAAO,gBAAgB,YAAY,CAAC,YAAY,WAAW,kBAAkB,GAAG;AAClF,iBAAO,QAAQ;AAAA,YACb,CAAC,MAAM,UAAU,mBAAmB,GAAG,MAAM,UAAU;AAAA,UACzD,GAAG;AAAA,YACD,WAAW;AAAA,UACb,CAAC;AACD,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MACA,iBAAiB,MAAM;AACrB,aAAK,MAAM,6BAA6B,OAAO,iBAAiB,KAAK,mBAAmB;AACxF,cAAM,UAAU,KAAK,SAAS,IAAI,IAAI;AACtC,YAAI,YAAY,QAAW;AACzB,eAAK,MAAM,sCAAsC,OAAO,iCAAiC;AACzF,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MACA,kBAAkB,KAAK,QAAQ,sBAAsB,MAAM;AACzD,cAAM,OAAO,IAAI,cAAc,sBAAsB,QAAQ,MAAM,KAAK,OAAO;AAC/E,YAAI,IAAI,SAAS,QAAW;AAC1B,cAAI,OAAO,YAAY,OAAO;AAAA,QAChC;AACA,YAAI,KAAK,iBAAiB;AACxB,eAAK,YAAY,cAAc;AAC/B,kCAAwB,QAAQ,wBAAwB,SAAS,SAAS,oBAAoB,cAAc,cAAc;AAAA,QAC5H;AACA,aAAK,UAAU,GAAG;AAAA,MACpB;AAAA,MACA,iBAAiB,QAAQ,SAAS;AAChC,cAAM,sBAAsB,KAAK,SAAS,IAAI,OAAO,OAAO;AAC5D,aAAK,YAAY,eAAe;AAChC,gCAAwB,QAAQ,wBAAwB,SAAS,SAAS,oBAAoB,cAAc,eAAe;AAC3H,YAAI,CAAC,KAAK,mBAAmB,QAAQ,OAAO,GAAG;AAC7C,eAAK,YAAY,cAAc;AAC/B,kCAAwB,QAAQ,wBAAwB,SAAS,SAAS,oBAAoB,cAAc,cAAc;AAC1H;AAAA,QACF;AACA,cAAM,OAAO,QAAQ,iBAAiB;AACtC,cAAM,UAAU,KAAK,iBAAiB,IAAI;AAC1C,YAAI,CAAC,SAAS;AACZ,eAAK,kBAAkB,+BAA+B,IAAI,GAAG,QAAQ,mBAAmB;AACxF;AAAA,QACF;AACA,cAAM,OAAO,IAAI,cAAc,sBAAsB,QAAQ,SAAS,KAAK,OAAO;AAClF,aAAK,KAAK,WAAW,UAAQ;AAC3B,cAAI,SAAS,YAAY,OAAO,IAAI;AAClC,iBAAK,YAAY,iBAAiB;AAAA,UACpC,OAAO;AACL,iBAAK,YAAY,cAAc;AAAA,UACjC;AAAA,QACF,CAAC;AACD,YAAI,qBAAqB;AACvB,eAAK,KAAK,aAAa,aAAW;AAChC,gBAAI,SAAS;AACX,kCAAoB,cAAc,iBAAiB;AAAA,YACrD,OAAO;AACL,kCAAoB,cAAc,cAAc;AAAA,YAClD;AAAA,UACF,CAAC;AACD,eAAK,GAAG,eAAe,MAAM;AAC3B,gCAAoB,gBAAgB;AACpC,gCAAoB,2BAA2B,oBAAI,KAAK;AAAA,UAC1D,CAAC;AACD,eAAK,GAAG,kBAAkB,MAAM;AAC9B,gCAAoB,oBAAoB;AACxC,gCAAoB,+BAA+B,oBAAI,KAAK;AAAA,UAC9D,CAAC;AAAA,QACH;AACA,YAAI,CAAC,KAAK,mBAAmB,MAAM,SAAS,OAAO,GAAG;AACpD,eAAK,YAAY,cAAc;AAC/B,kCAAwB,QAAQ,wBAAwB,SAAS,SAAS,oBAAoB,cAAc,cAAc;AAC1H,eAAK,UAAU;AAAA,YACb,MAAM,YAAY,OAAO;AAAA,YACzB,SAAS,yBAAyB,QAAQ,IAAI;AAAA,UAChD,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,eAAe,QAAQ,SAAS;AAC9B,YAAI,KAAK,mBAAmB,QAAQ,OAAO,MAAM,MAAM;AACrD;AAAA,QACF;AACA,cAAM,OAAO,QAAQ,iBAAiB;AACtC,cAAM,UAAU,KAAK,iBAAiB,IAAI;AAC1C,YAAI,CAAC,SAAS;AACZ,eAAK,kBAAkB,+BAA+B,IAAI,GAAG,QAAQ,IAAI;AACzE;AAAA,QACF;AACA,cAAM,OAAO,IAAI,cAAc,sBAAsB,QAAQ,SAAS,KAAK,OAAO;AAClF,YAAI,CAAC,KAAK,mBAAmB,MAAM,SAAS,OAAO,GAAG;AACpD,eAAK,UAAU;AAAA,YACb,MAAM,YAAY,OAAO;AAAA,YACzB,SAAS,yBAAyB,QAAQ,IAAI;AAAA,UAChD,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,mBAAmB,MAAM,SAAS,SAAS;AACzC,YAAI;AACJ,cAAM,WAAW,KAAK,gBAAgB,OAAO;AAC7C,cAAM,YAAY,KAAK,SAAS,IAAI,eAAe,EAAE,CAAC,OAAO,QAAQ,OAAO,SAAS,KAAK;AAC1F,iBAAS,OAAO,eAAe;AAC/B,cAAM;AAAA,UACJ;AAAA,QACF,IAAI;AACJ,YAAI,SAAS,SAAS;AACpB,sBAAY,MAAM,SAAS,UAAU,QAAQ;AAAA,QAC/C,WAAW,SAAS,gBAAgB;AAClC,gCAAsB,MAAM,SAAS,UAAU,QAAQ;AAAA,QACzD,WAAW,SAAS,gBAAgB;AAClC,gCAAsB,MAAM,SAAS,UAAU,QAAQ;AAAA,QACzD,WAAW,SAAS,QAAQ;AAC1B,8BAAoB,MAAM,SAAS,UAAU,QAAQ;AAAA,QACvD,OAAO;AACL,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT;AAAA,MACA,eAAe,aAAa;AAC1B,YAAI,gBAAgB,MAAM;AACxB;AAAA,QACF;AACA,cAAM,gBAAgB,YAAY,QAAQ;AAC1C,YAAI,sBAAsB;AAC1B,YAAI,eAAe;AACjB,cAAI,OAAO,kBAAkB,UAAU;AACrC,kCAAsB;AAAA,UACxB,OAAO;AACL,kCAAsB,cAAc,UAAU,MAAM,cAAc;AAAA,UACpE;AAAA,QACF;AACA,aAAK,sBAAsB;AAC3B,cAAM,UAAU,KAAK,kBAAkB,KAAK,mBAAmB,KAAK;AACpE,oBAAY,GAAG,UAAU,QAAQ,KAAK,IAAI,CAAC;AAC3C,oBAAY,GAAG,WAAW,aAAW;AACnC,cAAI,IAAI,IAAI,IAAI,IAAI;AACpB,cAAI,CAAC,KAAK,SAAS;AACjB,oBAAQ,QAAQ;AAChB;AAAA,UACF;AACA,gBAAM,eAAe,GAAG,WAAW,yBAAyB,KAAK,QAAQ,OAAO,mBAAmB,QAAQ,OAAO,SAAS,KAAK,WAAW,KAAK,6BAA6B,OAAO,GAAG,KAAK,eAAe;AAC3M,gBAAM,sBAAsB;AAAA,YAC1B,KAAK;AAAA,YACL,eAAe,IAAI,WAAW,oBAAoB;AAAA,YAClD,cAAc;AAAA,YACd,kBAAkB;AAAA,YAClB,0BAA0B;AAAA,YAC1B,8BAA8B;AAAA,UAChC;AACA,eAAK,SAAS,IAAI,SAAS,mBAAmB;AAC9C,gBAAM,gBAAgB,QAAQ,OAAO;AACrC,cAAI,KAAK,iBAAiB;AACxB,iBAAK,cAAc,SAAS,WAAW,sCAAsC,aAAa;AAC1F,iBAAK,uBAAuB,SAAS,WAAW;AAAA,UAClD;AACA,cAAI,qBAAqB;AACzB,cAAI,0BAA0B;AAC9B,cAAI,wBAAwB;AAC5B,cAAI,KAAK,uBAAuB,6BAA6B;AAE3D,kBAAM,kBAAkB,KAAK,qBAAqB;AAClD,kBAAM,SAAS,KAAK,OAAO,IAAI,kBAAkB,IAAI;AACrD,kCAAsB,MAAM,KAAK,WAAW,MAAM;AAChD,kBAAIG,KAAIC;AACR,sCAAwB;AACxB,kBAAI,KAAK,iBAAiB;AACxB,qBAAK,cAAc,SAAS,WAAW,mDAAmD,aAAa;AAAA,cACzG;AACA,kBAAI;AACF,wBAAQ,OAAO,MAAM,UAAU,kBAAkB,EAAE,KAAK,KAAK,OAAO,KAAK,SAAS,CAAC;AAAA,cACrF,SAAS,GAAG;AAEV,wBAAQ,QAAQ;AAChB;AAAA,cACF;AACA,sBAAQ,MAAM;AAGd,kBAAI,KAAK,4BAA4B,6BAA6B;AAChE,2CAA2BA,OAAMD,MAAK,WAAW,MAAM;AACrD,0BAAQ,QAAQ;AAAA,gBAClB,GAAG,KAAK,uBAAuB,GAAG,WAAW,QAAQC,QAAO,SAAS,SAASA,IAAG,KAAKD,GAAE;AAAA,cAC1F;AAAA,YACF,GAAG,KAAK,qBAAqB,MAAM,GAAG,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,UAC9F;AACA,gBAAM,sBAAsB,MAAM,KAAK,YAAY,MAAM;AACvD,gBAAIA,KAAIC;AACR,kBAAM,gBAAgBA,OAAMD,MAAK,WAAW,MAAM;AAChD,sCAAwB;AACxB,kBAAI,KAAK,iBAAiB;AACxB,qBAAK,cAAc,SAAS,WAAW,kDAAkD,aAAa;AAAA,cACxG;AACA,sBAAQ,MAAM;AAAA,YAChB,GAAG,KAAK,kBAAkB,GAAG,WAAW,QAAQC,QAAO,SAAS,SAASA,IAAG,KAAKD,GAAE;AACnF,gBAAI;AACF,sBAAQ,KAAK,CAAC,KAAK,UAAU,YAAY;AACvC,6BAAa,YAAY;AAAA,cAC3B,CAAC;AAAA,YACH,SAAS,GAAG;AAEV,sBAAQ,QAAQ;AAAA,YAClB;AAAA,UACF,GAAG,KAAK,eAAe,GAAG,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAChF,kBAAQ,GAAG,SAAS,MAAM;AACxB,gBAAI,KAAK,iBAAiB;AACxB,kBAAI,CAAC,uBAAuB;AAC1B,qBAAK,cAAc,SAAS,WAAW,kCAAkC,aAAa;AAAA,cACxF;AACA,mBAAK,uBAAuB,WAAW,WAAW;AAClD,eAAC,GAAG,WAAW,uBAAuB,WAAW;AAAA,YACnD;AACA,gBAAI,oBAAoB;AACtB,2BAAa,kBAAkB;AAAA,YACjC;AACA,gBAAI,yBAAyB;AAC3B,2BAAa,uBAAuB;AAAA,YACtC;AACA,gBAAI,oBAAoB;AACtB,2BAAa,kBAAkB;AAAA,YACjC;AACA,iBAAK,SAAS,OAAO,OAAO;AAAA,UAC9B,CAAC;AAAA,QACH,CAAC;AAAA,MACH;AAAA,IACF;AACA,IAAAJ,SAAQ,SAAS;AACjB,aAAe,YAAY,MAAM,SAAS,UAAU,UAAU;AAAA;AAC5D,YAAI;AACF,gBAAM,UAAU,MAAM,KAAK,oBAAoB,QAAQ;AACvD,cAAI,YAAY,UAAa,KAAK,WAAW;AAC3C;AAAA,UACF;AACA,gBAAM,UAAU,IAAI,cAAc,oBAAoB,MAAM,UAAU,OAAO;AAC7E,kBAAQ,KAAK,SAAS,CAAC,KAAK,OAAO,SAAS,UAAU;AACpD,iBAAK,iBAAiB,KAAK,OAAO,SAAS,KAAK;AAAA,UAClD,CAAC;AAAA,QACH,SAAS,KAAK;AACZ,eAAK,UAAU,GAAG;AAAA,QACpB;AAAA,MACF;AAAA;AACA,aAAS,sBAAsB,MAAM,SAAS,UAAU,UAAU;AAChE,YAAM,SAAS,IAAI,cAAc,yBAAyB,MAAM,UAAU,QAAQ,aAAa,QAAQ;AACvG,eAAS,QAAQ,KAAK,OAAO,SAAS,OAAO;AAC3C,eAAO,QAAQ;AACf,aAAK,iBAAiB,KAAK,OAAO,SAAS,KAAK;AAAA,MAClD;AACA,UAAI,KAAK,WAAW;AAClB;AAAA,MACF;AACA,aAAO,GAAG,SAAS,OAAO;AAC1B,cAAQ,KAAK,QAAQ,OAAO;AAAA,IAC9B;AACA,aAAe,sBAAsB,MAAM,SAAS,UAAU,UAAU;AAAA;AACtE,YAAI;AACF,gBAAM,UAAU,MAAM,KAAK,oBAAoB,QAAQ;AACvD,cAAI,YAAY,UAAa,KAAK,WAAW;AAC3C;AAAA,UACF;AACA,gBAAM,SAAS,IAAI,cAAc,yBAAyB,MAAM,UAAU,QAAQ,WAAW,OAAO;AACpG,kBAAQ,KAAK,MAAM;AAAA,QACrB,SAAS,KAAK;AACZ,eAAK,UAAU,GAAG;AAAA,QACpB;AAAA,MACF;AAAA;AACA,aAAS,oBAAoB,MAAM,SAAS,UAAU,UAAU;AAC9D,YAAM,SAAS,IAAI,cAAc,uBAAuB,MAAM,UAAU,QAAQ,WAAW,QAAQ,aAAa,QAAQ;AACxH,UAAI,KAAK,WAAW;AAClB;AAAA,MACF;AACA,cAAQ,KAAK,MAAM;AAAA,IACrB;AAAA;AAAA;;;ACv1BA;AAAA,2DAAAM,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,gBAAgB;AAIxB,QAAM,gBAAN,MAAoB;AAAA,MAClB,cAAc;AACZ,aAAK,OAAO;AACZ,aAAK,UAAU;AACf,aAAK,WAAW;AAAA,MAClB;AAAA;AAAA;AAAA;AAAA,MAIA,SAAS,MAAM;AACb,aAAK,OAAO;AACZ,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA,MAIA,YAAY,SAAS;AACnB,aAAK,UAAU;AACf,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA,MAIA,aAAa,UAAU;AACrB,aAAK,WAAW;AAChB,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA,MAIA,QAAQ;AACN,cAAM,SAAS,CAAC;AAChB,YAAI,KAAK,SAAS,MAAM;AACtB,iBAAO,OAAO,KAAK;AAAA,QACrB;AACA,YAAI,KAAK,YAAY,MAAM;AACzB,iBAAO,UAAU,KAAK;AAAA,QACxB;AACA,YAAI,KAAK,aAAa,MAAM;AAC1B,iBAAO,WAAW,KAAK;AAAA,QACzB;AACA,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAA,SAAQ,gBAAgB;AAAA;AAAA;;;ACrExB;AAAA,qDAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,aAAaA,SAAQ,eAAeA,SAAQ,eAAe;AACnE,aAAS,aAAa,QAAQ;AAC5B,aAAO;AAAA,QACL,SAAS,SAAS,MAAO;AAAA,QACzB,OAAO,SAAS,MAAO,MAAU;AAAA,MACnC;AAAA,IACF;AACA,IAAAA,SAAQ,eAAe;AACvB,aAAS,aAAa,UAAU;AAC9B,aAAO,SAAS,UAAU,MAAO,SAAS,QAAQ,MAAU;AAAA,IAC9D;AACA,IAAAA,SAAQ,eAAe;AACvB,aAAS,WAAW,OAAO;AACzB,aAAO,OAAO,MAAM,YAAY,YAAY,OAAO,MAAM,UAAU;AAAA,IACrE;AACA,IAAAA,SAAQ,aAAa;AAAA;AAAA;;;ACpCrB;AAAA,4EAAAC,UAAA;AAAA;AAkBA,QAAI;AACJ,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,QAAQA,SAAQ,+BAA+BA,SAAQ,sCAAsC;AACrG,QAAM,uBAAuB;AAC7B,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,iBAAiB;AACvB,QAAM,kBAAkB;AACxB,QAAM,gCAAgC;AACtC,QAAM,WAAW;AACjB,QAAM,uBAAuB;AAC7B,QAAM,yBAAyB;AAC/B,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,aAAS,MAAM,MAAM;AACnB,cAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,IAAI;AAAA,IACjE;AACA,QAAM,YAAY;AAClB,QAAM,8BAA8B,KAAK,QAAQ,IAAI,gDAAgD,QAAQ,OAAO,SAAS,KAAK,YAAY;AAC9I,QAAM,mCAAmC;AAAA,MACvC,cAAc;AAAA,MACd,wBAAwB;AAAA,MACxB,eAAe;AAAA,MACf,gBAAgB;AAAA,IAClB;AACA,QAAM,yCAAyC;AAAA,MAC7C,WAAW;AAAA,MACX,wBAAwB;AAAA,MACxB,eAAe;AAAA,MACf,gBAAgB;AAAA,IAClB;AACA,aAAS,kBAAkB,KAAK,WAAW,cAAc,YAAY;AACnE,UAAI,aAAa,OAAO,OAAO,IAAI,SAAS,MAAM,cAAc;AAC9D,cAAM,gBAAgB,aAAa,GAAG,UAAU,IAAI,SAAS,KAAK;AAClE,cAAM,IAAI,MAAM,4BAA4B,aAAa,0BAA0B,YAAY,SAAS,OAAO,IAAI,SAAS,CAAC,EAAE;AAAA,MACjI;AAAA,IACF;AACA,aAAS,yBAAyB,KAAK,WAAW,YAAY;AAC5D,YAAM,gBAAgB,aAAa,GAAG,UAAU,IAAI,SAAS,KAAK;AAClE,UAAI,aAAa,KAAK;AACpB,YAAI,EAAE,GAAG,WAAW,YAAY,IAAI,SAAS,CAAC,GAAG;AAC/C,gBAAM,IAAI,MAAM,4BAA4B,aAAa,wCAAwC,OAAO,IAAI,SAAS,CAAC,EAAE;AAAA,QAC1H;AACA,YAAI,EAAE,IAAI,SAAS,EAAE,WAAW,KAAK,IAAI,SAAS,EAAE,WAAW,YAAgB,IAAI,SAAS,EAAE,SAAS,KAAK,IAAI,SAAS,EAAE,SAAS,YAAY;AAC9I,gBAAM,IAAI,MAAM,4BAA4B,aAAa,8DAA8D;AAAA,QACzH;AAAA,MACF;AAAA,IACF;AACA,aAAS,mBAAmB,KAAK,WAAW,YAAY;AACtD,YAAM,gBAAgB,aAAa,GAAG,UAAU,IAAI,SAAS,KAAK;AAClE,wBAAkB,KAAK,WAAW,UAAU,UAAU;AACtD,UAAI,aAAa,OAAO,EAAE,IAAI,SAAS,KAAK,KAAK,IAAI,SAAS,KAAK,MAAM;AACvE,cAAM,IAAI,MAAM,4BAA4B,aAAa,yDAAyD;AAAA,MACpH;AAAA,IACF;AACA,QAAM,sCAAN,MAAM,qCAAoC;AAAA,MACxC,YAAY,YAAY,oBAAoB,mBAAmB,oBAAoB,qBAAqB,2BAA2B,aAAa;AAC9I,aAAK,cAAc;AACnB,YAAI,YAAY,SAAS,KAAK,YAAY,CAAC,EAAE,oBAAoB,MAAM,cAAc;AACnF,gBAAM,IAAI,MAAM,mEAAmE;AAAA,QACrF;AACA,aAAK,aAAa,eAAe,QAAQ,eAAe,SAAS,aAAa;AAC9E,aAAK,qBAAqB,uBAAuB,QAAQ,uBAAuB,SAAS,qBAAqB;AAC9G,aAAK,oBAAoB,sBAAsB,QAAQ,sBAAsB,SAAS,oBAAoB;AAC1G,aAAK,qBAAqB,uBAAuB,QAAQ,uBAAuB,SAAS,qBAAqB;AAC9G,aAAK,sBAAsB,sBAAsB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,gCAAgC,GAAG,mBAAmB,IAAI;AAC3I,aAAK,4BAA4B,4BAA4B,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,sCAAsC,GAAG,yBAAyB,IAAI;AAAA,MACrK;AAAA,MACA,sBAAsB;AACpB,eAAO;AAAA,MACT;AAAA,MACA,eAAe;AACb,eAAO;AAAA,UACL,WAAW,GAAG,WAAW,cAAc,KAAK,UAAU;AAAA,UACtD,qBAAqB,GAAG,WAAW,cAAc,KAAK,kBAAkB;AAAA,UACxE,oBAAoB,GAAG,WAAW,cAAc,KAAK,iBAAiB;AAAA,UACtE,sBAAsB,KAAK;AAAA,UAC3B,uBAAuB,KAAK;AAAA,UAC5B,6BAA6B,KAAK;AAAA,UAClC,cAAc,KAAK,YAAY,IAAI,YAAU,OAAO,aAAa,CAAC;AAAA,QACpE;AAAA,MACF;AAAA,MACA,gBAAgB;AACd,eAAO,KAAK;AAAA,MACd;AAAA,MACA,wBAAwB;AACtB,eAAO,KAAK;AAAA,MACd;AAAA,MACA,uBAAuB;AACrB,eAAO,KAAK;AAAA,MACd;AAAA,MACA,wBAAwB;AACtB,eAAO,KAAK;AAAA,MACd;AAAA,MACA,+BAA+B;AAC7B,eAAO,KAAK;AAAA,MACd;AAAA,MACA,qCAAqC;AACnC,eAAO,KAAK;AAAA,MACd;AAAA,MACA,iBAAiB;AACf,eAAO,KAAK;AAAA,MACd;AAAA,MACA,oBAAoB,aAAa;AAC/B,eAAO,IAAI,qCAAoC,KAAK,YAAY,KAAK,oBAAoB,KAAK,mBAAmB,KAAK,oBAAoB,KAAK,qBAAqB,KAAK,2BAA2B,WAAW;AAAA,MACjN;AAAA,MACA,OAAO,eAAe,KAAK;AACzB,YAAIC;AACJ,iCAAyB,KAAK,UAAU;AACxC,iCAAyB,KAAK,oBAAoB;AAClD,iCAAyB,KAAK,mBAAmB;AACjD,2BAAmB,KAAK,sBAAsB;AAC9C,YAAI,2BAA2B,KAAK;AAClC,cAAI,OAAO,IAAI,0BAA0B,UAAU;AACjD,kBAAM,IAAI,MAAM,kEAAkE;AAAA,UACpF;AACA,4BAAkB,IAAI,uBAAuB,gBAAgB,UAAU,uBAAuB;AAC9F,6BAAmB,IAAI,uBAAuB,0BAA0B,uBAAuB;AAC/F,4BAAkB,IAAI,uBAAuB,iBAAiB,UAAU,uBAAuB;AAC/F,4BAAkB,IAAI,uBAAuB,kBAAkB,UAAU,uBAAuB;AAAA,QAClG;AACA,YAAI,iCAAiC,KAAK;AACxC,cAAI,OAAO,IAAI,gCAAgC,UAAU;AACvD,kBAAM,IAAI,MAAM,wEAAwE;AAAA,UAC1F;AACA,6BAAmB,IAAI,6BAA6B,aAAa,6BAA6B;AAC9F,6BAAmB,IAAI,6BAA6B,0BAA0B,6BAA6B;AAC3G,4BAAkB,IAAI,6BAA6B,iBAAiB,UAAU,6BAA6B;AAC3G,4BAAkB,IAAI,6BAA6B,kBAAkB,UAAU,6BAA6B;AAAA,QAC9G;AACA,eAAO,IAAI,qCAAoC,IAAI,YAAY,GAAG,WAAW,cAAc,IAAI,QAAQ,IAAI,MAAM,IAAI,sBAAsB,GAAG,WAAW,cAAc,IAAI,kBAAkB,IAAI,MAAM,IAAI,qBAAqB,GAAG,WAAW,cAAc,IAAI,iBAAiB,IAAI,OAAOA,MAAK,IAAI,0BAA0B,QAAQA,QAAO,SAASA,MAAK,MAAM,IAAI,uBAAuB,IAAI,6BAA6B,IAAI,aAAa,IAAI,gBAAgB,2BAA2B,CAAC;AAAA,MACje;AAAA,IACF;AACA,IAAAD,SAAQ,sCAAsC;AAC9C,QAAM,oCAAN,cAAgD,uBAAuB,sBAAsB;AAAA,MAC3F,YAAY,iBAAiB,UAAU;AACrC,cAAM,eAAe;AACrB,aAAK,WAAW;AAChB,aAAK,iBAAiB,CAAC;AACvB,aAAK,UAAU;AACf,aAAK,WAAW;AAChB,aAAK,uBAAuB,gBAAgB,qBAAqB;AACjE,wBAAgB,6BAA6B,CAAC,YAAY,eAAe,UAAU,kBAAkB;AACnG,eAAK,uBAAuB;AAC5B,cAAI,CAAC,KAAK,SAAS;AACjB,uBAAW,YAAY,KAAK,gBAAgB;AAC1C,uBAAS,MAAM,eAAe,UAAU,aAAa;AAAA,YACvD;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,uBAAuB;AACrB,YAAI,KAAK,SAAS;AAChB,iBAAO,qBAAqB,kBAAkB;AAAA,QAChD,OAAO;AACL,iBAAO,KAAK;AAAA,QACd;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,6BAA6B,UAAU;AACrC,aAAK,eAAe,KAAK,QAAQ;AAAA,MACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,gCAAgC,UAAU;AACxC,cAAM,gBAAgB,KAAK,eAAe,QAAQ,QAAQ;AAC1D,YAAI,gBAAgB,IAAI;AACtB,eAAK,eAAe,OAAO,eAAe,CAAC;AAAA,QAC7C;AAAA,MACF;AAAA,MACA,MAAM;AACJ,aAAK,MAAM,IAAI;AACf,aAAK,YAAY;AAAA,MACnB;AAAA,MACA,QAAQ;AACN,aAAK,MAAM,MAAM;AACjB,aAAK,YAAY;AACjB,YAAI,KAAK,YAAY,GAAG;AACtB,cAAI,KAAK,UAAU;AACjB,kBAAM,QAAQ,KAAK,SAAS,mBAAmB,QAAQ,IAAI;AAC3D,gBAAI,SAAS,GAAG;AACd,mBAAK,SAAS,mBAAmB,OAAO,OAAO,CAAC;AAAA,YAClD;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,QAAQ;AACN,aAAK,UAAU;AACf,mBAAW,YAAY,KAAK,gBAAgB;AAC1C,mBAAS,MAAM,KAAK,sBAAsB,qBAAqB,kBAAkB,mBAAmB,EAAE;AAAA,QACxG;AAAA,MACF;AAAA,MACA,UAAU;AACR,aAAK,UAAU;AACf,mBAAW,YAAY,KAAK,gBAAgB;AAC1C,mBAAS,MAAM,qBAAqB,kBAAkB,mBAAmB,KAAK,sBAAsB,EAAE;AAAA,QACxG;AAAA,MACF;AAAA,MACA,cAAc;AACZ,eAAO,KAAK;AAAA,MACd;AAAA,MACA,uBAAuB;AACrB,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AACA,aAAS,oBAAoB;AAC3B,aAAO;AAAA,QACL,SAAS;AAAA,QACT,SAAS;AAAA,MACX;AAAA,IACF;AACA,QAAM,cAAN,MAAkB;AAAA,MAChB,cAAc;AACZ,aAAK,eAAe,kBAAkB;AACtC,aAAK,iBAAiB,kBAAkB;AAAA,MAC1C;AAAA,MACA,aAAa;AACX,aAAK,aAAa,WAAW;AAAA,MAC/B;AAAA,MACA,aAAa;AACX,aAAK,aAAa,WAAW;AAAA,MAC/B;AAAA,MACA,gBAAgB;AACd,aAAK,iBAAiB,KAAK;AAC3B,aAAK,eAAe,kBAAkB;AAAA,MACxC;AAAA,MACA,mBAAmB;AACjB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,MACA,kBAAkB;AAChB,eAAO,KAAK,eAAe;AAAA,MAC7B;AAAA,IACF;AACA,QAAM,yBAAN,MAA6B;AAAA,MAC3B,YAAY,eAAe,YAAY;AACrC,aAAK,gBAAgB;AACrB,aAAK,aAAa;AAAA,MACpB;AAAA,MACA,KAAK,UAAU;AACb,cAAM,cAAc,KAAK,cAAc,KAAK,QAAQ;AACpD,YAAI,YAAY,mBAAmB,SAAS,eAAe,UAAU;AACnE,gBAAM,oBAAoB,YAAY;AACtC,gBAAM,WAAW,kBAAkB,YAAY;AAC/C,cAAI,UAAU;AACZ,gBAAI,cAAc,YAAY;AAC9B,gBAAI,KAAK,YAAY;AACnB,4BAAc,gBAAc;AAC1B,oBAAIC;AACJ,oBAAI,eAAe,YAAY,OAAO,IAAI;AACxC,2BAAS,QAAQ,WAAW;AAAA,gBAC9B,OAAO;AACL,2BAAS,QAAQ,WAAW;AAAA,gBAC9B;AACA,iBAACA,MAAK,YAAY,iBAAiB,QAAQA,QAAO,SAAS,SAASA,IAAG,KAAK,aAAa,UAAU;AAAA,cACrG;AAAA,YACF;AACA,mBAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,WAAW,GAAG;AAAA,cACnD,YAAY,kBAAkB,qBAAqB;AAAA,cACnD;AAAA,YACF,CAAC;AAAA,UACH,OAAO;AACL,mBAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,WAAW,GAAG;AAAA,cACnD,YAAY,kBAAkB,qBAAqB;AAAA,YACrD,CAAC;AAAA,UACH;AAAA,QACF,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF;AACA,QAAM,+BAAN,MAAmC;AAAA,MACjC,YAAY,sBAAsB;AAChC,aAAK,aAAa,oBAAI,IAAI;AAC1B,aAAK,eAAe;AACpB,aAAK,iBAAiB;AACtB,aAAK,gBAAgB,IAAI,8BAA8B,0BAA0B,GAAG,eAAe,iCAAiC,sBAAsB;AAAA,UACxJ,kBAAkB,CAAC,mBAAmB,mBAAmB;AACvD,kBAAM,qBAAqB,qBAAqB,iBAAiB,mBAAmB,cAAc;AAClG,kBAAM,WAAW,KAAK,WAAW,KAAK,GAAG,qBAAqB,2BAA2B,iBAAiB,CAAC;AAC3G,kBAAM,oBAAoB,IAAI,kCAAkC,oBAAoB,QAAQ;AAC5F,iBAAK,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,8BAA8B,MAAM;AAEpG,gCAAkB,MAAM;AAAA,YAC1B;AACA,yBAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,mBAAmB,KAAK,iBAAiB;AACtG,mBAAO;AAAA,UACT;AAAA,UACA,aAAa,CAAC,mBAAmB,WAAW;AAC1C,gBAAI,sBAAsB,qBAAqB,kBAAkB,OAAO;AACtE,mCAAqB,YAAY,mBAAmB,IAAI,uBAAuB,QAAQ,KAAK,kBAAkB,CAAC,CAAC;AAAA,YAClH,OAAO;AACL,mCAAqB,YAAY,mBAAmB,MAAM;AAAA,YAC5D;AAAA,UACF;AAAA,QACF,CAAC,CAAC;AACF,aAAK,gBAAgB,YAAY,MAAM;AAAA,QAAC,GAAG,CAAC;AAC5C,sBAAc,KAAK,aAAa;AAAA,MAClC;AAAA,MACA,oBAAoB;AAClB,eAAO,KAAK,iBAAiB,SAAS,KAAK,aAAa,6BAA6B,MAAM,QAAQ,KAAK,aAAa,mCAAmC,MAAM;AAAA,MAChK;AAAA,MACA,4BAA4B;AAC1B,YAAI,gBAAgB;AACpB,mBAAW,YAAY,KAAK,WAAW,OAAO,GAAG;AAC/C,cAAI,SAAS,6BAA6B,MAAM;AAC9C,6BAAiB;AAAA,UACnB;AAAA,QACF;AACA,eAAO,gBAAgB,MAAM,KAAK,WAAW;AAAA,MAC/C;AAAA,MACA,oBAAoB,mBAAmB;AACrC,YAAI,CAAC,KAAK,cAAc;AACtB;AAAA,QACF;AACA,cAAM,oBAAoB,KAAK,aAAa,6BAA6B;AACzE,YAAI,CAAC,mBAAmB;AACtB;AAAA,QACF;AACA,cAAM,4BAA4B;AAElC,cAAM,sBAAsB,kBAAkB;AAC9C,YAAI,2BAA2B;AAC/B,cAAM,eAAe,CAAC;AACtB,mBAAW,CAAC,SAAS,QAAQ,KAAK,KAAK,YAAY;AACjD,gBAAM,YAAY,SAAS,QAAQ,iBAAiB;AACpD,gBAAM,WAAW,SAAS,QAAQ,gBAAgB;AAClD,gBAAM,eAAe,UAAU,iBAAiB,YAAY,eAAe,WAAW,0BAA0B,mBAAmB;AACnI,cAAI,YAAY,YAAY,qBAAqB;AAC/C,wCAA4B;AAC5B,yBAAa,KAAK,aAAa,YAAY,SAAS;AAAA,UACtD;AAAA,QACF;AACA,cAAM,WAAW,2BAA2B,sDAAsD,KAAK,0BAA0B,IAAI,oBAAoB,eAAe,GAAG;AAC3K,YAAI,2BAA2B,kBAAkB,eAAe;AAC9D;AAAA,QACF;AAEA,cAAM,kBAAkB,aAAa,OAAO,CAAC,GAAG,MAAM,IAAI,CAAC,IAAI,aAAa;AAC5E,YAAI,0BAA0B;AAC9B,mBAAW,QAAQ,cAAc;AAC/B,gBAAM,YAAY,OAAO;AACzB,qCAA2B,YAAY;AAAA,QACzC;AACA,cAAM,sBAAsB,0BAA0B,aAAa;AACnE,cAAM,mBAAmB,KAAK,KAAK,mBAAmB;AACtD,cAAM,oBAAoB,kBAAkB,oBAAoB,kBAAkB,eAAe;AACjG,cAAM,WAAW,mBAAmB,wBAAwB,iBAAiB;AAE7E,mBAAW,CAAC,SAAS,QAAQ,KAAK,KAAK,WAAW,QAAQ,GAAG;AAE3D,cAAI,KAAK,0BAA0B,KAAK,KAAK,aAAa,sBAAsB,GAAG;AACjF;AAAA,UACF;AAEA,gBAAM,YAAY,SAAS,QAAQ,iBAAiB;AACpD,gBAAM,WAAW,SAAS,QAAQ,gBAAgB;AAClD,cAAI,YAAY,WAAW,qBAAqB;AAC9C;AAAA,UACF;AAEA,gBAAM,cAAc,aAAa,YAAY;AAC7C,gBAAM,wBAAwB,UAAU,kBAAkB,WAAW;AACrE,cAAI,cAAc,mBAAmB;AACnC,kBAAM,eAAe,KAAK,OAAO,IAAI;AACrC,kBAAM,eAAe,UAAU,mBAAmB,eAAe,6BAA6B,kBAAkB,sBAAsB;AACtI,gBAAI,eAAe,kBAAkB,wBAAwB;AAC3D,oBAAM,wBAAwB,OAAO;AACrC,mBAAK,MAAM,UAAU,iBAAiB;AAAA,YACxC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,0BAA0B,mBAAmB;AAC3C,YAAI,CAAC,KAAK,cAAc;AACtB;AAAA,QACF;AACA,cAAM,0BAA0B,KAAK,aAAa,mCAAmC;AACrF,YAAI,CAAC,yBAAyB;AAC5B;AAAA,QACF;AACA,cAAM,iDAAiD,wBAAwB,YAAY,+BAA+B,wBAAwB,cAAc;AAEhK,YAAI,4BAA4B;AAChC,mBAAW,YAAY,KAAK,WAAW,OAAO,GAAG;AAC/C,gBAAM,YAAY,SAAS,QAAQ,iBAAiB;AACpD,gBAAM,WAAW,SAAS,QAAQ,gBAAgB;AAClD,cAAI,YAAY,YAAY,wBAAwB,gBAAgB;AAClE,yCAA6B;AAAA,UAC/B;AAAA,QACF;AACA,YAAI,4BAA4B,wBAAwB,eAAe;AACrE;AAAA,QACF;AAEA,mBAAW,CAAC,SAAS,QAAQ,KAAK,KAAK,WAAW,QAAQ,GAAG;AAE3D,cAAI,KAAK,0BAA0B,KAAK,KAAK,aAAa,sBAAsB,GAAG;AACjF;AAAA,UACF;AAEA,gBAAM,YAAY,SAAS,QAAQ,iBAAiB;AACpD,gBAAM,WAAW,SAAS,QAAQ,gBAAgB;AAClD,gBAAM,yBAAyB,YAAY,eAAe,QAAQ;AAClE,cAAI,YAAY,WAAW,wBAAwB,gBAAgB;AACjE;AAAA,UACF;AAEA,gBAAM,oBAAoB,WAAW,OAAO,WAAW;AACvD,cAAI,oBAAoB,wBAAwB,WAAW;AACzD,kBAAM,eAAe,KAAK,OAAO,IAAI;AACrC,kBAAM,eAAe,UAAU,mBAAmB,eAAe,6BAA6B,wBAAwB,sBAAsB;AAC5I,gBAAI,eAAe,wBAAwB,wBAAwB;AACjE,oBAAM,wBAAwB,OAAO;AACrC,mBAAK,MAAM,UAAU,iBAAiB;AAAA,YACxC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,MAAM,UAAU,mBAAmB;AACjC,iBAAS,2BAA2B,oBAAI,KAAK;AAC7C,iBAAS,0BAA0B;AACnC,mBAAW,qBAAqB,SAAS,oBAAoB;AAC3D,4BAAkB,MAAM;AAAA,QAC1B;AAAA,MACF;AAAA,MACA,QAAQ,UAAU;AAChB,iBAAS,2BAA2B;AACpC,mBAAW,qBAAqB,SAAS,oBAAoB;AAC3D,4BAAkB,QAAQ;AAAA,QAC5B;AAAA,MACF;AAAA,MACA,mBAAmB;AACjB,mBAAW,YAAY,KAAK,WAAW,OAAO,GAAG;AAC/C,mBAAS,QAAQ,cAAc;AAAA,QACjC;AAAA,MACF;AAAA,MACA,WAAW,SAAS;AAClB,YAAIA,KAAI;AACR,aAAK,gBAAgB,WAAW,MAAM,KAAK,UAAU,GAAG,OAAO;AAC/D,SAAC,MAAMA,MAAK,KAAK,eAAe,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAKA,GAAE;AAAA,MACxF;AAAA,MACA,YAAY;AACV,cAAM,oBAAoB,oBAAI,KAAK;AACnC,cAAM,wBAAwB;AAC9B,aAAK,iBAAiB;AACtB,YAAI,CAAC,KAAK,cAAc;AACtB;AAAA,QACF;AACA,aAAK,iBAAiB;AACtB,aAAK,WAAW,KAAK,aAAa,cAAc,CAAC;AACjD,aAAK,oBAAoB,iBAAiB;AAC1C,aAAK,0BAA0B,iBAAiB;AAChD,mBAAW,CAAC,SAAS,QAAQ,KAAK,KAAK,WAAW,QAAQ,GAAG;AAC3D,cAAI,SAAS,6BAA6B,MAAM;AAC9C,gBAAI,SAAS,yBAAyB,GAAG;AACvC,uBAAS,0BAA0B;AAAA,YACrC;AAAA,UACF,OAAO;AACL,kBAAM,qBAAqB,KAAK,aAAa,sBAAsB;AACnE,kBAAM,oBAAoB,KAAK,aAAa,qBAAqB;AACjE,kBAAM,aAAa,IAAI,KAAK,SAAS,yBAAyB,QAAQ,CAAC;AACvE,uBAAW,gBAAgB,WAAW,gBAAgB,IAAI,KAAK,IAAI,qBAAqB,SAAS,wBAAwB,KAAK,IAAI,oBAAoB,iBAAiB,CAAC,CAAC;AACzK,gBAAI,aAAa,oBAAI,KAAK,GAAG;AAC3B,oBAAM,gBAAgB,OAAO;AAC7B,mBAAK,QAAQ,QAAQ;AAAA,YACvB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,kBAAkB,aAAa,UAAU,YAAY;AACnD,YAAI,EAAE,oBAAoB,sCAAsC;AAC9D;AAAA,QACF;AACA,cAAM,sBAAsB,oBAAI,IAAI;AACpC,mBAAW,WAAW,aAAa;AACjC,8BAAoB,KAAK,GAAG,qBAAqB,2BAA2B,OAAO,CAAC;AAAA,QACtF;AACA,mBAAW,WAAW,qBAAqB;AACzC,cAAI,CAAC,KAAK,WAAW,IAAI,OAAO,GAAG;AACjC,kBAAM,0BAA0B,OAAO;AACvC,iBAAK,WAAW,IAAI,SAAS;AAAA,cAC3B,SAAS,IAAI,YAAY;AAAA,cACzB,0BAA0B;AAAA,cAC1B,wBAAwB;AAAA,cACxB,oBAAoB,CAAC;AAAA,YACvB,CAAC;AAAA,UACH;AAAA,QACF;AACA,mBAAW,OAAO,KAAK,WAAW,KAAK,GAAG;AACxC,cAAI,CAAC,oBAAoB,IAAI,GAAG,GAAG;AACjC,kBAAM,4BAA4B,GAAG;AACrC,iBAAK,WAAW,OAAO,GAAG;AAAA,UAC5B;AAAA,QACF;AACA,cAAM,eAAe,GAAG,gBAAgB,sBAAsB,SAAS,eAAe,GAAG,IAAI;AAC7F,aAAK,cAAc,kBAAkB,aAAa,aAAa,UAAU;AACzE,YAAI,SAAS,6BAA6B,KAAK,SAAS,mCAAmC,GAAG;AAC5F,cAAI,KAAK,gBAAgB;AACvB,kBAAM,yCAAyC;AAC/C,yBAAa,KAAK,aAAa;AAC/B,kBAAM,iBAAiB,SAAS,cAAc,MAAK,oBAAI,KAAK,GAAE,QAAQ,IAAI,KAAK,eAAe,QAAQ;AACtG,iBAAK,WAAW,cAAc;AAAA,UAChC,OAAO;AACL,kBAAM,oBAAoB;AAC1B,iBAAK,iBAAiB,oBAAI,KAAK;AAC/B,iBAAK,WAAW,SAAS,cAAc,CAAC;AACxC,iBAAK,iBAAiB;AAAA,UACxB;AAAA,QACF,OAAO;AACL,gBAAM,sCAAsC;AAC5C,eAAK,iBAAiB;AACtB,uBAAa,KAAK,aAAa;AAC/B,qBAAW,YAAY,KAAK,WAAW,OAAO,GAAG;AAC/C,iBAAK,QAAQ,QAAQ;AACrB,qBAAS,yBAAyB;AAAA,UACpC;AAAA,QACF;AACA,aAAK,eAAe;AAAA,MACtB;AAAA,MACA,WAAW;AACT,aAAK,cAAc,SAAS;AAAA,MAC9B;AAAA,MACA,eAAe;AACb,aAAK,cAAc,aAAa;AAAA,MAClC;AAAA,MACA,UAAU;AACR,qBAAa,KAAK,aAAa;AAC/B,aAAK,cAAc,QAAQ;AAAA,MAC7B;AAAA,MACA,cAAc;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAD,SAAQ,+BAA+B;AACvC,aAAS,QAAQ;AACf,UAAI,2BAA2B;AAC7B,SAAC,GAAG,eAAe,0BAA0B,WAAW,8BAA8B,mCAAmC;AAAA,MAC3H;AAAA,IACF;AACA,IAAAA,SAAQ,QAAQ;AAAA;AAAA;;;ACtjBhB;AAAA,yDAAAE,UAAA;AAAA;AAEA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,sCAAsCA,SAAQ,wBAAwBA,SAAQ,uBAAuBA,SAAQ,qBAAqBA,SAAQ,aAAaA,SAAQ,iBAAiBA,SAAQ,cAAcA,SAAQ,oBAAoBA,SAAQ,2BAA2BA,SAAQ,4BAA4BA,SAAQ,8BAA8BA,SAAQ,uBAAuBA,SAAQ,2BAA2BA,SAAQ,kCAAkCA,SAAQ,iBAAiBA,SAAQ,eAAeA,SAAQ,cAAcA,SAAQ,iBAAiBA,SAAQ,mBAAmBA,SAAQ,MAAMA,SAAQ,QAAQ;AAC3lB,QAAI,YAAY;AAChB,WAAO,eAAeA,UAAS,SAAS;AAAA,MACtC,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,UAAU;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,OAAO;AAAA,MACpC,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,UAAU;AAAA,MACnB;AAAA,IACF,CAAC;AACD,QAAI,aAAa;AACjB,WAAO,eAAeA,UAAS,oBAAoB;AAAA,MACjD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,WAAW;AAAA,MACpB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,kBAAkB;AAAA,MAC/C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,WAAW;AAAA,MACpB;AAAA,IACF,CAAC;AACD,QAAI,eAAe;AACnB,WAAO,eAAeA,UAAS,eAAe;AAAA,MAC5C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,aAAa;AAAA,MACtB;AAAA,IACF,CAAC;AACD,QAAI,aAAa;AACjB,WAAO,eAAeA,UAAS,gBAAgB;AAAA,MAC7C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,WAAW;AAAA,MACpB;AAAA,IACF,CAAC;AACD,QAAI,oBAAoB;AACxB,WAAO,eAAeA,UAAS,kBAAkB;AAAA,MAC/C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,kBAAkB;AAAA,MAC3B;AAAA,IACF,CAAC;AACD,QAAI,kBAAkB;AACtB,WAAO,eAAeA,UAAS,mCAAmC;AAAA,MAChE,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,gBAAgB;AAAA,MACzB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,4BAA4B;AAAA,MACzD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,gBAAgB;AAAA,MACzB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,wBAAwB;AAAA,MACrD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,gBAAgB;AAAA,MACzB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,+BAA+B;AAAA,MAC5D,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,gBAAgB;AAAA,MACzB;AAAA,IACF,CAAC;AACD,QAAI,uBAAuB;AAC3B,WAAO,eAAeA,UAAS,6BAA6B;AAAA,MAC1D,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,qBAAqB;AAAA,MAC9B;AAAA,IACF,CAAC;AACD,QAAI,gCAAgC;AACpC,WAAO,eAAeA,UAAS,4BAA4B;AAAA,MACzD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,8BAA8B;AAAA,MACvC;AAAA,IACF,CAAC;AACD,QAAI,WAAW;AACf,WAAO,eAAeA,UAAS,qBAAqB;AAAA,MAClD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,eAAe;AAAA,MAC5C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,kBAAkB;AAAA,MAC/C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AACD,QAAI,WAAW;AACf,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AACD,QAAI,iBAAiB;AACrB,WAAO,eAAeA,UAAS,sBAAsB;AAAA,MACnD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,eAAe;AAAA,MACxB;AAAA,IACF,CAAC;AACD,QAAI,UAAU;AACd,WAAO,eAAeA,UAAS,wBAAwB;AAAA,MACrD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,QAAQ;AAAA,MACjB;AAAA,IACF,CAAC;AACD,QAAI,yBAAyB;AAC7B,WAAO,eAAeA,UAAS,yBAAyB;AAAA,MACtD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,uBAAuB;AAAA,MAChC;AAAA,IACF,CAAC;AACD,QAAI,oCAAoC;AACxC,WAAO,eAAeA,UAAS,uCAAuC;AAAA,MACpE,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,kCAAkC;AAAA,MAC3C;AAAA,IACF,CAAC;AAAA;AAAA;;;ACjJD;AAAA,yDAAAC,UAAA;AAAA;AAiBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,QAAQ;AAChB,QAAM,aAAa;AACnB,QAAM,cAAN,MAAkB;AAAA,MAChB,YAAY,QAAQ,UAAU,gBAAgB;AAC5C,aAAK,WAAW;AAChB,aAAK,YAAY,CAAC;AAClB,aAAK,oBAAoB;AACzB,YAAI;AACJ,YAAI,OAAO,cAAc,IAAI;AAC3B,iBAAO,MAAM,OAAO;AAAA,QACtB,OAAO;AACL,iBAAO,OAAO;AAAA,QAChB;AACA,aAAK,YAAY,CAAC;AAAA,UAChB;AAAA,QACF,CAAC;AAAA,MACH;AAAA,MACA,mBAAmB;AACjB,YAAI,CAAC,KAAK,mBAAmB;AAC3B,eAAK,oBAAoB;AACzB,kBAAQ,SAAS,KAAK,SAAS,wBAAwB,KAAK,WAAW,MAAM,MAAM,MAAM,CAAC,CAAC;AAAA,QAC7F;AAAA,MACF;AAAA,MACA,UAAU;AAAA,MAEV;AAAA,MACA,OAAO,oBAAoB,QAAQ;AACjC,eAAO;AAAA,MACT;AAAA,IACF;AACA,aAAS,QAAQ;AACf,OAAC,GAAG,WAAW,kBAAkB,QAAQ,WAAW;AAAA,IACtD;AACA,IAAAA,SAAQ,QAAQ;AAAA;AAAA;;;ACrDhB;AAAA,wDAAAC,UAAA;AAAA;AAiBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,QAAQ;AAChB,QAAM,QAAQ,UAAQ,KAAK;AAC3B,QAAM,cAAc;AACpB,QAAM,aAAa;AACnB,QAAM,aAAa;AACnB,QAAM,eAAe;AACrB,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,aAAS,MAAM,MAAM;AACnB,cAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,IAAI;AAAA,IACjE;AACA,QAAM,cAAc;AACpB,QAAM,cAAc;AAIpB,QAAM,eAAe;AACrB,QAAM,aAAN,MAAiB;AAAA,MACf,YAAY,QAAQ,UAAU,gBAAgB;AAC5C,YAAI;AACJ,aAAK,WAAW;AAChB,aAAK,YAAY,CAAC;AAClB,aAAK,QAAQ;AACb,aAAK,oBAAoB;AACzB,cAAM,sCAAsC,GAAG,aAAa,aAAa,MAAM,CAAC;AAChF,cAAM,YAAY,CAAC;AACnB,YAAI,EAAE,OAAO,WAAW,eAAe,OAAO,WAAW,cAAc;AACrE,eAAK,QAAQ;AAAA,YACX,MAAM,YAAY,OAAO;AAAA,YACzB,SAAS,uBAAuB,OAAO,MAAM;AAAA,YAC7C,UAAU,IAAI,WAAW,SAAS;AAAA,UACpC;AACA;AAAA,QACF;AACA,cAAM,WAAW,OAAO,KAAK,MAAM,GAAG;AACtC,mBAAW,QAAQ,UAAU;AAC3B,gBAAM,YAAY,GAAG,aAAa,eAAe,IAAI;AACrD,cAAI,aAAa,MAAM;AACrB,iBAAK,QAAQ;AAAA,cACX,MAAM,YAAY,OAAO;AAAA,cACzB,SAAS,mBAAmB,OAAO,MAAM,YAAY,IAAI;AAAA,cACzD,UAAU,IAAI,WAAW,SAAS;AAAA,YACpC;AACA;AAAA,UACF;AACA,cAAI,OAAO,WAAW,eAAe,EAAE,GAAG,MAAM,QAAQ,SAAS,IAAI,KAAK,OAAO,WAAW,eAAe,EAAE,GAAG,MAAM,QAAQ,SAAS,IAAI,GAAG;AAC5I,iBAAK,QAAQ;AAAA,cACX,MAAM,YAAY,OAAO;AAAA,cACzB,SAAS,mBAAmB,OAAO,MAAM,YAAY,IAAI;AAAA,cACzD,UAAU,IAAI,WAAW,SAAS;AAAA,YACpC;AACA;AAAA,UACF;AACA,oBAAU,KAAK;AAAA,YACb,MAAM,SAAS;AAAA,YACf,OAAO,KAAK,SAAS,UAAU,QAAQ,OAAO,SAAS,KAAK;AAAA,UAC9D,CAAC;AAAA,QACH;AACA,aAAK,YAAY;AACjB,cAAM,YAAY,OAAO,SAAS,mBAAmB,KAAK,SAAS;AAAA,MACrE;AAAA,MACA,mBAAmB;AACjB,YAAI,CAAC,KAAK,mBAAmB;AAC3B,eAAK,oBAAoB;AACzB,kBAAQ,SAAS,MAAM;AACrB,gBAAI,KAAK,OAAO;AACd,mBAAK,SAAS,QAAQ,KAAK,KAAK;AAAA,YAClC,OAAO;AACL,mBAAK,SAAS,uBAAuB,KAAK,WAAW,MAAM,MAAM,MAAM,CAAC,CAAC;AAAA,YAC3E;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF;AAAA,MACA,UAAU;AACR,aAAK,oBAAoB;AAAA,MAC3B;AAAA,MACA,OAAO,oBAAoB,QAAQ;AACjC,eAAO,OAAO,KAAK,MAAM,GAAG,EAAE,CAAC;AAAA,MACjC;AAAA,IACF;AACA,aAAS,QAAQ;AACf,OAAC,GAAG,WAAW,kBAAkB,aAAa,UAAU;AACxD,OAAC,GAAG,WAAW,kBAAkB,aAAa,UAAU;AAAA,IAC1D;AACA,IAAAA,SAAQ,QAAQ;AAAA;AAAA;;;ACxGhB;AAAA,qEAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,QAAQA,SAAQ,wBAAwBA,SAAQ,WAAWA,SAAQ,+BAA+B;AAC1G,QAAM,kBAAkB;AACxB,QAAM,uBAAuB;AAC7B,QAAM,WAAW;AACjB,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,cAAc;AACpB,aAAS,MAAM,MAAM;AACnB,cAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,IAAI;AAAA,IACjE;AACA,QAAM,YAAY;AAKlB,QAAM,+BAA+B;AACrC,QAAM,+BAAN,MAAM,8BAA6B;AAAA,MACjC,YAAY,oBAAoB;AAC9B,aAAK,qBAAqB;AAAA,MAC5B;AAAA,MACA,sBAAsB;AACpB,eAAO;AAAA,MACT;AAAA,MACA,eAAe;AACb,eAAO;AAAA,UACL,CAAC,SAAS,GAAG;AAAA,YACX,oBAAoB,KAAK;AAAA,UAC3B;AAAA,QACF;AAAA,MACF;AAAA,MACA,wBAAwB;AACtB,eAAO,KAAK;AAAA,MACd;AAAA;AAAA,MAEA,OAAO,eAAe,KAAK;AACzB,YAAI,wBAAwB,OAAO,EAAE,OAAO,IAAI,uBAAuB,YAAY;AACjF,gBAAM,IAAI,MAAM,0EAA0E;AAAA,QAC5F;AACA,eAAO,IAAI,8BAA6B,IAAI,uBAAuB,IAAI;AAAA,MACzE;AAAA,IACF;AACA,IAAAA,SAAQ,+BAA+B;AAKvC,QAAM,kBAAN,MAAsB;AAAA,MACpB,YAAY,YAAY;AACtB,aAAK,aAAa;AAAA,MACpB;AAAA,MACA,KAAK,UAAU;AACb,eAAO;AAAA,UACL,gBAAgB,SAAS,eAAe;AAAA,UACxC,YAAY,KAAK;AAAA,UACjB,QAAQ;AAAA,UACR,eAAe;AAAA,UACf,aAAa;AAAA,QACf;AAAA,MACF;AAAA,IACF;AAMA,aAAS,SAAS,MAAM;AACtB,YAAM,SAAS,KAAK,MAAM;AAC1B,eAAS,IAAI,OAAO,SAAS,GAAG,IAAI,GAAG,KAAK;AAC1C,cAAM,IAAI,KAAK,MAAM,KAAK,OAAO,KAAK,IAAI,EAAE;AAC5C,cAAM,OAAO,OAAO,CAAC;AACrB,eAAO,CAAC,IAAI,OAAO,CAAC;AACpB,eAAO,CAAC,IAAI;AAAA,MACd;AACA,aAAO;AAAA,IACT;AACA,IAAAA,SAAQ,WAAW;AACnB,QAAM,wBAAN,MAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQ1B,YAAY,sBAAsB;AAChC,aAAK,uBAAuB;AAK5B,aAAK,WAAW,CAAC;AAIjB,aAAK,eAAe,qBAAqB,kBAAkB;AAK3D,aAAK,yBAAyB;AAM9B,aAAK,cAAc;AAKnB,aAAK,0BAA0B,CAAC,YAAY,eAAe,UAAU,eAAe,iBAAiB;AACnG,eAAK,wBAAwB,YAAY,eAAe,UAAU,YAAY;AAAA,QAChF;AACA,aAAK,sBAAsB;AAO3B,aAAK,6BAA6B;AAKlC,aAAK,qCAAqC;AAK1C,aAAK,YAAY;AACjB,aAAK,oBAAoB;AACzB,aAAK,yBAAyB,WAAW,MAAM;AAAA,QAAC,GAAG,CAAC;AACpD,qBAAa,KAAK,sBAAsB;AAAA,MAC1C;AAAA,MACA,4BAA4B;AAC1B,eAAO,KAAK,SAAS,MAAM,WAAS,MAAM,2BAA2B;AAAA,MACvE;AAAA,MACA,6BAA6B;AAC3B,YAAI,KAAK,aAAa;AACpB,eAAK,YAAY,qBAAqB,kBAAkB,OAAO,IAAI,gBAAgB,KAAK,WAAW,CAAC;AAAA,QACtG,WAAW,KAAK,SAAS,WAAW,GAAG;AACrC,eAAK,YAAY,qBAAqB,kBAAkB,MAAM,IAAI,SAAS,YAAY,IAAI,CAAC;AAAA,QAC9F,OAAO;AACL,cAAI,KAAK,4BAA4B;AACnC,iBAAK,YAAY,qBAAqB,kBAAkB,mBAAmB,IAAI,SAAS,kBAAkB;AAAA,cACxG,SAAS,0CAA0C,KAAK,SAAS;AAAA,YACnE,CAAC,CAAC;AAAA,UACJ,OAAO;AACL,iBAAK,YAAY,qBAAqB,kBAAkB,YAAY,IAAI,SAAS,YAAY,IAAI,CAAC;AAAA,UACpG;AAAA,QACF;AAAA,MACF;AAAA,MACA,sBAAsB;AACpB,aAAK,qCAAqC;AAC1C,aAAK,qBAAqB,oBAAoB;AAAA,MAChD;AAAA,MACA,uCAAuC;AACrC,YAAI,CAAC,KAAK,0BAA0B,GAAG;AACrC;AAAA,QACF;AACA,YAAI,CAAC,KAAK,oCAAoC;AAO5C,eAAK,oBAAoB;AAAA,QAC3B;AACA,YAAI,KAAK,4BAA4B;AACnC;AAAA,QACF;AACA,aAAK,6BAA6B;AAClC,mBAAW;AAAA,UACT;AAAA,QACF,KAAK,KAAK,UAAU;AAClB,qBAAW,gBAAgB;AAAA,QAC7B;AACA,aAAK,2BAA2B;AAAA,MAClC;AAAA,MACA,oBAAoB;AAClB,YAAI,KAAK,gBAAgB,MAAM;AAI7B,gBAAM,cAAc,KAAK;AACzB,eAAK,cAAc;AACnB,sBAAY,MAAM;AAClB,sBAAY,gCAAgC,KAAK,uBAAuB;AACxE,eAAK,qBAAqB,oBAAoB,YAAY,eAAe,CAAC;AAAA,QAC5E;AAAA,MACF;AAAA,MACA,wBAAwB,YAAY,eAAe,UAAU,cAAc;AACzE,YAAI;AACJ,aAAK,KAAK,KAAK,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,qBAAqB,UAAU,GAAG;AACpG,cAAI,aAAa,qBAAqB,kBAAkB,OAAO;AAC7D,iBAAK,kBAAkB;AACvB,iBAAK,2BAA2B;AAChC,iBAAK,oBAAoB;AAAA,UAC3B;AACA;AAAA,QACF;AACA,mBAAW,CAAC,OAAO,KAAK,KAAK,KAAK,SAAS,QAAQ,GAAG;AACpD,cAAI,WAAW,qBAAqB,MAAM,UAAU,GAAG;AACrD,gBAAI,aAAa,qBAAqB,kBAAkB,OAAO;AAC7D,mBAAK,eAAe,MAAM,UAAU;AAAA,YACtC;AACA,gBAAI,aAAa,qBAAqB,kBAAkB,mBAAmB;AACzE,oBAAM,8BAA8B;AACpC,kBAAI,cAAc;AAChB,qBAAK,YAAY;AAAA,cACnB;AACA,mBAAK,qCAAqC;AAC1C,kBAAI,UAAU,KAAK,wBAAwB;AACzC,qBAAK,8BAA8B,QAAQ,CAAC;AAAA,cAC9C;AAAA,YACF;AACA,kBAAM,WAAW,gBAAgB;AACjC;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,8BAA8B,YAAY;AACxC,qBAAa,KAAK,sBAAsB;AACxC,YAAI,KAAK,qBAAqB;AAC5B;AAAA,QACF;AACA,mBAAW,CAAC,OAAO,KAAK,KAAK,KAAK,SAAS,QAAQ,GAAG;AACpD,cAAI,SAAS,YAAY;AACvB,kBAAM,kBAAkB,MAAM,WAAW,qBAAqB;AAC9D,gBAAI,oBAAoB,qBAAqB,kBAAkB,QAAQ,oBAAoB,qBAAqB,kBAAkB,YAAY;AAC5I,mBAAK,gBAAgB,KAAK;AAC1B;AAAA,YACF;AAAA,UACF;AAAA,QACF;AACA,aAAK,sBAAsB;AAC3B,aAAK,qCAAqC;AAAA,MAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,MAKA,gBAAgB,iBAAiB;AAC/B,YAAI,IAAI;AACR,qBAAa,KAAK,sBAAsB;AACxC,aAAK,yBAAyB;AAC9B,YAAI,KAAK,SAAS,eAAe,EAAE,WAAW,qBAAqB,MAAM,qBAAqB,kBAAkB,MAAM;AACpH,gBAAM,iDAAiD,KAAK,SAAS,eAAe,EAAE,WAAW,WAAW,CAAC;AAC7G,kBAAQ,SAAS,MAAM;AACrB,gBAAIC;AACJ,aAACA,MAAK,KAAK,SAAS,eAAe,OAAO,QAAQA,QAAO,SAAS,SAASA,IAAG,WAAW,gBAAgB;AAAA,UAC3G,CAAC;AAAA,QACH;AACA,aAAK,0BAA0B,MAAM,KAAK,WAAW,MAAM;AACzD,eAAK,8BAA8B,kBAAkB,CAAC;AAAA,QACxD,GAAG,4BAA4B,GAAG,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,EAAE;AAAA,MAC1F;AAAA,MACA,eAAe,YAAY;AACzB,YAAI,KAAK,eAAe,WAAW,qBAAqB,KAAK,WAAW,GAAG;AACzE;AAAA,QACF;AACA,cAAM,kCAAkC,WAAW,WAAW,CAAC;AAC/D,aAAK,6BAA6B;AAClC,YAAI,KAAK,gBAAgB,MAAM;AAC7B,eAAK,YAAY,MAAM;AACvB,eAAK,qBAAqB,oBAAoB,KAAK,YAAY,eAAe,CAAC;AAC/E,eAAK,YAAY,gCAAgC,KAAK,uBAAuB;AAAA,QAC/E;AACA,aAAK,cAAc;AACnB,mBAAW,IAAI;AACf,aAAK,qBAAqB,iBAAiB,WAAW,eAAe,CAAC;AACtE,aAAK,oBAAoB;AACzB,qBAAa,KAAK,sBAAsB;AACxC,aAAK,2BAA2B;AAAA,MAClC;AAAA,MACA,YAAY,UAAU,QAAQ;AAC5B,cAAM,qBAAqB,kBAAkB,KAAK,YAAY,IAAI,SAAS,qBAAqB,kBAAkB,QAAQ,CAAC;AAC3H,aAAK,eAAe;AACpB,aAAK,qBAAqB,YAAY,UAAU,MAAM;AAAA,MACxD;AAAA,MACA,sBAAsB;AACpB,mBAAW,SAAS,KAAK,UAAU;AACjC,cAAI,EAAE,KAAK,eAAe,MAAM,WAAW,qBAAqB,KAAK,WAAW,IAAI;AAKlF,kBAAM,WAAW,gCAAgC,KAAK,uBAAuB;AAAA,UAC/E;AAKA,gBAAM,WAAW,MAAM;AACvB,eAAK,qBAAqB,oBAAoB,MAAM,WAAW,eAAe,CAAC;AAAA,QACjF;AACA,aAAK,yBAAyB;AAC9B,aAAK,WAAW,CAAC;AACjB,aAAK,sBAAsB;AAC3B,aAAK,qCAAqC;AAAA,MAC5C;AAAA,MACA,qBAAqB,aAAa;AAChC,cAAM,kBAAkB,YAAY,IAAI,cAAY;AAAA,UAClD,YAAY,KAAK,qBAAqB,iBAAiB,SAAS,CAAC,CAAC;AAAA,UAClE,6BAA6B;AAAA,QAC/B,EAAE;AAIF,mBAAW;AAAA,UACT;AAAA,QACF,KAAK,iBAAiB;AACpB,qBAAW,IAAI;AACf,eAAK,qBAAqB,iBAAiB,WAAW,eAAe,CAAC;AAAA,QACxE;AACA,aAAK,oBAAoB;AACzB,aAAK,WAAW;AAChB,mBAAW;AAAA,UACT;AAAA,QACF,KAAK,KAAK,UAAU;AAClB,qBAAW,6BAA6B,KAAK,uBAAuB;AACpE,cAAI,WAAW,qBAAqB,MAAM,qBAAqB,kBAAkB,OAAO;AACtF,iBAAK,eAAe,UAAU;AAC9B;AAAA,UACF;AAAA,QACF;AACA,mBAAW,SAAS,KAAK,UAAU;AACjC,cAAI,MAAM,WAAW,qBAAqB,MAAM,qBAAqB,kBAAkB,mBAAmB;AACxG,kBAAM,8BAA8B;AAAA,UACtC;AAAA,QACF;AACA,aAAK,8BAA8B,CAAC;AACpC,aAAK,2BAA2B;AAAA,MAClC;AAAA,MACA,kBAAkB,aAAa,UAAU;AACvC,YAAI,EAAE,oBAAoB,+BAA+B;AACvD;AAAA,QACF;AAIA,YAAI,SAAS,sBAAsB,GAAG;AACpC,wBAAc,SAAS,WAAW;AAAA,QACpC;AACA,aAAK,oBAAoB;AACzB,aAAK,qBAAqB,WAAW;AAAA,MACvC;AAAA,MACA,WAAW;AACT,YAAI,KAAK,iBAAiB,qBAAqB,kBAAkB,QAAQ,KAAK,mBAAmB;AAC/F,eAAK,qBAAqB,KAAK,iBAAiB;AAAA,QAClD;AAAA,MACF;AAAA,MACA,eAAe;AAAA,MAGf;AAAA,MACA,UAAU;AACR,aAAK,oBAAoB;AACzB,aAAK,kBAAkB;AAAA,MACzB;AAAA,MACA,cAAc;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAD,SAAQ,wBAAwB;AAChC,aAAS,QAAQ;AACf,OAAC,GAAG,gBAAgB,0BAA0B,WAAW,uBAAuB,4BAA4B;AAC5G,OAAC,GAAG,gBAAgB,iCAAiC,SAAS;AAAA,IAChE;AACA,IAAAA,SAAQ,QAAQ;AAAA;AAAA;;;ACxYhB;AAAA,sEAAAE,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,QAAQA,SAAQ,yBAAyB;AACjD,QAAM,kBAAkB;AACxB,QAAM,uBAAuB;AAC7B,QAAM,WAAW;AACjB,QAAM,uBAAuB;AAC7B,QAAM,UAAU;AAChB,QAAM,cAAc;AACpB,QAAM,cAAc;AACpB,aAAS,MAAM,MAAM;AACnB,cAAQ,MAAM,YAAY,aAAa,OAAO,aAAa,IAAI;AAAA,IACjE;AACA,QAAM,YAAY;AAClB,QAAM,gCAAN,MAAM,+BAA8B;AAAA,MAClC,sBAAsB;AACpB,eAAO;AAAA,MACT;AAAA,MACA,cAAc;AAAA,MAAC;AAAA,MACf,eAAe;AACb,eAAO;AAAA,UACL,CAAC,SAAS,GAAG,CAAC;AAAA,QAChB;AAAA,MACF;AAAA;AAAA,MAEA,OAAO,eAAe,KAAK;AACzB,eAAO,IAAI,+BAA8B;AAAA,MAC3C;AAAA,IACF;AACA,QAAM,mBAAN,MAAuB;AAAA,MACrB,YAAY,gBAAgB,YAAY,GAAG;AACzC,aAAK,iBAAiB;AACtB,aAAK,YAAY;AAAA,MACnB;AAAA,MACA,KAAK,UAAU;AACb,cAAM,mBAAmB,KAAK,eAAe,KAAK,SAAS;AAC3D,aAAK,aAAa,KAAK,YAAY,KAAK,KAAK,eAAe;AAC5D,eAAO;AAAA,UACL,gBAAgB,SAAS,eAAe;AAAA,UACxC,YAAY;AAAA,UACZ,QAAQ;AAAA,UACR,eAAe;AAAA,UACf,aAAa;AAAA,QACf;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,qBAAqB;AACnB,eAAO,KAAK,eAAe,KAAK,SAAS;AAAA,MAC3C;AAAA,IACF;AACA,QAAM,yBAAN,MAA6B;AAAA,MAC3B,YAAY,sBAAsB;AAChC,aAAK,uBAAuB;AAC5B,aAAK,cAAc,CAAC;AACpB,aAAK,eAAe,qBAAqB,kBAAkB;AAC3D,aAAK,qBAAqB;AAC1B,aAAK,YAAY;AACjB,aAAK,0BAA0B,CAAC,YAAY,eAAe,UAAU,eAAe,iBAAiB;AACnG,eAAK,wBAAwB;AAC7B,cAAI,aAAa,qBAAqB,kBAAkB,qBAAqB,aAAa,qBAAqB,kBAAkB,MAAM;AACrI,gBAAI,cAAc;AAChB,mBAAK,YAAY;AAAA,YACnB;AACA,iBAAK,qBAAqB,oBAAoB;AAC9C,uBAAW,gBAAgB;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,MACA,0BAA0B,OAAO;AAC/B,eAAO,KAAK,YAAY,OAAO,gBAAc,WAAW,qBAAqB,MAAM,KAAK,EAAE;AAAA,MAC5F;AAAA,MACA,0BAA0B;AACxB,YAAI,KAAK,0BAA0B,qBAAqB,kBAAkB,KAAK,IAAI,GAAG;AACpF,gBAAM,mBAAmB,KAAK,YAAY,OAAO,gBAAc,WAAW,qBAAqB,MAAM,qBAAqB,kBAAkB,KAAK;AACjJ,cAAI,QAAQ;AACZ,cAAI,KAAK,uBAAuB,MAAM;AACpC,oBAAQ,iBAAiB,QAAQ,KAAK,mBAAmB,mBAAmB,CAAC;AAC7E,gBAAI,QAAQ,GAAG;AACb,sBAAQ;AAAA,YACV;AAAA,UACF;AACA,eAAK,YAAY,qBAAqB,kBAAkB,OAAO,IAAI,iBAAiB,kBAAkB,KAAK,CAAC;AAAA,QAC9G,WAAW,KAAK,0BAA0B,qBAAqB,kBAAkB,UAAU,IAAI,GAAG;AAChG,eAAK,YAAY,qBAAqB,kBAAkB,YAAY,IAAI,SAAS,YAAY,IAAI,CAAC;AAAA,QACpG,WAAW,KAAK,0BAA0B,qBAAqB,kBAAkB,iBAAiB,IAAI,GAAG;AACvG,eAAK,YAAY,qBAAqB,kBAAkB,mBAAmB,IAAI,SAAS,kBAAkB;AAAA,YACxG,SAAS,0CAA0C,KAAK,SAAS;AAAA,UACnE,CAAC,CAAC;AAAA,QACJ,OAAO;AACL,eAAK,YAAY,qBAAqB,kBAAkB,MAAM,IAAI,SAAS,YAAY,IAAI,CAAC;AAAA,QAC9F;AAAA,MACF;AAAA,MACA,YAAY,UAAU,QAAQ;AAC5B,cAAM,qBAAqB,kBAAkB,KAAK,YAAY,IAAI,SAAS,qBAAqB,kBAAkB,QAAQ,CAAC;AAC3H,YAAI,aAAa,qBAAqB,kBAAkB,OAAO;AAC7D,eAAK,qBAAqB;AAAA,QAC5B,OAAO;AACL,eAAK,qBAAqB;AAAA,QAC5B;AACA,aAAK,eAAe;AACpB,aAAK,qBAAqB,YAAY,UAAU,MAAM;AAAA,MACxD;AAAA,MACA,sBAAsB;AACpB,mBAAW,cAAc,KAAK,aAAa;AACzC,qBAAW,gCAAgC,KAAK,uBAAuB;AACvE,qBAAW,MAAM;AACjB,eAAK,qBAAqB,oBAAoB,WAAW,eAAe,CAAC;AAAA,QAC3E;AACA,aAAK,cAAc,CAAC;AAAA,MACtB;AAAA,MACA,kBAAkB,aAAa,UAAU;AACvC,aAAK,oBAAoB;AACzB,cAAM,6BAA6B,YAAY,IAAI,cAAY,GAAG,qBAAqB,2BAA2B,OAAO,CAAC,CAAC;AAC3H,aAAK,cAAc,YAAY,IAAI,aAAW,KAAK,qBAAqB,iBAAiB,SAAS,CAAC,CAAC,CAAC;AACrG,mBAAW,cAAc,KAAK,aAAa;AACzC,qBAAW,IAAI;AACf,qBAAW,6BAA6B,KAAK,uBAAuB;AACpE,eAAK,qBAAqB,iBAAiB,WAAW,eAAe,CAAC;AACtE,gBAAM,kBAAkB,WAAW,qBAAqB;AACxD,cAAI,oBAAoB,qBAAqB,kBAAkB,QAAQ,oBAAoB,qBAAqB,kBAAkB,mBAAmB;AACnJ,uBAAW,gBAAgB;AAAA,UAC7B;AAAA,QACF;AACA,aAAK,wBAAwB;AAAA,MAC/B;AAAA,MACA,WAAW;AACT,mBAAW,cAAc,KAAK,aAAa;AACzC,qBAAW,gBAAgB;AAAA,QAC7B;AAAA,MACF;AAAA,MACA,eAAe;AAAA,MAGf;AAAA,MACA,UAAU;AACR,aAAK,oBAAoB;AAAA,MAC3B;AAAA,MACA,cAAc;AACZ,eAAO;AAAA,MACT;AAAA,IACF;AACA,IAAAA,SAAQ,yBAAyB;AACjC,aAAS,QAAQ;AACf,OAAC,GAAG,gBAAgB,0BAA0B,WAAW,wBAAwB,6BAA6B;AAAA,IAChH;AACA,IAAAA,SAAQ,QAAQ;AAAA;AAAA;;;ACxKhB,IAAAC,eAAA;AAAA,kDAAAC,UAAA;AAAA;AAkBA,WAAO,eAAeA,UAAS,cAAc;AAAA,MAC3C,OAAO;AAAA,IACT,CAAC;AACD,IAAAA,SAAQ,eAAeA,SAAQ,2BAA2BA,SAAQ,sBAAsBA,SAAQ,+BAA+BA,SAAQ,gCAAgCA,SAAQ,mBAAmBA,SAAQ,mBAAmBA,SAAQ,kBAAkBA,SAAQ,gBAAgBA,SAAQ,mBAAmBA,SAAQ,oBAAoBA,SAAQ,SAASA,SAAQ,kBAAkBA,SAAQ,YAAYA,SAAQ,OAAOA,SAAQ,aAAaA,SAAQ,kBAAkBA,SAAQ,qBAAqBA,SAAQ,qBAAqBA,SAAQ,cAAcA,SAAQ,UAAUA,SAAQ,+BAA+BA,SAAQ,wBAAwBA,SAAQ,wBAAwBA,SAAQ,SAASA,SAAQ,wBAAwBA,SAAQ,YAAYA,SAAQ,oBAAoBA,SAAQ,SAASA,SAAQ,eAAeA,SAAQ,WAAWA,SAAQ,cAAc;AAC9zB,QAAM,qBAAqB;AAC3B,WAAO,eAAeA,UAAS,mBAAmB;AAAA,MAChD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,mBAAmB;AAAA,MAC5B;AAAA,IACF,CAAC;AACD,QAAM,YAAY;AAClB,WAAO,eAAeA,UAAS,WAAW;AAAA,MACxC,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,UAAU;AAAA,MACnB;AAAA,IACF,CAAC;AACD,QAAM,2BAA2B;AACjC,WAAO,eAAeA,UAAS,yBAAyB;AAAA,MACtD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,yBAAyB;AAAA,MAClC;AAAA,IACF,CAAC;AACD,QAAM,uBAAuB;AAC7B,WAAO,eAAeA,UAAS,qBAAqB;AAAA,MAClD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,qBAAqB;AAAA,MAC9B;AAAA,IACF,CAAC;AACD,QAAM,wBAAwB;AAC9B,WAAO,eAAeA,UAAS,sBAAsB;AAAA,MACnD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,sBAAsB;AAAA,MAC/B;AAAA,IACF,CAAC;AACD,QAAM,WAAW;AACjB,WAAO,eAAeA,UAAS,UAAU;AAAA,MACvC,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AACD,QAAM,cAAc;AACpB,WAAO,eAAeA,UAAS,gBAAgB;AAAA,MAC7C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,YAAY;AAAA,MACrB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,UAAU;AAAA,MACvC,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,YAAY;AAAA,MACrB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,aAAa;AAAA,MAC1C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,YAAY;AAAA,MACrB;AAAA,IACF,CAAC;AACD,QAAM,UAAU;AAChB,QAAM,gBAAgB;AACtB,WAAO,eAAeA,UAAS,yBAAyB;AAAA,MACtD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,cAAc;AAAA,MACvB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,yBAAyB;AAAA,MACtD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,cAAc;AAAA,MACvB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,gCAAgC;AAAA,MAC7D,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,cAAc;AAAA,MACvB;AAAA,IACF,CAAC;AACD,QAAM,aAAa;AACnB,WAAO,eAAeA,UAAS,YAAY;AAAA,MACzC,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,WAAW;AAAA,MACpB;AAAA,IACF,CAAC;AACD,QAAM,WAAW;AACjB,WAAO,eAAeA,UAAS,UAAU;AAAA,MACvC,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,SAAS;AAAA,MAClB;AAAA,IACF,CAAC;AACD,QAAM,uBAAuB;AAC7B,WAAO,eAAeA,UAAS,qBAAqB;AAAA,MAClD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,qBAAqB;AAAA,MAC9B;AAAA,IACF,CAAC;AACD,QAAM,mBAAmB;AACzB,WAAO,eAAeA,UAAS,iBAAiB;AAAA,MAC9C,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,iBAAiB;AAAA,MAC1B;AAAA,IACF,CAAC;AAGD,IAAAA,SAAQ,cAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQpB,2BAA2B,CAAC,uBAAuB,oBAAoB;AACrE,eAAO,gBAAgB,OAAO,CAAC,KAAK,UAAU,IAAI,QAAQ,KAAK,GAAG,kBAAkB;AAAA,MACtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,wBAAwB,CAAC,UAAU,eAAe;AAChD,eAAO,WAAW,OAAO,CAAC,KAAK,UAAU,IAAI,QAAQ,KAAK,GAAG,KAAK;AAAA,MACpE;AAAA;AAAA,MAEA,gBAAgB,sBAAsB,mBAAmB;AAAA,MACzD,WAAW,sBAAsB,mBAAmB;AAAA,MACpD,yBAAyB,sBAAsB,mBAAmB;AAAA;AAAA,MAElE,6BAA6B,mBAAmB,gBAAgB;AAAA,MAChE,4BAA4B,mBAAmB,gBAAgB;AAAA,MAC/D,aAAa,mBAAmB,gBAAgB;AAAA,IAClD;AAKA,QAAM,cAAc,YAAU,OAAO,MAAM;AAC3C,IAAAA,SAAQ,cAAc;AACtB,QAAM,qBAAqB,CAAC,QAAQ,UAAU,aAAa,OAAO,aAAa,UAAU,QAAQ;AACjG,IAAAA,SAAQ,qBAAqB;AAI7B,QAAM,aAAa,CAAC,OAAO,YAAY;AACrC,YAAM,IAAI,MAAM,yFAAyF;AAAA,IAC3G;AACA,IAAAA,SAAQ,aAAa;AACrB,QAAM,OAAO,CAAC,UAAU,QAAQ,YAAY;AAC1C,YAAM,IAAI,MAAM,yFAAyF;AAAA,IAC3G;AACA,IAAAA,SAAQ,OAAO;AACf,QAAM,YAAY,YAAU;AAC1B,cAAQ,UAAU,MAAM;AAAA,IAC1B;AACA,IAAAA,SAAQ,YAAY;AACpB,QAAM,kBAAkB,eAAa;AACnC,cAAQ,mBAAmB,SAAS;AAAA,IACtC;AACA,IAAAA,SAAQ,kBAAkB;AAC1B,QAAM,mBAAmB,YAAU;AACjC,aAAO,SAAS,OAAO,UAAU,WAAW,KAAK,MAAM;AAAA,IACzD;AACA,IAAAA,SAAQ,mBAAmB;AAC3B,QAAI,wBAAwB;AAC5B,WAAO,eAAeA,UAAS,mBAAmB;AAAA,MAChD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,sBAAsB;AAAA,MAC/B;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,oBAAoB;AAAA,MACjD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,sBAAsB;AAAA,MAC/B;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,oBAAoB;AAAA,MACjD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,sBAAsB;AAAA,MAC/B;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,iCAAiC;AAAA,MAC9D,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,sBAAsB;AAAA,MAC/B;AAAA,IACF,CAAC;AACD,QAAI,aAAa;AACjB,WAAO,eAAeA,UAAS,gCAAgC;AAAA,MAC7D,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,WAAW;AAAA,MACpB;AAAA,IACF,CAAC;AACD,WAAO,eAAeA,UAAS,uBAAuB;AAAA,MACpD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,WAAW;AAAA,MACpB;AAAA,IACF,CAAC;AACD,QAAI,UAAU;AACd,WAAO,eAAeA,UAAS,4BAA4B;AAAA,MACzD,YAAY;AAAA,MACZ,KAAK,WAAY;AACf,eAAO,QAAQ;AAAA,MACjB;AAAA,IACF,CAAC;AACD,QAAM,eAAe;AACrB,IAAAA,SAAQ,eAAe;AACvB,QAAM,eAAe;AACrB,QAAM,eAAe;AACrB,QAAM,cAAc;AACpB,QAAM,2BAA2B;AACjC,QAAM,4BAA4B;AAClC,QAAM,kCAAkC;AACxC,QAAM,WAAW;AACjB,KAAC,MAAM;AACL,mBAAa,MAAM;AACnB,mBAAa,MAAM;AACnB,kBAAY,MAAM;AAClB,+BAAyB,MAAM;AAC/B,gCAA0B,MAAM;AAChC,sCAAgC,MAAM;AACtC,eAAS,MAAM;AAAA,IACjB,GAAG;AAAA;AAAA;;;AC7PH,SAAS,SAAS,aAAa,mBAAmB;AAElD,SAAS,eAAe,qBAAqB;;;ACL7C,IAAI,iBAAiB,OAAO,eAAe,cAAc,aAAa,OAAO,WAAW,cAAc,SAAS,OAAO,WAAW,cAAc,SAAS,OAAO,SAAS,cAAc,OAAO,CAAC;AAC9L,IAAI,oBAAoB,CAAC;AAOzB,IAAI;AACJ,IAAI;AAAA,CACH,WAAY;AACX,MAAI;AAIJ,WAAS,EAAE,GAAG,GAAG;AACf,aAAS,IAAI;AAAA,IAAC;AACd,MAAE,YAAY,EAAE;AAChB,MAAE,IAAI,EAAE;AACR,MAAE,YAAY,IAAI,EAAE;AACpB,MAAE,UAAU,cAAc;AAC1B,MAAE,IAAI,SAAU,GAAG,GAAG,GAAG;AACvB,eAAS,IAAI,MAAM,UAAU,SAAS,CAAC,GAAG,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAK,GAAE,IAAI,CAAC,IAAI,UAAU,CAAC;AAClG,aAAO,EAAE,UAAU,CAAC,EAAE,MAAM,GAAG,CAAC;AAAA,IAClC;AAAA,EACF;AACA,WAAS,IAAI;AACX,SAAK,YAAY;AAAA,EACnB;AACA,WAAS,IAAI;AACX,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,IAAI,MAAM,CAAC;AAChB,SAAK,IAAI,MAAM,KAAK,SAAS;AAC7B,SAAK,IAAI,KAAK,IAAI;AAClB,SAAK,EAAE;AAAA,EACT;AACA,IAAE,GAAG,CAAC;AACN,IAAE,UAAU,IAAI,WAAY;AAC1B,SAAK,EAAE,CAAC,IAAI;AACZ,SAAK,EAAE,CAAC,IAAI;AACZ,SAAK,EAAE,CAAC,IAAI;AACZ,SAAK,EAAE,CAAC,IAAI;AACZ,SAAK,IAAI,KAAK,IAAI;AAAA,EACpB;AACA,WAAS,EAAE,GAAG,GAAG,GAAG;AAClB,UAAM,IAAI;AACV,QAAI,IAAI,MAAM,EAAE;AAChB,QAAI,aAAa,OAAO,EAAG,UAAS,IAAI,GAAG,KAAK,GAAG,EAAE,EAAG,GAAE,CAAC,IAAI,EAAE,WAAW,GAAG,IAAI,EAAE,WAAW,GAAG,KAAK,IAAI,EAAE,WAAW,GAAG,KAAK,KAAK,EAAE,WAAW,GAAG,KAAK;AAAA,QAAQ,MAAK,IAAI,GAAG,KAAK,GAAG,EAAE,EAAG,GAAE,CAAC,IAAI,EAAE,GAAG,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,GAAG,KAAK,KAAK,EAAE,GAAG,KAAK;AACnP,QAAI,EAAE,EAAE,CAAC;AACT,QAAI,EAAE,EAAE,CAAC;AACT,QAAI,EAAE,EAAE,CAAC;AACT,QAAI,IAAI,EAAE,EAAE,CAAC;AACb,QAAI,IAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AACpD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,YAAY;AAC/C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,YAAY;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,WAAW;AAC/C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,YAAY;AAC/C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,CAAC,IAAI,aAAa;AAChD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,KAAK,IAAI,MAAM,EAAE,EAAE,IAAI,aAAa;AACjD,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,EAAE,IAAI,aAAa;AAC3C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,EAAE,IAAI,aAAa;AAC3C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,EAAE,IAAI,aAAa;AAC3C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,EAAE,IAAI,YAAY;AAC1C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,WAAW;AACxC,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,EAAE,IAAI,aAAa;AAC3C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,EAAE,IAAI,YAAY;AAC1C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,IAAI,IAAI,KAAK,EAAE,CAAC,IAAI,aAAa;AAC1C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,aAAa;AAC9C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,aAAa;AAC9C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,aAAa;AAC9C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,aAAa;AAC9C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,aAAa;AAC9C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,QAAI,KAAK,KAAK,IAAI,aAAa,MAAM;AACrC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,EAAE,IAAI,aAAa;AAC9C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,YAAY;AAC5C,QAAI,KAAK,KAAK,KAAK,aAAa,MAAM;AACtC,QAAI,KAAK,KAAK,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,aAAa;AAC7C,MAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI;AACtB,MAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,KAAK,KAAK,KAAK,aAAa,MAAM,OAAO;AAC5D,MAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI;AACtB,MAAE,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,IAAI;AAAA,EACxB;AACA,IAAE,UAAU,IAAI,SAAU,GAAG,GAAG;AAC9B,eAAW,MAAM,IAAI,EAAE;AACvB,aAAS,IAAI,IAAI,KAAK,WAAW,IAAI,KAAK,GAAG,IAAI,KAAK,GAAG,IAAI,GAAG,IAAI,KAAI;AACtE,UAAI,KAAK,EAAG,QAAO,KAAK,IAAI,GAAE,MAAM,GAAG,CAAC,GAAG,KAAK,KAAK;AACrD,UAAI,aAAa,OAAO,EAAG,QAAO,IAAI,KAAI;AACxC,YAAI,EAAE,GAAG,IAAI,EAAE,WAAW,GAAG,GAAG,KAAK,KAAK,WAAW;AACnD,YAAE,MAAM,CAAC;AACT,cAAI;AACJ;AAAA,QACF;AAAA,MACF;AAAA,UAAO,QAAO,IAAI,IAAI,KAAI,EAAE,GAAG,IAAI,EAAE,GAAG,GAAG,KAAK,KAAK,WAAW;AAC9D,UAAE,MAAM,CAAC;AACT,YAAI;AACJ;AAAA,MACF;AAAA,IACF;AACA,SAAK,IAAI;AACT,SAAK,KAAK;AAAA,EACZ;AACA,IAAE,UAAU,IAAI,WAAY;AAC1B,QAAI,IAAI,OAAO,KAAK,KAAK,IAAI,KAAK,YAAY,IAAI,KAAK,aAAa,KAAK,CAAC;AAC1E,MAAE,CAAC,IAAI;AACP,aAAS,IAAI,GAAG,IAAI,EAAE,SAAS,GAAG,EAAE,EAAG,GAAE,CAAC,IAAI;AAC9C,QAAI,IAAI,IAAI,KAAK;AACjB,SAAK,IAAI,EAAE,SAAS,GAAG,IAAI,EAAE,QAAQ,EAAE,EAAG,GAAE,CAAC,IAAI,IAAI,KAAK,KAAK;AAC/D,SAAK,EAAE,CAAC;AACR,QAAI,MAAM,EAAE;AACZ,SAAK,IAAI,IAAI,GAAG,IAAI,GAAG,EAAE,EAAG,UAAS,IAAI,GAAG,KAAK,GAAG,KAAK,EAAG,GAAE,GAAG,IAAI,KAAK,EAAE,CAAC,MAAM,IAAI;AACvF,WAAO;AAAA,EACT;AACA,WAAS,EAAE,GAAG,GAAG;AACf,QAAI,IAAI;AACR,WAAO,OAAO,UAAU,eAAe,KAAK,GAAG,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC,IAAI,EAAE,CAAC;AAAA,EACvE;AACA,WAAS,EAAE,GAAG,GAAG;AACf,SAAK,IAAI;AACT,aAAS,IAAI,CAAC,GAAG,IAAI,MAAI,IAAI,EAAE,SAAS,GAAG,KAAK,GAAG,KAAK;AACtD,UAAI,IAAI,EAAE,CAAC,IAAI;AACf,WAAK,KAAK,MAAM,EAAE,CAAC,IAAI,GAAG,IAAI;AAAA,IAChC;AACA,SAAK,IAAI;AAAA,EACX;AACA,MAAI,IAAI,CAAC;AACT,WAAS,EAAE,GAAG;AACZ,WAAO,QAAQ,KAAK,MAAM,IAAI,EAAE,GAAG,SAAU,GAAG;AAC9C,aAAO,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC;AAAA,IACtC,CAAC,IAAI,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,IAAI,IAAI,KAAK,CAAC;AAAA,EACpC;AACA,WAAS,EAAE,GAAG;AACZ,QAAI,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC,EAAG,QAAO;AACrC,QAAI,IAAI,EAAG,QAAO,EAAE,EAAE,CAAC,CAAC,CAAC;AACzB,aAAS,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,IAAK,GAAE,CAAC,IAAI,IAAI,IAAI,GAAG,KAAK;AACnE,WAAO,IAAI,EAAE,GAAG,CAAC;AAAA,EACnB;AACA,WAAS,EAAE,GAAG,GAAG;AACf,QAAI,KAAK,EAAE,OAAQ,OAAM,MAAM,mCAAmC;AAClE,QAAI,KAAK;AACT,QAAI,IAAI,KAAK,KAAK,EAAG,OAAM,MAAM,yBAAyB,CAAC;AAC3D,QAAI,OAAO,EAAE,OAAO,CAAC,EAAG,QAAO,EAAE,EAAE,EAAE,UAAU,CAAC,GAAG,CAAC,CAAC;AACrD,QAAI,KAAK,EAAE,QAAQ,GAAG,EAAG,OAAM,MAAM,6CAA6C;AAClF,aAAS,IAAI,EAAE,KAAK,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK,GAAG;AAClE,UAAI,IAAI,KAAK,IAAI,GAAG,EAAE,SAAS,CAAC,GAC9B,IAAI,SAAS,EAAE,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC;AACvC,UAAI,KAAK,IAAI,EAAE,KAAK,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC,MAAM,IAAI,EAAE,EAAE,CAAC,GAAG,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;AAAA,IACrF;AACA,WAAO;AAAA,EACT;AACA,MAAI,IAAI,EAAE,CAAC,GACT,IAAI,EAAE,CAAC,GACP,IAAI,EAAE,QAAQ;AAChB,MAAI,EAAE;AACN,IAAE,IAAI,WAAY;AAChB,QAAI,EAAE,IAAI,EAAG,QAAO,CAAC,EAAE,IAAI,EAAE,EAAE;AAC/B,aAAS,IAAI,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,KAAK,EAAE,QAAQ,KAAK;AACpD,UAAI,IAAI,KAAK,EAAE,CAAC;AAChB,YAAM,KAAK,IAAI,IAAI,aAAa,KAAK;AACrC,WAAK;AAAA,IACP;AACA,WAAO;AAAA,EACT;AACA,IAAE,WAAW,SAAU,GAAG;AACxB,QAAI,KAAK;AACT,QAAI,IAAI,KAAK,KAAK,EAAG,OAAM,MAAM,yBAAyB,CAAC;AAC3D,QAAI,EAAE,IAAI,EAAG,QAAO;AACpB,QAAI,EAAE,IAAI,EAAG,QAAO,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC;AAC5C,aAAS,IAAI,EAAE,KAAK,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,QAAM;AAClD,UAAI,IAAI,EAAE,GAAG,CAAC,EAAE;AAChB,UAAI,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;AACf,UAAI,MAAM,IAAI,EAAE,EAAE,SAAS,EAAE,EAAE,CAAC,IAAI,EAAE,OAAO,GAAG,SAAS,CAAC;AAC1D,UAAI;AACJ,UAAI,EAAE,CAAC,EAAG,QAAO,IAAI;AACrB,aAAO,IAAI,EAAE,SAAS,KAAI,MAAM;AAChC,UAAI,IAAI;AAAA,IACV;AAAA,EACF;AACA,IAAE,IAAI,SAAU,GAAG;AACjB,WAAO,IAAI,IAAI,IAAI,IAAI,KAAK,EAAE,SAAS,KAAK,EAAE,CAAC,IAAI,KAAK;AAAA,EAC1D;AACA,WAAS,EAAE,GAAG;AACZ,QAAI,KAAK,EAAE,EAAG,QAAO;AACrB,aAAS,IAAI,GAAG,IAAI,EAAE,EAAE,QAAQ,IAAK,KAAI,KAAK,EAAE,EAAE,CAAC,EAAG,QAAO;AAC7D,WAAO;AAAA,EACT;AACA,WAAS,EAAE,GAAG;AACZ,WAAO,MAAM,EAAE;AAAA,EACjB;AACA,IAAE,IAAI,SAAU,GAAG;AACjB,QAAI,EAAE,MAAM,CAAC;AACb,WAAO,EAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,IAAI;AAAA,EAChC;AACA,WAAS,EAAE,GAAG;AACZ,aAAS,IAAI,EAAE,EAAE,QAAQ,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;AACjE,WAAO,IAAI,EAAE,GAAG,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC;AAAA,EAC7B;AACA,IAAE,MAAM,WAAY;AAClB,WAAO,EAAE,IAAI,IAAI,EAAE,IAAI,IAAI;AAAA,EAC7B;AACA,IAAE,MAAM,SAAU,GAAG;AACnB,aAAS,IAAI,KAAK,IAAI,KAAK,EAAE,QAAQ,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,KAAK,GAAG,KAAK;AACnF,UAAI,IAAI,KAAK,KAAK,EAAE,CAAC,IAAI,UAAU,EAAE,EAAE,CAAC,IAAI,QAC1C,KAAK,MAAM,OAAO,KAAK,EAAE,CAAC,MAAM,OAAO,EAAE,EAAE,CAAC,MAAM;AACpD,UAAI,MAAM;AACV,WAAK;AACL,WAAK;AACL,QAAE,CAAC,IAAI,KAAK,KAAK;AAAA,IACnB;AACA,WAAO,IAAI,EAAE,GAAG,EAAE,EAAE,SAAS,CAAC,IAAI,cAAc,KAAK,CAAC;AAAA,EACxD;AACA,WAAS,EAAE,GAAG,GAAG;AACf,WAAO,EAAE,IAAI,EAAE,CAAC,CAAC;AAAA,EACnB;AACA,IAAE,IAAI,SAAU,GAAG;AACjB,QAAI,EAAE,IAAI,KAAK,EAAE,CAAC,EAAG,QAAO;AAC5B,QAAI,EAAE,IAAI,EAAG,QAAO,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC,IAAI,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;AAC3D,QAAI,EAAE,CAAC,EAAG,QAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;AAC/B,QAAI,IAAI,KAAK,EAAE,CAAC,KAAK,IAAI,EAAE,EAAE,CAAC,EAAG,QAAO,EAAE,KAAK,EAAE,IAAI,EAAE,EAAE,CAAC;AAC1D,aAAS,IAAI,KAAK,EAAE,SAAS,EAAE,EAAE,QAAQ,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI;AAC/E,SAAK,IAAI,GAAG,IAAI,KAAK,EAAE,QAAQ,IAAK,UAAS,IAAI,GAAG,IAAI,EAAE,EAAE,QAAQ,KAAK;AACvE,UAAI,IAAI,KAAK,EAAE,CAAC,MAAM,IACpB,IAAI,KAAK,EAAE,CAAC,IAAI,OAChB,IAAI,EAAE,EAAE,CAAC,MAAM,IACf,IAAI,EAAE,EAAE,CAAC,IAAI;AACf,QAAE,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI;AACxB,QAAE,GAAG,IAAI,IAAI,IAAI,CAAC;AAClB,QAAE,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI;AAC5B,QAAE,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC;AACtB,QAAE,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI;AAC5B,QAAE,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC;AACtB,QAAE,IAAI,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI;AAC5B,QAAE,GAAG,IAAI,IAAI,IAAI,IAAI,CAAC;AAAA,IACxB;AACA,SAAK,IAAI,GAAG,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,KAAK,EAAE,IAAI,CAAC;AAC3D,SAAK,IAAI,GAAG,IAAI,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI;AACnC,WAAO,IAAI,EAAE,GAAG,CAAC;AAAA,EACnB;AACA,WAAS,EAAE,GAAG,GAAG;AACf,YAAQ,EAAE,CAAC,IAAI,UAAU,EAAE,CAAC,IAAI,GAAE,IAAI,CAAC,KAAK,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,KAAK,OAAO;AAAA,EAC1E;AACA,WAAS,EAAE,GAAG,GAAG;AACf,SAAK,IAAI;AACT,SAAK,IAAI;AAAA,EACX;AACA,WAAS,EAAE,GAAG,GAAG;AACf,QAAI,EAAE,CAAC,EAAG,OAAM,MAAM,kBAAkB;AACxC,QAAI,EAAE,CAAC,EAAG,QAAO,IAAI,EAAE,GAAG,CAAC;AAC3B,QAAI,EAAE,CAAC,EAAG,QAAO,IAAI,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;AACrD,QAAI,EAAE,CAAC,EAAG,QAAO,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC;AAClD,QAAI,KAAK,EAAE,EAAE,QAAQ;AACnB,UAAI,EAAE,CAAC,KAAK,EAAE,CAAC,EAAG,OAAM,MAAM,gDAAgD;AAC9E,eAAS,IAAI,GAAG,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC,IAAI,KAAI,EAAE,CAAC,GAAG,IAAI,EAAE,CAAC;AACtD,UAAI,IAAI,EAAE,GAAG,CAAC,GACZ,IAAI,EAAE,GAAG,CAAC;AACZ,UAAI,EAAE,GAAG,CAAC;AACV,WAAK,IAAI,EAAE,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,KAAI;AACxB,YAAI,IAAI,EAAE,IAAI,CAAC;AACf,aAAK,EAAE,EAAE,CAAC,MAAM,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI;AAClC,YAAI,EAAE,GAAG,CAAC;AACV,YAAI,EAAE,GAAG,CAAC;AAAA,MACZ;AACA,UAAI,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;AACf,aAAO,IAAI,EAAE,GAAG,CAAC;AAAA,IACnB;AACA,SAAK,IAAI,GAAG,KAAK,EAAE,EAAE,CAAC,KAAI;AACxB,UAAI,KAAK,IAAI,GAAG,KAAK,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;AACzC,UAAI,KAAK,KAAK,KAAK,IAAI,CAAC,IAAI,KAAK,GAAG;AACpC,UAAI,MAAM,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,EAAE;AACpC,UAAI,EAAE,CAAC;AACP,WAAK,IAAI,EAAE,EAAE,CAAC,GAAG,EAAE,CAAC,KAAK,IAAI,EAAE,EAAE,CAAC,IAAI,MAAK,GAAG,IAAI,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC;AACjE,QAAE,CAAC,MAAM,IAAI;AACb,UAAI,EAAE,IAAI,CAAC;AACX,UAAI,EAAE,GAAG,CAAC;AAAA,IACZ;AACA,WAAO,IAAI,EAAE,GAAG,CAAC;AAAA,EACnB;AACA,IAAE,IAAI,SAAU,GAAG;AACjB,WAAO,EAAE,MAAM,CAAC,EAAE;AAAA,EACpB;AACA,IAAE,MAAM,SAAU,GAAG;AACnB,aAAS,IAAI,KAAK,IAAI,KAAK,EAAE,QAAQ,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;AACrG,WAAO,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAAA,EAC9B;AACA,IAAE,KAAK,SAAU,GAAG;AAClB,aAAS,IAAI,KAAK,IAAI,KAAK,EAAE,QAAQ,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;AACrG,WAAO,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAAA,EAC9B;AACA,IAAE,MAAM,SAAU,GAAG;AACnB,aAAS,IAAI,KAAK,IAAI,KAAK,EAAE,QAAQ,EAAE,EAAE,MAAM,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;AACrG,WAAO,IAAI,EAAE,GAAG,KAAK,IAAI,EAAE,CAAC;AAAA,EAC9B;AACA,WAAS,EAAE,GAAG;AACZ,aAAS,IAAI,EAAE,EAAE,SAAS,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM;AAC5F,WAAO,IAAI,EAAE,GAAG,EAAE,CAAC;AAAA,EACrB;AACA,WAAS,EAAE,GAAG,GAAG;AACf,QAAI,IAAI,KAAK;AACb,SAAK;AACL,aAAS,IAAI,EAAE,EAAE,SAAS,GAAG,IAAI,CAAC,GAAG,IAAI,GAAG,IAAI,GAAG,IAAK,GAAE,CAAC,IAAI,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,MAAM,IAAI,EAAE,EAAE,IAAI,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE,EAAE,IAAI,CAAC;AAC9H,WAAO,IAAI,EAAE,GAAG,EAAE,CAAC;AAAA,EACrB;AACA,IAAE,UAAU,SAAS,EAAE,UAAU;AACjC,IAAE,UAAU,QAAQ,EAAE,UAAU;AAChC,IAAE,UAAU,SAAS,EAAE,UAAU;AACjC,QAAM,kBAAkB,MAAM;AAC9B,IAAE,UAAU,MAAM,EAAE,UAAU;AAC9B,IAAE,UAAU,WAAW,EAAE,UAAU;AACnC,IAAE,UAAU,SAAS,EAAE,UAAU;AACjC,IAAE,UAAU,UAAU,EAAE,UAAU;AAClC,IAAE,UAAU,WAAW,EAAE,UAAU;AACnC,IAAE,UAAU,WAAW,EAAE,UAAU;AACnC,IAAE,UAAU,UAAU,EAAE,UAAU;AAClC,IAAE,aAAa;AACf,IAAE,aAAa;AACf,YAAU,kBAAkB,UAAU;AACxC,GAAG,MAAM,OAAO,mBAAmB,cAAc,iBAAiB,OAAO,SAAS,cAAc,OAAO,OAAO,WAAW,cAAc,SAAS,CAAC,CAAC;;;AD3ZlJ,WAAsB;AACtB,kBAA6B;AAC7B,IAAM,OAAO;AACb,IAAM,YAAY;AAsBlB,IAAM,OAAN,MAAW;AAAA,EACT,YAAY,KAAK;AACf,SAAK,MAAM;AAAA,EACb;AAAA,EACA,kBAAkB;AAChB,WAAO,KAAK,OAAO;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,QAAI,KAAK,gBAAgB,GAAG;AAC1B,aAAO,SAAS,KAAK;AAAA,IACvB,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,QAAQ,WAAW;AACjB,WAAO,UAAU,QAAQ,KAAK;AAAA,EAChC;AACF;AAEA,KAAK,kBAAkB,IAAI,KAAK,IAAI;AAGpC,KAAK,qBAAqB,IAAI,KAAK,wBAAwB;AAC3D,KAAK,cAAc,IAAI,KAAK,iBAAiB;AAC7C,KAAK,YAAY,IAAI,KAAK,WAAW;AACrC,IAAM,UAAU;AAkBhB,IAAIC,eAAc;AAClB,SAAS,cAAcC,UAAS;AAC9B,EAAAD,eAAcC;AAChB;AAmBA,SAAS,WAAW,OAAO;AAEzB,SAAO,QAAQ,OAAO;AAAA,IACpB,OAAO;AAAA,EACT,CAAC;AACH;AAkBA,IAAM,YAAY,IAAI,OAAO,qBAAqB;AAElD,SAAS,cAAc;AACrB,SAAO,UAAU;AACnB;AAcA,SAAS,YAAY,UAAU;AAC7B,YAAU,YAAY,QAAQ;AAChC;AACA,SAAS,SAAS,QAAQ,KAAK;AAC7B,MAAI,UAAU,YAAY,SAAS,OAAO;AACxC,UAAM,OAAO,IAAI,IAAI,WAAW;AAChC,cAAU,MAAM,cAAcD,YAAW,MAAM,GAAG,IAAI,GAAG,IAAI;AAAA,EAC/D;AACF;AACA,SAAS,SAAS,QAAQ,KAAK;AAC7B,MAAI,UAAU,YAAY,SAAS,OAAO;AACxC,UAAM,OAAO,IAAI,IAAI,WAAW;AAChC,cAAU,MAAM,cAAcA,YAAW,MAAM,GAAG,IAAI,GAAG,IAAI;AAAA,EAC/D;AACF;AAIA,SAAS,QAAQ,QAAQ,KAAK;AAC5B,MAAI,UAAU,YAAY,SAAS,MAAM;AACvC,UAAM,OAAO,IAAI,IAAI,WAAW;AAChC,cAAU,KAAK,cAAcA,YAAW,MAAM,GAAG,IAAI,GAAG,IAAI;AAAA,EAC9D;AACF;AAIA,SAAS,YAAY,KAAK;AACxB,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO;AAAA,EACT,OAAO;AACL,QAAI;AACF,aAAO,WAAW,GAAG;AAAA,IACvB,SAAS,GAAG;AAEV,aAAO;AAAA,IACT;AAAA,EACF;AACF;AA0BA,SAAS,KAAK,UAAU,oBAAoB;AAG1C,QAAM,UAAU,cAAcA,YAAW,kCAAkC;AAC3E,WAAS,OAAO;AAIhB,QAAM,IAAI,MAAM,OAAO;AACzB;AAOA,SAAS,WAAW,WAAW,SAAS;AACtC,MAAI,CAAC,WAAW;AACd,SAAK;AAAA,EACP;AACF;AAWA,SAAS,YAAY,WAAW,SAAS;AACvC,MAAI,CAAC,WAAW;AACd,SAAK;AAAA,EACP;AACF;AAKA,SAAS,UAAU,KAEnB,aAAa;AACX,SAAO;AACT;AAkBA,IAAM,OAAO;AAAA;AAAA;AAAA;AAAA,EAIX,IAAI;AAAA;AAAA,EAEJ,WAAW;AAAA;AAAA,EAEX,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOT,kBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQlB,mBAAmB;AAAA;AAAA,EAEnB,WAAW;AAAA;AAAA;AAAA;AAAA;AAAA,EAKX,gBAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQhB,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKnB,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKjB,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBpB,qBAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQrB,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBT,cAAc;AAAA;AAAA,EAEd,eAAe;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,UAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQV,aAAa;AAAA;AAAA,EAEb,WAAW;AACb;AAEA,IAAM,iBAAN,cAA6B,cAAc;AAAA;AAAA,EAEzC,YAIA,MAIA,SAAS;AACP,UAAM,MAAM,OAAO;AACnB,SAAK,OAAO;AACZ,SAAK,UAAU;AAIf,SAAK,WAAW,MAAM,GAAG,KAAK,IAAI,WAAW,KAAK,IAAI,MAAM,KAAK,OAAO;AAAA,EAC1E;AACF;AAkBA,IAAM,WAAN,MAAe;AAAA,EACb,cAAc;AACZ,SAAK,UAAU,IAAI,QAAQ,CAAC,SAAS,WAAW;AAC9C,WAAK,UAAU;AACf,WAAK,SAAS;AAAA,IAChB,CAAC;AAAA,EACH;AACF;AAkBA,IAAM,aAAN,MAAiB;AAAA,EACf,YAAY,OAAO,MAAM;AACvB,SAAK,OAAO;AACZ,SAAK,OAAO;AACZ,SAAK,UAAU,oBAAI,IAAI;AACvB,SAAK,QAAQ,IAAI,iBAAiB,UAAU,KAAK,EAAE;AAAA,EACrD;AACF;AAKA,IAAM,+BAAN,MAAmC;AAAA,EACjC,WAAW;AACT,WAAO,QAAQ,QAAQ,IAAI;AAAA,EAC7B;AAAA,EACA,kBAAkB;AAAA,EAAC;AAAA,EACnB,MAAM,YAAY,gBAAgB;AAEhC,eAAW,iBAAiB,MAAM,eAAe,KAAK,eAAe,CAAC;AAAA,EACxE;AAAA,EACA,WAAW;AAAA,EAAC;AACd;AAKA,IAAM,kCAAN,MAAsC;AAAA,EACpC,YAAY,OAAO;AACjB,SAAK,QAAQ;AAMb,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,WAAW;AACT,WAAO,QAAQ,QAAQ,KAAK,KAAK;AAAA,EACnC;AAAA,EACA,kBAAkB;AAAA,EAAC;AAAA,EACnB,MAAM,YAAY,gBAAgB;AAChC,SAAK,iBAAiB;AAEtB,eAAW,iBAAiB,MAAM,eAAe,KAAK,MAAM,IAAI,CAAC;AAAA,EACnE;AAAA,EACA,WAAW;AACT,SAAK,iBAAiB;AAAA,EACxB;AACF;AACA,IAAM,kCAAN,MAAsC;AAAA,EACpC,YAAY,cAAc;AACxB,SAAK,eAAe;AAEpB,SAAK,cAAc,KAAK;AAKxB,SAAK,eAAe;AACpB,SAAK,eAAe;AACpB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,MAAM,YAAY,gBAAgB;AAChC,QAAI,cAAc,KAAK;AAEvB,UAAM,wBAAwB,UAAQ;AACpC,UAAI,KAAK,iBAAiB,aAAa;AACrC,sBAAc,KAAK;AACnB,eAAO,eAAe,IAAI;AAAA,MAC5B,OAAO;AACL,eAAO,QAAQ,QAAQ;AAAA,MACzB;AAAA,IACF;AAGA,QAAI,YAAY,IAAI,SAAS;AAC7B,SAAK,gBAAgB,MAAM;AACzB,WAAK;AACL,WAAK,cAAc,KAAK,QAAQ;AAChC,gBAAU,QAAQ;AAClB,kBAAY,IAAI,SAAS;AACzB,iBAAW,iBAAiB,MAAM,sBAAsB,KAAK,WAAW,CAAC;AAAA,IAC3E;AACA,UAAM,iBAAiB,MAAM;AAC3B,YAAM,sBAAsB;AAC5B,iBAAW,iBAAiB,MAAY;AACtC,cAAM,oBAAoB;AAC1B,cAAM,sBAAsB,KAAK,WAAW;AAAA,MAC9C,EAAC;AAAA,IACH;AACA,UAAM,eAAe,UAAQ;AAC3B,eAAS,mCAAmC,eAAe;AAC3D,WAAK,OAAO;AACZ,WAAK,KAAK,qBAAqB,KAAK,aAAa;AACjD,qBAAe;AAAA,IACjB;AACA,SAAK,aAAa,OAAO,UAAQ,aAAa,IAAI,CAAC;AAInD,eAAW,MAAM;AACf,UAAI,CAAC,KAAK,MAAM;AACd,cAAM,OAAO,KAAK,aAAa,aAAa;AAAA,UAC1C,UAAU;AAAA,QACZ,CAAC;AACD,YAAI,MAAM;AACR,uBAAa,IAAI;AAAA,QACnB,OAAO;AAEL,mBAAS,mCAAmC,uBAAuB;AACnE,oBAAU,QAAQ;AAClB,sBAAY,IAAI,SAAS;AAAA,QAC3B;AAAA,MACF;AAAA,IACF,GAAG,CAAC;AACJ,mBAAe;AAAA,EACjB;AAAA,EACA,WAAW;AAIT,UAAM,sBAAsB,KAAK;AACjC,UAAM,eAAe,KAAK;AAC1B,SAAK,eAAe;AACpB,QAAI,CAAC,KAAK,MAAM;AACd,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC7B;AACA,WAAO,KAAK,KAAK,SAAS,YAAY,EAAE,KAAK,eAAa;AAIxD,UAAI,KAAK,iBAAiB,qBAAqB;AAC7C,iBAAS,mCAAmC,uCAAuC;AACnF,eAAO,KAAK,SAAS;AAAA,MACvB,OAAO;AACL,YAAI,WAAW;AACb,qBAAW,OAAO,UAAU,gBAAgB,QAAQ;AACpD,iBAAO,IAAI,WAAW,UAAU,aAAa,KAAK,WAAW;AAAA,QAC/D,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,kBAAkB;AAChB,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,WAAW;AACT,QAAI,KAAK,MAAM;AACb,WAAK,KAAK,wBAAwB,KAAK,aAAa;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AACR,UAAM,aAAa,KAAK,QAAQ,KAAK,KAAK,OAAO;AACjD,eAAW,eAAe,QAAQ,OAAO,eAAe,QAAQ;AAChE,WAAO,IAAI,KAAK,UAAU;AAAA,EAC5B;AACF;AAQA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,cAAc,UAAU,kBAAkB;AACpD,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,mBAAmB;AACxB,SAAK,OAAO;AACZ,SAAK,OAAO,KAAK;AACjB,SAAK,WAAW,oBAAI,IAAI;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe;AACb,QAAI,KAAK,kBAAkB;AACzB,aAAO,KAAK,iBAAiB;AAAA,IAC/B,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,IAAI,UAAU;AACZ,SAAK,SAAS,IAAI,mBAAmB,KAAK,YAAY;AAEtD,UAAM,uBAAuB,KAAK,aAAa;AAC/C,QAAI,sBAAsB;AACxB,WAAK,SAAS,IAAI,iBAAiB,oBAAoB;AAAA,IACzD;AACA,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS,IAAI,kCAAkC,KAAK,QAAQ;AAAA,IACnE;AACA,WAAO,KAAK;AAAA,EACd;AACF;AAMA,IAAM,oCAAN,MAAwC;AAAA,EACtC,YAAY,cAAc,UAAU,kBAAkB;AACpD,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EACA,WAAW;AACT,WAAO,QAAQ,QAAQ,IAAI,gBAAgB,KAAK,cAAc,KAAK,UAAU,KAAK,gBAAgB,CAAC;AAAA,EACrG;AAAA,EACA,MAAM,YAAY,gBAAgB;AAEhC,eAAW,iBAAiB,MAAM,eAAe,KAAK,WAAW,CAAC;AAAA,EACpE;AAAA,EACA,WAAW;AAAA,EAAC;AAAA,EACZ,kBAAkB;AAAA,EAAC;AACrB;AACA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,OAAO;AACjB,SAAK,QAAQ;AACb,SAAK,OAAO;AACZ,SAAK,UAAU,oBAAI,IAAI;AACvB,QAAI,SAAS,MAAM,SAAS,GAAG;AAC7B,WAAK,QAAQ,IAAI,uBAAuB,KAAK,KAAK;AAAA,IACpD;AAAA,EACF;AACF;AACA,IAAM,gCAAN,MAAoC;AAAA,EAClC,YAAY,kBAAkB;AAC5B,SAAK,mBAAmB;AACxB,SAAK,eAAe;AACpB,SAAK,WAAW;AAChB,SAAK,sBAAsB;AAAA,EAC7B;AAAA,EACA,MAAM,YAAY,gBAAgB;AAChC,UAAM,iBAAiB,iBAAe;AACpC,UAAI,YAAY,SAAS,MAAM;AAC7B,iBAAS,iCAAiC,0EAA0E,YAAY,MAAM,OAAO,EAAE;AAAA,MACjJ;AACA,YAAM,eAAe,YAAY,UAAU,KAAK;AAChD,WAAK,sBAAsB,YAAY;AACvC,eAAS,iCAAiC,YAAY,eAAe,QAAQ,UAAU,SAAS;AAChG,aAAO,eAAe,eAAe,YAAY,KAAK,IAAI,QAAQ,QAAQ;AAAA,IAC5E;AACA,SAAK,gBAAgB,iBAAe;AAClC,iBAAW,iBAAiB,MAAM,eAAe,WAAW,CAAC;AAAA,IAC/D;AACA,UAAM,mBAAmB,cAAY;AACnC,eAAS,iCAAiC,mBAAmB;AAC7D,WAAK,WAAW;AAChB,WAAK,SAAS,iBAAiB,KAAK,aAAa;AAAA,IACnD;AACA,SAAK,iBAAiB,OAAO,cAAY,iBAAiB,QAAQ,CAAC;AAGnE,eAAW,MAAM;AACf,UAAI,CAAC,KAAK,UAAU;AAClB,cAAM,WAAW,KAAK,iBAAiB,aAAa;AAAA,UAClD,UAAU;AAAA,QACZ,CAAC;AACD,YAAI,UAAU;AACZ,2BAAiB,QAAQ;AAAA,QAC3B,OAAO;AAEL,mBAAS,iCAAiC,2BAA2B;AAAA,QACvE;AAAA,MACF;AAAA,IACF,GAAG,CAAC;AAAA,EACN;AAAA,EACA,WAAW;AACT,UAAM,eAAe,KAAK;AAC1B,SAAK,eAAe;AACpB,QAAI,CAAC,KAAK,UAAU;AAClB,aAAO,QAAQ,QAAQ,IAAI;AAAA,IAC7B;AACA,WAAO,KAAK,SAAS,SAAS,YAAY,EAAE,KAAK,iBAAe;AAC9D,UAAI,aAAa;AACf,mBAAW,OAAO,YAAY,UAAU,QAAQ;AAChD,aAAK,sBAAsB,YAAY;AACvC,eAAO,IAAI,cAAc,YAAY,KAAK;AAAA,MAC5C,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,kBAAkB;AAChB,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,WAAW;AACT,QAAI,KAAK,UAAU;AACjB,WAAK,SAAS,oBAAoB,KAAK,aAAa;AAAA,IACtD;AAAA,EACF;AACF;AAKA,IAAM,6BAAN,MAAiC;AAAA,EAC/B,WAAW;AACT,WAAO,QAAQ,QAAQ,IAAI,cAAc,EAAE,CAAC;AAAA,EAC9C;AAAA,EACA,kBAAkB;AAAA,EAAC;AAAA,EACnB,MAAM,YAAY,gBAAgB;AAAA,EAAC;AAAA,EACnC,WAAW;AAAA,EAAC;AACd;AAKA,SAAS,4BAA4BE,cAAa;AAChD,MAAI,CAACA,cAAa;AAChB,WAAO,IAAI,6BAA6B;AAAA,EAC1C;AACA,UAAQA,aAAY,MAAM,GAAG;AAAA,IAC3B,KAAK;AACH,aAAO,IAAI,kCAAkCA,aAAY,cAAc,KAAK,KAAKA,aAAY,UAAU,KAAK,MAAMA,aAAY,kBAAkB,KAAK,IAAI;AAAA,IAC3J,KAAK;AACH,aAAOA,aAAY,QAAQ;AAAA,IAC7B;AACE,YAAM,IAAI,eAAe,KAAK,kBAAkB,mEAAmE;AAAA,EACvH;AACF;AAuBA,SAAS,YAAY,QAAQ;AAC3B,SAAO,cAAc,MAAM;AAC7B;AAwBA,IAAM,SAAN,MAAa;AAAA,EACX,OAAO,QAAQ;AAEb,UAAM,QAAQ;AAEd,UAAM,cAAc,KAAK,MAAM,MAAM,MAAM,MAAM,IAAI,MAAM;AAC3D,QAAI,SAAS;AACb,UAAM,eAAe;AACrB,WAAO,OAAO,SAAS,cAAc;AACnC,YAAM,QAAQ,YAAY,EAAE;AAC5B,eAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AAGrC,YAAI,OAAO,SAAS,gBAAgB,MAAM,CAAC,IAAI,aAAa;AAC1D,oBAAU,MAAM,OAAO,MAAM,CAAC,IAAI,MAAM,MAAM;AAAA,QAChD;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AACA,SAAS,oBAAoB,MAAM,OAAO;AACxC,MAAI,OAAO,OAAO;AAChB,WAAO;AAAA,EACT;AACA,MAAI,OAAO,OAAO;AAChB,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEA,SAAS,YAAY,MAAM,OAAO,YAAY;AAC5C,MAAI,KAAK,WAAW,MAAM,QAAQ;AAChC,WAAO;AAAA,EACT;AACA,SAAO,KAAK,MAAM,CAAC,OAAO,UAAU,WAAW,OAAO,MAAM,KAAK,CAAC,CAAC;AACrE;AAKA,SAAS,mBAAmB,GAAG;AAE7B,SAAO,IAAI;AACb;AAmBA,IAAM,cAAc;AAEpB,IAAM,cAAc;AAepB,IAAM,YAAN,MAAM,WAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYd,YAIA,SAIA,aAAa;AACX,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,QAAI,cAAc,GAAG;AACnB,YAAM,IAAI,eAAe,KAAK,kBAAkB,yCAAyC,WAAW;AAAA,IACtG;AACA,QAAI,eAAe,KAAK;AACtB,YAAM,IAAI,eAAe,KAAK,kBAAkB,yCAAyC,WAAW;AAAA,IACtG;AACA,QAAI,UAAU,aAAa;AACzB,YAAM,IAAI,eAAe,KAAK,kBAAkB,qCAAqC,OAAO;AAAA,IAC9F;AAEA,QAAI,WAAW,cAAc;AAC3B,YAAM,IAAI,eAAe,KAAK,kBAAkB,qCAAqC,OAAO;AAAA,IAC9F;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,MAAM;AACX,WAAO,WAAU,WAAW,KAAK,IAAI,CAAC;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,SAAS,MAAM;AACpB,WAAO,WAAU,WAAW,KAAK,QAAQ,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,OAAO,WAAW,cAAc;AAC9B,UAAM,UAAU,KAAK,MAAM,eAAe,GAAI;AAC9C,UAAM,QAAQ,KAAK,OAAO,eAAe,UAAU,OAAQ,WAAW;AACtE,WAAO,IAAI,WAAU,SAAS,KAAK;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,SAAS;AACP,WAAO,IAAI,KAAK,KAAK,SAAS,CAAC;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,WAAW;AACT,WAAO,KAAK,UAAU,MAAO,KAAK,cAAc;AAAA,EAClD;AAAA,EACA,WAAW,OAAO;AAChB,QAAI,KAAK,YAAY,MAAM,SAAS;AAClC,aAAO,oBAAoB,KAAK,aAAa,MAAM,WAAW;AAAA,IAChE;AACA,WAAO,oBAAoB,KAAK,SAAS,MAAM,OAAO;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,OAAO;AACb,WAAO,MAAM,YAAY,KAAK,WAAW,MAAM,gBAAgB,KAAK;AAAA,EACtE;AAAA;AAAA,EAEA,WAAW;AACT,WAAO,uBAAuB,KAAK,UAAU,mBAAmB,KAAK,cAAc;AAAA,EACrF;AAAA;AAAA,EAEA,SAAS;AACP,WAAO;AAAA,MACL,SAAS,KAAK;AAAA,MACd,aAAa,KAAK;AAAA,IACpB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU;AAQR,UAAM,kBAAkB,KAAK,UAAU;AAGvC,UAAM,mBAAmB,OAAO,eAAe,EAAE,SAAS,IAAI,GAAG;AACjE,UAAM,uBAAuB,OAAO,KAAK,WAAW,EAAE,SAAS,GAAG,GAAG;AACrE,WAAO,mBAAmB,MAAM;AAAA,EAClC;AACF;AAsBA,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EACpB,YAAY,WAAW;AACrB,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,OAAO,cAAc,OAAO;AAC1B,WAAO,IAAI,iBAAgB,KAAK;AAAA,EAClC;AAAA,EACA,OAAO,MAAM;AACX,WAAO,IAAI,iBAAgB,IAAI,UAAU,GAAG,CAAC,CAAC;AAAA,EAChD;AAAA,EACA,OAAO,MAAM;AACX,WAAO,IAAI,iBAAgB,IAAI,UAAU,cAAc,MAAM,CAAC,CAAC;AAAA,EACjE;AAAA,EACA,UAAU,OAAO;AACf,WAAO,KAAK,UAAU,WAAW,MAAM,SAAS;AAAA,EAClD;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,KAAK,UAAU,QAAQ,MAAM,SAAS;AAAA,EAC/C;AAAA;AAAA,EAEA,iBAAiB;AAEf,WAAO,KAAK,UAAU,UAAU,MAAM,KAAK,UAAU,cAAc;AAAA,EACrE;AAAA,EACA,WAAW;AACT,WAAO,qBAAqB,KAAK,UAAU,SAAS,IAAI;AAAA,EAC1D;AAAA,EACA,cAAc;AACZ,WAAO,KAAK;AAAA,EACd;AACF;AAkBA,IAAM,oBAAoB;AAI1B,IAAM,WAAN,MAAM,UAAS;AAAA,EACb,YAAY,UAAU,QAAQ,QAAQ;AACpC,QAAI,WAAW,QAAW;AACxB,eAAS;AAAA,IACX,WAAW,SAAS,SAAS,QAAQ;AACnC,WAAK;AAAA,IACP;AACA,QAAI,WAAW,QAAW;AACxB,eAAS,SAAS,SAAS;AAAA,IAC7B,WAAW,SAAS,SAAS,SAAS,QAAQ;AAC5C,WAAK;AAAA,IACP;AACA,SAAK,WAAW;AAChB,SAAK,SAAS;AACd,SAAK,MAAM;AAAA,EACb;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACd;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,UAAS,WAAW,MAAM,KAAK,MAAM;AAAA,EAC9C;AAAA,EACA,MAAM,YAAY;AAChB,UAAM,WAAW,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,MAAM,CAAC;AAC9D,QAAI,sBAAsB,WAAU;AAClC,iBAAW,QAAQ,aAAW;AAC5B,iBAAS,KAAK,OAAO;AAAA,MACvB,CAAC;AAAA,IACH,OAAO;AACL,eAAS,KAAK,UAAU;AAAA,IAC1B;AACA,WAAO,KAAK,UAAU,QAAQ;AAAA,EAChC;AAAA;AAAA,EAEA,QAAQ;AACN,WAAO,KAAK,SAAS,KAAK;AAAA,EAC5B;AAAA,EACA,SAAS,MAAM;AACb,WAAO,SAAS,SAAY,IAAI;AAChC,WAAO,KAAK,UAAU,KAAK,UAAU,KAAK,SAAS,MAAM,KAAK,SAAS,IAAI;AAAA,EAC7E;AAAA,EACA,UAAU;AACR,WAAO,KAAK,UAAU,KAAK,UAAU,KAAK,QAAQ,KAAK,SAAS,CAAC;AAAA,EACnE;AAAA,EACA,eAAe;AACb,WAAO,KAAK,SAAS,KAAK,MAAM;AAAA,EAClC;AAAA,EACA,cAAc;AACZ,WAAO,KAAK,IAAI,KAAK,SAAS,CAAC;AAAA,EACjC;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK,SAAS,KAAK,SAAS,KAAK;AAAA,EAC1C;AAAA,EACA,UAAU;AACR,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EACA,WAAW,OAAO;AAChB,QAAI,MAAM,SAAS,KAAK,QAAQ;AAC9B,aAAO;AAAA,IACT;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAI,KAAK,IAAI,CAAC,MAAM,MAAM,IAAI,CAAC,GAAG;AAChC,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,oBAAoB,gBAAgB;AAClC,QAAI,KAAK,SAAS,MAAM,eAAe,QAAQ;AAC7C,aAAO;AAAA,IACT;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,UAAI,KAAK,IAAI,CAAC,MAAM,eAAe,IAAI,CAAC,GAAG;AACzC,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,IAAI;AACV,aAAS,IAAI,KAAK,QAAQ,MAAM,KAAK,MAAM,GAAG,IAAI,KAAK,KAAK;AAC1D,SAAG,KAAK,SAAS,CAAC,CAAC;AAAA,IACrB;AAAA,EACF;AAAA,EACA,UAAU;AACR,WAAO,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,MAAM,CAAC;AAAA,EACtD;AAAA,EACA,OAAO,WAAW,IAAI,IAAI;AACxB,UAAM,MAAM,KAAK,IAAI,GAAG,QAAQ,GAAG,MAAM;AACzC,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK;AAC5B,YAAM,OAAO,GAAG,IAAI,CAAC;AACrB,YAAM,QAAQ,GAAG,IAAI,CAAC;AACtB,UAAI,OAAO,OAAO;AAChB,eAAO;AAAA,MACT;AACA,UAAI,OAAO,OAAO;AAChB,eAAO;AAAA,MACT;AAAA,IACF;AACA,QAAI,GAAG,SAAS,GAAG,QAAQ;AACzB,aAAO;AAAA,IACT;AACA,QAAI,GAAG,SAAS,GAAG,QAAQ;AACzB,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AACF;AAOA,IAAM,eAAN,MAAM,sBAAqB,SAAS;AAAA,EAClC,UAAU,UAAU,QAAQ,QAAQ;AAClC,WAAO,IAAI,cAAa,UAAU,QAAQ,MAAM;AAAA,EAClD;AAAA,EACA,kBAAkB;AAIhB,WAAO,KAAK,QAAQ,EAAE,KAAK,GAAG;AAAA,EAChC;AAAA,EACA,WAAW;AACT,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,qBAAqB;AACnB,WAAO,KAAK,QAAQ,EAAE,IAAI,kBAAkB,EAAE,KAAK,GAAG;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,cAAc,gBAAgB;AAInC,UAAM,WAAW,CAAC;AAClB,eAAW,QAAQ,gBAAgB;AACjC,UAAI,KAAK,QAAQ,IAAI,KAAK,GAAG;AAC3B,cAAM,IAAI,eAAe,KAAK,kBAAkB,oBAAoB,IAAI,uCAAuC;AAAA,MACjH;AAEA,eAAS,KAAK,GAAG,KAAK,MAAM,GAAG,EAAE,OAAO,aAAW,QAAQ,SAAS,CAAC,CAAC;AAAA,IACxE;AACA,WAAO,IAAI,cAAa,QAAQ;AAAA,EAClC;AAAA,EACA,OAAO,YAAY;AACjB,WAAO,IAAI,cAAa,CAAC,CAAC;AAAA,EAC5B;AACF;AACA,IAAM,mBAAmB;AAKzB,IAAM,cAAN,MAAM,qBAAoB,SAAS;AAAA,EACjC,UAAU,UAAU,QAAQ,QAAQ;AAClC,WAAO,IAAI,aAAY,UAAU,QAAQ,MAAM;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,kBAAkB,SAAS;AAChC,WAAO,iBAAiB,KAAK,OAAO;AAAA,EACtC;AAAA,EACA,kBAAkB;AAChB,WAAO,KAAK,QAAQ,EAAE,IAAI,SAAO;AAC/B,YAAM,IAAI,QAAQ,OAAO,MAAM,EAAE,QAAQ,MAAM,KAAK;AACpD,UAAI,CAAC,aAAY,kBAAkB,GAAG,GAAG;AACvC,cAAM,MAAM,MAAM;AAAA,MACpB;AACA,aAAO;AAAA,IACT,CAAC,EAAE,KAAK,GAAG;AAAA,EACb;AAAA,EACA,WAAW;AACT,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa;AACX,WAAO,KAAK,WAAW,KAAK,KAAK,IAAI,CAAC,MAAM;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,WAAW;AAChB,WAAO,IAAI,aAAY,CAAC,iBAAiB,CAAC;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,OAAO,iBAAiB,MAAM;AAC5B,UAAM,WAAW,CAAC;AAClB,QAAI,UAAU;AACd,QAAI,IAAI;AACR,UAAM,oBAAoB,MAAM;AAC9B,UAAI,QAAQ,WAAW,GAAG;AACxB,cAAM,IAAI,eAAe,KAAK,kBAAkB,uBAAuB,IAAI,2EAAgF;AAAA,MAC7J;AACA,eAAS,KAAK,OAAO;AACrB,gBAAU;AAAA,IACZ;AACA,QAAI,cAAc;AAClB,WAAO,IAAI,KAAK,QAAQ;AACtB,YAAM,IAAI,KAAK,CAAC;AAChB,UAAI,MAAM,MAAM;AACd,YAAI,IAAI,MAAM,KAAK,QAAQ;AACzB,gBAAM,IAAI,eAAe,KAAK,kBAAkB,yCAAyC,IAAI;AAAA,QAC/F;AACA,cAAM,OAAO,KAAK,IAAI,CAAC;AACvB,YAAI,EAAE,SAAS,QAAQ,SAAS,OAAO,SAAS,MAAM;AACpD,gBAAM,IAAI,eAAe,KAAK,kBAAkB,uCAAuC,IAAI;AAAA,QAC7F;AACA,mBAAW;AACX,aAAK;AAAA,MACP,WAAW,MAAM,KAAK;AACpB,sBAAc,CAAC;AACf;AAAA,MACF,WAAW,MAAM,OAAO,CAAC,aAAa;AACpC,0BAAkB;AAClB;AAAA,MACF,OAAO;AACL,mBAAW;AACX;AAAA,MACF;AAAA,IACF;AACA,sBAAkB;AAClB,QAAI,aAAa;AACf,YAAM,IAAI,eAAe,KAAK,kBAAkB,6BAA6B,IAAI;AAAA,IACnF;AACA,WAAO,IAAI,aAAY,QAAQ;AAAA,EACjC;AAAA,EACA,OAAO,YAAY;AACjB,WAAO,IAAI,aAAY,CAAC,CAAC;AAAA,EAC3B;AACF;AAqBA,IAAM,cAAN,MAAM,aAAY;AAAA,EAChB,YAAY,MAAM;AAChB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,OAAO,SAAS,MAAM;AACpB,WAAO,IAAI,aAAY,aAAa,WAAW,IAAI,CAAC;AAAA,EACtD;AAAA,EACA,OAAO,SAASC,OAAM;AACpB,WAAO,IAAI,aAAY,aAAa,WAAWA,KAAI,EAAE,SAAS,CAAC,CAAC;AAAA,EAClE;AAAA,EACA,OAAO,QAAQ;AACb,WAAO,IAAI,aAAY,aAAa,UAAU,CAAC;AAAA,EACjD;AAAA,EACA,IAAI,kBAAkB;AACpB,WAAO,KAAK,KAAK,QAAQ,EAAE,YAAY;AAAA,EACzC;AAAA;AAAA,EAEA,gBAAgB,cAAc;AAC5B,WAAO,KAAK,KAAK,UAAU,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,SAAS,CAAC,MAAM;AAAA,EAC1E;AAAA;AAAA,EAEA,qBAAqB;AACnB,WAAO,KAAK,KAAK,IAAI,KAAK,KAAK,SAAS,CAAC;AAAA,EAC3C;AAAA;AAAA,EAEA,oBAAoB;AAClB,WAAO,KAAK,KAAK,QAAQ;AAAA,EAC3B;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,UAAU,QAAQ,aAAa,WAAW,KAAK,MAAM,MAAM,IAAI,MAAM;AAAA,EAC9E;AAAA,EACA,WAAW;AACT,WAAO,KAAK,KAAK,SAAS;AAAA,EAC5B;AAAA,EACA,OAAO,WAAW,IAAI,IAAI;AACxB,WAAO,aAAa,WAAW,GAAG,MAAM,GAAG,IAAI;AAAA,EACjD;AAAA,EACA,OAAO,cAAc,MAAM;AACzB,WAAO,KAAK,SAAS,MAAM;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,aAAa,UAAU;AAC5B,WAAO,IAAI,aAAY,IAAI,aAAa,SAAS,MAAM,CAAC,CAAC;AAAA,EAC3D;AACF;AAsBA,IAAM,2BAA2B;AAKjC,IAAM,0BAA0B;AAYhC,IAAM,aAAN,MAAiB;AAAA,EACf,YAKA,SACAC,kBACA,QACA,YAAY;AACV,SAAK,UAAU;AACf,SAAK,kBAAkBA;AACvB,SAAK,SAAS;AACd,SAAK,aAAa;AAAA,EACpB;AACF;AAEA,WAAW,aAAa;AAExB,SAAS,0BAA0B,YAAY;AAC7C,SAAO,WAAW,OAAO;AAAA,IAAK,OAAK,EAAE,SAAS;AAAA;AAAA,EAA0B;AAC1E;AAEA,SAAS,iCAAiC,YAAY;AACpD,SAAO,WAAW,OAAO;AAAA,IAAO,OAAK,EAAE,SAAS;AAAA;AAAA,EAA0B;AAC5E;AAMA,SAAS,sBAAsB,YAAY;AACzC,QAAM,sBAAsB,iCAAiC,UAAU;AACvE,SAAO,oBAAoB,WAAW,IAAI,IAA8B,oBAAoB,oBAAoB,SAAS,CAAC,EAAE;AAC9H;AAKA,SAAS,6BAA6B,MAAM,OAAO;AACjD,MAAI,MAAM,oBAAoB,KAAK,iBAAiB,MAAM,eAAe;AACzE,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,WAAS,IAAI,GAAG,IAAI,KAAK,IAAI,KAAK,OAAO,QAAQ,MAAM,OAAO,MAAM,GAAG,EAAE,GAAG;AAC1E,UAAM,uBAAuB,KAAK,OAAO,CAAC,GAAG,MAAM,OAAO,CAAC,CAAC;AAC5D,QAAI,QAAQ,GAAG;AACb,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,oBAAoB,KAAK,OAAO,QAAQ,MAAM,OAAO,MAAM;AACpE;AAEA,SAAS,mBAAmB,YAAY;AACtC,SAAO,MAAM,WAAW,OAAO,OAAO,WAAW,eAAe,MAAM,WAAW,OAAO,IAAI,OAAK,GAAG,EAAE,SAAS,IAAI,EAAE,IAAI,EAAE,EAAE,KAAK,GAAG,CAAC;AACxI;AAEA,IAAM,eAAN,MAAmB;AAAA,EACjB,YACA,WACA,MAAM;AACJ,SAAK,YAAY;AACjB,SAAK,OAAO;AAAA,EACd;AACF;AACA,SAAS,uBAAuB,MAAM,OAAO;AAC3C,QAAM,MAAM,YAAY,WAAW,KAAK,WAAW,MAAM,SAAS;AAClE,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,SAAO,oBAAoB,KAAK,MAAM,MAAM,IAAI;AAClD;AAKA,IAAM,aAAN,MAAM,YAAW;AAAA,EACf,YAIA,gBACA,QAAQ;AACN,SAAK,iBAAiB;AACtB,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA,EAEA,OAAO,QAAQ;AACb,WAAO,IAAI,YAAW,yBAAyB,YAAY,IAAI,CAAC;AAAA,EAClE;AACF;AAKA,SAAS,oCAAoC,UAAU,gBAAgB;AAOrE,QAAM,mBAAmB,SAAS,YAAY,EAAE;AAChD,QAAM,iBAAiB,SAAS,YAAY,EAAE,cAAc;AAC5D,QAAM,YAAY,gBAAgB,cAAc,mBAAmB,MAAM,IAAI,UAAU,mBAAmB,GAAG,CAAC,IAAI,IAAI,UAAU,kBAAkB,cAAc,CAAC;AACjK,SAAO,IAAI,YAAY,WAAW,YAAY,MAAM,GAAG,cAAc;AACvE;AAEA,SAAS,2BAA2B,UAAU;AAC5C,SAAO,IAAI,YAAY,SAAS,UAAU,SAAS,KAAK,wBAAwB;AAClF;AAKA,IAAM,cAAN,MAAM,aAAY;AAAA,EAChB,YAKA,UAKA,aAIA,gBAAgB;AACd,SAAK,WAAW;AAChB,SAAK,cAAc;AACnB,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA,EAEA,OAAO,MAAM;AACX,WAAO,IAAI,aAAY,gBAAgB,IAAI,GAAG,YAAY,MAAM,GAAG,wBAAwB;AAAA,EAC7F;AAAA;AAAA,EAEA,OAAO,MAAM;AACX,WAAO,IAAI,aAAY,gBAAgB,IAAI,GAAG,YAAY,MAAM,GAAG,wBAAwB;AAAA,EAC7F;AACF;AACA,SAAS,sBAAsB,MAAM,OAAO;AAC1C,MAAI,MAAM,KAAK,SAAS,UAAU,MAAM,QAAQ;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,QAAM,YAAY,WAAW,KAAK,aAAa,MAAM,WAAW;AAChE,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,SAAO,oBAAoB,KAAK,gBAAgB,MAAM,cAAc;AACtE;AAkBA,IAAM,+BAA+B;AASrC,IAAM,yBAAN,MAA6B;AAAA,EAC3B,cAAc;AACZ,SAAK,uBAAuB,CAAC;AAAA,EAC/B;AAAA,EACA,uBAAuB,UAAU;AAC/B,SAAK,qBAAqB,KAAK,QAAQ;AAAA,EACzC;AAAA,EACA,wBAAwB;AACtB,SAAK,qBAAqB,QAAQ,cAAY,SAAS,CAAC;AAAA,EAC1D;AACF;AA4BA,SAAe,yBAAyB,KAAK;AAAA;AAC3C,QAAI,IAAI,SAAS,KAAK,uBAAuB,IAAI,YAAY,8BAA8B;AACzF,eAAS,cAAc,iCAAiC;AAAA,IAC1D,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AA+BA,IAAM,qBAAN,MAAM,oBAAmB;AAAA,EACvB,YAAY,UAAU;AAGpB,SAAK,eAAe;AACpB,SAAK,gBAAgB;AAErB,SAAK,SAAS;AACd,SAAK,QAAQ;AACb,SAAK,SAAS;AAGd,SAAK,mBAAmB;AACxB,aAAS,WAAS;AAChB,WAAK,SAAS;AACd,WAAK,SAAS;AACd,UAAI,KAAK,cAAc;AAGrB,aAAK,aAAa,KAAK;AAAA,MACzB;AAAA,IACF,GAAG,WAAS;AACV,WAAK,SAAS;AACd,WAAK,QAAQ;AACb,UAAI,KAAK,eAAe;AACtB,aAAK,cAAc,KAAK;AAAA,MAC1B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,MAAM,IAAI;AACR,WAAO,KAAK,KAAK,QAAW,EAAE;AAAA,EAChC;AAAA,EACA,KAAK,QAAQ,SAAS;AACpB,QAAI,KAAK,kBAAkB;AACzB,WAAK;AAAA,IACP;AACA,SAAK,mBAAmB;AACxB,QAAI,KAAK,QAAQ;AACf,UAAI,CAAC,KAAK,OAAO;AACf,eAAO,KAAK,YAAY,QAAQ,KAAK,MAAM;AAAA,MAC7C,OAAO;AACL,eAAO,KAAK,YAAY,SAAS,KAAK,KAAK;AAAA,MAC7C;AAAA,IACF,OAAO;AACL,aAAO,IAAI,oBAAmB,CAAC,SAAS,WAAW;AACjD,aAAK,eAAe,WAAS;AAC3B,eAAK,YAAY,QAAQ,KAAK,EAAE,KAAK,SAAS,MAAM;AAAA,QACtD;AACA,aAAK,gBAAgB,WAAS;AAC5B,eAAK,YAAY,SAAS,KAAK,EAAE,KAAK,SAAS,MAAM;AAAA,QACvD;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,YAAY;AACV,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,KAAK,SAAS,MAAM;AAAA,IAC3B,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,IAAI;AACnB,QAAI;AACF,YAAM,SAAS,GAAG;AAClB,UAAI,kBAAkB,qBAAoB;AACxC,eAAO;AAAA,MACT,OAAO;AACL,eAAO,oBAAmB,QAAQ,MAAM;AAAA,MAC1C;AAAA,IACF,SAAS,GAAG;AACV,aAAO,oBAAmB,OAAO,CAAC;AAAA,IACpC;AAAA,EACF;AAAA,EACA,YAAY,QAAQ,OAAO;AACzB,QAAI,QAAQ;AACV,aAAO,KAAK,iBAAiB,MAAM,OAAO,KAAK,CAAC;AAAA,IAClD,OAAO;AAEL,aAAO,oBAAmB,QAAQ,KAAK;AAAA,IACzC;AAAA,EACF;AAAA,EACA,YAAY,SAAS,OAAO;AAC1B,QAAI,SAAS;AACX,aAAO,KAAK,iBAAiB,MAAM,QAAQ,KAAK,CAAC;AAAA,IACnD,OAAO;AACL,aAAO,oBAAmB,OAAO,KAAK;AAAA,IACxC;AAAA,EACF;AAAA,EACA,OAAO,QAAQ,QAAQ;AACrB,WAAO,IAAI,oBAAmB,CAAC,SAAS,WAAW;AACjD,cAAQ,MAAM;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EACA,OAAO,OAAO,OAAO;AACnB,WAAO,IAAI,oBAAmB,CAAC,SAAS,WAAW;AACjD,aAAO,KAAK;AAAA,IACd,CAAC;AAAA,EACH;AAAA,EACA,OAAO,QAGP,KAAK;AACH,WAAO,IAAI,oBAAmB,CAAC,SAAS,WAAW;AACjD,UAAI,gBAAgB;AACpB,UAAI,gBAAgB;AACpB,UAAI,OAAO;AACX,UAAI,QAAQ,aAAW;AACrB,UAAE;AACF,gBAAQ,KAAK,MAAM;AACjB,YAAE;AACF,cAAI,QAAQ,kBAAkB,eAAe;AAC3C,oBAAQ;AAAA,UACV;AAAA,QACF,GAAG,SAAO,OAAO,GAAG,CAAC;AAAA,MACvB,CAAC;AACD,aAAO;AACP,UAAI,kBAAkB,eAAe;AACnC,gBAAQ;AAAA,MACV;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,GAAG,YAAY;AACpB,QAAI,IAAI,oBAAmB,QAAQ,KAAK;AACxC,eAAW,aAAa,YAAY;AAClC,UAAI,EAAE,KAAK,YAAU;AACnB,YAAI,QAAQ;AACV,iBAAO,oBAAmB,QAAQ,MAAM;AAAA,QAC1C,OAAO;AACL,iBAAO,UAAU;AAAA,QACnB;AAAA,MACF,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA,EACA,OAAO,QAAQC,aAAY,GAAG;AAC5B,UAAM,WAAW,CAAC;AAClB,IAAAA,YAAW,QAAQ,CAAC,GAAG,MAAM;AAC3B,eAAS,KAAK,EAAE,KAAK,MAAM,GAAG,CAAC,CAAC;AAAA,IAClC,CAAC;AACD,WAAO,KAAK,QAAQ,QAAQ;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,SAAS,OAAO,GAAG;AACxB,WAAO,IAAI,oBAAmB,CAAC,SAAS,WAAW;AACjD,YAAM,gBAAgB,MAAM;AAC5B,YAAM,UAAU,IAAI,MAAM,aAAa;AACvC,UAAI,gBAAgB;AACpB,eAAS,IAAI,GAAG,IAAI,eAAe,KAAK;AACtC,cAAM,UAAU;AAChB,UAAE,MAAM,OAAO,CAAC,EAAE,KAAK,YAAU;AAC/B,kBAAQ,OAAO,IAAI;AACnB,YAAE;AACF,cAAI,kBAAkB,eAAe;AACnC,oBAAQ,OAAO;AAAA,UACjB;AAAA,QACF,GAAG,SAAO,OAAO,GAAG,CAAC;AAAA,MACvB;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,QAAQ,WAAW,QAAQ;AAChC,WAAO,IAAI,oBAAmB,CAAC,SAAS,WAAW;AACjD,YAAMC,WAAU,MAAM;AACpB,YAAI,UAAU,MAAM,MAAM;AACxB,iBAAO,EAAE,KAAK,MAAM;AAClB,YAAAA,SAAQ;AAAA,UACV,GAAG,MAAM;AAAA,QACX,OAAO;AACL,kBAAQ;AAAA,QACV;AAAA,MACF;AACA,MAAAA,SAAQ;AAAA,IACV,CAAC;AAAA,EACH;AACF;AAoBA,IAAM,YAAY;AAKlB,IAAM,0BAA0B;AAKhC,IAAM,sBAAN,MAAM,qBAAoB;AAAA,EACxB,YAAY,QAAQ,aAAa;AAC/B,SAAK,SAAS;AACd,SAAK,cAAc;AACnB,SAAK,UAAU;AAIf,SAAK,qBAAqB,IAAI,SAAS;AACvC,SAAK,YAAY,aAAa,MAAM;AAClC,WAAK,mBAAmB,QAAQ;AAAA,IAClC;AACA,SAAK,YAAY,UAAU,MAAM;AAC/B,UAAI,YAAY,OAAO;AACrB,aAAK,mBAAmB,OAAO,IAAI,0BAA0B,QAAQ,YAAY,KAAK,CAAC;AAAA,MACzF,OAAO;AACL,aAAK,mBAAmB,QAAQ;AAAA,MAClC;AAAA,IACF;AACA,SAAK,YAAY,UAAU,WAAS;AAClC,YAAM,QAAQ,0BAA0B,MAAM,OAAO,KAAK;AAC1D,WAAK,mBAAmB,OAAO,IAAI,0BAA0B,QAAQ,KAAK,CAAC;AAAA,IAC7E;AAAA,EACF;AAAA,EACA,OAAO,KAAK,IAAI,QAAQ,MAAM,kBAAkB;AAC9C,QAAI;AACF,aAAO,IAAI,qBAAoB,QAAQ,GAAG,YAAY,kBAAkB,IAAI,CAAC;AAAA,IAC/E,SAAS,GAAG;AACV,YAAM,IAAI,0BAA0B,QAAQ,CAAC;AAAA,IAC/C;AAAA,EACF;AAAA,EACA,IAAI,oBAAoB;AACtB,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA,EACA,MAAM,OAAO;AACX,QAAI,OAAO;AACT,WAAK,mBAAmB,OAAO,KAAK;AAAA,IACtC;AACA,QAAI,CAAC,KAAK,SAAS;AACjB,eAAS,WAAW,yBAAyB,QAAQ,MAAM,UAAU,wBAAwB;AAC7F,WAAK,UAAU;AACf,WAAK,YAAY,MAAM;AAAA,IACzB;AAAA,EACF;AAAA,EACA,cAAc;AAIZ,UAAM,mBAAmB,KAAK;AAC9B,QAAI,CAAC,KAAK,WAAW,OAAO,iBAAiB,WAAW,YAAY;AAClE,uBAAiB,OAAO;AAAA,IAC1B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,MAAM,WAAW;AACf,UAAM,QAAQ,KAAK,YAAY,YAAY,SAAS;AACpD,WAAO,IAAI,cAAc,KAAK;AAAA,EAChC;AACF;AAQA,IAAM,WAAN,MAAM,UAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUb,YAAYH,OAAMF,UAAS,iBAAiB;AAC1C,SAAK,OAAOE;AACZ,SAAK,UAAUF;AACf,SAAK,kBAAkB;AACvB,UAAM,aAAa,UAAS,cAAc,MAAM,CAAC;AAKjD,QAAI,eAAe,MAAM;AACvB,eAAS,8LAA6M;AAAA,IACxN;AAAA,EACF;AAAA;AAAA,EAEA,OAAO,OAAOE,OAAM;AAClB,aAAS,WAAW,sBAAsBA,KAAI;AAC9C,WAAO,YAAY,OAAO,UAAU,eAAeA,KAAI,CAAC,EAAE,UAAU;AAAA,EACtE;AAAA;AAAA,EAEA,OAAO,cAAc;AACnB,QAAI,CAAC,qBAAqB,GAAG;AAC3B,aAAO;AAAA,IACT;AACA,QAAI,UAAS,kBAAkB,GAAG;AAChC,aAAO;AAAA,IACT;AAQA,UAAM,KAAK,MAAM;AASjB,UAAM,aAAa,UAAS,cAAc,EAAE;AAC5C,UAAM,mBAAmB,IAAI,cAAc,aAAa;AAExD,UAAM,iBAAiB,kBAAkB,EAAE;AAC3C,UAAM,uBAAuB,IAAI,kBAAkB,iBAAiB;AACpE,QAAI,GAAG,QAAQ,OAAO,IAAI,KAAK,GAAG,QAAQ,UAAU,IAAI,KAAK,GAAG,QAAQ,OAAO,IAAI,KAAK,oBAAoB,sBAAsB;AAChI,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBAAoB;AACzB,QAAI;AACJ,WAAO,OAAO,YAAY,iBAAiB,KAAK,QAAQ,SAAS,QAAQ,OAAO,SAAS,SAAS,GAAG,0BAA0B;AAAA,EACjI;AAAA;AAAA,EAEA,OAAO,SAAS,KAAK,OAAO;AAC1B,WAAO,IAAI,MAAM,KAAK;AAAA,EACxB;AAAA;AAAA;AAAA,EAGA,OAAO,cAAc,IAAI;AACvB,UAAM,kBAAkB,GAAG,MAAM,iCAAiC;AAClE,UAAMF,WAAU,kBAAkB,gBAAgB,CAAC,EAAE,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI;AACxF,WAAO,OAAOA,QAAO;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAIM,SAAS,QAAQ;AAAA;AACrB,UAAI,CAAC,KAAK,IAAI;AACZ,iBAAS,WAAW,qBAAqB,KAAK,IAAI;AAClD,aAAK,KAAK,MAAM,IAAI,QAAQ,CAAC,SAAS,WAAW;AAM/C,gBAAM,UAAU,UAAU,KAAK,KAAK,MAAM,KAAK,OAAO;AACtD,kBAAQ,YAAY,WAAS;AAC3B,kBAAM,KAAK,MAAM,OAAO;AACxB,oBAAQ,EAAE;AAAA,UACZ;AACA,kBAAQ,YAAY,MAAM;AACxB,mBAAO,IAAI,0BAA0B,QAAQ,kIAAuI,CAAC;AAAA,UACvL;AACA,kBAAQ,UAAU,WAAS;AACzB,kBAAM,QAAQ,MAAM,OAAO;AAC3B,gBAAI,MAAM,SAAS,gBAAgB;AACjC,qBAAO,IAAI,eAAe,KAAK,qBAAqB,sVAA0W,CAAC;AAAA,YACja,WAAW,MAAM,SAAS,qBAAqB;AAC7C,qBAAO,IAAI,eAAe,KAAK,qBAAqB,+KAAyL,KAAK,CAAC;AAAA,YACrP,OAAO;AACL,qBAAO,IAAI,0BAA0B,QAAQ,KAAK,CAAC;AAAA,YACrD;AAAA,UACF;AACA,kBAAQ,kBAAkB,WAAS;AACjC,qBAAS,WAAW,eAAe,KAAK,OAAO,oCAAoC,MAAM,UAAU;AACnG,kBAAM,KAAK,MAAM,OAAO;AACxB,iBAAK,gBAAgB,gBAAgB,IAAI,QAAQ,aAAa,MAAM,YAAY,KAAK,OAAO,EAAE,KAAK,MAAM;AACvG,uBAAS,WAAW,iCAAiC,KAAK,UAAU,WAAW;AAAA,YACjF,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AAAA,MACH;AACA,UAAI,KAAK,uBAAuB;AAC9B,aAAK,GAAG,kBAAkB,WAAS,KAAK,sBAAsB,KAAK;AAAA,MACrE;AACA,aAAO,KAAK;AAAA,IACd;AAAA;AAAA,EACA,yBAAyB,uBAAuB;AAC9C,SAAK,wBAAwB;AAC7B,QAAI,KAAK,IAAI;AACX,WAAK,GAAG,kBAAkB,WAAS;AACjC,eAAO,sBAAsB,KAAK;AAAA,MACpC;AAAA,IACF;AAAA,EACF;AAAA,EACM,eAAe,QAAQ,MAAM,cAAc,eAAe;AAAA;AAC9D,YAAM,WAAW,SAAS;AAC1B,UAAI,gBAAgB;AACpB,aAAO,MAAM;AACX,UAAE;AACF,YAAI;AACF,eAAK,KAAK,MAAM,KAAK,SAAS,MAAM;AACpC,gBAAM,cAAc,oBAAoB,KAAK,KAAK,IAAI,QAAQ,WAAW,aAAa,aAAa,YAAY;AAC/G,gBAAM,sBAAsB,cAAc,WAAW,EAAE,KAAK,YAAU;AACpE,wBAAY,YAAY;AACxB,mBAAO;AAAA,UACT,CAAC,EAAE,MAAM,WAAS;AAEhB,wBAAY,MAAM,KAAK;AAKvB,mBAAO,mBAAmB,OAAO,KAAK;AAAA,UACxC,CAAC,EAAE,UAAU;AAGb,8BAAoB,MAAM,MAAM;AAAA,UAAC,CAAC;AAIlC,gBAAM,YAAY;AAClB,iBAAO;AAAA,QACT,SAAS,GAAG;AACV,gBAAM,QAAQ;AAMd,gBAAM,YAAY,MAAM,SAAS,mBAAmB,gBAAgB;AACpE,mBAAS,WAAW,kCAAkC,MAAM,SAAS,aAAa,SAAS;AAC3F,eAAK,MAAM;AACX,cAAI,CAAC,WAAW;AACd,mBAAO,QAAQ,OAAO,KAAK;AAAA,UAC7B;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA,EACA,QAAQ;AACN,QAAI,KAAK,IAAI;AACX,WAAK,GAAG,MAAM;AAAA,IAChB;AACA,SAAK,KAAK;AAAA,EACZ;AACF;AAEA,SAAS,kBAAkB,IAAI;AAC7B,QAAM,sBAAsB,GAAG,MAAM,mBAAmB;AACxD,QAAMA,WAAU,sBAAsB,oBAAoB,CAAC,EAAE,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE,KAAK,GAAG,IAAI;AAChG,SAAO,OAAOA,QAAO;AACvB;AAMA,IAAM,sBAAN,MAA0B;AAAA,EACxB,YAAY,UAAU;AACpB,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,UAAU;AAAA,EACjB;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,OAAO,OAAO;AAChB,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO;AACL,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,KAAK,KAAK;AACR,SAAK,UAAU;AAAA,EACjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS;AACP,WAAO,YAAY,KAAK,SAAS,OAAO,CAAC;AAAA,EAC3C;AACF;AAEA,IAAM,4BAAN,cAAwC,eAAe;AAAA,EACrD,YAAY,YAAY,OAAO;AAC7B,UAAM,KAAK,aAAa,0BAA0B,UAAU,aAAa,KAAK,EAAE;AAChF,SAAK,OAAO;AAAA,EACd;AACF;AAEA,SAAS,4BAA4B,GAAG;AAGtC,SAAO,EAAE,SAAS;AACpB;AAWA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,OAAO;AACjB,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,IAAI,YAAY,OAAO;AACrB,QAAI;AACJ,QAAI,UAAU,QAAW;AACvB,eAAS,WAAW,OAAO,KAAK,MAAM,MAAM,YAAY,KAAK;AAC7D,gBAAU,KAAK,MAAM,IAAI,OAAO,UAAU;AAAA,IAC5C,OAAO;AACL,eAAS,WAAW,OAAO,KAAK,MAAM,MAAM,cAAc,UAAU;AACpE,gBAAU,KAAK,MAAM,IAAI,UAAU;AAAA,IACrC;AACA,WAAO,YAAY,OAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,OAAO;AACT,aAAS,WAAW,OAAO,KAAK,MAAM,MAAM,OAAO,KAAK;AACxD,UAAM,UAAU,KAAK,MAAM,IAAI,KAAK;AACpC,WAAO,YAAY,OAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,KAAK;AACP,UAAM,UAAU,KAAK,MAAM,IAAI,GAAG;AAGlC,WAAO,YAAY,OAAO,EAAE,KAAK,YAAU;AAEzC,UAAI,WAAW,QAAW;AACxB,iBAAS;AAAA,MACX;AACA,eAAS,WAAW,OAAO,KAAK,MAAM,MAAM,KAAK,MAAM;AACvD,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,OAAO,KAAK;AACV,aAAS,WAAW,UAAU,KAAK,MAAM,MAAM,GAAG;AAClD,UAAM,UAAU,KAAK,MAAM,OAAO,GAAG;AACrC,WAAO,YAAY,OAAO;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ;AACN,aAAS,WAAW,SAAS,KAAK,MAAM,IAAI;AAC5C,UAAM,UAAU,KAAK,MAAM,MAAM;AACjC,WAAO,YAAY,OAAO;AAAA,EAC5B;AAAA,EACA,QAAQ,cAAc,OAAO;AAC3B,UAAM,iBAAiB,KAAK,QAAQ,cAAc,KAAK;AAGvD,UAAM,QAAQ,eAAe,QAAQ,KAAK,MAAM,MAAM,eAAe,KAAK,IAAI,KAAK;AACnF,QAAI,OAAO,MAAM,WAAW,YAAY;AACtC,YAAM,UAAU,MAAM,OAAO,eAAe,KAAK;AACjD,aAAO,IAAI,mBAAmB,CAAC,SAAS,WAAW;AACjD,gBAAQ,UAAU,WAAS;AACzB,iBAAO,MAAM,OAAO,KAAK;AAAA,QAC3B;AACA,gBAAQ,YAAY,WAAS;AAC3B,kBAAQ,MAAM,OAAO,MAAM;AAAA,QAC7B;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,YAAM,SAAS,KAAK,OAAO,cAAc;AACzC,YAAM,UAAU,CAAC;AACjB,aAAO,KAAK,cAAc,QAAQ,CAAC,KAAK,UAAU;AAChD,gBAAQ,KAAK,KAAK;AAAA,MACpB,CAAC,EAAE,KAAK,MAAM;AACZ,eAAO;AAAA,MACT,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,OAAOM,QAAO;AACtB,UAAM,UAAU,KAAK,MAAM,OAAO,OAAOA,WAAU,OAAO,SAAYA,MAAK;AAC3E,WAAO,IAAI,mBAAmB,CAAC,SAAS,WAAW;AACjD,cAAQ,UAAU,WAAS;AACzB,eAAO,MAAM,OAAO,KAAK;AAAA,MAC3B;AACA,cAAQ,YAAY,WAAS;AAC3B,gBAAQ,MAAM,OAAO,MAAM;AAAA,MAC7B;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,UAAU,cAAc,OAAO;AAC7B,aAAS,WAAW,cAAc,KAAK,MAAM,IAAI;AACjD,UAAM,UAAU,KAAK,QAAQ,cAAc,KAAK;AAChD,YAAQ,WAAW;AACnB,UAAM,SAAS,KAAK,OAAO,OAAO;AAClC,WAAO,KAAK,cAAc,QAAQ,CAAC,KAAK,OAAO,YAAY;AAOzD,aAAO,QAAQ,OAAO;AAAA,IACxB,CAAC;AAAA,EACH;AAAA,EACA,QAAQ,mBAAmB,UAAU;AACnC,QAAI;AACJ,QAAI,CAAC,UAAU;AACb,gBAAU,CAAC;AACX,iBAAW;AAAA,IACb,OAAO;AACL,gBAAU;AAAA,IACZ;AACA,UAAM,SAAS,KAAK,OAAO,OAAO;AAClC,WAAO,KAAK,cAAc,QAAQ,QAAQ;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,cAAc,UAAU;AACtB,UAAM,gBAAgB,KAAK,OAAO,CAAC,CAAC;AACpC,WAAO,IAAI,mBAAmB,CAAC,SAAS,WAAW;AACjD,oBAAc,UAAU,WAAS;AAC/B,cAAM,QAAQ,0BAA0B,MAAM,OAAO,KAAK;AAC1D,eAAO,KAAK;AAAA,MACd;AACA,oBAAc,YAAY,WAAS;AACjC,cAAM,SAAS,MAAM,OAAO;AAC5B,YAAI,CAAC,QAAQ;AACX,kBAAQ;AACR;AAAA,QACF;AACA,iBAAS,OAAO,YAAY,OAAO,KAAK,EAAE,KAAK,oBAAkB;AAC/D,cAAI,gBAAgB;AAClB,mBAAO,SAAS;AAAA,UAClB,OAAO;AACL,oBAAQ;AAAA,UACV;AAAA,QACF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,cAAc,eAAe,IAAI;AAC/B,UAAM,UAAU,CAAC;AACjB,WAAO,IAAI,mBAAmB,CAAC,SAAS,WAAW;AACjD,oBAAc,UAAU,WAAS;AAC/B,eAAO,MAAM,OAAO,KAAK;AAAA,MAC3B;AACA,oBAAc,YAAY,WAAS;AACjC,cAAM,SAAS,MAAM,OAAO;AAC5B,YAAI,CAAC,QAAQ;AACX,kBAAQ;AACR;AAAA,QACF;AACA,cAAM,aAAa,IAAI,oBAAoB,MAAM;AACjD,cAAM,aAAa,GAAG,OAAO,YAAY,OAAO,OAAO,UAAU;AACjE,YAAI,sBAAsB,oBAAoB;AAC5C,gBAAM,cAAc,WAAW,MAAM,SAAO;AAC1C,uBAAW,KAAK;AAChB,mBAAO,mBAAmB,OAAO,GAAG;AAAA,UACtC,CAAC;AACD,kBAAQ,KAAK,WAAW;AAAA,QAC1B;AACA,YAAI,WAAW,QAAQ;AACrB,kBAAQ;AAAA,QACV,WAAW,WAAW,cAAc,MAAM;AACxC,iBAAO,SAAS;AAAA,QAClB,OAAO;AACL,iBAAO,SAAS,WAAW,SAAS;AAAA,QACtC;AAAA,MACF;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,mBAAmB,QAAQ,OAAO,CAAC;AAAA,EACnD;AAAA,EACA,QAAQ,cAAc,OAAO;AAC3B,QAAI,YAAY;AAChB,QAAI,iBAAiB,QAAW;AAC9B,UAAI,OAAO,iBAAiB,UAAU;AACpC,oBAAY;AAAA,MACd,OAAO;AACL,gBAAQ;AAAA,MACV;AAAA,IACF;AACA,WAAO;AAAA,MACL,OAAO;AAAA,MACP;AAAA,IACF;AAAA,EACF;AAAA,EACA,OAAO,SAAS;AACd,QAAI,YAAY;AAChB,QAAI,QAAQ,SAAS;AACnB,kBAAY;AAAA,IACd;AACA,QAAI,QAAQ,OAAO;AACjB,YAAM,QAAQ,KAAK,MAAM,MAAM,QAAQ,KAAK;AAC5C,UAAI,QAAQ,UAAU;AACpB,eAAO,MAAM,cAAc,QAAQ,OAAO,SAAS;AAAA,MACrD,OAAO;AACL,eAAO,MAAM,WAAW,QAAQ,OAAO,SAAS;AAAA,MAClD;AAAA,IACF,OAAO;AACL,aAAO,KAAK,MAAM,WAAW,QAAQ,OAAO,SAAS;AAAA,IACvD;AAAA,EACF;AACF;AAKA,SAAS,YAAY,SAAS;AAC5B,SAAO,IAAI,mBAAmB,CAAC,SAAS,WAAW;AACjD,YAAQ,YAAY,WAAS;AAC3B,YAAM,SAAS,MAAM,OAAO;AAC5B,cAAQ,MAAM;AAAA,IAChB;AACA,YAAQ,UAAU,WAAS;AACzB,YAAM,QAAQ,0BAA0B,MAAM,OAAO,KAAK;AAC1D,aAAO,KAAK;AAAA,IACd;AAAA,EACF,CAAC;AACH;AAEA,IAAI,mBAAmB;AACvB,SAAS,0BAA0B,OAAO;AACxC,QAAM,aAAa,SAAS,cAAc,MAAM,CAAC;AACjD,MAAI,cAAc,QAAQ,aAAa,IAAI;AACzC,UAAM,YAAY;AAClB,QAAI,MAAM,QAAQ,QAAQ,SAAS,KAAK,GAAG;AAEzC,YAAM,WAAW,IAAI,eAAe,YAAY,6CAA6C,SAAS,6IAAuJ;AAC7P,UAAI,CAAC,kBAAkB;AACrB,2BAAmB;AAGnB,mBAAW,MAAM;AACf,gBAAM;AAAA,QACR,GAAG,CAAC;AAAA,MACN;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AACA,IAAM,YAAY;AAElB,IAAM,4BAA4B,KAAK;AAEvC,IAAM,4BAA4B,KAAK;AAEvC,IAAM,2BAA2B;AAEjC,IAAM,2BAAN,MAA+B;AAAA,EAC7B,YAAY,YAAY,YAAY;AAClC,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,QAAQ;AACN,SAAK,SAAS,yBAAyB;AAAA,EACzC;AAAA,EACA,OAAO;AACL,QAAI,KAAK,MAAM;AACb,WAAK,KAAK,OAAO;AACjB,WAAK,OAAO;AAAA,IACd;AAAA,EACF;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EACA,SAAS,OAAO;AACd,aAAS,WAAW,gBAAgB,KAAK,IAAI;AAC7C,SAAK,OAAO,KAAK,WAAW,kBAAkB,kBAA8C,OAAO,MAAY;AAC7G,WAAK,OAAO;AACZ,UAAI;AACF,cAAM,qBAAqB,MAAM,KAAK,WAAW,SAAS;AAC1D,iBAAS,WAAW,sBAAsB,kBAAkB,EAAE;AAAA,MAChE,SAAS,GAAG;AACV,YAAI,4BAA4B,CAAC,GAAG;AAClC,mBAAS,WAAW,oDAAoD,CAAC;AAAA,QAC3E,OAAO;AACL,gBAAM,yBAAyB,CAAC;AAAA,QAClC;AAAA,MACF;AACA,YAAM,KAAK,SAAS,yBAAyB;AAAA,IAC/C,EAAC;AAAA,EACH;AACF;AAEA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAQA,YAAY,aAAa;AACvB,SAAK,aAAa;AAClB,SAAK,cAAc;AAAA,EACrB;AAAA,EACM,WAA2D;AAAA,+CAAlD,wBAAwB,0BAA0B;AAC/D,aAAO,KAAK,YAAY,eAAe,oBAAoB,qBAAqB,SAAO,KAAK,kBAAkB,KAAK,qBAAqB,CAAC;AAAA,IAC3I;AAAA;AAAA;AAAA,EAEA,kBAAkB,aAAa,uBAAuB;AACpD,UAAM,4BAA4B,oBAAI,IAAI;AAC1C,QAAI,qBAAqB;AACzB,QAAI,eAAe;AACnB,WAAO,mBAAmB,QAAQ,MAAM,iBAAiB,QAAQ,qBAAqB,GAAG,MAAM;AAC7F,aAAO,KAAK,WAAW,aAAa,+BAA+B,WAAW,EAAE,KAAK,CAAAH,qBAAmB;AACtG,YAAIA,qBAAoB,QAAQ,0BAA0B,IAAIA,gBAAe,GAAG;AAC9E,yBAAe;AAAA,QACjB,OAAO;AACL,mBAAS,WAAW,0BAA0BA,gBAAe,EAAE;AAC/D,iBAAO,KAAK,+BAA+B,aAAaA,kBAAiB,kBAAkB,EAAE,KAAK,wBAAsB;AACtH,kCAAsB;AACtB,sCAA0B,IAAIA,gBAAe;AAAA,UAC/C,CAAC;AAAA,QACH;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM,wBAAwB,kBAAkB;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA,EAIA,+BAA+B,aAAaA,kBAAiB,4BAA4B;AAEvF,WAAO,KAAK,WAAW,aAAa,gCAAgC,aAAaA,gBAAe,EAAE,KAAK,oBAAkB,KAAK,WAAW,eAAe,iBAAiB,aAAaA,kBAAiB,gBAAgB,0BAA0B,EAAE,KAAK,eAAa;AACnQ,YAAM,OAAO,UAAU;AACvB,aAAO,KAAK,WAAW,aAAa,mBAAmB,aAAa,IAAI,EAAE,KAAK,MAAM,KAAK,aAAa,gBAAgB,SAAS,CAAC,EAAE,KAAK,eAAa;AACnJ,iBAAS,WAAW,oBAAoB,SAAS,EAAE;AACnD,eAAO,KAAK,WAAW,aAAa,sBAAsB,aAAaA,kBAAiB,SAAS;AAAA,MACnG,CAAC,EAAE,KAAK,MAAM,KAAK,IAAI;AAAA,IACzB,CAAC,CAAC;AAAA,EACJ;AAAA;AAAA,EAEA,aAAa,gBAAgB,cAAc;AACzC,QAAI,YAAY;AAChB,iBAAa,QAAQ,QAAQ,CAAC,KAAK,aAAa;AAC9C,YAAM,YAAY,2BAA2B,QAAQ;AACrD,UAAI,sBAAsB,WAAW,SAAS,IAAI,GAAG;AACnD,oBAAY;AAAA,MACd;AAAA,IACF,CAAC;AACD,WAAO,IAAI,YAAY,UAAU,UAAU,UAAU,aAAa,KAAK,IAAI,aAAa,SAAS,eAAe,cAAc,CAAC;AAAA,EACjI;AACF;AAwBA,IAAM,iBAAN,MAAqB;AAAA,EACnB,YAAY,eAAe,sBAAsB;AAC/C,SAAK,gBAAgB;AACrB,QAAI,sBAAsB;AACxB,2BAAqB,wBAAwB,oBAAkB,KAAK,iBAAiB,cAAc;AACnG,WAAK,yBAAyB,oBAAkB,qBAAqB,oBAAoB,cAAc;AAAA,IACzG;AAAA,EACF;AAAA,EACA,iBAAiB,uBAAuB;AACtC,SAAK,gBAAgB,KAAK,IAAI,uBAAuB,KAAK,aAAa;AACvE,WAAO,KAAK;AAAA,EACd;AAAA,EACA,OAAO;AACL,UAAM,YAAY,EAAE,KAAK;AACzB,QAAI,KAAK,wBAAwB;AAC/B,WAAK,uBAAuB,SAAS;AAAA,IACvC;AACA,WAAO;AAAA,EACT;AACF;AACA,eAAe,UAAU;AAkBzB,IAAM,aAAa;AACnB,IAAM,uBAAuB;AAC7B,IAAM,aAAa;AACnB,IAAM,gBAAgB;AAItB,SAAS,mBAAmB,MAAM;AAChC,MAAI,SAAS;AACb,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,QAAI,OAAO,SAAS,GAAG;AACrB,eAAS,gBAAgB,MAAM;AAAA,IACjC;AACA,aAAS,cAAc,KAAK,IAAI,CAAC,GAAG,MAAM;AAAA,EAC5C;AACA,SAAO,gBAAgB,MAAM;AAC/B;AAEA,SAAS,cAAc,SAAS,WAAW;AACzC,MAAI,SAAS;AACb,QAAM,SAAS,QAAQ;AACvB,WAAS,IAAI,GAAG,IAAI,QAAQ,KAAK;AAC/B,UAAM,IAAI,QAAQ,OAAO,CAAC;AAC1B,YAAQ,GAAG;AAAA,MACT,KAAK;AACH,kBAAU,aAAa;AACvB;AAAA,MACF,KAAK;AACH,kBAAU,aAAa;AACvB;AAAA,MACF;AACE,kBAAU;AAAA,IACd;AAAA,EACF;AACA,SAAO;AACT;AAEA,SAAS,gBAAgB,QAAQ;AAC/B,SAAO,SAAS,aAAa;AAC/B;AAOA,SAAS,mBAAmB,MAAM;AAGhC,QAAM,SAAS,KAAK;AACpB,aAAW,UAAU,CAAC;AACtB,MAAI,WAAW,GAAG;AAChB,eAAW,KAAK,OAAO,CAAC,MAAM,cAAc,KAAK,OAAO,CAAC,MAAM,oBAAoB;AACnF,WAAO,aAAa,UAAU;AAAA,EAChC;AAGA,QAAM,4BAA4B,SAAS;AAC3C,QAAM,WAAW,CAAC;AAClB,MAAI,iBAAiB;AACrB,WAAS,QAAQ,GAAG,QAAQ,UAAS;AAGnC,UAAM,MAAM,KAAK,QAAQ,YAAY,KAAK;AAC1C,QAAI,MAAM,KAAK,MAAM,2BAA2B;AAC9C,WAAK;AAAA,IACP;AACA,UAAM,OAAO,KAAK,OAAO,MAAM,CAAC;AAChC,YAAQ,MAAM;AAAA,MACZ,KAAK;AACH,cAAM,eAAe,KAAK,UAAU,OAAO,GAAG;AAC9C,YAAI;AACJ,YAAI,eAAe,WAAW,GAAG;AAG/B,oBAAU;AAAA,QACZ,OAAO;AACL,4BAAkB;AAClB,oBAAU;AACV,2BAAiB;AAAA,QACnB;AACA,iBAAS,KAAK,OAAO;AACrB;AAAA,MACF,KAAK;AACH,0BAAkB,KAAK,UAAU,OAAO,GAAG;AAC3C,0BAAkB;AAClB;AAAA,MACF,KAAK;AAEH,0BAAkB,KAAK,UAAU,OAAO,MAAM,CAAC;AAC/C;AAAA,MACF;AACE,aAAK;AAAA,IACT;AACA,YAAQ,MAAM;AAAA,EAChB;AACA,SAAO,IAAI,aAAa,QAAQ;AAClC;AAkBA,IAAM,0BAA0B;AAyBhC,IAAM,uBAAuB;AAK7B,IAAM,qBAAqB;AAE3B,IAAM,uBAAuB;AAE7B,IAAM,yBAAyB;AAE/B,IAAM,uBAAuB;AAE7B,IAAM,yBAAyB;AAE/B,IAAM,oCAAoC;AAE1C,IAAM,sCAAsC,CAAC,UAAU,SAAS;AAKhE,SAAS,mCAAmC,QAAQ;AAClD,SAAO,CAAC,MAAM;AAChB;AAKA,SAAS,mCAAmC,QAAQ,MAAM;AACxD,SAAO,CAAC,QAAQ,mBAAmB,IAAI,CAAC;AAC1C;AAKA,SAAS,yBAAyB,QAAQ,MAAM,SAAS;AACvD,SAAO,CAAC,QAAQ,mBAAmB,IAAI,GAAG,OAAO;AACnD;AAOA,IAAM,gCAAgC,CAAC;AACvC,IAAM,0BAA0B;AAChC,IAAM,wBAAwB;AAK9B,IAAM,0BAA0B,CAAC,cAAc,mBAAmB,YAAY,YAAY;AAE1F,IAAM,mCAAmC;AACzC,IAAM,uCAAuC,CAAC,cAAc,mBAAmB,YAAY;AAO3F,IAAM,uCAAuC;AAC7C,IAAM,2CAA2C,CAAC,mBAAmB,YAAY,cAAc,YAAY;AAC3G,IAAM,8BAA8B;AACpC,IAAM,4BAA4B;AAClC,IAAM,gBAAgB;AAEtB,IAAM,kBAAkB;AAExB,IAAM,gCAAgC;AAMtC,IAAM,8BAA8B,CAAC,eAAe,UAAU;AAE9D,IAAM,wBAAwB;AAE9B,IAAM,0BAA0B,CAAC,YAAY,MAAM;AAEnD,IAAM,uCAAuC;AAE7C,IAAM,yCAAyC,CAAC,QAAQ,UAAU;AAKlE,IAAM,oBAAoB;AAC1B,IAAM,sBAAsB;AAE5B,IAAM,0BAA0B;AAEhC,IAAM,4BAA4B,CAAC,gBAAgB,QAAQ;AAE3D,IAAM,wBAAwB;AAE9B,IAAM,0BAA0B;AAEhC,IAAM,gBAAgB;AACtB,IAAM,kBAAkB;AAExB,IAAM,oBAAoB;AAC1B,IAAM,sBAAsB;AAE5B,IAAM,4BAA4B;AAClC,IAAM,8BAA8B;AASpC,IAAM,2CAA2C;AACjD,IAAM,+CAA+C;AAErD,IAAM,oBAAoB;AAC1B,IAAM,sBAAsB,CAAC,WAAW,KAAK;AAS7C,IAAM,kCAAkC;AACxC,IAAM,sCAAsC,CAAC,OAAO,gBAAgB;AAEpE,IAAM,oBAAoB;AAC1B,IAAM,sBAAsB,CAAC,WAAW,OAAO,cAAc,oBAAoB,sBAAsB,aAAa;AACpH,IAAM,+BAA+B;AACrC,IAAM,mCAAmC,CAAC,WAAW,OAAO,oBAAoB;AAEhF,IAAM,yBAAyB;AAC/B,IAAM,2BAA2B,CAAC,UAAU,kBAAkB,YAAY;AAC1E,IAAM,8CAA8C;AACpD,IAAM,kDAAkD,CAAC,UAAU,kBAAkB,gBAAgB;AACrG,IAAM,+CAA+C;AACrD,IAAM,mDAAmD,CAAC,UAAU,mBAAmB,gBAAgB;AAEvG,IAAM,iBAAiB;AACvB,IAAM,mBAAmB;AAEzB,IAAM,YAAY,CAAC,sBAAsB,sBAAsB,yBAAyB,yBAAyB,eAAe,sBAAsB,qBAAqB,qBAAqB;AAEhM,IAAM,YAAY;AAElB,IAAM,YAAY,CAAC,GAAG,WAAW,qBAAqB;AACtD,IAAM,YAAY,CAAC,GAAG,WAAW,2BAA2B;AAC5D,IAAM,YAAY,CAAC,GAAG,WAAW,uBAAuB;AACxD,IAAM,aAAa,CAAC,GAAG,WAAW,eAAe,iBAAiB;AAClE,IAAM,aAAa,CAAC,GAAG,YAAY,sBAAsB;AACzD,IAAM,aAAa,CAAC,sBAAsB,sBAAsB,yBAAyB,uBAAuB,eAAe,sBAAsB,qBAAqB,uBAAuB,uBAAuB,6BAA6B,yBAAyB,eAAe,mBAAmB,sBAAsB;AACtU,IAAM,aAAa;AACnB,IAAM,aAAa,CAAC,GAAG,YAAY,2BAA2B,mBAAmB,iBAAiB;AAClG,IAAM,aAAa;AACnB,IAAM,aAAa,CAAC,GAAG,YAAY,cAAc;AAEjD,SAAS,gBAAgB,eAAe;AACtC,MAAI,kBAAkB,IAAI;AACxB,WAAO;AAAA,EACT,WAAW,kBAAkB,IAAI;AAC/B,WAAO;AAAA,EACT,WAAW,kBAAkB,IAAI;AAC/B,WAAO;AAAA,EACT,WAAW,kBAAkB,IAAI;AAC/B,WAAO;AAAA,EACT,WAAW,kBAAkB,IAAI;AAC/B,WAAO;AAAA,EACT,WAAW,kBAAkB,IAAI;AAC/B,WAAO;AAAA,EACT,WAAW,kBAAkB,IAAI;AAC/B,WAAO;AAAA,EACT,OAAO;AACL,SAAK;AAAA,EACP;AACF;AAkBA,IAAM,uBAAN,cAAmC,uBAAuB;AAAA,EACxD,YAAY,qBAAqB,uBAAuB;AACtD,UAAM;AACN,SAAK,sBAAsB;AAC3B,SAAK,wBAAwB;AAAA,EAC/B;AACF;AACA,SAAS,SAAS,KAAK,OAAO;AAC5B,QAAM,uBAAuB,UAAU,GAAG;AAC1C,SAAO,SAAS,SAAS,qBAAqB,qBAAqB,KAAK;AAC1E;AAkBA,SAAS,WAAW,KAAK;AACvB,MAAIG,SAAQ;AACZ,aAAW,OAAO,KAAK;AACrB,QAAI,OAAO,UAAU,eAAe,KAAK,KAAK,GAAG,GAAG;AAClD,MAAAA;AAAA,IACF;AAAA,EACF;AACA,SAAOA;AACT;AACA,SAAS,QAAQ,KAAK,IAAI;AACxB,aAAW,OAAO,KAAK;AACrB,QAAI,OAAO,UAAU,eAAe,KAAK,KAAK,GAAG,GAAG;AAClD,SAAG,KAAK,IAAI,GAAG,CAAC;AAAA,IAClB;AAAA,EACF;AACF;AACA,SAAS,WAAW,KAAK,IAAI;AAC3B,QAAM,SAAS,CAAC;AAChB,aAAW,OAAO,KAAK;AACrB,QAAI,OAAO,UAAU,eAAe,KAAK,KAAK,GAAG,GAAG;AAClD,aAAO,KAAK,GAAG,IAAI,GAAG,GAAG,KAAK,GAAG,CAAC;AAAA,IACpC;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,QAAQ,KAAK;AACpB,aAAW,OAAO,KAAK;AACrB,QAAI,OAAO,UAAU,eAAe,KAAK,KAAK,GAAG,GAAG;AAClD,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAoBA,IAAM,YAAN,MAAM,WAAU;AAAA,EACd,YAAY,YAAY,MAAM;AAC5B,SAAK,aAAa;AAClB,SAAK,OAAO,OAAO,OAAO,SAAS;AAAA,EACrC;AAAA;AAAA,EAEA,OAAO,KAAK,OAAO;AACjB,WAAO,IAAI,WAAU,KAAK,YAAY,KAAK,KAAK,OAAO,KAAK,OAAO,KAAK,UAAU,EAAE,KAAK,MAAM,MAAM,SAAS,OAAO,MAAM,IAAI,CAAC;AAAA,EAClI;AAAA;AAAA,EAEA,OAAO,KAAK;AACV,WAAO,IAAI,WAAU,KAAK,YAAY,KAAK,KAAK,OAAO,KAAK,KAAK,UAAU,EAAE,KAAK,MAAM,MAAM,SAAS,OAAO,MAAM,IAAI,CAAC;AAAA,EAC3H;AAAA;AAAA,EAEA,IAAI,KAAK;AACP,QAAI,OAAO,KAAK;AAChB,WAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,YAAM,MAAM,KAAK,WAAW,KAAK,KAAK,GAAG;AACzC,UAAI,QAAQ,GAAG;AACb,eAAO,KAAK;AAAA,MACd,WAAW,MAAM,GAAG;AAClB,eAAO,KAAK;AAAA,MACd,WAAW,MAAM,GAAG;AAClB,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA,EAGA,QAAQ,KAAK;AAEX,QAAI,cAAc;AAClB,QAAI,OAAO,KAAK;AAChB,WAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,YAAM,MAAM,KAAK,WAAW,KAAK,KAAK,GAAG;AACzC,UAAI,QAAQ,GAAG;AACb,eAAO,cAAc,KAAK,KAAK;AAAA,MACjC,WAAW,MAAM,GAAG;AAClB,eAAO,KAAK;AAAA,MACd,OAAO;AAEL,uBAAe,KAAK,KAAK,OAAO;AAChC,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EACA,UAAU;AACR,WAAO,KAAK,KAAK,QAAQ;AAAA,EAC3B;AAAA;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA;AAAA,EAEA,SAAS;AACP,WAAO,KAAK,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA,EAEA,SAAS;AACP,WAAO,KAAK,KAAK,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,QAAQ;AACvB,WAAO,KAAK,KAAK,iBAAiB,MAAM;AAAA,EAC1C;AAAA,EACA,QAAQ,IAAI;AACV,SAAK,iBAAiB,CAAC,GAAG,MAAM;AAC9B,SAAG,GAAG,CAAC;AACP,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,WAAW;AACT,UAAM,eAAe,CAAC;AACtB,SAAK,iBAAiB,CAAC,GAAG,MAAM;AAC9B,mBAAa,KAAK,GAAG,CAAC,IAAI,CAAC,EAAE;AAC7B,aAAO;AAAA,IACT,CAAC;AACD,WAAO,IAAI,aAAa,KAAK,IAAI,CAAC;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB,QAAQ;AACvB,WAAO,KAAK,KAAK,iBAAiB,MAAM;AAAA,EAC1C;AAAA;AAAA,EAEA,cAAc;AACZ,WAAO,IAAI,kBAAkB,KAAK,MAAM,MAAM,KAAK,YAAY,KAAK;AAAA,EACtE;AAAA,EACA,gBAAgB,KAAK;AACnB,WAAO,IAAI,kBAAkB,KAAK,MAAM,KAAK,KAAK,YAAY,KAAK;AAAA,EACrE;AAAA,EACA,qBAAqB;AACnB,WAAO,IAAI,kBAAkB,KAAK,MAAM,MAAM,KAAK,YAAY,IAAI;AAAA,EACrE;AAAA,EACA,uBAAuB,KAAK;AAC1B,WAAO,IAAI,kBAAkB,KAAK,MAAM,KAAK,KAAK,YAAY,IAAI;AAAA,EACpE;AACF;AAEA,IAAM,oBAAN,MAAwB;AAAA,EACtB,YAAY,MAAM,UAAU,YAAY,WAAW;AACjD,SAAK,YAAY;AACjB,SAAK,YAAY,CAAC;AAClB,QAAI,MAAM;AACV,WAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,YAAM,WAAW,WAAW,KAAK,KAAK,QAAQ,IAAI;AAElD,UAAI,YAAY,WAAW;AACzB,eAAO;AAAA,MACT;AACA,UAAI,MAAM,GAAG;AAEX,YAAI,KAAK,WAAW;AAClB,iBAAO,KAAK;AAAA,QACd,OAAO;AACL,iBAAO,KAAK;AAAA,QACd;AAAA,MACF,WAAW,QAAQ,GAAG;AAGpB,aAAK,UAAU,KAAK,IAAI;AACxB;AAAA,MACF,OAAO;AAGL,aAAK,UAAU,KAAK,IAAI;AACxB,YAAI,KAAK,WAAW;AAClB,iBAAO,KAAK;AAAA,QACd,OAAO;AACL,iBAAO,KAAK;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,UAAU;AACR,QAAI,OAAO,KAAK,UAAU,IAAI;AAC9B,UAAM,SAAS;AAAA,MACb,KAAK,KAAK;AAAA,MACV,OAAO,KAAK;AAAA,IACd;AACA,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AACZ,aAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,aAAK,UAAU,KAAK,IAAI;AACxB,eAAO,KAAK;AAAA,MACd;AAAA,IACF,OAAO;AACL,aAAO,KAAK;AACZ,aAAO,CAAC,KAAK,QAAQ,GAAG;AACtB,aAAK,UAAU,KAAK,IAAI;AACxB,eAAO,KAAK;AAAA,MACd;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,UAAU;AACR,WAAO,KAAK,UAAU,SAAS;AAAA,EACjC;AAAA,EACA,OAAO;AACL,QAAI,KAAK,UAAU,WAAW,GAAG;AAC/B,aAAO;AAAA,IACT;AACA,UAAM,OAAO,KAAK,UAAU,KAAK,UAAU,SAAS,CAAC;AACrD,WAAO;AAAA,MACL,KAAK,KAAK;AAAA,MACV,OAAO,KAAK;AAAA,IACd;AAAA,EACF;AACF;AAEA,IAAM,WAAN,MAAM,UAAS;AAAA,EACb,YAAY,KAAK,OAAO,OAAO,MAAM,OAAO;AAC1C,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,QAAQ,SAAS,OAAO,QAAQ,UAAS;AAC9C,SAAK,OAAO,QAAQ,OAAO,OAAO,UAAS;AAC3C,SAAK,QAAQ,SAAS,OAAO,QAAQ,UAAS;AAC9C,SAAK,OAAO,KAAK,KAAK,OAAO,IAAI,KAAK,MAAM;AAAA,EAC9C;AAAA;AAAA,EAEA,KAAK,KAAK,OAAO,OAAO,MAAM,OAAO;AACnC,WAAO,IAAI,UAAS,OAAO,OAAO,MAAM,KAAK,KAAK,SAAS,OAAO,QAAQ,KAAK,OAAO,SAAS,OAAO,QAAQ,KAAK,OAAO,QAAQ,OAAO,OAAO,KAAK,MAAM,SAAS,OAAO,QAAQ,KAAK,KAAK;AAAA,EAC/L;AAAA,EACA,UAAU;AACR,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,QAAQ;AACvB,WAAO,KAAK,KAAK,iBAAiB,MAAM,KAAK,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,iBAAiB,MAAM;AAAA,EACjH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,QAAQ;AACvB,WAAO,KAAK,MAAM,iBAAiB,MAAM,KAAK,OAAO,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,iBAAiB,MAAM;AAAA,EACjH;AAAA;AAAA,EAEA,MAAM;AACJ,QAAI,KAAK,KAAK,QAAQ,GAAG;AACvB,aAAO;AAAA,IACT,OAAO;AACL,aAAO,KAAK,KAAK,IAAI;AAAA,IACvB;AAAA,EACF;AAAA;AAAA,EAEA,SAAS;AACP,WAAO,KAAK,IAAI,EAAE;AAAA,EACpB;AAAA;AAAA,EAEA,SAAS;AACP,QAAI,KAAK,MAAM,QAAQ,GAAG;AACxB,aAAO,KAAK;AAAA,IACd,OAAO;AACL,aAAO,KAAK,MAAM,OAAO;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA,EAEA,OAAO,KAAK,OAAO,YAAY;AAC7B,QAAI,IAAI;AACR,UAAM,MAAM,WAAW,KAAK,EAAE,GAAG;AACjC,QAAI,MAAM,GAAG;AACX,UAAI,EAAE,KAAK,MAAM,MAAM,MAAM,EAAE,KAAK,OAAO,KAAK,OAAO,UAAU,GAAG,IAAI;AAAA,IAC1E,WAAW,QAAQ,GAAG;AACpB,UAAI,EAAE,KAAK,MAAM,OAAO,MAAM,MAAM,IAAI;AAAA,IAC1C,OAAO;AACL,UAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,EAAE,MAAM,OAAO,KAAK,OAAO,UAAU,CAAC;AAAA,IAC3E;AACA,WAAO,EAAE,MAAM;AAAA,EACjB;AAAA,EACA,YAAY;AACV,QAAI,KAAK,KAAK,QAAQ,GAAG;AACvB,aAAO,UAAS;AAAA,IAClB;AACA,QAAI,IAAI;AACR,QAAI,CAAC,EAAE,KAAK,MAAM,KAAK,CAAC,EAAE,KAAK,KAAK,MAAM,GAAG;AAC3C,UAAI,EAAE,YAAY;AAAA,IACpB;AACA,QAAI,EAAE,KAAK,MAAM,MAAM,MAAM,EAAE,KAAK,UAAU,GAAG,IAAI;AACrD,WAAO,EAAE,MAAM;AAAA,EACjB;AAAA;AAAA,EAEA,OAAO,KAAK,YAAY;AACtB,QAAI;AACJ,QAAI,IAAI;AACR,QAAI,WAAW,KAAK,EAAE,GAAG,IAAI,GAAG;AAC9B,UAAI,CAAC,EAAE,KAAK,QAAQ,KAAK,CAAC,EAAE,KAAK,MAAM,KAAK,CAAC,EAAE,KAAK,KAAK,MAAM,GAAG;AAChE,YAAI,EAAE,YAAY;AAAA,MACpB;AACA,UAAI,EAAE,KAAK,MAAM,MAAM,MAAM,EAAE,KAAK,OAAO,KAAK,UAAU,GAAG,IAAI;AAAA,IACnE,OAAO;AACL,UAAI,EAAE,KAAK,MAAM,GAAG;AAClB,YAAI,EAAE,YAAY;AAAA,MACpB;AACA,UAAI,CAAC,EAAE,MAAM,QAAQ,KAAK,CAAC,EAAE,MAAM,MAAM,KAAK,CAAC,EAAE,MAAM,KAAK,MAAM,GAAG;AACnE,YAAI,EAAE,aAAa;AAAA,MACrB;AACA,UAAI,WAAW,KAAK,EAAE,GAAG,MAAM,GAAG;AAChC,YAAI,EAAE,MAAM,QAAQ,GAAG;AACrB,iBAAO,UAAS;AAAA,QAClB,OAAO;AACL,qBAAW,EAAE,MAAM,IAAI;AACvB,cAAI,EAAE,KAAK,SAAS,KAAK,SAAS,OAAO,MAAM,MAAM,EAAE,MAAM,UAAU,CAAC;AAAA,QAC1E;AAAA,MACF;AACA,UAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,EAAE,MAAM,OAAO,KAAK,UAAU,CAAC;AAAA,IACpE;AACA,WAAO,EAAE,MAAM;AAAA,EACjB;AAAA,EACA,QAAQ;AACN,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAEA,QAAQ;AACN,QAAI,IAAI;AACR,QAAI,EAAE,MAAM,MAAM,KAAK,CAAC,EAAE,KAAK,MAAM,GAAG;AACtC,UAAI,EAAE,WAAW;AAAA,IACnB;AACA,QAAI,EAAE,KAAK,MAAM,KAAK,EAAE,KAAK,KAAK,MAAM,GAAG;AACzC,UAAI,EAAE,YAAY;AAAA,IACpB;AACA,QAAI,EAAE,KAAK,MAAM,KAAK,EAAE,MAAM,MAAM,GAAG;AACrC,UAAI,EAAE,UAAU;AAAA,IAClB;AACA,WAAO;AAAA,EACT;AAAA,EACA,cAAc;AACZ,QAAI,IAAI,KAAK,UAAU;AACvB,QAAI,EAAE,MAAM,KAAK,MAAM,GAAG;AACxB,UAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,EAAE,MAAM,YAAY,CAAC;AACxD,UAAI,EAAE,WAAW;AACjB,UAAI,EAAE,UAAU;AAAA,IAClB;AACA,WAAO;AAAA,EACT;AAAA,EACA,eAAe;AACb,QAAI,IAAI,KAAK,UAAU;AACvB,QAAI,EAAE,KAAK,KAAK,MAAM,GAAG;AACvB,UAAI,EAAE,YAAY;AAClB,UAAI,EAAE,UAAU;AAAA,IAClB;AACA,WAAO;AAAA,EACT;AAAA,EACA,aAAa;AACX,UAAM,KAAK,KAAK,KAAK,MAAM,MAAM,UAAS,KAAK,MAAM,KAAK,MAAM,IAAI;AACpE,WAAO,KAAK,MAAM,KAAK,MAAM,MAAM,KAAK,OAAO,IAAI,IAAI;AAAA,EACzD;AAAA,EACA,cAAc;AACZ,UAAM,KAAK,KAAK,KAAK,MAAM,MAAM,UAAS,KAAK,KAAK,KAAK,OAAO,IAAI;AACpE,WAAO,KAAK,KAAK,KAAK,MAAM,MAAM,KAAK,OAAO,MAAM,EAAE;AAAA,EACxD;AAAA,EACA,YAAY;AACV,UAAM,OAAO,KAAK,KAAK,KAAK,MAAM,MAAM,CAAC,KAAK,KAAK,OAAO,MAAM,IAAI;AACpE,UAAM,QAAQ,KAAK,MAAM,KAAK,MAAM,MAAM,CAAC,KAAK,MAAM,OAAO,MAAM,IAAI;AACvE,WAAO,KAAK,KAAK,MAAM,MAAM,CAAC,KAAK,OAAO,MAAM,KAAK;AAAA,EACvD;AAAA;AAAA,EAEA,gBAAgB;AACd,UAAM,aAAa,KAAK,MAAM;AAC9B,QAAI,KAAK,IAAI,GAAK,UAAU,KAAK,KAAK,OAAO,GAAG;AAC9C,aAAO;AAAA,IACT,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA,EAGA,QAAQ;AACN,QAAI,KAAK,MAAM,KAAK,KAAK,KAAK,MAAM,GAAG;AACrC,YAAM,KAAK;AAAA,IACb;AACA,QAAI,KAAK,MAAM,MAAM,GAAG;AACtB,YAAM,KAAK;AAAA,IACb;AACA,UAAM,aAAa,KAAK,KAAK,MAAM;AACnC,QAAI,eAAe,KAAK,MAAM,MAAM,GAAG;AACrC,YAAM,KAAK;AAAA,IACb,OAAO;AACL,aAAO,cAAc,KAAK,MAAM,IAAI,IAAI;AAAA,IAC1C;AAAA,EACF;AACF;AAGA,SAAS,QAAQ;AACjB,SAAS,MAAM;AACf,SAAS,QAAQ;AAEjB,IAAM,gBAAN,MAAoB;AAAA,EAClB,cAAc;AACZ,SAAK,OAAO;AAAA,EACd;AAAA,EACA,IAAI,MAAM;AACR,UAAM,KAAK;AAAA,EACb;AAAA,EACA,IAAI,QAAQ;AACV,UAAM,KAAK;AAAA,EACb;AAAA,EACA,IAAI,QAAQ;AACV,UAAM,KAAK;AAAA,EACb;AAAA,EACA,IAAI,OAAO;AACT,UAAM,KAAK;AAAA,EACb;AAAA,EACA,IAAI,QAAQ;AACV,UAAM,KAAK;AAAA,EACb;AAAA;AAAA,EAEA,KAAK,KAAK,OAAO,OAAO,MAAM,OAAO;AACnC,WAAO;AAAA,EACT;AAAA;AAAA,EAEA,OAAO,KAAK,OAAO,YAAY;AAC7B,WAAO,IAAI,SAAS,KAAK,KAAK;AAAA,EAChC;AAAA;AAAA,EAEA,OAAO,KAAK,YAAY;AACtB,WAAO;AAAA,EACT;AAAA,EACA,UAAU;AACR,WAAO;AAAA,EACT;AAAA,EACA,iBAAiB,QAAQ;AACvB,WAAO;AAAA,EACT;AAAA,EACA,iBAAiB,QAAQ;AACvB,WAAO;AAAA,EACT;AAAA,EACA,SAAS;AACP,WAAO;AAAA,EACT;AAAA,EACA,SAAS;AACP,WAAO;AAAA,EACT;AAAA,EACA,QAAQ;AACN,WAAO;AAAA,EACT;AAAA;AAAA,EAEA,gBAAgB;AACd,WAAO;AAAA,EACT;AAAA,EACA,QAAQ;AACN,WAAO;AAAA,EACT;AACF;AACA,SAAS,QAAQ,IAAI,cAAc;AAyBnC,IAAM,YAAN,MAAM,WAAU;AAAA,EACd,YAAY,YAAY;AACtB,SAAK,aAAa;AAClB,SAAK,OAAO,IAAI,UAAU,KAAK,UAAU;AAAA,EAC3C;AAAA,EACA,IAAI,MAAM;AACR,WAAO,KAAK,KAAK,IAAI,IAAI,MAAM;AAAA,EACjC;AAAA,EACA,QAAQ;AACN,WAAO,KAAK,KAAK,OAAO;AAAA,EAC1B;AAAA,EACA,OAAO;AACL,WAAO,KAAK,KAAK,OAAO;AAAA,EAC1B;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA,EACA,QAAQ,MAAM;AACZ,WAAO,KAAK,KAAK,QAAQ,IAAI;AAAA,EAC/B;AAAA;AAAA,EAEA,QAAQ,IAAI;AACV,SAAK,KAAK,iBAAiB,CAAC,GAAG,MAAM;AACnC,SAAG,CAAC;AACJ,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,eAAe,OAAO,IAAI;AACxB,UAAM,OAAO,KAAK,KAAK,gBAAgB,MAAM,CAAC,CAAC;AAC/C,WAAO,KAAK,QAAQ,GAAG;AACrB,YAAM,OAAO,KAAK,QAAQ;AAC1B,UAAI,KAAK,WAAW,KAAK,KAAK,MAAM,CAAC,CAAC,KAAK,GAAG;AAC5C;AAAA,MACF;AACA,SAAG,KAAK,GAAG;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,aAAa,IAAI,OAAO;AACtB,QAAI;AACJ,QAAI,UAAU,QAAW;AACvB,aAAO,KAAK,KAAK,gBAAgB,KAAK;AAAA,IACxC,OAAO;AACL,aAAO,KAAK,KAAK,YAAY;AAAA,IAC/B;AACA,WAAO,KAAK,QAAQ,GAAG;AACrB,YAAM,OAAO,KAAK,QAAQ;AAC1B,YAAM,SAAS,GAAG,KAAK,GAAG;AAC1B,UAAI,CAAC,QAAQ;AACX;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAEA,kBAAkB,MAAM;AACtB,UAAM,OAAO,KAAK,KAAK,gBAAgB,IAAI;AAC3C,WAAO,KAAK,QAAQ,IAAI,KAAK,QAAQ,EAAE,MAAM;AAAA,EAC/C;AAAA,EACA,cAAc;AACZ,WAAO,IAAI,kBAAkB,KAAK,KAAK,YAAY,CAAC;AAAA,EACtD;AAAA,EACA,gBAAgB,KAAK;AACnB,WAAO,IAAI,kBAAkB,KAAK,KAAK,gBAAgB,GAAG,CAAC;AAAA,EAC7D;AAAA;AAAA,EAEA,IAAI,MAAM;AACR,WAAO,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI,EAAE,OAAO,MAAM,IAAI,CAAC;AAAA,EAC5D;AAAA;AAAA,EAEA,OAAO,MAAM;AACX,QAAI,CAAC,KAAK,IAAI,IAAI,GAAG;AACnB,aAAO;AAAA,IACT;AACA,WAAO,KAAK,KAAK,KAAK,KAAK,OAAO,IAAI,CAAC;AAAA,EACzC;AAAA,EACA,UAAU;AACR,WAAO,KAAK,KAAK,QAAQ;AAAA,EAC3B;AAAA,EACA,UAAU,OAAO;AACf,QAAI,SAAS;AAEb,QAAI,OAAO,OAAO,MAAM,MAAM;AAC5B,eAAS;AACT,cAAQ;AAAA,IACV;AACA,UAAM,QAAQ,UAAQ;AACpB,eAAS,OAAO,IAAI,IAAI;AAAA,IAC1B,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,OAAO;AACb,QAAI,EAAE,iBAAiB,aAAY;AACjC,aAAO;AAAA,IACT;AACA,QAAI,KAAK,SAAS,MAAM,MAAM;AAC5B,aAAO;AAAA,IACT;AACA,UAAM,SAAS,KAAK,KAAK,YAAY;AACrC,UAAM,UAAU,MAAM,KAAK,YAAY;AACvC,WAAO,OAAO,QAAQ,GAAG;AACvB,YAAM,WAAW,OAAO,QAAQ,EAAE;AAClC,YAAM,YAAY,QAAQ,QAAQ,EAAE;AACpC,UAAI,KAAK,WAAW,UAAU,SAAS,MAAM,GAAG;AAC9C,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,UAAU;AACR,UAAM,MAAM,CAAC;AACb,SAAK,QAAQ,cAAY;AACvB,UAAI,KAAK,QAAQ;AAAA,IACnB,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,WAAW;AACT,UAAM,SAAS,CAAC;AAChB,SAAK,QAAQ,UAAQ,OAAO,KAAK,IAAI,CAAC;AACtC,WAAO,eAAe,OAAO,SAAS,IAAI;AAAA,EAC5C;AAAA,EACA,KAAK,MAAM;AACT,UAAM,SAAS,IAAI,WAAU,KAAK,UAAU;AAC5C,WAAO,OAAO;AACd,WAAO;AAAA,EACT;AACF;AACA,IAAM,oBAAN,MAAwB;AAAA,EACtB,YAAY,MAAM;AAChB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,UAAU;AACR,WAAO,KAAK,KAAK,QAAQ,EAAE;AAAA,EAC7B;AAAA,EACA,UAAU;AACR,WAAO,KAAK,KAAK,QAAQ;AAAA,EAC3B;AACF;AAkBA,SAAS,eAAe,QAAQ,OAAO,YAAY,OAAO,UAAU;AAClE,QAAM,WAAW,OAAO,YAAY;AACpC,QAAM,UAAU,MAAM,YAAY;AAClC,MAAI,cAAc,gBAAgB,QAAQ;AAC1C,MAAI,aAAa,gBAAgB,OAAO;AAGxC,SAAO,eAAe,YAAY;AAChC,QAAI,QAAQ;AACZ,QAAI,UAAU;AACd,QAAI,eAAe,YAAY;AAC7B,YAAM,MAAM,WAAW,aAAa,UAAU;AAC9C,UAAI,MAAM,GAAG;AAGX,kBAAU;AAAA,MACZ,WAAW,MAAM,GAAG;AAGlB,gBAAQ;AAAA,MACV;AAAA,IACF,WAAW,eAAe,MAAM;AAC9B,gBAAU;AAAA,IACZ,OAAO;AACL,cAAQ;AAAA,IACV;AACA,QAAI,OAAO;AACT,YAAM,UAAU;AAChB,mBAAa,gBAAgB,OAAO;AAAA,IACtC,WAAW,SAAS;AAClB,eAAS,WAAW;AACpB,oBAAc,gBAAgB,QAAQ;AAAA,IACxC,OAAO;AACL,oBAAc,gBAAgB,QAAQ;AACtC,mBAAa,gBAAgB,OAAO;AAAA,IACtC;AAAA,EACF;AACF;AAIA,SAAS,gBAAgB,IAAI;AAC3B,SAAO,GAAG,QAAQ,IAAI,GAAG,QAAQ,IAAI;AACvC;AA4BA,IAAM,YAAN,MAAM,WAAU;AAAA,EACd,YAAY,QAAQ;AAClB,SAAK,SAAS;AAGd,WAAO,KAAK,YAAY,UAAU;AAAA,EACpC;AAAA,EACA,OAAO,QAAQ;AACb,WAAO,IAAI,WAAU,CAAC,CAAC;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,aAAa;AACrB,QAAI,gBAAgB,IAAI,UAAU,YAAY,UAAU;AACxD,eAAW,aAAa,KAAK,QAAQ;AACnC,sBAAgB,cAAc,IAAI,SAAS;AAAA,IAC7C;AACA,eAAW,aAAa,aAAa;AACnC,sBAAgB,cAAc,IAAI,SAAS;AAAA,IAC7C;AACA,WAAO,IAAI,WAAU,cAAc,QAAQ,CAAC;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,WAAW;AAChB,eAAW,iBAAiB,KAAK,QAAQ;AACvC,UAAI,cAAc,WAAW,SAAS,GAAG;AACvC,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,YAAY,KAAK,QAAQ,MAAM,QAAQ,CAAC,GAAG,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EACtE;AACF;AAmBA,SAAS,aAAa,SAAS;AAG7B,SAAO,OAAO,KAAK,SAAS,QAAQ,EAAE,SAAS,QAAQ;AACzD;AAEA,SAAS,aAAa,KAAK;AACzB,SAAO,OAAO,KAAK,KAAK,QAAQ,EAAE,SAAS,QAAQ;AACrD;AAEA,SAAS,oBAAoB;AAC3B,SAAO;AACT;AA2BA,IAAM,aAAN,MAAM,YAAW;AAAA,EACf,YAAY,cAAc;AACxB,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,OAAO,iBAAiB,QAAQ;AAC9B,UAAM,eAAe,aAAa,MAAM;AACxC,WAAO,IAAI,YAAW,YAAY;AAAA,EACpC;AAAA,EACA,OAAO,eAAe,OAAO;AAG3B,UAAM,eAAe,2BAA2B,KAAK;AACrD,WAAO,IAAI,YAAW,YAAY;AAAA,EACpC;AAAA,EACA,CAAC,OAAO,QAAQ,IAAI;AAClB,QAAI,IAAI;AACR,WAAO;AAAA,MACL,MAAM,MAAM;AACV,YAAI,IAAI,KAAK,aAAa,QAAQ;AAChC,iBAAO;AAAA,YACL,OAAO,KAAK,aAAa,WAAW,GAAG;AAAA,YACvC,MAAM;AAAA,UACR;AAAA,QACF,OAAO;AACL,iBAAO;AAAA,YACL,OAAO;AAAA,YACP,MAAM;AAAA,UACR;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA,EACA,WAAW;AACT,WAAO,aAAa,KAAK,YAAY;AAAA,EACvC;AAAA,EACA,eAAe;AACb,WAAO,2BAA2B,KAAK,YAAY;AAAA,EACrD;AAAA,EACA,sBAAsB;AACpB,WAAO,KAAK,aAAa,SAAS;AAAA,EACpC;AAAA,EACA,UAAU,OAAO;AACf,WAAO,oBAAoB,KAAK,cAAc,MAAM,YAAY;AAAA,EAClE;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,KAAK,iBAAiB,MAAM;AAAA,EACrC;AACF;AACA,WAAW,oBAAoB,IAAI,WAAW,EAAE;AAIhD,SAAS,2BAA2B,OAAO;AACzC,MAAI,eAAe;AACnB,WAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACrC,oBAAgB,OAAO,aAAa,MAAM,CAAC,CAAC;AAAA,EAC9C;AACA,SAAO;AACT;AAIA,SAAS,2BAA2B,cAAc;AAChD,QAAM,SAAS,IAAI,WAAW,aAAa,MAAM;AACjD,WAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,WAAO,CAAC,IAAI,aAAa,WAAW,CAAC;AAAA,EACvC;AACA,SAAO;AACT;AAmBA,IAAM,wBAAwB,IAAI,OAAO,+CAA+C;AAKxF,SAAS,mBAAmB,MAAM;AAChC,aAAW,CAAC,CAAC,IAAI;AAIjB,MAAI,OAAO,SAAS,UAAU;AAI5B,QAAI,QAAQ;AACZ,UAAM,WAAW,sBAAsB,KAAK,IAAI;AAChD,eAAW,CAAC,CAAC,QAAQ;AACrB,QAAI,SAAS,CAAC,GAAG;AAEf,UAAI,UAAU,SAAS,CAAC;AACxB,iBAAW,UAAU,aAAa,OAAO,GAAG,CAAC;AAC7C,cAAQ,OAAO,OAAO;AAAA,IACxB;AAEA,UAAM,aAAa,IAAI,KAAK,IAAI;AAChC,UAAM,UAAU,KAAK,MAAM,WAAW,QAAQ,IAAI,GAAI;AACtD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF,OAAO;AAIL,UAAM,UAAU,gBAAgB,KAAK,OAAO;AAC5C,UAAM,QAAQ,gBAAgB,KAAK,KAAK;AACxC,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF;AACF;AAKA,SAAS,gBAAgB,OAAO;AAE9B,MAAI,OAAO,UAAU,UAAU;AAC7B,WAAO;AAAA,EACT,WAAW,OAAO,UAAU,UAAU;AACpC,WAAO,OAAO,KAAK;AAAA,EACrB,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAEA,SAAS,oBAAoB,MAAM;AACjC,MAAI,OAAO,SAAS,UAAU;AAC5B,WAAO,WAAW,iBAAiB,IAAI;AAAA,EACzC,OAAO;AACL,WAAO,WAAW,eAAe,IAAI;AAAA,EACvC;AACF;AAoCA,IAAM,4BAA4B;AAClC,IAAM,aAAa;AACnB,IAAM,qBAAqB;AAC3B,IAAM,uBAAuB;AAC7B,SAAS,kBAAkB,OAAO;AAChC,MAAI,IAAI;AACR,QAAM,QAAQ,QAAQ,KAAK,UAAU,QAAQ,UAAU,SAAS,SAAS,MAAM,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,CAAC,GAAG,UAAU,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG;AACrM,SAAO,SAAS;AAClB;AAIA,SAAS,kBAAkB,gBAAgB,eAAe;AACxD,QAAM,WAAW;AAAA,IACf,QAAQ;AAAA,MACN,CAAC,UAAU,GAAG;AAAA,QACZ,aAAa;AAAA,MACf;AAAA,MACA,CAAC,oBAAoB,GAAG;AAAA,QACtB,gBAAgB;AAAA,UACd,SAAS,eAAe;AAAA,UACxB,OAAO,eAAe;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AAAA,EACF;AASA,MAAI,iBAAiB,kBAAkB,aAAa,GAAG;AACrD,oBAAgB,iBAAiB,aAAa;AAAA,EAChD;AACA,MAAI,eAAe;AACjB,aAAS,OAAO,kBAAkB,IAAI;AAAA,EACxC;AACA,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAOA,SAAS,iBAAiB,OAAO;AAC/B,QAAM,gBAAgB,MAAM,SAAS,OAAO,kBAAkB;AAC9D,MAAI,kBAAkB,aAAa,GAAG;AACpC,WAAO,iBAAiB,aAAa;AAAA,EACvC;AACA,SAAO;AACT;AAIA,SAAS,kBAAkB,OAAO;AAChC,QAAM,iBAAiB,mBAAmB,MAAM,SAAS,OAAO,oBAAoB,EAAE,cAAc;AACpG,SAAO,IAAI,UAAU,eAAe,SAAS,eAAe,KAAK;AACnE;AAkBA,IAAM,eAAN,MAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBjB,YAAY,YAAY,OAAO,gBAAgB,MAAM,KAAK,kBAAkB,uBAAuB,oBAAoB,iBAAiB;AACtI,SAAK,aAAa;AAClB,SAAK,QAAQ;AACb,SAAK,iBAAiB;AACtB,SAAK,OAAO;AACZ,SAAK,MAAM;AACX,SAAK,mBAAmB;AACxB,SAAK,wBAAwB;AAC7B,SAAK,qBAAqB;AAC1B,SAAK,kBAAkB;AAAA,EACzB;AACF;AAEA,IAAM,wBAAwB;AAK9B,IAAM,aAAN,MAAM,YAAW;AAAA,EACf,YAAY,WAAW,UAAU;AAC/B,SAAK,YAAY;AACjB,SAAK,WAAW,WAAW,WAAW;AAAA,EACxC;AAAA,EACA,OAAO,QAAQ;AACb,WAAO,IAAI,YAAW,IAAI,EAAE;AAAA,EAC9B;AAAA,EACA,IAAI,oBAAoB;AACtB,WAAO,KAAK,aAAa;AAAA,EAC3B;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,iBAAiB,eAAc,MAAM,cAAc,KAAK,aAAa,MAAM,aAAa,KAAK;AAAA,EACtG;AACF;AACA,SAAS,kBAAkB,KAAK,UAAU;AACxC,MAAI,CAAC,OAAO,UAAU,eAAe,MAAM,IAAI,SAAS,CAAC,WAAW,CAAC,GAAG;AACtE,UAAM,IAAI,eAAe,KAAK,kBAAkB,qDAAqD;AAAA,EACvG;AACA,SAAO,IAAI,WAAW,IAAI,QAAQ,WAAW,QAAQ;AACvD;AAmBA,IAAM,kBAAkB;AAIxB,SAAS,kBAAkB,OAAO;AAChC,SAAO,UAAU,QAAQ,UAAU;AACrC;AAEA,SAAS,eAAe,OAAO;AAG7B,SAAO,UAAU,KAAK,IAAI,UAAU,IAAI;AAC1C;AAKA,SAAS,cAAc,OAAO;AAC5B,SAAO,OAAO,UAAU,YAAY,OAAO,UAAU,KAAK,KAAK,CAAC,eAAe,KAAK,KAAK,SAAS,OAAO,oBAAoB,SAAS,OAAO;AAC/I;AAkBA,IAAM,WAAW;AACjB,IAAM,iBAAiB;AACvB,IAAM,YAAY;AAAA,EAChB,UAAU;AAAA,IACR,QAAQ;AAAA,MACN,YAAY;AAAA,QACV,aAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF;AACF;AACA,IAAM,wBAAwB;AAC9B,IAAM,yBAAyB;AAC/B,IAAM,YAAY;AAAA,EAChB,WAAW;AACb;AAEA,SAAS,UAAU,OAAO;AACxB,MAAI,eAAe,OAAO;AACxB,WAAO;AAAA,EACT,WAAW,kBAAkB,OAAO;AAClC,WAAO;AAAA,EACT,WAAW,kBAAkB,SAAS,iBAAiB,OAAO;AAC5D,WAAO;AAAA,EACT,WAAW,oBAAoB,OAAO;AACpC,WAAO;AAAA,EACT,WAAW,iBAAiB,OAAO;AACjC,WAAO;AAAA,EACT,WAAW,gBAAgB,OAAO;AAChC,WAAO;AAAA,EACT,WAAW,oBAAoB,OAAO;AACpC,WAAO;AAAA,EACT,WAAW,mBAAmB,OAAO;AACnC,WAAO;AAAA,EACT,WAAW,gBAAgB,OAAO;AAChC,WAAO;AAAA,EACT,WAAW,cAAc,OAAO;AAC9B,QAAI,kBAAkB,KAAK,GAAG;AAC5B,aAAO;AAAA,IACT,WAAW,WAAW,KAAK,GAAG;AAC5B,aAAO;AAAA,IACT,WAAW,cAAc,KAAK,GAAG;AAC/B,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AAEA,SAAS,YAAY,MAAM,OAAO;AAChC,MAAI,SAAS,OAAO;AAClB,WAAO;AAAA,EACT;AACA,QAAM,WAAW,UAAU,IAAI;AAC/B,QAAM,YAAY,UAAU,KAAK;AACjC,MAAI,aAAa,WAAW;AAC1B,WAAO;AAAA,EACT;AACA,UAAQ,UAAU;AAAA,IAChB,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO,KAAK,iBAAiB,MAAM;AAAA,IACrC,KAAK;AACH,aAAO,kBAAkB,IAAI,EAAE,QAAQ,kBAAkB,KAAK,CAAC;AAAA,IACjE,KAAK;AACH,aAAO,gBAAgB,MAAM,KAAK;AAAA,IACpC,KAAK;AACH,aAAO,KAAK,gBAAgB,MAAM;AAAA,IACpC,KAAK;AACH,aAAO,WAAW,MAAM,KAAK;AAAA,IAC/B,KAAK;AACH,aAAO,KAAK,mBAAmB,MAAM;AAAA,IACvC,KAAK;AACH,aAAO,eAAe,MAAM,KAAK;AAAA,IACnC,KAAK;AACH,aAAO,aAAa,MAAM,KAAK;AAAA,IACjC,KAAK;AACH,aAAO,YAAY,KAAK,WAAW,UAAU,CAAC,GAAG,MAAM,WAAW,UAAU,CAAC,GAAG,WAAW;AAAA,IAC7F,KAAK;AAAA,IACL,KAAK;AACH,aAAO,aAAa,MAAM,KAAK;AAAA,IACjC,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AACA,SAAS,gBAAgB,MAAM,OAAO;AACpC,MAAI,OAAO,KAAK,mBAAmB,YAAY,OAAO,MAAM,mBAAmB,YAAY,KAAK,eAAe,WAAW,MAAM,eAAe,QAAQ;AAErJ,WAAO,KAAK,mBAAmB,MAAM;AAAA,EACvC;AACA,QAAM,gBAAgB,mBAAmB,KAAK,cAAc;AAC5D,QAAM,iBAAiB,mBAAmB,MAAM,cAAc;AAC9D,SAAO,cAAc,YAAY,eAAe,WAAW,cAAc,UAAU,eAAe;AACpG;AACA,SAAS,eAAe,MAAM,OAAO;AACnC,SAAO,gBAAgB,KAAK,cAAc,QAAQ,MAAM,gBAAgB,MAAM,cAAc,QAAQ,KAAK,gBAAgB,KAAK,cAAc,SAAS,MAAM,gBAAgB,MAAM,cAAc,SAAS;AAC1M;AACA,SAAS,WAAW,MAAM,OAAO;AAC/B,SAAO,oBAAoB,KAAK,UAAU,EAAE,QAAQ,oBAAoB,MAAM,UAAU,CAAC;AAC3F;AACA,SAAS,aAAa,MAAM,OAAO;AACjC,MAAI,kBAAkB,QAAQ,kBAAkB,OAAO;AACrD,WAAO,gBAAgB,KAAK,YAAY,MAAM,gBAAgB,MAAM,YAAY;AAAA,EAClF,WAAW,iBAAiB,QAAQ,iBAAiB,OAAO;AAC1D,UAAM,KAAK,gBAAgB,KAAK,WAAW;AAC3C,UAAM,KAAK,gBAAgB,MAAM,WAAW;AAC5C,QAAI,OAAO,IAAI;AACb,aAAO,eAAe,EAAE,MAAM,eAAe,EAAE;AAAA,IACjD,OAAO;AACL,aAAO,MAAM,EAAE,KAAK,MAAM,EAAE;AAAA,IAC9B;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,aAAa,MAAM,OAAO;AACjC,QAAM,UAAU,KAAK,SAAS,UAAU,CAAC;AACzC,QAAM,WAAW,MAAM,SAAS,UAAU,CAAC;AAC3C,MAAI,WAAW,OAAO,MAAM,WAAW,QAAQ,GAAG;AAChD,WAAO;AAAA,EACT;AACA,aAAW,OAAO,SAAS;AACzB,QAAI,QAAQ,eAAe,GAAG,GAAG;AAC/B,UAAI,SAAS,GAAG,MAAM,UAAa,CAAC,YAAY,QAAQ,GAAG,GAAG,SAAS,GAAG,CAAC,GAAG;AAC5E,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAEA,SAAS,mBAAmB,UAAU,QAAQ;AAC5C,UAAQ,SAAS,UAAU,CAAC,GAAG,KAAK,OAAK,YAAY,GAAG,MAAM,CAAC,MAAM;AACvE;AACA,SAAS,aAAa,MAAM,OAAO;AACjC,MAAI,SAAS,OAAO;AAClB,WAAO;AAAA,EACT;AACA,QAAM,WAAW,UAAU,IAAI;AAC/B,QAAM,YAAY,UAAU,KAAK;AACjC,MAAI,aAAa,WAAW;AAC1B,WAAO,oBAAoB,UAAU,SAAS;AAAA,EAChD;AACA,UAAQ,UAAU;AAAA,IAChB,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO,oBAAoB,KAAK,cAAc,MAAM,YAAY;AAAA,IAClE,KAAK;AACH,aAAO,eAAe,MAAM,KAAK;AAAA,IACnC,KAAK;AACH,aAAO,kBAAkB,KAAK,gBAAgB,MAAM,cAAc;AAAA,IACpE,KAAK;AACH,aAAO,kBAAkB,kBAAkB,IAAI,GAAG,kBAAkB,KAAK,CAAC;AAAA,IAC5E,KAAK;AACH,aAAO,oBAAoB,KAAK,aAAa,MAAM,WAAW;AAAA,IAChE,KAAK;AACH,aAAO,aAAa,KAAK,YAAY,MAAM,UAAU;AAAA,IACvD,KAAK;AACH,aAAO,kBAAkB,KAAK,gBAAgB,MAAM,cAAc;AAAA,IACpE,KAAK;AACH,aAAO,iBAAiB,KAAK,eAAe,MAAM,aAAa;AAAA,IACjE,KAAK;AACH,aAAO,cAAc,KAAK,YAAY,MAAM,UAAU;AAAA,IACxD,KAAK;AACH,aAAO,eAAe,KAAK,UAAU,MAAM,QAAQ;AAAA,IACrD,KAAK;AACH,aAAO,YAAY,KAAK,UAAU,MAAM,QAAQ;AAAA,IAClD;AACE,YAAM,KAAK;AAAA,EACf;AACF;AACA,SAAS,eAAe,MAAM,OAAO;AACnC,QAAM,aAAa,gBAAgB,KAAK,gBAAgB,KAAK,WAAW;AACxE,QAAM,cAAc,gBAAgB,MAAM,gBAAgB,MAAM,WAAW;AAC3E,MAAI,aAAa,aAAa;AAC5B,WAAO;AAAA,EACT,WAAW,aAAa,aAAa;AACnC,WAAO;AAAA,EACT,WAAW,eAAe,aAAa;AACrC,WAAO;AAAA,EACT,OAAO;AAEL,QAAI,MAAM,UAAU,GAAG;AACrB,aAAO,MAAM,WAAW,IAAI,IAAI;AAAA,IAClC,OAAO;AACL,aAAO;AAAA,IACT;AAAA,EACF;AACF;AACA,SAAS,kBAAkB,MAAM,OAAO;AACtC,MAAI,OAAO,SAAS,YAAY,OAAO,UAAU,YAAY,KAAK,WAAW,MAAM,QAAQ;AACzF,WAAO,oBAAoB,MAAM,KAAK;AAAA,EACxC;AACA,QAAM,gBAAgB,mBAAmB,IAAI;AAC7C,QAAM,iBAAiB,mBAAmB,KAAK;AAC/C,QAAM,aAAa,oBAAoB,cAAc,SAAS,eAAe,OAAO;AACpF,MAAI,eAAe,GAAG;AACpB,WAAO;AAAA,EACT;AACA,SAAO,oBAAoB,cAAc,OAAO,eAAe,KAAK;AACtE;AACA,SAAS,kBAAkB,UAAU,WAAW;AAC9C,QAAM,eAAe,SAAS,MAAM,GAAG;AACvC,QAAM,gBAAgB,UAAU,MAAM,GAAG;AACzC,WAAS,IAAI,GAAG,IAAI,aAAa,UAAU,IAAI,cAAc,QAAQ,KAAK;AACxE,UAAM,aAAa,oBAAoB,aAAa,CAAC,GAAG,cAAc,CAAC,CAAC;AACxE,QAAI,eAAe,GAAG;AACpB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,oBAAoB,aAAa,QAAQ,cAAc,MAAM;AACtE;AACA,SAAS,iBAAiB,MAAM,OAAO;AACrC,QAAM,aAAa,oBAAoB,gBAAgB,KAAK,QAAQ,GAAG,gBAAgB,MAAM,QAAQ,CAAC;AACtG,MAAI,eAAe,GAAG;AACpB,WAAO;AAAA,EACT;AACA,SAAO,oBAAoB,gBAAgB,KAAK,SAAS,GAAG,gBAAgB,MAAM,SAAS,CAAC;AAC9F;AACA,SAAS,aAAa,MAAM,OAAO;AACjC,QAAM,YAAY,oBAAoB,IAAI;AAC1C,QAAM,aAAa,oBAAoB,KAAK;AAC5C,SAAO,UAAU,UAAU,UAAU;AACvC;AACA,SAAS,cAAc,MAAM,OAAO;AAClC,QAAM,YAAY,KAAK,UAAU,CAAC;AAClC,QAAM,aAAa,MAAM,UAAU,CAAC;AACpC,WAAS,IAAI,GAAG,IAAI,UAAU,UAAU,IAAI,WAAW,QAAQ,EAAE,GAAG;AAClE,UAAM,UAAU,aAAa,UAAU,CAAC,GAAG,WAAW,CAAC,CAAC;AACxD,QAAI,SAAS;AACX,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,oBAAoB,UAAU,QAAQ,WAAW,MAAM;AAChE;AACA,SAAS,eAAe,MAAM,OAAO;AACnC,MAAI,IAAI,IAAI,IAAI;AAChB,QAAM,UAAU,KAAK,UAAU,CAAC;AAChC,QAAM,WAAW,MAAM,UAAU,CAAC;AAElC,QAAM,kBAAkB,KAAK,QAAQ,sBAAsB,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG;AACtG,QAAM,mBAAmB,KAAK,SAAS,sBAAsB,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG;AACxG,QAAM,gBAAgB,sBAAsB,KAAK,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,KAAK,KAAK,oBAAoB,QAAQ,oBAAoB,SAAS,SAAS,gBAAgB,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,CAAC;AACnV,MAAI,kBAAkB,GAAG;AACvB,WAAO;AAAA,EACT;AACA,SAAO,cAAc,gBAAgB,eAAe;AACtD;AACA,SAAS,YAAY,MAAM,OAAO;AAChC,MAAI,SAAS,UAAU,YAAY,UAAU,UAAU,UAAU;AAC/D,WAAO;AAAA,EACT,WAAW,SAAS,UAAU,UAAU;AACtC,WAAO;AAAA,EACT,WAAW,UAAU,UAAU,UAAU;AACvC,WAAO;AAAA,EACT;AACA,QAAM,UAAU,KAAK,UAAU,CAAC;AAChC,QAAM,WAAW,OAAO,KAAK,OAAO;AACpC,QAAM,WAAW,MAAM,UAAU,CAAC;AAClC,QAAM,YAAY,OAAO,KAAK,QAAQ;AAKtC,WAAS,KAAK;AACd,YAAU,KAAK;AACf,WAAS,IAAI,GAAG,IAAI,SAAS,UAAU,IAAI,UAAU,QAAQ,EAAE,GAAG;AAChE,UAAM,aAAa,oBAAoB,SAAS,CAAC,GAAG,UAAU,CAAC,CAAC;AAChE,QAAI,eAAe,GAAG;AACpB,aAAO;AAAA,IACT;AACA,UAAM,UAAU,aAAa,QAAQ,SAAS,CAAC,CAAC,GAAG,SAAS,UAAU,CAAC,CAAC,CAAC;AACzE,QAAI,YAAY,GAAG;AACjB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,oBAAoB,SAAS,QAAQ,UAAU,MAAM;AAC9D;AAKA,SAAS,YAAY,OAAO;AAC1B,SAAO,cAAc,KAAK;AAC5B;AACA,SAAS,cAAc,OAAO;AAC5B,MAAI,eAAe,OAAO;AACxB,WAAO;AAAA,EACT,WAAW,kBAAkB,OAAO;AAClC,WAAO,KAAK,MAAM;AAAA,EACpB,WAAW,kBAAkB,OAAO;AAClC,WAAO,KAAK,MAAM;AAAA,EACpB,WAAW,iBAAiB,OAAO;AACjC,WAAO,KAAK,MAAM;AAAA,EACpB,WAAW,oBAAoB,OAAO;AACpC,WAAO,kBAAkB,MAAM,cAAc;AAAA,EAC/C,WAAW,iBAAiB,OAAO;AACjC,WAAO,MAAM;AAAA,EACf,WAAW,gBAAgB,OAAO;AAChC,WAAO,mBAAmB,MAAM,UAAU;AAAA,EAC5C,WAAW,oBAAoB,OAAO;AACpC,WAAO,kBAAkB,MAAM,cAAc;AAAA,EAC/C,WAAW,mBAAmB,OAAO;AACnC,WAAO,iBAAiB,MAAM,aAAa;AAAA,EAC7C,WAAW,gBAAgB,OAAO;AAChC,WAAO,cAAc,MAAM,UAAU;AAAA,EACvC,WAAW,cAAc,OAAO;AAC9B,WAAO,YAAY,MAAM,QAAQ;AAAA,EACnC,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,mBAAmB,YAAY;AACtC,SAAO,oBAAoB,UAAU,EAAE,SAAS;AAClD;AACA,SAAS,kBAAkB,WAAW;AACpC,QAAM,sBAAsB,mBAAmB,SAAS;AACxD,SAAO,QAAQ,oBAAoB,OAAO,IAAI,oBAAoB,KAAK;AACzE;AACA,SAAS,iBAAiB,UAAU;AAClC,SAAO,OAAO,SAAS,QAAQ,IAAI,SAAS,SAAS;AACvD;AACA,SAAS,kBAAkB,gBAAgB;AACzC,SAAO,YAAY,SAAS,cAAc,EAAE,SAAS;AACvD;AACA,SAAS,YAAY,UAAU;AAG7B,QAAM,aAAa,OAAO,KAAK,SAAS,UAAU,CAAC,CAAC,EAAE,KAAK;AAC3D,MAAI,SAAS;AACb,MAAI,QAAQ;AACZ,aAAW,OAAO,YAAY;AAC5B,QAAI,CAAC,OAAO;AACV,gBAAU;AAAA,IACZ,OAAO;AACL,cAAQ;AAAA,IACV;AACA,cAAU,GAAG,GAAG,IAAI,cAAc,SAAS,OAAO,GAAG,CAAC,CAAC;AAAA,EACzD;AACA,SAAO,SAAS;AAClB;AACA,SAAS,cAAc,YAAY;AACjC,MAAI,SAAS;AACb,MAAI,QAAQ;AACZ,aAAW,SAAS,WAAW,UAAU,CAAC,GAAG;AAC3C,QAAI,CAAC,OAAO;AACV,gBAAU;AAAA,IACZ,OAAO;AACL,cAAQ;AAAA,IACV;AACA,cAAU,cAAc,KAAK;AAAA,EAC/B;AACA,SAAO,SAAS;AAClB;AAQA,SAAS,iBAAiB,OAAO;AAC/B,UAAQ,UAAU,KAAK,GAAG;AAAA,IACxB,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAEH,aAAO;AAAA,IACT,KAAK;AACH,YAAM,gBAAgB,iBAAiB,KAAK;AAC5C,aAAO,gBAAgB,KAAK,iBAAiB,aAAa,IAAI;AAAA,IAChE,KAAK;AAIH,aAAO,MAAM,YAAY,SAAS;AAAA,IACpC,KAAK;AACH,aAAO,oBAAoB,MAAM,UAAU,EAAE,oBAAoB;AAAA,IACnE,KAAK;AACH,aAAO,MAAM,eAAe;AAAA,IAC9B,KAAK;AAEH,aAAO;AAAA,IACT,KAAK;AACH,aAAO,sBAAsB,MAAM,UAAU;AAAA,IAC/C,KAAK;AAAA,IACL,KAAK;AACH,aAAO,oBAAoB,MAAM,QAAQ;AAAA,IAC3C;AACE,YAAM,KAAK;AAAA,EACf;AACF;AACA,SAAS,oBAAoB,UAAU;AACrC,MAAI,OAAO;AACX,UAAQ,SAAS,QAAQ,CAAC,KAAK,QAAQ;AACrC,YAAQ,IAAI,SAAS,iBAAiB,GAAG;AAAA,EAC3C,CAAC;AACD,SAAO;AACT;AACA,SAAS,sBAAsB,YAAY;AACzC,UAAQ,WAAW,UAAU,CAAC,GAAG,OAAO,CAAC,cAAc,UAAU,eAAe,iBAAiB,KAAK,GAAG,CAAC;AAC5G;AAEA,SAAS,SAAS,YAAY,KAAK;AACjC,SAAO;AAAA,IACL,gBAAgB,YAAY,WAAW,SAAS,cAAc,WAAW,QAAQ,cAAc,IAAI,KAAK,gBAAgB,CAAC;AAAA,EAC3H;AACF;AAEA,SAAS,UAAU,OAAO;AACxB,SAAO,CAAC,CAAC,SAAS,kBAAkB;AACtC;AAEA,SAAS,SAAS,OAAO;AACvB,SAAO,CAAC,CAAC,SAAS,iBAAiB;AACrC;AAEA,SAAS,SAAS,OAAO;AACvB,SAAO,UAAU,KAAK,KAAK,SAAS,KAAK;AAC3C;AAEA,SAAS,QAAQ,OAAO;AACtB,SAAO,CAAC,CAAC,SAAS,gBAAgB;AACpC;AAEA,SAAS,YAAY,OAAO;AAC1B,SAAO,CAAC,CAAC,SAAS,eAAe;AACnC;AAEA,SAAS,WAAW,OAAO;AACzB,SAAO,CAAC,CAAC,SAAS,iBAAiB,SAAS,MAAM,OAAO,MAAM,WAAW,CAAC;AAC7E;AAEA,SAAS,WAAW,OAAO;AACzB,SAAO,CAAC,CAAC,SAAS,cAAc;AAClC;AAEA,SAAS,cAAc,OAAO;AAC5B,MAAI,IAAI;AACR,QAAM,QAAQ,QAAQ,KAAK,UAAU,QAAQ,UAAU,SAAS,SAAS,MAAM,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,CAAC,GAAG,QAAQ,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG;AACnM,SAAO,SAAS;AAClB;AAEA,SAAS,UAAU,QAAQ;AACzB,MAAI,OAAO,eAAe;AACxB,WAAO;AAAA,MACL,eAAe,OAAO,OAAO,CAAC,GAAG,OAAO,aAAa;AAAA,IACvD;AAAA,EACF,WAAW,OAAO,kBAAkB,OAAO,OAAO,mBAAmB,UAAU;AAC7E,WAAO;AAAA,MACL,gBAAgB,OAAO,OAAO,CAAC,GAAG,OAAO,cAAc;AAAA,IACzD;AAAA,EACF,WAAW,OAAO,UAAU;AAC1B,UAAM,SAAS;AAAA,MACb,UAAU;AAAA,QACR,QAAQ,CAAC;AAAA,MACX;AAAA,IACF;AACA,YAAQ,OAAO,SAAS,QAAQ,CAAC,KAAK,QAAQ,OAAO,SAAS,OAAO,GAAG,IAAI,UAAU,GAAG,CAAC;AAC1F,WAAO;AAAA,EACT,WAAW,OAAO,YAAY;AAC5B,UAAM,SAAS;AAAA,MACb,YAAY;AAAA,QACV,QAAQ,CAAC;AAAA,MACX;AAAA,IACF;AACA,aAAS,IAAI,GAAG,KAAK,OAAO,WAAW,UAAU,CAAC,GAAG,QAAQ,EAAE,GAAG;AAChE,aAAO,WAAW,OAAO,CAAC,IAAI,UAAU,OAAO,WAAW,OAAO,CAAC,CAAC;AAAA,IACrE;AACA,WAAO;AAAA,EACT,OAAO;AACL,WAAO,OAAO,OAAO,CAAC,GAAG,MAAM;AAAA,EACjC;AACF;AAEA,SAAS,WAAW,OAAO;AACzB,YAAU,MAAM,YAAY,CAAC,GAAG,UAAU,CAAC,GAAG,UAAU,KAAK,CAAC,GAAG,gBAAgB;AACnF;AACA,IAAM,mBAAmB;AAAA,EACvB,UAAU;AAAA,IACR,QAAQ;AAAA,MACN,CAAC,QAAQ,GAAG;AAAA,QACV,aAAa;AAAA,MACf;AAAA,MACA,CAAC,sBAAsB,GAAG;AAAA,QACxB,YAAY,CAAC;AAAA,MACf;AAAA,IACF;AAAA,EACF;AACF;AAEA,SAAS,oBAAoB,OAAO;AAClC,MAAI,eAAe,OAAO;AACxB,WAAO;AAAA,EACT,WAAW,kBAAkB,OAAO;AAClC,WAAO;AAAA,MACL,cAAc;AAAA,IAChB;AAAA,EACF,WAAW,kBAAkB,SAAS,iBAAiB,OAAO;AAC5D,WAAO;AAAA,MACL,aAAa;AAAA,IACf;AAAA,EACF,WAAW,oBAAoB,OAAO;AACpC,WAAO;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS,OAAO;AAAA,MAClB;AAAA,IACF;AAAA,EACF,WAAW,iBAAiB,OAAO;AACjC,WAAO;AAAA,MACL,aAAa;AAAA,IACf;AAAA,EACF,WAAW,gBAAgB,OAAO;AAChC,WAAO;AAAA,MACL,YAAY;AAAA,IACd;AAAA,EACF,WAAW,oBAAoB,OAAO;AACpC,WAAO,SAAS,WAAW,MAAM,GAAG,YAAY,MAAM,CAAC;AAAA,EACzD,WAAW,mBAAmB,OAAO;AACnC,WAAO;AAAA,MACL,eAAe;AAAA,QACb,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,IACF;AAAA,EACF,WAAW,gBAAgB,OAAO;AAChC,WAAO;AAAA,MACL,YAAY,CAAC;AAAA,IACf;AAAA,EACF,WAAW,cAAc,OAAO;AAC9B,QAAI,cAAc,KAAK,GAAG;AACxB,aAAO;AAAA,IACT;AACA,WAAO;AAAA,MACL,UAAU,CAAC;AAAA,IACb;AAAA,EACF,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AAEA,SAAS,oBAAoB,OAAO;AAClC,MAAI,eAAe,OAAO;AACxB,WAAO;AAAA,MACL,cAAc;AAAA,IAChB;AAAA,EACF,WAAW,kBAAkB,OAAO;AAClC,WAAO;AAAA,MACL,aAAa;AAAA,IACf;AAAA,EACF,WAAW,kBAAkB,SAAS,iBAAiB,OAAO;AAC5D,WAAO;AAAA,MACL,gBAAgB;AAAA,QACd,SAAS,OAAO;AAAA,MAClB;AAAA,IACF;AAAA,EACF,WAAW,oBAAoB,OAAO;AACpC,WAAO;AAAA,MACL,aAAa;AAAA,IACf;AAAA,EACF,WAAW,iBAAiB,OAAO;AACjC,WAAO;AAAA,MACL,YAAY;AAAA,IACd;AAAA,EACF,WAAW,gBAAgB,OAAO;AAChC,WAAO,SAAS,WAAW,MAAM,GAAG,YAAY,MAAM,CAAC;AAAA,EACzD,WAAW,oBAAoB,OAAO;AACpC,WAAO;AAAA,MACL,eAAe;AAAA,QACb,UAAU;AAAA,QACV,WAAW;AAAA,MACb;AAAA,IACF;AAAA,EACF,WAAW,mBAAmB,OAAO;AACnC,WAAO;AAAA,MACL,YAAY,CAAC;AAAA,IACf;AAAA,EACF,WAAW,gBAAgB,OAAO;AAChC,WAAO;AAAA,EACT,WAAW,cAAc,OAAO;AAC9B,QAAI,cAAc,KAAK,GAAG;AACxB,aAAO;AAAA,QACL,UAAU,CAAC;AAAA,MACb;AAAA,IACF;AACA,WAAO;AAAA,EACT,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,kBAAkB,MAAM,OAAO;AACtC,QAAM,MAAM,aAAa,KAAK,OAAO,MAAM,KAAK;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,MAAI,KAAK,aAAa,CAAC,MAAM,WAAW;AACtC,WAAO;AAAA,EACT,WAAW,CAAC,KAAK,aAAa,MAAM,WAAW;AAC7C,WAAO;AAAA,EACT;AACA,SAAO;AACT;AACA,SAAS,kBAAkB,MAAM,OAAO;AACtC,QAAM,MAAM,aAAa,KAAK,OAAO,MAAM,KAAK;AAChD,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,MAAI,KAAK,aAAa,CAAC,MAAM,WAAW;AACtC,WAAO;AAAA,EACT,WAAW,CAAC,KAAK,aAAa,MAAM,WAAW;AAC7C,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAsBA,IAAM,cAAN,MAAM,aAAY;AAAA,EAChB,YAAY,OAAO;AACjB,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,OAAO,QAAQ;AACb,WAAO,IAAI,aAAY;AAAA,MACrB,UAAU,CAAC;AAAA,IACb,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,MAAM;AACV,QAAI,KAAK,QAAQ,GAAG;AAClB,aAAO,KAAK;AAAA,IACd,OAAO;AACL,UAAI,eAAe,KAAK;AACxB,eAAS,IAAI,GAAG,IAAI,KAAK,SAAS,GAAG,EAAE,GAAG;AACxC,wBAAgB,aAAa,SAAS,UAAU,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC;AAC/D,YAAI,CAAC,WAAW,YAAY,GAAG;AAC7B,iBAAO;AAAA,QACT;AAAA,MACF;AACA,sBAAgB,aAAa,SAAS,UAAU,CAAC,GAAG,KAAK,YAAY,CAAC;AACtE,aAAO,gBAAgB;AAAA,IACzB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,MAAM,OAAO;AACf,UAAM,YAAY,KAAK,aAAa,KAAK,QAAQ,CAAC;AAClD,cAAU,KAAK,YAAY,CAAC,IAAI,UAAU,KAAK;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,MAAM;AACX,QAAI,SAAS,YAAY,UAAU;AACnC,QAAI,UAAU,CAAC;AACf,QAAI,UAAU,CAAC;AACf,SAAK,QAAQ,CAAC,OAAO,SAAS;AAC5B,UAAI,CAAC,OAAO,oBAAoB,IAAI,GAAG;AAErC,cAAMC,aAAY,KAAK,aAAa,MAAM;AAC1C,aAAK,aAAaA,YAAW,SAAS,OAAO;AAC7C,kBAAU,CAAC;AACX,kBAAU,CAAC;AACX,iBAAS,KAAK,QAAQ;AAAA,MACxB;AACA,UAAI,OAAO;AACT,gBAAQ,KAAK,YAAY,CAAC,IAAI,UAAU,KAAK;AAAA,MAC/C,OAAO;AACL,gBAAQ,KAAK,KAAK,YAAY,CAAC;AAAA,MACjC;AAAA,IACF,CAAC;AACD,UAAM,YAAY,KAAK,aAAa,MAAM;AAC1C,SAAK,aAAa,WAAW,SAAS,OAAO;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,MAAM;AACX,UAAM,cAAc,KAAK,MAAM,KAAK,QAAQ,CAAC;AAC7C,QAAI,WAAW,WAAW,KAAK,YAAY,SAAS,QAAQ;AAC1D,aAAO,YAAY,SAAS,OAAO,KAAK,YAAY,CAAC;AAAA,IACvD;AAAA,EACF;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,YAAY,KAAK,OAAO,MAAM,KAAK;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,MAAM;AACjB,QAAI,UAAU,KAAK;AACnB,QAAI,CAAC,QAAQ,SAAS,QAAQ;AAC5B,cAAQ,WAAW;AAAA,QACjB,QAAQ,CAAC;AAAA,MACX;AAAA,IACF;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,UAAI,OAAO,QAAQ,SAAS,OAAO,KAAK,IAAI,CAAC,CAAC;AAC9C,UAAI,CAAC,WAAW,IAAI,KAAK,CAAC,KAAK,SAAS,QAAQ;AAC9C,eAAO;AAAA,UACL,UAAU;AAAA,YACR,QAAQ,CAAC;AAAA,UACX;AAAA,QACF;AACA,gBAAQ,SAAS,OAAO,KAAK,IAAI,CAAC,CAAC,IAAI;AAAA,MACzC;AACA,gBAAU;AAAA,IACZ;AACA,WAAO,QAAQ,SAAS;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,WAAW,SAAS,SAAS;AACxC,YAAQ,SAAS,CAAC,KAAK,QAAQ,UAAU,GAAG,IAAI,GAAG;AACnD,eAAW,SAAS,SAAS;AAC3B,aAAO,UAAU,KAAK;AAAA,IACxB;AAAA,EACF;AAAA,EACA,QAAQ;AACN,WAAO,IAAI,aAAY,UAAU,KAAK,KAAK,CAAC;AAAA,EAC9C;AACF;AAIA,SAAS,iBAAiB,OAAO;AAC/B,QAAM,SAAS,CAAC;AAChB,UAAQ,MAAM,QAAQ,CAAC,KAAKC,WAAU;AACpC,UAAM,cAAc,IAAI,YAAY,CAAC,GAAG,CAAC;AACzC,QAAI,WAAWA,MAAK,GAAG;AACrB,YAAM,aAAa,iBAAiBA,OAAM,QAAQ;AAClD,YAAM,eAAe,WAAW;AAChC,UAAI,aAAa,WAAW,GAAG;AAE7B,eAAO,KAAK,WAAW;AAAA,MACzB,OAAO;AAGL,mBAAW,cAAc,cAAc;AACrC,iBAAO,KAAK,YAAY,MAAM,UAAU,CAAC;AAAA,QAC3C;AAAA,MACF;AAAA,IACF,OAAO;AAGL,aAAO,KAAK,WAAW;AAAA,IACzB;AAAA,EACF,CAAC;AACD,SAAO,IAAI,UAAU,MAAM;AAC7B;AA4BA,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EACpB,YAAY,KAAK,cAAcR,UAAS,UAAU,YAAY,MAAM,eAAe;AACjF,SAAK,MAAM;AACX,SAAK,eAAe;AACpB,SAAK,UAAUA;AACf,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,OAAO;AACZ,SAAK,gBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,mBAAmB,aAAa;AACrC,WAAO,IAAI;AAAA,MAAgB;AAAA,MAAa;AAAA;AAAA,MAA2C,gBAAgB,IAAI;AAAA;AAAA,MAAiB,gBAAgB,IAAI;AAAA;AAAA,MAAmB,gBAAgB,IAAI;AAAA,MAAG,YAAY,MAAM;AAAA,MAAG;AAAA;AAAA,IAA4B;AAAA,EACzO;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,iBAAiB,aAAaA,UAAS,YAAY,OAAO;AAC/D,WAAO,IAAI;AAAA,MAAgB;AAAA,MAAa;AAAA;AAAA,MAAkDA;AAAA;AAAA,MAAuB,gBAAgB,IAAI;AAAA;AAAA,MAAmB;AAAA,MAAY;AAAA,MAAO;AAAA;AAAA,IAA4B;AAAA,EACzM;AAAA;AAAA,EAEA,OAAO,cAAc,aAAaA,UAAS;AACzC,WAAO,IAAI;AAAA,MAAgB;AAAA,MAAa;AAAA;AAAA,MAA+CA;AAAA;AAAA,MAAuB,gBAAgB,IAAI;AAAA;AAAA,MAAmB,gBAAgB,IAAI;AAAA,MAAG,YAAY,MAAM;AAAA,MAAG;AAAA;AAAA,IAA4B;AAAA,EAC/N;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,mBAAmB,aAAaA,UAAS;AAC9C,WAAO,IAAI;AAAA,MAAgB;AAAA,MAAa;AAAA;AAAA,MAAoDA;AAAA;AAAA,MAAuB,gBAAgB,IAAI;AAAA;AAAA,MAAmB,gBAAgB,IAAI;AAAA,MAAG,YAAY,MAAM;AAAA,MAAG;AAAA;AAAA,IAA6C;AAAA,EACrP;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuBA,UAAS,OAAO;AAMrC,QAAI,KAAK,WAAW,QAAQ,gBAAgB,IAAI,CAAC,MAAM,KAAK,iBAAiB,KAAoC,KAAK,iBAAiB,IAA+B;AACpK,WAAK,aAAaA;AAAA,IACpB;AACA,SAAK,UAAUA;AACf,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoBA,UAAS;AAC3B,SAAK,UAAUA;AACf,SAAK,eAAe;AACpB,SAAK,OAAO,YAAY,MAAM;AAC9B,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,yBAAyBA,UAAS;AAChC,SAAK,UAAUA;AACf,SAAK,eAAe;AACpB,SAAK,OAAO,YAAY,MAAM;AAC9B,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACT;AAAA,EACA,2BAA2B;AACzB,SAAK,gBAAgB;AACrB,WAAO;AAAA,EACT;AAAA,EACA,uBAAuB;AACrB,SAAK,gBAAgB;AACrB,SAAK,UAAU,gBAAgB,IAAI;AACnC,WAAO;AAAA,EACT;AAAA,EACA,YAAY,UAAU;AACpB,SAAK,WAAW;AAChB,WAAO;AAAA,EACT;AAAA,EACA,IAAI,oBAAoB;AACtB,WAAO,KAAK,kBAAkB;AAAA,EAChC;AAAA,EACA,IAAI,wBAAwB;AAC1B,WAAO,KAAK,kBAAkB;AAAA,EAChC;AAAA,EACA,IAAI,mBAAmB;AACrB,WAAO,KAAK,qBAAqB,KAAK;AAAA,EACxC;AAAA,EACA,kBAAkB;AAChB,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA,EACA,kBAAkB;AAChB,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA,EACA,eAAe;AACb,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA,EACA,oBAAoB;AAClB,WAAO,KAAK,iBAAiB;AAAA,EAC/B;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,iBAAiB,oBAAmB,KAAK,IAAI,QAAQ,MAAM,GAAG,KAAK,KAAK,QAAQ,QAAQ,MAAM,OAAO,KAAK,KAAK,iBAAiB,MAAM,gBAAgB,KAAK,kBAAkB,MAAM,iBAAiB,KAAK,KAAK,QAAQ,MAAM,IAAI;AAAA,EACzO;AAAA,EACA,cAAc;AACZ,WAAO,IAAI,iBAAgB,KAAK,KAAK,KAAK,cAAc,KAAK,SAAS,KAAK,UAAU,KAAK,YAAY,KAAK,KAAK,MAAM,GAAG,KAAK,aAAa;AAAA,EAC7I;AAAA,EACA,WAAW;AACT,WAAO,YAAY,KAAK,GAAG,KAAK,KAAK,OAAO,KAAK,KAAK,UAAU,KAAK,KAAK,KAAK,CAAC,kBAAuB,KAAK,UAAU,sBAA2B,KAAK,YAAY,uBAA4B,KAAK,aAAa;AAAA,EAClN;AACF;AAKA,SAAS,wBAAwB,OAAO,IAAI,IAAI;AAC9C,QAAM,KAAK,GAAG,KAAK,MAAM,KAAK;AAC9B,QAAM,KAAK,GAAG,KAAK,MAAM,KAAK;AAC9B,MAAI,OAAO,QAAQ,OAAO,MAAM;AAC9B,WAAO,aAAa,IAAI,EAAE;AAAA,EAC5B,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AAgCA,IAAM,QAAN,MAAY;AAAA,EACV,YAAY,UAAU,WAAW;AAC/B,SAAK,WAAW;AAChB,SAAK,YAAY;AAAA,EACnB;AACF;AACA,SAAS,uBAAuB,OAAOS,UAASC,MAAK;AACnD,MAAI,aAAa;AACjB,WAAS,IAAI,GAAG,IAAI,MAAM,SAAS,QAAQ,KAAK;AAC9C,UAAM,mBAAmBD,SAAQ,CAAC;AAClC,UAAM,YAAY,MAAM,SAAS,CAAC;AAClC,QAAI,iBAAiB,MAAM,WAAW,GAAG;AACvC,mBAAa,YAAY,WAAW,YAAY,SAAS,UAAU,cAAc,GAAGC,KAAI,GAAG;AAAA,IAC7F,OAAO;AACL,YAAM,WAAWA,KAAI,KAAK,MAAM,iBAAiB,KAAK;AACtD,mBAAa,aAAa,WAAW,QAAQ;AAAA,IAC/C;AACA,QAAI,iBAAiB,QAAQ,QAAmC;AAC9D,mBAAa,aAAa;AAAA,IAC5B;AACA,QAAI,eAAe,GAAG;AACpB;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAKA,SAAS,wBAAwB,OAAOD,UAASC,MAAK;AACpD,QAAM,aAAa,uBAAuB,OAAOD,UAASC,IAAG;AAC7D,SAAO,MAAM,YAAY,cAAc,IAAI,aAAa;AAC1D;AAKA,SAAS,yBAAyB,OAAOD,UAASC,MAAK;AACrD,QAAM,aAAa,uBAAuB,OAAOD,UAASC,IAAG;AAC7D,SAAO,MAAM,YAAY,cAAc,IAAI,aAAa;AAC1D;AACA,SAAS,YAAY,MAAM,OAAO;AAChC,MAAI,SAAS,MAAM;AACjB,WAAO,UAAU;AAAA,EACnB,WAAW,UAAU,MAAM;AACzB,WAAO;AAAA,EACT;AACA,MAAI,KAAK,cAAc,MAAM,aAAa,KAAK,SAAS,WAAW,MAAM,SAAS,QAAQ;AACxF,WAAO;AAAA,EACT;AACA,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,QAAQ,KAAK;AAC7C,UAAM,eAAe,KAAK,SAAS,CAAC;AACpC,UAAM,gBAAgB,MAAM,SAAS,CAAC;AACtC,QAAI,CAAC,YAAY,cAAc,aAAa,GAAG;AAC7C,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAqBA,IAAM,UAAN,MAAc;AAAA,EACZ,YAAY,OAAO,MAAM,OAAiC;AACxD,SAAK,QAAQ;AACb,SAAK,MAAM;AAAA,EACb;AACF;AACA,SAAS,gBAAgBD,UAAS;AAEhC,SAAOA,SAAQ,MAAM,gBAAgB,IAAIA,SAAQ;AACnD;AACA,SAAS,iBAAiBA,UAAS;AACjC,SAAO,GAAGA,SAAQ,MAAM,gBAAgB,CAAC,KAAKA,SAAQ,GAAG;AAC3D;AACA,SAAS,cAAc,MAAM,OAAO;AAClC,SAAO,KAAK,QAAQ,MAAM,OAAO,KAAK,MAAM,QAAQ,MAAM,KAAK;AACjE;AAkBA,IAAM,SAAN,MAAa;AAAC;AACd,IAAM,cAAN,MAAM,qBAAoB,OAAO;AAAA,EAC/B,YAAY,OAAO,IAAI,OAAO;AAC5B,UAAM;AACN,SAAK,QAAQ;AACb,SAAK,KAAK;AACV,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,OAAO,OAAO,IAAI,OAAO;AAC9B,QAAI,MAAM,WAAW,GAAG;AACtB,UAAI,OAAO,QAA0B,OAAO,UAAgC;AAC1E,eAAO,KAAK,uBAAuB,OAAO,IAAI,KAAK;AAAA,MACrD,OAAO;AACL,eAAO,IAAI,eAAe,OAAO,IAAI,KAAK;AAAA,MAC5C;AAAA,IACF,WAAW,OAAO,kBAAgD;AAChE,aAAO,IAAI,oBAAoB,OAAO,KAAK;AAAA,IAC7C,WAAW,OAAO,MAAwB;AACxC,aAAO,IAAI,SAAS,OAAO,KAAK;AAAA,IAClC,WAAW,OAAO,UAAgC;AAChD,aAAO,IAAI,YAAY,OAAO,KAAK;AAAA,IACrC,WAAW,OAAO,sBAAwD;AACxE,aAAO,IAAI,uBAAuB,OAAO,KAAK;AAAA,IAChD,OAAO;AACL,aAAO,IAAI,aAAY,OAAO,IAAI,KAAK;AAAA,IACzC;AAAA,EACF;AAAA,EACA,OAAO,uBAAuB,OAAO,IAAI,OAAO;AAC9C,WAAO,OAAO,OAAyB,IAAI,iBAAiB,OAAO,KAAK,IAAI,IAAI,oBAAoB,OAAO,KAAK;AAAA,EAClH;AAAA,EACA,QAAQC,MAAK;AACX,UAAM,QAAQA,KAAI,KAAK,MAAM,KAAK,KAAK;AAEvC,QAAI,KAAK,OAAO,MAA+B;AAC7C,aAAO,UAAU,QAAQ,KAAK,kBAAkB,aAAa,OAAO,KAAK,KAAK,CAAC;AAAA,IACjF;AAEA,WAAO,UAAU,QAAQ,UAAU,KAAK,KAAK,MAAM,UAAU,KAAK,KAAK,KAAK,kBAAkB,aAAa,OAAO,KAAK,KAAK,CAAC;AAAA,EAC/H;AAAA,EACA,kBAAkB,YAAY;AAC5B,YAAQ,KAAK,IAAI;AAAA,MACf,KAAK;AACH,eAAO,aAAa;AAAA,MACtB,KAAK;AACH,eAAO,cAAc;AAAA,MACvB,KAAK;AACH,eAAO,eAAe;AAAA,MACxB,KAAK;AACH,eAAO,eAAe;AAAA,MACxB,KAAK;AACH,eAAO,aAAa;AAAA,MACtB,KAAK;AACH,eAAO,cAAc;AAAA,MACvB;AACE,eAAO,KAAK;AAAA,IAChB;AAAA,EACF;AAAA,EACA,eAAe;AACb,WAAO;AAAA,MAAC;AAAA,MAA8B;AAAA,MAAwC;AAAA,MAAiC;AAAA,MAA2C;AAAA,MAA+B;AAAA;AAAA,IAA8B,EAAE,QAAQ,KAAK,EAAE,KAAK;AAAA,EAC/O;AAAA,EACA,sBAAsB;AACpB,WAAO,CAAC,IAAI;AAAA,EACd;AAAA,EACA,aAAa;AACX,WAAO,CAAC,IAAI;AAAA,EACd;AACF;AACA,IAAM,kBAAN,MAAM,yBAAwB,OAAO;AAAA,EACnC,YAAY,SAAS,IAAI;AACvB,UAAM;AACN,SAAK,UAAU;AACf,SAAK,KAAK;AACV,SAAK,2BAA2B;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,OAAO,SAAS,IAAI;AACzB,WAAO,IAAI,iBAAgB,SAAS,EAAE;AAAA,EACxC;AAAA,EACA,QAAQA,MAAK;AACX,QAAI,6BAA6B,IAAI,GAAG;AAEtC,aAAO,KAAK,QAAQ,KAAK,YAAU,CAAC,OAAO,QAAQA,IAAG,CAAC,MAAM;AAAA,IAC/D,OAAO;AAEL,aAAO,KAAK,QAAQ,KAAK,YAAU,OAAO,QAAQA,IAAG,CAAC,MAAM;AAAA,IAC9D;AAAA,EACF;AAAA,EACA,sBAAsB;AACpB,QAAI,KAAK,6BAA6B,MAAM;AAC1C,aAAO,KAAK;AAAA,IACd;AACA,SAAK,2BAA2B,KAAK,QAAQ,OAAO,CAAC,QAAQ,cAAc;AACzE,aAAO,OAAO,OAAO,UAAU,oBAAoB,CAAC;AAAA,IACtD,GAAG,CAAC,CAAC;AACL,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAEA,aAAa;AACX,WAAO,OAAO,OAAO,CAAC,GAAG,KAAK,OAAO;AAAA,EACvC;AACF;AACA,SAAS,6BAA6B,iBAAiB;AACrD,SAAO,gBAAgB,OAAO;AAChC;AACA,SAAS,6BAA6B,iBAAiB;AACrD,SAAO,gBAAgB,OAAO;AAChC;AAIA,SAAS,iCAAiC,iBAAiB;AACzD,SAAO,sBAAsB,eAAe,KAAK,6BAA6B,eAAe;AAC/F;AAIA,SAAS,sBAAsB,iBAAiB;AAC9C,aAAW,UAAU,gBAAgB,SAAS;AAC5C,QAAI,kBAAkB,iBAAiB;AACrC,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,eAAe,QAAQ;AAC9B,MAAI,kBAAkB,aAAa;AAIjC,WAAO,OAAO,MAAM,gBAAgB,IAAI,OAAO,GAAG,SAAS,IAAI,YAAY,OAAO,KAAK;AAAA,EACzF,WAAW,iCAAiC,MAAM,GAAG;AAOnD,WAAO,OAAO,QAAQ,IAAI,CAAAC,YAAU,eAAeA,OAAM,CAAC,EAAE,KAAK,GAAG;AAAA,EACtE,OAAO;AAEL,UAAM,qBAAqB,OAAO,QAAQ,IAAI,CAAAA,YAAU,eAAeA,OAAM,CAAC,EAAE,KAAK,GAAG;AACxF,WAAO,GAAG,OAAO,EAAE,IAAI,kBAAkB;AAAA,EAC3C;AACF;AACA,SAAS,aAAa,IAAI,IAAI;AAC5B,MAAI,cAAc,aAAa;AAC7B,WAAO,kBAAkB,IAAI,EAAE;AAAA,EACjC,WAAW,cAAc,iBAAiB;AACxC,WAAO,sBAAsB,IAAI,EAAE;AAAA,EACrC,OAAO;AACL,SAAK;AAAA,EACP;AACF;AACA,SAAS,kBAAkB,IAAI,IAAI;AACjC,SAAO,cAAc,eAAe,GAAG,OAAO,GAAG,MAAM,GAAG,MAAM,QAAQ,GAAG,KAAK,KAAK,YAAY,GAAG,OAAO,GAAG,KAAK;AACrH;AACA,SAAS,sBAAsB,IAAI,IAAI;AACrC,MAAI,cAAc,mBAAmB,GAAG,OAAO,GAAG,MAAM,GAAG,QAAQ,WAAW,GAAG,QAAQ,QAAQ;AAC/F,UAAM,kBAAkB,GAAG,QAAQ,OAAO,CAAC,QAAQ,UAAU,UAAU,UAAU,aAAa,UAAU,GAAG,QAAQ,KAAK,CAAC,GAAG,IAAI;AAChI,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAKA,SAAS,gCAAgC,iBAAiB,cAAc;AACtE,QAAM,gBAAgB,gBAAgB,QAAQ,OAAO,YAAY;AACjE,SAAO,gBAAgB,OAAO,eAAe,gBAAgB,EAAE;AACjE;AAEA,SAAS,gBAAgB,QAAQ;AAC/B,MAAI,kBAAkB,aAAa;AACjC,WAAO,qBAAqB,MAAM;AAAA,EACpC,WAAW,kBAAkB,iBAAiB;AAC5C,WAAO,yBAAyB,MAAM;AAAA,EACxC,OAAO;AACL,WAAO;AAAA,EACT;AACF;AACA,SAAS,yBAAyB,QAAQ;AACxC,SAAO,OAAO,GAAG,SAAS,IAAI,OAAO,OAAO,WAAW,EAAE,IAAI,eAAe,EAAE,KAAK,IAAI,IAAI;AAC7F;AACA,SAAS,qBAAqB,QAAQ;AACpC,SAAO,GAAG,OAAO,MAAM,gBAAgB,CAAC,IAAI,OAAO,EAAE,IAAI,YAAY,OAAO,KAAK,CAAC;AACpF;AAEA,IAAM,iBAAN,cAA6B,YAAY;AAAA,EACvC,YAAY,OAAO,IAAI,OAAO;AAC5B,UAAM,OAAO,IAAI,KAAK;AACtB,SAAK,MAAM,YAAY,SAAS,MAAM,cAAc;AAAA,EACtD;AAAA,EACA,QAAQD,MAAK;AACX,UAAM,aAAa,YAAY,WAAWA,KAAI,KAAK,KAAK,GAAG;AAC3D,WAAO,KAAK,kBAAkB,UAAU;AAAA,EAC1C;AACF;AAEA,IAAM,mBAAN,cAA+B,YAAY;AAAA,EACzC,YAAY,OAAO,OAAO;AACxB,UAAM,OAAO,MAAwB,KAAK;AAC1C,SAAK,OAAO,kCAAkC,MAAwB,KAAK;AAAA,EAC7E;AAAA,EACA,QAAQA,MAAK;AACX,WAAO,KAAK,KAAK,KAAK,SAAO,IAAI,QAAQA,KAAI,GAAG,CAAC;AAAA,EACnD;AACF;AAEA,IAAM,sBAAN,cAAkC,YAAY;AAAA,EAC5C,YAAY,OAAO,OAAO;AACxB,UAAM,OAAO,UAAgC,KAAK;AAClD,SAAK,OAAO,kCAAkC,UAAgC,KAAK;AAAA,EACrF;AAAA,EACA,QAAQA,MAAK;AACX,WAAO,CAAC,KAAK,KAAK,KAAK,SAAO,IAAI,QAAQA,KAAI,GAAG,CAAC;AAAA,EACpD;AACF;AACA,SAAS,kCAAkC,IAAI,OAAO;AACpD,MAAI;AACJ,YAAU,KAAK,MAAM,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW,CAAC,GAAG,IAAI,OAAK;AAC/F,WAAO,YAAY,SAAS,EAAE,cAAc;AAAA,EAC9C,CAAC;AACH;AAEA,IAAM,sBAAN,cAAkC,YAAY;AAAA,EAC5C,YAAY,OAAO,OAAO;AACxB,UAAM,OAAO,kBAAgD,KAAK;AAAA,EACpE;AAAA,EACA,QAAQA,MAAK;AACX,UAAM,QAAQA,KAAI,KAAK,MAAM,KAAK,KAAK;AACvC,WAAO,QAAQ,KAAK,KAAK,mBAAmB,MAAM,YAAY,KAAK,KAAK;AAAA,EAC1E;AACF;AAEA,IAAM,WAAN,cAAuB,YAAY;AAAA,EACjC,YAAY,OAAO,OAAO;AACxB,UAAM,OAAO,MAAwB,KAAK;AAAA,EAC5C;AAAA,EACA,QAAQA,MAAK;AACX,UAAM,QAAQA,KAAI,KAAK,MAAM,KAAK,KAAK;AACvC,WAAO,UAAU,QAAQ,mBAAmB,KAAK,MAAM,YAAY,KAAK;AAAA,EAC1E;AACF;AAEA,IAAM,cAAN,cAA0B,YAAY;AAAA,EACpC,YAAY,OAAO,OAAO;AACxB,UAAM,OAAO,UAAgC,KAAK;AAAA,EACpD;AAAA,EACA,QAAQA,MAAK;AACX,QAAI,mBAAmB,KAAK,MAAM,YAAY;AAAA,MAC5C,WAAW;AAAA,IACb,CAAC,GAAG;AACF,aAAO;AAAA,IACT;AACA,UAAM,QAAQA,KAAI,KAAK,MAAM,KAAK,KAAK;AACvC,WAAO,UAAU,QAAQ,CAAC,mBAAmB,KAAK,MAAM,YAAY,KAAK;AAAA,EAC3E;AACF;AAEA,IAAM,yBAAN,cAAqC,YAAY;AAAA,EAC/C,YAAY,OAAO,OAAO;AACxB,UAAM,OAAO,sBAAwD,KAAK;AAAA,EAC5E;AAAA,EACA,QAAQA,MAAK;AACX,UAAM,QAAQA,KAAI,KAAK,MAAM,KAAK,KAAK;AACvC,QAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,MAAM,WAAW,QAAQ;AAC/C,aAAO;AAAA,IACT;AACA,WAAO,MAAM,WAAW,OAAO,KAAK,SAAO,mBAAmB,KAAK,MAAM,YAAY,GAAG,CAAC;AAAA,EAC3F;AACF;AAmBA,IAAM,aAAN,MAAiB;AAAA,EACf,YAAY,MAAMP,mBAAkB,MAAMM,WAAU,CAAC,GAAG,UAAU,CAAC,GAAGG,SAAQ,MAAMC,WAAU,MAAMC,SAAQ,MAAM;AAChH,SAAK,OAAO;AACZ,SAAK,kBAAkBX;AACvB,SAAK,UAAUM;AACf,SAAK,UAAU;AACf,SAAK,QAAQG;AACb,SAAK,UAAUC;AACf,SAAK,QAAQC;AACb,SAAK,sBAAsB;AAAA,EAC7B;AACF;AASA,SAAS,UAAU,MAAMX,mBAAkB,MAAMM,WAAU,CAAC,GAAG,UAAU,CAAC,GAAGG,SAAQ,MAAMC,WAAU,MAAMC,SAAQ,MAAM;AACvH,SAAO,IAAI,WAAW,MAAMX,kBAAiBM,UAAS,SAASG,QAAOC,UAASC,MAAK;AACtF;AACA,SAAS,eAAe,QAAQ;AAC9B,QAAM,aAAa,UAAU,MAAM;AACnC,MAAI,WAAW,wBAAwB,MAAM;AAC3C,QAAI,MAAM,WAAW,KAAK,gBAAgB;AAC1C,QAAI,WAAW,oBAAoB,MAAM;AACvC,aAAO,SAAS,WAAW;AAAA,IAC7B;AACA,WAAO;AACP,WAAO,WAAW,QAAQ,IAAI,OAAK,eAAe,CAAC,CAAC,EAAE,KAAK,GAAG;AAC9D,WAAO;AACP,WAAO,WAAW,QAAQ,IAAI,OAAK,gBAAgB,CAAC,CAAC,EAAE,KAAK,GAAG;AAC/D,QAAI,CAAC,kBAAkB,WAAW,KAAK,GAAG;AACxC,aAAO;AACP,aAAO,WAAW;AAAA,IACpB;AACA,QAAI,WAAW,SAAS;AACtB,aAAO;AACP,aAAO,WAAW,QAAQ,YAAY,OAAO;AAC7C,aAAO,WAAW,QAAQ,SAAS,IAAI,OAAK,YAAY,CAAC,CAAC,EAAE,KAAK,GAAG;AAAA,IACtE;AACA,QAAI,WAAW,OAAO;AACpB,aAAO;AACP,aAAO,WAAW,MAAM,YAAY,OAAO;AAC3C,aAAO,WAAW,MAAM,SAAS,IAAI,OAAK,YAAY,CAAC,CAAC,EAAE,KAAK,GAAG;AAAA,IACpE;AACA,eAAW,sBAAsB;AAAA,EACnC;AACA,SAAO,WAAW;AACpB;AACA,SAAS,gBAAgB,QAAQ;AAC/B,MAAI,MAAM,OAAO,KAAK,gBAAgB;AACtC,MAAI,OAAO,oBAAoB,MAAM;AACnC,WAAO,sBAAsB,OAAO;AAAA,EACtC;AACA,MAAI,OAAO,QAAQ,SAAS,GAAG;AAC7B,WAAO,eAAe,OAAO,QAAQ,IAAI,OAAK,gBAAgB,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC;AAAA,EAC9E;AACA,MAAI,CAAC,kBAAkB,OAAO,KAAK,GAAG;AACpC,WAAO,cAAc,OAAO;AAAA,EAC9B;AACA,MAAI,OAAO,QAAQ,SAAS,GAAG;AAC7B,WAAO,eAAe,OAAO,QAAQ,IAAI,OAAK,iBAAiB,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC;AAAA,EAC/E;AACA,MAAI,OAAO,SAAS;AAClB,WAAO;AACP,WAAO,OAAO,QAAQ,YAAY,OAAO;AACzC,WAAO,OAAO,QAAQ,SAAS,IAAI,OAAK,YAAY,CAAC,CAAC,EAAE,KAAK,GAAG;AAAA,EAClE;AACA,MAAI,OAAO,OAAO;AAChB,WAAO;AACP,WAAO,OAAO,MAAM,YAAY,OAAO;AACvC,WAAO,OAAO,MAAM,SAAS,IAAI,OAAK,YAAY,CAAC,CAAC,EAAE,KAAK,GAAG;AAAA,EAChE;AACA,SAAO,UAAU,GAAG;AACtB;AACA,SAAS,aAAa,MAAM,OAAO;AACjC,MAAI,KAAK,UAAU,MAAM,OAAO;AAC9B,WAAO;AAAA,EACT;AACA,MAAI,KAAK,QAAQ,WAAW,MAAM,QAAQ,QAAQ;AAChD,WAAO;AAAA,EACT;AACA,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,QAAI,CAAC,cAAc,KAAK,QAAQ,CAAC,GAAG,MAAM,QAAQ,CAAC,CAAC,GAAG;AACrD,aAAO;AAAA,IACT;AAAA,EACF;AACA,MAAI,KAAK,QAAQ,WAAW,MAAM,QAAQ,QAAQ;AAChD,WAAO;AAAA,EACT;AACA,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,QAAQ,KAAK;AAC5C,QAAI,CAAC,aAAa,KAAK,QAAQ,CAAC,GAAG,MAAM,QAAQ,CAAC,CAAC,GAAG;AACpD,aAAO;AAAA,IACT;AAAA,EACF;AACA,MAAI,KAAK,oBAAoB,MAAM,iBAAiB;AAClD,WAAO;AAAA,EACT;AACA,MAAI,CAAC,KAAK,KAAK,QAAQ,MAAM,IAAI,GAAG;AAClC,WAAO;AAAA,EACT;AACA,MAAI,CAAC,YAAY,KAAK,SAAS,MAAM,OAAO,GAAG;AAC7C,WAAO;AAAA,EACT;AACA,SAAO,YAAY,KAAK,OAAO,MAAM,KAAK;AAC5C;AACA,SAAS,uBAAuB,QAAQ;AACtC,SAAO,YAAY,cAAc,OAAO,IAAI,KAAK,OAAO,oBAAoB,QAAQ,OAAO,QAAQ,WAAW;AAChH;AAEA,SAAS,6BAA6B,QAAQ,MAAM;AAClD,SAAO,OAAO,QAAQ,OAAO,OAAK,aAAa,eAAe,EAAE,MAAM,QAAQ,IAAI,CAAC;AACrF;AAKA,SAAS,qBAAqB,QAAQ,YAAY;AAChD,QAAM,UAAU,0BAA0B,UAAU;AACpD,MAAI,YAAY,QAAW;AACzB,WAAO;AAAA,EACT;AACA,aAAW,eAAe,6BAA6B,QAAQ,QAAQ,SAAS,GAAG;AACjF,YAAQ,YAAY,IAAI;AAAA,MACtB,KAAK;AACH,eAAO,YAAY,MAAM,WAAW,UAAU,CAAC;AAAA,MACjD,KAAK;AACH,eAAO,CAAC,YAAY,KAAK;AAAA,IAE7B;AAAA,EACF;AACA,SAAO;AACT;AAKA,SAAS,qBAAqB,QAAQ,YAAY;AAChD,QAAM,SAAS,oBAAI,IAAI;AACvB,aAAW,WAAW,iCAAiC,UAAU,GAAG;AAClE,eAAW,eAAe,6BAA6B,QAAQ,QAAQ,SAAS,GAAG;AACjF,cAAQ,YAAY,IAAI;AAAA,QACtB,KAAK;AAAA,QACL,KAAK;AAIH,iBAAO,IAAI,QAAQ,UAAU,gBAAgB,GAAG,YAAY,KAAK;AACjE;AAAA,QACF,KAAK;AAAA,QACL,KAAK;AAGH,iBAAO,IAAI,QAAQ,UAAU,gBAAgB,GAAG,YAAY,KAAK;AACjE,iBAAO,MAAM,KAAK,OAAO,OAAO,CAAC;AAAA,MAErC;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAMA,SAAS,oBAAoB,QAAQ,YAAY;AAC/C,QAAM,SAAS,CAAC;AAChB,MAAI,YAAY;AAGhB,aAAW,WAAW,iCAAiC,UAAU,GAAG;AAClE,UAAM,eAAe,QAAQ,SAAS,IAA8B,wBAAwB,QAAQ,QAAQ,WAAW,OAAO,OAAO,IAAI,yBAAyB,QAAQ,QAAQ,WAAW,OAAO,OAAO;AAC3M,WAAO,KAAK,aAAa,KAAK;AAC9B,kBAAc,YAAY,aAAa;AAAA,EACzC;AACA,SAAO,IAAI,MAAM,QAAQ,SAAS;AACpC;AAMA,SAAS,oBAAoB,QAAQ,YAAY;AAC/C,QAAM,SAAS,CAAC;AAChB,MAAI,YAAY;AAGhB,aAAW,WAAW,iCAAiC,UAAU,GAAG;AAClE,UAAM,eAAe,QAAQ,SAAS,IAA8B,yBAAyB,QAAQ,QAAQ,WAAW,OAAO,KAAK,IAAI,wBAAwB,QAAQ,QAAQ,WAAW,OAAO,KAAK;AACvM,WAAO,KAAK,aAAa,KAAK;AAC9B,kBAAc,YAAY,aAAa;AAAA,EACzC;AACA,SAAO,IAAI,MAAM,QAAQ,SAAS;AACpC;AAKA,SAAS,wBAAwB,QAAQ,WAAW,OAAO;AACzD,MAAI,QAAQ;AACZ,MAAI,YAAY;AAEhB,aAAW,eAAe,6BAA6B,QAAQ,SAAS,GAAG;AACzE,QAAI,cAAc;AAClB,QAAI,kBAAkB;AACtB,YAAQ,YAAY,IAAI;AAAA,MACtB,KAAK;AAAA,MACL,KAAK;AACH,sBAAc,oBAAoB,YAAY,KAAK;AACnD;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,sBAAc,YAAY;AAC1B;AAAA,MACF,KAAK;AACH,sBAAc,YAAY;AAC1B,0BAAkB;AAClB;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AACH,sBAAc;AACd;AAAA,IAEJ;AACA,QAAI,kBAAkB;AAAA,MACpB;AAAA,MACA;AAAA,IACF,GAAG;AAAA,MACD,OAAO;AAAA,MACP,WAAW;AAAA,IACb,CAAC,IAAI,GAAG;AACN,cAAQ;AACR,kBAAY;AAAA,IACd;AAAA,EACF;AAGA,MAAI,UAAU,MAAM;AAClB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,QAAQ,EAAE,GAAG;AAC9C,YAAML,WAAU,OAAO,QAAQ,CAAC;AAChC,UAAIA,SAAQ,MAAM,QAAQ,SAAS,GAAG;AACpC,cAAM,cAAc,MAAM,SAAS,CAAC;AACpC,YAAI,kBAAkB;AAAA,UACpB;AAAA,UACA;AAAA,QACF,GAAG;AAAA,UACD,OAAO;AAAA,UACP,WAAW,MAAM;AAAA,QACnB,CAAC,IAAI,GAAG;AACN,kBAAQ;AACR,sBAAY,MAAM;AAAA,QACpB;AACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAKA,SAAS,yBAAyB,QAAQ,WAAW,OAAO;AAC1D,MAAI,QAAQ;AACZ,MAAI,YAAY;AAEhB,aAAW,eAAe,6BAA6B,QAAQ,SAAS,GAAG;AACzE,QAAI,cAAc;AAClB,QAAI,kBAAkB;AACtB,YAAQ,YAAY,IAAI;AAAA,MACtB,KAAK;AAAA,MACL,KAAK;AACH,sBAAc,oBAAoB,YAAY,KAAK;AACnD,0BAAkB;AAClB;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,sBAAc,YAAY;AAC1B;AAAA,MACF,KAAK;AACH,sBAAc,YAAY;AAC1B,0BAAkB;AAClB;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AACH,sBAAc;AACd;AAAA,IAEJ;AACA,QAAI,kBAAkB;AAAA,MACpB;AAAA,MACA;AAAA,IACF,GAAG;AAAA,MACD,OAAO;AAAA,MACP,WAAW;AAAA,IACb,CAAC,IAAI,GAAG;AACN,cAAQ;AACR,kBAAY;AAAA,IACd;AAAA,EACF;AAGA,MAAI,UAAU,MAAM;AAClB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,QAAQ,EAAE,GAAG;AAC9C,YAAMA,WAAU,OAAO,QAAQ,CAAC;AAChC,UAAIA,SAAQ,MAAM,QAAQ,SAAS,GAAG;AACpC,cAAM,cAAc,MAAM,SAAS,CAAC;AACpC,YAAI,kBAAkB;AAAA,UACpB;AAAA,UACA;AAAA,QACF,GAAG;AAAA,UACD,OAAO;AAAA,UACP,WAAW,MAAM;AAAA,QACnB,CAAC,IAAI,GAAG;AACN,kBAAQ;AACR,sBAAY,MAAM;AAAA,QACpB;AACA;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AAEA,SAAS,sBAAsB,QAAQ;AACrC,MAAI,SAAS,IAAI,UAAU,YAAY,UAAU;AACjD,MAAI,kBAAkB;AACtB,aAAW,UAAU,OAAO,SAAS;AACnC,eAAW,aAAa,OAAO,oBAAoB,GAAG;AAGpD,UAAI,UAAU,MAAM,WAAW,GAAG;AAChC;AAAA,MACF;AAKA,UAAI,UAAU,OAAO,oBAAkD,UAAU,OAAO,sBAAwD;AAC9I,0BAAkB;AAAA,MACpB,OAAO;AACL,iBAAS,OAAO,IAAI,UAAU,KAAK;AAAA,MACrC;AAAA,IACF;AAAA,EACF;AACA,aAAWA,YAAW,OAAO,SAAS;AAGpC,QAAI,CAACA,SAAQ,MAAM,WAAW,GAAG;AAC/B,eAAS,OAAO,IAAIA,SAAQ,KAAK;AAAA,IACnC;AAAA,EACF;AACA,SAAO,OAAO,QAAQ,kBAAkB,IAAI;AAC9C;AACA,SAAS,eAAe,QAAQ;AAC9B,SAAO,OAAO,UAAU;AAC1B;AAyBA,IAAM,YAAN,MAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKd,YAAY,MAAMN,mBAAkB,MAAM,kBAAkB,CAAC,GAAG,UAAU,CAAC,GAAGS,SAAQ,MAAM,YAAY,KAA2BC,WAAU,MAAMC,SAAQ,MAAM;AAC/J,SAAK,OAAO;AACZ,SAAK,kBAAkBX;AACvB,SAAK,kBAAkB;AACvB,SAAK,UAAU;AACf,SAAK,QAAQS;AACb,SAAK,YAAY;AACjB,SAAK,UAAUC;AACf,SAAK,QAAQC;AACb,SAAK,4BAA4B;AAGjC,SAAK,iBAAiB;AAKtB,SAAK,0BAA0B;AAC/B,QAAI,KAAK,QAAS;AAClB,QAAI,KAAK,MAAO;AAAA,EAClB;AACF;AAEA,SAAS,SAAS,MAAMX,kBAAiB,iBAAiB,SAASS,QAAO,WAAWC,UAASC,QAAO;AACnG,SAAO,IAAI,UAAU,MAAMX,kBAAiB,iBAAiB,SAASS,QAAO,WAAWC,UAASC,MAAK;AACxG;AAEA,SAAS,gBAAgB,MAAM;AAC7B,SAAO,IAAI,UAAU,IAAI;AAC3B;AAOA,SAAS,wBAAwBC,QAAO,MAAM;AAC5C,SAAO,IAAI;AAAA,IAAU;AAAA;AAAA,IAA0B;AAAA,IAAMA,OAAM,gBAAgB,MAAM;AAAA,IAAGA,OAAM,QAAQ,MAAM;AAAA,IAAGA,OAAM;AAAA,IAAOA,OAAM;AAAA,IAAWA,OAAM;AAAA,IAASA,OAAM;AAAA,EAAK;AACrK;AAKA,SAAS,yBAAyBA,QAAO;AACvC,SAAOA,OAAM,QAAQ,WAAW,KAAKA,OAAM,UAAU,QAAQA,OAAM,WAAW,QAAQA,OAAM,SAAS,SAASA,OAAM,gBAAgB,WAAW,KAAKA,OAAM,gBAAgB,WAAW,KAAKA,OAAM,gBAAgB,CAAC,EAAE,MAAM,WAAW;AACtO;AAEA,SAAS,0BAA0BA,QAAO;AACxC,MAAI,SAAS,IAAI,UAAU,YAAY,UAAU;AACjD,EAAAA,OAAM,QAAQ,QAAQ,YAAU;AAC9B,UAAM,aAAa,OAAO,oBAAoB;AAC9C,eAAW,QAAQ,CAAAJ,YAAU;AAC3B,UAAIA,QAAO,aAAa,GAAG;AACzB,iBAAS,OAAO,IAAIA,QAAO,KAAK;AAAA,MAClC;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACD,SAAO;AACT;AAKA,SAAS,2BAA2B,cAAc;AAChD,SAAO,IAAI,UAAU,aAAa,UAAU,GAAG,YAAY;AAC7D;AAKA,SAAS,kBAAkBI,QAAO;AAChC,SAAO,YAAY,cAAcA,OAAM,IAAI,KAAKA,OAAM,oBAAoB,QAAQA,OAAM,QAAQ,WAAW;AAC7G;AAKA,SAAS,uBAAuBA,QAAO;AACrC,SAAOA,OAAM,oBAAoB;AACnC;AAQA,SAAS,uBAAuBA,QAAO;AACrC,QAAM,YAAY,UAAUA,MAAK;AACjC,MAAI,UAAU,8BAA8B,MAAM;AAChD,cAAU,4BAA4B,CAAC;AACvC,UAAM,mBAAmB,oBAAI,IAAI;AAEjC,eAAWN,YAAW,UAAU,iBAAiB;AAC/C,gBAAU,0BAA0B,KAAKA,QAAO;AAChD,uBAAiB,IAAIA,SAAQ,MAAM,gBAAgB,CAAC;AAAA,IACtD;AAEA,UAAM,gBAAgB,UAAU,gBAAgB,SAAS,IAAI,UAAU,gBAAgB,UAAU,gBAAgB,SAAS,CAAC,EAAE,MAAM;AAMnI,UAAM,mBAAmB,0BAA0B,SAAS;AAC5D,qBAAiB,QAAQ,WAAS;AAChC,UAAI,CAAC,iBAAiB,IAAI,MAAM,gBAAgB,CAAC,KAAK,CAAC,MAAM,WAAW,GAAG;AACzE,kBAAU,0BAA0B,KAAK,IAAI,QAAQ,OAAO,aAAa,CAAC;AAAA,MAC5E;AAAA,IACF,CAAC;AAED,QAAI,CAAC,iBAAiB,IAAI,YAAY,SAAS,EAAE,gBAAgB,CAAC,GAAG;AACnE,gBAAU,0BAA0B,KAAK,IAAI,QAAQ,YAAY,SAAS,GAAG,aAAa,CAAC;AAAA,IAC7F;AAAA,EACF;AACA,SAAO,UAAU;AACnB;AAIA,SAAS,cAAcM,QAAO;AAC5B,QAAM,YAAY,UAAUA,MAAK;AACjC,MAAI,CAAC,UAAU,gBAAgB;AAC7B,cAAU,iBAAiB,eAAe,WAAW,uBAAuBA,MAAK,CAAC;AAAA,EACpF;AACA,SAAO,UAAU;AACnB;AAOA,SAAS,uBAAuBA,QAAO;AACrC,QAAM,YAAY,UAAUA,MAAK;AACjC,MAAI,CAAC,UAAU,yBAAyB;AAEtC,cAAU,0BAA0B,eAAe,WAAWA,OAAM,eAAe;AAAA,EACrF;AACA,SAAO,UAAU;AACnB;AACA,SAAS,eAAe,WAAW,UAAU;AAC3C,MAAI,UAAU,cAAc,KAA2B;AACrD,WAAO,UAAU,UAAU,MAAM,UAAU,iBAAiB,UAAU,UAAU,SAAS,UAAU,OAAO,UAAU,SAAS,UAAU,KAAK;AAAA,EAC9I,OAAO;AAEL,eAAW,SAAS,IAAI,CAAAN,aAAW;AACjC,YAAM,MAAMA,SAAQ,QAAQ,SAAoC,QAAkC;AAClG,aAAO,IAAI,QAAQA,SAAQ,OAAO,GAAG;AAAA,IACvC,CAAC;AAED,UAAMI,WAAU,UAAU,QAAQ,IAAI,MAAM,UAAU,MAAM,UAAU,UAAU,MAAM,SAAS,IAAI;AACnG,UAAMC,SAAQ,UAAU,UAAU,IAAI,MAAM,UAAU,QAAQ,UAAU,UAAU,QAAQ,SAAS,IAAI;AAEvG,WAAO,UAAU,UAAU,MAAM,UAAU,iBAAiB,UAAU,UAAU,SAAS,UAAU,OAAOD,UAASC,MAAK;AAAA,EAC1H;AACF;AACA,SAAS,qBAAqBC,QAAO,QAAQ;AAC3C,QAAM,aAAaA,OAAM,QAAQ,OAAO,CAAC,MAAM,CAAC;AAChD,SAAO,IAAI,UAAUA,OAAM,MAAMA,OAAM,iBAAiBA,OAAM,gBAAgB,MAAM,GAAG,YAAYA,OAAM,OAAOA,OAAM,WAAWA,OAAM,SAASA,OAAM,KAAK;AAC7J;AACA,SAAS,sBAAsBA,QAAON,UAAS;AAE7C,QAAM,aAAaM,OAAM,gBAAgB,OAAO,CAACN,QAAO,CAAC;AACzD,SAAO,IAAI,UAAUM,OAAM,MAAMA,OAAM,iBAAiB,YAAYA,OAAM,QAAQ,MAAM,GAAGA,OAAM,OAAOA,OAAM,WAAWA,OAAM,SAASA,OAAM,KAAK;AACrJ;AACA,SAAS,eAAeA,QAAOH,QAAO,WAAW;AAC/C,SAAO,IAAI,UAAUG,OAAM,MAAMA,OAAM,iBAAiBA,OAAM,gBAAgB,MAAM,GAAGA,OAAM,QAAQ,MAAM,GAAGH,QAAO,WAAWG,OAAM,SAASA,OAAM,KAAK;AAC5J;AACA,SAAS,iBAAiBA,QAAO,OAAO;AACtC,SAAO,IAAI,UAAUA,OAAM,MAAMA,OAAM,iBAAiBA,OAAM,gBAAgB,MAAM,GAAGA,OAAM,QAAQ,MAAM,GAAGA,OAAM,OAAOA,OAAM,WAAW,OAAOA,OAAM,KAAK;AAChK;AACA,SAAS,eAAeA,QAAO,OAAO;AACpC,SAAO,IAAI,UAAUA,OAAM,MAAMA,OAAM,iBAAiBA,OAAM,gBAAgB,MAAM,GAAGA,OAAM,QAAQ,MAAM,GAAGA,OAAM,OAAOA,OAAM,WAAWA,OAAM,SAAS,KAAK;AAClK;AACA,SAAS,YAAY,MAAM,OAAO;AAChC,SAAO,aAAa,cAAc,IAAI,GAAG,cAAc,KAAK,CAAC,KAAK,KAAK,cAAc,MAAM;AAC7F;AAIA,SAAS,cAAcA,QAAO;AAC5B,SAAO,GAAG,eAAe,cAAcA,MAAK,CAAC,CAAC,OAAOA,OAAM,SAAS;AACtE;AACA,SAAS,eAAeA,QAAO;AAC7B,SAAO,gBAAgB,gBAAgB,cAAcA,MAAK,CAAC,CAAC,eAAeA,OAAM,SAAS;AAC5F;AAEA,SAAS,aAAaA,QAAOL,MAAK;AAChC,SAAOA,KAAI,gBAAgB,KAAK,mCAAmCK,QAAOL,IAAG,KAAK,oBAAoBK,QAAOL,IAAG,KAAK,oBAAoBK,QAAOL,IAAG,KAAK,mBAAmBK,QAAOL,IAAG;AACvL;AACA,SAAS,mCAAmCK,QAAOL,MAAK;AACtD,QAAM,UAAUA,KAAI,IAAI;AACxB,MAAIK,OAAM,oBAAoB,MAAM;AAGlC,WAAOL,KAAI,IAAI,gBAAgBK,OAAM,eAAe,KAAKA,OAAM,KAAK,WAAW,OAAO;AAAA,EACxF,WAAW,YAAY,cAAcA,OAAM,IAAI,GAAG;AAEhD,WAAOA,OAAM,KAAK,QAAQ,OAAO;AAAA,EACnC,OAAO;AAEL,WAAOA,OAAM,KAAK,oBAAoB,OAAO;AAAA,EAC/C;AACF;AAKA,SAAS,oBAAoBA,QAAOL,MAAK;AAOvC,aAAWD,YAAW,uBAAuBM,MAAK,GAAG;AAEnD,QAAI,CAACN,SAAQ,MAAM,WAAW,KAAKC,KAAI,KAAK,MAAMD,SAAQ,KAAK,MAAM,MAAM;AACzE,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,oBAAoBM,QAAOL,MAAK;AACvC,aAAW,UAAUK,OAAM,SAAS;AAClC,QAAI,CAAC,OAAO,QAAQL,IAAG,GAAG;AACxB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAEA,SAAS,mBAAmBK,QAAOL,MAAK;AACtC,MAAIK,OAAM,WAAW,CAAC,yBAAyBA,OAAM,SAAS,uBAAuBA,MAAK,GAAGL,IAAG,GAAG;AACjG,WAAO;AAAA,EACT;AACA,MAAIK,OAAM,SAAS,CAAC,wBAAwBA,OAAM,OAAO,uBAAuBA,MAAK,GAAGL,IAAG,GAAG;AAC5F,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAOA,SAAS,qBAAqBK,QAAO;AACnC,SAAOA,OAAM,oBAAoBA,OAAM,KAAK,SAAS,MAAM,IAAIA,OAAM,KAAK,YAAY,IAAIA,OAAM,KAAK,IAAIA,OAAM,KAAK,SAAS,CAAC;AAChI;AAKA,SAAS,mBAAmBA,QAAO;AACjC,SAAO,CAAC,IAAI,OAAO;AACjB,QAAI,qBAAqB;AACzB,eAAWN,YAAW,uBAAuBM,MAAK,GAAG;AACnD,YAAM,OAAO,YAAYN,UAAS,IAAI,EAAE;AACxC,UAAI,SAAS,GAAG;AACd,eAAO;AAAA,MACT;AACA,2BAAqB,sBAAsBA,SAAQ,MAAM,WAAW;AAAA,IACtE;AACA,WAAO;AAAA,EACT;AACF;AACA,SAAS,YAAYA,UAAS,IAAI,IAAI;AACpC,QAAM,aAAaA,SAAQ,MAAM,WAAW,IAAI,YAAY,WAAW,GAAG,KAAK,GAAG,GAAG,IAAI,wBAAwBA,SAAQ,OAAO,IAAI,EAAE;AACtI,UAAQA,SAAQ,KAAK;AAAA,IACnB,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO,KAAK;AAAA,IACd;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AAwBA,IAAM,YAAN,MAAgB;AAAA,EACd,YAAY,UAAU,UAAU;AAC9B,SAAK,WAAW;AAChB,SAAK,WAAW;AAOhB,SAAK,QAAQ,CAAC;AAEd,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA,EAEA,IAAI,KAAK;AACP,UAAM,KAAK,KAAK,SAAS,GAAG;AAC5B,UAAM,UAAU,KAAK,MAAM,EAAE;AAC7B,QAAI,YAAY,QAAW;AACzB,aAAO;AAAA,IACT;AACA,eAAW,CAAC,UAAU,KAAK,KAAK,SAAS;AACvC,UAAI,KAAK,SAAS,UAAU,GAAG,GAAG;AAChC,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,IAAI,KAAK;AACP,WAAO,KAAK,IAAI,GAAG,MAAM;AAAA,EAC3B;AAAA;AAAA,EAEA,IAAI,KAAK,OAAO;AACd,UAAM,KAAK,KAAK,SAAS,GAAG;AAC5B,UAAM,UAAU,KAAK,MAAM,EAAE;AAC7B,QAAI,YAAY,QAAW;AACzB,WAAK,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,KAAK,CAAC;AAC9B,WAAK;AACL;AAAA,IACF;AACA,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAI,KAAK,SAAS,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG;AAErC,gBAAQ,CAAC,IAAI,CAAC,KAAK,KAAK;AACxB;AAAA,MACF;AAAA,IACF;AACA,YAAQ,KAAK,CAAC,KAAK,KAAK,CAAC;AACzB,SAAK;AAAA,EACP;AAAA;AAAA;AAAA;AAAA,EAIA,OAAO,KAAK;AACV,UAAM,KAAK,KAAK,SAAS,GAAG;AAC5B,UAAM,UAAU,KAAK,MAAM,EAAE;AAC7B,QAAI,YAAY,QAAW;AACzB,aAAO;AAAA,IACT;AACA,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAI,KAAK,SAAS,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG;AACrC,YAAI,QAAQ,WAAW,GAAG;AACxB,iBAAO,KAAK,MAAM,EAAE;AAAA,QACtB,OAAO;AACL,kBAAQ,OAAO,GAAG,CAAC;AAAA,QACrB;AACA,aAAK;AACL,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,IAAI;AACV,YAAQ,KAAK,OAAO,CAAC,GAAG,YAAY;AAClC,iBAAW,CAAC,GAAG,CAAC,KAAK,SAAS;AAC5B,WAAG,GAAG,CAAC;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,UAAU;AACR,WAAO,QAAQ,KAAK,KAAK;AAAA,EAC3B;AAAA,EACA,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AAkBA,IAAM,6BAA6B,IAAI,UAAU,YAAY,UAAU;AACvE,SAAS,qBAAqB;AAC5B,SAAO;AACT;AACA,IAAM,qBAAqB,IAAI,UAAU,YAAY,UAAU;AAC/D,SAAS,eAAe,MAAM;AAC5B,MAAI,MAAM;AACV,aAAWC,QAAO,MAAM;AACtB,UAAM,IAAI,OAAOA,KAAI,KAAKA,IAAG;AAAA,EAC/B;AACA,SAAO;AACT;AACA,SAAS,0BAA0B;AACjC,SAAO,kBAAkB;AAC3B;AACA,SAAS,yCAAyCN,aAAY;AAC5D,MAAI,YAAY;AAChB,EAAAA,YAAW,QAAQ,CAAC,GAAG,MAAM,YAAY,UAAU,OAAO,GAAG,EAAE,iBAAiB,CAAC;AACjF,SAAO;AACT;AACA,SAAS,gBAAgB;AACvB,SAAO,kBAAkB;AAC3B;AACA,SAAS,iBAAiB;AACxB,SAAO,kBAAkB;AAC3B;AACA,SAAS,oBAAoB;AAC3B,SAAO,IAAI,UAAU,SAAO,IAAI,SAAS,GAAG,CAAC,GAAG,MAAM,EAAE,QAAQ,CAAC,CAAC;AACpE;AACA,IAAM,6BAA6B,IAAI,UAAU,YAAY,UAAU;AACvE,SAAS,qBAAqB;AAC5B,SAAO;AACT;AACA,IAAM,yBAAyB,IAAI,UAAU,YAAY,UAAU;AACnE,SAAS,kBAAkB,MAAM;AAC/B,MAAI,MAAM;AACV,aAAW,OAAO,MAAM;AACtB,UAAM,IAAI,IAAI,GAAG;AAAA,EACnB;AACA,SAAO;AACT;AACA,IAAM,sBAAsB,IAAI,UAAU,mBAAmB;AAC7D,SAAS,cAAc;AACrB,SAAO;AACT;AAsBA,SAAS,SAAS,YAAY,OAAO;AACnC,MAAI,WAAW,eAAe;AAC5B,QAAI,MAAM,KAAK,GAAG;AAChB,aAAO;AAAA,QACL,aAAa;AAAA,MACf;AAAA,IACF,WAAW,UAAU,UAAU;AAC7B,aAAO;AAAA,QACL,aAAa;AAAA,MACf;AAAA,IACF,WAAW,UAAU,WAAW;AAC9B,aAAO;AAAA,QACL,aAAa;AAAA,MACf;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,aAAa,eAAe,KAAK,IAAI,OAAO;AAAA,EAC9C;AACF;AAIA,SAAS,UAAU,OAAO;AACxB,SAAO;AAAA,IACL,cAAc,KAAK;AAAA,EACrB;AACF;AAMA,SAAS,SAAS,YAAY,OAAO;AACnC,SAAO,cAAc,KAAK,IAAI,UAAU,KAAK,IAAI,SAAS,YAAY,KAAK;AAC7E;AAmBA,IAAM,qBAAN,MAAyB;AAAA,EACvB,cAAc;AAGZ,SAAK,IAAI;AAAA,EACX;AACF;AAKA,SAAS,mCAAmC,WAAW,eAAe,gBAAgB;AACpF,MAAI,qBAAqB,0BAA0B;AACjD,WAAO,kBAAkB,gBAAgB,aAAa;AAAA,EACxD,WAAW,qBAAqB,8BAA8B;AAC5D,WAAO,kCAAkC,WAAW,aAAa;AAAA,EACnE,WAAW,qBAAqB,+BAA+B;AAC7D,WAAO,mCAAmC,WAAW,aAAa;AAAA,EACpE,OAAO;AACL,WAAO,mDAAmD,WAAW,aAAa;AAAA,EACpF;AACF;AAKA,SAAS,wCAAwC,WAAW,eAAe,iBAAiB;AAI1F,MAAI,qBAAqB,8BAA8B;AACrD,WAAO,kCAAkC,WAAW,aAAa;AAAA,EACnE,WAAW,qBAAqB,+BAA+B;AAC7D,WAAO,mCAAmC,WAAW,aAAa;AAAA,EACpE;AACA,SAAO;AACT;AAgBA,SAAS,mCAAmC,WAAW,eAAe;AACpE,MAAI,qBAAqB,oCAAoC;AAC3D,WAAO,SAAS,aAAa,IAAI,gBAAgB;AAAA,MAC/C,cAAc;AAAA,IAChB;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,yBAAyB,MAAM,OAAO;AAC7C,MAAI,gBAAgB,gCAAgC,iBAAiB,8BAA8B;AACjG,WAAO,YAAY,KAAK,UAAU,MAAM,UAAU,WAAW;AAAA,EAC/D,WAAW,gBAAgB,iCAAiC,iBAAiB,+BAA+B;AAC1G,WAAO,YAAY,KAAK,UAAU,MAAM,UAAU,WAAW;AAAA,EAC/D,WAAW,gBAAgB,sCAAsC,iBAAiB,oCAAoC;AACpH,WAAO,YAAY,KAAK,SAAS,MAAM,OAAO;AAAA,EAChD;AACA,SAAO,gBAAgB,4BAA4B,iBAAiB;AACtE;AAEA,IAAM,2BAAN,cAAuC,mBAAmB;AAAC;AAE3D,IAAM,+BAAN,cAA2C,mBAAmB;AAAA,EAC5D,YAAY,UAAU;AACpB,UAAM;AACN,SAAK,WAAW;AAAA,EAClB;AACF;AACA,SAAS,kCAAkC,WAAW,eAAe;AACnE,QAAM,SAAS,wBAAwB,aAAa;AACpD,aAAW,WAAW,UAAU,UAAU;AACxC,QAAI,CAAC,OAAO,KAAK,aAAW,YAAY,SAAS,OAAO,CAAC,GAAG;AAC1D,aAAO,KAAK,OAAO;AAAA,IACrB;AAAA,EACF;AACA,SAAO;AAAA,IACL,YAAY;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAEA,IAAM,gCAAN,cAA4C,mBAAmB;AAAA,EAC7D,YAAY,UAAU;AACpB,UAAM;AACN,SAAK,WAAW;AAAA,EAClB;AACF;AACA,SAAS,mCAAmC,WAAW,eAAe;AACpE,MAAI,SAAS,wBAAwB,aAAa;AAClD,aAAW,YAAY,UAAU,UAAU;AACzC,aAAS,OAAO,OAAO,aAAW,CAAC,YAAY,SAAS,QAAQ,CAAC;AAAA,EACnE;AACA,SAAO;AAAA,IACL,YAAY;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAOA,IAAM,qCAAN,cAAiD,mBAAmB;AAAA,EAClE,YAAY,YAAY,SAAS;AAC/B,UAAM;AACN,SAAK,aAAa;AAClB,SAAK,UAAU;AAAA,EACjB;AACF;AACA,SAAS,mDAAmD,WAAW,eAAe;AAIpF,QAAM,YAAY,mCAAmC,WAAW,aAAa;AAC7E,QAAMY,OAAM,SAAS,SAAS,IAAI,SAAS,UAAU,OAAO;AAC5D,MAAI,UAAU,SAAS,KAAK,UAAU,UAAU,OAAO,GAAG;AACxD,WAAO,UAAUA,IAAG;AAAA,EACtB,OAAO;AACL,WAAO,SAAS,UAAU,YAAYA,IAAG;AAAA,EAC3C;AACF;AACA,SAAS,SAAS,OAAO;AACvB,SAAO,gBAAgB,MAAM,gBAAgB,MAAM,WAAW;AAChE;AACA,SAAS,wBAAwB,OAAO;AACtC,SAAO,QAAQ,KAAK,KAAK,MAAM,WAAW,SAAS,MAAM,WAAW,OAAO,MAAM,IAAI,CAAC;AACxF;AAmBA,IAAM,iBAAN,MAAqB;AAAA,EACnB,YAAY,OAAO,WAAW;AAC5B,SAAK,QAAQ;AACb,SAAK,YAAY;AAAA,EACnB;AACF;AACA,SAAS,qBAAqB,MAAM,OAAO;AACzC,SAAO,KAAK,MAAM,QAAQ,MAAM,KAAK,KAAK,yBAAyB,KAAK,WAAW,MAAM,SAAS;AACpG;AACA,SAAS,wBAAwB,MAAM,OAAO;AAC5C,MAAI,SAAS,UAAa,UAAU,QAAW;AAC7C,WAAO;AAAA,EACT;AACA,MAAI,QAAQ,OAAO;AACjB,WAAO,YAAY,MAAM,OAAO,CAAC,GAAG,MAAM,qBAAqB,GAAG,CAAC,CAAC;AAAA,EACtE;AACA,SAAO;AACT;AAEA,IAAM,iBAAN,MAAqB;AAAA,EACnB,YAWAhB,UAQA,kBAAkB;AAChB,SAAK,UAAUA;AACf,SAAK,mBAAmB;AAAA,EAC1B;AACF;AAMA,IAAM,eAAN,MAAM,cAAa;AAAA,EACjB,YAAY,YAAY,QAAQ;AAC9B,SAAK,aAAa;AAClB,SAAK,SAAS;AAAA,EAChB;AAAA;AAAA,EAEA,OAAO,OAAO;AACZ,WAAO,IAAI,cAAa;AAAA,EAC1B;AAAA;AAAA,EAEA,OAAO,OAAO,QAAQ;AACpB,WAAO,IAAI,cAAa,QAAW,MAAM;AAAA,EAC3C;AAAA;AAAA,EAEA,OAAO,WAAWA,UAAS;AACzB,WAAO,IAAI,cAAaA,QAAO;AAAA,EACjC;AAAA;AAAA,EAEA,IAAI,SAAS;AACX,WAAO,KAAK,eAAe,UAAa,KAAK,WAAW;AAAA,EAC1D;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,KAAK,WAAW,MAAM,WAAW,KAAK,aAAa,CAAC,CAAC,MAAM,cAAc,KAAK,WAAW,QAAQ,MAAM,UAAU,IAAI,CAAC,MAAM;AAAA,EACrI;AACF;AAEA,SAAS,+BAA+B,cAAc,UAAU;AAC9D,MAAI,aAAa,eAAe,QAAW;AACzC,WAAO,SAAS,gBAAgB,KAAK,SAAS,QAAQ,QAAQ,aAAa,UAAU;AAAA,EACvF,WAAW,aAAa,WAAW,QAAW;AAC5C,WAAO,aAAa,WAAW,SAAS,gBAAgB;AAAA,EAC1D,OAAO;AACL,WAAO;AAAA,EACT;AACF;AA6CA,IAAM,WAAN,MAAe;AAAC;AAMhB,SAAS,yBAAyBU,MAAK,MAAM;AAC3C,MAAI,CAACA,KAAI,qBAAqB,QAAQ,KAAK,OAAO,WAAW,GAAG;AAC9D,WAAO;AAAA,EACT;AAEA,MAAI,SAAS,MAAM;AACjB,QAAIA,KAAI,aAAa,GAAG;AACtB,aAAO,IAAI,eAAeA,KAAI,KAAK,aAAa,KAAK,CAAC;AAAA,IACxD,OAAO;AACL,aAAO,IAAI,YAAYA,KAAI,KAAKA,KAAI,MAAM,aAAa,KAAK,CAAC;AAAA,IAC/D;AAAA,EACF,OAAO;AACL,UAAM,WAAWA,KAAI;AACrB,UAAM,aAAa,YAAY,MAAM;AACrC,QAAI,UAAU,IAAI,UAAU,YAAY,UAAU;AAClD,aAAS,QAAQ,KAAK,QAAQ;AAC5B,UAAI,CAAC,QAAQ,IAAI,IAAI,GAAG;AACtB,YAAI,QAAQ,SAAS,MAAM,IAAI;AAU/B,YAAI,UAAU,QAAQ,KAAK,SAAS,GAAG;AACrC,iBAAO,KAAK,QAAQ;AACpB,kBAAQ,SAAS,MAAM,IAAI;AAAA,QAC7B;AACA,YAAI,UAAU,MAAM;AAClB,qBAAW,OAAO,IAAI;AAAA,QACxB,OAAO;AACL,qBAAW,IAAI,MAAM,KAAK;AAAA,QAC5B;AACA,kBAAU,QAAQ,IAAI,IAAI;AAAA,MAC5B;AAAA,IACF;AACA,WAAO,IAAI,cAAcA,KAAI,KAAK,YAAY,IAAI,UAAU,QAAQ,QAAQ,CAAC,GAAG,aAAa,KAAK,CAAC;AAAA,EACrG;AACF;AAaA,SAAS,8BAA8B,UAAU,UAAU,gBAAgB;AACzE,MAAI,oBAAoB,aAAa;AACnC,qCAAiC,UAAU,UAAU,cAAc;AAAA,EACrE,WAAW,oBAAoB,eAAe;AAC5C,uCAAmC,UAAU,UAAU,cAAc;AAAA,EACvE,OAAO;AACL,wCAAoC,UAAU,UAAU,cAAc;AAAA,EACxE;AACF;AAeA,SAAS,yBAAyB,UAAU,UAAU,cAAc,gBAAgB;AAClF,MAAI,oBAAoB,aAAa;AACnC,WAAO,4BAA4B,UAAU,UAAU,cAAc,cAAc;AAAA,EACrF,WAAW,oBAAoB,eAAe;AAC5C,WAAO,8BAA8B,UAAU,UAAU,cAAc,cAAc;AAAA,EACvF,OAAO;AACL,WAAO,+BAA+B,UAAU,UAAU,YAAY;AAAA,EACxE;AACF;AAiBA,SAAS,yBAAyB,UAAU,UAAU;AACpD,MAAI,aAAa;AACjB,aAAW,kBAAkB,SAAS,iBAAiB;AACrD,UAAM,gBAAgB,SAAS,KAAK,MAAM,eAAe,KAAK;AAC9D,UAAM,eAAe,mCAAmC,eAAe,WAAW,iBAAiB,IAAI;AACvG,QAAI,gBAAgB,MAAM;AACxB,UAAI,eAAe,MAAM;AACvB,qBAAa,YAAY,MAAM;AAAA,MACjC;AACA,iBAAW,IAAI,eAAe,OAAO,YAAY;AAAA,IACnD;AAAA,EACF;AACA,SAAO,aAAa,aAAa;AACnC;AACA,SAAS,eAAe,MAAM,OAAO;AACnC,MAAI,KAAK,SAAS,MAAM,MAAM;AAC5B,WAAO;AAAA,EACT;AACA,MAAI,CAAC,KAAK,IAAI,QAAQ,MAAM,GAAG,GAAG;AAChC,WAAO;AAAA,EACT;AACA,MAAI,CAAC,KAAK,aAAa,QAAQ,MAAM,YAAY,GAAG;AAClD,WAAO;AAAA,EACT;AACA,MAAI,CAAC,wBAAwB,KAAK,iBAAiB,MAAM,eAAe,GAAG;AACzE,WAAO;AAAA,EACT;AACA,MAAI,KAAK,SAAS,GAA0B;AAC1C,WAAO,KAAK,MAAM,QAAQ,MAAM,KAAK;AAAA,EACvC;AACA,MAAI,KAAK,SAAS,GAA4B;AAC5C,WAAO,KAAK,KAAK,QAAQ,MAAM,IAAI,KAAK,KAAK,UAAU,QAAQ,MAAM,SAAS;AAAA,EAChF;AACA,SAAO;AACT;AAKA,IAAM,cAAN,cAA0B,SAAS;AAAA,EACjC,YAAY,KAAK,OAAO,cAAc,kBAAkB,CAAC,GAAG;AAC1D,UAAM;AACN,SAAK,MAAM;AACX,SAAK,QAAQ;AACb,SAAK,eAAe;AACpB,SAAK,kBAAkB;AACvB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,eAAe;AACb,WAAO;AAAA,EACT;AACF;AACA,SAAS,iCAAiC,UAAU,UAAU,gBAAgB;AAI5E,QAAM,UAAU,SAAS,MAAM,MAAM;AACrC,QAAM,mBAAmB,uBAAuB,SAAS,iBAAiB,UAAU,eAAe,gBAAgB;AACnH,UAAQ,OAAO,gBAAgB;AAC/B,WAAS,uBAAuB,eAAe,SAAS,OAAO,EAAE,yBAAyB;AAC5F;AACA,SAAS,4BAA4B,UAAU,UAAU,cAAc,gBAAgB;AACrF,MAAI,CAAC,+BAA+B,SAAS,cAAc,QAAQ,GAAG;AAGpE,WAAO;AAAA,EACT;AACA,QAAM,UAAU,SAAS,MAAM,MAAM;AACrC,QAAM,mBAAmB,sBAAsB,SAAS,iBAAiB,gBAAgB,QAAQ;AACjG,UAAQ,OAAO,gBAAgB;AAC/B,WAAS,uBAAuB,SAAS,SAAS,OAAO,EAAE,qBAAqB;AAChF,SAAO;AACT;AAcA,IAAM,gBAAN,cAA4B,SAAS;AAAA,EACnC,YAAY,KAAK,MAAM,WAAW,cAAc,kBAAkB,CAAC,GAAG;AACpE,UAAM;AACN,SAAK,MAAM;AACX,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,eAAe;AACpB,SAAK,kBAAkB;AACvB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,eAAe;AACb,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,mCAAmC,UAAU,UAAU,gBAAgB;AAC9E,MAAI,CAAC,+BAA+B,SAAS,cAAc,QAAQ,GAAG;AAKpE,aAAS,yBAAyB,eAAe,OAAO;AACxD;AAAA,EACF;AACA,QAAM,mBAAmB,uBAAuB,SAAS,iBAAiB,UAAU,eAAe,gBAAgB;AACnH,QAAM,UAAU,SAAS;AACzB,UAAQ,OAAO,SAAS,QAAQ,CAAC;AACjC,UAAQ,OAAO,gBAAgB;AAC/B,WAAS,uBAAuB,eAAe,SAAS,OAAO,EAAE,yBAAyB;AAC5F;AACA,SAAS,8BAA8B,UAAU,UAAU,cAAc,gBAAgB;AACvF,MAAI,CAAC,+BAA+B,SAAS,cAAc,QAAQ,GAAG;AACpE,WAAO;AAAA,EACT;AACA,QAAM,mBAAmB,sBAAsB,SAAS,iBAAiB,gBAAgB,QAAQ;AACjG,QAAM,UAAU,SAAS;AACzB,UAAQ,OAAO,SAAS,QAAQ,CAAC;AACjC,UAAQ,OAAO,gBAAgB;AAC/B,WAAS,uBAAuB,SAAS,SAAS,OAAO,EAAE,qBAAqB;AAChF,MAAI,iBAAiB,MAAM;AACzB,WAAO;AAAA,EACT;AACA,SAAO,aAAa,UAAU,SAAS,UAAU,MAAM,EAAE,UAAU,SAAS,gBAAgB,IAAI,eAAa,UAAU,KAAK,CAAC;AAC/H;AAIA,SAAS,SAAS,UAAU;AAC1B,QAAM,SAAS,oBAAI,IAAI;AACvB,WAAS,UAAU,OAAO,QAAQ,eAAa;AAC7C,QAAI,CAAC,UAAU,QAAQ,GAAG;AACxB,YAAM,WAAW,SAAS,KAAK,MAAM,SAAS;AAC9C,aAAO,IAAI,WAAW,QAAQ;AAAA,IAChC;AAAA,EACF,CAAC;AACD,SAAO;AACT;AAYA,SAAS,uBAAuB,iBAAiB,iBAAiBO,yBAAwB;AACxF,QAAM,mBAAmB,oBAAI,IAAI;AACjC,aAAW,gBAAgB,WAAWA,wBAAuB,MAAM;AACnE,WAAS,IAAI,GAAG,IAAIA,wBAAuB,QAAQ,KAAK;AACtD,UAAM,iBAAiB,gBAAgB,CAAC;AACxC,UAAM,YAAY,eAAe;AACjC,UAAM,gBAAgB,gBAAgB,KAAK,MAAM,eAAe,KAAK;AACrE,qBAAiB,IAAI,eAAe,OAAO,wCAAwC,WAAW,eAAeA,wBAAuB,CAAC,CAAC,CAAC;AAAA,EACzI;AACA,SAAO;AACT;AAYA,SAAS,sBAAsB,iBAAiB,gBAAgB,iBAAiB;AAC/E,QAAM,mBAAmB,oBAAI,IAAI;AACjC,aAAW,kBAAkB,iBAAiB;AAC5C,UAAM,YAAY,eAAe;AACjC,UAAM,gBAAgB,gBAAgB,KAAK,MAAM,eAAe,KAAK;AACrE,qBAAiB,IAAI,eAAe,OAAO,mCAAmC,WAAW,eAAe,cAAc,CAAC;AAAA,EACzH;AACA,SAAO;AACT;AAEA,IAAM,iBAAN,cAA6B,SAAS;AAAA,EACpC,YAAY,KAAK,cAAc;AAC7B,UAAM;AACN,SAAK,MAAM;AACX,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,kBAAkB,CAAC;AAAA,EAC1B;AAAA,EACA,eAAe;AACb,WAAO;AAAA,EACT;AACF;AACA,SAAS,oCAAoC,UAAU,UAAU,gBAAgB;AAI/E,WAAS,oBAAoB,eAAe,OAAO,EAAE,yBAAyB;AAChF;AACA,SAAS,+BAA+B,UAAU,UAAU,cAAc;AACxE,MAAI,+BAA+B,SAAS,cAAc,QAAQ,GAAG;AACnE,aAAS,oBAAoB,SAAS,OAAO,EAAE,qBAAqB;AACpE,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAQA,IAAM,iBAAN,cAA6B,SAAS;AAAA,EACpC,YAAY,KAAK,cAAc;AAC7B,UAAM;AACN,SAAK,MAAM;AACX,SAAK,eAAe;AACpB,SAAK,OAAO;AACZ,SAAK,kBAAkB,CAAC;AAAA,EAC1B;AAAA,EACA,eAAe;AACb,WAAO;AAAA,EACT;AACF;AAqBA,IAAM,gBAAN,MAAoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYlB,YAAY,SAAS,gBAAgB,eAAe,WAAW;AAC7D,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,gBAAgB;AACrB,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAsB,UAAU,aAAa;AAC3C,UAAM,kBAAkB,YAAY;AACpC,aAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,YAAM,WAAW,KAAK,UAAU,CAAC;AACjC,UAAI,SAAS,IAAI,QAAQ,SAAS,GAAG,GAAG;AACtC,cAAM,iBAAiB,gBAAgB,CAAC;AACxC,sCAA8B,UAAU,UAAU,cAAc;AAAA,MAClE;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB,UAAU,eAAe;AAGxC,eAAW,YAAY,KAAK,eAAe;AACzC,UAAI,SAAS,IAAI,QAAQ,SAAS,GAAG,GAAG;AACtC,wBAAgB,yBAAyB,UAAU,UAAU,eAAe,KAAK,cAAc;AAAA,MACjG;AAAA,IACF;AAEA,eAAW,YAAY,KAAK,WAAW;AACrC,UAAI,SAAS,IAAI,QAAQ,SAAS,GAAG,GAAG;AACtC,wBAAgB,yBAAyB,UAAU,UAAU,eAAe,KAAK,cAAc;AAAA,MACjG;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,wBAAwBC,cAAa,+BAA+B;AAIlE,UAAM,WAAW,eAAe;AAChC,SAAK,UAAU,QAAQ,OAAK;AAC1B,YAAM,oBAAoBA,aAAY,IAAI,EAAE,GAAG;AAG/C,YAAM,kBAAkB,kBAAkB;AAC1C,UAAI,gBAAgB,KAAK,iBAAiB,iBAAiB,kBAAkB,aAAa;AAI1F,sBAAgB,8BAA8B,IAAI,EAAE,GAAG,IAAI,OAAO;AAClE,YAAM,UAAU,yBAAyB,iBAAiB,aAAa;AACvE,UAAI,YAAY,MAAM;AACpB,iBAAS,IAAI,EAAE,KAAK,OAAO;AAAA,MAC7B;AACA,UAAI,CAAC,gBAAgB,gBAAgB,GAAG;AACtC,wBAAgB,oBAAoB,gBAAgB,IAAI,CAAC;AAAA,MAC3D;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,OAAO;AACL,WAAO,KAAK,UAAU,OAAO,CAAC,MAAM,MAAM,KAAK,IAAI,EAAE,GAAG,GAAG,eAAe,CAAC;AAAA,EAC7E;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,KAAK,YAAY,MAAM,WAAW,YAAY,KAAK,WAAW,MAAM,WAAW,CAAC,GAAG,MAAM,eAAe,GAAG,CAAC,CAAC,KAAK,YAAY,KAAK,eAAe,MAAM,eAAe,CAAC,GAAG,MAAM,eAAe,GAAG,CAAC,CAAC;AAAA,EAC9M;AACF;AAEA,IAAM,sBAAN,MAAM,qBAAoB;AAAA,EACxB,YAAY,OAAO,eAAe,iBAKlC,aAAa;AACX,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,kBAAkB;AACvB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,KAAK,OAAO,eAAe,SAAS;AACzC,eAAW,MAAM,UAAU,WAAW,QAAQ,MAAM;AACpD,QAAI,aAAa,mBAAmB;AACpC,UAAM,YAAY,MAAM;AACxB,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AACzC,mBAAa,WAAW,OAAO,UAAU,CAAC,EAAE,KAAK,QAAQ,CAAC,EAAE,OAAO;AAAA,IACrE;AACA,WAAO,IAAI,qBAAoB,OAAO,eAAe,SAAS,UAAU;AAAA,EAC1E;AACF;AAwBA,IAAM,UAAN,MAAc;AAAA,EACZ,YAAY,gBAAgB,UAAU;AACpC,SAAK,iBAAiB;AACtB,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,SAAS;AACP,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,UAAU,QAAQ,KAAK,aAAa,MAAM;AAAA,EACnD;AAAA,EACA,WAAW;AACT,WAAO;AAAA,wBACa,KAAK,cAAc;AAAA,kBACzB,KAAK,SAAS,SAAS,CAAC;AAAA;AAAA,EAExC;AACF;AAkBA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAYZ,QAAO,gBAAgB;AACjC,SAAK,QAAQA;AACb,SAAK,iBAAiB;AAAA,EACxB;AACF;AA4BA,IAAI;AAAA,CACH,SAAUa,UAAS;AAClB,EAAAA,SAAQA,SAAQ,IAAI,IAAI,CAAC,IAAI;AAC7B,EAAAA,SAAQA,SAAQ,WAAW,IAAI,CAAC,IAAI;AACpC,EAAAA,SAAQA,SAAQ,SAAS,IAAI,CAAC,IAAI;AAClC,EAAAA,SAAQA,SAAQ,kBAAkB,IAAI,CAAC,IAAI;AAC3C,EAAAA,SAAQA,SAAQ,mBAAmB,IAAI,CAAC,IAAI;AAC5C,EAAAA,SAAQA,SAAQ,WAAW,IAAI,CAAC,IAAI;AACpC,EAAAA,SAAQA,SAAQ,gBAAgB,IAAI,CAAC,IAAI;AACzC,EAAAA,SAAQA,SAAQ,mBAAmB,IAAI,CAAC,IAAI;AAC5C,EAAAA,SAAQA,SAAQ,iBAAiB,IAAI,EAAE,IAAI;AAC3C,EAAAA,SAAQA,SAAQ,oBAAoB,IAAI,CAAC,IAAI;AAC7C,EAAAA,SAAQA,SAAQ,qBAAqB,IAAI,CAAC,IAAI;AAC9C,EAAAA,SAAQA,SAAQ,SAAS,IAAI,EAAE,IAAI;AACnC,EAAAA,SAAQA,SAAQ,cAAc,IAAI,EAAE,IAAI;AACxC,EAAAA,SAAQA,SAAQ,eAAe,IAAI,EAAE,IAAI;AACzC,EAAAA,SAAQA,SAAQ,UAAU,IAAI,EAAE,IAAI;AACpC,EAAAA,SAAQA,SAAQ,aAAa,IAAI,EAAE,IAAI;AACvC,EAAAA,SAAQA,SAAQ,WAAW,IAAI,EAAE,IAAI;AACvC,GAAG,YAAY,UAAU,CAAC,EAAE;AAO5B,SAAS,iBAAiB,MAAM;AAC9B,UAAQ,MAAM;AAAA,IACZ,KAAK,KAAK;AACR,aAAO,KAAK;AAAA,IACd,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IAGV,KAAK,KAAK;AACR,aAAO;AAAA,IACT,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IAIV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AAAA,IACV,KAAK,KAAK;AACR,aAAO;AAAA,IACT;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AAaA,SAAS,sBAAsB,MAAM;AACnC,SAAO,iBAAiB,IAAI,KAAK,SAAS,KAAK;AACjD;AAQA,SAAS,mBAAmB,MAAM;AAChC,MAAI,SAAS,QAAW;AAGtB,aAAS,yBAAyB;AAClC,WAAO,KAAK;AAAA,EACd;AACA,UAAQ,MAAM;AAAA,IACZ,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd,KAAK,QAAQ;AACX,aAAO,KAAK;AAAA,IACd;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AAqBA,IAAM,oBAAN,cAAgC,MAAM;AAAA,EACpC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,SAAK,OAAO;AAAA,EACd;AACF;AAyBA,IAAI,kBAAkB;AAKtB,SAAS,mBAAmB,UAAU;AACpC,MAAI,iBAAiB;AACnB,UAAM,IAAI,MAAM,2CAA2C;AAAA,EAC7D;AACA,oBAAkB;AACpB;AAqBA,SAAS,iBAAiB;AACxB,SAAO,IAAI,YAAY;AACzB;AAIA,SAAS,iBAAiB;AACxB,SAAO,IAAI,YAAY,OAAO;AAChC;AAkBA,IAAM,8BAA8B,IAAI,QAAQ,CAAC,YAAY,UAAU,GAAG,CAAC;AAE3E,SAAS,gBAAgB,OAAO;AAC9B,QAAM,eAAe,eAAe,EAAE,OAAO,KAAK;AAClD,QAAM,MAAM,IAAI,IAAI;AACpB,MAAI,OAAO,YAAY;AACvB,SAAO,IAAI,WAAW,IAAI,OAAO,CAAC;AACpC;AAGA,SAAS,cAAcC,QAAO;AAC5B,QAAM,WAAW,IAAI,SAASA,OAAM,MAAM;AAC1C,QAAM,SAAS,SAAS;AAAA,IAAU;AAAA;AAAA,IAAsB;AAAA,EAAI;AAC5D,QAAM,SAAS,SAAS;AAAA,IAAU;AAAA;AAAA,IAAsB;AAAA,EAAI;AAC5D,QAAM,SAAS,SAAS;AAAA,IAAU;AAAA;AAAA,IAAsB;AAAA,EAAI;AAC5D,QAAM,SAAS,SAAS;AAAA,IAAU;AAAA;AAAA,IAAuB;AAAA,EAAI;AAC7D,QAAM,WAAW,IAAI,QAAQ,CAAC,QAAQ,MAAM,GAAG,CAAC;AAChD,QAAM,WAAW,IAAI,QAAQ,CAAC,QAAQ,MAAM,GAAG,CAAC;AAChD,SAAO,CAAC,UAAU,QAAQ;AAC5B;AACA,IAAM,cAAN,MAAM,aAAY;AAAA,EAChB,YAAY,QAAQ,SAAS,WAAW;AACtC,SAAK,SAAS;AACd,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,QAAI,UAAU,KAAK,WAAW,GAAG;AAC/B,YAAM,IAAI,iBAAiB,oBAAoB,OAAO,EAAE;AAAA,IAC1D;AACA,QAAI,YAAY,GAAG;AACjB,YAAM,IAAI,iBAAiB,uBAAuB,SAAS,EAAE;AAAA,IAC/D;AACA,QAAI,OAAO,SAAS,KAAK,KAAK,cAAc,GAAG;AAE7C,YAAM,IAAI,iBAAiB,uBAAuB,SAAS,EAAE;AAAA,IAC/D;AACA,QAAI,OAAO,WAAW,KAAK,YAAY,GAAG;AAExC,YAAM,IAAI,iBAAiB,4CAA4C,OAAO,EAAE;AAAA,IAClF;AACA,SAAK,WAAW,OAAO,SAAS,IAAI;AAEpC,SAAK,oBAAoB,QAAQ,WAAW,KAAK,QAAQ;AAAA,EAC3D;AAAA;AAAA;AAAA,EAGA,YAAY,MAAM,MAAM,WAAW;AAEjC,QAAI,YAAY,KAAK,IAAI,KAAK,SAAS,QAAQ,WAAW,SAAS,CAAC,CAAC;AAErE,QAAI,UAAU,QAAQ,2BAA2B,MAAM,GAAG;AACxD,kBAAY,IAAI,QAAQ,CAAC,UAAU,QAAQ,CAAC,GAAG,UAAU,QAAQ,CAAC,CAAC,GAAG,CAAC;AAAA,IACzE;AACA,WAAO,UAAU,OAAO,KAAK,iBAAiB,EAAE,SAAS;AAAA,EAC3D;AAAA;AAAA,EAEA,SAAS,OAAO;AAEd,UAAM,OAAO,KAAK,OAAO,KAAK,MAAM,QAAQ,CAAC,CAAC;AAC9C,UAAM,SAAS,QAAQ;AACvB,YAAQ,OAAO,KAAQ,YAAY;AAAA,EACrC;AAAA,EACA,aAAa,OAAO;AAElB,QAAI,KAAK,aAAa,GAAG;AACvB,aAAO;AAAA,IACT;AACA,UAAM,iBAAiB,gBAAgB,KAAK;AAC5C,UAAM,CAAC,OAAO,KAAK,IAAI,cAAc,cAAc;AACnD,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,KAAK;AACvC,YAAM,QAAQ,KAAK,YAAY,OAAO,OAAO,CAAC;AAC9C,UAAI,CAAC,KAAK,SAAS,KAAK,GAAG;AACzB,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAEA,OAAO,OAAO,UAAU,WAAW,UAAU;AAC3C,UAAM,UAAU,WAAW,MAAM,IAAI,IAAI,IAAI,WAAW;AACxD,UAAM,SAAS,IAAI,WAAW,KAAK,KAAK,WAAW,CAAC,CAAC;AACrD,UAAM,cAAc,IAAI,aAAY,QAAQ,SAAS,SAAS;AAC9D,aAAS,QAAQ,UAAQ,YAAY,OAAO,IAAI,CAAC;AACjD,WAAO;AAAA,EACT;AAAA,EACA,OAAO,OAAO;AACZ,QAAI,KAAK,aAAa,GAAG;AACvB;AAAA,IACF;AACA,UAAM,iBAAiB,gBAAgB,KAAK;AAC5C,UAAM,CAAC,OAAO,KAAK,IAAI,cAAc,cAAc;AACnD,aAAS,IAAI,GAAG,IAAI,KAAK,WAAW,KAAK;AACvC,YAAM,QAAQ,KAAK,YAAY,OAAO,OAAO,CAAC;AAC9C,WAAK,OAAO,KAAK;AAAA,IACnB;AAAA,EACF;AAAA,EACA,OAAO,OAAO;AACZ,UAAM,cAAc,KAAK,MAAM,QAAQ,CAAC;AACxC,UAAM,SAAS,QAAQ;AACvB,SAAK,OAAO,WAAW,KAAK,KAAQ;AAAA,EACtC;AACF;AACA,IAAM,mBAAN,cAA+B,MAAM;AAAA,EACnC,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,SAAK,OAAO;AAAA,EACd;AACF;AAuBA,IAAM,cAAN,MAAM,aAAY;AAAA,EAChB,YAIA,iBAIA,eAMA,kBAKA,iBAIA,wBAAwB;AACtB,SAAK,kBAAkB;AACvB,SAAK,gBAAgB;AACrB,SAAK,mBAAmB;AACxB,SAAK,kBAAkB;AACvB,SAAK,yBAAyB;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,6CAA6C,UAAU,SAAS,aAAa;AAClF,UAAM,gBAAgB,oBAAI,IAAI;AAC9B,kBAAc,IAAI,UAAU,aAAa,8CAA8C,UAAU,SAAS,WAAW,CAAC;AACtH,WAAO,IAAI,aAAY,gBAAgB,IAAI,GAAG,eAAe,IAAI,UAAU,mBAAmB,GAAG,mBAAmB,GAAG,eAAe,CAAC;AAAA,EACzI;AACF;AASA,IAAM,eAAN,MAAM,cAAa;AAAA,EACjB,YAOA,aAMA,SAKA,gBAKA,mBAKA,kBAAkB;AAChB,SAAK,cAAc;AACnB,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,oBAAoB;AACzB,SAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,8CAA8C,UAAU,SAAS,aAAa;AACnF,WAAO,IAAI,cAAa,aAAa,SAAS,eAAe,GAAG,eAAe,GAAG,eAAe,CAAC;AAAA,EACpG;AACF;AAwBA,IAAM,sBAAN,MAA0B;AAAA,EACxB,YACA,kBACA,kBACA,KAKA,QAAQ;AACN,SAAK,mBAAmB;AACxB,SAAK,mBAAmB;AACxB,SAAK,MAAM;AACX,SAAK,SAAS;AAAA,EAChB;AACF;AACA,IAAM,wBAAN,MAA4B;AAAA,EAC1B,YAAY,UAAU,iBAAiB;AACrC,SAAK,WAAW;AAChB,SAAK,kBAAkB;AAAA,EACzB;AACF;AACA,IAAM,oBAAN,MAAwB;AAAA,EACtB,YACA,OACA,WAOA,cAAc,WAAW,mBACzB,QAAQ,MAAM;AACZ,SAAK,QAAQ;AACb,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,QAAQ;AAAA,EACf;AACF;AAEA,IAAM,cAAN,MAAkB;AAAA,EAChB,cAAc;AAKZ,SAAK,mBAAmB;AAOxB,SAAK,kBAAkB,mBAAmB;AAE1C,SAAK,eAAe,WAAW;AAC/B,SAAK,WAAW;AAMhB,SAAK,qBAAqB;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAEA,IAAI,cAAc;AAChB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAEA,IAAI,YAAY;AACd,WAAO,KAAK,qBAAqB;AAAA,EACnC;AAAA;AAAA,EAEA,IAAI,oBAAoB;AACtB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,aAAa;AAC7B,QAAI,YAAY,oBAAoB,IAAI,GAAG;AACzC,WAAK,qBAAqB;AAC1B,WAAK,eAAe;AAAA,IACtB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB;AACf,QAAI,iBAAiB,eAAe;AACpC,QAAI,oBAAoB,eAAe;AACvC,QAAI,mBAAmB,eAAe;AACtC,SAAK,gBAAgB,QAAQ,CAAC,KAAK,eAAe;AAChD,cAAQ,YAAY;AAAA,QAClB,KAAK;AACH,2BAAiB,eAAe,IAAI,GAAG;AACvC;AAAA,QACF,KAAK;AACH,8BAAoB,kBAAkB,IAAI,GAAG;AAC7C;AAAA,QACF,KAAK;AACH,6BAAmB,iBAAiB,IAAI,GAAG;AAC3C;AAAA,QACF;AACE,eAAK;AAAA,MACT;AAAA,IACF,CAAC;AACD,WAAO,IAAI,aAAa,KAAK,cAAc,KAAK,UAAU,gBAAgB,mBAAmB,gBAAgB;AAAA,EAC/G;AAAA;AAAA;AAAA;AAAA,EAIA,sBAAsB;AACpB,SAAK,qBAAqB;AAC1B,SAAK,kBAAkB,mBAAmB;AAAA,EAC5C;AAAA,EACA,kBAAkB,KAAK,YAAY;AACjC,SAAK,qBAAqB;AAC1B,SAAK,kBAAkB,KAAK,gBAAgB,OAAO,KAAK,UAAU;AAAA,EACpE;AAAA,EACA,qBAAqB,KAAK;AACxB,SAAK,qBAAqB;AAC1B,SAAK,kBAAkB,KAAK,gBAAgB,OAAO,GAAG;AAAA,EACxD;AAAA,EACA,6BAA6B;AAC3B,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EACA,uBAAuB;AACrB,SAAK,oBAAoB;AACzB,eAAW,KAAK,oBAAoB,CAAC;AAAA,EACvC;AAAA,EACA,cAAc;AACZ,SAAK,qBAAqB;AAC1B,SAAK,WAAW;AAAA,EAClB;AACF;AACA,IAAM,YAAY;AAIlB,IAAM,wBAAN,MAA4B;AAAA,EAC1B,YAAY,kBAAkB;AAC5B,SAAK,mBAAmB;AAExB,SAAK,eAAe,oBAAI,IAAI;AAE5B,SAAK,yBAAyB,mBAAmB;AAEjD,SAAK,+BAA+B,kBAAkB;AAMtD,SAAK,sBAAsB,IAAI,UAAU,mBAAmB;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,WAAW;AAC9B,eAAW,YAAY,UAAU,kBAAkB;AACjD,UAAI,UAAU,UAAU,UAAU,OAAO,gBAAgB,GAAG;AAC1D,aAAK,oBAAoB,UAAU,UAAU,MAAM;AAAA,MACrD,OAAO;AACL,aAAK,yBAAyB,UAAU,UAAU,KAAK,UAAU,MAAM;AAAA,MACzE;AAAA,IACF;AACA,eAAW,YAAY,UAAU,kBAAkB;AACjD,WAAK,yBAAyB,UAAU,UAAU,KAAK,UAAU,MAAM;AAAA,IACzE;AAAA,EACF;AAAA;AAAA,EAEA,mBAAmB,cAAc;AAC/B,SAAK,cAAc,cAAc,cAAY;AAC3C,YAAM,cAAc,KAAK,kBAAkB,QAAQ;AACnD,cAAQ,aAAa,OAAO;AAAA,QAC1B,KAAK;AACH,cAAI,KAAK,eAAe,QAAQ,GAAG;AACjC,wBAAY,kBAAkB,aAAa,WAAW;AAAA,UACxD;AACA;AAAA,QACF,KAAK;AAGH,sBAAY,qBAAqB;AACjC,cAAI,CAAC,YAAY,WAAW;AAI1B,wBAAY,oBAAoB;AAAA,UAClC;AACA,sBAAY,kBAAkB,aAAa,WAAW;AACtD;AAAA,QACF,KAAK;AAKH,sBAAY,qBAAqB;AACjC,cAAI,CAAC,YAAY,WAAW;AAC1B,iBAAK,aAAa,QAAQ;AAAA,UAC5B;AACA;AAAA,QACF,KAAK;AACH,cAAI,KAAK,eAAe,QAAQ,GAAG;AACjC,wBAAY,YAAY;AACxB,wBAAY,kBAAkB,aAAa,WAAW;AAAA,UACxD;AACA;AAAA,QACF,KAAK;AACH,cAAI,KAAK,eAAe,QAAQ,GAAG;AAIjC,iBAAK,YAAY,QAAQ;AACzB,wBAAY,kBAAkB,aAAa,WAAW;AAAA,UACxD;AACA;AAAA,QACF;AACE,eAAK;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,cAAc,IAAI;AAC9B,QAAI,aAAa,UAAU,SAAS,GAAG;AACrC,mBAAa,UAAU,QAAQ,EAAE;AAAA,IACnC,OAAO;AACL,WAAK,aAAa,QAAQ,CAAC,GAAG,aAAa;AACzC,YAAI,KAAK,eAAe,QAAQ,GAAG;AACjC,aAAG,QAAQ;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB,aAAa;AACjC,UAAM,WAAW,YAAY;AAC7B,UAAM,gBAAgB,YAAY,gBAAgB;AAClD,UAAM,aAAa,KAAK,0BAA0B,QAAQ;AAC1D,QAAI,YAAY;AACd,YAAM,SAAS,WAAW;AAC1B,UAAI,uBAAuB,MAAM,GAAG;AAClC,YAAI,kBAAkB,GAAG;AAOvB,gBAAM,MAAM,IAAI,YAAY,OAAO,IAAI;AACvC,eAAK,yBAAyB,UAAU,KAAK,gBAAgB,cAAc,KAAK,gBAAgB,IAAI,CAAC,CAAC;AAAA,QACxG,OAAO;AACL,qBAAW,kBAAkB,CAAC;AAAA,QAChC;AAAA,MACF,OAAO;AACL,cAAM,cAAc,KAAK,iCAAiC,QAAQ;AAGlE,YAAI,gBAAgB,eAAe;AAEjC,gBAAM,cAAc,KAAK,iBAAiB,WAAW;AACrD,gBAAM,SAAS,cAAc,KAAK,iBAAiB,aAAa,aAAa,WAAW,IAAI;AAC5F,cAAI,WAAW,GAA8C;AAG3D,iBAAK,YAAY,QAAQ;AACzB,kBAAM,UAAU,WAAW,IAAqD,8CAA+F;AAC/K,iBAAK,sBAAsB,KAAK,oBAAoB,OAAO,UAAU,OAAO;AAAA,UAC9E;AACA,8BAAoB,QAAQ,oBAAoB,SAAS,SAAS,gBAAgB,gCAAgC,iDAAiD,aAAa,YAAY,iBAAiB,KAAK,iBAAiB,cAAc,GAAG,aAAa,MAAM,CAAC;AAAA,QAC1Q;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,aAAa;AAC5B,UAAM,iBAAiB,YAAY,gBAAgB;AACnD,QAAI,CAAC,kBAAkB,CAAC,eAAe,MAAM;AAC3C,aAAO;AAAA,IACT;AACA,UAAM;AAAA,MACJ,MAAM;AAAA,QACJ,SAAS;AAAA,QACT,UAAU;AAAA,MACZ;AAAA,MACA,YAAY;AAAA,IACd,IAAI;AACJ,QAAI;AACJ,QAAI;AACF,yBAAmB,oBAAoB,MAAM,EAAE,aAAa;AAAA,IAC9D,SAAS,KAAK;AACZ,UAAI,eAAe,mBAAmB;AACpC,gBAAQ,kEAAkE,IAAI,UAAU,iEAAiE;AACzJ,eAAO;AAAA,MACT,OAAO;AACL,cAAM;AAAA,MACR;AAAA,IACF;AACA,QAAI;AACJ,QAAI;AAEF,oBAAc,IAAI,YAAY,kBAAkB,SAAS,SAAS;AAAA,IACpE,SAAS,KAAK;AACZ,UAAI,eAAe,kBAAkB;AACnC,gBAAQ,uBAAuB,GAAG;AAAA,MACpC,OAAO;AACL,gBAAQ,kCAAkC,GAAG;AAAA,MAC/C;AACA,aAAO;AAAA,IACT;AACA,QAAI,YAAY,aAAa,GAAG;AAC9B,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,aAAa,aAAa,cAAc;AACvD,UAAM,gBAAgB,YAAY,gBAAgB;AAClD,UAAM,uBAAuB,KAAK,uBAAuB,aAAa,YAAY,QAAQ;AAC1F,WAAO,kBAAkB,eAAe,uBAAuB,IAA+C;AAAA,EAChH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,aAAa,UAAU;AAC5C,UAAM,eAAe,KAAK,iBAAiB,uBAAuB,QAAQ;AAC1E,QAAI,eAAe;AACnB,iBAAa,QAAQ,SAAO;AAC1B,YAAM,aAAa,KAAK,iBAAiB,cAAc;AACvD,YAAM,eAAe,YAAY,WAAW,SAAS,cAAmB,WAAW,QAAQ,cAAmB,IAAI,KAAK,gBAAgB,CAAC;AACxI,UAAI,CAAC,YAAY,aAAa,YAAY,GAAG;AAC3C,aAAK;AAAA,UAAyB;AAAA,UAAU;AAAA;AAAA,UAAyB;AAAA,QAAI;AACrE;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,iBAAiB;AACjC,UAAM,gBAAgB,oBAAI,IAAI;AAC9B,SAAK,aAAa,QAAQ,CAAC,aAAa,aAAa;AACnD,YAAM,aAAa,KAAK,0BAA0B,QAAQ;AAC1D,UAAI,YAAY;AACd,YAAI,YAAY,WAAW,uBAAuB,WAAW,MAAM,GAAG;AAUpE,gBAAM,MAAM,IAAI,YAAY,WAAW,OAAO,IAAI;AAClD,cAAI,KAAK,uBAAuB,IAAI,GAAG,MAAM,QAAQ,CAAC,KAAK,uBAAuB,UAAU,GAAG,GAAG;AAChG,iBAAK,yBAAyB,UAAU,KAAK,gBAAgB,cAAc,KAAK,eAAe,CAAC;AAAA,UAClG;AAAA,QACF;AACA,YAAI,YAAY,mBAAmB;AACjC,wBAAc,IAAI,UAAU,YAAY,eAAe,CAAC;AACxD,sBAAY,oBAAoB;AAAA,QAClC;AAAA,MACF;AAAA,IACF,CAAC;AACD,QAAI,yBAAyB,eAAe;AAM5C,SAAK,6BAA6B,QAAQ,CAAC,KAAK,YAAY;AAC1D,UAAI,oBAAoB;AACxB,cAAQ,aAAa,cAAY;AAC/B,cAAM,aAAa,KAAK,0BAA0B,QAAQ;AAC1D,YAAI,cAAc,WAAW,YAAY,gCAAoE;AAC3G,8BAAoB;AACpB,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,MACT,CAAC;AACD,UAAI,mBAAmB;AACrB,iCAAyB,uBAAuB,IAAI,GAAG;AAAA,MACzD;AAAA,IACF,CAAC;AACD,SAAK,uBAAuB,QAAQ,CAAC,GAAGV,SAAQA,KAAI,YAAY,eAAe,CAAC;AAChF,UAAM,cAAc,IAAI,YAAY,iBAAiB,eAAe,KAAK,qBAAqB,KAAK,wBAAwB,sBAAsB;AACjJ,SAAK,yBAAyB,mBAAmB;AACjD,SAAK,+BAA+B,kBAAkB;AACtD,SAAK,sBAAsB,IAAI,UAAU,mBAAmB;AAC5D,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,oBAAoB,UAAU,UAAU;AACtC,QAAI,CAAC,KAAK,eAAe,QAAQ,GAAG;AAClC;AAAA,IACF;AACA,UAAM,aAAa,KAAK,uBAAuB,UAAU,SAAS,GAAG,IAAI,IAA8B;AACvG,UAAM,cAAc,KAAK,kBAAkB,QAAQ;AACnD,gBAAY,kBAAkB,SAAS,KAAK,UAAU;AACtD,SAAK,yBAAyB,KAAK,uBAAuB,OAAO,SAAS,KAAK,QAAQ;AACvF,SAAK,+BAA+B,KAAK,6BAA6B,OAAO,SAAS,KAAK,KAAK,4BAA4B,SAAS,GAAG,EAAE,IAAI,QAAQ,CAAC;AAAA,EACzJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,yBAAyB,UAAU,KAAK,iBAAiB;AACvD,QAAI,CAAC,KAAK,eAAe,QAAQ,GAAG;AAClC;AAAA,IACF;AACA,UAAM,cAAc,KAAK,kBAAkB,QAAQ;AACnD,QAAI,KAAK,uBAAuB,UAAU,GAAG,GAAG;AAC9C,kBAAY;AAAA,QAAkB;AAAA,QAAK;AAAA;AAAA,MAA0B;AAAA,IAC/D,OAAO;AAGL,kBAAY,qBAAqB,GAAG;AAAA,IACtC;AACA,SAAK,+BAA+B,KAAK,6BAA6B,OAAO,KAAK,KAAK,4BAA4B,GAAG,EAAE,OAAO,QAAQ,CAAC;AACxI,QAAI,iBAAiB;AACnB,WAAK,yBAAyB,KAAK,uBAAuB,OAAO,KAAK,eAAe;AAAA,IACvF;AAAA,EACF;AAAA,EACA,aAAa,UAAU;AACrB,SAAK,aAAa,OAAO,QAAQ;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iCAAiC,UAAU;AACzC,UAAM,cAAc,KAAK,kBAAkB,QAAQ;AACnD,UAAM,eAAe,YAAY,eAAe;AAChD,WAAO,KAAK,iBAAiB,uBAAuB,QAAQ,EAAE,OAAO,aAAa,eAAe,OAAO,aAAa,iBAAiB;AAAA,EACxI;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,2BAA2B,UAAU;AAEnC,UAAM,cAAc,KAAK,kBAAkB,QAAQ;AACnD,gBAAY,2BAA2B;AAAA,EACzC;AAAA,EACA,kBAAkB,UAAU;AAC1B,QAAI,SAAS,KAAK,aAAa,IAAI,QAAQ;AAC3C,QAAI,CAAC,QAAQ;AACX,eAAS,IAAI,YAAY;AACzB,WAAK,aAAa,IAAI,UAAU,MAAM;AAAA,IACxC;AACA,WAAO;AAAA,EACT;AAAA,EACA,4BAA4B,KAAK;AAC/B,QAAI,gBAAgB,KAAK,6BAA6B,IAAI,GAAG;AAC7D,QAAI,CAAC,eAAe;AAClB,sBAAgB,IAAI,UAAU,mBAAmB;AACjD,WAAK,+BAA+B,KAAK,6BAA6B,OAAO,KAAK,aAAa;AAAA,IACjG;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,UAAU;AACvB,UAAM,eAAe,KAAK,0BAA0B,QAAQ,MAAM;AAClE,QAAI,CAAC,cAAc;AACjB,eAAS,WAAW,4BAA4B,QAAQ;AAAA,IAC1D;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,0BAA0B,UAAU;AAClC,UAAM,cAAc,KAAK,aAAa,IAAI,QAAQ;AAClD,WAAO,eAAe,YAAY,YAAY,OAAO,KAAK,iBAAiB,uBAAuB,QAAQ;AAAA,EAC5G;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,UAAU;AACpB,SAAK,aAAa,IAAI,UAAU,IAAI,YAAY,CAAC;AAIjD,UAAM,eAAe,KAAK,iBAAiB,uBAAuB,QAAQ;AAC1E,iBAAa,QAAQ,SAAO;AAC1B,WAAK;AAAA,QAAyB;AAAA,QAAU;AAAA;AAAA,QAAyB;AAAA,MAAI;AAAA,IACvE,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,UAAU,KAAK;AACpC,UAAM,eAAe,KAAK,iBAAiB,uBAAuB,QAAQ;AAC1E,WAAO,aAAa,IAAI,GAAG;AAAA,EAC7B;AACF;AACA,SAAS,oBAAoB;AAC3B,SAAO,IAAI,UAAU,YAAY,UAAU;AAC7C;AACA,SAAS,qBAAqB;AAC5B,SAAO,IAAI,UAAU,YAAY,UAAU;AAC7C;AACA,SAAS,iDAAiD,iBAAiB,iBAAiB,YAAY,aAAa,mBAAmB;AACtI,MAAI,IAAI,IAAI,IAAI,IAAI,IAAI;AACxB,QAAM,SAAS;AAAA,IACb;AAAA,IACA,sBAAsB,gBAAgB;AAAA,IACtC,YAAY,WAAW;AAAA,IACvB,WAAW,WAAW;AAAA,EACxB;AACA,QAAM,iBAAiB,gBAAgB;AACvC,MAAI,gBAAgB;AAClB,WAAO,cAAc;AAAA,MACnB,SAAS,sBAAsB;AAAA,MAC/B,YAAY,KAAK,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,eAAe,QAAQ,OAAO,SAAS,KAAK;AAAA,MAC5I,eAAe,MAAM,MAAM,KAAK,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY,QAAQ,OAAO,SAAS,KAAK;AAAA,MACtP,UAAU,MAAM,KAAK,mBAAmB,QAAQ,mBAAmB,SAAS,SAAS,eAAe,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,aAAa,QAAQ,OAAO,SAAS,KAAK;AAAA,MAC5L,cAAc,WAAS;AACrB,YAAIW;AACJ,gBAAQA,MAAK,gBAAgB,QAAQ,gBAAgB,SAAS,SAAS,YAAY,aAAa,KAAK,OAAO,QAAQA,QAAO,SAASA,MAAK;AAAA,MAC3I;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAkBA,IAAM,cAAc,MAAM;AACxB,QAAM,OAAO,CAAC;AACd;AAAA,IAAK;AAAA;AAAA,EAA+B,IAAI;AACxC;AAAA,IAAK;AAAA;AAAA,EAAiC,IAAI;AAC1C,SAAO;AACT,GAAG;AACH,IAAM,aAAa,MAAM;AACvB,QAAM,MAAM,CAAC;AACb;AAAA,IAAI;AAAA;AAAA,EAA4B,IAAI;AACpC;AAAA,IAAI;AAAA;AAAA,EAAsC,IAAI;AAC9C;AAAA,IAAI;AAAA;AAAA,EAA+B,IAAI;AACvC;AAAA,IAAI;AAAA;AAAA,EAAyC,IAAI;AACjD;AAAA,IAAI;AAAA;AAAA,EAAyB,IAAI;AACjC;AAAA,IAAI;AAAA;AAAA,EAA6B,IAAI;AACrC;AAAA,IAAI;AAAA;AAAA,EAA8C,IAAI;AACtD;AAAA,IAAI;AAAA;AAAA,EAAsB,IAAI;AAC9B;AAAA,IAAI;AAAA;AAAA,EAA8B,IAAI;AACtC;AAAA,IAAI;AAAA;AAAA,EAAsD,IAAI;AAC9D,SAAO;AACT,GAAG;AACH,IAAM,uBAAuB,MAAM;AACjC,QAAM,MAAM,CAAC;AACb;AAAA,IAAI;AAAA;AAAA,EAAiC,IAAI;AACzC;AAAA,IAAI;AAAA;AAAA,EAA+B,IAAI;AACvC,SAAO;AACT,GAAG;AACH,SAAS,cAAc,OAAO,aAAa;AAAC;AAe5C,IAAM,sBAAN,MAA0B;AAAA,EACxB,YAAY,YAAY,eAAe;AACrC,SAAK,aAAa;AAClB,SAAK,gBAAgB;AAAA,EACvB;AACF;AACA,SAAS,cAAc,QAAQ;AAC7B,QAAM,OAAO,OAAO,SAAS,SAAY,KAAK,UAAU,mBAAmB,OAAO,IAAI;AACtF,SAAO,IAAI,eAAe,MAAM,OAAO,WAAW,EAAE;AACtD;AASA,SAAS,aAAa,YAAY,KAAK;AACrC,MAAI,WAAW,iBAAiB,kBAAkB,GAAG,GAAG;AACtD,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,MACL,OAAO;AAAA,IACT;AAAA,EACF;AACF;AAIA,SAAS,eAAe,KAAK;AAC3B,MAAI;AACJ,MAAI,OAAO,QAAQ,UAAU;AAC3B,aAAS,IAAI;AAAA,EACf,OAAO;AACL,aAAS;AAAA,EACX;AACA,SAAO,kBAAkB,MAAM,IAAI,OAAO;AAC5C;AAIA,SAAS,YAAY,YAAY,WAAW;AAC1C,MAAI,WAAW,eAAe;AAI5B,UAAM,YAAY,IAAI,KAAK,UAAU,UAAU,GAAI,EAAE,YAAY;AAEjE,UAAM,kBAAkB,UAAU,QAAQ,SAAS,EAAE,EAAE,QAAQ,KAAK,EAAE;AAEtE,UAAM,WAAW,cAAc,UAAU,aAAa,MAAM,EAAE;AAC9D,WAAO,GAAG,eAAe,IAAI,OAAO;AAAA,EACtC,OAAO;AACL,WAAO;AAAA,MACL,SAAS,KAAK,UAAU;AAAA,MACxB,OAAO,UAAU;AAAA;AAAA,IAEnB;AAAA,EACF;AACF;AACA,SAAS,cAAc,MAAM;AAC3B,QAAM,YAAY,mBAAmB,IAAI;AACzC,SAAO,IAAI,UAAU,UAAU,SAAS,UAAU,KAAK;AACzD;AAMA,SAAS,QAAQ,YAAY,OAAO;AAClC,MAAI,WAAW,eAAe;AAC5B,WAAO,MAAM,SAAS;AAAA,EACxB,OAAO;AACL,WAAO,MAAM,aAAa;AAAA,EAC5B;AACF;AAIA,SAAS,UAAU,YAAY,OAAO;AACpC,MAAI,WAAW,eAAe;AAC5B,eAAW,UAAU,UAAa,OAAO,UAAU,QAAQ;AAC3D,WAAO,WAAW,iBAAiB,QAAQ,QAAQ,EAAE;AAAA,EACvD,OAAO;AACL,eAAW,UAAU;AAAA;AAAA;AAAA;AAAA,IAKrB,iBAAiB,UAAU,iBAAiB,UAAU;AACtD,WAAO,WAAW,eAAe,QAAQ,QAAQ,IAAI,WAAW,CAAC;AAAA,EACnE;AACF;AACA,SAAS,UAAU,YAAYrB,UAAS;AACtC,SAAO,YAAY,YAAYA,SAAQ,YAAY,CAAC;AACtD;AACA,SAAS,YAAYA,UAAS;AAC5B,aAAW,CAAC,CAACA,QAAO;AACpB,SAAO,gBAAgB,cAAc,cAAcA,QAAO,CAAC;AAC7D;AACA,SAAS,eAAe,YAAY,MAAM;AACxC,SAAO,eAAe,YAAY,IAAI,EAAE,gBAAgB;AAC1D;AACA,SAAS,eAAe,YAAY,MAAM;AACxC,QAAM,eAAe,yBAAyB,UAAU,EAAE,MAAM,WAAW;AAC3E,SAAO,SAAS,SAAY,eAAe,aAAa,MAAM,IAAI;AACpE;AACA,SAAS,iBAAiBE,OAAM;AAC9B,QAAM,WAAW,aAAa,WAAWA,KAAI;AAC7C,aAAW,oBAAoB,QAAQ,CAAC;AACxC,SAAO;AACT;AACA,SAAS,OAAO,YAAY,KAAK;AAC/B,SAAO,eAAe,WAAW,YAAY,IAAI,IAAI;AACvD;AACA,SAAS,SAAS,YAAYA,OAAM;AAClC,QAAM,WAAW,iBAAiBA,KAAI;AACtC,MAAI,SAAS,IAAI,CAAC,MAAM,WAAW,WAAW,WAAW;AACvD,UAAM,IAAI,eAAe,KAAK,kBAAkB,sDAAsD,SAAS,IAAI,CAAC,IAAI,SAAS,WAAW,WAAW,SAAS;AAAA,EAClK;AACA,MAAI,SAAS,IAAI,CAAC,MAAM,WAAW,WAAW,UAAU;AACtD,UAAM,IAAI,eAAe,KAAK,kBAAkB,uDAAuD,SAAS,IAAI,CAAC,IAAI,SAAS,WAAW,WAAW,QAAQ;AAAA,EAClK;AACA,SAAO,IAAI,YAAY,iCAAiC,QAAQ,CAAC;AACnE;AACA,SAAS,YAAY,YAAY,MAAM;AACrC,SAAO,eAAe,WAAW,YAAY,IAAI;AACnD;AACA,SAAS,cAAcA,OAAM;AAC3B,QAAM,eAAe,iBAAiBA,KAAI;AAK1C,MAAI,aAAa,WAAW,GAAG;AAC7B,WAAO,aAAa,UAAU;AAAA,EAChC;AACA,SAAO,iCAAiC,YAAY;AACtD;AACA,SAAS,qBAAqB,YAAY;AACxC,QAAM,OAAO,IAAI,aAAa,CAAC,YAAY,WAAW,WAAW,WAAW,aAAa,WAAW,WAAW,QAAQ,CAAC;AACxH,SAAO,KAAK,gBAAgB;AAC9B;AACA,SAAS,yBAAyB,YAAY;AAC5C,SAAO,IAAI,aAAa,CAAC,YAAY,WAAW,WAAW,aAAa,WAAW,QAAQ,CAAC;AAC9F;AACA,SAAS,iCAAiC,cAAc;AACtD,aAAW,aAAa,SAAS,KAAK,aAAa,IAAI,CAAC,MAAM,WAAW;AACzE,SAAO,aAAa,SAAS,CAAC;AAChC;AAEA,SAAS,mBAAmB,YAAY,KAAK,QAAQ;AACnD,SAAO;AAAA,IACL,MAAM,OAAO,YAAY,GAAG;AAAA,IAC5B,QAAQ,OAAO,MAAM,SAAS;AAAA,EAChC;AACF;AACA,SAAS,WAAW,YAAY,UAAU;AACxC,SAAO;AAAA,IACL,MAAM,OAAO,YAAY,SAAS,GAAG;AAAA,IACrC,QAAQ,SAAS,KAAK,MAAM,SAAS;AAAA,IACrC,YAAY,YAAY,YAAY,SAAS,QAAQ,YAAY,CAAC;AAAA,IAClE,YAAY,YAAY,YAAY,SAAS,WAAW,YAAY,CAAC;AAAA,EACvE;AACF;AACA,SAAS,aAAa,YAAY,UAAU,uBAAuB;AACjE,QAAM,MAAM,SAAS,YAAY,SAAS,IAAI;AAC9C,QAAMF,WAAU,YAAY,SAAS,UAAU;AAI/C,QAAM,aAAa,SAAS,aAAa,YAAY,SAAS,UAAU,IAAI,gBAAgB,IAAI;AAChG,QAAM,OAAO,IAAI,YAAY;AAAA,IAC3B,UAAU;AAAA,MACR,QAAQ,SAAS;AAAA,IACnB;AAAA,EACF,CAAC;AACD,QAAM,SAAS,gBAAgB,iBAAiB,KAAKA,UAAS,YAAY,IAAI;AAC9E,MAAI,uBAAuB;AACzB,WAAO,yBAAyB;AAAA,EAClC;AACA,SAAO,wBAAwB,OAAO,yBAAyB,IAAI;AACrE;AACA,SAAS,UAAU,YAAYU,MAAK;AAClC,aAAW,CAAC,CAACA,KAAI,KAAK;AACtB,gBAAcA,KAAI,MAAM,IAAI;AAC5B,gBAAcA,KAAI,MAAM,UAAU;AAClC,QAAM,MAAM,SAAS,YAAYA,KAAI,MAAM,IAAI;AAC/C,QAAMV,WAAU,YAAYU,KAAI,MAAM,UAAU;AAChD,QAAM,aAAaA,KAAI,MAAM,aAAa,YAAYA,KAAI,MAAM,UAAU,IAAI,gBAAgB,IAAI;AAClG,QAAM,OAAO,IAAI,YAAY;AAAA,IAC3B,UAAU;AAAA,MACR,QAAQA,KAAI,MAAM;AAAA,IACpB;AAAA,EACF,CAAC;AACD,SAAO,gBAAgB,iBAAiB,KAAKV,UAAS,YAAY,IAAI;AACxE;AACA,SAAS,YAAY,YAAY,QAAQ;AACvC,aAAW,CAAC,CAAC,OAAO,OAAO;AAC3B,aAAW,CAAC,CAAC,OAAO,QAAQ;AAC5B,QAAM,MAAM,SAAS,YAAY,OAAO,OAAO;AAC/C,QAAMA,WAAU,YAAY,OAAO,QAAQ;AAC3C,SAAO,gBAAgB,cAAc,KAAKA,QAAO;AACnD;AACA,SAAS,8BAA8B,YAAY,QAAQ;AACzD,MAAI,WAAW,QAAQ;AACrB,WAAO,UAAU,YAAY,MAAM;AAAA,EACrC,WAAW,aAAa,QAAQ;AAC9B,WAAO,YAAY,YAAY,MAAM;AAAA,EACvC;AACA,SAAO,KAAK;AACd;AACA,SAAS,gBAAgB,YAAY,QAAQ;AAC3C,MAAI;AACJ,MAAI,kBAAkB,QAAQ;AAC5B,kBAAc,OAAO,YAAY;AAGjC,UAAM,QAAQ,2BAA2B,OAAO,aAAa,oBAAoB,WAAW;AAC5F,UAAM,YAAY,OAAO,aAAa,aAAa,CAAC;AACpD,UAAM,cAAc,UAAU,YAAY,OAAO,aAAa,WAAW;AACzE,UAAM,aAAa,OAAO,aAAa;AACvC,UAAM,QAAQ,cAAc,cAAc,UAAU;AACpD,kBAAc,IAAI,kBAAkB,OAAO,WAAW,aAAa,SAAS,IAAI;AAAA,EAClF,WAAW,oBAAoB,QAAQ;AACrC,kBAAc,OAAO,cAAc;AACnC,UAAM,eAAe,OAAO;AAC5B,kBAAc,aAAa,QAAQ;AACnC,kBAAc,aAAa,SAAS,IAAI;AACxC,kBAAc,aAAa,SAAS,UAAU;AAC9C,UAAM,MAAM,SAAS,YAAY,aAAa,SAAS,IAAI;AAC3D,UAAMA,WAAU,YAAY,aAAa,SAAS,UAAU;AAC5D,UAAM,aAAa,aAAa,SAAS,aAAa,YAAY,aAAa,SAAS,UAAU,IAAI,gBAAgB,IAAI;AAC1H,UAAM,OAAO,IAAI,YAAY;AAAA,MAC3B,UAAU;AAAA,QACR,QAAQ,aAAa,SAAS;AAAA,MAChC;AAAA,IACF,CAAC;AACD,UAAMU,OAAM,gBAAgB,iBAAiB,KAAKV,UAAS,YAAY,IAAI;AAC3E,UAAM,mBAAmB,aAAa,aAAa,CAAC;AACpD,UAAM,mBAAmB,aAAa,oBAAoB,CAAC;AAC3D,kBAAc,IAAI,oBAAoB,kBAAkB,kBAAkBU,KAAI,KAAKA,IAAG;AAAA,EACxF,WAAW,oBAAoB,QAAQ;AACrC,kBAAc,OAAO,cAAc;AACnC,UAAM,YAAY,OAAO;AACzB,kBAAc,UAAU,QAAQ;AAChC,UAAM,MAAM,SAAS,YAAY,UAAU,QAAQ;AACnD,UAAMV,WAAU,UAAU,WAAW,YAAY,UAAU,QAAQ,IAAI,gBAAgB,IAAI;AAC3F,UAAMU,OAAM,gBAAgB,cAAc,KAAKV,QAAO;AACtD,UAAM,mBAAmB,UAAU,oBAAoB,CAAC;AACxD,kBAAc,IAAI,oBAAoB,CAAC,GAAG,kBAAkBU,KAAI,KAAKA,IAAG;AAAA,EAC1E,WAAW,oBAAoB,QAAQ;AACrC,kBAAc,OAAO,cAAc;AACnC,UAAM,YAAY,OAAO;AACzB,kBAAc,UAAU,QAAQ;AAChC,UAAM,MAAM,SAAS,YAAY,UAAU,QAAQ;AACnD,UAAM,mBAAmB,UAAU,oBAAoB,CAAC;AACxD,kBAAc,IAAI,oBAAoB,CAAC,GAAG,kBAAkB,KAAK,IAAI;AAAA,EACvE,WAAW,YAAY,QAAQ;AAE7B,kBAAc,OAAO,MAAM;AAC3B,UAAM,SAAS,OAAO;AACtB,kBAAc,OAAO,QAAQ;AAC7B,UAAM;AAAA,MACJ,OAAAJ,SAAQ;AAAA,MACR;AAAA,IACF,IAAI;AACJ,UAAM,kBAAkB,IAAI,gBAAgBA,QAAO,cAAc;AACjE,UAAM,WAAW,OAAO;AACxB,kBAAc,IAAI,sBAAsB,UAAU,eAAe;AAAA,EACnE,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACA,SAAO;AACT;AACA,SAAS,2BAA2B,OAAO;AACzC,MAAI,UAAU,aAAa;AACzB,WAAO;AAAA,EACT,WAAW,UAAU,OAAO;AAC1B,WAAO;AAAA,EACT,WAAW,UAAU,UAAU;AAC7B,WAAO;AAAA,EACT,WAAW,UAAU,WAAW;AAC9B,WAAO;AAAA,EACT,WAAW,UAAU,SAAS;AAC5B,WAAO;AAAA,EACT,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,0BAA0B,QAAQ;AAIzC,MAAI,EAAE,kBAAkB,SAAS;AAC/B,WAAO,gBAAgB,IAAI;AAAA,EAC7B;AACA,QAAM,eAAe,OAAO;AAC5B,MAAI,aAAa,aAAa,aAAa,UAAU,QAAQ;AAC3D,WAAO,gBAAgB,IAAI;AAAA,EAC7B;AACA,MAAI,CAAC,aAAa,UAAU;AAC1B,WAAO,gBAAgB,IAAI;AAAA,EAC7B;AACA,SAAO,YAAY,aAAa,QAAQ;AAC1C;AACA,SAAS,WAAW,YAAY,UAAU;AACxC,MAAI;AACJ,MAAI,oBAAoB,aAAa;AACnC,aAAS;AAAA,MACP,QAAQ,mBAAmB,YAAY,SAAS,KAAK,SAAS,KAAK;AAAA,IACrE;AAAA,EACF,WAAW,oBAAoB,gBAAgB;AAC7C,aAAS;AAAA,MACP,QAAQ,OAAO,YAAY,SAAS,GAAG;AAAA,IACzC;AAAA,EACF,WAAW,oBAAoB,eAAe;AAC5C,aAAS;AAAA,MACP,QAAQ,mBAAmB,YAAY,SAAS,KAAK,SAAS,IAAI;AAAA,MAClE,YAAY,eAAe,SAAS,SAAS;AAAA,IAC/C;AAAA,EACF,WAAW,oBAAoB,gBAAgB;AAC7C,aAAS;AAAA,MACP,QAAQ,OAAO,YAAY,SAAS,GAAG;AAAA,IACzC;AAAA,EACF,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACA,MAAI,SAAS,gBAAgB,SAAS,GAAG;AACvC,WAAO,mBAAmB,SAAS,gBAAgB,IAAI,eAAa,iBAAiB,YAAY,SAAS,CAAC;AAAA,EAC7G;AACA,MAAI,CAAC,SAAS,aAAa,QAAQ;AACjC,WAAO,kBAAkB,eAAe,YAAY,SAAS,YAAY;AAAA,EAC3E;AACA,SAAO;AACT;AACA,SAAS,aAAa,YAAY,OAAO;AACvC,QAAM,eAAe,MAAM,kBAAkB,iBAAiB,MAAM,eAAe,IAAI,aAAa,KAAK;AACzG,QAAM,kBAAkB,MAAM,mBAAmB,MAAM,iBAAiB,IAAI,eAAa,mBAAmB,YAAY,SAAS,CAAC,IAAI,CAAC;AACvI,MAAI,MAAM,QAAQ;AAChB,kBAAc,MAAM,OAAO,IAAI;AAC/B,UAAM,MAAM,SAAS,YAAY,MAAM,OAAO,IAAI;AAClD,UAAM,QAAQ,IAAI,YAAY;AAAA,MAC5B,UAAU;AAAA,QACR,QAAQ,MAAM,OAAO;AAAA,MACvB;AAAA,IACF,CAAC;AACD,QAAI,MAAM,YAAY;AACpB,YAAM,YAAY,iBAAiB,MAAM,UAAU;AACnD,aAAO,IAAI,cAAc,KAAK,OAAO,WAAW,cAAc,eAAe;AAAA,IAC/E,OAAO;AACL,aAAO,IAAI,YAAY,KAAK,OAAO,cAAc,eAAe;AAAA,IAClE;AAAA,EACF,WAAW,MAAM,QAAQ;AACvB,UAAM,MAAM,SAAS,YAAY,MAAM,MAAM;AAC7C,WAAO,IAAI,eAAe,KAAK,YAAY;AAAA,EAC7C,WAAW,MAAM,QAAQ;AACvB,UAAM,MAAM,SAAS,YAAY,MAAM,MAAM;AAC7C,WAAO,IAAI,eAAe,KAAK,YAAY;AAAA,EAC7C,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,eAAe,YAAY,cAAc;AAChD,MAAI,aAAa,eAAe,QAAW;AACzC,WAAO;AAAA,MACL,YAAY,UAAU,YAAY,aAAa,UAAU;AAAA,IAC3D;AAAA,EACF,WAAW,aAAa,WAAW,QAAW;AAC5C,WAAO;AAAA,MACL,QAAQ,aAAa;AAAA,IACvB;AAAA,EACF,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,iBAAiB,cAAc;AACtC,MAAI,aAAa,eAAe,QAAW;AACzC,WAAO,aAAa,WAAW,YAAY,aAAa,UAAU,CAAC;AAAA,EACrE,WAAW,aAAa,WAAW,QAAW;AAC5C,WAAO,aAAa,OAAO,aAAa,MAAM;AAAA,EAChD,OAAO;AACL,WAAO,aAAa,KAAK;AAAA,EAC3B;AACF;AACA,SAAS,gBAAgB,OAAO,YAAY;AAE1C,MAAIN,WAAU,MAAM,aAAa,YAAY,MAAM,UAAU,IAAI,YAAY,UAAU;AACvF,MAAIA,SAAQ,QAAQ,gBAAgB,IAAI,CAAC,GAAG;AAM1C,IAAAA,WAAU,YAAY,UAAU;AAAA,EAClC;AACA,SAAO,IAAI,eAAeA,UAAS,MAAM,oBAAoB,CAAC,CAAC;AACjE;AACA,SAAS,iBAAiBsB,SAAQ,YAAY;AAC5C,MAAIA,WAAUA,QAAO,SAAS,GAAG;AAC/B,eAAW,eAAe,MAAS;AACnC,WAAOA,QAAO,IAAI,WAAS,gBAAgB,OAAO,UAAU,CAAC;AAAA,EAC/D,OAAO;AACL,WAAO,CAAC;AAAA,EACV;AACF;AACA,SAAS,iBAAiB,YAAY,gBAAgB;AACpD,QAAM,YAAY,eAAe;AACjC,MAAI,qBAAqB,0BAA0B;AACjD,WAAO;AAAA,MACL,WAAW,eAAe,MAAM,gBAAgB;AAAA,MAChD,kBAAkB;AAAA,IACpB;AAAA,EACF,WAAW,qBAAqB,8BAA8B;AAC5D,WAAO;AAAA,MACL,WAAW,eAAe,MAAM,gBAAgB;AAAA,MAChD,uBAAuB;AAAA,QACrB,QAAQ,UAAU;AAAA,MACpB;AAAA,IACF;AAAA,EACF,WAAW,qBAAqB,+BAA+B;AAC7D,WAAO;AAAA,MACL,WAAW,eAAe,MAAM,gBAAgB;AAAA,MAChD,oBAAoB;AAAA,QAClB,QAAQ,UAAU;AAAA,MACpB;AAAA,IACF;AAAA,EACF,WAAW,qBAAqB,oCAAoC;AAClE,WAAO;AAAA,MACL,WAAW,eAAe,MAAM,gBAAgB;AAAA,MAChD,WAAW,UAAU;AAAA,IACvB;AAAA,EACF,OAAO;AACL,UAAM,KAAK;AAAA,EACb;AACF;AACA,SAAS,mBAAmB,YAAY,OAAO;AAC7C,MAAI,YAAY;AAChB,MAAI,sBAAsB,OAAO;AAC/B,eAAW,MAAM,qBAAqB,cAAc;AACpD,gBAAY,IAAI,yBAAyB;AAAA,EAC3C,WAAW,2BAA2B,OAAO;AAC3C,UAAM,SAAS,MAAM,sBAAsB,UAAU,CAAC;AACtD,gBAAY,IAAI,6BAA6B,MAAM;AAAA,EACrD,WAAW,wBAAwB,OAAO;AACxC,UAAM,SAAS,MAAM,mBAAmB,UAAU,CAAC;AACnD,gBAAY,IAAI,8BAA8B,MAAM;AAAA,EACtD,WAAW,eAAe,OAAO;AAC/B,gBAAY,IAAI,mCAAmC,YAAY,MAAM,SAAS;AAAA,EAChF,OAAO;AACL,SAAK;AAAA,EACP;AACA,QAAM,YAAY,YAAY,iBAAiB,MAAM,SAAS;AAC9D,SAAO,IAAI,eAAe,WAAW,SAAS;AAChD;AACA,SAAS,kBAAkB,YAAY,QAAQ;AAC7C,SAAO;AAAA,IACL,WAAW,CAAC,YAAY,YAAY,OAAO,IAAI,CAAC;AAAA,EAClD;AACF;AACA,SAAS,oBAAoB,iBAAiB;AAC5C,QAAMhB,SAAQ,gBAAgB,UAAU;AACxC,aAAWA,WAAU,CAAC;AACtB,QAAMJ,QAAO,gBAAgB,UAAU,CAAC;AACxC,SAAO,cAAc,gBAAgB,cAAcA,KAAI,CAAC,CAAC;AAC3D;AACA,SAAS,cAAc,YAAY,QAAQ;AAEzC,QAAM,cAAc;AAAA,IAClB,iBAAiB,CAAC;AAAA,EACpB;AACA,QAAM,OAAO,OAAO;AACpB,MAAI;AACJ,MAAI,OAAO,oBAAoB,MAAM;AACnC,aAAS;AACT,gBAAY,gBAAgB,OAAO,CAAC;AAAA,MAClC,cAAc,OAAO;AAAA,MACrB,gBAAgB;AAAA,IAClB,CAAC;AAAA,EACH,OAAO;AACL,aAAS,KAAK,QAAQ;AACtB,gBAAY,gBAAgB,OAAO,CAAC;AAAA,MAClC,cAAc,KAAK,YAAY;AAAA,IACjC,CAAC;AAAA,EACH;AACA,cAAY,SAAS,YAAY,YAAY,MAAM;AACnD,QAAMqB,SAAQ,UAAU,OAAO,OAAO;AACtC,MAAIA,QAAO;AACT,gBAAY,gBAAgB,QAAQA;AAAA,EACtC;AACA,QAAMd,WAAU,QAAQ,OAAO,OAAO;AACtC,MAAIA,UAAS;AACX,gBAAY,gBAAgB,UAAUA;AAAA,EACxC;AACA,QAAMG,SAAQ,aAAa,YAAY,OAAO,KAAK;AACnD,MAAIA,WAAU,MAAM;AAClB,gBAAY,gBAAgB,QAAQA;AAAA,EACtC;AACA,MAAI,OAAO,SAAS;AAClB,gBAAY,gBAAgB,UAAU,gBAAgB,OAAO,OAAO;AAAA,EACtE;AACA,MAAI,OAAO,OAAO;AAChB,gBAAY,gBAAgB,QAAQ,cAAc,OAAO,KAAK;AAAA,EAChE;AACA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,EACF;AACF;AACA,SAAS,6BAA6B,YAAY,QAAQ,YAAY,cAAc;AAClF,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,EACF,IAAI,cAAc,YAAY,MAAM;AACpC,QAAM,WAAW,CAAC;AAClB,QAAM,eAAe,CAAC;AACtB,MAAI,iBAAiB;AACrB,aAAW,QAAQ,eAAa;AAI9B,UAAM,cAAc,eAAe,UAAU,QAAQ,aAAa,gBAAgB;AAClF,aAAS,WAAW,IAAI,UAAU;AAClC,QAAI,UAAU,kBAAkB,SAAS;AACvC,mBAAa,KAAK;AAAA,QAChB,OAAO;AAAA,QACP,OAAO,CAAC;AAAA,MACV,CAAC;AAAA,IACH,WAAW,UAAU,kBAAkB,OAAO;AAC5C,mBAAa,KAAK;AAAA,QAChB,OAAO;AAAA,QACP,KAAK;AAAA,UACH,OAAO,qBAAqB,UAAU,SAAS;AAAA,QACjD;AAAA,MACF,CAAC;AAAA,IACH,WAAW,UAAU,kBAAkB,OAAO;AAC5C,mBAAa,KAAK;AAAA,QAChB,OAAO;AAAA,QACP,KAAK;AAAA,UACH,OAAO,qBAAqB,UAAU,SAAS;AAAA,QACjD;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AACD,SAAO;AAAA,IACL,SAAS;AAAA,MACP,4BAA4B;AAAA,QAC1B;AAAA,QACA,iBAAiB,YAAY;AAAA,MAC/B;AAAA,MACA,QAAQ,YAAY;AAAA,IACtB;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AACA,SAAS,0BAA0B,QAAQ;AACzC,MAAI,OAAO,cAAc,OAAO,MAAM;AACtC,QAAMG,SAAQ,OAAO;AACrB,QAAM,YAAYA,OAAM,OAAOA,OAAM,KAAK,SAAS;AACnD,MAAIZ,mBAAkB;AACtB,MAAI,YAAY,GAAG;AACjB,eAAW,cAAc,CAAC;AAC1B,UAAM,OAAOY,OAAM,KAAK,CAAC;AACzB,QAAI,KAAK,gBAAgB;AACvB,MAAAZ,mBAAkB,KAAK;AAAA,IACzB,OAAO;AACL,aAAO,KAAK,MAAM,KAAK,YAAY;AAAA,IACrC;AAAA,EACF;AACA,MAAI,WAAW,CAAC;AAChB,MAAIY,OAAM,OAAO;AACf,eAAW,YAAYA,OAAM,KAAK;AAAA,EACpC;AACA,MAAIN,WAAU,CAAC;AACf,MAAIM,OAAM,SAAS;AACjB,IAAAN,WAAU,UAAUM,OAAM,OAAO;AAAA,EACnC;AACA,MAAIH,SAAQ;AACZ,MAAIG,OAAM,OAAO;AACf,IAAAH,SAAQ,eAAeG,OAAM,KAAK;AAAA,EACpC;AACA,MAAIF,WAAU;AACd,MAAIE,OAAM,SAAS;AACjB,IAAAF,WAAU,kBAAkBE,OAAM,OAAO;AAAA,EAC3C;AACA,MAAID,SAAQ;AACZ,MAAIC,OAAM,OAAO;AACf,IAAAD,SAAQ,gBAAgBC,OAAM,KAAK;AAAA,EACrC;AACA,SAAO,SAAS,MAAMZ,kBAAiBM,UAAS,UAAUG,QAAO,KAA2BC,UAASC,MAAK;AAC5G;AACA,SAAS,gBAAgB,QAAQ;AAC/B,SAAO,cAAc,0BAA0B,MAAM,CAAC;AACxD;AACA,SAAS,sBAAsB,YAAY,YAAY;AACrD,QAAM,QAAQ,QAAQ,WAAW,OAAO;AACxC,MAAI,SAAS,MAAM;AACjB,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,MACL,oBAAoB;AAAA,IACtB;AAAA,EACF;AACF;AACA,SAAS,QAAQ,SAAS;AACxB,UAAQ,SAAS;AAAA,IACf,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AACA,SAAS,SAAS,YAAY,YAAY;AACxC,MAAI;AACJ,QAAM,SAAS,WAAW;AAC1B,MAAI,uBAAuB,MAAM,GAAG;AAClC,aAAS;AAAA,MACP,WAAW,kBAAkB,YAAY,MAAM;AAAA,IACjD;AAAA,EACF,OAAO;AACL,aAAS;AAAA,MACP,OAAO,cAAc,YAAY,MAAM,EAAE;AAAA,IAC3C;AAAA,EACF;AACA,SAAO,WAAW,WAAW;AAC7B,MAAI,WAAW,YAAY,oBAAoB,IAAI,GAAG;AACpD,WAAO,cAAc,QAAQ,YAAY,WAAW,WAAW;AAC/D,UAAM,gBAAgB,aAAa,YAAY,WAAW,aAAa;AACvE,QAAI,kBAAkB,MAAM;AAC1B,aAAO,gBAAgB;AAAA,IACzB;AAAA,EACF,WAAW,WAAW,gBAAgB,UAAU,gBAAgB,IAAI,CAAC,IAAI,GAAG;AAI1E,WAAO,WAAW,YAAY,YAAY,WAAW,gBAAgB,YAAY,CAAC;AAClF,UAAM,gBAAgB,aAAa,YAAY,WAAW,aAAa;AACvE,QAAI,kBAAkB,MAAM;AAC1B,aAAO,gBAAgB;AAAA,IACzB;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,UAAU,SAAS;AAC1B,MAAI,QAAQ,WAAW,GAAG;AACxB;AAAA,EACF;AACA,SAAO,SAAS,gBAAgB;AAAA,IAAO;AAAA,IAAS;AAAA;AAAA,EAAiC,CAAC;AACpF;AACA,SAAS,YAAY,QAAQ;AAC3B,QAAM,SAAS,WAAW,MAAM;AAChC,MAAI,kBAAkB,mBAAmB,iCAAiC,MAAM,GAAG;AACjF,WAAO,OAAO,WAAW;AAAA,EAC3B;AACA,SAAO,CAAC,MAAM;AAChB;AACA,SAAS,WAAW,QAAQ;AAC1B,MAAI,OAAO,gBAAgB,QAAW;AACpC,WAAO,gBAAgB,MAAM;AAAA,EAC/B,WAAW,OAAO,gBAAgB,QAAW;AAC3C,WAAO,gBAAgB,MAAM;AAAA,EAC/B,WAAW,OAAO,oBAAoB,QAAW;AAC/C,WAAO,oBAAoB,MAAM;AAAA,EACnC,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,QAAQ,UAAU;AACzB,MAAI,SAAS,WAAW,GAAG;AACzB;AAAA,EACF;AACA,SAAO,SAAS,IAAI,WAAS,gBAAgB,KAAK,CAAC;AACrD;AACA,SAAS,UAAU,UAAU;AAC3B,SAAO,SAAS,IAAI,WAAS,kBAAkB,KAAK,CAAC;AACvD;AACA,SAAS,gBAAgB,QAAQ;AAC/B,SAAO;AAAA,IACL,QAAQ,OAAO;AAAA,IACf,QAAQ,OAAO;AAAA,EACjB;AACF;AACA,SAAS,cAAc,QAAQ;AAC7B,SAAO;AAAA,IACL,QAAQ,CAAC,OAAO;AAAA,IAChB,QAAQ,OAAO;AAAA,EACjB;AACF;AACA,SAAS,kBAAkB,QAAQ;AACjC,QAAM,YAAY,CAAC,CAAC,OAAO;AAC3B,QAAM,WAAW,OAAO,UAAU,CAAC;AACnC,SAAO,IAAI,MAAM,UAAU,SAAS;AACtC;AACA,SAAS,gBAAgB,QAAQ;AAC/B,QAAM,YAAY,CAAC,OAAO;AAC1B,QAAM,WAAW,OAAO,UAAU,CAAC;AACnC,SAAO,IAAI,MAAM,UAAU,SAAS;AACtC;AAEA,SAAS,YAAY,KAAK;AACxB,SAAO,WAAW,GAAG;AACvB;AAEA,SAAS,cAAc,KAAK;AAC1B,UAAQ,KAAK;AAAA,IACX,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO;AAAA,EACX;AACF;AAEA,SAAS,eAAe,IAAI;AAC1B,SAAO,UAAU,EAAE;AACrB;AACA,SAAS,wBAAwB,IAAI;AACnC,SAAO,oBAAoB,EAAE;AAC/B;AACA,SAAS,iBAAiB,IAAI;AAC5B,UAAQ,IAAI;AAAA,IACV,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO,KAAK;AAAA,IACd;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AACA,SAAS,0BAA0B,IAAI;AACrC,UAAQ,IAAI;AAAA,IACV,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AACA,SAAS,qBAAqB,MAAM;AAClC,SAAO;AAAA,IACL,WAAW,KAAK,gBAAgB;AAAA,EAClC;AACF;AACA,SAAS,uBAAuB,gBAAgB;AAC9C,SAAO,YAAY,iBAAiB,eAAe,SAAS;AAC9D;AAEA,SAAS,gBAAgBL,UAAS;AAChC,SAAO;AAAA,IACL,OAAO,qBAAqBA,SAAQ,KAAK;AAAA,IACzC,WAAW,YAAYA,SAAQ,GAAG;AAAA,EACpC;AACF;AACA,SAAS,kBAAkBA,UAAS;AAClC,SAAO,IAAI,QAAQ,uBAAuBA,SAAQ,KAAK,GAAG,cAAcA,SAAQ,SAAS,CAAC;AAC5F;AAEA,SAAS,SAAS,QAAQ;AACxB,MAAI,kBAAkB,aAAa;AACjC,WAAO,qBAAqB,MAAM;AAAA,EACpC,WAAW,kBAAkB,iBAAiB;AAC5C,WAAO,kBAAkB,MAAM;AAAA,EACjC,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AACA,SAAS,kBAAkB,QAAQ;AACjC,QAAMa,UAAS,OAAO,WAAW,EAAE,IAAI,CAAAX,YAAU,SAASA,OAAM,CAAC;AACjE,MAAIW,QAAO,WAAW,GAAG;AACvB,WAAOA,QAAO,CAAC;AAAA,EACjB;AACA,SAAO;AAAA,IACL,iBAAiB;AAAA,MACf,IAAI,wBAAwB,OAAO,EAAE;AAAA,MACrC,SAASA;AAAA,IACX;AAAA,EACF;AACF;AACA,SAAS,qBAAqB,QAAQ;AACpC,MAAI,OAAO,OAAO,MAA2B;AAC3C,QAAI,WAAW,OAAO,KAAK,GAAG;AAC5B,aAAO;AAAA,QACL,aAAa;AAAA,UACX,OAAO,qBAAqB,OAAO,KAAK;AAAA,UACxC,IAAI;AAAA,QACN;AAAA,MACF;AAAA,IACF,WAAW,YAAY,OAAO,KAAK,GAAG;AACpC,aAAO;AAAA,QACL,aAAa;AAAA,UACX,OAAO,qBAAqB,OAAO,KAAK;AAAA,UACxC,IAAI;AAAA,QACN;AAAA,MACF;AAAA,IACF;AAAA,EACF,WAAW,OAAO,OAAO,MAA+B;AACtD,QAAI,WAAW,OAAO,KAAK,GAAG;AAC5B,aAAO;AAAA,QACL,aAAa;AAAA,UACX,OAAO,qBAAqB,OAAO,KAAK;AAAA,UACxC,IAAI;AAAA,QACN;AAAA,MACF;AAAA,IACF,WAAW,YAAY,OAAO,KAAK,GAAG;AACpC,aAAO;AAAA,QACL,aAAa;AAAA,UACX,OAAO,qBAAqB,OAAO,KAAK;AAAA,UACxC,IAAI;AAAA,QACN;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL,aAAa;AAAA,MACX,OAAO,qBAAqB,OAAO,KAAK;AAAA,MACxC,IAAI,eAAe,OAAO,EAAE;AAAA,MAC5B,OAAO,OAAO;AAAA,IAChB;AAAA,EACF;AACF;AACA,SAAS,gBAAgB,QAAQ;AAC/B,UAAQ,OAAO,YAAY,IAAI;AAAA,IAC7B,KAAK;AACH,YAAM,WAAW,uBAAuB,OAAO,YAAY,KAAK;AAChE,aAAO,YAAY,OAAO,UAAU,MAA2B;AAAA,QAC7D,aAAa;AAAA,MACf,CAAC;AAAA,IACH,KAAK;AACH,YAAM,YAAY,uBAAuB,OAAO,YAAY,KAAK;AACjE,aAAO,YAAY,OAAO,WAAW,MAA2B;AAAA,QAC9D,WAAW;AAAA,MACb,CAAC;AAAA,IACH,KAAK;AACH,YAAM,cAAc,uBAAuB,OAAO,YAAY,KAAK;AACnE,aAAO,YAAY,OAAO,aAAa,MAA+B;AAAA,QACpE,aAAa;AAAA,MACf,CAAC;AAAA,IACH,KAAK;AACH,YAAM,eAAe,uBAAuB,OAAO,YAAY,KAAK;AACpE,aAAO,YAAY,OAAO,cAAc,MAA+B;AAAA,QACrE,WAAW;AAAA,MACb,CAAC;AAAA,IACH,KAAK;AACH,aAAO,KAAK;AAAA,IACd;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AACA,SAAS,gBAAgB,QAAQ;AAC/B,SAAO,YAAY,OAAO,uBAAuB,OAAO,YAAY,KAAK,GAAG,iBAAiB,OAAO,YAAY,EAAE,GAAG,OAAO,YAAY,KAAK;AAC/I;AACA,SAAS,oBAAoB,QAAQ;AACnC,SAAO,gBAAgB,OAAO,OAAO,gBAAgB,QAAQ,IAAI,CAAAX,YAAU,WAAWA,OAAM,CAAC,GAAG,0BAA0B,OAAO,gBAAgB,EAAE,CAAC;AACtJ;AACA,SAAS,eAAe,WAAW;AACjC,QAAM,kBAAkB,CAAC;AACzB,YAAU,OAAO,QAAQ,WAAS,gBAAgB,KAAK,MAAM,gBAAgB,CAAC,CAAC;AAC/E,SAAO;AAAA,IACL,YAAY;AAAA,EACd;AACF;AACA,SAAS,iBAAiB,OAAO;AAC/B,QAAM,QAAQ,MAAM,cAAc,CAAC;AACnC,SAAO,IAAI,UAAU,MAAM,IAAI,UAAQ,YAAY,iBAAiB,IAAI,CAAC,CAAC;AAC5E;AACA,SAAS,oBAAoB,MAAM;AAEjC,SAAO,KAAK,UAAU,KAAK,KAAK,IAAI,CAAC,MAAM,cAAc,KAAK,IAAI,CAAC,MAAM;AAC3E;AAqBA,IAAM,aAAN,MAAM,YAAW;AAAA,EACf,YACA,QAKA,UACA,SAKA,gBACA,kBAAkB,gBAAgB,IAAI,GAKtC,+BAA+B,gBAAgB,IAAI,GAOnD,cAAc,WAAW,mBAMzB,gBAAgB,MAAM;AACpB,SAAK,SAAS;AACd,SAAK,WAAW;AAChB,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AACvB,SAAK,+BAA+B;AACpC,SAAK,cAAc;AACnB,SAAK,gBAAgB;AAAA,EACvB;AAAA;AAAA,EAEA,mBAAmB,gBAAgB;AACjC,WAAO,IAAI,YAAW,KAAK,QAAQ,KAAK,UAAU,KAAK,SAAS,gBAAgB,KAAK,iBAAiB,KAAK,8BAA8B,KAAK,aAAa,KAAK,aAAa;AAAA,EAC/K;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,aAAa,iBAAiB;AAC5C,WAAO,IAAI;AAAA,MAAW,KAAK;AAAA,MAAQ,KAAK;AAAA,MAAU,KAAK;AAAA,MAAS,KAAK;AAAA,MAAgB;AAAA,MAAiB,KAAK;AAAA,MAA8B;AAAA;AAAA,MAAiC;AAAA,IAAI;AAAA,EAChL;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,eAAe;AAC/B,WAAO,IAAI,YAAW,KAAK,QAAQ,KAAK,UAAU,KAAK,SAAS,KAAK,gBAAgB,KAAK,iBAAiB,KAAK,8BAA8B,KAAK,aAAa,aAAa;AAAA,EAC/K;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iCAAiC,8BAA8B;AAC7D,WAAO,IAAI,YAAW,KAAK,QAAQ,KAAK,UAAU,KAAK,SAAS,KAAK,gBAAgB,KAAK,iBAAiB,8BAA8B,KAAK,aAAa,KAAK,aAAa;AAAA,EAC/K;AACF;AAmBA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,kBAAkB;AAC5B,SAAK,mBAAmB;AAAA,EAC1B;AACF;AAEA,SAAS,qBAAqB,iBAAiB,WAAW;AACxD,MAAID;AACJ,MAAI,UAAU,UAAU;AACtB,IAAAA,OAAM,aAAa,gBAAgB,kBAAkB,UAAU,UAAU,CAAC,CAAC,UAAU,qBAAqB;AAAA,EAC5G,WAAW,UAAU,YAAY;AAC/B,UAAM,MAAM,YAAY,aAAa,UAAU,WAAW,IAAI;AAC9D,UAAMV,WAAU,gBAAgB,UAAU,WAAW,QAAQ;AAC7D,IAAAU,OAAM,gBAAgB,cAAc,KAAKV,QAAO;AAChD,QAAI,UAAU,uBAAuB;AACnC,MAAAU,KAAI,yBAAyB;AAAA,IAC/B;AAAA,EACF,WAAW,UAAU,iBAAiB;AACpC,UAAM,MAAM,YAAY,aAAa,UAAU,gBAAgB,IAAI;AACnE,UAAMV,WAAU,gBAAgB,UAAU,gBAAgB,OAAO;AACjE,IAAAU,OAAM,gBAAgB,mBAAmB,KAAKV,QAAO;AAAA,EACvD,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACA,MAAI,UAAU,UAAU;AACtB,IAAAU,KAAI,YAAY,mBAAmB,UAAU,QAAQ,CAAC;AAAA,EACxD;AACA,SAAOA;AACT;AAEA,SAAS,mBAAmB,iBAAiB,UAAU;AACrD,QAAM,MAAM,SAAS;AACrB,QAAM,YAAY;AAAA,IAChB,YAAY,IAAI,kBAAkB,EAAE,QAAQ,EAAE,QAAQ;AAAA,IACtD,iBAAiB,IAAI;AAAA,IACrB,YAAY,IAAI,KAAK,YAAY;AAAA,IACjC,UAAU,iBAAiB,SAAS,QAAQ;AAAA,IAC5C,uBAAuB,SAAS;AAAA,EAClC;AACA,MAAI,SAAS,gBAAgB,GAAG;AAC9B,cAAU,WAAW,WAAW,gBAAgB,kBAAkB,QAAQ;AAAA,EAC5E,WAAW,SAAS,aAAa,GAAG;AAClC,cAAU,aAAa;AAAA,MACrB,MAAM,IAAI,KAAK,QAAQ;AAAA,MACvB,UAAU,cAAc,SAAS,OAAO;AAAA,IAC1C;AAAA,EACF,WAAW,SAAS,kBAAkB,GAAG;AACvC,cAAU,kBAAkB;AAAA,MAC1B,MAAM,IAAI,KAAK,QAAQ;AAAA,MACvB,SAAS,cAAc,SAAS,OAAO;AAAA,IACzC;AAAA,EACF,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACA,SAAO;AACT;AACA,SAAS,iBAAiB,iBAAiB;AACzC,QAAM,YAAY,gBAAgB,YAAY;AAC9C,SAAO,CAAC,UAAU,SAAS,UAAU,WAAW;AAClD;AACA,SAAS,mBAAmB,gBAAgB;AAC1C,QAAM,YAAY,IAAI,UAAU,eAAe,CAAC,GAAG,eAAe,CAAC,CAAC;AACpE,SAAO,gBAAgB,cAAc,SAAS;AAChD;AACA,SAAS,cAAc,iBAAiB;AACtC,QAAM,YAAY,gBAAgB,YAAY;AAC9C,SAAO;AAAA,IACL,SAAS,UAAU;AAAA,IACnB,aAAa,UAAU;AAAA,EACzB;AACF;AACA,SAAS,gBAAgB,aAAa;AACpC,QAAM,YAAY,IAAI,UAAU,YAAY,SAAS,YAAY,WAAW;AAC5E,SAAO,gBAAgB,cAAc,SAAS;AAChD;AAEA,SAAS,kBAAkB,iBAAiB,QAAQ,OAAO;AACzD,QAAM,0BAA0B,MAAM,cAAc,IAAI,OAAK,WAAW,gBAAgB,kBAAkB,CAAC,CAAC;AAC5G,QAAM,sBAAsB,MAAM,UAAU,IAAI,OAAK,WAAW,gBAAgB,kBAAkB,CAAC,CAAC;AACpG,SAAO;AAAA,IACL;AAAA,IACA,SAAS,MAAM;AAAA,IACf,kBAAkB,MAAM,eAAe,SAAS;AAAA,IAChD,eAAe;AAAA,IACf,WAAW;AAAA,EACb;AACF;AAEA,SAAS,oBAAoB,iBAAiB,SAAS;AACrD,QAAM,iBAAiB,QAAQ,iBAAiB,CAAC,GAAG,IAAI,OAAK,aAAa,gBAAgB,kBAAkB,CAAC,CAAC;AAM9G,WAAS,IAAI,GAAG,IAAI,QAAQ,UAAU,SAAS,GAAG,EAAE,GAAG;AACrD,UAAM,kBAAkB,QAAQ,UAAU,CAAC;AAC3C,UAAM,eAAe,IAAI,IAAI,QAAQ,UAAU,UAAU,QAAQ,UAAU,IAAI,CAAC,EAAE,cAAc;AAChG,QAAI,cAAc;AAChB,YAAM,oBAAoB,QAAQ,UAAU,IAAI,CAAC;AACjD,sBAAgB,mBAAmB,kBAAkB,UAAU;AAC/D,cAAQ,UAAU,OAAO,IAAI,GAAG,CAAC;AACjC,QAAE;AAAA,IACJ;AAAA,EACF;AACA,QAAM,YAAY,QAAQ,UAAU,IAAI,OAAK,aAAa,gBAAgB,kBAAkB,CAAC,CAAC;AAC9F,QAAM,YAAY,UAAU,WAAW,QAAQ,gBAAgB;AAC/D,SAAO,IAAI,cAAc,QAAQ,SAAS,WAAW,eAAe,SAAS;AAC/E;AAEA,SAAS,aAAa,UAAU;AAC9B,QAAMV,WAAU,gBAAgB,SAAS,QAAQ;AACjD,QAAM,+BAA+B,SAAS,iCAAiC,SAAY,gBAAgB,SAAS,4BAA4B,IAAI,gBAAgB,IAAI;AACxK,MAAI;AACJ,MAAI,gBAAgB,SAAS,KAAK,GAAG;AACnC,aAAS,oBAAoB,SAAS,KAAK;AAAA,EAC7C,OAAO;AACL,aAAS,gBAAgB,SAAS,KAAK;AAAA,EACzC;AACA,SAAO,IAAI,WAAW,QAAQ,SAAS,UAAU,uBAAkD,SAAS,0BAA0BA,UAAS,8BAA8B,WAAW,iBAAiB,SAAS,WAAW,CAAC;AAChO;AAEA,SAAS,WAAW,iBAAiB,YAAY;AAC/C,QAAM,cAAc,cAAc,WAAW,eAAe;AAC5D,QAAM,2BAA2B,cAAc,WAAW,4BAA4B;AACtF,MAAI;AACJ,MAAI,uBAAuB,WAAW,MAAM,GAAG;AAC7C,iBAAa,kBAAkB,gBAAgB,kBAAkB,WAAW,MAAM;AAAA,EACpF,OAAO;AACL,iBAAa,cAAc,gBAAgB,kBAAkB,WAAW,MAAM,EAAE;AAAA,EAClF;AAGA,QAAM,cAAc,WAAW,YAAY,SAAS;AAEpD,SAAO;AAAA,IACL,UAAU,WAAW;AAAA,IACrB,aAAa,eAAe,WAAW,MAAM;AAAA,IAC7C,UAAU;AAAA,IACV;AAAA,IACA,0BAA0B,WAAW;AAAA,IACrC,8BAA8B;AAAA,IAC9B,OAAO;AAAA,EACT;AACF;AAIA,SAAS,gBAAgB,SAAS;AAChC,SAAO,QAAQ,cAAc;AAC/B;AAEA,SAAS,aAAa,UAAU;AAC9B,SAAO;AAAA,IACL,IAAI,SAAS;AAAA,IACb,YAAY,gBAAgB,SAAS,UAAU;AAAA,IAC/C,SAAS,SAAS;AAAA,EACpB;AACF;AAEA,SAAS,WAAW,UAAU;AAC5B,SAAO;AAAA,IACL,UAAU,SAAS;AAAA,IACnB,YAAY,cAAc,YAAY,SAAS,UAAU,CAAC;AAAA,IAC1D,SAAS,SAAS;AAAA,EACpB;AACF;AAEA,SAAS,iBAAiB,cAAc;AACtC,SAAO;AAAA,IACL,MAAM,aAAa;AAAA,IACnB,OAAO,iBAAiB,aAAa,YAAY;AAAA,IACjD,UAAU,gBAAgB,aAAa,QAAQ;AAAA,EACjD;AACF;AAEA,SAAS,eAAee,QAAO;AAC7B,SAAO;AAAA,IACL,MAAMA,OAAM;AAAA,IACZ,UAAU,cAAc,YAAYA,OAAM,QAAQ,CAAC;AAAA,IACnD,cAAcA,OAAM;AAAA,EACtB;AACF;AAOA,SAAS,iBAAiB,cAAc;AACtC,QAAMA,SAAQ,0BAA0B;AAAA,IACtC,QAAQ,aAAa;AAAA,IACrB,iBAAiB,aAAa;AAAA,EAChC,CAAC;AACD,MAAI,aAAa,cAAc,QAAQ;AACrC,WAAO;AAAA,MAAeA;AAAA,MAAOA,OAAM;AAAA,MAAO;AAAA;AAAA,IAAwB;AAAA,EACpE;AACA,SAAOA;AACT;AAEA,SAAS,oBAAoBS,aAAY;AACvC,SAAO;AAAA,IACL,MAAMA,YAAW;AAAA,IACjB,OAAO,iBAAiBA,YAAW,YAAY;AAAA,IAC/C,UAAU,YAAYA,YAAW,QAAQ;AAAA,EAC3C;AACF;AAEA,SAAS,mBAAmB,UAAU;AACpC,SAAO;AAAA,IACL,IAAI,SAAS;AAAA,IACb,SAAS,SAAS;AAAA,IAClB,YAAY,YAAY,SAAS,UAAU;AAAA,EAC7C;AACF;AAEA,SAAS,sBAAsB,iBAAiB,mBAAmB;AACjE,SAAO,IAAI,QAAQ,kBAAkB,gBAAgB,aAAa,gBAAgB,kBAAkB,kBAAkB,eAAe,CAAC;AACxI;AAEA,SAAS,oBAAoB,iBAAiB,QAAQ,SAAS;AAC7D,QAAM,CAAC,GAAG,gBAAgBC,WAAU,IAAI,uBAAuB,QAAQ,QAAQ,SAAS,GAAG;AAC3F,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA,YAAAA;AAAA,IACA,iBAAiB,QAAQ,SAAS,IAAI,mBAAmB;AAAA,IACzD,gBAAgB,QAAQ;AAAA,IACxB,iBAAiB,WAAW,gBAAgB,kBAAkB,QAAQ,QAAQ;AAAA,EAChF;AACF;AAKA,SAAS,uBAAuB,QAAQ,QAAQ;AAC9C,QAAM,QAAQ,OAAO,KAAK,YAAY;AACtC,QAAM,iBAAiB,mBAAmB,OAAO,KAAK,QAAQ,CAAC;AAC/D,SAAO,CAAC,QAAQ,gBAAgB,KAAK;AACvC;AACA,SAAS,uBAAuB,OAAO;AACrC,SAAO;AAAA,IACL,SAAS,MAAM;AAAA,IACf,iBAAiB,MAAM;AAAA,IACvB,QAAQ,MAAM,OAAO,IAAI,OAAK,CAAC,EAAE,UAAU,gBAAgB,GAAG,EAAE,IAAI,CAAC;AAAA,EACvE;AACF;AACA,SAAS,yBAAyB,OAAO,OAAO;AAC9C,QAAM,eAAe,QAAQ,IAAI,WAAW,MAAM,gBAAgB,IAAI,YAAY,gBAAgB,MAAM,QAAQ,GAAG,IAAI,YAAY,mBAAmB,MAAM,WAAW,CAAC,GAAG,MAAM,cAAc,CAAC,IAAI,WAAW,MAAM;AACrN,QAAM,kBAAkB,MAAM,OAAO,IAAI,CAAC,CAAC,WAAW,IAAI,MAAM,IAAI,aAAa,YAAY,iBAAiB,SAAS,GAAG,IAAI,CAAC;AAC/H,SAAO,IAAI,WAAW,MAAM,SAAS,MAAM,iBAAiB,iBAAiB,YAAY;AAC3F;AACA,SAAS,eAAe,SAAS,KAAK,gBAAgB,QAAQ;AAC5D,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA,UAAU,cAAc,OAAO,QAAQ;AAAA,IACvC,aAAa,mBAAmB,OAAO,YAAY,IAAI;AAAA,IACvD,gBAAgB,OAAO;AAAA,EACzB;AACF;AAkBA,IAAM,uBAAN,MAA2B;AAAA,EACzB,kBAAkB,aAAa,UAAU;AACvC,WAAO,aAAa,WAAW,EAAE,IAAI,QAAQ,EAAE,KAAK,YAAU;AAC5D,UAAI,QAAQ;AACV,eAAO,aAAa,MAAM;AAAA,MAC5B;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,mBAAmB,aAAa,gBAAgB;AAC9C,WAAO,aAAa,WAAW,EAAE,IAAI,WAAW,cAAc,CAAC;AAAA,EACjE;AAAA,EACA,cAAc,aAAa,WAAW;AACpC,WAAO,kBAAkB,WAAW,EAAE,IAAI,SAAS,EAAE,KAAK,CAAAV,WAAS;AACjE,UAAIA,QAAO;AACT,eAAO,iBAAiBA,MAAK;AAAA,MAC/B;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,eAAe,aAAaA,QAAO;AACjC,WAAO,kBAAkB,WAAW,EAAE,IAAI,eAAeA,MAAK,CAAC;AAAA,EACjE;AACF;AAIA,SAAS,aAAa,KAAK;AACzB,SAAO,SAAS,KAAK,aAAa;AACpC;AAIA,SAAS,kBAAkB,KAAK;AAC9B,SAAO,SAAS,KAAK,iBAAiB;AACxC;AAqBA,IAAM,gCAAN,MAAM,+BAA8B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKlC,YAAY,YAAY,QAAQ;AAC9B,SAAK,aAAa;AAClB,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,OAAO,QAAQ,YAAY,MAAM;AAC/B,UAAM,SAAS,KAAK,OAAO;AAC3B,WAAO,IAAI,+BAA8B,YAAY,MAAM;AAAA,EAC7D;AAAA,EACA,WAAW,aAAa,KAAK;AAC3B,WAAO,qBAAqB,WAAW,EAAE,IAAI,uBAAuB,KAAK,QAAQ,GAAG,CAAC,EAAE,KAAK,eAAa;AACvG,UAAI,WAAW;AACb,eAAO,sBAAsB,KAAK,YAAY,SAAS;AAAA,MACzD;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY,aAAa,MAAM;AAC7B,UAAM,SAAS,cAAc;AAC7B,WAAO,mBAAmB,QAAQ,MAAM,SAAO;AAC7C,aAAO,KAAK,WAAW,aAAa,GAAG,EAAE,KAAK,aAAW;AACvD,YAAI,YAAY,MAAM;AACpB,iBAAO,IAAI,KAAK,OAAO;AAAA,QACzB;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,EACtB;AAAA,EACA,aAAa,aAAa,gBAAgB,UAAU;AAClD,UAAM,WAAW,CAAC;AAClB,aAAS,QAAQ,CAAC,GAAG,aAAa;AAChC,YAAM,UAAU,IAAI,QAAQ,gBAAgB,QAAQ;AACpD,eAAS,KAAK,KAAK,YAAY,aAAa,OAAO,CAAC;AAAA,IACtD,CAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EACA,yBAAyB,aAAa,cAAc,SAAS;AAC3D,UAAM,kBAAkB,oBAAI,IAAI;AAEhC,iBAAa,QAAQ,SAAO,gBAAgB,IAAI,mBAAmB,IAAI,kBAAkB,CAAC,CAAC,CAAC;AAC5F,UAAM,WAAW,CAAC;AAClB,oBAAgB,QAAQ,oBAAkB;AACxC,YAAM,QAAQ,YAAY;AAAA,QAAM,CAAC,KAAK,QAAQ,gBAAgB,OAAO;AAAA,QAAG,CAAC,KAAK,QAAQ,gBAAgB,UAAU,CAAC;AAAA;AAAA,QAAiB;AAAA;AAAA,QAAqB;AAAA,MAAI;AAC3J,eAAS,KAAK,qBAAqB,WAAW,EAAE,UAAU,6CAA6C,KAAK,CAAC;AAAA,IAC/G,CAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EACA,yBAAyB,aAAaX,aAAY,cAAc;AAC9D,UAAM,SAAS,cAAc;AAC7B,UAAM,iBAAiB,mBAAmBA,WAAU;AAGpD,UAAM,QAAQ,YAAY;AAAA,MAAM,CAAC,KAAK,QAAQ,gBAAgB,YAAY;AAAA,MAAG,CAAC,KAAK,QAAQ,gBAAgB,OAAO,iBAAiB;AAAA;AAAA,MAAiB;AAAA,IAAI;AACxJ,WAAO,qBAAqB,WAAW,EAAE,QAAQ,6CAA6C,KAAK,EAAE,KAAK,gBAAc;AACtH,iBAAW,aAAa,YAAY;AAClC,cAAM,UAAU,sBAAsB,KAAK,YAAY,SAAS;AAChE,eAAO,IAAI,QAAQ,OAAO,GAAG,OAAO;AAAA,MACtC;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,8BAA8B,aAAaD,kBAAiB,cAAcG,QAAO;AAC/E,UAAM,SAAS,cAAc;AAC7B,QAAI,iBAAiB;AAGrB,UAAM,QAAQ,YAAY;AAAA,MAAM,CAAC,KAAK,QAAQH,kBAAiB,YAAY;AAAA,MAAG,CAAC,KAAK,QAAQA,kBAAiB,OAAO,iBAAiB;AAAA;AAAA,MAAiB;AAAA,IAAI;AAC1J,WAAO,qBAAqB,WAAW,EAAE,QAAQ;AAAA,MAC/C,OAAO;AAAA,MACP;AAAA,IACF,GAAG,CAAC,GAAG,WAAW,YAAY;AAK5B,YAAM,UAAU,sBAAsB,KAAK,YAAY,SAAS;AAChE,UAAI,OAAO,KAAK,IAAIG,UAAS,QAAQ,mBAAmB,gBAAgB;AACtE,eAAO,IAAI,QAAQ,OAAO,GAAG,OAAO;AACpC,yBAAiB,QAAQ;AAAA,MAC3B,OAAO;AACL,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,EACtB;AAAA,EACA,YAAY,aAAa,SAAS;AAChC,WAAO,qBAAqB,WAAW,EAAE,IAAI,oBAAoB,KAAK,YAAY,KAAK,QAAQ,OAAO,CAAC;AAAA,EACzG;AACF;AAIA,SAAS,qBAAqB,KAAK;AACjC,SAAO,SAAS,KAAK,sBAAsB;AAC7C;AAkBA,IAAM,wBAAN,MAA4B;AAAA,EAC1B,aAAa,KAAK;AAChB,WAAO,SAAS,KAAK,cAAc;AAAA,EACrC;AAAA,EACA,gBAAgB,KAAK;AACnB,UAAM,UAAU,KAAK,aAAa,GAAG;AACrC,WAAO,QAAQ,IAAI,cAAc,EAAE,KAAK,CAAAoB,YAAU;AAChD,YAAM,QAAQA,YAAW,QAAQA,YAAW,SAAS,SAASA,QAAO;AACrE,aAAO,QAAQ,WAAW,eAAe,KAAK,IAAI,WAAW;AAAA,IAC/D,CAAC;AAAA,EACH;AAAA,EACA,gBAAgB,KAAK,cAAc;AACjC,UAAM,UAAU,KAAK,aAAa,GAAG;AACrC,WAAO,QAAQ,IAAI;AAAA,MACjB,MAAM;AAAA,MACN,OAAO,aAAa,aAAa;AAAA,IACnC,CAAC;AAAA,EACH;AACF;AAoBA,IAAM,kBAAkB;AACxB,IAAM,qBAAqB;AAC3B,IAAM,iBAAiB;AACvB,IAAM,oBAAoB;AAC1B,IAAM,uBAAuB;AAC7B,IAAM,oBAAoB;AAC1B,IAAM,kBAAkB;AACxB,IAAM,uBAAuB;AAC7B,IAAM,sBAAsB;AAC5B,IAAM,mBAAmB;AACzB,IAAM,oBAAoB;AAC1B,IAAM,iBAAiB;AACvB,IAAM,+BAA+B;AAGrC,IAAM,gBAAgB;AAEtB,IAAM,4BAAN,MAAgC;AAAA,EAC9B,cAAc;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUf,gBAAgB,OAAO,SAAS;AAC9B,SAAK,mBAAmB,OAAO,OAAO;AAGtC,YAAQ,cAAc;AAAA,EACxB;AAAA,EACA,mBAAmB,YAAY,SAAS;AACtC,QAAI,eAAe,YAAY;AAC7B,WAAK,oBAAoB,SAAS,eAAe;AAAA,IACnD,WAAW,kBAAkB,YAAY;AACvC,WAAK,oBAAoB,SAAS,kBAAkB;AACpD,cAAQ,YAAY,WAAW,eAAe,IAAI,CAAC;AAAA,IACrD,WAAW,kBAAkB,YAAY;AACvC,WAAK,oBAAoB,SAAS,iBAAiB;AACnD,cAAQ,YAAY,gBAAgB,WAAW,YAAY,CAAC;AAAA,IAC9D,WAAW,iBAAiB,YAAY;AACtC,YAAM,IAAI,gBAAgB,WAAW,WAAW;AAChD,UAAI,MAAM,CAAC,GAAG;AACZ,aAAK,oBAAoB,SAAS,cAAc;AAAA,MAClD,OAAO;AACL,aAAK,oBAAoB,SAAS,iBAAiB;AACnD,YAAI,eAAe,CAAC,GAAG;AAErB,kBAAQ,YAAY,CAAG;AAAA,QACzB,OAAO;AACL,kBAAQ,YAAY,CAAC;AAAA,QACvB;AAAA,MACF;AAAA,IACF,WAAW,oBAAoB,YAAY;AACzC,UAAI,YAAY,WAAW;AAC3B,WAAK,oBAAoB,SAAS,oBAAoB;AACtD,UAAI,OAAO,cAAc,UAAU;AACjC,oBAAY,mBAAmB,SAAS;AAAA,MAC1C;AACA,cAAQ,YAAY,GAAG,UAAU,WAAW,EAAE,EAAE;AAChD,cAAQ,YAAY,UAAU,SAAS,CAAC;AAAA,IAC1C,WAAW,iBAAiB,YAAY;AACtC,WAAK,iBAAiB,WAAW,aAAa,OAAO;AACrD,WAAK,sBAAsB,OAAO;AAAA,IACpC,WAAW,gBAAgB,YAAY;AACrC,WAAK,oBAAoB,SAAS,eAAe;AACjD,cAAQ,WAAW,oBAAoB,WAAW,UAAU,CAAC;AAC7D,WAAK,sBAAsB,OAAO;AAAA,IACpC,WAAW,oBAAoB,YAAY;AACzC,WAAK,oBAAoB,WAAW,gBAAgB,OAAO;AAAA,IAC7D,WAAW,mBAAmB,YAAY;AACxC,YAAM,WAAW,WAAW;AAC5B,WAAK,oBAAoB,SAAS,mBAAmB;AACrD,cAAQ,YAAY,SAAS,YAAY,CAAC;AAC1C,cAAQ,YAAY,SAAS,aAAa,CAAC;AAAA,IAC7C,WAAW,cAAc,YAAY;AACnC,UAAI,WAAW,UAAU,GAAG;AAC1B,aAAK,oBAAoB,SAAS,OAAO,gBAAgB;AAAA,MAC3D,WAAW,cAAc,UAAU,GAAG;AACpC,aAAK,iBAAiB,WAAW,UAAU,OAAO;AAAA,MACpD,OAAO;AACL,aAAK,cAAc,WAAW,UAAU,OAAO;AAC/C,aAAK,sBAAsB,OAAO;AAAA,MACpC;AAAA,IACF,WAAW,gBAAgB,YAAY;AACrC,WAAK,gBAAgB,WAAW,YAAY,OAAO;AACnD,WAAK,sBAAsB,OAAO;AAAA,IACpC,OAAO;AACL,WAAK;AAAA,IACP;AAAA,EACF;AAAA,EACA,iBAAiB,kBAAkB,SAAS;AAC1C,SAAK,oBAAoB,SAAS,iBAAiB;AACnD,SAAK,0BAA0B,kBAAkB,OAAO;AAAA,EAC1D;AAAA,EACA,0BAA0B,kBAAkB,SAAS;AACnD,YAAQ,YAAY,gBAAgB;AAAA,EACtC;AAAA,EACA,cAAc,eAAe,SAAS;AACpC,UAAM,MAAM,cAAc,UAAU,CAAC;AACrC,SAAK,oBAAoB,SAAS,cAAc;AAChD,eAAW,OAAO,OAAO,KAAK,GAAG,GAAG;AAClC,WAAK,iBAAiB,KAAK,OAAO;AAClC,WAAK,mBAAmB,IAAI,GAAG,GAAG,OAAO;AAAA,IAC3C;AAAA,EACF;AAAA,EACA,iBAAiB,eAAe,SAAS;AACvC,QAAI,IAAI;AACR,UAAM,MAAM,cAAc,UAAU,CAAC;AACrC,SAAK,oBAAoB,SAAS,iBAAiB;AAEnD,UAAM,MAAM;AACZ,UAAM,WAAW,MAAM,KAAK,IAAI,GAAG,EAAE,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,WAAW;AACpJ,SAAK,oBAAoB,SAAS,iBAAiB;AACnD,YAAQ,YAAY,gBAAgB,MAAM,CAAC;AAE3C,SAAK,iBAAiB,KAAK,OAAO;AAClC,SAAK,mBAAmB,IAAI,GAAG,GAAG,OAAO;AAAA,EAC3C;AAAA,EACA,gBAAgB,iBAAiB,SAAS;AACxC,UAAM,SAAS,gBAAgB,UAAU,CAAC;AAC1C,SAAK,oBAAoB,SAAS,gBAAgB;AAClD,eAAW,WAAW,QAAQ;AAC5B,WAAK,mBAAmB,SAAS,OAAO;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,oBAAoB,gBAAgB,SAAS;AAC3C,SAAK,oBAAoB,SAAS,oBAAoB;AACtD,UAAM,OAAO,YAAY,SAAS,cAAc,EAAE;AAClD,SAAK,QAAQ,aAAW;AACtB,WAAK,oBAAoB,SAAS,4BAA4B;AAC9D,WAAK,0BAA0B,SAAS,OAAO;AAAA,IACjD,CAAC;AAAA,EACH;AAAA,EACA,oBAAoB,SAASC,YAAW;AACtC,YAAQ,YAAYA,UAAS;AAAA,EAC/B;AAAA,EACA,sBAAsB,SAAS;AAI7B,YAAQ,YAAY,aAAa;AAAA,EACnC;AACF;AACA,0BAA0B,WAAW,IAAI,0BAA0B;AAmBnE,IAAM,gBAAgB;AACtB,IAAM,gBAAgB;AACtB,IAAM,UAAU;AAChB,IAAM,YAAY;AAClB,IAAM,YAAY;AAClB,IAAM,UAAU;AAChB,IAAM,WAAW;AACjB,IAAM,UAAU;AAChB,IAAM,YAAY;AAClB,IAAM,YAAY;AAMlB,IAAM,sBAAsB;AAE5B,SAAS,iBAAiB,OAAO;AAC/B,QAAM,KAAK,IAAI,SAAS,IAAI,YAAY,CAAC,CAAC;AAC1C,KAAG;AAAA,IAAW;AAAA,IAAG;AAAA;AAAA,IAA0B;AAAA,EAAK;AAChD,SAAO,IAAI,WAAW,GAAG,MAAM;AACjC;AAMA,SAAS,2BAA2B,GAAG;AACrC,MAAI,MAAM,GAAG;AACX,WAAO;AAAA,EACT;AACA,MAAI,QAAQ;AACZ,MAAI,KAAK,MAAM,GAAG;AAEhB,aAAS;AACT,QAAI,KAAK;AAAA,EACX;AACA,MAAI,KAAK,MAAM,GAAG;AAEhB,aAAS;AACT,QAAI,KAAK;AAAA,EACX;AACA,MAAI,KAAK,MAAM,GAAG;AAEhB,aAAS;AAAA,EACX;AACA,SAAO;AACT;AAEA,SAAS,qBAAqB,OAAO;AACnC,MAAI,eAAe;AACnB,WAAS,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG;AAC1B,UAAM,QAAQ,2BAA2B,MAAM,CAAC,IAAI,GAAI;AACxD,oBAAgB;AAChB,QAAI,UAAU,GAAG;AACf;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AAKA,SAAS,kBAAkB,OAAO;AAEhC,QAAM,UAAU,YAAY,qBAAqB,KAAK;AACtD,SAAO,KAAK,KAAK,UAAU,SAAS;AACtC;AAOA,IAAM,oBAAN,MAAwB;AAAA,EACtB,cAAc;AACZ,SAAK,SAAS,IAAI,WAAW,mBAAmB;AAChD,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,oBAAoB,OAAO;AACzB,UAAM,KAAK,MAAM,OAAO,QAAQ,EAAE;AAClC,QAAI,OAAO,GAAG,KAAK;AACnB,WAAO,CAAC,KAAK,MAAM;AACjB,WAAK,mBAAmB,KAAK,KAAK;AAClC,aAAO,GAAG,KAAK;AAAA,IACjB;AACA,SAAK,wBAAwB;AAAA,EAC/B;AAAA,EACA,qBAAqB,OAAO;AAC1B,UAAM,KAAK,MAAM,OAAO,QAAQ,EAAE;AAClC,QAAI,OAAO,GAAG,KAAK;AACnB,WAAO,CAAC,KAAK,MAAM;AACjB,WAAK,oBAAoB,KAAK,KAAK;AACnC,aAAO,GAAG,KAAK;AAAA,IACjB;AACA,SAAK,yBAAyB;AAAA,EAChC;AAAA;AAAA,EAEA,mBAAmB,UAAU;AAC3B,eAAW,KAAK,UAAU;AACxB,YAAM,WAAW,EAAE,WAAW,CAAC;AAC/B,UAAI,WAAW,KAAM;AACnB,aAAK,mBAAmB,QAAQ;AAAA,MAClC,WAAW,WAAW,MAAO;AAC3B,aAAK,mBAAmB,MAAQ,IAAI,aAAa,CAAC;AAClD,aAAK,mBAAmB,MAAO,KAAO,QAAQ;AAAA,MAChD,WAAW,IAAI,iBAAiB,gBAAgB,GAAG;AACjD,aAAK,mBAAmB,MAAQ,IAAI,aAAa,EAAE;AACnD,aAAK,mBAAmB,MAAO,KAAO,aAAa,CAAC;AACpD,aAAK,mBAAmB,MAAO,KAAO,QAAQ;AAAA,MAChD,OAAO;AACL,cAAM,YAAY,EAAE,YAAY,CAAC;AACjC,aAAK,mBAAmB,MAAQ,IAAI,cAAc,EAAE;AACpD,aAAK,mBAAmB,MAAO,KAAO,cAAc,EAAE;AACtD,aAAK,mBAAmB,MAAO,KAAO,cAAc,CAAC;AACrD,aAAK,mBAAmB,MAAO,KAAO,SAAS;AAAA,MACjD;AAAA,IACF;AACA,SAAK,wBAAwB;AAAA,EAC/B;AAAA;AAAA,EAEA,oBAAoB,UAAU;AAC5B,eAAW,KAAK,UAAU;AACxB,YAAM,WAAW,EAAE,WAAW,CAAC;AAC/B,UAAI,WAAW,KAAM;AACnB,aAAK,oBAAoB,QAAQ;AAAA,MACnC,WAAW,WAAW,MAAO;AAC3B,aAAK,oBAAoB,MAAQ,IAAI,aAAa,CAAC;AACnD,aAAK,oBAAoB,MAAO,KAAO,QAAQ;AAAA,MACjD,WAAW,IAAI,iBAAiB,gBAAgB,GAAG;AACjD,aAAK,oBAAoB,MAAQ,IAAI,aAAa,EAAE;AACpD,aAAK,oBAAoB,MAAO,KAAO,aAAa,CAAC;AACrD,aAAK,oBAAoB,MAAO,KAAO,QAAQ;AAAA,MACjD,OAAO;AACL,cAAM,YAAY,EAAE,YAAY,CAAC;AACjC,aAAK,oBAAoB,MAAQ,IAAI,cAAc,EAAE;AACrD,aAAK,oBAAoB,MAAO,KAAO,cAAc,EAAE;AACvD,aAAK,oBAAoB,MAAO,KAAO,cAAc,CAAC;AACtD,aAAK,oBAAoB,MAAO,KAAO,SAAS;AAAA,MAClD;AAAA,IACF;AACA,SAAK,yBAAyB;AAAA,EAChC;AAAA,EACA,qBAAqB,KAAK;AAGxB,UAAM,QAAQ,KAAK,cAAc,GAAG;AACpC,UAAM,MAAM,kBAAkB,KAAK;AACnC,SAAK,gBAAgB,IAAI,GAAG;AAC5B,SAAK,OAAO,KAAK,UAAU,IAAI,MAAM;AACrC,aAAS,IAAI,MAAM,SAAS,KAAK,IAAI,MAAM,QAAQ,EAAE,GAAG;AACtD,WAAK,OAAO,KAAK,UAAU,IAAI,MAAM,CAAC,IAAI;AAAA,IAC5C;AAAA,EACF;AAAA,EACA,sBAAsB,KAAK;AAGzB,UAAM,QAAQ,KAAK,cAAc,GAAG;AACpC,UAAM,MAAM,kBAAkB,KAAK;AACnC,SAAK,gBAAgB,IAAI,GAAG;AAC5B,SAAK,OAAO,KAAK,UAAU,IAAI,EAAE,MAAM;AACvC,aAAS,IAAI,MAAM,SAAS,KAAK,IAAI,MAAM,QAAQ,EAAE,GAAG;AACtD,WAAK,OAAO,KAAK,UAAU,IAAI,EAAE,MAAM,CAAC,IAAI;AAAA,IAC9C;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,yBAAyB;AACvB,SAAK,0BAA0B,OAAO;AACtC,SAAK,0BAA0B,QAAQ;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,0BAA0B;AACxB,SAAK,2BAA2B,OAAO;AACvC,SAAK,2BAA2B,QAAQ;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ;AACN,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,KAAK,cAAc;AACjB,SAAK,gBAAgB,aAAa,MAAM;AACxC,SAAK,OAAO,IAAI,cAAc,KAAK,QAAQ;AAC3C,SAAK,YAAY,aAAa;AAAA,EAChC;AAAA;AAAA,EAEA,eAAe;AACb,WAAO,KAAK,OAAO,MAAM,GAAG,KAAK,QAAQ;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,cAAc,KAAK;AACjB,UAAM,QAAQ,iBAAiB,GAAG;AAGlC,UAAM,cAAc,MAAM,CAAC,IAAI,SAAU;AAEzC,UAAM,CAAC,KAAK,aAAa,MAAO;AAChC,aAAS,IAAI,GAAG,IAAI,MAAM,QAAQ,EAAE,GAAG;AACrC,YAAM,CAAC,KAAK,aAAa,MAAO;AAAA,IAClC;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAEA,mBAAmB,GAAG;AACpB,UAAM,SAAS,IAAI;AACnB,QAAI,WAAW,SAAS;AACtB,WAAK,0BAA0B,OAAO;AACtC,WAAK,0BAA0B,SAAS;AAAA,IAC1C,WAAW,WAAW,SAAS;AAC7B,WAAK,0BAA0B,OAAO;AACtC,WAAK,0BAA0B,OAAO;AAAA,IACxC,OAAO;AACL,WAAK,0BAA0B,MAAM;AAAA,IACvC;AAAA,EACF;AAAA;AAAA,EAEA,oBAAoB,GAAG;AACrB,UAAM,SAAS,IAAI;AACnB,QAAI,WAAW,SAAS;AACtB,WAAK,2BAA2B,OAAO;AACvC,WAAK,2BAA2B,SAAS;AAAA,IAC3C,WAAW,WAAW,SAAS;AAC7B,WAAK,2BAA2B,OAAO;AACvC,WAAK,2BAA2B,OAAO;AAAA,IACzC,OAAO;AACL,WAAK,2BAA2B,CAAC;AAAA,IACnC;AAAA,EACF;AAAA,EACA,0BAA0B;AACxB,SAAK,0BAA0B,OAAO;AACtC,SAAK,0BAA0B,SAAS;AAAA,EAC1C;AAAA,EACA,2BAA2B;AACzB,SAAK,2BAA2B,OAAO;AACvC,SAAK,2BAA2B,SAAS;AAAA,EAC3C;AAAA,EACA,0BAA0B,GAAG;AAC3B,SAAK,gBAAgB,CAAC;AACtB,SAAK,OAAO,KAAK,UAAU,IAAI;AAAA,EACjC;AAAA,EACA,2BAA2B,GAAG;AAC5B,SAAK,gBAAgB,CAAC;AACtB,SAAK,OAAO,KAAK,UAAU,IAAI,CAAC;AAAA,EAClC;AAAA,EACA,gBAAgB,OAAO;AACrB,UAAM,cAAc,QAAQ,KAAK;AACjC,QAAI,eAAe,KAAK,OAAO,QAAQ;AACrC;AAAA,IACF;AAEA,QAAI,YAAY,KAAK,OAAO,SAAS;AAErC,QAAI,YAAY,aAAa;AAC3B,kBAAY;AAAA,IACd;AAEA,UAAM,YAAY,IAAI,WAAW,SAAS;AAC1C,cAAU,IAAI,KAAK,MAAM;AACzB,SAAK,SAAS;AAAA,EAChB;AACF;AACA,IAAM,4BAAN,MAAgC;AAAA,EAC9B,YAAY,aAAa;AACvB,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,WAAW,OAAO;AAChB,SAAK,YAAY,oBAAoB,KAAK;AAAA,EAC5C;AAAA,EACA,YAAY,OAAO;AACjB,SAAK,YAAY,mBAAmB,KAAK;AAAA,EAC3C;AAAA,EACA,YAAY,OAAO;AACjB,SAAK,YAAY,qBAAqB,KAAK;AAAA,EAC7C;AAAA,EACA,gBAAgB;AACd,SAAK,YAAY,uBAAuB;AAAA,EAC1C;AACF;AACA,IAAM,6BAAN,MAAiC;AAAA,EAC/B,YAAY,aAAa;AACvB,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,WAAW,OAAO;AAChB,SAAK,YAAY,qBAAqB,KAAK;AAAA,EAC7C;AAAA,EACA,YAAY,OAAO;AACjB,SAAK,YAAY,oBAAoB,KAAK;AAAA,EAC5C;AAAA,EACA,YAAY,OAAO;AACjB,SAAK,YAAY,sBAAsB,KAAK;AAAA,EAC9C;AAAA,EACA,gBAAgB;AACd,SAAK,YAAY,wBAAwB;AAAA,EAC3C;AACF;AAKA,IAAM,mBAAN,MAAuB;AAAA,EACrB,cAAc;AACZ,SAAK,cAAc,IAAI,kBAAkB;AACzC,SAAK,YAAY,IAAI,0BAA0B,KAAK,WAAW;AAC/D,SAAK,aAAa,IAAI,2BAA2B,KAAK,WAAW;AAAA,EACnE;AAAA,EACA,KAAK,cAAc;AACjB,SAAK,YAAY,KAAK,YAAY;AAAA,EACpC;AAAA,EACA,QAAQ,MAAM;AACZ,WAAO,SAAS,IAA8B,KAAK,YAAY,KAAK;AAAA,EACtE;AAAA,EACA,eAAe;AACb,WAAO,KAAK,YAAY,aAAa;AAAA,EACvC;AAAA,EACA,QAAQ;AACN,SAAK,YAAY,MAAM;AAAA,EACzB;AACF;AAmBA,IAAM,aAAN,MAAM,YAAW;AAAA,EACf,YAAY,SAAS,aAAa,YAAY,kBAAkB;AAC9D,SAAK,UAAU;AACf,SAAK,cAAc;AACnB,SAAK,aAAa;AAClB,SAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,UAAM,gBAAgB,KAAK,iBAAiB;AAC5C,UAAM,YAAY,kBAAkB,KAAK,KAAK,iBAAiB,gBAAgB,CAAC,MAAM,MAAM,gBAAgB,IAAI;AAChH,UAAM,YAAY,IAAI,WAAW,SAAS;AAC1C,cAAU,IAAI,KAAK,kBAAkB,CAAC;AACtC,QAAI,cAAc,eAAe;AAC/B,gBAAU,IAAI,CAAC,CAAC,GAAG,KAAK,iBAAiB,MAAM;AAAA,IACjD,OAAO;AACL,QAAE,UAAU,UAAU,SAAS,CAAC;AAAA,IAClC;AACA,WAAO,IAAI,YAAW,KAAK,SAAS,KAAK,aAAa,KAAK,YAAY,SAAS;AAAA,EAClF;AACF;AACA,SAAS,qBAAqB,MAAM,OAAO;AACzC,MAAI,MAAM,KAAK,UAAU,MAAM;AAC/B,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,QAAM,kBAAkB,KAAK,YAAY,MAAM,UAAU;AACzD,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,QAAM,kBAAkB,KAAK,kBAAkB,MAAM,gBAAgB;AACrE,MAAI,QAAQ,GAAG;AACb,WAAO;AAAA,EACT;AACA,SAAO,YAAY,WAAW,KAAK,aAAa,MAAM,WAAW;AACnE;AACA,SAAS,kBAAkB,MAAM,OAAO;AACtC,WAAS,IAAI,GAAG,IAAI,KAAK,UAAU,IAAI,MAAM,QAAQ,EAAE,GAAG;AACxD,UAAM,UAAU,KAAK,CAAC,IAAI,MAAM,CAAC;AACjC,QAAI,YAAY,GAAG;AACjB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO,KAAK,SAAS,MAAM;AAC7B;AAsCA,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,QAAQ;AAIlB,SAAK,oBAAoB,IAAI,UAAU,CAAC,KAAK,QAAQ,YAAY,WAAW,IAAI,OAAO,IAAI,KAAK,CAAC;AACjG,SAAK,eAAe,OAAO,mBAAmB,OAAO,OAAO,kBAAkB,OAAO,KAAK,YAAY;AACtG,SAAK,WAAW,OAAO;AACvB,SAAK,kBAAkB,CAAC;AACxB,eAAW,UAAU,OAAO,SAAS;AACnC,YAAM,cAAc;AACpB,UAAI,YAAY,aAAa,GAAG;AAC9B,aAAK,oBAAoB,KAAK,kBAAkB,IAAI,WAAW;AAAA,MACjE,OAAO;AACL,aAAK,gBAAgB,KAAK,WAAW;AAAA,MACvC;AAAA,IACF;AAAA,EACF;AAAA,EACA,IAAI,wBAAwB;AAC1B,WAAO,KAAK,kBAAkB,OAAO;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBA,cAAc,OAAO;AACnB,eAAW,MAAM,oBAAoB,KAAK,YAAY;AACtD,QAAI,KAAK,uBAAuB;AAG9B,aAAO;AAAA,IACT;AAEA,UAAM,eAAe,0BAA0B,KAAK;AACpD,QAAI,iBAAiB,UAAa,CAAC,KAAK,0BAA0B,YAAY,GAAG;AAC/E,aAAO;AAAA,IACT;AACA,UAAM,WAAW,iCAAiC,KAAK;AACvD,QAAI,mBAAmB,oBAAI,IAAI;AAC/B,QAAI,eAAe;AACnB,QAAI,gBAAgB;AAEpB,WAAO,eAAe,SAAS,QAAQ,EAAE,cAAc;AAGrD,UAAI,KAAK,0BAA0B,SAAS,YAAY,CAAC,GAAG;AAC1D,2BAAmB,iBAAiB,IAAI,SAAS,YAAY,EAAE,UAAU,gBAAgB,CAAC;AAAA,MAC5F,OAAO;AAIL;AAAA,MACF;AAAA,IACF;AAIA,QAAI,iBAAiB,SAAS,QAAQ;AACpC,aAAO;AAAA,IACT;AACA,QAAI,KAAK,kBAAkB,OAAO,GAAG;AAEnC,YAAM,mBAAmB,KAAK,kBAAkB,YAAY,EAAE,QAAQ;AAItE,UAAI,CAAC,iBAAiB,IAAI,iBAAiB,MAAM,gBAAgB,CAAC,GAAG;AACnE,cAAM,UAAU,SAAS,YAAY;AACrC,YAAI,CAAC,KAAK,cAAc,kBAAkB,OAAO,KAAK,CAAC,KAAK,eAAe,KAAK,SAAS,eAAe,GAAG,OAAO,GAAG;AACnH,iBAAO;AAAA,QACT;AAAA,MACF;AACA,QAAE;AAAA,IACJ;AAGA,WAAO,eAAe,SAAS,QAAQ,EAAE,cAAc;AACrD,YAAM,UAAU,SAAS,YAAY;AACrC,UAAI,iBAAiB,KAAK,SAAS,UAAU,CAAC,KAAK,eAAe,KAAK,SAAS,eAAe,GAAG,OAAO,GAAG;AAC1G,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB;AACjB,QAAI,KAAK,uBAAuB;AAC9B,aAAO;AAAA,IACT;AAIA,QAAI,eAAe,IAAI,UAAU,YAAY,UAAU;AACvD,UAAM,WAAW,CAAC;AAClB,eAAW,UAAU,KAAK,iBAAiB;AACzC,UAAI,OAAO,MAAM,WAAW,GAAG;AAC7B;AAAA,MACF;AACA,YAAM,kBAAkB,OAAO,OAAO,oBAAkD,OAAO,OAAO;AACtG,UAAI,iBAAiB;AACnB,iBAAS,KAAK,IAAI;AAAA,UAAa,OAAO;AAAA,UAAO;AAAA;AAAA,QAA0B,CAAC;AAAA,MAC1E,OAAO;AACL,YAAI,aAAa,IAAI,OAAO,KAAK,GAAG;AAClC;AAAA,QACF;AACA,uBAAe,aAAa,IAAI,OAAO,KAAK;AAC5C,iBAAS,KAAK,IAAI;AAAA,UAAa,OAAO;AAAA,UAAO;AAAA;AAAA,QAA2B,CAAC;AAAA,MAC3E;AAAA,IACF;AAKA,eAAWlB,YAAW,KAAK,UAAU;AAMnC,UAAIA,SAAQ,MAAM,WAAW,GAAG;AAC9B;AAAA,MACF;AACA,UAAI,aAAa,IAAIA,SAAQ,KAAK,GAAG;AACnC;AAAA,MACF;AACA,qBAAe,aAAa,IAAIA,SAAQ,KAAK;AAC7C,eAAS,KAAK,IAAI;AAAA,QAAaA,SAAQ;AAAA,QAAOA,SAAQ,QAAQ,QAAkC,IAA8B;AAAA;AAAA,MAA4B,CAAC;AAAA,IAC7J;AACA,WAAO,IAAI,WAAW,WAAW,YAAY,KAAK,cAAc,UAAU,WAAW,MAAM,CAAC;AAAA,EAC9F;AAAA,EACA,0BAA0B,SAAS;AACjC,eAAW,UAAU,KAAK,iBAAiB;AACzC,UAAI,KAAK,cAAc,QAAQ,OAAO,GAAG;AACvC,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,cAAc,QAAQ,SAAS;AAC7B,QAAI,WAAW,UAAa,CAAC,OAAO,MAAM,QAAQ,QAAQ,SAAS,GAAG;AACpE,aAAO;AAAA,IACT;AACA,UAAM,kBAAkB,OAAO,OAAO,oBAAkD,OAAO,OAAO;AACtG,WAAO,QAAQ,SAAS,MAA+B;AAAA,EACzD;AAAA,EACA,eAAeA,UAAS,SAAS;AAC/B,QAAI,CAACA,SAAQ,MAAM,QAAQ,QAAQ,SAAS,GAAG;AAC7C,aAAO;AAAA,IACT;AACA,WAAO,QAAQ,SAAS,KAA+BA,SAAQ,QAAQ,SAAmC,QAAQ,SAAS,KAAgCA,SAAQ,QAAQ;AAAA,EAC7K;AACF;AA2BA,SAAS,mBAAmB,QAAQ;AAClC,MAAI,IAAI;AACR,aAAW,kBAAkB,eAAe,kBAAkB,eAAe;AAC7E,MAAI,kBAAkB,aAAa;AACjC,QAAI,kBAAkB,UAAU;AAC9B,YAAMmB,qBAAoB,MAAM,KAAK,OAAO,MAAM,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,IAAI,WAAS,YAAY,OAAO,OAAO,OAAO,MAA2B,KAAK,CAAC,MAAM,CAAC;AAC5O,aAAO,gBAAgB;AAAA,QAAOA;AAAA,QAAiB;AAAA;AAAA,MAA+B;AAAA,IAChF,OAAO;AAEL,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,kBAAkB,OAAO,QAAQ,IAAI,eAAa,mBAAmB,SAAS,CAAC;AACrF,SAAO,gBAAgB,OAAO,iBAAiB,OAAO,EAAE;AAC1D;AAYA,SAAS,YAAY,QAAQ;AAC3B,MAAI,OAAO,WAAW,EAAE,WAAW,GAAG;AACpC,WAAO,CAAC;AAAA,EACV;AACA,QAAM,SAAS,6BAA6B,mBAAmB,MAAM,CAAC;AACtE,aAAW,wBAAwB,MAAM,CAAC;AAC1C,MAAI,oBAAoB,MAAM,KAAK,kBAAkB,MAAM,GAAG;AAC5D,WAAO,CAAC,MAAM;AAAA,EAChB;AACA,SAAO,OAAO,WAAW;AAC3B;AAEA,SAAS,oBAAoB,QAAQ;AACnC,SAAO,kBAAkB;AAC3B;AAKA,SAAS,kBAAkB,QAAQ;AACjC,SAAO,kBAAkB,mBAAmB,iCAAiC,MAAM;AACrF;AASA,SAAS,wBAAwB,QAAQ;AACvC,SAAO,oBAAoB,MAAM,KAAK,kBAAkB,MAAM,KAAK,+CAA+C,MAAM;AAC1H;AAKA,SAAS,+CAA+C,QAAQ;AAC9D,MAAI,kBAAkB,iBAAiB;AACrC,QAAI,6BAA6B,MAAM,GAAG;AACxC,iBAAW,aAAa,OAAO,WAAW,GAAG;AAC3C,YAAI,CAAC,oBAAoB,SAAS,KAAK,CAAC,kBAAkB,SAAS,GAAG;AACpE,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,6BAA6B,QAAQ;AAC5C,aAAW,kBAAkB,eAAe,kBAAkB,eAAe;AAC7E,MAAI,kBAAkB,aAAa;AACjC,WAAO;AAAA,EACT;AACA,MAAI,OAAO,QAAQ,WAAW,GAAG;AAC/B,WAAO,6BAA6B,OAAO,QAAQ,CAAC,CAAC;AAAA,EACvD;AAEA,QAAM,SAAS,OAAO,QAAQ,IAAI,eAAa,6BAA6B,SAAS,CAAC;AACtF,MAAI,YAAY,gBAAgB,OAAO,QAAQ,OAAO,EAAE;AACxD,cAAY,iBAAiB,SAAS;AACtC,MAAI,wBAAwB,SAAS,GAAG;AACtC,WAAO;AAAA,EACT;AACA,aAAW,qBAAqB,eAAe;AAC/C,aAAW,6BAA6B,SAAS,CAAC;AAClD,aAAW,UAAU,QAAQ,SAAS,CAAC;AACvC,SAAO,UAAU,QAAQ,OAAO,CAAC,eAAejB,YAAW,kBAAkB,eAAeA,OAAM,CAAC;AACrG;AACA,SAAS,kBAAkB,KAAK,KAAK;AACnC,aAAW,eAAe,eAAe,eAAe,eAAe;AACvE,aAAW,eAAe,eAAe,eAAe,eAAe;AACvE,MAAI;AACJ,MAAI,eAAe,aAAa;AAC9B,QAAI,eAAe,aAAa;AAE9B,eAAS,8BAA8B,KAAK,GAAG;AAAA,IACjD,OAAO;AAEL,eAAS,0CAA0C,KAAK,GAAG;AAAA,IAC7D;AAAA,EACF,OAAO;AACL,QAAI,eAAe,aAAa;AAE9B,eAAS,0CAA0C,KAAK,GAAG;AAAA,IAC7D,OAAO;AAEL,eAAS,kCAAkC,KAAK,GAAG;AAAA,IACrD;AAAA,EACF;AACA,SAAO,iBAAiB,MAAM;AAChC;AACA,SAAS,8BAA8B,KAAK,KAAK;AAE/C,SAAO,gBAAgB;AAAA,IAAO,CAAC,KAAK,GAAG;AAAA,IAAG;AAAA;AAAA,EAAiC;AAC7E;AACA,SAAS,kCAAkC,KAAK,KAAK;AACnD,aAAW,IAAI,QAAQ,SAAS,KAAK,IAAI,QAAQ,SAAS,CAAC;AAO3D,MAAI,6BAA6B,GAAG,KAAK,6BAA6B,GAAG,GAAG;AAC1E,WAAO,gCAAgC,KAAK,IAAI,WAAW,CAAC;AAAA,EAC9D;AAIA,QAAM,kBAAkB,6BAA6B,GAAG,IAAI,MAAM;AAClE,QAAM,YAAY,6BAA6B,GAAG,IAAI,MAAM;AAC5D,QAAM,UAAU,gBAAgB,QAAQ,IAAI,eAAa,kBAAkB,WAAW,SAAS,CAAC;AAChG,SAAO,gBAAgB;AAAA,IAAO;AAAA,IAAS;AAAA;AAAA,EAA+B;AACxE;AACA,SAAS,0CAA0C,aAAa,iBAAiB;AAI/E,MAAI,6BAA6B,eAAe,GAAG;AAEjD,WAAO,gCAAgC,iBAAiB,YAAY,WAAW,CAAC;AAAA,EAClF,OAAO;AAEL,UAAM,aAAa,gBAAgB,QAAQ,IAAI,eAAa,kBAAkB,aAAa,SAAS,CAAC;AACrG,WAAO,gBAAgB;AAAA,MAAO;AAAA,MAAY;AAAA;AAAA,IAA+B;AAAA,EAC3E;AACF;AAWA,SAAS,iBAAiB,QAAQ;AAChC,aAAW,kBAAkB,eAAe,kBAAkB,eAAe;AAC7E,MAAI,kBAAkB,aAAa;AACjC,WAAO;AAAA,EACT;AACA,QAAM,UAAU,OAAO,WAAW;AAElC,MAAI,QAAQ,WAAW,GAAG;AACxB,WAAO,iBAAiB,QAAQ,CAAC,CAAC;AAAA,EACpC;AAEA,MAAI,sBAAsB,MAAM,GAAG;AACjC,WAAO;AAAA,EACT;AAGA,QAAM,iBAAiB,QAAQ,IAAI,eAAa,iBAAiB,SAAS,CAAC;AAQ3E,QAAM,gBAAgB,CAAC;AACvB,iBAAe,QAAQ,eAAa;AAClC,QAAI,qBAAqB,aAAa;AACpC,oBAAc,KAAK,SAAS;AAAA,IAC9B,WAAW,qBAAqB,iBAAiB;AAC/C,UAAI,UAAU,OAAO,OAAO,IAAI;AAI9B,sBAAc,KAAK,GAAG,UAAU,OAAO;AAAA,MACzC,OAAO;AAIL,sBAAc,KAAK,SAAS;AAAA,MAC9B;AAAA,IACF;AAAA,EACF,CAAC;AACD,MAAI,cAAc,WAAW,GAAG;AAC9B,WAAO,cAAc,CAAC;AAAA,EACxB;AACA,SAAO,gBAAgB,OAAO,eAAe,OAAO,EAAE;AACxD;AAqBA,IAAM,qBAAN,MAAyB;AAAA,EACvB,cAAc;AACZ,SAAK,wBAAwB,IAAI,4BAA4B;AAAA,EAC/D;AAAA,EACA,2BAA2B,aAAa,gBAAgB;AACtD,SAAK,sBAAsB,IAAI,cAAc;AAC7C,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,qBAAqB,aAAa,cAAc;AAC9C,WAAO,mBAAmB,QAAQ,KAAK,sBAAsB,WAAW,YAAY,CAAC;AAAA,EACvF;AAAA,EACA,cAAc,aAAa,OAAO;AAEhC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,iBAAiB,aAAa,OAAO;AAEnC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,sBAAsB,aAAa;AAEjC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,oBAAoB,aAAa,QAAQ;AAEvC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,2BAA2B,aAAa,QAAQ;AAE9C,WAAO,mBAAmB,QAAQ,IAAI;AAAA,EACxC;AAAA,EACA,aAAa,aAAa,QAAQ;AAEhC,WAAO,mBAAmB;AAAA,MAAQ;AAAA;AAAA,IAAsB;AAAA,EAC1D;AAAA,EACA,gBAAgB,aAAaR,kBAAiB;AAE5C,WAAO,mBAAmB,QAAQ,CAAC,CAAC;AAAA,EACtC;AAAA,EACA,+BAA+B,aAAa;AAE1C,WAAO,mBAAmB,QAAQ,IAAI;AAAA,EACxC;AAAA,EACA,aAAa,aAAa,QAAQ;AAChC,WAAO,mBAAmB,QAAQ,YAAY,IAAI,CAAC;AAAA,EACrD;AAAA,EACA,gCAAgC,aAAaA,kBAAiB;AAC5D,WAAO,mBAAmB,QAAQ,YAAY,IAAI,CAAC;AAAA,EACrD;AAAA,EACA,sBAAsB,aAAaA,kBAAiB,QAAQ;AAE1D,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,mBAAmB,aAAa,WAAW;AAEzC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AACF;AAMA,IAAM,8BAAN,MAAkC;AAAA,EAChC,cAAc;AACZ,SAAK,QAAQ,CAAC;AAAA,EAChB;AAAA;AAAA,EAEA,IAAI,gBAAgB;AAClB,UAAM,eAAe,eAAe,YAAY;AAChD,UAAM,aAAa,eAAe,QAAQ;AAC1C,UAAM,kBAAkB,KAAK,MAAM,YAAY,KAAK,IAAI,UAAU,aAAa,UAAU;AACzF,UAAM,QAAQ,CAAC,gBAAgB,IAAI,UAAU;AAC7C,SAAK,MAAM,YAAY,IAAI,gBAAgB,IAAI,UAAU;AACzD,WAAO;AAAA,EACT;AAAA,EACA,IAAI,gBAAgB;AAClB,UAAM,eAAe,eAAe,YAAY;AAChD,UAAM,aAAa,eAAe,QAAQ;AAC1C,UAAM,kBAAkB,KAAK,MAAM,YAAY;AAC/C,WAAO,mBAAmB,gBAAgB,IAAI,UAAU;AAAA,EAC1D;AAAA,EACA,WAAW,cAAc;AACvB,UAAM,cAAc,KAAK,MAAM,YAAY,KAAK,IAAI,UAAU,aAAa,UAAU;AACrF,WAAO,YAAY,QAAQ;AAAA,EAC7B;AACF;AAkBA,IAAM,YAAY;AAClB,IAAM,cAAc,IAAI,WAAW,CAAC;AAOpC,IAAM,wBAAN,MAA4B;AAAA,EAC1B,YAAY,MAAM,YAAY;AAC5B,SAAK,aAAa;AAQlB,SAAK,yBAAyB,IAAI,4BAA4B;AAK9D,SAAK,wBAAwB,IAAI,UAAU,OAAK,eAAe,CAAC,GAAG,CAAC,GAAG,MAAM,aAAa,GAAG,CAAC,CAAC;AAC/F,SAAK,MAAM,KAAK,OAAO;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,2BAA2B,aAAa,gBAAgB;AACtD,QAAI,CAAC,KAAK,uBAAuB,IAAI,cAAc,GAAG;AACpD,YAAM,eAAe,eAAe,YAAY;AAChD,YAAM,aAAa,eAAe,QAAQ;AAC1C,kBAAY,uBAAuB,MAAM;AAGvC,aAAK,uBAAuB,IAAI,cAAc;AAAA,MAChD,CAAC;AACD,YAAM,mBAAmB;AAAA,QACvB;AAAA,QACA,QAAQ,mBAAmB,UAAU;AAAA,MACvC;AACA,aAAO,uBAAuB,WAAW,EAAE,IAAI,gBAAgB;AAAA,IACjE;AACA,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,qBAAqB,aAAa,cAAc;AAC9C,UAAM,cAAc,CAAC;AACrB,UAAM,QAAQ,YAAY;AAAA,MAAM,CAAC,cAAc,EAAE;AAAA,MAAG,CAAC,mBAAmB,YAAY,GAAG,EAAE;AAAA;AAAA,MAAiB;AAAA;AAAA,MAAqB;AAAA,IAAI;AACnI,WAAO,uBAAuB,WAAW,EAAE,QAAQ,KAAK,EAAE,KAAK,aAAW;AACxE,iBAAW,SAAS,SAAS;AAK3B,YAAI,MAAM,iBAAiB,cAAc;AACvC;AAAA,QACF;AACA,oBAAY,KAAK,mBAAmB,MAAM,MAAM,CAAC;AAAA,MACnD;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,cAAc,aAAa,OAAO;AAGhC,UAAM,UAAU,wBAAwB,WAAW;AACnD,UAAM,UAAU,uBAAuB,KAAK;AAC5C,WAAO,QAAQ;AACf,UAAM,SAAS,QAAQ,IAAI,OAAO;AAClC,QAAI,MAAM,YAAY;AACpB,YAAM,SAAS,gBAAgB,WAAW;AAC1C,aAAO,OAAO,KAAK,aAAW;AAC5B,eAAO,IAAI,eAAe,SAAS,KAAK,KAAK,MAAM,WAAW,gBAAgB,MAAM,WAAW,MAAM,CAAC;AAAA,MACxG,CAAC;AAAA,IACH,OAAO;AACL,aAAO,OAAO,KAAK;AAAA,IACrB;AAAA,EACF;AAAA,EACA,iBAAiB,aAAa,OAAO;AACnC,UAAM,UAAU,wBAAwB,WAAW;AACnD,UAAM,SAAS,gBAAgB,WAAW;AAC1C,UAAM,UAAU,kBAAkB,WAAW;AAC7C,WAAO,QAAQ,OAAO,MAAM,OAAO,EAAE,KAAK,MAAM,OAAO,OAAO,YAAY;AAAA,MAAM,CAAC,MAAM,OAAO;AAAA,MAAG,CAAC,MAAM,UAAU,CAAC;AAAA;AAAA,MAAiB;AAAA;AAAA,MAAqB;AAAA,IAAI,CAAC,CAAC,EAAE,KAAK,MAAM,QAAQ,OAAO,YAAY;AAAA,MAAM,CAAC,MAAM,OAAO;AAAA,MAAG,CAAC,MAAM,UAAU,CAAC;AAAA;AAAA,MAAiB;AAAA;AAAA,MAAqB;AAAA,IAAI,CAAC,CAAC;AAAA,EAC9R;AAAA,EACA,sBAAsB,aAAa;AACjC,UAAM,UAAU,wBAAwB,WAAW;AACnD,UAAM,UAAU,kBAAkB,WAAW;AAC7C,UAAM,SAAS,gBAAgB,WAAW;AAC1C,WAAO,QAAQ,UAAU,EAAE,KAAK,MAAM,QAAQ,UAAU,CAAC,EAAE,KAAK,MAAM,OAAO,UAAU,CAAC;AAAA,EAC1F;AAAA,EACA,oBAAoB,aAAa,QAAQ;AACvC,WAAO,mBAAmB,QAAQ,KAAK,cAAc,MAAM,GAAG,eAAa;AACzE,aAAO,KAAK,aAAa,aAAa,SAAS,EAAE,KAAK,UAAQ;AAC5D,YAAI,SAAS,KAA0B,SAAS,GAA2B;AACzE,gBAAM,qBAAqB,IAAI,mBAAmB,SAAS;AAC3D,gBAAM,aAAa,mBAAmB,iBAAiB;AACvD,cAAI,cAAc,MAAM;AACtB,mBAAO,KAAK,cAAc,aAAa,UAAU;AAAA,UACnD;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,2BAA2B,aAAa,QAAQ;AAC9C,UAAM,eAAe,kBAAkB,WAAW;AAClD,QAAI,iBAAiB;AACrB,UAAM,UAAU,oBAAI,IAAI;AACxB,WAAO,mBAAmB,QAAQ,KAAK,cAAc,MAAM,GAAG,eAAa;AACzE,aAAO,KAAK,cAAc,aAAa,SAAS,EAAE,KAAK,WAAS;AAC9D,2BAAmB,iBAAiB,CAAC,CAAC;AACtC,gBAAQ,IAAI,WAAW,KAAK;AAAA,MAC9B,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM;AACZ,UAAI,CAAC,gBAAgB;AACnB,eAAO,mBAAmB,QAAQ,IAAI;AAAA,MACxC,OAAO;AACL,YAAI,eAAe,eAAe;AAClC,cAAM,SAAS,CAAC;AAChB,eAAO,mBAAmB,QAAQ,SAAS,CAAC,OAAO,cAAc;AAC/D,mBAAS,WAAW,eAAe,mBAAmB,KAAK,CAAC,eAAe,eAAe,MAAM,CAAC,EAAE;AACnG,gBAAM,cAAc,qBAAqB,WAAW,KAAK;AACzD,gBAAM,cAAc,qBAAqB,WAAW,KAAK;AACzD,gBAAM,aAAa,oBAAoB,WAAW,KAAK;AACvD,gBAAM,aAAa,oBAAoB,WAAW,KAAK;AACvD,gBAAM,oBAAoB,KAAK,YAAY,OAAO,WAAW,UAAU;AACvE,gBAAM,oBAAoB,KAAK,YAAY,OAAO,WAAW,UAAU;AACvE,gBAAM,eAAe,KAAK,aAAa,OAAO,WAAW,WAAW;AACpE,gBAAM,cAAc,KAAK,oBAAoB,MAAM,SAAS,aAAa,mBAAmB,WAAW,WAAW,mBAAmB,WAAW,WAAW,YAAY;AACvK,iBAAO,mBAAmB,QAAQ,aAAa,gBAAc;AAC3D,mBAAO,aAAa,UAAU,YAAY,OAAO,KAAK,EAAE,KAAK,aAAW;AACtE,sBAAQ,QAAQ,WAAS;AACvB,sBAAM,cAAc,YAAY,aAAa,MAAM,WAAW;AAC9D,oBAAI,CAAC,aAAa,IAAI,WAAW,GAAG;AAClC,iCAAe,aAAa,IAAI,WAAW;AAC3C,yBAAO,KAAK,WAAW;AAAA,gBACzB;AAAA,cACF,CAAC;AAAA,YACH,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,MACtB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,cAAc,QAAQ;AACpB,QAAI,aAAa,KAAK,sBAAsB,IAAI,MAAM;AACtD,QAAI,YAAY;AACd,aAAO;AAAA,IACT;AACA,QAAI,OAAO,QAAQ,WAAW,GAAG;AAC/B,mBAAa,CAAC,MAAM;AAAA,IACtB,OAAO;AAEL,YAAM,MAAM,YAAY,gBAAgB;AAAA,QAAO,OAAO;AAAA,QAAS;AAAA;AAAA,MAAiC,CAAC;AACjG,mBAAa,IAAI,IAAI,UAAQ,UAAU,OAAO,MAAM,OAAO,iBAAiB,OAAO,SAAS,KAAK,WAAW,GAAG,OAAO,OAAO,OAAO,SAAS,OAAO,KAAK,CAAC;AAAA,IAC5J;AACA,SAAK,sBAAsB,IAAI,QAAQ,UAAU;AACjD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,SAAS,aAAa,aAAa,qBAAqB,aAAa,qBAAqB,aAAa;AAKzH,UAAM,cAAc,eAAe,OAAO,YAAY,SAAS,KAAK,KAAK,IAAI,YAAY,QAAQ,YAAY,MAAM;AACnH,UAAM,uBAAuB,cAAc,eAAe,OAAO,YAAY,SAAS;AACtF,UAAM,cAAc,CAAC;AACrB,aAAS,IAAI,GAAG,IAAI,YAAY,EAAE,GAAG;AACnC,YAAM,aAAa,cAAc,KAAK,oBAAoB,YAAY,IAAI,oBAAoB,CAAC,IAAI;AACnG,YAAM,aAAa,KAAK,mBAAmB,SAAS,YAAY,YAAY,IAAI,oBAAoB,GAAG,mBAAmB;AAC1H,YAAM,aAAa,KAAK,mBAAmB,SAAS,YAAY,YAAY,IAAI,oBAAoB,GAAG,mBAAmB;AAC1H,YAAM,aAAa,YAAY,IAAI,WAAS,KAAK;AAAA,QAAmB;AAAA,QAAS;AAAA,QAAY;AAAA;AAAA,QAAuB;AAAA,MAAI,CAAC;AACrH,kBAAY,KAAK,GAAG,KAAK,YAAY,YAAY,YAAY,UAAU,CAAC;AAAA,IAC1E;AACA,WAAO;AAAA,EACT;AAAA;AAAA,EAEA,mBAAmB,SAAS,YAAY,kBAAkB,WAAW;AACnE,UAAM,QAAQ,IAAI,WAAW,SAAS,YAAY,MAAM,GAAG,YAAY,gBAAgB;AACvF,WAAO,YAAY,QAAQ,MAAM,UAAU;AAAA,EAC7C;AAAA;AAAA,EAEA,mBAAmB,SAAS,YAAY,kBAAkB,WAAW;AACnE,UAAM,QAAQ,IAAI,WAAW,SAAS,YAAY,MAAM,GAAG,YAAY,gBAAgB;AACvF,WAAO,YAAY,MAAM,UAAU,IAAI;AAAA,EACzC;AAAA,EACA,cAAc,aAAa,QAAQ;AACjC,UAAM,qBAAqB,IAAI,mBAAmB,MAAM;AACxD,UAAMA,mBAAkB,OAAO,mBAAmB,OAAO,OAAO,kBAAkB,OAAO,KAAK,YAAY;AAC1G,WAAO,KAAK,gBAAgB,aAAaA,gBAAe,EAAE,KAAK,aAAW;AAExE,UAAI,QAAQ;AACZ,iBAAW,aAAa,SAAS;AAC/B,cAAM,UAAU,mBAAmB,cAAc,SAAS;AAC1D,YAAI,YAAY,CAAC,SAAS,UAAU,OAAO,SAAS,MAAM,OAAO,SAAS;AACxE,kBAAQ;AAAA,QACV;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,aAAa,aAAa,QAAQ;AAChC,QAAI,YAAY;AAChB,UAAM,aAAa,KAAK,cAAc,MAAM;AAC5C,WAAO,mBAAmB,QAAQ,YAAY,CAAA0B,YAAU;AACtD,aAAO,KAAK,cAAc,aAAaA,OAAM,EAAE,KAAK,WAAS;AAC3D,YAAI,CAAC,OAAO;AACV,sBAAY;AAAA,QACd,WAAW,cAAc,KAA0B,MAAM,OAAO,SAAS,sBAAsBA,OAAM,GAAG;AACtG,sBAAY;AAAA,QACd;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM;AAIZ,UAAI,eAAe,MAAM,KAAK,WAAW,SAAS,KAAK,cAAc,GAAwB;AAC3F,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,0BAA0B,YAAY,UAAU;AAC9C,UAAM,UAAU,IAAI,iBAAiB;AACrC,eAAW,WAAW,iCAAiC,UAAU,GAAG;AAClE,YAAM,QAAQ,SAAS,KAAK,MAAM,QAAQ,SAAS;AACnD,UAAI,SAAS,MAAM;AACjB,eAAO;AAAA,MACT;AACA,YAAM,qBAAqB,QAAQ,QAAQ,QAAQ,IAAI;AACvD,gCAA0B,SAAS,gBAAgB,OAAO,kBAAkB;AAAA,IAC9E;AACA,WAAO,QAAQ,aAAa;AAAA,EAC9B;AAAA;AAAA,EAEA,oBAAoB,OAAO;AACzB,UAAM,UAAU,IAAI,iBAAiB;AACrC,8BAA0B,SAAS,gBAAgB,OAAO,QAAQ;AAAA,MAAQ;AAAA;AAAA,IAA2B,CAAC;AACtG,WAAO,QAAQ,aAAa;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB,YAAY,aAAa;AAC5C,UAAM,UAAU,IAAI,iBAAiB;AACrC,8BAA0B,SAAS,gBAAgB,SAAS,KAAK,YAAY,WAAW,GAAG,QAAQ,QAAQ,sBAAsB,UAAU,CAAC,CAAC;AAC7I,WAAO,QAAQ,aAAa;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,YAAY,QAAQ,QAAQ;AACvC,QAAI,WAAW,MAAM;AACnB,aAAO,CAAC;AAAA,IACV;AACA,QAAI,WAAW,CAAC;AAChB,aAAS,KAAK,IAAI,iBAAiB,CAAC;AACpC,QAAI,WAAW;AACf,eAAW,WAAW,iCAAiC,UAAU,GAAG;AAClE,YAAM,QAAQ,OAAO,UAAU;AAC/B,iBAAW,WAAW,UAAU;AAC9B,YAAI,KAAK,WAAW,QAAQ,QAAQ,SAAS,KAAK,QAAQ,KAAK,GAAG;AAChE,qBAAW,KAAK,kBAAkB,UAAU,SAAS,KAAK;AAAA,QAC5D,OAAO;AACL,gBAAM,qBAAqB,QAAQ,QAAQ,QAAQ,IAAI;AACvD,oCAA0B,SAAS,gBAAgB,OAAO,kBAAkB;AAAA,QAC9E;AAAA,MACF;AAAA,IACF;AACA,WAAO,KAAK,gBAAgB,QAAQ;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY,YAAY,QAAQ,OAAO;AACrC,WAAO,KAAK,aAAa,YAAY,QAAQ,MAAM,QAAQ;AAAA,EAC7D;AAAA;AAAA,EAEA,gBAAgB,UAAU;AACxB,UAAM,SAAS,CAAC;AAChB,aAAS,IAAI,GAAG,IAAI,SAAS,QAAQ,EAAE,GAAG;AACxC,aAAO,CAAC,IAAI,SAAS,CAAC,EAAE,aAAa;AAAA,IACvC;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,UAAU,SAAS,OAAO;AAC1C,UAAM,WAAW,CAAC,GAAG,QAAQ;AAC7B,UAAM,UAAU,CAAC;AACjB,eAAW,gBAAgB,MAAM,WAAW,UAAU,CAAC,GAAG;AACxD,iBAAW,UAAU,UAAU;AAC7B,cAAM,gBAAgB,IAAI,iBAAiB;AAC3C,sBAAc,KAAK,OAAO,aAAa,CAAC;AACxC,kCAA0B,SAAS,gBAAgB,cAAc,cAAc,QAAQ,QAAQ,IAAI,CAAC;AACpG,gBAAQ,KAAK,aAAa;AAAA,MAC5B;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,WAAW,QAAQ,WAAW;AAC5B,WAAO,CAAC,CAAC,OAAO,QAAQ,KAAK,OAAK,aAAa,eAAe,EAAE,MAAM,QAAQ,SAAS,MAAM,EAAE,OAAO,QAA0B,EAAE,OAAO,SAA+B;AAAA,EAC1K;AAAA,EACA,gBAAgB,aAAa1B,kBAAiB;AAC5C,UAAM,UAAU,wBAAwB,WAAW;AACnD,UAAM,SAAS,gBAAgB,WAAW;AAC1C,YAAQA,mBAAkB,QAAQ,QAAQ,0CAA0C,YAAY,MAAMA,kBAAiBA,gBAAe,CAAC,IAAI,QAAQ,QAAQ,GAAG,KAAK,kBAAgB;AACjL,YAAM,SAAS,CAAC;AAChB,aAAO,mBAAmB,QAAQ,cAAc,iBAAe;AAC7D,eAAO,OAAO,IAAI,CAAC,YAAY,SAAS,KAAK,GAAG,CAAC,EAAE,KAAK,gBAAc;AACpE,iBAAO,KAAK,yBAAyB,aAAa,UAAU,CAAC;AAAA,QAC/D,CAAC;AAAA,MACH,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,IACtB,CAAC;AAAA,EACH;AAAA,EACA,+BAA+B,aAAa;AAC1C,WAAO,KAAK,gBAAgB,WAAW,EAAE,KAAK,aAAW;AACvD,UAAI,QAAQ,WAAW,GAAG;AACxB,eAAO;AAAA,MACT;AACA,cAAQ,KAAK,CAAC,GAAG,MAAM;AACrB,cAAM,MAAM,EAAE,WAAW,iBAAiB,EAAE,WAAW;AACvD,eAAO,QAAQ,IAAI,MAAM,oBAAoB,EAAE,iBAAiB,EAAE,eAAe;AAAA,MACnF,CAAC;AACD,aAAO,QAAQ,CAAC,EAAE;AAAA,IACpB,CAAC;AAAA,EACH;AAAA,EACA,sBAAsB,aAAaA,kBAAiB,QAAQ;AAC1D,UAAM,UAAU,wBAAwB,WAAW;AACnD,UAAM,SAAS,gBAAgB,WAAW;AAC1C,WAAO,KAAK,sBAAsB,WAAW,EAAE,KAAK,wBAAsB,QAAQ,QAAQ,0CAA0C,YAAY,MAAMA,kBAAiBA,gBAAe,CAAC,EAAE,KAAK,aAAW,mBAAmB,QAAQ,SAAS,YAAU,OAAO,IAAI,eAAe,OAAO,SAAS,KAAK,KAAK,oBAAoB,MAAM,CAAC,CAAC,CAAC,CAAC;AAAA,EAC3U;AAAA,EACA,mBAAmB,aAAa,WAAW;AAMzC,UAAM,kBAAkB,oBAAI,IAAI;AAChC,WAAO,mBAAmB,QAAQ,WAAW,CAAC,KAAKO,SAAQ;AACzD,YAAM,4BAA4B,gBAAgB,IAAI,IAAI,eAAe;AACzE,YAAM,eAAe,4BAA4B,mBAAmB,QAAQ,yBAAyB,IAAI,KAAK,gBAAgB,aAAa,IAAI,eAAe;AAC9J,aAAO,aAAa,KAAK,CAAAoB,kBAAgB;AACvC,wBAAgB,IAAI,IAAI,iBAAiBA,aAAY;AACrD,eAAO,mBAAmB,QAAQA,eAAc,gBAAc;AAC5D,iBAAO,KAAK,wBAAwB,aAAa,KAAK,UAAU,EAAE,KAAK,qBAAmB;AACxF,kBAAM,aAAa,KAAK,oBAAoBpB,MAAK,UAAU;AAC3D,gBAAI,CAAC,gBAAgB,QAAQ,UAAU,GAAG;AACxC,qBAAO,KAAK,cAAc,aAAaA,MAAK,YAAY,iBAAiB,UAAU;AAAA,YACrF;AACA,mBAAO,mBAAmB,QAAQ;AAAA,UACpC,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,cAAc,aAAa,UAAU,YAAY,YAAY;AAC3D,UAAM,eAAe,kBAAkB,WAAW;AAClD,WAAO,aAAa,IAAI;AAAA,MACtB,SAAS,WAAW;AAAA,MACpB,KAAK,KAAK;AAAA,MACV,YAAY,WAAW;AAAA,MACvB,kBAAkB,WAAW;AAAA,MAC7B,oBAAoB,KAAK,qBAAqB,YAAY,SAAS,GAAG;AAAA,MACtE,aAAa,SAAS,IAAI,KAAK,QAAQ;AAAA,IACzC,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,aAAa,UAAU,YAAY,YAAY;AAC9D,UAAM,eAAe,kBAAkB,WAAW;AAClD,WAAO,aAAa,OAAO,CAAC,WAAW,SAAS,KAAK,KAAK,WAAW,YAAY,WAAW,kBAAkB,KAAK,qBAAqB,YAAY,SAAS,GAAG,GAAG,SAAS,IAAI,KAAK,QAAQ,CAAC,CAAC;AAAA,EACjM;AAAA,EACA,wBAAwB,aAAa,aAAa,YAAY;AAC5D,UAAM,eAAe,kBAAkB,WAAW;AAClD,QAAI,UAAU,IAAI,UAAU,oBAAoB;AAChD,WAAO,aAAa,QAAQ;AAAA,MAC1B,OAAO;AAAA,MACP,OAAO,YAAY,KAAK,CAAC,WAAW,SAAS,KAAK,KAAK,KAAK,qBAAqB,YAAY,WAAW,CAAC,CAAC;AAAA,IAC5G,GAAG,CAAC,GAAG,UAAU;AACf,gBAAU,QAAQ,IAAI,IAAI,WAAW,WAAW,SAAS,aAAa,MAAM,YAAY,MAAM,gBAAgB,CAAC;AAAA,IACjH,CAAC,EAAE,KAAK,MAAM,OAAO;AAAA,EACvB;AAAA;AAAA,EAEA,oBAAoB,UAAU,YAAY;AACxC,QAAI,UAAU,IAAI,UAAU,oBAAoB;AAChD,UAAM,mBAAmB,KAAK,0BAA0B,YAAY,QAAQ;AAC5E,QAAI,oBAAoB,MAAM;AAC5B,aAAO;AAAA,IACT;AACA,UAAM,eAAe,0BAA0B,UAAU;AACzD,QAAI,gBAAgB,MAAM;AACxB,YAAM,QAAQ,SAAS,KAAK,MAAM,aAAa,SAAS;AACxD,UAAI,QAAQ,KAAK,GAAG;AAClB,mBAAW,cAAc,MAAM,WAAW,UAAU,CAAC,GAAG;AACtD,oBAAU,QAAQ,IAAI,IAAI,WAAW,WAAW,SAAS,SAAS,KAAK,KAAK,oBAAoB,UAAU,GAAG,gBAAgB,CAAC;AAAA,QAChI;AAAA,MACF;AAAA,IACF,OAAO;AACL,gBAAU,QAAQ,IAAI,IAAI,WAAW,WAAW,SAAS,SAAS,KAAK,aAAa,gBAAgB,CAAC;AAAA,IACvG;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,aAAa,UAAU,YAAY,iBAAiB,YAAY;AAC5E,aAAS,WAAW,4CAA4C,SAAS,GAAG;AAC5E,UAAM,WAAW,CAAC;AAClB;AAAA,MAAe;AAAA,MAAiB;AAAA,MAAY;AAAA;AAAA,MAAkC,WAAS;AACrF,iBAAS,KAAK,KAAK,cAAc,aAAa,UAAU,YAAY,KAAK,CAAC;AAAA,MAC5E;AAAA;AAAA,MAAkB,WAAS;AACzB,iBAAS,KAAK,KAAK,iBAAiB,aAAa,UAAU,YAAY,KAAK,CAAC;AAAA,MAC/E;AAAA,IAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EACA,sBAAsB,aAAa;AACjC,QAAI,qBAAqB;AACzB,UAAM,SAAS,gBAAgB,WAAW;AAC1C,WAAO,OAAO,QAAQ;AAAA,MACpB,OAAO;AAAA,MACP,SAAS;AAAA,MACT,OAAO,YAAY,WAAW,CAAC,KAAK,KAAK,OAAO,gBAAgB,CAAC;AAAA,IACnE,GAAG,CAAC,GAAG,OAAO,eAAe;AAC3B,iBAAW,KAAK;AAChB,2BAAqB,MAAM,iBAAiB;AAAA,IAC9C,CAAC,EAAE,KAAK,MAAM,kBAAkB;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,YAAY,OAAO,OAAO,aAAa;AAGrC,kBAAc,YAAY,KAAK,CAAC,GAAG,MAAM,qBAAqB,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,IAAI,GAAG,WAAW,CAAC,KAAK,qBAAqB,IAAI,OAAO,IAAI,CAAC,CAAC,MAAM,CAAC;AAClJ,UAAM,SAAS,CAAC;AAChB,WAAO,KAAK,KAAK;AACjB,eAAW,cAAc,aAAa;AACpC,YAAM,aAAa,qBAAqB,YAAY,KAAK;AACzD,YAAM,aAAa,qBAAqB,YAAY,KAAK;AACzD,UAAI,eAAe,GAAG;AAGpB,eAAO,CAAC,IAAI,MAAM,UAAU;AAAA,MAC9B,WAAW,aAAa,KAAK,aAAa,GAAG;AAE3C,eAAO,KAAK,UAAU;AACtB,eAAO,KAAK,WAAW,UAAU,CAAC;AAAA,MACpC,WAAW,aAAa,GAAG;AAEzB;AAAA,MACF;AAAA,IACF;AACA,WAAO,KAAK,KAAK;AACjB,UAAM,SAAS,CAAC;AAChB,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK,GAAG;AAGzC,UAAI,KAAK,iBAAiB,OAAO,CAAC,GAAG,OAAO,IAAI,CAAC,CAAC,GAAG;AACnD,eAAO,CAAC;AAAA,MACV;AACA,YAAM,aAAa,CAAC,OAAO,CAAC,EAAE,SAAS,KAAK,KAAK,OAAO,CAAC,EAAE,YAAY,OAAO,CAAC,EAAE,kBAAkB,aAAa,CAAC,CAAC;AAClH,YAAM,aAAa,CAAC,OAAO,IAAI,CAAC,EAAE,SAAS,KAAK,KAAK,OAAO,IAAI,CAAC,EAAE,YAAY,OAAO,IAAI,CAAC,EAAE,kBAAkB,aAAa,CAAC,CAAC;AAC9H,aAAO,KAAK,YAAY,MAAM,YAAY,UAAU,CAAC;AAAA,IACvD;AACA,WAAO;AAAA,EACT;AAAA,EACA,iBAAiB,YAAY,YAAY;AAGvC,WAAO,qBAAqB,YAAY,UAAU,IAAI;AAAA,EACxD;AAAA,EACA,gCAAgC,aAAaP,kBAAiB;AAC5D,WAAO,KAAK,gBAAgB,aAAaA,gBAAe,EAAE,KAAK,4BAA4B;AAAA,EAC7F;AAAA,EACA,aAAa,aAAa,QAAQ;AAChC,WAAO,mBAAmB,SAAS,KAAK,cAAc,MAAM,GAAG,eAAa,KAAK,cAAc,aAAa,SAAS,EAAE,KAAK,WAAS,QAAQ,QAAQ,KAAK,CAAC,CAAC,EAAE,KAAK,4BAA4B;AAAA,EACjM;AACF;AAKA,SAAS,uBAAuB,KAAK;AACnC,SAAO,SAAS,KAAK,uBAAuB;AAC9C;AAIA,SAAS,kBAAkB,KAAK;AAC9B,SAAO,SAAS,KAAK,iBAAiB;AACxC;AAIA,SAAS,wBAAwB,KAAK;AACpC,SAAO,SAAS,KAAK,yBAAyB;AAChD;AAIA,SAAS,gBAAgB,KAAK;AAC5B,SAAO,SAAS,KAAK,iBAAiB;AACxC;AACA,SAAS,6BAA6B,cAAc;AAClD,aAAW,aAAa,WAAW,CAAC;AACpC,MAAI,YAAY,aAAa,CAAC,EAAE,WAAW;AAC3C,MAAI,aAAa,UAAU;AAC3B,WAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,UAAM,YAAY,aAAa,CAAC,EAAE,WAAW;AAC7C,QAAI,sBAAsB,WAAW,SAAS,IAAI,GAAG;AACnD,kBAAY;AAAA,IACd;AACA,QAAI,aAAa,UAAU,gBAAgB;AACzC,mBAAa,UAAU;AAAA,IACzB;AAAA,EACF;AACA,SAAO,IAAI,YAAY,UAAU,UAAU,UAAU,aAAa,UAAU;AAC9E;AAsBA,SAAS,oBAAoB,KAAK,QAAQ,OAAO;AAC/C,QAAM,gBAAgB,IAAI,MAAM,oBAAoB;AACpD,QAAM,WAAW,IAAI,MAAM,uBAAuB;AAClD,QAAM,WAAW,CAAC;AAClB,QAAM,QAAQ,YAAY,KAAK,MAAM,OAAO;AAC5C,MAAI,aAAa;AACjB,QAAM,gBAAgB,cAAc,QAAQ;AAAA,IAC1C;AAAA,EACF,GAAG,CAAC,KAAK,OAAO,YAAY;AAC1B;AACA,WAAO,QAAQ,OAAO;AAAA,EACxB,CAAC;AACD,WAAS,KAAK,cAAc,KAAK,MAAM;AACrC,eAAW,eAAe,CAAC;AAAA,EAC7B,CAAC,CAAC;AACF,QAAM,mBAAmB,CAAC;AAC1B,aAAW,YAAY,MAAM,WAAW;AACtC,UAAM,WAAW,yBAAyB,QAAQ,SAAS,IAAI,MAAM,MAAM,OAAO;AAClF,aAAS,KAAK,SAAS,OAAO,QAAQ,CAAC;AACvC,qBAAiB,KAAK,SAAS,GAAG;AAAA,EACpC;AACA,SAAO,mBAAmB,QAAQ,QAAQ,EAAE,KAAK,MAAM,gBAAgB;AACzE;AAIA,SAAS,eAAeO,MAAK;AAC3B,MAAI,CAACA,MAAK;AACR,WAAO;AAAA,EACT;AACA,MAAI;AACJ,MAAIA,KAAI,UAAU;AAChB,YAAQA,KAAI;AAAA,EACd,WAAWA,KAAI,iBAAiB;AAC9B,YAAQA,KAAI;AAAA,EACd,WAAWA,KAAI,YAAY;AACzB,YAAQA,KAAI;AAAA,EACd,OAAO;AACL,UAAM,KAAK;AAAA,EACb;AACA,SAAO,KAAK,UAAU,KAAK,EAAE;AAC/B;AAmBA,IAAM,yBAAN,MAAM,wBAAuB;AAAA,EAC3B,YAKA,QAAQ,YAAY,cAAc,mBAAmB;AACnD,SAAK,SAAS;AACd,SAAK,aAAa;AAClB,SAAK,eAAe;AACpB,SAAK,oBAAoB;AAazB,SAAK,wBAAwB,CAAC;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,QAAQ,MAAM,YAAY,cAAc,mBAAmB;AAKhE,eAAW,KAAK,QAAQ,EAAE;AAC1B,UAAM,SAAS,KAAK,gBAAgB,IAAI,KAAK,MAAM;AACnD,WAAO,IAAI,wBAAuB,QAAQ,YAAY,cAAc,iBAAiB;AAAA,EACvF;AAAA,EACA,WAAW,aAAa;AACtB,QAAI,QAAQ;AACZ,UAAM,QAAQ,YAAY,MAAM,CAAC,KAAK,QAAQ,OAAO,iBAAiB,GAAG,CAAC,KAAK,QAAQ,OAAO,iBAAiB,CAAC;AAChH,WAAO,eAAe,WAAW,EAAE,QAAQ;AAAA,MACzC,OAAO;AAAA,MACP;AAAA,IACF,GAAG,CAAC,KAAK,OAAO,YAAY;AAC1B,cAAQ;AACR,cAAQ,KAAK;AAAA,IACf,CAAC,EAAE,KAAK,MAAM,KAAK;AAAA,EACrB;AAAA,EACA,iBAAiB,aAAa,gBAAgB,eAAe,WAAW;AACtE,UAAM,gBAAgB,uBAAuB,WAAW;AACxD,UAAM,gBAAgB,eAAe,WAAW;AAUhD,WAAO,cAAc,IAAI,CAAC,CAAC,EAAE,KAAK,aAAW;AAC3C,iBAAW,OAAO,YAAY,QAAQ;AACtC,YAAM,QAAQ,IAAI,cAAc,SAAS,gBAAgB,eAAe,SAAS;AACjF,YAAM,UAAU,kBAAkB,KAAK,YAAY,KAAK,QAAQ,KAAK;AACrE,YAAM,WAAW,CAAC;AAClB,UAAI,oBAAoB,IAAI,UAAU,CAAC,GAAG,MAAM,oBAAoB,EAAE,gBAAgB,GAAG,EAAE,gBAAgB,CAAC,CAAC;AAC7G,iBAAW,YAAY,WAAW;AAChC,cAAM,WAAW,yBAAyB,KAAK,QAAQ,SAAS,IAAI,MAAM,OAAO;AACjF,4BAAoB,kBAAkB,IAAI,SAAS,IAAI,KAAK,QAAQ,CAAC;AACrE,iBAAS,KAAK,cAAc,IAAI,OAAO,CAAC;AACxC,iBAAS,KAAK,cAAc,IAAI,UAAU,6BAA6B,CAAC;AAAA,MAC1E;AACA,wBAAkB,QAAQ,YAAU;AAClC,iBAAS,KAAK,KAAK,aAAa,2BAA2B,aAAa,MAAM,CAAC;AAAA,MACjF,CAAC;AACD,kBAAY,uBAAuB,MAAM;AACvC,aAAK,sBAAsB,OAAO,IAAI,MAAM,KAAK;AAAA,MACnD,CAAC;AACD,aAAO,mBAAmB,QAAQ,QAAQ,EAAE,KAAK,MAAM,KAAK;AAAA,IAC9D,CAAC;AAAA,EACH;AAAA,EACA,oBAAoB,aAAa,SAAS;AACxC,WAAO,eAAe,WAAW,EAAE,IAAI,OAAO,EAAE,KAAK,aAAW;AAC9D,UAAI,SAAS;AACX,mBAAW,QAAQ,WAAW,KAAK,MAAM;AACzC,eAAO,oBAAoB,KAAK,YAAY,OAAO;AAAA,MACrD;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB,aAAa,SAAS;AACvC,QAAI,KAAK,sBAAsB,OAAO,GAAG;AACvC,aAAO,mBAAmB,QAAQ,KAAK,sBAAsB,OAAO,CAAC;AAAA,IACvE,OAAO;AACL,aAAO,KAAK,oBAAoB,aAAa,OAAO,EAAE,KAAK,WAAS;AAClE,YAAI,OAAO;AACT,gBAAM,OAAO,MAAM,KAAK;AACxB,eAAK,sBAAsB,OAAO,IAAI;AACtC,iBAAO;AAAA,QACT,OAAO;AACL,iBAAO;AAAA,QACT;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,iCAAiC,aAAa,SAAS;AACrD,UAAM,cAAc,UAAU;AAC9B,UAAM,QAAQ,YAAY,WAAW,CAAC,KAAK,QAAQ,WAAW,CAAC;AAC/D,QAAI,aAAa;AACjB,WAAO,eAAe,WAAW,EAAE,QAAQ;AAAA,MACzC,OAAO;AAAA,MACP;AAAA,IACF,GAAG,CAAC,KAAK,SAAS,YAAY;AAC5B,UAAI,QAAQ,WAAW,KAAK,QAAQ;AAClC,mBAAW,QAAQ,WAAW,WAAW;AACzC,qBAAa,oBAAoB,KAAK,YAAY,OAAO;AAAA,MAC3D;AACA,cAAQ,KAAK;AAAA,IACf,CAAC,EAAE,KAAK,MAAM,UAAU;AAAA,EAC1B;AAAA,EACA,gCAAgC,aAAa;AAC3C,UAAM,QAAQ,YAAY,WAAW,CAAC,KAAK,QAAQ,OAAO,iBAAiB,CAAC;AAC5E,QAAI,UAAU;AACd,WAAO,eAAe,WAAW,EAAE,QAAQ;AAAA,MACzC,OAAO;AAAA,MACP;AAAA,MACA,SAAS;AAAA,IACX,GAAG,CAAC,KAAK,SAAS,YAAY;AAC5B,gBAAU,QAAQ;AAClB,cAAQ,KAAK;AAAA,IACf,CAAC,EAAE,KAAK,MAAM,OAAO;AAAA,EACvB;AAAA,EACA,sBAAsB,aAAa;AACjC,UAAM,QAAQ,YAAY,MAAM,CAAC,KAAK,QAAQ,eAAe,GAAG,CAAC,KAAK,QAAQ,OAAO,iBAAiB,CAAC;AACvG,WAAO,eAAe,WAAW,EAAE,QAAQ,mCAAmC,KAAK,EAAE,KAAK,eAAa,UAAU,IAAI,aAAW,oBAAoB,KAAK,YAAY,OAAO,CAAC,CAAC;AAAA,EAChL;AAAA,EACA,0CAA0C,aAAa,aAAa;AAGlE,UAAM,cAAc,mCAAmC,KAAK,QAAQ,YAAY,IAAI;AACpF,UAAM,aAAa,YAAY,WAAW,WAAW;AACrD,UAAM,UAAU,CAAC;AACjB,WAAO,uBAAuB,WAAW,EAAE,QAAQ;AAAA,MACjD,OAAO;AAAA,IACT,GAAG,CAAC,UAAU,GAAG,YAAY;AAC3B,YAAM,CAAC,QAAQ,aAAa,OAAO,IAAI;AAQvC,YAAM,OAAO,mBAAmB,WAAW;AAC3C,UAAI,WAAW,KAAK,UAAU,CAAC,YAAY,KAAK,QAAQ,IAAI,GAAG;AAC7D,gBAAQ,KAAK;AACb;AAAA,MACF;AAEA,aAAO,eAAe,WAAW,EAAE,IAAI,OAAO,EAAE,KAAK,cAAY;AAC/D,YAAI,CAAC,UAAU;AACb,gBAAM,KAAK;AAAA,QACb;AACA,mBAAW,SAAS,WAAW,KAAK,MAAM;AAC1C,gBAAQ,KAAK,oBAAoB,KAAK,YAAY,QAAQ,CAAC;AAAA,MAC7D,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM,OAAO;AAAA,EACvB;AAAA,EACA,2CAA2C,aAAa,cAAc;AACpE,QAAI,iBAAiB,IAAI,UAAU,mBAAmB;AACtD,UAAM,WAAW,CAAC;AAClB,iBAAa,QAAQ,iBAAe;AAClC,YAAM,aAAa,mCAAmC,KAAK,QAAQ,YAAY,IAAI;AACnF,YAAM,QAAQ,YAAY,WAAW,UAAU;AAC/C,YAAM,UAAU,uBAAuB,WAAW,EAAE,QAAQ;AAAA,QAC1D;AAAA,MACF,GAAG,CAAC,UAAU,GAAG,YAAY;AAC3B,cAAM,CAAC,QAAQ,aAAa,OAAO,IAAI;AAQvC,cAAM,OAAO,mBAAmB,WAAW;AAC3C,YAAI,WAAW,KAAK,UAAU,CAAC,YAAY,KAAK,QAAQ,IAAI,GAAG;AAC7D,kBAAQ,KAAK;AACb;AAAA,QACF;AACA,yBAAiB,eAAe,IAAI,OAAO;AAAA,MAC7C,CAAC;AACD,eAAS,KAAK,OAAO;AAAA,IACvB,CAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ,EAAE,KAAK,MAAM,KAAK,sBAAsB,aAAa,cAAc,CAAC;AAAA,EAChH;AAAA,EACA,oCAAoC,aAAaK,QAAO;AACtD,UAAM,YAAYA,OAAM;AACxB,UAAM,0BAA0B,UAAU,SAAS;AAYnD,UAAM,cAAc,mCAAmC,KAAK,QAAQ,SAAS;AAC7E,UAAM,aAAa,YAAY,WAAW,WAAW;AAIrD,QAAI,iBAAiB,IAAI,UAAU,mBAAmB;AACtD,WAAO,uBAAuB,WAAW,EAAE,QAAQ;AAAA,MACjD,OAAO;AAAA,IACT,GAAG,CAAC,UAAU,GAAG,YAAY;AAC3B,YAAM,CAAC,QAAQ,aAAa,OAAO,IAAI;AACvC,YAAM,OAAO,mBAAmB,WAAW;AAC3C,UAAI,WAAW,KAAK,UAAU,CAAC,UAAU,WAAW,IAAI,GAAG;AACzD,gBAAQ,KAAK;AACb;AAAA,MACF;AAMA,UAAI,KAAK,WAAW,yBAAyB;AAC3C;AAAA,MACF;AACA,uBAAiB,eAAe,IAAI,OAAO;AAAA,IAC7C,CAAC,EAAE,KAAK,MAAM,KAAK,sBAAsB,aAAa,cAAc,CAAC;AAAA,EACvE;AAAA,EACA,sBAAsB,aAAa,UAAU;AAC3C,UAAM,UAAU,CAAC;AACjB,UAAM,WAAW,CAAC;AAElB,aAAS,QAAQ,aAAW;AAC1B,eAAS,KAAK,eAAe,WAAW,EAAE,IAAI,OAAO,EAAE,KAAK,cAAY;AACtE,YAAI,aAAa,MAAM;AACrB,gBAAM,KAAK;AAAA,QACb;AACA,mBAAW,SAAS,WAAW,KAAK,MAAM;AAC1C,gBAAQ,KAAK,oBAAoB,KAAK,YAAY,QAAQ,CAAC;AAAA,MAC7D,CAAC,CAAC;AAAA,IACJ,CAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ,EAAE,KAAK,MAAM,OAAO;AAAA,EAChE;AAAA,EACA,oBAAoB,aAAa,OAAO;AACtC,WAAO,oBAAoB,YAAY,qBAAqB,KAAK,QAAQ,KAAK,EAAE,KAAK,sBAAoB;AACvG,kBAAY,uBAAuB,MAAM;AACvC,aAAK,yBAAyB,MAAM,OAAO;AAAA,MAC7C,CAAC;AACD,aAAO,mBAAmB,QAAQ,kBAAkB,SAAO;AACzD,eAAO,KAAK,kBAAkB,wBAAwB,aAAa,GAAG;AAAA,MACxE,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,yBAAyB,SAAS;AAChC,WAAO,KAAK,sBAAsB,OAAO;AAAA,EAC3C;AAAA,EACA,wBAAwB,KAAK;AAC3B,WAAO,KAAK,WAAW,GAAG,EAAE,KAAK,WAAS;AACxC,UAAI,CAAC,OAAO;AACV,eAAO,mBAAmB,QAAQ;AAAA,MACpC;AAGA,YAAM,aAAa,YAAY,WAAW,mCAAmC,KAAK,MAAM,CAAC;AACzF,YAAM,6BAA6B,CAAC;AACpC,aAAO,uBAAuB,GAAG,EAAE,QAAQ;AAAA,QACzC,OAAO;AAAA,MACT,GAAG,CAAC,KAAK,GAAG,YAAY;AACtB,cAAM,SAAS,IAAI,CAAC;AACpB,YAAI,WAAW,KAAK,QAAQ;AAC1B,kBAAQ,KAAK;AACb;AAAA,QACF,OAAO;AACL,gBAAM,OAAO,mBAAmB,IAAI,CAAC,CAAC;AACtC,qCAA2B,KAAK,IAAI;AAAA,QACtC;AAAA,MACF,CAAC,EAAE,KAAK,MAAM;AACZ,mBAAW,2BAA2B,WAAW,CAAC;AAAA,MACpD,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,YAAY,KAAK,KAAK;AACpB,WAAO,yBAAyB,KAAK,KAAK,QAAQ,GAAG;AAAA,EACvD;AAAA;AAAA;AAAA,EAGA,yBAAyB,aAAa;AACpC,WAAO,oBAAoB,WAAW,EAAE,IAAI,KAAK,MAAM,EAAE,KAAK,cAAY;AACxE,aAAO,YAAY;AAAA,QACjB,QAAQ,KAAK;AAAA,QACb,yBAAyB;AAAA,QACzB,iBAAiB;AAAA,MACnB;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAKA,SAAS,yBAAyB,KAAK,QAAQ,KAAK;AAClD,QAAM,WAAW,mCAAmC,QAAQ,IAAI,IAAI;AACpE,QAAM,cAAc,SAAS,CAAC;AAC9B,QAAM,aAAa,YAAY,WAAW,QAAQ;AAClD,MAAI,cAAc;AAClB,SAAO,uBAAuB,GAAG,EAAE,QAAQ;AAAA,IACzC,OAAO;AAAA,IACP,UAAU;AAAA,EACZ,GAAG,CAACgB,MAAK,OAAO,YAAY;AAC1B,UAAM;AAAA,MAAC;AAAA,MAAQ;AAAA;AAAA,MAAoB;AAAA,IAAC,IAAIA;AACxC,QAAI,WAAW,UAAU,YAAY,aAAa;AAChD,oBAAc;AAAA,IAChB;AACA,YAAQ,KAAK;AAAA,EACf,CAAC,EAAE,KAAK,MAAM,WAAW;AAC3B;AAEA,SAAS,yBAAyB,KAAK,QAAQ;AAC7C,MAAI,QAAQ;AACZ,SAAO,oBAAoB,GAAG,EAAE,cAAc,YAAU;AACtD,WAAO,yBAAyB,KAAK,QAAQ,MAAM,EAAE,KAAK,iBAAe;AACvE,UAAI,aAAa;AACf,gBAAQ;AAAA,MACV;AACA,aAAO,mBAAmB,QAAQ,CAAC,WAAW;AAAA,IAChD,CAAC;AAAA,EACH,CAAC,EAAE,KAAK,MAAM,KAAK;AACrB;AAIA,SAAS,eAAe,KAAK;AAC3B,SAAO,SAAS,KAAK,oBAAoB;AAC3C;AAIA,SAAS,uBAAuB,KAAK;AACnC,SAAO,SAAS,KAAK,uBAAuB;AAC9C;AAIA,SAAS,oBAAoB,KAAK;AAChC,SAAO,SAAS,KAAK,oBAAoB;AAC3C;AAmBA,IAAM,SAAS;AAef,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EACtB,YAAY,QAAQ;AAClB,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,OAAO;AACL,SAAK,UAAU;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EACA,OAAO,iBAAiB;AAKtB,WAAO,IAAI,mBAAkB,IAAI,MAAM;AAAA,EACzC;AAAA,EACA,OAAO,gBAAgB;AAErB,WAAO,IAAI,mBAAkB,IAAI,MAAM;AAAA,EACzC;AACF;AAkBA,IAAM,uBAAN,MAA2B;AAAA,EACzB,YAAY,mBAAmB,YAAY;AACzC,SAAK,oBAAoB;AACzB,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,iBAAiB,aAAa;AAC5B,WAAO,KAAK,iBAAiB,WAAW,EAAE,KAAK,cAAY;AACzD,YAAM,oBAAoB,IAAI,kBAAkB,SAAS,eAAe;AACxE,eAAS,kBAAkB,kBAAkB,KAAK;AAClD,aAAO,KAAK,aAAa,aAAa,QAAQ,EAAE,KAAK,MAAM,SAAS,eAAe;AAAA,IACrF,CAAC;AAAA,EACH;AAAA,EACA,6BAA6B,aAAa;AACxC,WAAO,KAAK,iBAAiB,WAAW,EAAE,KAAK,cAAY;AACzD,aAAO,gBAAgB,cAAc,IAAI,UAAU,SAAS,0BAA0B,SAAS,SAAS,0BAA0B,WAAW,CAAC;AAAA,IAChJ,CAAC;AAAA,EACH;AAAA,EACA,yBAAyB,aAAa;AACpC,WAAO,KAAK,iBAAiB,WAAW,EAAE,KAAK,kBAAgB,aAAa,2BAA2B;AAAA,EACzG;AAAA,EACA,mBAAmB,aAAa,6BAA6B,2BAA2B;AACtF,WAAO,KAAK,iBAAiB,WAAW,EAAE,KAAK,cAAY;AACzD,eAAS,8BAA8B;AACvC,UAAI,2BAA2B;AAC7B,iBAAS,4BAA4B,0BAA0B,YAAY;AAAA,MAC7E;AACA,UAAI,8BAA8B,SAAS,6BAA6B;AACtE,iBAAS,8BAA8B;AAAA,MACzC;AACA,aAAO,KAAK,aAAa,aAAa,QAAQ;AAAA,IAChD,CAAC;AAAA,EACH;AAAA,EACA,cAAc,aAAa,YAAY;AACrC,WAAO,KAAK,eAAe,aAAa,UAAU,EAAE,KAAK,MAAM;AAC7D,aAAO,KAAK,iBAAiB,WAAW,EAAE,KAAK,cAAY;AACzD,iBAAS,eAAe;AACxB,aAAK,6BAA6B,YAAY,QAAQ;AACtD,eAAO,KAAK,aAAa,aAAa,QAAQ;AAAA,MAChD,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,aAAa,YAAY;AACxC,WAAO,KAAK,eAAe,aAAa,UAAU;AAAA,EACpD;AAAA,EACA,iBAAiB,aAAa,YAAY;AACxC,WAAO,KAAK,8BAA8B,aAAa,WAAW,QAAQ,EAAE,KAAK,MAAM,aAAa,WAAW,EAAE,OAAO,WAAW,QAAQ,CAAC,EAAE,KAAK,MAAM,KAAK,iBAAiB,WAAW,CAAC,EAAE,KAAK,cAAY;AAC5M,iBAAW,SAAS,cAAc,CAAC;AACnC,eAAS,eAAe;AACxB,aAAO,KAAK,aAAa,aAAa,QAAQ;AAAA,IAChD,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,KAAK,YAAY,iBAAiB;AAC9C,QAAIzB,SAAQ;AACZ,UAAM,WAAW,CAAC;AAClB,WAAO,aAAa,GAAG,EAAE,QAAQ,CAAC,KAAK,UAAU;AAC/C,YAAM,aAAa,aAAa,KAAK;AACrC,UAAI,WAAW,kBAAkB,cAAc,gBAAgB,IAAI,WAAW,QAAQ,MAAM,MAAM;AAChG,QAAAA;AACA,iBAAS,KAAK,KAAK,iBAAiB,KAAK,UAAU,CAAC;AAAA,MACtD;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,mBAAmB,QAAQ,QAAQ,CAAC,EAAE,KAAK,MAAMA,MAAK;AAAA,EACtE;AAAA;AAAA;AAAA;AAAA,EAIA,cAAc,KAAK,GAAG;AACpB,WAAO,aAAa,GAAG,EAAE,QAAQ,CAAC,KAAK,UAAU;AAC/C,YAAM,aAAa,aAAa,KAAK;AACrC,QAAE,UAAU;AAAA,IACd,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB,aAAa;AAC5B,WAAO,kBAAkB,WAAW,EAAE,IAAI,iBAAiB,EAAE,KAAK,cAAY;AAC5E,iBAAW,aAAa,IAAI;AAC5B,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,aAAa,aAAa,UAAU;AAClC,WAAO,kBAAkB,WAAW,EAAE,IAAI,mBAAmB,QAAQ;AAAA,EACvE;AAAA,EACA,eAAe,aAAa,YAAY;AACtC,WAAO,aAAa,WAAW,EAAE,IAAI,WAAW,KAAK,YAAY,UAAU,CAAC;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,6BAA6B,YAAY,UAAU;AACjD,QAAI,UAAU;AACd,QAAI,WAAW,WAAW,SAAS,iBAAiB;AAClD,eAAS,kBAAkB,WAAW;AACtC,gBAAU;AAAA,IACZ;AACA,QAAI,WAAW,iBAAiB,SAAS,6BAA6B;AACpE,eAAS,8BAA8B,WAAW;AAClD,gBAAU;AAAA,IACZ;AACA,WAAO;AAAA,EACT;AAAA,EACA,eAAe,aAAa;AAC1B,WAAO,KAAK,iBAAiB,WAAW,EAAE,KAAK,cAAY,SAAS,WAAW;AAAA,EACjF;AAAA,EACA,cAAc,aAAa,QAAQ;AAIjC,UAAM0B,eAAc,eAAe,MAAM;AACzC,UAAM,QAAQ,YAAY,MAAM,CAACA,cAAa,OAAO,iBAAiB,GAAG,CAACA,cAAa,OAAO,iBAAiB,CAAC;AAChH,QAAI,SAAS;AACb,WAAO,aAAa,WAAW,EAAE,QAAQ;AAAA,MACvC;AAAA,MACA,OAAO;AAAA,IACT,GAAG,CAAC,KAAK,OAAO,YAAY;AAC1B,YAAM,QAAQ,aAAa,KAAK;AAGhC,UAAI,aAAa,QAAQ,MAAM,MAAM,GAAG;AACtC,iBAAS;AACT,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,EACtB;AAAA,EACA,gBAAgB,KAAK,MAAM,UAAU;AAGnC,UAAM,WAAW,CAAC;AAClB,UAAM,QAAQ,oBAAoB,GAAG;AACrC,SAAK,QAAQ,SAAO;AAClB,YAAM,OAAO,mBAAmB,IAAI,IAAI;AACxC,eAAS,KAAK,MAAM,IAAI;AAAA,QACtB;AAAA,QACA;AAAA,MACF,CAAC,CAAC;AACF,eAAS,KAAK,KAAK,kBAAkB,aAAa,KAAK,UAAU,GAAG,CAAC;AAAA,IACvE,CAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EACA,mBAAmB,KAAK,MAAM,UAAU;AAGtC,UAAM,QAAQ,oBAAoB,GAAG;AACrC,WAAO,mBAAmB,QAAQ,MAAM,SAAO;AAC7C,YAAM,OAAO,mBAAmB,IAAI,IAAI;AACxC,aAAO,mBAAmB,QAAQ,CAAC,MAAM,OAAO,CAAC,UAAU,IAAI,CAAC,GAAG,KAAK,kBAAkB,gBAAgB,KAAK,UAAU,GAAG,CAAC,CAAC;AAAA,IAChI,CAAC;AAAA,EACH;AAAA,EACA,8BAA8B,KAAK,UAAU;AAC3C,UAAM,QAAQ,oBAAoB,GAAG;AACrC,UAAM,QAAQ,YAAY;AAAA,MAAM,CAAC,QAAQ;AAAA,MAAG,CAAC,WAAW,CAAC;AAAA;AAAA,MAAiB;AAAA;AAAA,MAAqB;AAAA,IAAI;AACnG,WAAO,MAAM,OAAO,KAAK;AAAA,EAC3B;AAAA,EACA,2BAA2B,KAAK,UAAU;AACxC,UAAM,QAAQ,YAAY;AAAA,MAAM,CAAC,QAAQ;AAAA,MAAG,CAAC,WAAW,CAAC;AAAA;AAAA,MAAiB;AAAA;AAAA,MAAqB;AAAA,IAAI;AACnG,UAAM,QAAQ,oBAAoB,GAAG;AACrC,QAAI,SAAS,eAAe;AAC5B,WAAO,MAAM,QAAQ;AAAA,MACnB;AAAA,MACA,UAAU;AAAA,IACZ,GAAG,CAAC,KAAK,GAAG,YAAY;AACtB,YAAM,OAAO,mBAAmB,IAAI,CAAC,CAAC;AACtC,YAAM,SAAS,IAAI,YAAY,IAAI;AACnC,eAAS,OAAO,IAAI,MAAM;AAAA,IAC5B,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,EACtB;AAAA,EACA,YAAY,KAAK,KAAK;AACpB,UAAM,OAAO,mBAAmB,IAAI,IAAI;AACxC,UAAM,QAAQ,YAAY;AAAA,MAAM,CAAC,IAAI;AAAA,MAAG,CAAC,mBAAmB,IAAI,CAAC;AAAA;AAAA,MAAiB;AAAA;AAAA,MAAqB;AAAA,IAAI;AAC3G,QAAI1B,SAAQ;AACZ,WAAO,oBAAoB,GAAG,EAAE,QAAQ;AAAA,MACtC,OAAO;AAAA,MACP,UAAU;AAAA,MACV;AAAA,IACF,GAAG,CAAC,CAAC,UAAU2B,KAAI,GAAG,GAAG,YAAY;AAInC,UAAI,aAAa,GAAG;AAClB,QAAA3B;AACA,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF,CAAC,EAAE,KAAK,MAAMA,SAAQ,CAAC;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,uBAAuB,aAAa,UAAU;AAC5C,WAAO,aAAa,WAAW,EAAE,IAAI,QAAQ,EAAE,KAAK,WAAS;AAC3D,UAAI,OAAO;AACT,eAAO,aAAa,KAAK;AAAA,MAC3B,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAIA,SAAS,aAAa,KAAK;AACzB,SAAO,SAAS,KAAK,aAAa;AACpC;AAIA,SAAS,kBAAkB,KAAK;AAC9B,SAAO,SAAS,KAAK,mBAAmB;AAC1C;AAIA,SAAS,oBAAoB,KAAK;AAChC,SAAO,SAAS,KAAK,qBAAqB;AAC5C;AAkBA,IAAM,iBAAiB;AAAA,EACrB,QAAQ;AAAA,EACR,0BAA0B;AAAA,EAC1B,gBAAgB;AAAA,EAChB,kBAAkB;AACpB;AACA,IAAM,0BAA0B;AAChC,IAAM,+BAA+B,KAAK,OAAO;AACjD,IAAM,YAAN,MAAM,WAAU;AAAA,EACd,YAGA,8BAEA,qBAGA,iCAAiC;AAC/B,SAAK,+BAA+B;AACpC,SAAK,sBAAsB;AAC3B,SAAK,kCAAkC;AAAA,EACzC;AAAA,EACA,OAAO,cAAc,WAAW;AAC9B,WAAO,IAAI,WAAU,WAAW,WAAU,+BAA+B,WAAU,uCAAuC;AAAA,EAC5H;AACF;AACA,UAAU,gCAAgC;AAC1C,UAAU,0CAA0C;AACpD,UAAU,UAAU,IAAI,UAAU,8BAA8B,UAAU,+BAA+B,UAAU,uCAAuC;AAC1J,UAAU,WAAW,IAAI,UAAU,yBAAyB,GAAG,CAAC;AAkBhE,IAAM,YAAY;AAClB,IAAM,+BAA+B,IAAI,OAAO;AAEhD,IAAM,sBAAsB,IAAI,KAAK;AAErC,IAAM,sBAAsB,IAAI,KAAK;AACrC,SAAS,sBAAsB,CAAC,WAAW,MAAM,GAAG,CAAC,WAAW,MAAM,GAAG;AACvE,QAAM,SAAS,oBAAoB,WAAW,SAAS;AACvD,MAAI,WAAW,GAAG;AAGhB,WAAO,oBAAoB,QAAQ,MAAM;AAAA,EAC3C,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAMA,IAAM,8BAAN,MAAkC;AAAA,EAChC,YAAY,aAAa;AACvB,SAAK,cAAc;AACnB,SAAK,SAAS,IAAI,UAAU,qBAAqB;AACjD,SAAK,gBAAgB;AAAA,EACvB;AAAA,EACA,YAAY;AACV,WAAO,EAAE,KAAK;AAAA,EAChB;AAAA,EACA,WAAW,gBAAgB;AACzB,UAAM,QAAQ,CAAC,gBAAgB,KAAK,UAAU,CAAC;AAC/C,QAAI,KAAK,OAAO,OAAO,KAAK,aAAa;AACvC,WAAK,SAAS,KAAK,OAAO,IAAI,KAAK;AAAA,IACrC,OAAO;AACL,YAAM,eAAe,KAAK,OAAO,KAAK;AACtC,UAAI,sBAAsB,OAAO,YAAY,IAAI,GAAG;AAClD,aAAK,SAAS,KAAK,OAAO,OAAO,YAAY,EAAE,IAAI,KAAK;AAAA,MAC1D;AAAA,IACF;AAAA,EACF;AAAA,EACA,IAAI,WAAW;AAOb,WAAO,KAAK,OAAO,KAAK,EAAE,CAAC;AAAA,EAC7B;AACF;AAKA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,kBAAkB,YAAY,YAAY;AACpD,SAAK,mBAAmB;AACxB,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,QAAQ;AACN,QAAI,KAAK,iBAAiB,OAAO,iCAAiC,yBAAyB;AACzF,WAAK,WAAW,mBAAmB;AAAA,IACrC;AAAA,EACF;AAAA,EACA,OAAO;AACL,QAAI,KAAK,QAAQ;AACf,WAAK,OAAO,OAAO;AACnB,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EACA,WAAW,OAAO;AAChB,aAAS,WAAW,mCAAmC,KAAK,IAAI;AAChE,SAAK,SAAS,KAAK,WAAW,kBAAkB,0BAA6D,OAAO,MAAY;AAC9H,WAAK,SAAS;AACd,UAAI;AACF,cAAM,KAAK,WAAW,eAAe,KAAK,gBAAgB;AAAA,MAC5D,SAAS,GAAG;AACV,YAAI,4BAA4B,CAAC,GAAG;AAClC,mBAAS,WAAW,wDAAwD,CAAC;AAAA,QAC/E,OAAO;AACL,gBAAM,yBAAyB,CAAC;AAAA,QAClC;AAAA,MACF;AACA,YAAM,KAAK,WAAW,mBAAmB;AAAA,IAC3C,EAAC;AAAA,EACH;AACF;AAIA,IAAM,0BAAN,MAA8B;AAAA,EAC5B,YAAY,UAAU,QAAQ;AAC5B,SAAK,WAAW;AAChB,SAAK,SAAS;AAAA,EAChB;AAAA,EACA,qBAAqB,KAAK,YAAY;AACpC,WAAO,KAAK,SAAS,uBAAuB,GAAG,EAAE,KAAK,iBAAe;AACnE,aAAO,KAAK,MAAM,aAAa,MAAQ,WAAW;AAAA,IACpD,CAAC;AAAA,EACH;AAAA,EACA,kBAAkB,KAAK,GAAG;AACxB,QAAI,MAAM,GAAG;AACX,aAAO,mBAAmB,QAAQ,eAAe,OAAO;AAAA,IAC1D;AACA,UAAM,SAAS,IAAI,4BAA4B,CAAC;AAChD,WAAO,KAAK,SAAS,cAAc,KAAK,YAAU,OAAO,WAAW,OAAO,cAAc,CAAC,EAAE,KAAK,MAAM;AACrG,aAAO,KAAK,SAAS,sCAAsC,KAAK,oBAAkB,OAAO,WAAW,cAAc,CAAC;AAAA,IACrH,CAAC,EAAE,KAAK,MAAM,OAAO,QAAQ;AAAA,EAC/B;AAAA,EACA,cAAc,KAAK,YAAY,iBAAiB;AAC9C,WAAO,KAAK,SAAS,cAAc,KAAK,YAAY,eAAe;AAAA,EACrE;AAAA,EACA,wBAAwB,KAAK,YAAY;AACvC,WAAO,KAAK,SAAS,wBAAwB,KAAK,UAAU;AAAA,EAC9D;AAAA,EACA,QAAQ,KAAK,iBAAiB;AAC5B,QAAI,KAAK,OAAO,iCAAiC,yBAAyB;AACxE,eAAS,uBAAuB,sCAAsC;AACtE,aAAO,mBAAmB,QAAQ,cAAc;AAAA,IAClD;AACA,WAAO,KAAK,aAAa,GAAG,EAAE,KAAK,eAAa;AAC9C,UAAI,YAAY,KAAK,OAAO,8BAA8B;AACxD,iBAAS,uBAAuB,0CAA0C,SAAS,4BAAiC,KAAK,OAAO,4BAA4B,EAAE;AAC9J,eAAO;AAAA,MACT,OAAO;AACL,eAAO,KAAK,qBAAqB,KAAK,eAAe;AAAA,MACvD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,aAAa,KAAK;AAChB,WAAO,KAAK,SAAS,aAAa,GAAG;AAAA,EACvC;AAAA,EACA,qBAAqB,KAAK,iBAAiB;AACzC,QAAI;AACJ,QAAI,0BAA0B;AAE9B,QAAI,kBAAkB,mBAAmB,kBAAkB;AAC3D,UAAM,UAAU,KAAK,IAAI;AACzB,WAAO,KAAK,qBAAqB,KAAK,KAAK,OAAO,mBAAmB,EAAE,KAAK,qBAAmB;AAE7F,UAAI,kBAAkB,KAAK,OAAO,iCAAiC;AACjE,iBAAS,uBAAuB,8DAAmE,KAAK,OAAO,+BAA+B,SAAc,eAAe,EAAE;AAC7K,mCAA2B,KAAK,OAAO;AAAA,MACzC,OAAO;AACL,mCAA2B;AAAA,MAC7B;AACA,yBAAmB,KAAK,IAAI;AAC5B,aAAO,KAAK,kBAAkB,KAAK,wBAAwB;AAAA,IAC7D,CAAC,EAAE,KAAK,gBAAc;AACpB,iCAA2B;AAC3B,0BAAoB,KAAK,IAAI;AAC7B,aAAO,KAAK,cAAc,KAAK,0BAA0B,eAAe;AAAA,IAC1E,CAAC,EAAE,KAAK,uBAAqB;AAC3B,uBAAiB;AACjB,yBAAmB,KAAK,IAAI;AAC5B,aAAO,KAAK,wBAAwB,KAAK,wBAAwB;AAAA,IACnE,CAAC,EAAE,KAAK,sBAAoB;AAC1B,2BAAqB,KAAK,IAAI;AAC9B,UAAI,YAAY,KAAK,SAAS,OAAO;AACnC,cAAM,OAAO;AAAA,sBAAqD,mBAAmB,OAAO;AAAA,kCAA6C,wBAAwB,OAAY,oBAAoB,gBAAgB;AAAA,WAAsB,cAAc,eAAoB,mBAAmB,iBAAiB;AAAA,WAAsB,gBAAgB,iBAAsB,qBAAqB,gBAAgB;AAAA,kBAA4B,qBAAqB,OAAO;AACtc,iBAAS,uBAAuB,IAAI;AAAA,MACtC;AACA,aAAO,mBAAmB,QAAQ;AAAA,QAChC,QAAQ;AAAA,QACR,0BAA0B;AAAA,QAC1B;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;AACA,SAAS,uBAAuB,UAAU,QAAQ;AAChD,SAAO,IAAI,wBAAwB,UAAU,MAAM;AACrD;AAmBA,IAAM,2BAAN,MAA+B;AAAA,EAC7B,YAAY,IAAI,QAAQ;AACtB,SAAK,KAAK;AACV,SAAK,mBAAmB,uBAAuB,MAAM,MAAM;AAAA,EAC7D;AAAA,EACA,uBAAuB,KAAK;AAC1B,UAAM,kBAAkB,KAAK,sBAAsB,GAAG;AACtD,UAAM,qBAAqB,KAAK,GAAG,eAAe,EAAE,eAAe,GAAG;AACtE,WAAO,mBAAmB,KAAK,iBAAe,gBAAgB,KAAK,cAAY,cAAc,QAAQ,CAAC;AAAA,EACxG;AAAA,EACA,sBAAsB,KAAK;AACzB,QAAI,gBAAgB;AACpB,WAAO,KAAK,sCAAsC,KAAK,OAAK;AAC1D;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,aAAa;AAAA,EAC7B;AAAA,EACA,cAAc,KAAK,GAAG;AACpB,WAAO,KAAK,GAAG,eAAe,EAAE,cAAc,KAAK,CAAC;AAAA,EACtD;AAAA,EACA,sCAAsC,KAAK,GAAG;AAC5C,WAAO,KAAK,wBAAwB,KAAK,CAAC,QAAQ,mBAAmB,EAAE,cAAc,CAAC;AAAA,EACxF;AAAA,EACA,aAAa,KAAK,UAAU,KAAK;AAC/B,WAAO,iBAAiB,KAAK,GAAG;AAAA,EAClC;AAAA,EACA,gBAAgB,KAAK,UAAU,KAAK;AAClC,WAAO,iBAAiB,KAAK,GAAG;AAAA,EAClC;AAAA,EACA,cAAc,KAAK,YAAY,iBAAiB;AAC9C,WAAO,KAAK,GAAG,eAAe,EAAE,cAAc,KAAK,YAAY,eAAe;AAAA,EAChF;AAAA,EACA,wBAAwB,KAAK,KAAK;AAChC,WAAO,iBAAiB,KAAK,GAAG;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,KAAK,QAAQ;AACpB,WAAO,yBAAyB,KAAK,MAAM;AAAA,EAC7C;AAAA,EACA,wBAAwB,KAAK,YAAY;AACvC,UAAM,gBAAgB,KAAK,GAAG,uBAAuB;AACrD,UAAM,eAAe,cAAc,gBAAgB;AACnD,UAAM,WAAW,CAAC;AAClB,QAAI,gBAAgB;AACpB,UAAM,YAAY,KAAK,wBAAwB,KAAK,CAAC,QAAQ,mBAAmB;AAC9E,UAAI,kBAAkB,YAAY;AAChC,cAAM,IAAI,KAAK,SAAS,KAAK,MAAM,EAAE,KAAK,cAAY;AACpD,cAAI,CAAC,UAAU;AACb;AAGA,mBAAO,aAAa,SAAS,KAAK,MAAM,EAAE,KAAK,MAAM;AACnD,2BAAa,YAAY,QAAQ,gBAAgB,IAAI,CAAC;AACtD,qBAAO,oBAAoB,GAAG,EAAE,OAAO,cAAc,MAAM,CAAC;AAAA,YAC9D,CAAC;AAAA,UACH;AAAA,QACF,CAAC;AACD,iBAAS,KAAK,CAAC;AAAA,MACjB;AAAA,IACF,CAAC;AACD,WAAO,UAAU,KAAK,MAAM,mBAAmB,QAAQ,QAAQ,CAAC,EAAE,KAAK,MAAM,aAAa,MAAM,GAAG,CAAC,EAAE,KAAK,MAAM,aAAa;AAAA,EAChI;AAAA,EACA,aAAa,KAAK,YAAY;AAC5B,UAAM,UAAU,WAAW,mBAAmB,IAAI,qBAAqB;AACvE,WAAO,KAAK,GAAG,eAAe,EAAE,iBAAiB,KAAK,OAAO;AAAA,EAC/D;AAAA,EACA,oBAAoB,KAAK,KAAK;AAC5B,WAAO,iBAAiB,KAAK,GAAG;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBAAwB,KAAK,GAAG;AAC9B,UAAM,QAAQ,oBAAoB,GAAG;AACrC,QAAI,eAAe,eAAe;AAClC,QAAI;AACJ,WAAO,MAAM,QAAQ;AAAA,MACnB,OAAO;AAAA,IACT,GAAG,CAAC,CAAC,UAAU,MAAM,GAAG;AAAA,MACtB;AAAA,MACA;AAAA,IACF,MAAM;AACJ,UAAI,aAAa,GAAG;AAGlB,YAAI,iBAAiB,eAAe,SAAS;AAC3C,YAAE,IAAI,YAAY,mBAAmB,QAAQ,CAAC,GAAG,YAAY;AAAA,QAC/D;AAKA,uBAAe;AACf,mBAAW;AAAA,MACb,OAAO;AAGL,uBAAe,eAAe;AAAA,MAChC;AAAA,IACF,CAAC,EAAE,KAAK,MAAM;AAIZ,UAAI,iBAAiB,eAAe,SAAS;AAC3C,UAAE,IAAI,YAAY,mBAAmB,QAAQ,CAAC,GAAG,YAAY;AAAA,MAC/D;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,aAAa,KAAK;AAChB,WAAO,KAAK,GAAG,uBAAuB,EAAE,QAAQ,GAAG;AAAA,EACrD;AACF;AACA,SAAS,cAAc,KAAK;AAC1B,SAAO,CAAC,GAAG,mBAAmB,IAAI,IAAI,CAAC;AACzC;AAKA,SAAS,YAAY,KAAK,gBAAgB;AACxC,SAAO;AAAA,IACL,UAAU;AAAA,IACV,MAAM,mBAAmB,IAAI,IAAI;AAAA,IACjC;AAAA,EACF;AACF;AACA,SAAS,iBAAiB,KAAK,KAAK;AAClC,SAAO,oBAAoB,GAAG,EAAE,IAAI,YAAY,KAAK,IAAI,qBAAqB,CAAC;AACjF;AAgCA,IAAM,6BAAN,MAAiC;AAAA,EAC/B,cAAc;AAEZ,SAAK,UAAU,IAAI,UAAU,SAAO,IAAI,SAAS,GAAG,CAAC,GAAG,MAAM,EAAE,QAAQ,CAAC,CAAC;AAC1E,SAAK,iBAAiB;AAAA,EACxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,UAAU;AACjB,SAAK,iBAAiB;AACtB,SAAK,QAAQ,IAAI,SAAS,KAAK,QAAQ;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,KAAK,UAAU;AACzB,SAAK,iBAAiB;AACtB,SAAK,QAAQ,IAAI,KAAK,gBAAgB,mBAAmB,GAAG,EAAE,YAAY,QAAQ,CAAC;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,SAAS,aAAa,aAAa;AACjC,SAAK,iBAAiB;AACtB,UAAM,gBAAgB,KAAK,QAAQ,IAAI,WAAW;AAClD,QAAI,kBAAkB,QAAW;AAC/B,aAAO,mBAAmB,QAAQ,aAAa;AAAA,IACjD,OAAO;AACL,aAAO,KAAK,aAAa,aAAa,WAAW;AAAA,IACnD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,WAAW,aAAa,cAAc;AACpC,WAAO,KAAK,gBAAgB,aAAa,YAAY;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa;AACjB,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,WAAO,KAAK,aAAa,WAAW;AAAA,EACtC;AAAA;AAAA,EAEA,mBAAmB;AAAA,EAAC;AACtB;AAsBA,IAAM,mCAAN,MAAuC;AAAA,EACrC,YAAY,YAAY;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,gBAAgB,cAAc;AAC5B,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,aAAa,KAAKI,MAAK;AAC9B,UAAM,gBAAgB,qBAAqB,WAAW;AACtD,WAAO,cAAc,IAAIA,IAAG;AAAA,EAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,aAAa,aAAa,UAAU;AAC9C,UAAM,QAAQ,qBAAqB,WAAW;AAC9C,WAAO,MAAM,OAAO,cAAc,aAAa,QAAQ,CAAC;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,aAAa,WAAW;AACrC,WAAO,KAAK,YAAY,WAAW,EAAE,KAAK,cAAY;AACpD,eAAS,YAAY;AACrB,aAAO,KAAK,YAAY,aAAa,QAAQ;AAAA,IAC/C,CAAC;AAAA,EACH;AAAA,EACA,SAAS,aAAa,aAAa;AACjC,QAAIA,OAAM,gBAAgB,mBAAmB,WAAW;AACxD,WAAO,qBAAqB,WAAW,EAAE,QAAQ;AAAA,MAC/C,OAAO;AAAA,MACP,OAAO,YAAY,KAAK,MAAM,WAAW,CAAC;AAAA,IAC5C,GAAG,CAAC,GAAG,gBAAgB;AACrB,MAAAA,OAAM,KAAK,oBAAoB,aAAa,WAAW;AAAA,IACzD,CAAC,EAAE,KAAK,MAAMA,IAAG;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,aAAa,aAAa;AACtC,QAAI,SAAS;AAAA,MACX,MAAM;AAAA,MACN,UAAU,gBAAgB,mBAAmB,WAAW;AAAA,IAC1D;AACA,WAAO,qBAAqB,WAAW,EAAE,QAAQ;AAAA,MAC/C,OAAO;AAAA,MACP,OAAO,YAAY,KAAK,MAAM,WAAW,CAAC;AAAA,IAC5C,GAAG,CAAC,GAAG,gBAAgB;AACrB,eAAS;AAAA,QACP,UAAU,KAAK,oBAAoB,aAAa,WAAW;AAAA,QAC3D,MAAM,eAAe,WAAW;AAAA,MAClC;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,EACtB;AAAA,EACA,WAAW,aAAa,cAAc;AACpC,QAAI,UAAU,mBAAmB;AACjC,WAAO,KAAK,eAAe,aAAa,cAAc,CAAC,KAAK,gBAAgB;AAC1E,YAAMA,OAAM,KAAK,oBAAoB,KAAK,WAAW;AACrD,gBAAU,QAAQ,OAAO,KAAKA,IAAG;AAAA,IACnC,CAAC,EAAE,KAAK,MAAM,OAAO;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,aAAa,cAAc;AACzC,QAAI,UAAU,mBAAmB;AACjC,QAAI,UAAU,IAAI,UAAU,YAAY,UAAU;AAClD,WAAO,KAAK,eAAe,aAAa,cAAc,CAAC,KAAK,gBAAgB;AAC1E,YAAMA,OAAM,KAAK,oBAAoB,KAAK,WAAW;AACrD,gBAAU,QAAQ,OAAO,KAAKA,IAAG;AACjC,gBAAU,QAAQ,OAAO,KAAK,eAAe,WAAW,CAAC;AAAA,IAC3D,CAAC,EAAE,KAAK,MAAM;AACZ,aAAO;AAAA,QACL,WAAW;AAAA,QACX;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,eAAe,aAAa,cAAc,UAAU;AAClD,QAAI,aAAa,QAAQ,GAAG;AAC1B,aAAO,mBAAmB,QAAQ;AAAA,IACpC;AACA,QAAI,aAAa,IAAI,UAAU,eAAe;AAC9C,iBAAa,QAAQ,OAAK,aAAa,WAAW,IAAI,CAAC,CAAC;AACxD,UAAM,QAAQ,YAAY,MAAM,MAAM,WAAW,MAAM,CAAC,GAAG,MAAM,WAAW,KAAK,CAAC,CAAC;AACnF,UAAM,UAAU,WAAW,YAAY;AACvC,QAAI,UAAU,QAAQ,QAAQ;AAC9B,WAAO,qBAAqB,WAAW,EAAE,QAAQ;AAAA,MAC/C,OAAO;AAAA,MACP;AAAA,IACF,GAAG,CAAC,GAAG,aAAa,YAAY;AAC9B,YAAM,eAAe,YAAY,aAAa,CAAC,GAAG,YAAY,YAAY,YAAY,iBAAiB,YAAY,UAAU,CAAC;AAE9H,aAAO,WAAW,gBAAgB,SAAS,YAAY,IAAI,GAAG;AAC5D,iBAAS,SAAS,IAAI;AACtB,kBAAU,QAAQ,QAAQ;AAAA,MAC5B;AACA,UAAI,WAAW,QAAQ,QAAQ,YAAY,GAAG;AAE5C,iBAAS,SAAS,WAAW;AAC7B,kBAAU,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,IAAI;AAAA,MACpD;AAEA,UAAI,SAAS;AACX,gBAAQ,KAAK,MAAM,OAAO,CAAC;AAAA,MAC7B,OAAO;AACL,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF,CAAC,EAAE,KAAK,MAAM;AAGZ,aAAO,SAAS;AACd,iBAAS,SAAS,IAAI;AACtB,kBAAU,QAAQ,QAAQ,IAAI,QAAQ,QAAQ,IAAI;AAAA,MACpD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,0BAA0B,aAAaK,QAAO,QAAQ,aAAa,SAAS;AAC1E,UAAMX,cAAaW,OAAM;AACzB,UAAM,WAAW,CAACX,YAAW,QAAQ,EAAE,QAAQ,GAAGA,YAAW,YAAY,GAAG,iBAAiB,OAAO,QAAQ,GAAG,OAAO,YAAY,KAAK,QAAQ,IAAI,KAAK,OAAO,YAAY,KAAK,YAAY,CAAC;AAC7L,UAAM,SAAS,CAACA,YAAW,QAAQ,EAAE,QAAQ,GAAGA,YAAW,YAAY,GAAG,CAAC,OAAO,kBAAkB,OAAO,gBAAgB,GAAG,EAAE;AAChI,WAAO,qBAAqB,WAAW,EAAE,QAAQ,YAAY,MAAM,UAAU,QAAQ,IAAI,CAAC,EAAE,KAAK,kBAAgB;AAC/G,kBAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,2BAA2B,aAAa,MAAM;AACxG,UAAI,UAAU,mBAAmB;AACjC,iBAAW,eAAe,cAAc;AACtC,cAAM,WAAW,KAAK,oBAAoB,YAAY,aAAa,YAAY,WAAW,OAAO,YAAY,iBAAiB,YAAY,UAAU,CAAC,GAAG,WAAW;AACnK,YAAI,SAAS,gBAAgB,MAAM,aAAaW,QAAO,QAAQ,KAAK,YAAY,IAAI,SAAS,GAAG,IAAI;AAElG,oBAAU,QAAQ,OAAO,SAAS,KAAK,QAAQ;AAAA,QACjD;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,0BAA0B,aAAaZ,kBAAiB,QAAQS,QAAO;AACrE,QAAI,UAAU,mBAAmB;AACjC,UAAM,WAAW,qBAAqBT,kBAAiB,MAAM;AAC7D,UAAM,SAAS,qBAAqBA,kBAAiB,YAAY,IAAI,CAAC;AACtE,WAAO,qBAAqB,WAAW,EAAE,QAAQ;AAAA,MAC/C,OAAO;AAAA,MACP,OAAO,YAAY,MAAM,UAAU,QAAQ,IAAI;AAAA,IACjD,GAAG,CAAC,GAAG,aAAa,YAAY;AAC9B,YAAM,WAAW,KAAK,oBAAoB,YAAY,aAAa,YAAY,WAAW,OAAO,YAAY,iBAAiB,YAAY,UAAU,CAAC,GAAG,WAAW;AACnK,gBAAU,QAAQ,OAAO,SAAS,KAAK,QAAQ;AAC/C,UAAI,QAAQ,SAASS,QAAO;AAC1B,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,OAAO;AAAA,EACvB;AAAA,EACA,gBAAgB,SAAS;AACvB,WAAO,IAAI,oCAAoC,MAAM,CAAC,CAAC,WAAW,QAAQ,aAAa;AAAA,EACzF;AAAA,EACA,QAAQ,KAAK;AACX,WAAO,KAAK,YAAY,GAAG,EAAE,KAAK,cAAY,SAAS,QAAQ;AAAA,EACjE;AAAA,EACA,YAAY,KAAK;AACf,WAAO,oBAAoB,GAAG,EAAE,IAAI,yBAAyB,EAAE,KAAK,cAAY;AAC9E,iBAAW,CAAC,CAAC,QAAQ;AACrB,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,YAAY,KAAK,UAAU;AACzB,WAAO,oBAAoB,GAAG,EAAE,IAAI,2BAA2B,QAAQ;AAAA,EACzE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,aAAa,aAAa;AAC5C,QAAI,aAAa;AACf,YAAMF,OAAM,qBAAqB,KAAK,YAAY,WAAW;AAG7D,YAAM,oBAAoBA,KAAI,aAAa,KAAKA,KAAI,QAAQ,QAAQ,gBAAgB,IAAI,CAAC;AACzF,UAAI,CAAC,mBAAmB;AACtB,eAAOA;AAAA,MACT;AAAA,IACF;AACA,WAAO,gBAAgB,mBAAmB,WAAW;AAAA,EACvD;AACF;AAEA,SAAS,gCAAgC,YAAY;AACnD,SAAO,IAAI,iCAAiC,UAAU;AACxD;AAQA,IAAM,sCAAN,cAAkD,2BAA2B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAM3E,YAAY,eAAe,eAAe;AACxC,UAAM;AACN,SAAK,gBAAgB;AACrB,SAAK,gBAAgB;AAGrB,SAAK,iBAAiB,IAAI,UAAU,SAAO,IAAI,SAAS,GAAG,CAAC,GAAG,MAAM,EAAE,QAAQ,CAAC,CAAC;AAAA,EACnF;AAAA,EACA,aAAa,aAAa;AACxB,UAAM,WAAW,CAAC;AAClB,QAAI,YAAY;AAChB,QAAI,oBAAoB,IAAI,UAAU,CAAC,GAAG,MAAM,oBAAoB,EAAE,gBAAgB,GAAG,EAAE,gBAAgB,CAAC,CAAC;AAC7G,SAAK,QAAQ,QAAQ,CAAC,KAAK,mBAAmB;AAC5C,YAAM,cAAc,KAAK,eAAe,IAAI,GAAG;AAC/C,eAAS,KAAK,KAAK,cAAc,YAAY,aAAa,KAAK,YAAY,QAAQ,CAAC;AACpF,UAAI,eAAe,gBAAgB,GAAG;AACpC,cAAMA,OAAM,mBAAmB,KAAK,cAAc,YAAY,cAAc;AAC5E,4BAAoB,kBAAkB,IAAI,IAAI,KAAK,QAAQ,CAAC;AAC5D,cAAM,OAAO,eAAeA,IAAG;AAC/B,qBAAa,OAAO,YAAY;AAChC,iBAAS,KAAK,KAAK,cAAc,SAAS,aAAa,KAAKA,IAAG,CAAC;AAAA,MAClE,OAAO;AACL,qBAAa,YAAY;AACzB,YAAI,KAAK,eAAe;AAKtB,gBAAM,aAAa,mBAAmB,KAAK,cAAc,YAAY,eAAe,oBAAoB,gBAAgB,IAAI,CAAC,CAAC;AAC9H,mBAAS,KAAK,KAAK,cAAc,SAAS,aAAa,KAAK,UAAU,CAAC;AAAA,QACzE;AAAA,MACF;AAAA,IACF,CAAC;AACD,sBAAkB,QAAQ,YAAU;AAClC,eAAS,KAAK,KAAK,cAAc,aAAa,2BAA2B,aAAa,MAAM,CAAC;AAAA,IAC/F,CAAC;AACD,aAAS,KAAK,KAAK,cAAc,eAAe,aAAa,SAAS,CAAC;AACvE,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EACA,aAAa,aAAa,aAAa;AAErC,WAAO,KAAK,cAAc,cAAc,aAAa,WAAW,EAAE,KAAK,eAAa;AAClF,WAAK,eAAe,IAAI,aAAa;AAAA,QACnC,MAAM,UAAU;AAAA,QAChB,UAAU,UAAU,SAAS;AAAA,MAC/B,CAAC;AACD,aAAO,UAAU;AAAA,IACnB,CAAC;AAAA,EACH;AAAA,EACA,gBAAgB,aAAa,cAAc;AAGzC,WAAO,KAAK,cAAc,gBAAgB,aAAa,YAAY,EAAE,KAAK,CAAC;AAAA,MACzE;AAAA,MACA;AAAA,IACF,MAAM;AAIJ,cAAQ,QAAQ,CAAC,aAAa,SAAS;AACrC,aAAK,eAAe,IAAI,aAAa;AAAA,UACnC;AAAA,UACA,UAAU,UAAU,IAAI,WAAW,EAAE;AAAA,QACvC,CAAC;AAAA,MACH,CAAC;AACD,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;AACA,SAAS,oBAAoB,KAAK;AAChC,SAAO,SAAS,KAAK,2BAA2B;AAClD;AAIA,SAAS,qBAAqB,KAAK;AACjC,SAAO,SAAS,KAAK,qBAAqB;AAC5C;AAKA,SAAS,MAAM,aAAa;AAC1B,QAAM,OAAO,YAAY,KAAK,QAAQ;AACtC,SAAO;AAAA;AAAA,IAAkB,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC;AAAA;AAAA,IAAsB,KAAK,KAAK,SAAS,CAAC;AAAA;AAAA,IAAoB,KAAK,KAAK,SAAS,CAAC;AAAA,EAAC;AAC3I;AAKA,SAAS,cAAc,aAAa,UAAU;AAC5C,QAAM,OAAO,YAAY,KAAK,QAAQ;AACtC,SAAO;AAAA;AAAA,IAAkB,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC;AAAA;AAAA,IAAsB,KAAK,KAAK,SAAS,CAAC;AAAA,IAAG,iBAAiB,QAAQ;AAAA;AAAA,IAAoB,KAAK,KAAK,SAAS,CAAC;AAAA,EAAC;AACvK;AAKA,SAAS,qBAAqBP,kBAAiB,QAAQ;AACrD,QAAM,OAAO,OAAO,YAAY,KAAK,QAAQ;AAC7C,SAAO;AAAA;AAAA,IAAoBA;AAAA,IAAiB,iBAAiB,OAAO,QAAQ;AAAA;AAAA,IAAoB,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC;AAAA;AAAA,IAAoB,KAAK,SAAS,IAAI,KAAK,KAAK,SAAS,CAAC,IAAI;AAAA,EAAE;AAC/L;AAQA,SAAS,gBAAgB,GAAG,GAAG;AAC7B,QAAM,OAAO,EAAE,KAAK,QAAQ;AAC5B,QAAM,QAAQ,EAAE,KAAK,QAAQ;AAE7B,MAAI,MAAM;AACV,WAAS,IAAI,GAAG,IAAI,KAAK,SAAS,KAAK,IAAI,MAAM,SAAS,GAAG,EAAE,GAAG;AAChE,UAAM,oBAAoB,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC;AAC3C,QAAI,KAAK;AACP,aAAO;AAAA,IACT;AAAA,EACF;AACA,QAAM,oBAAoB,KAAK,QAAQ,MAAM,MAAM;AACnD,MAAI,KAAK;AACP,WAAO;AAAA,EACT;AACA,QAAM,oBAAoB,KAAK,KAAK,SAAS,CAAC,GAAG,MAAM,MAAM,SAAS,CAAC,CAAC;AACxE,MAAI,KAAK;AACP,WAAO;AAAA,EACT;AACA,SAAO,oBAAoB,KAAK,KAAK,SAAS,CAAC,GAAG,MAAM,MAAM,SAAS,CAAC,CAAC;AAC3E;AA2CA,IAAM,iBAAiB;AAsBvB,IAAM,oBAAN,MAAwB;AAAA,EACtB,YAAY,mBAOZ,eAAe;AACb,SAAK,oBAAoB;AACzB,SAAK,gBAAgB;AAAA,EACvB;AACF;AAwBA,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,qBAAqB,eAAe,sBAAsB,cAAc;AAClF,SAAK,sBAAsB;AAC3B,SAAK,gBAAgB;AACrB,SAAK,uBAAuB;AAC5B,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,aAAa,KAAK;AAC5B,QAAI,UAAU;AACd,WAAO,KAAK,qBAAqB,WAAW,aAAa,GAAG,EAAE,KAAK,WAAS;AAC1E,gBAAU;AACV,aAAO,KAAK,oBAAoB,SAAS,aAAa,GAAG;AAAA,IAC3D,CAAC,EAAE,KAAK,cAAY;AAClB,UAAI,YAAY,MAAM;AACpB,iCAAyB,QAAQ,UAAU,UAAU,UAAU,MAAM,GAAG,UAAU,IAAI,CAAC;AAAA,MACzF;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAa,aAAa,MAAM;AAC9B,WAAO,KAAK,oBAAoB,WAAW,aAAa,IAAI,EAAE,KAAK,UAAQ,KAAK,wBAAwB,aAAa,MAAM,eAAe,CAAC,EAAE,KAAK,MAAM,IAAI,CAAC;AAAA,EAC/J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,wBAAwB,aAAa,MAAM,wBAAwB,eAAe,GAAG;AACnF,UAAM,WAAW,cAAc;AAC/B,WAAO,KAAK,iBAAiB,aAAa,UAAU,IAAI,EAAE,KAAK,MAAM;AACnE,aAAO,KAAK,aAAa,aAAa,MAAM,UAAU,qBAAqB,EAAE,KAAK,wBAAsB;AACtG,YAAI,SAAS,YAAY;AACzB,2BAAmB,QAAQ,CAAC,aAAa,sBAAsB;AAC7D,mBAAS,OAAO,OAAO,aAAa,kBAAkB,iBAAiB;AAAA,QACzE,CAAC;AACD,eAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBAAsB,aAAa,MAAM;AACvC,UAAM,WAAW,cAAc;AAC/B,WAAO,KAAK,iBAAiB,aAAa,UAAU,IAAI,EAAE,KAAK,MAAM,KAAK,aAAa,aAAa,MAAM,UAAU,eAAe,CAAC,CAAC;AAAA,EACvI;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,aAAa,UAAU,MAAM;AAC5C,UAAM,kBAAkB,CAAC;AACzB,SAAK,QAAQ,SAAO;AAClB,UAAI,CAAC,SAAS,IAAI,GAAG,GAAG;AACtB,wBAAgB,KAAK,GAAG;AAAA,MAC1B;AAAA,IACF,CAAC;AACD,WAAO,KAAK,qBAAqB,YAAY,aAAa,eAAe,EAAE,KAAK,YAAU;AACxF,aAAO,QAAQ,CAAC,KAAK,QAAQ;AAC3B,iBAAS,IAAI,KAAK,GAAG;AAAA,MACvB,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,aAAa,aAAa,MAAM,UAAU,uBAAuB;AAC/D,QAAI,uBAAuB,mBAAmB;AAC9C,UAAM,gBAAgB,kBAAkB;AACxC,UAAM,UAAU,wBAAwB;AACxC,SAAK,QAAQ,CAAC,GAAGO,SAAQ;AACvB,YAAM,UAAU,SAAS,IAAIA,KAAI,GAAG;AAQpC,UAAI,sBAAsB,IAAIA,KAAI,GAAG,MAAM,YAAY,UAAa,QAAQ,oBAAoB,gBAAgB;AAC9G,+BAAuB,qBAAqB,OAAOA,KAAI,KAAKA,IAAG;AAAA,MACjE,WAAW,YAAY,QAAW;AAChC,sBAAc,IAAIA,KAAI,KAAK,QAAQ,SAAS,aAAa,CAAC;AAC1D,iCAAyB,QAAQ,UAAUA,MAAK,QAAQ,SAAS,aAAa,GAAG,UAAU,IAAI,CAAC;AAAA,MAClG,OAAO;AAGL,sBAAc,IAAIA,KAAI,KAAK,UAAU,MAAM,CAAC;AAAA,MAC9C;AAAA,IACF,CAAC;AACD,WAAO,KAAK,2BAA2B,aAAa,oBAAoB,EAAE,KAAK,wBAAsB;AACnG,yBAAmB,QAAQ,CAAC,aAAa,SAAS,cAAc,IAAI,aAAa,IAAI,CAAC;AACtF,WAAK,QAAQ,CAAC,aAAa,aAAa;AACtC,YAAI;AACJ,eAAO,QAAQ,IAAI,aAAa,IAAI,kBAAkB,WAAW,KAAK,cAAc,IAAI,WAAW,OAAO,QAAQ,OAAO,SAAS,KAAK,IAAI,CAAC;AAAA,MAC9I,CAAC;AACD,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,2BAA2B,aAAa,MAAM;AAC5C,UAAM,QAAQ,kBAAkB;AAEhC,QAAI,qBAAqB,IAAI,UAAU,CAAC,MAAM,SAAS,OAAO,IAAI;AAClE,QAAI,YAAY,eAAe;AAC/B,WAAO,KAAK,cAAc,2CAA2C,aAAa,IAAI,EAAE,KAAK,aAAW;AACtG,iBAAW,SAAS,SAAS;AAC3B,cAAM,KAAK,EAAE,QAAQ,SAAO;AAC1B,gBAAM,UAAU,KAAK,IAAI,GAAG;AAC5B,cAAI,YAAY,MAAM;AACpB;AAAA,UACF;AACA,cAAI,OAAO,MAAM,IAAI,GAAG,KAAK,UAAU,MAAM;AAC7C,iBAAO,MAAM,iBAAiB,SAAS,IAAI;AAC3C,gBAAM,IAAI,KAAK,IAAI;AACnB,gBAAM,UAAU,mBAAmB,IAAI,MAAM,OAAO,KAAK,eAAe,GAAG,IAAI,GAAG;AAClF,+BAAqB,mBAAmB,OAAO,MAAM,SAAS,MAAM;AAAA,QACtE,CAAC;AAAA,MACH;AAAA,IACF,CAAC,EAAE,KAAK,MAAM;AACZ,YAAM,WAAW,CAAC;AAGlB,YAAM,OAAO,mBAAmB,mBAAmB;AACnD,aAAO,KAAK,QAAQ,GAAG;AACrB,cAAM,QAAQ,KAAK,QAAQ;AAC3B,cAAM,UAAU,MAAM;AACtB,cAAM,OAAO,MAAM;AACnB,cAAM,WAAW,eAAe;AAChC,aAAK,QAAQ,SAAO;AAClB,cAAI,CAAC,UAAU,IAAI,GAAG,GAAG;AACvB,kBAAM,kBAAkB,yBAAyB,KAAK,IAAI,GAAG,GAAG,MAAM,IAAI,GAAG,CAAC;AAC9E,gBAAI,oBAAoB,MAAM;AAC5B,uBAAS,IAAI,KAAK,eAAe;AAAA,YACnC;AACA,wBAAY,UAAU,IAAI,GAAG;AAAA,UAC/B;AAAA,QACF,CAAC;AACD,iBAAS,KAAK,KAAK,qBAAqB,aAAa,aAAa,SAAS,QAAQ,CAAC;AAAA,MACtF;AACA,aAAO,mBAAmB,QAAQ,QAAQ;AAAA,IAC5C,CAAC,EAAE,KAAK,MAAM,KAAK;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,0CAA0C,aAAa,cAAc;AACnE,WAAO,KAAK,oBAAoB,WAAW,aAAa,YAAY,EAAE,KAAK,UAAQ,KAAK,2BAA2B,aAAa,IAAI,CAAC;AAAA,EACvI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,0BAA0B,aAAaK,QAAO,QAAQ,SAAS;AAC7D,QAAI,kBAAkBA,MAAK,GAAG;AAC5B,aAAO,KAAK,kCAAkC,aAAaA,OAAM,IAAI;AAAA,IACvE,WAAW,uBAAuBA,MAAK,GAAG;AACxC,aAAO,KAAK,yCAAyC,aAAaA,QAAO,QAAQ,OAAO;AAAA,IAC1F,OAAO;AACL,aAAO,KAAK,oCAAoC,aAAaA,QAAO,QAAQ,OAAO;AAAA,IACrF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAgBA,iBAAiB,aAAaZ,kBAAiB,QAAQG,QAAO;AAC5D,WAAO,KAAK,oBAAoB,0BAA0B,aAAaH,kBAAiB,QAAQG,MAAK,EAAE,KAAK,kBAAgB;AAC1H,YAAM,kBAAkBA,SAAQ,aAAa,OAAO,IAAI,KAAK,qBAAqB,8BAA8B,aAAaH,kBAAiB,OAAO,gBAAgBG,SAAQ,aAAa,IAAI,IAAI,mBAAmB,QAAQ,cAAc,CAAC;AAK5O,UAAI,iBAAiB;AACrB,UAAI,eAAe;AACnB,aAAO,gBAAgB,KAAK,cAAY;AACtC,eAAO,mBAAmB,QAAQ,UAAU,CAAC,KAAK,YAAY;AAC5D,cAAI,iBAAiB,QAAQ,gBAAgB;AAC3C,6BAAiB,QAAQ;AAAA,UAC3B;AACA,cAAI,aAAa,IAAI,GAAG,GAAG;AACzB,mBAAO,mBAAmB,QAAQ;AAAA,UACpC;AACA,iBAAO,KAAK,oBAAoB,SAAS,aAAa,GAAG,EAAE,KAAK,CAAAI,SAAO;AACrE,2BAAe,aAAa,OAAO,KAAKA,IAAG;AAAA,UAC7C,CAAC;AAAA,QACH,CAAC,EAAE,KAAK,MAAM,KAAK,iBAAiB,aAAa,UAAU,YAAY,CAAC,EAAE,KAAK,MAAM,KAAK,aAAa,aAAa,cAAc,UAAU,eAAe,CAAC,CAAC,EAAE,KAAK,gBAAc;AAAA,UAChL,SAAS;AAAA,UACT,SAAS,yCAAyC,SAAS;AAAA,QAC7D,EAAE;AAAA,MACJ,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,kCAAkC,aAAa,SAAS;AAEtD,WAAO,KAAK,YAAY,aAAa,IAAI,YAAY,OAAO,CAAC,EAAE,KAAK,cAAY;AAC9E,UAAI,SAAS,YAAY;AACzB,UAAI,SAAS,gBAAgB,GAAG;AAC9B,iBAAS,OAAO,OAAO,SAAS,KAAK,QAAQ;AAAA,MAC/C;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,yCAAyC,aAAaK,QAAO,QAAQ,SAAS;AAC5E,UAAM,eAAeA,OAAM;AAC3B,QAAI,UAAU,YAAY;AAC1B,WAAO,KAAK,aAAa,qBAAqB,aAAa,YAAY,EAAE,KAAK,aAAW;AAGvF,aAAO,mBAAmB,QAAQ,SAAS,YAAU;AACnD,cAAM,kBAAkB,wBAAwBA,QAAO,OAAO,MAAM,YAAY,CAAC;AACjF,eAAO,KAAK,oCAAoC,aAAa,iBAAiB,QAAQ,OAAO,EAAE,KAAK,OAAK;AACvG,YAAE,QAAQ,CAAC,KAAKL,SAAQ;AACtB,sBAAU,QAAQ,OAAO,KAAKA,IAAG;AAAA,UACnC,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC,EAAE,KAAK,MAAM,OAAO;AAAA,IACvB,CAAC;AAAA,EACH;AAAA,EACA,oCAAoC,aAAaK,QAAO,QAAQ,SAAS;AAEvE,QAAI;AACJ,WAAO,KAAK,qBAAqB,yBAAyB,aAAaA,OAAM,MAAM,OAAO,cAAc,EAAE,KAAK,YAAU;AACvH,iBAAW;AACX,aAAO,KAAK,oBAAoB,0BAA0B,aAAaA,QAAO,QAAQ,UAAU,OAAO;AAAA,IACzG,CAAC,EAAE,KAAK,qBAAmB;AAGzB,eAAS,QAAQ,CAAC,GAAG,YAAY;AAC/B,cAAM,MAAM,QAAQ,OAAO;AAC3B,YAAI,gBAAgB,IAAI,GAAG,MAAM,MAAM;AACrC,4BAAkB,gBAAgB,OAAO,KAAK,gBAAgB,mBAAmB,GAAG,CAAC;AAAA,QACvF;AAAA,MACF,CAAC;AAED,UAAI,UAAU,YAAY;AAC1B,sBAAgB,QAAQ,CAAC,KAAK,aAAa;AACzC,cAAM,UAAU,SAAS,IAAI,GAAG;AAChC,YAAI,YAAY,QAAW;AACzB,mCAAyB,QAAQ,UAAU,UAAU,UAAU,MAAM,GAAG,UAAU,IAAI,CAAC;AAAA,QACzF;AAEA,YAAI,aAAaA,QAAO,QAAQ,GAAG;AACjC,oBAAU,QAAQ,OAAO,KAAK,QAAQ;AAAA,QACxC;AAAA,MACF,CAAC;AACD,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;AAkBA,IAAM,oBAAN,MAAwB;AAAA,EACtB,YAAY,YAAY;AACtB,SAAK,aAAa;AAClB,SAAK,UAAU,oBAAI,IAAI;AACvB,SAAK,eAAe,oBAAI,IAAI;AAAA,EAC9B;AAAA,EACA,kBAAkB,aAAa,UAAU;AACvC,WAAO,mBAAmB,QAAQ,KAAK,QAAQ,IAAI,QAAQ,CAAC;AAAA,EAC9D;AAAA,EACA,mBAAmB,aAAa,gBAAgB;AAC9C,SAAK,QAAQ,IAAI,eAAe,IAAI,mBAAmB,cAAc,CAAC;AACtE,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,cAAc,aAAa,WAAW;AACpC,WAAO,mBAAmB,QAAQ,KAAK,aAAa,IAAI,SAAS,CAAC;AAAA,EACpE;AAAA,EACA,eAAe,aAAaA,QAAO;AACjC,SAAK,aAAa,IAAIA,OAAM,MAAM,oBAAoBA,MAAK,CAAC;AAC5D,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AACF;AAqBA,IAAM,6BAAN,MAAiC;AAAA,EAC/B,cAAc;AAGZ,SAAK,WAAW,IAAI,UAAU,YAAY,UAAU;AACpD,SAAK,mBAAmB,oBAAI,IAAI;AAAA,EAClC;AAAA,EACA,WAAW,aAAa,KAAK;AAC3B,WAAO,mBAAmB,QAAQ,KAAK,SAAS,IAAI,GAAG,CAAC;AAAA,EAC1D;AAAA,EACA,YAAY,aAAa,MAAM;AAC7B,UAAM,SAAS,cAAc;AAC7B,WAAO,mBAAmB,QAAQ,MAAM,SAAO;AAC7C,aAAO,KAAK,WAAW,aAAa,GAAG,EAAE,KAAK,aAAW;AACvD,YAAI,YAAY,MAAM;AACpB,iBAAO,IAAI,KAAK,OAAO;AAAA,QACzB;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM,MAAM;AAAA,EACtB;AAAA,EACA,aAAa,aAAa,gBAAgB,UAAU;AAClD,aAAS,QAAQ,CAAC,GAAG,aAAa;AAChC,WAAK,YAAY,aAAa,gBAAgB,QAAQ;AAAA,IACxD,CAAC;AACD,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,yBAAyB,aAAa,cAAc,SAAS;AAC3D,UAAM,OAAO,KAAK,iBAAiB,IAAI,OAAO;AAC9C,QAAI,SAAS,QAAW;AACtB,WAAK,QAAQ,SAAO,KAAK,WAAW,KAAK,SAAS,OAAO,GAAG,CAAC;AAC7D,WAAK,iBAAiB,OAAO,OAAO;AAAA,IACtC;AACA,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,yBAAyB,aAAaX,aAAY,cAAc;AAC9D,UAAM,SAAS,cAAc;AAC7B,UAAM,8BAA8BA,YAAW,SAAS;AACxD,UAAM,SAAS,IAAI,YAAYA,YAAW,MAAM,EAAE,CAAC;AACnD,UAAM,OAAO,KAAK,SAAS,gBAAgB,MAAM;AACjD,WAAO,KAAK,QAAQ,GAAG;AACrB,YAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAM,UAAU,MAAM;AACtB,YAAM,MAAM,QAAQ,OAAO;AAC3B,UAAI,CAACA,YAAW,WAAW,IAAI,IAAI,GAAG;AACpC;AAAA,MACF;AAEA,UAAI,IAAI,KAAK,WAAW,6BAA6B;AACnD;AAAA,MACF;AACA,UAAI,QAAQ,iBAAiB,cAAc;AACzC,eAAO,IAAI,QAAQ,OAAO,GAAG,OAAO;AAAA,MACtC;AAAA,IACF;AACA,WAAO,mBAAmB,QAAQ,MAAM;AAAA,EAC1C;AAAA,EACA,8BAA8B,aAAaD,kBAAiB,cAAcG,QAAO;AAC/E,QAAI,oBAAoB,IAAI,UAAU,CAAC,MAAM,SAAS,OAAO,IAAI;AACjE,UAAM,OAAO,KAAK,SAAS,YAAY;AACvC,WAAO,KAAK,QAAQ,GAAG;AACrB,YAAM,QAAQ,KAAK,QAAQ;AAC3B,YAAM,UAAU,MAAM;AACtB,YAAM,MAAM,QAAQ,OAAO;AAC3B,UAAI,IAAI,mBAAmB,MAAMH,kBAAiB;AAChD;AAAA,MACF;AACA,UAAI,QAAQ,iBAAiB,cAAc;AACzC,YAAI,qBAAqB,kBAAkB,IAAI,QAAQ,cAAc;AACrE,YAAI,uBAAuB,MAAM;AAC/B,+BAAqB,cAAc;AACnC,8BAAoB,kBAAkB,OAAO,QAAQ,gBAAgB,kBAAkB;AAAA,QACzF;AACA,2BAAmB,IAAI,QAAQ,OAAO,GAAG,OAAO;AAAA,MAClD;AAAA,IACF;AACA,UAAM,SAAS,cAAc;AAC7B,UAAM,YAAY,kBAAkB,YAAY;AAChD,WAAO,UAAU,QAAQ,GAAG;AAC1B,YAAM,QAAQ,UAAU,QAAQ;AAChC,YAAM,WAAW,MAAM;AACvB,eAAS,QAAQ,CAAC,KAAK,YAAY,OAAO,IAAI,KAAK,OAAO,CAAC;AAC3D,UAAI,OAAO,KAAK,KAAKG,QAAO;AAC1B;AAAA,MACF;AAAA,IACF;AACA,WAAO,mBAAmB,QAAQ,MAAM;AAAA,EAC1C;AAAA,EACA,YAAY,aAAa,gBAAgB,UAAU;AAEjD,UAAM,WAAW,KAAK,SAAS,IAAI,SAAS,GAAG;AAC/C,QAAI,aAAa,MAAM;AACrB,YAAM,SAAS,KAAK,iBAAiB,IAAI,SAAS,cAAc,EAAE,OAAO,SAAS,GAAG;AACrF,WAAK,iBAAiB,IAAI,SAAS,gBAAgB,MAAM;AAAA,IAC3D;AACA,SAAK,WAAW,KAAK,SAAS,OAAO,SAAS,KAAK,IAAI,QAAQ,gBAAgB,QAAQ,CAAC;AAExF,QAAI,QAAQ,KAAK,iBAAiB,IAAI,cAAc;AACpD,QAAI,UAAU,QAAW;AACvB,cAAQ,eAAe;AACvB,WAAK,iBAAiB,IAAI,gBAAgB,KAAK;AAAA,IACjD;AACA,SAAK,iBAAiB,IAAI,gBAAgB,MAAM,IAAI,SAAS,GAAG,CAAC;AAAA,EACnE;AACF;AAkBA,IAAM,qBAAN,MAAyB;AAAA,EACvB,cAAc;AACZ,SAAK,eAAe,WAAW;AAAA,EACjC;AAAA,EACA,gBAAgB,aAAa;AAC3B,WAAO,mBAAmB,QAAQ,KAAK,YAAY;AAAA,EACrD;AAAA,EACA,gBAAgB,aAAa,cAAc;AACzC,SAAK,eAAe;AACpB,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AACF;AAiCA,IAAM,eAAN,MAAmB;AAAA,EACjB,cAAc;AAEZ,SAAK,YAAY,IAAI,UAAU,aAAa,YAAY;AAExD,SAAK,eAAe,IAAI,UAAU,aAAa,iBAAiB;AAAA,EAClE;AAAA;AAAA,EAEA,UAAU;AACR,WAAO,KAAK,UAAU,QAAQ;AAAA,EAChC;AAAA;AAAA,EAEA,aAAa,KAAK,IAAI;AACpB,UAAM,MAAM,IAAI,aAAa,KAAK,EAAE;AACpC,SAAK,YAAY,KAAK,UAAU,IAAI,GAAG;AACvC,SAAK,eAAe,KAAK,aAAa,IAAI,GAAG;AAAA,EAC/C;AAAA;AAAA,EAEA,cAAc,MAAM,IAAI;AACtB,SAAK,QAAQ,SAAO,KAAK,aAAa,KAAK,EAAE,CAAC;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,KAAK,IAAI;AACvB,SAAK,UAAU,IAAI,aAAa,KAAK,EAAE,CAAC;AAAA,EAC1C;AAAA,EACA,iBAAiB,MAAM,IAAI;AACzB,SAAK,QAAQ,SAAO,KAAK,gBAAgB,KAAK,EAAE,CAAC;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB,IAAI;AACxB,UAAM,WAAW,IAAI,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC;AACrD,UAAM,WAAW,IAAI,aAAa,UAAU,EAAE;AAC9C,UAAM,SAAS,IAAI,aAAa,UAAU,KAAK,CAAC;AAChD,UAAM,OAAO,CAAC;AACd,SAAK,aAAa,eAAe,CAAC,UAAU,MAAM,GAAG,SAAO;AAC1D,WAAK,UAAU,GAAG;AAClB,WAAK,KAAK,IAAI,GAAG;AAAA,IACnB,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,sBAAsB;AACpB,SAAK,UAAU,QAAQ,SAAO,KAAK,UAAU,GAAG,CAAC;AAAA,EACnD;AAAA,EACA,UAAU,KAAK;AACb,SAAK,YAAY,KAAK,UAAU,OAAO,GAAG;AAC1C,SAAK,eAAe,KAAK,aAAa,OAAO,GAAG;AAAA,EAClD;AAAA,EACA,gBAAgB,IAAI;AAClB,UAAM,WAAW,IAAI,YAAY,IAAI,aAAa,CAAC,CAAC,CAAC;AACrD,UAAM,WAAW,IAAI,aAAa,UAAU,EAAE;AAC9C,UAAM,SAAS,IAAI,aAAa,UAAU,KAAK,CAAC;AAChD,QAAI,OAAO,eAAe;AAC1B,SAAK,aAAa,eAAe,CAAC,UAAU,MAAM,GAAG,SAAO;AAC1D,aAAO,KAAK,IAAI,IAAI,GAAG;AAAA,IACzB,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,YAAY,KAAK;AACf,UAAM,MAAM,IAAI,aAAa,KAAK,CAAC;AACnC,UAAM,WAAW,KAAK,UAAU,kBAAkB,GAAG;AACrD,WAAO,aAAa,QAAQ,IAAI,QAAQ,SAAS,GAAG;AAAA,EACtD;AACF;AACA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,KAAK,iBAAiB;AAChC,SAAK,MAAM;AACX,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA,EAEA,OAAO,aAAa,MAAM,OAAO;AAC/B,WAAO,YAAY,WAAW,KAAK,KAAK,MAAM,GAAG,KAAK,oBAAoB,KAAK,iBAAiB,MAAM,eAAe;AAAA,EACvH;AAAA;AAAA,EAEA,OAAO,kBAAkB,MAAM,OAAO;AACpC,WAAO,oBAAoB,KAAK,iBAAiB,MAAM,eAAe,KAAK,YAAY,WAAW,KAAK,KAAK,MAAM,GAAG;AAAA,EACvH;AACF;AAkBA,IAAM,sBAAN,MAA0B;AAAA,EACxB,YAAY,cAAc,mBAAmB;AAC3C,SAAK,eAAe;AACpB,SAAK,oBAAoB;AAKzB,SAAK,gBAAgB,CAAC;AAEtB,SAAK,cAAc;AAEnB,SAAK,uBAAuB,IAAI,UAAU,aAAa,YAAY;AAAA,EACrE;AAAA,EACA,WAAW,aAAa;AACtB,WAAO,mBAAmB,QAAQ,KAAK,cAAc,WAAW,CAAC;AAAA,EACnE;AAAA,EACA,iBAAiB,aAAa,gBAAgB,eAAe,WAAW;AACtE,UAAM,UAAU,KAAK;AACrB,SAAK;AACL,QAAI,KAAK,cAAc,SAAS,GAAG;AACjC,WAAK,cAAc,KAAK,cAAc,SAAS,CAAC;AAAA,IAClD;AACA,UAAM,QAAQ,IAAI,cAAc,SAAS,gBAAgB,eAAe,SAAS;AACjF,SAAK,cAAc,KAAK,KAAK;AAE7B,eAAW,YAAY,WAAW;AAChC,WAAK,uBAAuB,KAAK,qBAAqB,IAAI,IAAI,aAAa,SAAS,KAAK,OAAO,CAAC;AACjG,WAAK,aAAa,2BAA2B,aAAa,SAAS,IAAI,KAAK,QAAQ,CAAC;AAAA,IACvF;AACA,WAAO,mBAAmB,QAAQ,KAAK;AAAA,EACzC;AAAA,EACA,oBAAoB,aAAa,SAAS;AACxC,WAAO,mBAAmB,QAAQ,KAAK,kBAAkB,OAAO,CAAC;AAAA,EACnE;AAAA,EACA,iCAAiC,aAAa,SAAS;AACrD,UAAM,cAAc,UAAU;AAG9B,UAAM,WAAW,KAAK,eAAe,WAAW;AAChD,UAAM,QAAQ,WAAW,IAAI,IAAI;AACjC,WAAO,mBAAmB,QAAQ,KAAK,cAAc,SAAS,QAAQ,KAAK,cAAc,KAAK,IAAI,IAAI;AAAA,EACxG;AAAA,EACA,kCAAkC;AAChC,WAAO,mBAAmB,QAAQ,KAAK,cAAc,WAAW,IAAI,kBAAkB,KAAK,cAAc,CAAC;AAAA,EAC5G;AAAA,EACA,sBAAsB,aAAa;AACjC,WAAO,mBAAmB,QAAQ,KAAK,cAAc,MAAM,CAAC;AAAA,EAC9D;AAAA,EACA,0CAA0C,aAAa,aAAa;AAClE,UAAM,QAAQ,IAAI,aAAa,aAAa,CAAC;AAC7C,UAAM,MAAM,IAAI,aAAa,aAAa,OAAO,iBAAiB;AAClE,UAAM,SAAS,CAAC;AAChB,SAAK,qBAAqB,eAAe,CAAC,OAAO,GAAG,GAAG,SAAO;AAC5D,YAAM,QAAQ,KAAK,kBAAkB,IAAI,eAAe;AACxD,aAAO,KAAK,KAAK;AAAA,IACnB,CAAC;AACD,WAAO,mBAAmB,QAAQ,MAAM;AAAA,EAC1C;AAAA,EACA,2CAA2C,aAAa,cAAc;AACpE,QAAI,iBAAiB,IAAI,UAAU,mBAAmB;AACtD,iBAAa,QAAQ,iBAAe;AAClC,YAAM,QAAQ,IAAI,aAAa,aAAa,CAAC;AAC7C,YAAM,MAAM,IAAI,aAAa,aAAa,OAAO,iBAAiB;AAClE,WAAK,qBAAqB,eAAe,CAAC,OAAO,GAAG,GAAG,SAAO;AAC5D,yBAAiB,eAAe,IAAI,IAAI,eAAe;AAAA,MACzD,CAAC;AAAA,IACH,CAAC;AACD,WAAO,mBAAmB,QAAQ,KAAK,oBAAoB,cAAc,CAAC;AAAA,EAC5E;AAAA,EACA,oCAAoC,aAAaS,QAAO;AAGtD,UAAM,SAASA,OAAM;AACrB,UAAM,8BAA8B,OAAO,SAAS;AAKpD,QAAI,YAAY;AAChB,QAAI,CAAC,YAAY,cAAc,SAAS,GAAG;AACzC,kBAAY,UAAU,MAAM,EAAE;AAAA,IAChC;AACA,UAAM,QAAQ,IAAI,aAAa,IAAI,YAAY,SAAS,GAAG,CAAC;AAG5D,QAAI,iBAAiB,IAAI,UAAU,mBAAmB;AACtD,SAAK,qBAAqB,aAAa,SAAO;AAC5C,YAAM,aAAa,IAAI,IAAI;AAC3B,UAAI,CAAC,OAAO,WAAW,UAAU,GAAG;AAClC,eAAO;AAAA,MACT,OAAO;AAML,YAAI,WAAW,WAAW,6BAA6B;AACrD,2BAAiB,eAAe,IAAI,IAAI,eAAe;AAAA,QACzD;AACA,eAAO;AAAA,MACT;AAAA,IACF,GAAG,KAAK;AACR,WAAO,mBAAmB,QAAQ,KAAK,oBAAoB,cAAc,CAAC;AAAA,EAC5E;AAAA,EACA,oBAAoB,UAAU;AAG5B,UAAM,SAAS,CAAC;AAChB,aAAS,QAAQ,aAAW;AAC1B,YAAM,QAAQ,KAAK,kBAAkB,OAAO;AAC5C,UAAI,UAAU,MAAM;AAClB,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,oBAAoB,aAAa,OAAO;AAEtC,UAAM,aAAa,KAAK,uBAAuB,MAAM,SAAS,SAAS;AACvE,eAAW,eAAe,CAAC;AAC3B,SAAK,cAAc,MAAM;AACzB,QAAI,aAAa,KAAK;AACtB,WAAO,mBAAmB,QAAQ,MAAM,WAAW,cAAY;AAC7D,YAAM,MAAM,IAAI,aAAa,SAAS,KAAK,MAAM,OAAO;AACxD,mBAAa,WAAW,OAAO,GAAG;AAClC,aAAO,KAAK,kBAAkB,wBAAwB,aAAa,SAAS,GAAG;AAAA,IACjF,CAAC,EAAE,KAAK,MAAM;AACZ,WAAK,uBAAuB;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA,EACA,yBAAyB,SAAS;AAAA,EAElC;AAAA,EACA,YAAY,KAAK,KAAK;AACpB,UAAM,MAAM,IAAI,aAAa,KAAK,CAAC;AACnC,UAAM,WAAW,KAAK,qBAAqB,kBAAkB,GAAG;AAChE,WAAO,mBAAmB,QAAQ,IAAI,QAAQ,YAAY,SAAS,GAAG,CAAC;AAAA,EACzE;AAAA,EACA,wBAAwB,KAAK;AAC3B,QAAI,KAAK,cAAc,WAAW,EAAG;AACrC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,uBAAuB,SAAS,QAAQ;AACtC,UAAM,QAAQ,KAAK,eAAe,OAAO;AACzC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,eAAe,SAAS;AACtB,QAAI,KAAK,cAAc,WAAW,GAAG;AAEnC,aAAO;AAAA,IACT;AAKA,UAAM,eAAe,KAAK,cAAc,CAAC,EAAE;AAC3C,WAAO,UAAU;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,SAAS;AACzB,UAAM,QAAQ,KAAK,eAAe,OAAO;AACzC,QAAI,QAAQ,KAAK,SAAS,KAAK,cAAc,QAAQ;AACnD,aAAO;AAAA,IACT;AACA,UAAM,QAAQ,KAAK,cAAc,KAAK;AACtC,WAAO;AAAA,EACT;AACF;AAkBA,SAAS,mBAAmB;AAC1B,SAAO,IAAI,UAAU,YAAY,UAAU;AAC7C;AAKA,IAAM,gCAAN,MAAoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlC,YAAY,OAAO;AACjB,SAAK,QAAQ;AAEb,SAAK,OAAO,iBAAiB;AAE7B,SAAK,OAAO;AAAA,EACd;AAAA,EACA,gBAAgB,cAAc;AAC5B,SAAK,eAAe;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,SAAS,aAAaL,MAAK;AACzB,UAAM,MAAMA,KAAI;AAChB,UAAM,QAAQ,KAAK,KAAK,IAAI,GAAG;AAC/B,UAAM,eAAe,QAAQ,MAAM,OAAO;AAC1C,UAAM,cAAc,KAAK,MAAMA,IAAG;AAClC,SAAK,OAAO,KAAK,KAAK,OAAO,KAAK;AAAA,MAChC,UAAUA,KAAI,YAAY;AAAA,MAC1B,MAAM;AAAA,IACR,CAAC;AACD,SAAK,QAAQ,cAAc;AAC3B,WAAO,KAAK,aAAa,2BAA2B,aAAa,IAAI,KAAK,QAAQ,CAAC;AAAA,EACrF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY,aAAa;AACvB,UAAM,QAAQ,KAAK,KAAK,IAAI,WAAW;AACvC,QAAI,OAAO;AACT,WAAK,OAAO,KAAK,KAAK,OAAO,WAAW;AACxC,WAAK,QAAQ,MAAM;AAAA,IACrB;AAAA,EACF;AAAA,EACA,SAAS,aAAa,aAAa;AACjC,UAAM,QAAQ,KAAK,KAAK,IAAI,WAAW;AACvC,WAAO,mBAAmB,QAAQ,QAAQ,MAAM,SAAS,YAAY,IAAI,gBAAgB,mBAAmB,WAAW,CAAC;AAAA,EAC1H;AAAA,EACA,WAAW,aAAa,cAAc;AACpC,QAAI,UAAU,mBAAmB;AACjC,iBAAa,QAAQ,iBAAe;AAClC,YAAM,QAAQ,KAAK,KAAK,IAAI,WAAW;AACvC,gBAAU,QAAQ,OAAO,aAAa,QAAQ,MAAM,SAAS,YAAY,IAAI,gBAAgB,mBAAmB,WAAW,CAAC;AAAA,IAC9H,CAAC;AACD,WAAO,mBAAmB,QAAQ,OAAO;AAAA,EAC3C;AAAA,EACA,0BAA0B,aAAaK,QAAO,QAAQ,aAAa;AACjE,QAAI,UAAU,mBAAmB;AAGjC,UAAM,iBAAiBA,OAAM;AAC7B,UAAM,SAAS,IAAI,YAAY,eAAe,MAAM,EAAE,CAAC;AACvD,UAAM,WAAW,KAAK,KAAK,gBAAgB,MAAM;AACjD,WAAO,SAAS,QAAQ,GAAG;AACzB,YAAM;AAAA,QACJ;AAAA,QACA,OAAO;AAAA,UACL;AAAA,QACF;AAAA,MACF,IAAI,SAAS,QAAQ;AACrB,UAAI,CAAC,eAAe,WAAW,IAAI,IAAI,GAAG;AACxC;AAAA,MACF;AACA,UAAI,IAAI,KAAK,SAAS,eAAe,SAAS,GAAG;AAE/C;AAAA,MACF;AACA,UAAI,sBAAsB,2BAA2B,QAAQ,GAAG,MAAM,KAAK,GAAG;AAE5E;AAAA,MACF;AACA,UAAI,CAAC,YAAY,IAAI,SAAS,GAAG,KAAK,CAAC,aAAaA,QAAO,QAAQ,GAAG;AAEpE;AAAA,MACF;AACA,gBAAU,QAAQ,OAAO,SAAS,KAAK,SAAS,YAAY,CAAC;AAAA,IAC/D;AACA,WAAO,mBAAmB,QAAQ,OAAO;AAAA,EAC3C;AAAA,EACA,0BAA0B,aAAaZ,kBAAiB,QAAQS,QAAO;AAGrE,SAAK;AAAA,EACP;AAAA,EACA,mBAAmB,aAAa,GAAG;AACjC,WAAO,mBAAmB,QAAQ,KAAK,MAAM,SAAO,EAAE,GAAG,CAAC;AAAA,EAC5D;AAAA,EACA,gBAAgB,SAAS;AAGvB,WAAO,IAAI,iCAAiC,IAAI;AAAA,EAClD;AAAA,EACA,QAAQ,KAAK;AACX,WAAO,mBAAmB,QAAQ,KAAK,IAAI;AAAA,EAC7C;AACF;AAQA,SAAS,6BAA6B,OAAO;AAC3C,SAAO,IAAI,8BAA8B,KAAK;AAChD;AAIA,IAAM,mCAAN,cAA+C,2BAA2B;AAAA,EACxE,YAAY,eAAe;AACzB,UAAM;AACN,SAAK,gBAAgB;AAAA,EACvB;AAAA,EACA,aAAa,aAAa;AACxB,UAAM,WAAW,CAAC;AAClB,SAAK,QAAQ,QAAQ,CAAC,KAAKF,SAAQ;AACjC,UAAIA,KAAI,gBAAgB,GAAG;AACzB,iBAAS,KAAK,KAAK,cAAc,SAAS,aAAaA,IAAG,CAAC;AAAA,MAC7D,OAAO;AACL,aAAK,cAAc,YAAY,GAAG;AAAA,MACpC;AAAA,IACF,CAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EACA,aAAa,aAAa,aAAa;AACrC,WAAO,KAAK,cAAc,SAAS,aAAa,WAAW;AAAA,EAC7D;AAAA,EACA,gBAAgB,aAAa,cAAc;AACzC,WAAO,KAAK,cAAc,WAAW,aAAa,YAAY;AAAA,EAChE;AACF;AAkBA,IAAM,oBAAN,MAAwB;AAAA,EACtB,YAAY,aAAa;AACvB,SAAK,cAAc;AAInB,SAAK,UAAU,IAAI,UAAU,OAAK,eAAe,CAAC,GAAG,YAAY;AAEjE,SAAK,4BAA4B,gBAAgB,IAAI;AAErD,SAAK,kBAAkB;AAEvB,SAAK,wBAAwB;AAK7B,SAAK,aAAa,IAAI,aAAa;AACnC,SAAK,cAAc;AACnB,SAAK,oBAAoB,kBAAkB,eAAe;AAAA,EAC5D;AAAA,EACA,cAAc,KAAK,GAAG;AACpB,SAAK,QAAQ,QAAQ,CAAC,GAAG,eAAe,EAAE,UAAU,CAAC;AACrD,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,6BAA6B,aAAa;AACxC,WAAO,mBAAmB,QAAQ,KAAK,yBAAyB;AAAA,EAClE;AAAA,EACA,yBAAyB,aAAa;AACpC,WAAO,mBAAmB,QAAQ,KAAK,qBAAqB;AAAA,EAC9D;AAAA,EACA,iBAAiB,aAAa;AAC5B,SAAK,kBAAkB,KAAK,kBAAkB,KAAK;AACnD,WAAO,mBAAmB,QAAQ,KAAK,eAAe;AAAA,EACxD;AAAA,EACA,mBAAmB,aAAa,6BAA6B,2BAA2B;AACtF,QAAI,2BAA2B;AAC7B,WAAK,4BAA4B;AAAA,IACnC;AACA,QAAI,8BAA8B,KAAK,uBAAuB;AAC5D,WAAK,wBAAwB;AAAA,IAC/B;AACA,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,eAAe,YAAY;AACzB,SAAK,QAAQ,IAAI,WAAW,QAAQ,UAAU;AAC9C,UAAM,WAAW,WAAW;AAC5B,QAAI,WAAW,KAAK,iBAAiB;AACnC,WAAK,oBAAoB,IAAI,kBAAkB,QAAQ;AACvD,WAAK,kBAAkB;AAAA,IACzB;AACA,QAAI,WAAW,iBAAiB,KAAK,uBAAuB;AAC1D,WAAK,wBAAwB,WAAW;AAAA,IAC1C;AAAA,EACF;AAAA,EACA,cAAc,aAAa,YAAY;AACrC,SAAK,eAAe,UAAU;AAC9B,SAAK,eAAe;AACpB,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,iBAAiB,aAAa,YAAY;AACxC,SAAK,eAAe,UAAU;AAC9B,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,iBAAiB,aAAa,YAAY;AACxC,SAAK,QAAQ,OAAO,WAAW,MAAM;AACrC,SAAK,WAAW,sBAAsB,WAAW,QAAQ;AACzD,SAAK,eAAe;AACpB,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,cAAc,aAAa,YAAY,iBAAiB;AACtD,QAAIJ,SAAQ;AACZ,UAAM,WAAW,CAAC;AAClB,SAAK,QAAQ,QAAQ,CAAC,KAAK,eAAe;AACxC,UAAI,WAAW,kBAAkB,cAAc,gBAAgB,IAAI,WAAW,QAAQ,MAAM,MAAM;AAChG,aAAK,QAAQ,OAAO,GAAG;AACvB,iBAAS,KAAK,KAAK,8BAA8B,aAAa,WAAW,QAAQ,CAAC;AAClF,QAAAA;AAAA,MACF;AAAA,IACF,CAAC;AACD,WAAO,mBAAmB,QAAQ,QAAQ,EAAE,KAAK,MAAMA,MAAK;AAAA,EAC9D;AAAA,EACA,eAAe,aAAa;AAC1B,WAAO,mBAAmB,QAAQ,KAAK,WAAW;AAAA,EACpD;AAAA,EACA,cAAc,aAAa,QAAQ;AACjC,UAAM,aAAa,KAAK,QAAQ,IAAI,MAAM,KAAK;AAC/C,WAAO,mBAAmB,QAAQ,UAAU;AAAA,EAC9C;AAAA,EACA,gBAAgB,KAAK,MAAM,UAAU;AACnC,SAAK,WAAW,cAAc,MAAM,QAAQ;AAC5C,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,mBAAmB,KAAK,MAAM,UAAU;AACtC,SAAK,WAAW,iBAAiB,MAAM,QAAQ;AAC/C,UAAM,oBAAoB,KAAK,YAAY;AAC3C,UAAM,WAAW,CAAC;AAClB,QAAI,mBAAmB;AACrB,WAAK,QAAQ,SAAO;AAClB,iBAAS,KAAK,kBAAkB,wBAAwB,KAAK,GAAG,CAAC;AAAA,MACnE,CAAC;AAAA,IACH;AACA,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C;AAAA,EACA,8BAA8B,KAAK,UAAU;AAC3C,SAAK,WAAW,sBAAsB,QAAQ;AAC9C,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,2BAA2B,KAAK,UAAU;AACxC,UAAM,eAAe,KAAK,WAAW,gBAAgB,QAAQ;AAC7D,WAAO,mBAAmB,QAAQ,YAAY;AAAA,EAChD;AAAA,EACA,YAAY,KAAK,KAAK;AACpB,WAAO,mBAAmB,QAAQ,KAAK,WAAW,YAAY,GAAG,CAAC;AAAA,EACpE;AACF;AAkBA,IAAM,YAAY;AAKlB,IAAM,oBAAN,MAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOtB,YAAY,0BAA0B,YAAY;AAChD,SAAK,iBAAiB,CAAC;AACvB,SAAK,WAAW,CAAC;AACjB,SAAK,iBAAiB,IAAI,eAAe,CAAC;AAC1C,SAAK,WAAW;AAChB,SAAK,WAAW;AAChB,SAAK,eAAe,IAAI,mBAAmB;AAC3C,SAAK,oBAAoB,yBAAyB,IAAI;AACtD,SAAK,cAAc,IAAI,kBAAkB,IAAI;AAC7C,UAAM,QAAQ,CAAAI,SAAO,KAAK,kBAAkB,aAAaA,IAAG;AAC5D,SAAK,eAAe,IAAI,mBAAmB;AAC3C,SAAK,sBAAsB,6BAA6B,KAAK;AAC7D,SAAK,aAAa,IAAI,gBAAgB,UAAU;AAChD,SAAK,cAAc,IAAI,kBAAkB,KAAK,UAAU;AAAA,EAC1D;AAAA,EACA,QAAQ;AACN,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EACA,WAAW;AAET,SAAK,WAAW;AAChB,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EACA,6BAA6B;AAAA,EAE7B;AAAA,EACA,oBAAoB;AAAA,EAEpB;AAAA,EACA,gBAAgB,MAAM;AAGpB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,wBAAwB,MAAM;AAC5B,QAAI,UAAU,KAAK,SAAS,KAAK,MAAM,CAAC;AACxC,QAAI,CAAC,SAAS;AACZ,gBAAU,IAAI,2BAA2B;AACzC,WAAK,SAAS,KAAK,MAAM,CAAC,IAAI;AAAA,IAChC;AACA,WAAO;AAAA,EACT;AAAA,EACA,iBAAiB,MAAM,cAAc;AACnC,QAAI,QAAQ,KAAK,eAAe,KAAK,MAAM,CAAC;AAC5C,QAAI,CAAC,OAAO;AACV,cAAQ,IAAI,oBAAoB,cAAc,KAAK,iBAAiB;AACpE,WAAK,eAAe,KAAK,MAAM,CAAC,IAAI;AAAA,IACtC;AACA,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,iBAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EACA,yBAAyB;AACvB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,iBAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EACA,eAAe,QAAQ,MAAM,sBAAsB;AACjD,aAAS,WAAW,yBAAyB,MAAM;AACnD,UAAM,MAAM,IAAI,kBAAkB,KAAK,eAAe,KAAK,CAAC;AAC5D,SAAK,kBAAkB,qBAAqB;AAC5C,WAAO,qBAAqB,GAAG,EAAE,KAAK,YAAU;AAC9C,aAAO,KAAK,kBAAkB,uBAAuB,GAAG,EAAE,KAAK,MAAM,MAAM;AAAA,IAC7E,CAAC,EAAE,UAAU,EAAE,KAAK,YAAU;AAC5B,UAAI,sBAAsB;AAC1B,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACA,yBAAyB,aAAa,KAAK;AACzC,WAAO,mBAAmB,GAAG,OAAO,OAAO,KAAK,cAAc,EAAE,IAAI,WAAS,MAAM,MAAM,YAAY,aAAa,GAAG,CAAC,CAAC;AAAA,EACzH;AACF;AAKA,IAAM,oBAAN,cAAgC,uBAAuB;AAAA,EACrD,YAAY,uBAAuB;AACjC,UAAM;AACN,SAAK,wBAAwB;AAAA,EAC/B;AACF;AACA,IAAM,sBAAN,MAAM,qBAAoB;AAAA,EACxB,YAAY,aAAa;AACvB,SAAK,cAAc;AAEnB,SAAK,sBAAsB,IAAI,aAAa;AAE5C,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EACA,OAAO,QAAQ,aAAa;AAC1B,WAAO,IAAI,qBAAoB,WAAW;AAAA,EAC5C;AAAA,EACA,IAAI,oBAAoB;AACtB,QAAI,CAAC,KAAK,oBAAoB;AAC5B,YAAM,KAAK;AAAA,IACb,OAAO;AACL,aAAO,KAAK;AAAA,IACd;AAAA,EACF;AAAA,EACA,aAAa,KAAK,UAAU,KAAK;AAC/B,SAAK,oBAAoB,aAAa,KAAK,QAAQ;AACnD,SAAK,kBAAkB,OAAO,IAAI,SAAS,CAAC;AAC5C,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,gBAAgB,KAAK,UAAU,KAAK;AAClC,SAAK,oBAAoB,gBAAgB,KAAK,QAAQ;AACtD,SAAK,kBAAkB,IAAI,IAAI,SAAS,CAAC;AACzC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,wBAAwB,KAAK,KAAK;AAChC,SAAK,kBAAkB,IAAI,IAAI,SAAS,CAAC;AACzC,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,aAAa,KAAK,YAAY;AAC5B,UAAM,WAAW,KAAK,oBAAoB,sBAAsB,WAAW,QAAQ;AACnF,aAAS,QAAQ,SAAO,KAAK,kBAAkB,IAAI,IAAI,SAAS,CAAC,CAAC;AAClE,UAAM,QAAQ,KAAK,YAAY,eAAe;AAC9C,WAAO,MAAM,2BAA2B,KAAK,WAAW,QAAQ,EAAE,KAAK,UAAQ;AAC7E,WAAK,QAAQ,SAAO,KAAK,kBAAkB,IAAI,IAAI,SAAS,CAAC,CAAC;AAAA,IAChE,CAAC,EAAE,KAAK,MAAM,MAAM,iBAAiB,KAAK,UAAU,CAAC;AAAA,EACvD;AAAA,EACA,uBAAuB;AACrB,SAAK,qBAAqB,oBAAI,IAAI;AAAA,EACpC;AAAA,EACA,uBAAuB,KAAK;AAE1B,UAAM,QAAQ,KAAK,YAAY,uBAAuB;AACtD,UAAM,eAAe,MAAM,gBAAgB;AAC3C,WAAO,mBAAmB,QAAQ,KAAK,mBAAmB,UAAQ;AAChE,YAAM,MAAM,YAAY,SAAS,IAAI;AACrC,aAAO,KAAK,aAAa,KAAK,GAAG,EAAE,KAAK,kBAAgB;AACtD,YAAI,CAAC,cAAc;AACjB,uBAAa,YAAY,KAAK,gBAAgB,IAAI,CAAC;AAAA,QACrD;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM;AACZ,WAAK,qBAAqB;AAC1B,aAAO,aAAa,MAAM,GAAG;AAAA,IAC/B,CAAC;AAAA,EACH;AAAA,EACA,oBAAoB,KAAK,KAAK;AAC5B,WAAO,KAAK,aAAa,KAAK,GAAG,EAAE,KAAK,kBAAgB;AACtD,UAAI,cAAc;AAChB,aAAK,kBAAkB,OAAO,IAAI,SAAS,CAAC;AAAA,MAC9C,OAAO;AACL,aAAK,kBAAkB,IAAI,IAAI,SAAS,CAAC;AAAA,MAC3C;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,aAAaA,MAAK;AAEhB,WAAO;AAAA,EACT;AAAA,EACA,aAAa,KAAK,KAAK;AACrB,WAAO,mBAAmB,GAAG,CAAC,MAAM,mBAAmB,QAAQ,KAAK,oBAAoB,YAAY,GAAG,CAAC,GAAG,MAAM,KAAK,YAAY,eAAe,EAAE,YAAY,KAAK,GAAG,GAAG,MAAM,KAAK,YAAY,yBAAyB,KAAK,GAAG,CAAC,CAAC;AAAA,EACtO;AACF;AACA,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EACtB,YAAY,aAAa,WAAW;AAClC,SAAK,cAAc;AACnB,SAAK,0BAA0B,IAAI,UAAU,OAAK,mBAAmB,EAAE,IAAI,GAAG,CAAC,GAAG,MAAM,EAAE,QAAQ,CAAC,CAAC;AACpG,SAAK,mBAAmB,uBAAuB,MAAM,SAAS;AAAA,EAChE;AAAA,EACA,OAAO,QAAQ,aAAa,WAAW;AACrC,WAAO,IAAI,mBAAkB,aAAa,SAAS;AAAA,EACrD;AAAA;AAAA;AAAA,EAGA,uBAAuB;AAAA,EAAC;AAAA,EACxB,uBAAuB,KAAK;AAC1B,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,cAAc,KAAK,GAAG;AACpB,WAAO,KAAK,YAAY,eAAe,EAAE,cAAc,KAAK,CAAC;AAAA,EAC/D;AAAA,EACA,uBAAuB,KAAK;AAC1B,UAAM,kBAAkB,KAAK,sBAAsB,GAAG;AACtD,UAAM,qBAAqB,KAAK,YAAY,eAAe,EAAE,eAAe,GAAG;AAC/E,WAAO,mBAAmB,KAAK,iBAAe,gBAAgB,KAAK,cAAY,cAAc,QAAQ,CAAC;AAAA,EACxG;AAAA,EACA,sBAAsB,KAAK;AACzB,QAAI,gBAAgB;AACpB,WAAO,KAAK,sCAAsC,KAAK,OAAK;AAC1D;AAAA,IACF,CAAC,EAAE,KAAK,MAAM,aAAa;AAAA,EAC7B;AAAA,EACA,sCAAsC,KAAK,GAAG;AAC5C,WAAO,mBAAmB,QAAQ,KAAK,yBAAyB,CAAC,KAAK,mBAAmB;AAGvF,aAAO,KAAK,SAAS,KAAK,KAAK,cAAc,EAAE,KAAK,cAAY;AAC9D,YAAI,CAAC,UAAU;AACb,iBAAO,EAAE,cAAc;AAAA,QACzB,OAAO;AACL,iBAAO,mBAAmB,QAAQ;AAAA,QACpC;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,cAAc,KAAK,YAAY,iBAAiB;AAC9C,WAAO,KAAK,YAAY,eAAe,EAAE,cAAc,KAAK,YAAY,eAAe;AAAA,EACzF;AAAA,EACA,wBAAwB,KAAK,YAAY;AACvC,QAAIJ,SAAQ;AACZ,UAAM,QAAQ,KAAK,YAAY,uBAAuB;AACtD,UAAM,eAAe,MAAM,gBAAgB;AAC3C,UAAM,IAAI,MAAM,mBAAmB,KAAK,SAAO;AAC7C,aAAO,KAAK,SAAS,KAAK,KAAK,UAAU,EAAE,KAAK,cAAY;AAC1D,YAAI,CAAC,UAAU;AACb,UAAAA;AACA,uBAAa,YAAY,KAAK,gBAAgB,IAAI,CAAC;AAAA,QACrD;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,WAAO,EAAE,KAAK,MAAM,aAAa,MAAM,GAAG,CAAC,EAAE,KAAK,MAAMA,MAAK;AAAA,EAC/D;AAAA,EACA,wBAAwB,KAAK,KAAK;AAChC,SAAK,wBAAwB,IAAI,KAAK,IAAI,qBAAqB;AAC/D,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,aAAa,KAAK,YAAY;AAC5B,UAAM,UAAU,WAAW,mBAAmB,IAAI,qBAAqB;AACvE,WAAO,KAAK,YAAY,eAAe,EAAE,iBAAiB,KAAK,OAAO;AAAA,EACxE;AAAA,EACA,aAAa,KAAK,UAAU,KAAK;AAC/B,SAAK,wBAAwB,IAAI,KAAK,IAAI,qBAAqB;AAC/D,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,gBAAgB,KAAK,UAAU,KAAK;AAClC,SAAK,wBAAwB,IAAI,KAAK,IAAI,qBAAqB;AAC/D,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,oBAAoB,KAAK,KAAK;AAC5B,SAAK,wBAAwB,IAAI,KAAK,IAAI,qBAAqB;AAC/D,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA,EACA,aAAa,UAAU;AACrB,QAAI,eAAe,SAAS,IAAI,SAAS,EAAE;AAC3C,QAAI,SAAS,gBAAgB,GAAG;AAC9B,sBAAgB,iBAAiB,SAAS,KAAK,KAAK;AAAA,IACtD;AACA,WAAO;AAAA,EACT;AAAA,EACA,SAAS,KAAK,KAAK,YAAY;AAC7B,WAAO,mBAAmB,GAAG,CAAC,MAAM,KAAK,YAAY,yBAAyB,KAAK,GAAG,GAAG,MAAM,KAAK,YAAY,eAAe,EAAE,YAAY,KAAK,GAAG,GAAG,MAAM;AAC5J,YAAM,aAAa,KAAK,wBAAwB,IAAI,GAAG;AACvD,aAAO,mBAAmB,QAAQ,eAAe,UAAa,aAAa,UAAU;AAAA,IACvF,CAAC,CAAC;AAAA,EACJ;AAAA,EACA,aAAa,KAAK;AAChB,WAAO,KAAK,YAAY,uBAAuB,EAAE,QAAQ,GAAG;AAAA,EAC9D;AACF;AAmBA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,YAAY;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,IAAI,KAAK4B,cAAaC,YAAW;AAC/C,UAAM,sBAAsB,IAAI,oBAAoB,mBAAmB,GAAG;AAC1E,QAAID,eAAc,KAAKC,cAAa,GAAG;AACrC,+BAAyB,EAAE;AAC3B,0BAAoB,EAAE;AACtB,uBAAiB,EAAE;AACnB,sCAAgC,EAAE;AAAA,IACpC;AAGA,QAAI,IAAI,mBAAmB,QAAQ;AACnC,QAAID,eAAc,KAAKC,cAAa,GAAG;AAGrC,UAAID,iBAAgB,GAAG;AACrB,uBAAe,EAAE;AACjB,yBAAiB,EAAE;AAAA,MACrB;AACA,UAAI,EAAE,KAAK,MAAM,4BAA4B,mBAAmB,CAAC;AAAA,IACnE;AACA,QAAIA,eAAc,KAAKC,cAAa,GAAG;AACrC,UAAID,iBAAgB,GAAG;AAOrB,YAAI,EAAE,KAAK,MAAM,yCAAyC,IAAI,mBAAmB,CAAC;AAAA,MACpF;AACA,UAAI,EAAE,KAAK,MAAM;AACf,kCAA0B,EAAE;AAAA,MAC9B,CAAC;AAAA,IACH;AACA,QAAIA,eAAc,KAAKC,cAAa,GAAG;AACrC,UAAI,EAAE,KAAK,MAAM,KAAK,4BAA4B,mBAAmB,CAAC;AAAA,IACxE;AACA,QAAID,eAAc,KAAKC,cAAa,GAAG;AACrC,UAAI,EAAE,KAAK,MAAM;AACf,kCAA0B,EAAE;AAC5B,eAAO,KAAK,kBAAkB,mBAAmB;AAAA,MACnD,CAAC;AAAA,IACH;AACA,QAAID,eAAc,KAAKC,cAAa,GAAG;AACrC,UAAI,EAAE,KAAK,MAAM,KAAK,sBAAsB,mBAAmB,CAAC;AAAA,IAClE;AACA,QAAID,eAAc,KAAKC,cAAa,GAAG;AACrC,UAAI,EAAE,KAAK,MAAM,KAAK,4BAA4B,IAAI,mBAAmB,CAAC;AAAA,IAC5E;AACA,QAAID,eAAc,KAAKC,cAAa,GAAG;AACrC,UAAI,EAAE,KAAK,MAAM;AAIf,uCAA+B,EAAE;AAAA,MAGnC,CAAC;AAAA,IACH;AACA,QAAID,eAAc,MAAMC,cAAa,IAAI;AACvC,UAAI,EAAE,KAAK,MAAM,KAAK,oBAAoB,mBAAmB,CAAC;AAAA,IAChE;AACA,QAAID,eAAc,MAAMC,cAAa,IAAI;AACvC,UAAI,EAAE,KAAK,MAAM;AACf,2BAAmB,EAAE;AACrB,gCAAwB,EAAE;AAAA,MAC5B,CAAC;AAAA,IACH;AACA,QAAID,eAAc,MAAMC,cAAa,IAAI;AACvC,UAAI,EAAE,KAAK,MAAM;AACf,mCAA2B,EAAE;AAAA,MAC/B,CAAC;AAAA,IACH;AACA,QAAID,eAAc,MAAMC,cAAa,IAAI;AACvC,UAAI,EAAE,KAAK,MAAM,0BAA0B,EAAE,CAAC,EAAE,KAAK,MAAM,KAAK,2BAA2B,IAAI,mBAAmB,CAAC,EAAE,KAAK,MAAM,GAAG,kBAAkB,uBAAuB,CAAC;AAAA,IAC/K;AACA,QAAID,eAAc,MAAMC,cAAa,IAAI;AACvC,UAAI,EAAE,KAAK,MAAM,KAAK,oBAAoB,IAAI,mBAAmB,CAAC;AAAA,IACpE;AACA,QAAID,eAAc,MAAMC,cAAa,IAAI;AACvC,UAAI,EAAE,KAAK,MAAM,iBAAiB,EAAE,CAAC;AAAA,IACvC;AACA,QAAID,eAAc,MAAMC,cAAa,IAAI;AAEvC,UAAI,EAAE,KAAK,MAAM;AACf,cAAMC,mBAAkB,IAAI,YAAY,iBAAiB;AACzD,QAAAA,iBAAgB,MAAM;AAAA,MACxB,CAAC,EAAE,KAAK,MAAM;AACZ,cAAM,kBAAkB,IAAI,YAAY,iBAAiB;AACzD,wBAAgB,MAAM;AAAA,MACxB,CAAC;AAAA,IACH;AACA,QAAIF,eAAc,MAAMC,cAAa,IAAI;AACvC,UAAI,EAAE,KAAK,MAAM;AACf,2BAAmB,EAAE;AAAA,MACvB,CAAC;AAAA,IACH;AACA,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB,KAAK;AACrB,QAAI,WAAW;AACf,WAAO,IAAI,MAAM,uBAAuB,EAAE,QAAQ,CAAC,GAAGzB,SAAQ;AAC5D,kBAAY,eAAeA,IAAG;AAAA,IAChC,CAAC,EAAE,KAAK,MAAM;AACZ,YAAM,WAAW;AAAA,QACf;AAAA,MACF;AACA,aAAO,IAAI,MAAM,2BAA2B,EAAE,IAAI,2BAA2B,QAAQ;AAAA,IACvF,CAAC;AAAA,EACH;AAAA,EACA,4BAA4B,KAAK;AAC/B,UAAM,cAAc,IAAI,MAAM,oBAAoB;AAClD,UAAM2B,kBAAiB,IAAI,MAAM,oBAAoB;AACrD,WAAO,YAAY,QAAQ,EAAE,KAAK,YAAU;AAC1C,aAAO,mBAAmB,QAAQ,QAAQ,WAAS;AACjD,cAAM,QAAQ,YAAY,MAAM,CAAC,MAAM,QAAQ,eAAe,GAAG,CAAC,MAAM,QAAQ,MAAM,uBAAuB,CAAC;AAC9G,eAAOA,gBAAe,QAAQ,mCAAmC,KAAK,EAAE,KAAK,eAAa;AACxF,iBAAO,mBAAmB,QAAQ,WAAW,aAAW;AACtD,uBAAW,QAAQ,WAAW,MAAM,MAAM;AAC1C,kBAAM,QAAQ,oBAAoB,KAAK,YAAY,OAAO;AAC1D,mBAAO,oBAAoB,KAAK,MAAM,QAAQ,KAAK,EAAE,KAAK,MAAM;AAAA,YAAC,CAAC;AAAA,UACpE,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB,KAAK;AACzB,UAAMC,uBAAsB,IAAI,MAAM,qBAAqB;AAC3D,UAAM,iBAAiB,IAAI,MAAM,uBAAuB;AACxD,UAAMC,qBAAoB,IAAI,MAAM,mBAAmB;AACvD,WAAOA,mBAAkB,IAAI,iBAAiB,EAAE,KAAK,cAAY;AAC/D,YAAMC,oBAAmB,UAAQ;AAC/B,eAAOF,qBAAoB,IAAI;AAAA,UAC7B,UAAU;AAAA,UACV,MAAM,mBAAmB,IAAI;AAAA,UAC7B,gBAAgB,SAAS;AAAA,QAC3B,CAAC;AAAA,MACH;AACA,YAAM,WAAW,CAAC;AAClB,aAAO,eAAe,QAAQ,CAAC,KAAK5B,SAAQ;AAC1C,cAAM,OAAO,IAAI,aAAa,GAAG;AACjC,cAAM,iBAAiB,YAAY,IAAI;AACvC,iBAAS,KAAK4B,qBAAoB,IAAI,cAAc,EAAE,KAAK,mBAAiB;AAC1E,cAAI,CAAC,eAAe;AAClB,mBAAOE,kBAAiB,IAAI;AAAA,UAC9B,OAAO;AACL,mBAAO,mBAAmB,QAAQ;AAAA,UACpC;AAAA,QACF,CAAC,CAAC;AAAA,MACJ,CAAC,EAAE,KAAK,MAAM,mBAAmB,QAAQ,QAAQ,CAAC;AAAA,IACpD,CAAC;AAAA,EACH;AAAA,EACA,4BAA4B,IAAI,KAAK;AAEnC,OAAG,kBAAkB,yBAAyB;AAAA,MAC5C,SAAS;AAAA,IACX,CAAC;AACD,UAAMC,0BAAyB,IAAI,MAAM,uBAAuB;AAEhE,UAAM,QAAQ,IAAI,4BAA4B;AAC9C,UAAM,WAAW,oBAAkB;AACjC,UAAI,MAAM,IAAI,cAAc,GAAG;AAC7B,cAAM,eAAe,eAAe,YAAY;AAChD,cAAM,aAAa,eAAe,QAAQ;AAC1C,eAAOA,wBAAuB,IAAI;AAAA,UAChC;AAAA,UACA,QAAQ,mBAAmB,UAAU;AAAA,QACvC,CAAC;AAAA,MACH;AAAA,IACF;AAEA,WAAO,IAAI,MAAM,uBAAuB,EAAE,QAAQ;AAAA,MAChD,UAAU;AAAA,IACZ,GAAG,CAAC,cAAc,MAAM;AACtB,YAAM,OAAO,IAAI,aAAa,YAAY;AAC1C,aAAO,SAAS,KAAK,QAAQ,CAAC;AAAA,IAChC,CAAC,EAAE,KAAK,MAAM;AAEZ,aAAO,IAAI,MAAM,uBAAuB,EAAE,QAAQ;AAAA,QAChD,UAAU;AAAA,MACZ,GAAG,CAAC,CAAC,QAAQ,aAAa,OAAO,GAAG,MAAM;AACxC,cAAM,OAAO,mBAAmB,WAAW;AAC3C,eAAO,SAAS,KAAK,QAAQ,CAAC;AAAA,MAChC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,oBAAoB,KAAK;AACvB,UAAM,cAAc,IAAI,MAAM,aAAa;AAC3C,WAAO,YAAY,QAAQ,CAAC,KAAK,qBAAqB;AACpD,YAAM,qBAAqB,aAAa,gBAAgB;AACxD,YAAM,kBAAkB,WAAW,KAAK,YAAY,kBAAkB;AACtE,aAAO,YAAY,IAAI,eAAe;AAAA,IACxC,CAAC;AAAA,EACH;AAAA,EACA,2BAA2B,IAAI,aAAa;AAC1C,UAAM,4BAA4B,YAAY,MAAM,uBAAuB;AAC3E,UAAM,SAAS,CAAC;AAChB,WAAO,0BAA0B,QAAQ,CAAC,GAAG,mBAAmB;AAC9D,YAAM,sBAAsB,YAAY,MAAM,qBAAqB;AACnE,YAAM,OAAO,WAAW,cAAc,EAAE,KAAK,QAAQ;AACrD,YAAM,mBAAmB;AAAA,QACvB,YAAY,KAAK,MAAM,GAAG,KAAK,SAAS,CAAC;AAAA,QACzC,iBAAiB,KAAK,KAAK,SAAS,CAAC;AAAA,QACrC,YAAY,KAAK,KAAK,SAAS,CAAC;AAAA,QAChC,UAAU,eAAe,YAAY,CAAC,GAAG,CAAC;AAAA,QAC1C,iBAAiB,eAAe;AAAA,QAChC,YAAY,eAAe;AAAA,QAC3B,UAAU,eAAe;AAAA,QACzB,uBAAuB,CAAC,CAAC,eAAe;AAAA,MAC1C;AACA,aAAO,KAAK,oBAAoB,IAAI,gBAAgB,CAAC;AAAA,IACvD,CAAC,EAAE,KAAK,MAAM,mBAAmB,QAAQ,MAAM,CAAC;AAAA,EAClD;AAAA,EACA,oBAAoB,IAAI,aAAa;AACnC,UAAMJ,kBAAiB,YAAY,MAAM,oBAAoB;AAC7D,UAAM,sBAAsB,gCAAgC,KAAK,UAAU;AAC3E,UAAM,oBAAoB,IAAI,kBAAkB,oBAAoB,SAAS,KAAK,WAAW,gBAAgB;AAC7G,WAAOA,gBAAe,QAAQ,EAAE,KAAK,eAAa;AAChD,YAAM,oBAAoB,oBAAI,IAAI;AAClC,gBAAU,QAAQ,aAAW;AAC3B,YAAI;AACJ,YAAI,eAAe,KAAK,kBAAkB,IAAI,QAAQ,MAAM,OAAO,QAAQ,OAAO,SAAS,KAAK,eAAe;AAC/G,cAAM,QAAQ,oBAAoB,KAAK,YAAY,OAAO;AAC1D,cAAM,KAAK,EAAE,QAAQ,SAAO,cAAc,YAAY,IAAI,GAAG,CAAC;AAC9D,0BAAkB,IAAI,QAAQ,QAAQ,WAAW;AAAA,MACnD,CAAC;AACD,aAAO,mBAAmB,QAAQ,mBAAmB,CAAC,wBAAwB,WAAW;AACvF,cAAM,OAAO,IAAI,KAAK,MAAM;AAC5B,cAAM,uBAAuB,8BAA8B,QAAQ,KAAK,YAAY,IAAI;AAKxF,cAAM,eAAe,kBAAkB,gBAAgB,IAAI;AAC3D,cAAM,gBAAgB,uBAAuB,QAAQ,MAAM,KAAK,YAAY,cAAc,kBAAkB,iBAAiB;AAC7H,cAAM,qBAAqB,IAAI,mBAAmB,qBAAqB,eAAe,sBAAsB,YAAY;AACxH,eAAO,mBAAmB,0CAA0C,IAAI,qBAAqB,aAAa,eAAe,OAAO,GAAG,sBAAsB,EAAE,KAAK;AAAA,MAClK,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;AACA,SAAS,YAAY,MAAM;AACzB,SAAO,CAAC,GAAG,mBAAmB,IAAI,CAAC;AACrC;AACA,SAAS,yBAAyB,IAAI;AACpC,KAAG,kBAAkB,oBAAoB;AAC3C;AACA,SAAS,oBAAoB,IAAI;AAC/B,KAAG,kBAAkB,sBAAsB;AAAA,IACzC,SAAS;AAAA,EACX,CAAC;AACD,QAAM,uBAAuB,GAAG,kBAAkB,sBAAsB;AAAA,IACtE,SAAS;AAAA,IACT,eAAe;AAAA,EACjB,CAAC;AACD,uBAAqB,YAAY,mCAAmC,qCAAqC;AAAA,IACvG,QAAQ;AAAA,EACV,CAAC;AACD,KAAG,kBAAkB,uBAAuB;AAC9C;AAKA,SAAS,yCAAyC,IAAI,KAAK;AACzD,QAAM,mBAAmB,IAAI,MAAM,oBAAoB;AACvD,SAAO,iBAAiB,QAAQ,EAAE,KAAK,uBAAqB;AAC1D,OAAG,kBAAkB,oBAAoB;AACzC,UAAMA,kBAAiB,GAAG,kBAAkB,sBAAsB;AAAA,MAChE,SAAS;AAAA,MACT,eAAe;AAAA,IACjB,CAAC;AACD,IAAAA,gBAAe,YAAY,mCAAmC,qCAAqC;AAAA,MACjG,QAAQ;AAAA,IACV,CAAC;AACD,UAAM,mBAAmB,IAAI,MAAM,oBAAoB;AACvD,UAAM,WAAW,kBAAkB,IAAI,cAAY,iBAAiB,IAAI,QAAQ,CAAC;AACjF,WAAO,mBAAmB,QAAQ,QAAQ;AAAA,EAC5C,CAAC;AACH;AACA,SAAS,gCAAgC,IAAI;AAC3C,KAAG,kBAAkB,uBAAuB;AAC9C;AACA,SAAS,0BAA0B,IAAI;AACrC,QAAM,sBAAsB,GAAG,kBAAkB,uBAAuB;AAAA,IACtE,SAAS;AAAA,EACX,CAAC;AACD,sBAAoB,YAAY,kCAAkC,oCAAoC;AACtG,sBAAoB,YAAY,sCAAsC,wCAAwC;AAChH;AACA,SAAS,0BAA0B,IAAI;AACrC,KAAG,kBAAkB,2BAA2B;AAClD;AACA,SAAS,iBAAiB,IAAI;AAC5B,QAAM,uBAAuB,GAAG,kBAAkB,uBAAuB;AAAA,IACvE,SAAS;AAAA,EACX,CAAC;AACD,uBAAqB,YAAY,sCAAsC,wCAAwC;AAAA,IAC7G,QAAQ;AAAA,EACV,CAAC;AACD,QAAM,cAAc,GAAG,kBAAkB,eAAe;AAAA,IACtD,SAAS;AAAA,EACX,CAAC;AAED,cAAY,YAAY,+BAA+B,6BAA6B;AAAA,IAClF,QAAQ;AAAA,EACV,CAAC;AACD,KAAG,kBAAkB,mBAAmB;AAC1C;AACA,SAAS,eAAe,IAAI;AAC1B,KAAG,kBAAkB,qBAAqB;AAC1C,KAAG,kBAAkB,aAAa;AAClC,KAAG,kBAAkB,mBAAmB;AAC1C;AACA,SAAS,+BAA+B,IAAI;AAC1C,MAAI,GAAG,iBAAiB,SAAS,uBAAuB,GAAG;AACzD,OAAG,kBAAkB,uBAAuB;AAAA,EAC9C;AACF;AAMA,SAAS,4BAA4B,KAAK;AACxC,QAAM,cAAc,IAAI,MAAM,mBAAmB;AACjD,QAAM,WAAW;AAAA,IACf,iBAAiB;AAAA,IACjB,6BAA6B;AAAA,IAC7B,2BAA2B,gBAAgB,IAAI,EAAE,YAAY;AAAA,IAC7D,aAAa;AAAA,EACf;AACA,SAAO,YAAY,IAAI,mBAAmB,QAAQ;AACpD;AACA,SAAS,0BAA0B,IAAI;AACrC,KAAG,kBAAkB,uBAAuB;AAAA,IAC1C,SAAS;AAAA,EACX,CAAC;AACH;AACA,SAAS,mBAAmB,IAAI;AAC9B,KAAG,kBAAkB,eAAe;AAAA,IAClC,SAAS;AAAA,EACX,CAAC;AACH;AACA,SAAS,wBAAwB,IAAI;AACnC,KAAG,kBAAkB,mBAAmB;AAAA,IACtC,SAAS;AAAA,EACX,CAAC;AACH;AACA,SAAS,iBAAiB,IAAI;AAC5B,QAAMK,2BAA0B,GAAG,kBAAkB,2BAA2B;AAAA,IAC9E,SAAS;AAAA,IACT,eAAe;AAAA,EACjB,CAAC;AACD,EAAAA,yBAAwB,YAAY,0CAA0C,8CAA8C;AAAA,IAC1H,QAAQ;AAAA,EACV,CAAC;AACD,QAAMN,mBAAkB,GAAG,kBAAkB,mBAAmB;AAAA,IAC9D,SAAS;AAAA,EACX,CAAC;AACD,EAAAA,iBAAgB,YAAY,iCAAiC,qCAAqC;AAAA,IAChG,QAAQ;AAAA,EACV,CAAC;AACD,QAAM,kBAAkB,GAAG,kBAAkB,mBAAmB;AAAA,IAC9D,SAAS;AAAA,EACX,CAAC;AACD,kBAAgB,YAAY,8BAA8B,kCAAkC;AAAA,IAC1F,QAAQ;AAAA,EACV,CAAC;AACH;AACA,SAAS,2BAA2B,IAAI;AACtC,QAAMO,wBAAuB,GAAG,kBAAkB,wBAAwB;AAAA,IACxE,SAAS;AAAA,EACX,CAAC;AACD,EAAAA,sBAAqB,YAAY,6CAA6C,iDAAiD;AAAA,IAC7H,QAAQ;AAAA,EACV,CAAC;AACD,EAAAA,sBAAqB,YAAY,8CAA8C,kDAAkD;AAAA,IAC/H,QAAQ;AAAA,EACV,CAAC;AACH;AACA,SAAS,mBAAmB,IAAI;AAC9B,KAAG,kBAAkB,gBAAgB;AAAA,IACnC,SAAS;AAAA,EACX,CAAC;AACH;AACA,SAAS,WAAW,WAAW;AAC7B,MAAI,UAAU,UAAU;AACtB,WAAO,IAAI,YAAY,aAAa,WAAW,UAAU,SAAS,IAAI,EAAE,SAAS,CAAC,CAAC;AAAA,EACrF,WAAW,UAAU,YAAY;AAC/B,WAAO,YAAY,aAAa,UAAU,WAAW,IAAI;AAAA,EAC3D,WAAW,UAAU,iBAAiB;AACpC,WAAO,YAAY,aAAa,UAAU,gBAAgB,IAAI;AAAA,EAChE,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AAkBA,IAAM,YAAY;AAKlB,IAAM,oBAAoB,KAAK,KAAK;AAMpC,IAAM,8BAA8B;AASpC,IAAM,sCAAsC;AAE5C,IAAM,oCAAoC;AAC1C,IAAM,iCAAiC;AAGvC,IAAM,6BAA6B;AAKnC,IAAM,gBAAgB;AA+CtB,IAAM,uBAAN,MAAM,sBAAqB;AAAA,EACzB,YAKA,yBAAyB,gBAAgB,UAAU,WAAW,OAAOC,SAAQ,UAAU,YAAY,sBAKnG,gBAAgB,gBAAgB,gBAAgB;AAC9C,SAAK,0BAA0B;AAC/B,SAAK,iBAAiB;AACtB,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,SAASA;AACd,SAAK,WAAW;AAChB,SAAK,uBAAuB;AAC5B,SAAK,iBAAiB;AACtB,SAAK,gBAAgB;AACrB,SAAK,iBAAiB;AACtB,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,iBAAiB;AAEtB,SAAK,sBAAsB;AAC3B,SAAK,eAAe;AAEpB,SAAK,4BAA4B;AAEjC,SAAK,0BAA0B;AAE/B,SAAK,4BAA4B,OAAO;AAExC,SAAK,uBAAuB,OAAK,QAAQ,QAAQ;AACjD,QAAI,CAAC,sBAAqB,YAAY,GAAG;AACvC,YAAM,IAAI,eAAe,KAAK,eAAe,8BAA8B;AAAA,IAC7E;AACA,SAAK,oBAAoB,IAAI,yBAAyB,MAAM,SAAS;AACrE,SAAK,SAAS,iBAAiB;AAC/B,SAAK,aAAa,IAAI,gBAAgB,UAAU;AAChD,SAAK,WAAW,IAAI,SAAS,KAAK,QAAQ,KAAK,eAAe,IAAI,gBAAgB,KAAK,UAAU,CAAC;AAClG,SAAK,eAAe,IAAI,sBAAsB;AAC9C,SAAK,cAAc,IAAI,qBAAqB,KAAK,mBAAmB,KAAK,UAAU;AACnF,SAAK,sBAAsB,gCAAgC,KAAK,UAAU;AAC1E,SAAK,cAAc,IAAI,qBAAqB;AAC5C,QAAI,KAAK,UAAU,KAAK,OAAO,cAAc;AAC3C,WAAK,aAAa,KAAK,OAAO;AAAA,IAChC,OAAO;AACL,WAAK,aAAa;AAClB,UAAI,mBAAmB,OAAO;AAC5B,iBAAS,WAAW,kKAA4K;AAAA,MAClM;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AAIN,WAAO,KAAK,wCAAwC,EAAE,KAAK,MAAM;AAC/D,UAAI,CAAC,KAAK,aAAa,CAAC,KAAK,yBAAyB;AAGpD,cAAM,IAAI,eAAe,KAAK,qBAAqB,iCAAiC;AAAA,MACtF;AACA,WAAK,wBAAwB;AAC7B,WAAK,uBAAuB;AAC5B,WAAK,+CAA+C;AACpD,aAAO,KAAK,eAAe,kCAAkC,YAAY,SAAO,KAAK,YAAY,yBAAyB,GAAG,CAAC;AAAA,IAChI,CAAC,EAAE,KAAK,iCAA+B;AACrC,WAAK,iBAAiB,IAAI,eAAe,6BAA6B,KAAK,oBAAoB;AAAA,IACjG,CAAC,EAAE,KAAK,MAAM;AACZ,WAAK,WAAW;AAAA,IAClB,CAAC,EAAE,MAAM,YAAU;AACjB,WAAK,YAAY,KAAK,SAAS,MAAM;AACrC,aAAO,QAAQ,OAAO,MAAM;AAAA,IAC9B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,wBAAwB,sBAAsB;AAC5C,SAAK,uBAAuB,CAAM,iBAAgB;AAChD,UAAI,KAAK,SAAS;AAChB,eAAO,qBAAqB,YAAY;AAAA,MAC1C;AAAA,IACF;AACA,WAAO,qBAAqB,KAAK,SAAS;AAAA,EAC5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,2BAA2B,yBAAyB;AAClD,SAAK,SAAS,yBAAyB,CAAM,UAAS;AAEpD,UAAI,MAAM,eAAe,MAAM;AAC7B,cAAM,wBAAwB;AAAA,MAChC;AAAA,IACF,EAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAkB,gBAAgB;AAChC,QAAI,KAAK,mBAAmB,gBAAgB;AAC1C,WAAK,iBAAiB;AAGtB,WAAK,MAAM,iBAAiB,MAAY;AACtC,YAAI,KAAK,SAAS;AAChB,gBAAM,KAAK,wCAAwC;AAAA,QACrD;AAAA,MACF,EAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0CAA0C;AACxC,WAAO,KAAK,eAAe,2CAA2C,aAAa,SAAO;AACxF,YAAM,gBAAgB,oBAAoB,GAAG;AAC7C,aAAO,cAAc,IAAI;AAAA,QACvB,UAAU,KAAK;AAAA,QACf,cAAc,KAAK,IAAI;AAAA,QACvB,gBAAgB,KAAK;AAAA,QACrB,cAAc,KAAK;AAAA,MACrB,CAAC,EAAE,KAAK,MAAM;AACZ,YAAI,KAAK,WAAW;AAClB,iBAAO,KAAK,mBAAmB,GAAG,EAAE,KAAK,aAAW;AAClD,gBAAI,CAAC,SAAS;AACZ,mBAAK,YAAY;AACjB,mBAAK,MAAM,iBAAiB,MAAM,KAAK,qBAAqB,KAAK,CAAC;AAAA,YACpE;AAAA,UACF,CAAC;AAAA,QACH;AAAA,MACF,CAAC,EAAE,KAAK,MAAM,KAAK,gBAAgB,GAAG,CAAC,EAAE,KAAK,qBAAmB;AAC/D,YAAI,KAAK,aAAa,CAAC,iBAAiB;AACtC,iBAAO,KAAK,0BAA0B,GAAG,EAAE,KAAK,MAAM,KAAK;AAAA,QAC7D,WAAW,iBAAiB;AAC1B,iBAAO,KAAK,4BAA4B,GAAG,EAAE,KAAK,MAAM,IAAI;AAAA,QAC9D,OAAO;AACL;AAAA;AAAA,YAA6B;AAAA;AAAA,QAC/B;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,MAAM,OAAK;AACZ,UAAI,4BAA4B,CAAC,GAAG;AAClC,iBAAS,WAAW,kCAAkC,CAAC;AAGvD,eAAO,KAAK;AAAA,MACd;AACA,UAAI,CAAC,KAAK,yBAAyB;AACjC,cAAM;AAAA,MACR;AACA,eAAS,WAAW,0DAA0D,CAAC;AAC/E;AAAA;AAAA,QAAuB;AAAA;AAAA,IACzB,CAAC,EAAE,KAAK,eAAa;AACnB,UAAI,KAAK,cAAc,WAAW;AAChC,aAAK,MAAM,iBAAiB,MAAM,KAAK,qBAAqB,SAAS,CAAC;AAAA,MACxE;AACA,WAAK,YAAY;AAAA,IACnB,CAAC;AAAA,EACH;AAAA,EACA,mBAAmB,KAAK;AACtB,UAAM,QAAQ,mBAAmB,GAAG;AACpC,WAAO,MAAM,IAAI,kBAAkB,EAAE,KAAK,mBAAiB;AACzD,aAAO,mBAAmB,QAAQ,KAAK,cAAc,aAAa,CAAC;AAAA,IACrE,CAAC;AAAA,EACH;AAAA,EACA,qBAAqB,KAAK;AACxB,UAAM,gBAAgB,oBAAoB,GAAG;AAC7C,WAAO,cAAc,OAAO,KAAK,QAAQ;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMM,sCAAsC;AAAA;AAC1C,UAAI,KAAK,aAAa,CAAC,KAAK,YAAY,KAAK,2BAA2B,iBAAiB,GAAG;AAC1F,aAAK,4BAA4B,KAAK,IAAI;AAC1C,cAAM,kBAAkB,MAAM,KAAK,eAAe,uCAAuC,qBAAqB,SAAO;AACnH,gBAAM,gBAAgB,SAAS,KAAK,qBAAqB;AACzD,iBAAO,cAAc,QAAQ,EAAE,KAAK,qBAAmB;AACrD,kBAAM,SAAS,KAAK,oBAAoB,iBAAiB,iBAAiB;AAC1E,kBAAM,WAAW,gBAAgB,OAAO,YAAU,OAAO,QAAQ,MAAM,MAAM,EAAE;AAE/E,mBAAO,mBAAmB,QAAQ,UAAU,oBAAkB,cAAc,OAAO,eAAe,QAAQ,CAAC,EAAE,KAAK,MAAM,QAAQ;AAAA,UAClI,CAAC;AAAA,QACH,CAAC,EAAE,MAAM,MAAM;AAKb,iBAAO,CAAC;AAAA,QACV,CAAC;AAMD,YAAI,KAAK,YAAY;AACnB,qBAAW,kBAAkB,iBAAiB;AAC5C,iBAAK,WAAW,WAAW,KAAK,6BAA6B,eAAe,QAAQ,CAAC;AAAA,UACvF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iDAAiD;AAC/C,SAAK,0BAA0B,KAAK,MAAM,kBAAkB,2BAA+D,qCAAqC,MAAM;AACpK,aAAO,KAAK,wCAAwC,EAAE,KAAK,MAAM,KAAK,oCAAoC,CAAC,EAAE,KAAK,MAAM,KAAK,+CAA+C,CAAC;AAAA,IAC/K,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,cAAc,QAAQ;AACpB,WAAO,SAAS,OAAO,YAAY,KAAK,WAAW;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBAAgB,KAAK;AACnB,QAAI,KAAK,gBAAgB;AACvB,aAAO,mBAAmB,QAAQ,IAAI;AAAA,IACxC;AACA,UAAM,QAAQ,mBAAmB,GAAG;AACpC,WAAO,MAAM,IAAI,kBAAkB,EAAE,KAAK,oBAAkB;AAC1D,YAAM,sBAAsB,mBAAmB,QAAQ,KAAK,YAAY,eAAe,kBAAkB,2BAA2B,KAAK,CAAC,KAAK,gBAAgB,eAAe,OAAO;AAUrL,UAAI,qBAAqB;AACvB,YAAI,KAAK,cAAc,cAAc,KAAK,KAAK,gBAAgB;AAC7D,iBAAO;AAAA,QACT;AACA,YAAI,CAAC,KAAK,cAAc,cAAc,GAAG;AACvC,cAAI,CAAC,eAAe,yBAAyB;AAa3C,kBAAM,IAAI,eAAe,KAAK,qBAAqB,iCAAiC;AAAA,UACtF;AACA,iBAAO;AAAA,QACT;AAAA,MACF;AACA,UAAI,KAAK,kBAAkB,KAAK,cAAc;AAC5C,eAAO;AAAA,MACT;AACA,aAAO,oBAAoB,GAAG,EAAE,QAAQ,EAAE,KAAK,qBAAmB;AAGhE,cAAM,qBAAqB,KAAK,oBAAoB,iBAAiB,2BAA2B,EAAE,KAAK,iBAAe;AACpH,cAAI,KAAK,aAAa,YAAY,UAAU;AAC1C,kBAAM,mCAAmC,CAAC,KAAK,kBAAkB,YAAY;AAC7E,kBAAM,iCAAiC,CAAC,KAAK,gBAAgB,YAAY;AACzE,kBAAM,iCAAiC,KAAK,mBAAmB,YAAY;AAC3E,gBAAI,oCAAoC,kCAAkC,gCAAgC;AACxG,qBAAO;AAAA,YACT;AAAA,UACF;AACA,iBAAO;AAAA,QACT,CAAC;AACD,eAAO,uBAAuB;AAAA,MAChC,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,qBAAmB;AACzB,UAAI,KAAK,cAAc,iBAAiB;AACtC,iBAAS,WAAW,UAAU,kBAAkB,OAAO,QAAQ,gCAAgC;AAAA,MACjG;AACA,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA,EACM,WAAW;AAAA;AAGf,WAAK,WAAW;AAChB,WAAK,kBAAkB;AACvB,UAAI,KAAK,yBAAyB;AAChC,aAAK,wBAAwB,OAAO;AACpC,aAAK,0BAA0B;AAAA,MACjC;AACA,WAAK,wBAAwB;AAC7B,WAAK,uBAAuB;AAG5B,YAAM,KAAK,SAAS,eAAe,YAAY,aAAa,CAAC,sBAAsB,qBAAqB,GAAG,iBAAe;AACxH,cAAM,yBAAyB,IAAI,qBAAqB,aAAa,eAAe,OAAO;AAC3F,eAAO,KAAK,0BAA0B,sBAAsB,EAAE,KAAK,MAAM,KAAK,qBAAqB,sBAAsB,CAAC;AAAA,MAC5H,CAAC;AACD,WAAK,SAAS,MAAM;AAGpB,WAAK,yBAAyB;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,SAAS,qBAAqB;AAChD,WAAO,QAAQ,OAAO,YAAU,KAAK,YAAY,OAAO,cAAc,mBAAmB,KAAK,CAAC,KAAK,gBAAgB,OAAO,QAAQ,CAAC;AAAA,EACtI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,mBAAmB;AACjB,WAAO,KAAK,eAAe,oBAAoB,YAAY,SAAO;AAChE,aAAO,oBAAoB,GAAG,EAAE,QAAQ,EAAE,KAAK,aAAW,KAAK,oBAAoB,SAAS,iBAAiB,EAAE,IAAI,oBAAkB,eAAe,QAAQ,CAAC;AAAA,IAC/J,CAAC;AAAA,EACH;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK;AAAA,EACd;AAAA,EACA,kBAAkB;AAChB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,iBAAiB,MAAM,cAAc;AACnC,WAAO,uBAAuB,QAAQ,MAAM,KAAK,YAAY,cAAc,KAAK,iBAAiB;AAAA,EACnG;AAAA,EACA,iBAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EACA,yBAAyB;AACvB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,gBAAgB,MAAM;AACpB,WAAO,IAAI,sBAAsB,MAAM,KAAK,WAAW,iBAAiB,UAAU;AAAA,EACpF;AAAA,EACA,wBAAwB,MAAM;AAC5B,WAAO,8BAA8B,QAAQ,KAAK,YAAY,IAAI;AAAA,EACpE;AAAA,EACA,iBAAiB;AACf,WAAO,KAAK;AAAA,EACd;AAAA,EACA,eAAe,QAAQ,MAAM,sBAAsB;AACjD,aAAS,WAAW,yBAAyB,MAAM;AACnD,UAAM,eAAe,SAAS,aAAa,aAAa;AACxD,UAAM,eAAe,gBAAgB,KAAK,aAAa;AACvD,QAAI;AAGJ,WAAO,KAAK,SAAS,eAAe,QAAQ,cAAc,cAAc,iBAAe;AACrF,+BAAyB,IAAI,qBAAqB,aAAa,KAAK,iBAAiB,KAAK,eAAe,KAAK,IAAI,eAAe,OAAO;AACxI,UAAI,SAAS,qBAAqB;AAMhC,eAAO,KAAK,mBAAmB,sBAAsB,EAAE,KAAK,uBAAqB;AAC/E,cAAI,mBAAmB;AACrB;AAAA;AAAA,cAA+B;AAAA;AAAA,UACjC;AACA,iBAAO,KAAK,gBAAgB,sBAAsB;AAAA,QACpD,CAAC,EAAE,KAAK,uBAAqB;AAC3B,cAAI,CAAC,mBAAmB;AACtB,qBAAS,8CAA8C,MAAM,IAAI;AACjE,iBAAK,YAAY;AACjB,iBAAK,MAAM,iBAAiB,MAAM,KAAK,qBAAqB,KAAK,CAAC;AAClE,kBAAM,IAAI,eAAe,KAAK,qBAAqB,4BAA4B;AAAA,UACjF;AACA,iBAAO,qBAAqB,sBAAsB;AAAA,QACpD,CAAC,EAAE,KAAK,YAAU;AAChB,iBAAO,KAAK,4BAA4B,sBAAsB,EAAE,KAAK,MAAM,MAAM;AAAA,QACnF,CAAC;AAAA,MACH,OAAO;AACL,eAAO,KAAK,8BAA8B,sBAAsB,EAAE,KAAK,MAAM,qBAAqB,sBAAsB,CAAC;AAAA,MAC3H;AAAA,IACF,CAAC,EAAE,KAAK,YAAU;AAChB,6BAAuB,sBAAsB;AAC7C,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,8BAA8B,KAAK;AACjC,UAAM,QAAQ,mBAAmB,GAAG;AACpC,WAAO,MAAM,IAAI,kBAAkB,EAAE,KAAK,oBAAkB;AAC1D,YAAM,sBAAsB,mBAAmB,QAAQ,KAAK,YAAY,eAAe,kBAAkB,2BAA2B,KAAK,CAAC,KAAK,gBAAgB,eAAe,OAAO;AACrL,UAAI,uBAAuB,CAAC,KAAK,cAAc,cAAc,GAAG;AAC9D,YAAI,CAAC,KAAK,mBAAmB,CAAC,KAAK,2BAA2B,CAAC,eAAe,0BAA0B;AACtG,gBAAM,IAAI,eAAe,KAAK,qBAAqB,iCAAiC;AAAA,QACtF;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,4BAA4B,KAAK;AAC/B,UAAM,aAAa;AAAA,MACjB,SAAS,KAAK;AAAA,MACd,yBAAyB,KAAK;AAAA,MAC9B,kBAAkB,KAAK,IAAI;AAAA,IAC7B;AACA,WAAO,mBAAmB,GAAG,EAAE,IAAI,oBAAoB,UAAU;AAAA,EACnE;AAAA,EACA,OAAO,cAAc;AACnB,WAAO,SAAS,YAAY;AAAA,EAC9B;AAAA;AAAA,EAEA,0BAA0B,KAAK;AAC7B,UAAM,QAAQ,mBAAmB,GAAG;AACpC,WAAO,MAAM,IAAI,kBAAkB,EAAE,KAAK,mBAAiB;AACzD,UAAI,KAAK,cAAc,aAAa,GAAG;AACrC,iBAAS,WAAW,0BAA0B;AAC9C,eAAO,MAAM,OAAO,kBAAkB;AAAA,MACxC,OAAO;AACL,eAAO,mBAAmB,QAAQ;AAAA,MACpC;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,YAAY,cAAc,UAAU;AAClC,UAAM,MAAM,KAAK,IAAI;AACrB,UAAM,gBAAgB,MAAM;AAC5B,UAAM,gBAAgB;AACtB,QAAI,eAAe,eAAe;AAChC,aAAO;AAAA,IACT,WAAW,eAAe,eAAe;AACvC,eAAS,kDAAkD,YAAY,MAAM,aAAa,EAAE;AAC5F,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EACA,0BAA0B;AACxB,QAAI,KAAK,aAAa,QAAQ,OAAO,KAAK,SAAS,qBAAqB,YAAY;AAClF,WAAK,4BAA4B,MAAM;AACrC,aAAK,MAAM,iBAAiB,MAAM;AAChC,eAAK,eAAe,KAAK,SAAS,oBAAoB;AACtD,iBAAO,KAAK,wCAAwC;AAAA,QACtD,CAAC;AAAA,MACH;AACA,WAAK,SAAS,iBAAiB,oBAAoB,KAAK,yBAAyB;AACjF,WAAK,eAAe,KAAK,SAAS,oBAAoB;AAAA,IACxD;AAAA,EACF;AAAA,EACA,0BAA0B;AACxB,QAAI,KAAK,2BAA2B;AAClC,WAAK,SAAS,oBAAoB,oBAAoB,KAAK,yBAAyB;AACpF,WAAK,4BAA4B;AAAA,IACnC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,yBAAyB;AACvB,QAAI;AACJ,QAAI,SAAS,KAAK,KAAK,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,sBAAsB,YAAY;AACvG,WAAK,sBAAsB,MAAM;AAI/B,aAAK,kBAAkB;AACvB,cAAM,+BAA+B;AACrC,YAAI,SAAS,MAAM,UAAU,WAAW,MAAM,4BAA4B,KAAK,UAAU,UAAU,MAAM,4BAA4B,IAAI;AAKvI,eAAK,MAAM;AAAA;AAAA,YAA8C;AAAA,UAAI;AAAA,QAC/D;AACA,aAAK,MAAM,iBAAiB,MAAM;AAGhC,iBAAO,KAAK,SAAS;AAAA,QACvB,CAAC;AAAA,MACH;AACA,WAAK,OAAO,iBAAiB,YAAY,KAAK,mBAAmB;AAAA,IACnE;AAAA,EACF;AAAA,EACA,yBAAyB;AACvB,QAAI,KAAK,qBAAqB;AAC5B,WAAK,OAAO,oBAAoB,YAAY,KAAK,mBAAmB;AACpE,WAAK,sBAAsB;AAAA,IAC7B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,gBAAgB,UAAU;AACxB,QAAI;AACJ,QAAI;AACF,YAAM,cAAc,KAAK,KAAK,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,KAAK,6BAA6B,QAAQ,CAAC,OAAO;AAC5I,eAAS,WAAW,WAAW,QAAQ,KAAK,YAAY,OAAO,QAAQ,0BAA0B;AACjG,aAAO;AAAA,IACT,SAAS,GAAG;AAEV,eAAS,WAAW,oCAAoC,CAAC;AACzD,aAAO;AAAA,IACT;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB;AAClB,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,QAAI;AACF,WAAK,WAAW,QAAQ,KAAK,6BAA6B,KAAK,QAAQ,GAAG,OAAO,KAAK,IAAI,CAAC,CAAC;AAAA,IAC9F,SAAS,GAAG;AAEV,eAAS,mCAAmC,CAAC;AAAA,IAC/C;AAAA,EACF;AAAA;AAAA,EAEA,2BAA2B;AACzB,QAAI,CAAC,KAAK,YAAY;AACpB;AAAA,IACF;AACA,QAAI;AACF,WAAK,WAAW,WAAW,KAAK,6BAA6B,KAAK,QAAQ,CAAC;AAAA,IAC7E,SAAS,GAAG;AAAA,IAEZ;AAAA,EACF;AAAA,EACA,6BAA6B,UAAU;AACrC,WAAO,GAAG,0BAA0B,IAAI,KAAK,cAAc,IAAI,QAAQ;AAAA,EACzE;AACF;AAIA,SAAS,mBAAmB,KAAK;AAC/B,SAAO,SAAS,KAAK,oBAAoB;AAC3C;AAIA,SAAS,oBAAoB,KAAK;AAChC,SAAO,SAAS,KAAK,qBAAqB;AAC5C;AAKA,SAAS,uBAAuB,YAAY,gBAAgB;AAQ1D,MAAI,WAAW,WAAW;AAC1B,MAAI,CAAC,WAAW,mBAAmB;AACjC,gBAAY,MAAM,WAAW;AAAA,EAC/B;AACA,SAAO,eAAe,iBAAiB,MAAM,WAAW;AAC1D;AACA,SAAe,0BAA0B,gBAAgB;AAAA;AACvD,QAAI,CAAC,SAAS,YAAY,GAAG;AAC3B,aAAO,QAAQ,QAAQ;AAAA,IACzB;AACA,UAAM,SAAS,iBAAiB;AAChC,UAAM,SAAS,OAAO,MAAM;AAAA,EAC9B;AAAA;AAmCA,SAAS,WAAW,QAAQ,OAAO,YAAY,OAAO,UAAU;AAC9D,WAAS,CAAC,GAAG,MAAM;AACnB,UAAQ,CAAC,GAAG,KAAK;AACjB,SAAO,KAAK,UAAU;AACtB,QAAM,KAAK,UAAU;AACrB,QAAM,OAAO,OAAO;AACpB,QAAM,OAAO,MAAM;AACnB,MAAI,IAAI;AACR,MAAI,IAAI;AACR,SAAO,IAAI,QAAQ,IAAI,MAAM;AAC3B,UAAM,MAAM,WAAW,OAAO,CAAC,GAAG,MAAM,CAAC,CAAC;AAC1C,QAAI,MAAM,GAAG;AAGX,eAAS,OAAO,GAAG,CAAC;AAAA,IACtB,WAAW,MAAM,GAAG;AAGlB,YAAM,MAAM,GAAG,CAAC;AAAA,IAClB,OAAO;AACL;AACA;AAAA,IACF;AAAA,EACF;AACA,SAAO,IAAI,MAAM;AACf,UAAM,MAAM,GAAG,CAAC;AAAA,EAClB;AACA,SAAO,IAAI,MAAM;AACf,aAAS,OAAO,GAAG,CAAC;AAAA,EACtB;AACF;AAUA,SAAS,sBAAsB,MAAM,OAAO;AAC1C,MAAI,KAAK,WAAW,MAAM,QAAQ;AAChC,WAAO;AAAA,EACT;AACA,WAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,EAAE,GAAG;AACpC,QAAI,KAAK,CAAC,MAAM,MAAM,CAAC,GAAG;AACxB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAkBA,IAAM,YAAY;AAQlB,IAAM,8BAA8B,IAAI,KAAK;AAS7C,IAAM,iBAAN,MAAqB;AAAA,EACnB,YACA,aAAa,aAAa,aAAa,YAAY;AACjD,SAAK,cAAc;AACnB,SAAK,cAAc;AACnB,SAAK,aAAa;AAOlB,SAAK,qBAAqB,IAAI,UAAU,mBAAmB;AAG3D,SAAK,mBAAmB,IAAI,UAAU,OAAK,eAAe,CAAC,GAAG,YAAY;AAO1E,SAAK,0BAA0B,oBAAI,IAAI;AACvC,SAAK,kBAAkB,YAAY,uBAAuB;AAC1D,SAAK,cAAc,YAAY,eAAe;AAC9C,SAAK,cAAc,YAAY,eAAe;AAC9C,SAAK,yBAAyB,WAAW;AAAA,EAC3C;AAAA,EACA,yBAAyB,MAAM;AAG7B,SAAK,uBAAuB,KAAK,YAAY,wBAAwB,IAAI;AACzE,SAAK,eAAe,KAAK,YAAY,gBAAgB,IAAI;AACzD,SAAK,gBAAgB,KAAK,YAAY,iBAAiB,MAAM,KAAK,YAAY;AAC9E,SAAK,iBAAiB,IAAI,mBAAmB,KAAK,iBAAiB,KAAK,eAAe,KAAK,sBAAsB,KAAK,YAAY;AACnI,SAAK,gBAAgB,gBAAgB,KAAK,YAAY;AACtD,SAAK,YAAY,WAAW,KAAK,gBAAgB,KAAK,YAAY;AAAA,EACpE;AAAA,EACA,eAAe,kBAAkB;AAC/B,WAAO,KAAK,YAAY,eAAe,mBAAmB,qBAAqB,SAAO,iBAAiB,QAAQ,KAAK,KAAK,kBAAkB,CAAC;AAAA,EAC9I;AACF;AACA,SAAS,cACT,aAAa,aAAa,aAAa,YAAY;AACjD,SAAO,IAAI,eAAe,aAAa,aAAa,aAAa,UAAU;AAC7E;AASA,SAAe,2BAA2B,YAAY,MAAM;AAAA;AAC1D,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,SAAS,MAAM,eAAe,YAAY,eAAe,sBAAsB,YAAY,SAAO;AAGtG,UAAI;AACJ,aAAO,eAAe,cAAc,sBAAsB,GAAG,EAAE,KAAK,wBAAsB;AACxF,qBAAa;AACb,uBAAe,yBAAyB,IAAI;AAC5C,eAAO,eAAe,cAAc,sBAAsB,GAAG;AAAA,MAC/D,CAAC,EAAE,KAAK,gBAAc;AACpB,cAAM,kBAAkB,CAAC;AACzB,cAAM,gBAAgB,CAAC;AAEvB,YAAI,cAAc,eAAe;AACjC,mBAAW,SAAS,YAAY;AAC9B,0BAAgB,KAAK,MAAM,OAAO;AAClC,qBAAW,YAAY,MAAM,WAAW;AACtC,0BAAc,YAAY,IAAI,SAAS,GAAG;AAAA,UAC5C;AAAA,QACF;AACA,mBAAW,SAAS,YAAY;AAC9B,wBAAc,KAAK,MAAM,OAAO;AAChC,qBAAW,YAAY,MAAM,WAAW;AACtC,0BAAc,YAAY,IAAI,SAAS,GAAG;AAAA,UAC5C;AAAA,QACF;AAGA,eAAO,eAAe,eAAe,aAAa,KAAK,WAAW,EAAE,KAAK,uBAAqB;AAC5F,iBAAO;AAAA,YACL;AAAA,YACA;AAAA,YACA;AAAA,UACF;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAEA,SAAS,uBAAuB,YAAY,WAAW;AACrD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,iBAAiB,UAAU,IAAI;AACrC,QAAM,OAAO,UAAU,OAAO,CAACC,OAAM,MAAMA,MAAK,IAAI,EAAE,GAAG,GAAG,eAAe,CAAC;AAC5E,MAAI;AACJ,MAAI;AACJ,SAAO,eAAe,YAAY,eAAe,2BAA2B,aAAa,SAAO;AAO9F,QAAI,aAAa,mBAAmB;AACpC,QAAI,2BAA2B,eAAe;AAC9C,WAAO,eAAe,gBAAgB,WAAW,KAAK,IAAI,EAAE,KAAK,UAAQ;AACvE,mBAAa;AACb,iBAAW,QAAQ,CAAC,KAAKnC,SAAQ;AAC/B,YAAI,CAACA,KAAI,gBAAgB,GAAG;AAC1B,qCAA2B,yBAAyB,IAAI,GAAG;AAAA,QAC7D;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM;AAIZ,aAAO,eAAe,eAAe,sBAAsB,KAAK,UAAU;AAAA,IAC5E,CAAC,EAAE,KAAK,UAAQ;AACd,2BAAqB;AAMrB,YAAM,gBAAgB,CAAC;AACvB,iBAAW,YAAY,WAAW;AAChC,cAAM,YAAY,yBAAyB,UAAU,mBAAmB,IAAI,SAAS,GAAG,EAAE,iBAAiB;AAC3G,YAAI,aAAa,MAAM;AAIrB,wBAAc,KAAK,IAAI,cAAc,SAAS,KAAK,WAAW,iBAAiB,UAAU,MAAM,QAAQ,GAAG,aAAa,OAAO,IAAI,CAAC,CAAC;AAAA,QACtI;AAAA,MACF;AACA,aAAO,eAAe,cAAc,iBAAiB,KAAK,gBAAgB,eAAe,SAAS;AAAA,IACpG,CAAC,EAAE,KAAK,WAAS;AACf,sBAAgB;AAChB,YAAM,WAAW,MAAM,wBAAwB,oBAAoB,wBAAwB;AAC3F,aAAO,eAAe,qBAAqB,aAAa,KAAK,MAAM,SAAS,QAAQ;AAAA,IACtF,CAAC;AAAA,EACH,CAAC,EAAE,KAAK,OAAO;AAAA,IACb,SAAS,cAAc;AAAA,IACvB,SAAS,yCAAyC,kBAAkB;AAAA,EACtE,EAAE;AACJ;AAeA,SAAS,2BAA2B,YAAY,aAAa;AAC3D,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,qBAAqB,qBAAqB,SAAO;AAChG,UAAM,WAAW,YAAY,MAAM,KAAK;AACxC,UAAM,iBAAiB,eAAe,gBAAgB,gBAAgB;AAAA,MACpE,eAAe;AAAA;AAAA,IACjB,CAAC;AACD,WAAO,4BAA4B,gBAAgB,KAAK,aAAa,cAAc,EAAE,KAAK,MAAM,eAAe,MAAM,GAAG,CAAC,EAAE,KAAK,MAAM,eAAe,cAAc,wBAAwB,GAAG,CAAC,EAAE,KAAK,MAAM,eAAe,qBAAqB,yBAAyB,KAAK,UAAU,YAAY,MAAM,OAAO,CAAC,EAAE,KAAK,MAAM,eAAe,eAAe,0CAA0C,KAAK,4BAA4B,WAAW,CAAC,CAAC,EAAE,KAAK,MAAM,eAAe,eAAe,aAAa,KAAK,QAAQ,CAAC;AAAA,EAC7f,CAAC;AACH;AACA,SAAS,4BAA4B,aAAa;AAChD,MAAI,SAAS,eAAe;AAC5B,WAAS,IAAI,GAAG,IAAI,YAAY,gBAAgB,QAAQ,EAAE,GAAG;AAC3D,UAAM,iBAAiB,YAAY,gBAAgB,CAAC;AACpD,QAAI,eAAe,iBAAiB,SAAS,GAAG;AAC9C,eAAS,OAAO,IAAI,YAAY,MAAM,UAAU,CAAC,EAAE,GAAG;AAAA,IACxD;AAAA,EACF;AACA,SAAO;AACT;AAOA,SAAS,sBAAsB,YAAY,SAAS;AAClD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,gBAAgB,qBAAqB,SAAO;AAC3F,QAAI;AACJ,WAAO,eAAe,cAAc,oBAAoB,KAAK,OAAO,EAAE,KAAK,WAAS;AAClF,iBAAW,UAAU,IAAI;AACzB,qBAAe,MAAM,KAAK;AAC1B,aAAO,eAAe,cAAc,oBAAoB,KAAK,KAAK;AAAA,IACpE,CAAC,EAAE,KAAK,MAAM,eAAe,cAAc,wBAAwB,GAAG,CAAC,EAAE,KAAK,MAAM,eAAe,qBAAqB,yBAAyB,KAAK,cAAc,OAAO,CAAC,EAAE,KAAK,MAAM,eAAe,eAAe,0CAA0C,KAAK,YAAY,CAAC,EAAE,KAAK,MAAM,eAAe,eAAe,aAAa,KAAK,YAAY,CAAC;AAAA,EAC/V,CAAC;AACH;AAOA,SAAS,0CAA0C,YAAY;AAC7D,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,uCAAuC,YAAY,SAAO,eAAe,cAAc,gCAAgC,GAAG,CAAC;AAC9K;AAKA,SAAS,uCAAuC,YAAY;AAC1D,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,oCAAoC,YAAY,SAAO,eAAe,YAAY,6BAA6B,GAAG,CAAC;AACtK;AASA,SAAS,uCAAuC,YAAY,aAAa;AACvE,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,gBAAgB,YAAY;AAClC,MAAI,2BAA2B,eAAe;AAC9C,SAAO,eAAe,YAAY,eAAe,sBAAsB,qBAAqB,SAAO;AACjG,UAAM,iBAAiB,eAAe,gBAAgB,gBAAgB;AAAA,MACpE,eAAe;AAAA;AAAA,IACjB,CAAC;AAED,+BAA2B,eAAe;AAC1C,UAAM,WAAW,CAAC;AAClB,gBAAY,cAAc,QAAQ,CAAC,QAAQ,aAAa;AACtD,YAAM,gBAAgB,yBAAyB,IAAI,QAAQ;AAC3D,UAAI,CAAC,eAAe;AAClB;AAAA,MACF;AAIA,eAAS,KAAK,eAAe,YAAY,mBAAmB,KAAK,OAAO,kBAAkB,QAAQ,EAAE,KAAK,MAAM;AAC7G,eAAO,eAAe,YAAY,gBAAgB,KAAK,OAAO,gBAAgB,QAAQ;AAAA,MACxF,CAAC,CAAC;AACF,UAAI,gBAAgB,cAAc,mBAAmB,IAAI,qBAAqB;AAC9E,UAAI,YAAY,iBAAiB,IAAI,QAAQ,MAAM,MAAM;AACvD,wBAAgB,cAAc,gBAAgB,WAAW,mBAAmB,gBAAgB,IAAI,CAAC,EAAE,iCAAiC,gBAAgB,IAAI,CAAC;AAAA,MAC3J,WAAW,OAAO,YAAY,oBAAoB,IAAI,GAAG;AACvD,wBAAgB,cAAc,gBAAgB,OAAO,aAAa,aAAa;AAAA,MACjF;AACA,iCAA2B,yBAAyB,OAAO,UAAU,aAAa;AAGlF,UAAI,wBAAwB,eAAe,eAAe,MAAM,GAAG;AACjE,iBAAS,KAAK,eAAe,YAAY,iBAAiB,KAAK,aAAa,CAAC;AAAA,MAC/E;AAAA,IACF,CAAC;AACD,QAAI,cAAc,mBAAmB;AACrC,QAAI,uBAAuB,eAAe;AAC1C,gBAAY,gBAAgB,QAAQ,SAAO;AACzC,UAAI,YAAY,uBAAuB,IAAI,GAAG,GAAG;AAC/C,iBAAS,KAAK,eAAe,YAAY,kBAAkB,oBAAoB,KAAK,GAAG,CAAC;AAAA,MAC1F;AAAA,IACF,CAAC;AAGD,aAAS,KAAK,6BAA6B,KAAK,gBAAgB,YAAY,eAAe,EAAE,KAAK,YAAU;AAC1G,oBAAc,OAAO;AACrB,6BAAuB,OAAO;AAAA,IAChC,CAAC,CAAC;AAKF,QAAI,CAAC,cAAc,QAAQ,gBAAgB,IAAI,CAAC,GAAG;AACjD,YAAM,sBAAsB,eAAe,YAAY,6BAA6B,GAAG,EAAE,KAAK,+BAA6B;AACzH,eAAO,eAAe,YAAY,mBAAmB,KAAK,IAAI,uBAAuB,aAAa;AAAA,MACpG,CAAC;AACD,eAAS,KAAK,mBAAmB;AAAA,IACnC;AACA,WAAO,mBAAmB,QAAQ,QAAQ,EAAE,KAAK,MAAM,eAAe,MAAM,GAAG,CAAC,EAAE,KAAK,MAAM,eAAe,eAAe,wBAAwB,KAAK,aAAa,oBAAoB,CAAC,EAAE,KAAK,MAAM,WAAW;AAAA,EACpN,CAAC,EAAE,KAAK,iBAAe;AACrB,mBAAe,qBAAqB;AACpC,WAAO;AAAA,EACT,CAAC;AACH;AAWA,SAAS,6BAA6B,KAAK,gBAAgB,WAAW;AACpE,MAAI,cAAc,eAAe;AACjC,MAAI,uBAAuB,eAAe;AAC1C,YAAU,QAAQ,OAAK,cAAc,YAAY,IAAI,CAAC,CAAC;AACvD,SAAO,eAAe,WAAW,KAAK,WAAW,EAAE,KAAK,kBAAgB;AACtE,QAAI,mBAAmB,mBAAmB;AAC1C,cAAU,QAAQ,CAAC,KAAKA,SAAQ;AAC9B,YAAM,cAAc,aAAa,IAAI,GAAG;AAExC,UAAIA,KAAI,gBAAgB,MAAM,YAAY,gBAAgB,GAAG;AAC3D,+BAAuB,qBAAqB,IAAI,GAAG;AAAA,MACrD;AAKA,UAAIA,KAAI,aAAa,KAAKA,KAAI,QAAQ,QAAQ,gBAAgB,IAAI,CAAC,GAAG;AAIpE,uBAAe,YAAY,KAAKA,KAAI,QAAQ;AAC5C,2BAAmB,iBAAiB,OAAO,KAAKA,IAAG;AAAA,MACrD,WAAW,CAAC,YAAY,gBAAgB,KAAKA,KAAI,QAAQ,UAAU,YAAY,OAAO,IAAI,KAAKA,KAAI,QAAQ,UAAU,YAAY,OAAO,MAAM,KAAK,YAAY,kBAAkB;AAC/K,uBAAe,SAASA,IAAG;AAC3B,2BAAmB,iBAAiB,OAAO,KAAKA,IAAG;AAAA,MACrD,OAAO;AACL,iBAAS,WAAW,uCAAuC,KAAK,sBAAsB,YAAY,SAAS,mBAAmBA,KAAI,OAAO;AAAA,MAC3I;AAAA,IACF,CAAC;AACD,WAAO;AAAA,MACL;AAAA,MACA;AAAA,IACF;AAAA,EACF,CAAC;AACH;AAYA,SAAS,wBAAwB,eAAe,eAAe,QAAQ;AAErE,MAAI,cAAc,YAAY,oBAAoB,MAAM,GAAG;AACzD,WAAO;AAAA,EACT;AAMA,QAAM,YAAY,cAAc,gBAAgB,eAAe,IAAI,cAAc,gBAAgB,eAAe;AAChH,MAAI,aAAa,6BAA6B;AAC5C,WAAO;AAAA,EACT;AAMA,QAAM,UAAU,OAAO,eAAe,OAAO,OAAO,kBAAkB,OAAO,OAAO,iBAAiB;AACrG,SAAO,UAAU;AACnB;AAIA,SAAe,iCAAiC,YAAY,aAAa;AAAA;AACvE,UAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAI;AACF,YAAM,eAAe,YAAY,eAAe,0BAA0B,aAAa,SAAO;AAC5F,eAAO,mBAAmB,QAAQ,aAAa,gBAAc;AAC3D,iBAAO,mBAAmB,QAAQ,WAAW,WAAW,SAAO,eAAe,YAAY,kBAAkB,aAAa,KAAK,WAAW,UAAU,GAAG,CAAC,EAAE,KAAK,MAAM,mBAAmB,QAAQ,WAAW,aAAa,SAAO,eAAe,YAAY,kBAAkB,gBAAgB,KAAK,WAAW,UAAU,GAAG,CAAC,CAAC;AAAA,QAC5T,CAAC;AAAA,MACH,CAAC;AAAA,IACH,SAAS,GAAG;AACV,UAAI,4BAA4B,CAAC,GAAG;AAKlC,iBAAS,WAAW,wCAAwC,CAAC;AAAA,MAC/D,OAAO;AACL,cAAM;AAAA,MACR;AAAA,IACF;AACA,eAAW,cAAc,aAAa;AACpC,YAAM,WAAW,WAAW;AAC5B,UAAI,CAAC,WAAW,WAAW;AACzB,cAAM,aAAa,eAAe,mBAAmB,IAAI,QAAQ;AAEjE,cAAM,+BAA+B,WAAW;AAChD,cAAM,oBAAoB,WAAW,iCAAiC,4BAA4B;AAClG,uBAAe,qBAAqB,eAAe,mBAAmB,OAAO,UAAU,iBAAiB;AAAA,MAI1G;AAAA,IACF;AAAA,EACF;AAAA;AAOA,SAAS,+BAA+B,YAAY,cAAc;AAChE,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,2BAA2B,YAAY,SAAO;AAC7F,QAAI,iBAAiB,QAAW;AAC9B,qBAAe;AAAA,IACjB;AACA,WAAO,eAAe,cAAc,iCAAiC,KAAK,YAAY;AAAA,EACxF,CAAC;AACH;AAKA,SAAS,uBAAuB,YAAY,KAAK;AAC/C,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,iBAAiB,YAAY,SAAO,eAAe,eAAe,YAAY,KAAK,GAAG,CAAC;AAC1I;AASA,SAAS,yBAAyB,YAAY,QAAQ;AACpD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,mBAAmB,aAAa,SAAO;AACtF,QAAI;AACJ,WAAO,eAAe,YAAY,cAAc,KAAK,MAAM,EAAE,KAAK,YAAU;AAC1E,UAAI,QAAQ;AAIV,qBAAa;AACb,eAAO,mBAAmB,QAAQ,UAAU;AAAA,MAC9C,OAAO;AACL,eAAO,eAAe,YAAY,iBAAiB,GAAG,EAAE,KAAK,cAAY;AACvE,uBAAa,IAAI,WAAW,QAAQ,UAAU,uBAAkD,IAAI,qBAAqB;AACzH,iBAAO,eAAe,YAAY,cAAc,KAAK,UAAU,EAAE,KAAK,MAAM,UAAU;AAAA,QACxF,CAAC;AAAA,MACH;AAAA,IACF,CAAC;AAAA,EACH,CAAC,EAAE,KAAK,gBAAc;AAGpB,UAAM,mBAAmB,eAAe,mBAAmB,IAAI,WAAW,QAAQ;AAClF,QAAI,qBAAqB,QAAQ,WAAW,gBAAgB,UAAU,iBAAiB,eAAe,IAAI,GAAG;AAC3G,qBAAe,qBAAqB,eAAe,mBAAmB,OAAO,WAAW,UAAU,UAAU;AAC5G,qBAAe,iBAAiB,IAAI,QAAQ,WAAW,QAAQ;AAAA,IACjE;AACA,WAAO;AAAA,EACT,CAAC;AACH;AAMA,SAAS,wBAAwB,YAAY,aAAa,QAAQ;AAChE,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,WAAW,eAAe,iBAAiB,IAAI,MAAM;AAC3D,MAAI,aAAa,QAAW;AAC1B,WAAO,mBAAmB,QAAQ,eAAe,mBAAmB,IAAI,QAAQ,CAAC;AAAA,EACnF,OAAO;AACL,WAAO,eAAe,YAAY,cAAc,aAAa,MAAM;AAAA,EACrE;AACF;AASA,SAAe,wBAAwB,YAAY,UAAU,yBAAyB;AAAA;AACpF,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,aAAa,eAAe,mBAAmB,IAAI,QAAQ;AACjE,UAAM,OAAO,0BAA0B,cAAc;AACrD,QAAI;AACF,UAAI,CAAC,yBAAyB;AAC5B,cAAM,eAAe,YAAY,eAAe,kBAAkB,MAAM,SAAO;AAC7E,iBAAO,eAAe,YAAY,kBAAkB,aAAa,KAAK,UAAU;AAAA,QAClF,CAAC;AAAA,MACH;AAAA,IACF,SAAS,GAAG;AACV,UAAI,4BAA4B,CAAC,GAAG;AAMlC,iBAAS,WAAW,gDAAgD,QAAQ,KAAK,CAAC,EAAE;AAAA,MACtF,OAAO;AACL,cAAM;AAAA,MACR;AAAA,IACF;AACA,mBAAe,qBAAqB,eAAe,mBAAmB,OAAO,QAAQ;AACrF,mBAAe,iBAAiB,OAAO,WAAW,MAAM;AAAA,EAC1D;AAAA;AASA,SAAS,uBAAuB,YAAYK,QAAO,oBAAoB;AACrE,QAAM,iBAAiB,UAAU,UAAU;AAC3C,MAAI,+BAA+B,gBAAgB,IAAI;AACvD,MAAI,aAAa,eAAe;AAChC,SAAO,eAAe,YAAY;AAAA,IAAe;AAAA,IAAiB;AAAA;AAAA;AAAA,IAGlE,SAAO;AACL,aAAO,wBAAwB,gBAAgB,KAAK,cAAcA,MAAK,CAAC,EAAE,KAAK,gBAAc;AAC3F,YAAI,YAAY;AACd,yCAA+B,WAAW;AAC1C,iBAAO,eAAe,YAAY,2BAA2B,KAAK,WAAW,QAAQ,EAAE,KAAK,YAAU;AACpG,yBAAa;AAAA,UACf,CAAC;AAAA,QACH;AAAA,MACF,CAAC,EAAE,KAAK,MAAM,eAAe,YAAY,0BAA0B,KAAKA,QAAO,qBAAqB,+BAA+B,gBAAgB,IAAI,GAAG,qBAAqB,aAAa,eAAe,CAAC,CAAC,EAAE,KAAK,eAAa;AAC/N,uBAAe,gBAAgB,qBAAqBA,MAAK,GAAG,SAAS;AACrE,eAAO;AAAA,UACL;AAAA,UACA;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EAAC;AACH;AACA,SAAS,4BAA4B,gBAAgB,KAAK,aAAa,gBAAgB;AACrF,QAAM,QAAQ,YAAY;AAC1B,QAAM,UAAU,MAAM,KAAK;AAC3B,MAAI,eAAe,mBAAmB,QAAQ;AAC9C,UAAQ,QAAQ,YAAU;AACxB,mBAAe,aAAa,KAAK,MAAM,eAAe,SAAS,KAAK,MAAM,CAAC,EAAE,KAAK,CAAAL,SAAO;AACvF,YAAM,aAAa,YAAY,YAAY,IAAI,MAAM;AACrD,iBAAW,eAAe,IAAI;AAC9B,UAAIA,KAAI,QAAQ,UAAU,UAAU,IAAI,GAAG;AACzC,cAAM,sBAAsBA,MAAK,WAAW;AAC5C,YAAIA,KAAI,gBAAgB,GAAG;AAIzB,UAAAA,KAAI,YAAY,YAAY,aAAa;AACzC,yBAAe,SAASA,IAAG;AAAA,QAC7B;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACD,SAAO,aAAa,KAAK,MAAM,eAAe,cAAc,oBAAoB,KAAK,KAAK,CAAC;AAC7F;AAGA,SAAS,kCAAkC,YAAY,SAAS;AAC9D,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,oBAAoB,UAAU,eAAe,aAAa;AAChE,SAAO,eAAe,YAAY,eAAe,6BAA6B,YAAY,SAAO;AAC/F,WAAO,kBAAkB,mBAAmB,KAAK,OAAO,EAAE,KAAK,UAAQ;AACrE,UAAI,MAAM;AACR,eAAO,eAAe,eAAe,aAAa,KAAK,IAAI;AAAA,MAC7D,OAAO;AACL,eAAO,mBAAmB,QAAQ,IAAI;AAAA,MACxC;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;AAEA,SAAS,4CAA4C,YAAY,SAAS;AACxE,QAAM,oBAAoB,UAAU,UAAU,YAAY,cAAc,EAAE,aAAa;AACvF,oBAAkB,yBAAyB,OAAO;AACpD;AAEA,SAAS,2BAA2B,YAAY;AAC9C,QAAM,kBAAkB,UAAU,UAAU,YAAY,cAAc,EAAE,WAAW;AACnF,SAAO,gBAAgB,iBAAiB;AAC1C;AAEA,SAAS,0BAA0B,YAAY,UAAU;AACvD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,kBAAkB,UAAU,eAAe,WAAW;AAC5D,QAAM,mBAAmB,eAAe,mBAAmB,IAAI,QAAQ;AACvE,MAAI,kBAAkB;AACpB,WAAO,QAAQ,QAAQ,iBAAiB,MAAM;AAAA,EAChD,OAAO;AACL,WAAO,eAAe,YAAY,eAAe,mBAAmB,YAAY,SAAO;AACrF,aAAO,gBAAgB,uBAAuB,KAAK,QAAQ,EAAE,KAAK,gBAAc,aAAa,WAAW,SAAS,IAAI;AAAA,IACvH,CAAC;AAAA,EACH;AACF;AAQA,SAAS,gCAAgC,YAAYP,kBAAiB;AACpE,QAAM,iBAAiB,UAAU,UAAU;AAK3C,QAAM,WAAW,eAAe,wBAAwB,IAAIA,gBAAe,KAAK,gBAAgB,IAAI;AACpG,SAAO,eAAe,YAAY,eAAe,4BAA4B,YAAY,SAAO,eAAe,gBAAgB;AAAA,IAA0B;AAAA,IAAKA;AAAA,IAAiB,oCAAoC,UAAU,wBAAwB;AAAA;AAAA,IAAe,OAAO;AAAA,EAAgB,CAAC,EAAE,KAAK,iBAAe;AAChT,mBAAe,gBAAgBA,kBAAiB,WAAW;AAC3D,WAAO;AAAA,EACT,CAAC;AACH;AAGA,SAAS,eAAe,gBAAgBA,kBAAiB,aAAa;AACpE,MAAI,WAAW,eAAe,wBAAwB,IAAIA,gBAAe,KAAK,gBAAgB,IAAI;AAClG,cAAY,QAAQ,CAAC,GAAGO,SAAQ;AAC9B,QAAIA,KAAI,SAAS,UAAU,QAAQ,IAAI,GAAG;AACxC,iBAAWA,KAAI;AAAA,IACjB;AAAA,EACF,CAAC;AACD,iBAAe,wBAAwB,IAAIP,kBAAiB,QAAQ;AACtE;AAOA,SAAS,eAAe,YAAY;AAGlC,SAAO,cAAc,gBAAgB,aAAa,WAAW,mBAAmB,UAAU,EAAE,CAAC,CAAC;AAChG;AAQA,SAAe,gCAAgC,YAAY,iBAAiB,WAAW,YAAY;AAAA;AACjG,UAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAI,eAAe,eAAe;AAClC,QAAIe,eAAc,mBAAmB;AACrC,eAAW,aAAa,WAAW;AACjC,YAAM,cAAc,gBAAgB,cAAc,UAAU,SAAS,IAAI;AACzE,UAAI,UAAU,UAAU;AACtB,uBAAe,aAAa,IAAI,WAAW;AAAA,MAC7C;AACA,YAAMR,OAAM,gBAAgB,kBAAkB,SAAS;AACvD,MAAAA,KAAI,YAAY,gBAAgB,kBAAkB,UAAU,SAAS,QAAQ,CAAC;AAC9E,MAAAQ,eAAcA,aAAY,OAAO,aAAaR,IAAG;AAAA,IACnD;AACA,UAAM,iBAAiB,eAAe,gBAAgB,gBAAgB;AAAA,MACpE,eAAe;AAAA;AAAA,IACjB,CAAC;AAGD,UAAM,qBAAqB,MAAM,yBAAyB,gBAAgB,eAAe,UAAU,CAAC;AACpG,WAAO,eAAe,YAAY,eAAe,0BAA0B,aAAa,SAAO;AAC7F,aAAO,6BAA6B,KAAK,gBAAgBQ,YAAW,EAAE,KAAK,0BAAwB;AACjG,uBAAe,MAAM,GAAG;AACxB,eAAO;AAAA,MACT,CAAC,EAAE,KAAK,0BAAwB;AAC9B,eAAO,eAAe,YAAY,8BAA8B,KAAK,mBAAmB,QAAQ,EAAE,KAAK,MAAM,eAAe,YAAY,gBAAgB,KAAK,cAAc,mBAAmB,QAAQ,CAAC,EAAE,KAAK,MAAM,eAAe,eAAe,wBAAwB,KAAK,qBAAqB,kBAAkB,qBAAqB,oBAAoB,CAAC,EAAE,KAAK,MAAM,qBAAqB,gBAAgB;AAAA,MACpZ,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAKA,SAAS,yBAAyB,YAAY,gBAAgB;AAC5D,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,kBAAkB,YAAY,eAAe,UAAU;AAC7D,SAAO,eAAe,YAAY,eAAe,kBAAkB,YAAY,iBAAe;AAC5F,WAAO,eAAe,YAAY,kBAAkB,aAAa,eAAe,EAAE;AAAA,EACpF,CAAC,EAAE,KAAK,YAAU;AAChB,WAAO,CAAC,CAAC,UAAU,OAAO,WAAW,UAAU,eAAe,KAAK;AAAA,EACrE,CAAC;AACH;AAIA,SAAS,qBAAqB,YAAY,gBAAgB;AACxD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,eAAe,aAAa,iBAAe;AAC1F,WAAO,eAAe,YAAY,mBAAmB,aAAa,cAAc;AAAA,EAClF,CAAC;AACH;AAKA,SAAS,wBAAwB,YAAY,WAAW;AACtD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,eAAe,YAAY,eAAe,mBAAmB,YAAY,iBAAe,eAAe,YAAY,cAAc,aAAa,SAAS,CAAC;AACjK;AAIA,SAAe,yBAAyB,IAAY,IAAqC;AAAA,6CAAjD,YAAYH,QAAO,YAAY,eAAe,GAAG;AAMvF,UAAM,YAAY,MAAM,yBAAyB,YAAY,cAAc,iBAAiBA,OAAM,YAAY,CAAC,CAAC;AAChH,UAAM,iBAAiB,UAAU,UAAU;AAC3C,WAAO,eAAe,YAAY,eAAe,oBAAoB,aAAa,iBAAe;AAC/F,YAAM,WAAW,YAAYA,OAAM,QAAQ;AAG3C,UAAI,UAAU,gBAAgB,UAAU,QAAQ,KAAK,GAAG;AACtD,eAAO,eAAe,YAAY,eAAe,aAAaA,MAAK;AAAA,MACrE;AAEA,YAAM,gBAAgB,UAAU,gBAAgB,WAAW,mBAAmB,QAAQ;AACtF,qBAAe,qBAAqB,eAAe,mBAAmB,OAAO,cAAc,UAAU,aAAa;AAClH,aAAO,eAAe,YAAY,iBAAiB,aAAa,aAAa,EAAE,KAAK,MAAM,eAAe,YAAY,8BAA8B,aAAa,UAAU,QAAQ,CAAC,EAAE,KAAK,MAAM,eAAe,YAAY,gBAAgB,aAAa,WAAW,UAAU,QAAQ,CAAC,EAAE,KAAK,MAAM,eAAe,YAAY,eAAe,aAAaA,MAAK,CAAC;AAAA,IAClW,CAAC;AAAA,EACH;AAAA;AACA,SAAe,gCAAgC,YAAY,iBAAiB;AAAA;AAC1E,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,eAAe,eAAe;AACpC,UAAM,WAAW,CAAC;AAClB,WAAO,eAAe,YAAY,eAAe,qBAAqB,aAAa,iBAAe,aAAa,gBAAgB,WAAW,EAAE,KAAK,qBAAmB,WAAW,iBAAiB,iBAAiB,8BAA8B,gBAAc;AAC3P,eAAS,KAAK,aAAa,cAAc,aAAa,UAAU,CAAC;AAAA,IACnE,GAAG,gBAAc;AACf,eAAS,KAAK,aAAa,iBAAiB,aAAa,UAAU,CAAC;AAAA,IACtE,CAAC,CAAC,EAAE,KAAK,MAAM,mBAAmB,QAAQ,QAAQ,CAAC,CAAC;AAAA,EACtD;AAAA;AACA,SAAS,sCAAsC,YAAY,WAAW;AACpE,QAAM,iBAAiB,UAAU,UAAU;AAC3C,iBAAe,YAAY,2BAA2B;AACxD;AACA,SAAS,gCAAgC,YAAY;AACnD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,eAAe,eAAe;AACpC,SAAO,eAAe,YAAY,eAAe,sBAAsB,aAAa,iBAAe,aAAa,sBAAsB,WAAW,CAAC;AACpJ;AAsBA,IAAM,eAAN,MAAmB;AAAA,EACjB,cAAc;AAIZ,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EACA,IAAI,oBAAoB;AACtB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,2BAA2B,QAAQ;AACjC,SAAK,sBAAsB;AAAA,EAC7B;AACF;AAkBA,IAAM,kDAAkD;AAOxD,SAAS,6CAA6C;AAIpD,MAAI,SAAS,GAAG;AACd,WAAO;AAAA,EACT,WAAW,kBAAkB,MAAM,CAAC,IAAI,GAAG;AACzC,WAAO;AAAA,EACT,OAAO;AACL,WAAO;AAAA,EACT;AACF;AAuCA,IAAM,cAAN,MAAkB;AAAA,EAChB,cAAc;AACZ,SAAK,cAAc;AACnB,SAAK,2BAA2B;AAKhC,SAAK,qCAAqC;AAC1C,SAAK,mCAAmC,2CAA2C;AAAA,EACrF;AAAA;AAAA,EAEA,WAAW,gBAAgB,cAAc;AACvC,SAAK,qBAAqB;AAC1B,SAAK,eAAe;AACpB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA,EAEA,0BAA0B,aAAaA,QAAO,8BAA8B,YAAY;AAItF,UAAM,cAAc;AAAA,MAClB,QAAQ;AAAA,IACV;AACA,WAAO,KAAK,uBAAuB,aAAaA,MAAK,EAAE,KAAK,YAAU;AACpE,kBAAY,SAAS;AAAA,IACvB,CAAC,EAAE,KAAK,MAAM;AACZ,UAAI,YAAY,QAAQ;AACtB;AAAA,MACF;AACA,aAAO,KAAK,4BAA4B,aAAaA,QAAO,YAAY,4BAA4B,EAAE,KAAK,YAAU;AACnH,oBAAY,SAAS;AAAA,MACvB,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM;AACZ,UAAI,YAAY,QAAQ;AACtB;AAAA,MACF;AACA,YAAM,UAAU,IAAI,aAAa;AACjC,aAAO,KAAK,0BAA0B,aAAaA,QAAO,OAAO,EAAE,KAAK,YAAU;AAChF,oBAAY,SAAS;AACrB,YAAI,KAAK,0BAA0B;AACjC,iBAAO,KAAK,mBAAmB,aAAaA,QAAO,SAAS,OAAO,IAAI;AAAA,QACzE;AAAA,MACF,CAAC;AAAA,IACH,CAAC,EAAE,KAAK,MAAM,YAAY,MAAM;AAAA,EAClC;AAAA,EACA,mBAAmB,aAAaA,QAAO,SAAS,YAAY;AAC1D,QAAI,QAAQ,oBAAoB,KAAK,oCAAoC;AACvE,UAAI,YAAY,KAAK,SAAS,OAAO;AACnC,iBAAS,eAAe,gDAAgD,eAAeA,MAAK,GAAG,+DAA+D,yBAAyB,KAAK,oCAAoC,WAAW;AAAA,MAC7O;AACA,aAAO,mBAAmB,QAAQ;AAAA,IACpC;AACA,QAAI,YAAY,KAAK,SAAS,OAAO;AACnC,eAAS,eAAe,UAAU,eAAeA,MAAK,GAAG,SAAS,QAAQ,mBAAmB,+BAA+B,YAAY,uBAAuB;AAAA,IACjK;AACA,QAAI,QAAQ,oBAAoB,KAAK,mCAAmC,YAAY;AAClF,UAAI,YAAY,KAAK,SAAS,OAAO;AACnC,iBAAS,eAAe,sDAAsD,eAAeA,MAAK,GAAG,sDAAsD;AAAA,MAC7J;AACA,aAAO,KAAK,aAAa,oBAAoB,aAAa,cAAcA,MAAK,CAAC;AAAA,IAChF;AACA,WAAO,mBAAmB,QAAQ;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,aAAaA,QAAO;AACzC,QAAI,yBAAyBA,MAAK,GAAG;AAInC,aAAO,mBAAmB,QAAQ,IAAI;AAAA,IACxC;AACA,QAAI,SAAS,cAAcA,MAAK;AAChC,WAAO,KAAK,aAAa,aAAa,aAAa,MAAM,EAAE,KAAK,eAAa;AAC3E,UAAI,cAAc,GAAwB;AAExC,eAAO;AAAA,MACT;AACA,UAAIA,OAAM,UAAU,QAAQ,cAAc,GAA2B;AAQnE,QAAAA,SAAQ;AAAA,UAAeA;AAAA,UAAO;AAAA,UAAM;AAAA;AAAA,QAAyB;AAC7D,iBAAS,cAAcA,MAAK;AAAA,MAC9B;AACA,aAAO,KAAK,aAAa,2BAA2B,aAAa,MAAM,EAAE,KAAK,UAAQ;AACpF,cAAM,aAAa,eAAe,GAAG,IAAI;AACzC,eAAO,KAAK,mBAAmB,aAAa,aAAa,UAAU,EAAE,KAAK,sBAAoB;AAC5F,iBAAO,KAAK,aAAa,aAAa,aAAa,MAAM,EAAE,KAAK,YAAU;AACxE,kBAAM,kBAAkB,KAAK,WAAWA,QAAO,gBAAgB;AAC/D,gBAAI,KAAK,YAAYA,QAAO,iBAAiB,YAAY,OAAO,QAAQ,GAAG;AAOzE,qBAAO,KAAK,uBAAuB,aAAa;AAAA,gBAAeA;AAAA,gBAAO;AAAA,gBAAM;AAAA;AAAA,cAAyB,CAAC;AAAA,YACxG;AACA,mBAAO,KAAK,uBAAuB,aAAa,iBAAiBA,QAAO,MAAM;AAAA,UAChF,CAAC;AAAA,QACH,CAAC;AAAA,MACH,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,4BAA4B,aAAaA,QAAO,YAAY,8BAA8B;AACxF,QAAI,yBAAyBA,MAAK,GAAG;AAInC,aAAO,mBAAmB,QAAQ,IAAI;AAAA,IACxC;AAGA,QAAI,6BAA6B,QAAQ,gBAAgB,IAAI,CAAC,GAAG;AAC/D,aAAO,mBAAmB,QAAQ,IAAI;AAAA,IACxC;AACA,WAAO,KAAK,mBAAmB,aAAa,aAAa,UAAU,EAAE,KAAK,eAAa;AACrF,YAAM,kBAAkB,KAAK,WAAWA,QAAO,SAAS;AACxD,UAAI,KAAK,YAAYA,QAAO,iBAAiB,YAAY,4BAA4B,GAAG;AACtF,eAAO,mBAAmB,QAAQ,IAAI;AAAA,MACxC;AACA,UAAI,YAAY,KAAK,SAAS,OAAO;AACnC,iBAAS,eAAe,yDAAyD,6BAA6B,SAAS,GAAG,eAAeA,MAAK,CAAC;AAAA,MACjJ;AAGA,aAAO,KAAK,uBAAuB,aAAa,iBAAiBA,QAAO,oCAAoC,8BAA8B,wBAAwB,CAAC,EAAE,KAAK,aAAW,OAAO;AAAA,IAC9L,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,WAAWA,QAAO,WAAW;AAG3B,QAAI,eAAe,IAAI,UAAU,mBAAmBA,MAAK,CAAC;AAC1D,cAAU,QAAQ,CAAC,GAAG,aAAa;AACjC,UAAI,aAAaA,QAAO,QAAQ,GAAG;AACjC,uBAAe,aAAa,IAAI,QAAQ;AAAA,MAC1C;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,YAAYA,QAAO,uBAAuB,YAAY,0BAA0B;AAC9E,QAAIA,OAAM,UAAU,MAAM;AAExB,aAAO;AAAA,IACT;AACA,QAAI,WAAW,SAAS,sBAAsB,MAAM;AAGlD,aAAO;AAAA,IACT;AASA,UAAM,iBAAiBA,OAAM,cAAc,MAA4B,sBAAsB,KAAK,IAAI,sBAAsB,MAAM;AAClI,QAAI,CAAC,gBAAgB;AAEnB,aAAO;AAAA,IACT;AACA,WAAO,eAAe,oBAAoB,eAAe,QAAQ,UAAU,wBAAwB,IAAI;AAAA,EACzG;AAAA,EACA,0BAA0B,aAAaA,QAAO,SAAS;AACrD,QAAI,YAAY,KAAK,SAAS,OAAO;AACnC,eAAS,eAAe,gDAAgD,eAAeA,MAAK,CAAC;AAAA,IAC/F;AACA,WAAO,KAAK,mBAAmB,0BAA0B,aAAaA,QAAO,YAAY,IAAI,GAAG,OAAO;AAAA,EACzG;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,aAAa,gBAAgBA,QAAO,QAAQ;AAEjE,WAAO,KAAK,mBAAmB,0BAA0B,aAAaA,QAAO,MAAM,EAAE,KAAK,sBAAoB;AAE5G,qBAAe,QAAQ,OAAK;AAC1B,2BAAmB,iBAAiB,OAAO,EAAE,KAAK,CAAC;AAAA,MACrD,CAAC;AACD,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AACF;AAoBA,IAAM,0BAA0B;AAEhC,SAAS,+BAA+B,gBAAgB,UAAU;AAChE,SAAO,GAAG,uBAAuB,IAAI,cAAc,IAAI,QAAQ;AACjE;AAQA,IAAM,4BAA4B;AAElC,SAAS,iCAAiC,gBAAgB,MAAM,SAAS;AACvE,MAAI,cAAc,GAAG,yBAAyB,IAAI,cAAc,IAAI,OAAO;AAC3E,MAAI,KAAK,gBAAgB,GAAG;AAC1B,mBAAe,IAAI,KAAK,GAAG;AAAA,EAC7B;AACA,SAAO;AACT;AAGA,IAAM,0BAA0B;AAEhC,SAAS,uCAAuC,gBAAgB,UAAU;AACxE,SAAO,GAAG,uBAAuB,IAAI,cAAc,IAAI,QAAQ;AACjE;AAIA,IAAM,0BAA0B;AAEhC,SAAS,+BAA+B,gBAAgB;AACtD,SAAO,GAAG,uBAAuB,IAAI,cAAc;AACrD;AAMA,IAAM,2BAA2B;AACjC,SAAS,sBAAsB,gBAAgB;AAC7C,SAAO,GAAG,wBAAwB,IAAI,cAAc;AACtD;AAGA,IAAM,6BAA6B;AAEnC,SAAS,kCAAkC,gBAAgB;AACzD,SAAO,GAAG,0BAA0B,IAAI,cAAc;AACxD;AAkBA,IAAM,YAAY;AAMlB,IAAM,mBAAN,MAAM,kBAAiB;AAAA,EACrB,YAAY,MAAM,SAAS,OAAO,OAAO;AACvC,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBAAoB,MAAM,SAAS,OAAO;AAC/C,UAAM,gBAAgB,KAAK,MAAM,KAAK;AACtC,QAAI,YAAY,OAAO,kBAAkB,YAAY,CAAC,WAAW,gBAAgB,UAAU,EAAE,QAAQ,cAAc,KAAK,MAAM,OAAO,cAAc,UAAU,UAAa,OAAO,cAAc,UAAU;AACzM,QAAI,iBAAiB;AACrB,QAAI,aAAa,cAAc,OAAO;AACpC,kBAAY,OAAO,cAAc,MAAM,YAAY,YAAY,OAAO,cAAc,MAAM,SAAS;AACnG,UAAI,WAAW;AACb,yBAAiB,IAAI,eAAe,cAAc,MAAM,MAAM,cAAc,MAAM,OAAO;AAAA,MAC3F;AAAA,IACF;AACA,QAAI,WAAW;AACb,aAAO,IAAI,kBAAiB,MAAM,SAAS,cAAc,OAAO,cAAc;AAAA,IAChF,OAAO;AACL,eAAS,WAAW,0CAA0C,OAAO,MAAM,KAAK,EAAE;AAClF,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,mBAAmB;AACjB,UAAM,gBAAgB;AAAA,MACpB,OAAO,KAAK;AAAA,MACZ,cAAc,KAAK,IAAI;AAAA;AAAA,IACzB;AACA,QAAI,KAAK,OAAO;AACd,oBAAc,QAAQ;AAAA,QACpB,MAAM,KAAK,MAAM;AAAA,QACjB,SAAS,KAAK,MAAM;AAAA,MACtB;AAAA,IACF;AACA,WAAO,KAAK,UAAU,aAAa;AAAA,EACrC;AACF;AAMA,IAAM,sBAAN,MAAM,qBAAoB;AAAA,EACxB,YAAY,UAAU,OAAO,OAAO;AAClC,SAAK,WAAW;AAChB,SAAK,QAAQ;AACb,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBAAoB,UAAU,OAAO;AAC1C,UAAM,cAAc,KAAK,MAAM,KAAK;AACpC,QAAI,YAAY,OAAO,gBAAgB,YAAY,CAAC,eAAe,WAAW,UAAU,EAAE,QAAQ,YAAY,KAAK,MAAM,OAAO,YAAY,UAAU,UAAa,OAAO,YAAY,UAAU;AAChM,QAAI,iBAAiB;AACrB,QAAI,aAAa,YAAY,OAAO;AAClC,kBAAY,OAAO,YAAY,MAAM,YAAY,YAAY,OAAO,YAAY,MAAM,SAAS;AAC/F,UAAI,WAAW;AACb,yBAAiB,IAAI,eAAe,YAAY,MAAM,MAAM,YAAY,MAAM,OAAO;AAAA,MACvF;AAAA,IACF;AACA,QAAI,WAAW;AACb,aAAO,IAAI,qBAAoB,UAAU,YAAY,OAAO,cAAc;AAAA,IAC5E,OAAO;AACL,eAAS,WAAW,wCAAwC,QAAQ,MAAM,KAAK,EAAE;AACjF,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,mBAAmB;AACjB,UAAM,cAAc;AAAA,MAClB,OAAO,KAAK;AAAA,MACZ,cAAc,KAAK,IAAI;AAAA;AAAA,IACzB;AACA,QAAI,KAAK,OAAO;AACd,kBAAY,QAAQ;AAAA,QAClB,MAAM,KAAK,MAAM;AAAA,QACjB,SAAS,KAAK,MAAM;AAAA,MACtB;AAAA,IACF;AACA,WAAO,KAAK,UAAU,WAAW;AAAA,EACnC;AACF;AAKA,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EACtB,YAAY,UAAU,iBAAiB;AACrC,SAAK,WAAW;AAChB,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBAAoB,UAAU,OAAO;AAC1C,UAAM,cAAc,KAAK,MAAM,KAAK;AACpC,QAAI,YAAY,OAAO,gBAAgB,YAAY,YAAY,2BAA2B;AAC1F,QAAI,qBAAqB,YAAY;AACrC,aAAS,IAAI,GAAG,aAAa,IAAI,YAAY,gBAAgB,QAAQ,EAAE,GAAG;AACxE,kBAAY,cAAc,YAAY,gBAAgB,CAAC,CAAC;AACxD,2BAAqB,mBAAmB,IAAI,YAAY,gBAAgB,CAAC,CAAC;AAAA,IAC5E;AACA,QAAI,WAAW;AACb,aAAO,IAAI,mBAAkB,UAAU,kBAAkB;AAAA,IAC3D,OAAO;AACL,eAAS,WAAW,6CAA6C,QAAQ,MAAM,KAAK,EAAE;AACtF,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAMA,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EACtB,YAAY,UAAU,aAAa;AACjC,SAAK,WAAW;AAChB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBAAoB,OAAO;AAChC,UAAM,cAAc,KAAK,MAAM,KAAK;AACpC,UAAM,YAAY,OAAO,gBAAgB,YAAY,CAAC,WAAW,UAAU,SAAS,EAAE,QAAQ,YAAY,WAAW,MAAM,MAAM,OAAO,YAAY,aAAa;AACjK,QAAI,WAAW;AACb,aAAO,IAAI,mBAAkB,YAAY,UAAU,YAAY,WAAW;AAAA,IAC5E,OAAO;AACL,eAAS,WAAW,iCAAiC,KAAK,EAAE;AAC5D,aAAO;AAAA,IACT;AAAA,EACF;AACF;AAYA,IAAM,mBAAN,MAAuB;AAAA,EACrB,cAAc;AACZ,SAAK,kBAAkB,YAAY;AAAA,EACrC;AAAA,EACA,eAAe,UAAU;AACvB,SAAK,kBAAkB,KAAK,gBAAgB,IAAI,QAAQ;AAAA,EAC1D;AAAA,EACA,kBAAkB,UAAU;AAC1B,SAAK,kBAAkB,KAAK,gBAAgB,OAAO,QAAQ;AAAA,EAC7D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,mBAAmB;AACjB,UAAM,OAAO;AAAA,MACX,iBAAiB,KAAK,gBAAgB,QAAQ;AAAA,MAC9C,cAAc,KAAK,IAAI;AAAA;AAAA,IACzB;AACA,WAAO,KAAK,UAAU,IAAI;AAAA,EAC5B;AACF;AAMA,IAAM,8BAAN,MAAkC;AAAA,EAChC,YAAY6B,SAAQ,OAAO,gBAAgB,eAAe,aAAa;AACrE,SAAK,SAASA;AACd,SAAK,QAAQ;AACb,SAAK,iBAAiB;AACtB,SAAK,gBAAgB;AACrB,SAAK,aAAa;AAClB,SAAK,qBAAqB;AAC1B,SAAK,wBAAwB;AAC7B,SAAK,kBAAkB,KAAK,sBAAsB,KAAK,IAAI;AAC3D,SAAK,gBAAgB,IAAI,UAAU,mBAAmB;AACtD,SAAK,UAAU;AAKf,SAAK,cAAc,CAAC;AAGpB,UAAM,wBAAwB,eAAe,QAAQ,uBAAuB,MAAM;AAClF,SAAK,UAAU,KAAK,OAAO;AAC3B,SAAK,cAAc;AACnB,SAAK,wBAAwB,+BAA+B,KAAK,gBAAgB,KAAK,aAAa;AACnG,SAAK,oBAAoB,kCAAkC,KAAK,cAAc;AAC9E,SAAK,gBAAgB,KAAK,cAAc,OAAO,KAAK,eAAe,IAAI,iBAAiB,CAAC;AACzF,SAAK,mBAAmB,IAAI,OAAO,IAAI,uBAAuB,IAAI,qBAAqB,WAAW;AAClG,SAAK,qBAAqB,IAAI,OAAO,IAAI,yBAAyB,IAAI,qBAAqB,oBAAoB;AAC/G,SAAK,mBAAmB,IAAI,OAAO,IAAI,uBAAuB,IAAI,qBAAqB,UAAU;AACjG,SAAK,iBAAiB,+BAA+B,KAAK,cAAc;AACxE,SAAK,kBAAkB,sBAAsB,KAAK,cAAc;AAOhE,SAAK,OAAO,iBAAiB,WAAW,KAAK,eAAe;AAAA,EAC9D;AAAA;AAAA,EAEA,OAAO,YAAYA,SAAQ;AACzB,WAAO,CAAC,EAAEA,WAAUA,QAAO;AAAA,EAC7B;AAAA,EACM,QAAQ;AAAA;AAGZ,YAAM,kBAAkB,MAAM,KAAK,WAAW,iBAAiB;AAC/D,iBAAW,YAAY,iBAAiB;AACtC,YAAI,aAAa,KAAK,eAAe;AACnC;AAAA,QACF;AACA,cAAM,cAAc,KAAK,QAAQ,+BAA+B,KAAK,gBAAgB,QAAQ,CAAC;AAC9F,YAAI,aAAa;AACf,gBAAM,cAAc,kBAAkB,oBAAoB,UAAU,WAAW;AAC/E,cAAI,aAAa;AACf,iBAAK,gBAAgB,KAAK,cAAc,OAAO,YAAY,UAAU,WAAW;AAAA,UAClF;AAAA,QACF;AAAA,MACF;AACA,WAAK,mBAAmB;AAGxB,YAAM,kBAAkB,KAAK,QAAQ,QAAQ,KAAK,cAAc;AAChE,UAAI,iBAAiB;AACnB,cAAM,cAAc,KAAK,0BAA0B,eAAe;AAClE,YAAI,aAAa;AACf,eAAK,uBAAuB,WAAW;AAAA,QACzC;AAAA,MACF;AACA,iBAAW,SAAS,KAAK,aAAa;AACpC,aAAK,sBAAsB,KAAK;AAAA,MAClC;AACA,WAAK,cAAc,CAAC;AAGpB,WAAK,OAAO,iBAAiB,YAAY,MAAM,KAAK,SAAS,CAAC;AAC9D,WAAK,UAAU;AAAA,IACjB;AAAA;AAAA,EACA,oBAAoB,gBAAgB;AAClC,SAAK,QAAQ,KAAK,mBAAmB,KAAK,UAAU,cAAc,CAAC;AAAA,EACrE;AAAA,EACA,2BAA2B;AACzB,WAAO,KAAK,0BAA0B,KAAK,aAAa;AAAA,EAC1D;AAAA,EACA,oBAAoB,UAAU;AAC5B,QAAI,QAAQ;AACZ,SAAK,cAAc,QAAQ,CAAC,KAAK,UAAU;AACzC,UAAI,MAAM,gBAAgB,IAAI,QAAQ,GAAG;AACvC,gBAAQ;AAAA,MACV;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA,EACA,mBAAmB,SAAS;AAC1B,SAAK,qBAAqB,SAAS,SAAS;AAAA,EAC9C;AAAA,EACA,oBAAoB,SAAS,OAAO,OAAO;AACzC,SAAK,qBAAqB,SAAS,OAAO,KAAK;AAI/C,SAAK,oBAAoB,OAAO;AAAA,EAClC;AAAA,EACA,oBAAoB,UAAU;AAC5B,QAAI,aAAa;AAGjB,QAAI,KAAK,oBAAoB,QAAQ,GAAG;AACtC,YAAM,cAAc,KAAK,QAAQ,QAAQ,uCAAuC,KAAK,gBAAgB,QAAQ,CAAC;AAC9G,UAAI,aAAa;AACf,cAAM,WAAW,oBAAoB,oBAAoB,UAAU,WAAW;AAC9E,YAAI,UAAU;AACZ,uBAAa,SAAS;AAAA,QACxB;AAAA,MACF;AAAA,IACF;AACA,SAAK,iBAAiB,eAAe,QAAQ;AAC7C,SAAK,mBAAmB;AACxB,WAAO;AAAA,EACT;AAAA,EACA,uBAAuB,UAAU;AAC/B,SAAK,iBAAiB,kBAAkB,QAAQ;AAChD,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EACA,mBAAmB,UAAU;AAC3B,WAAO,KAAK,iBAAiB,gBAAgB,IAAI,QAAQ;AAAA,EAC3D;AAAA,EACA,gBAAgB,UAAU;AACxB,SAAK,WAAW,uCAAuC,KAAK,gBAAgB,QAAQ,CAAC;AAAA,EACvF;AAAA,EACA,iBAAiB,UAAU,OAAO,OAAO;AACvC,SAAK,wBAAwB,UAAU,OAAO,KAAK;AAAA,EACrD;AAAA,EACA,iBAAiB,MAAM,iBAAiB,eAAe;AACrD,oBAAgB,QAAQ,aAAW;AACjC,WAAK,oBAAoB,OAAO;AAAA,IAClC,CAAC;AACD,SAAK,cAAc;AACnB,kBAAc,QAAQ,aAAW;AAC/B,WAAK,mBAAmB,OAAO;AAAA,IACjC,CAAC;AAAA,EACH;AAAA,EACA,eAAe,aAAa;AAC1B,SAAK,mBAAmB,WAAW;AAAA,EACrC;AAAA,EACA,mBAAmB,kBAAkB;AACnC,SAAK,yBAAyB,gBAAgB;AAAA,EAChD;AAAA,EACA,WAAW;AACT,QAAI,KAAK,SAAS;AAChB,WAAK,OAAO,oBAAoB,WAAW,KAAK,eAAe;AAC/D,WAAK,WAAW,KAAK,qBAAqB;AAC1C,WAAK,UAAU;AAAA,IACjB;AAAA,EACF;AAAA,EACA,QAAQ,KAAK;AACX,UAAM,QAAQ,KAAK,QAAQ,QAAQ,GAAG;AACtC,aAAS,WAAW,QAAQ,KAAK,KAAK;AACtC,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,KAAK,OAAO;AAClB,aAAS,WAAW,OAAO,KAAK,KAAK;AACrC,SAAK,QAAQ,QAAQ,KAAK,KAAK;AAAA,EACjC;AAAA,EACA,WAAW,KAAK;AACd,aAAS,WAAW,UAAU,GAAG;AACjC,SAAK,QAAQ,WAAW,GAAG;AAAA,EAC7B;AAAA,EACA,sBAAsB,OAAO;AAG3B,UAAM,eAAe;AACrB,QAAI,aAAa,gBAAgB,KAAK,SAAS;AAC7C,eAAS,WAAW,SAAS,aAAa,KAAK,aAAa,QAAQ;AACpE,UAAI,aAAa,QAAQ,KAAK,uBAAuB;AACnD,iBAAS,0GAA+G;AACxH;AAAA,MACF;AACA,WAAK,MAAM,iBAAiB,MAAY;AACtC,YAAI,CAAC,KAAK,SAAS;AACjB,eAAK,YAAY,KAAK,YAAY;AAClC;AAAA,QACF;AACA,YAAI,aAAa,QAAQ,MAAM;AAC7B;AAAA,QACF;AACA,YAAI,KAAK,iBAAiB,KAAK,aAAa,GAAG,GAAG;AAChD,cAAI,aAAa,YAAY,MAAM;AACjC,kBAAM,cAAc,KAAK,0BAA0B,aAAa,KAAK,aAAa,QAAQ;AAC1F,gBAAI,aAAa;AACf,qBAAO,KAAK,uBAAuB,YAAY,UAAU,WAAW;AAAA,YACtE;AAAA,UACF,OAAO;AACL,kBAAM,WAAW,KAAK,6BAA6B,aAAa,GAAG;AACnE,mBAAO,KAAK,uBAAuB,UAAU,IAAI;AAAA,UACnD;AAAA,QACF,WAAW,KAAK,mBAAmB,KAAK,aAAa,GAAG,GAAG;AACzD,cAAI,aAAa,aAAa,MAAM;AAClC,kBAAM,mBAAmB,KAAK,+BAA+B,aAAa,KAAK,aAAa,QAAQ;AACpG,gBAAI,kBAAkB;AACpB,qBAAO,KAAK,yBAAyB,gBAAgB;AAAA,YACvD;AAAA,UACF;AAAA,QACF,WAAW,KAAK,iBAAiB,KAAK,aAAa,GAAG,GAAG;AACvD,cAAI,aAAa,aAAa,MAAM;AAClC,kBAAM,sBAAsB,KAAK,kCAAkC,aAAa,KAAK,aAAa,QAAQ;AAC1G,gBAAI,qBAAqB;AACvB,qBAAO,KAAK,uBAAuB,mBAAmB;AAAA,YACxD;AAAA,UACF;AAAA,QACF,WAAW,aAAa,QAAQ,KAAK,gBAAgB;AACnD,cAAI,aAAa,aAAa,MAAM;AAClC,kBAAM,cAAc,KAAK,0BAA0B,aAAa,QAAQ;AACxE,gBAAI,aAAa;AACf,qBAAO,KAAK,uBAAuB,WAAW;AAAA,YAChD;AAAA,UACF;AAAA,QACF,WAAW,aAAa,QAAQ,KAAK,mBAAmB;AACtD,gBAAM,iBAAiB,6BAA6B,aAAa,QAAQ;AACzE,cAAI,mBAAmB,eAAe,SAAS;AAC7C,iBAAK,sBAAsB,cAAc;AAAA,UAC3C;AAAA,QACF,WAAW,aAAa,QAAQ,KAAK,iBAAiB;AACpD,gBAAM,mBAAmB,KAAK,8BAA8B,aAAa,QAAQ;AACjF,gBAAM,QAAQ,IAAI,iBAAiB,IAAI,QAAM,KAAK,WAAW,gCAAgC,EAAE,CAAC,CAAC;AAAA,QACnG;AAAA,MACF,EAAC;AAAA,IACH;AAAA,EACF;AAAA,EACA,IAAI,mBAAmB;AACrB,WAAO,KAAK,cAAc,IAAI,KAAK,aAAa;AAAA,EAClD;AAAA,EACA,qBAAqB;AACnB,SAAK,QAAQ,KAAK,uBAAuB,KAAK,iBAAiB,iBAAiB,CAAC;AAAA,EACnF;AAAA,EACA,qBAAqB,SAAS,OAAO,OAAO;AAC1C,UAAM,gBAAgB,IAAI,iBAAiB,KAAK,aAAa,SAAS,OAAO,KAAK;AAClF,UAAM,cAAc,iCAAiC,KAAK,gBAAgB,KAAK,aAAa,OAAO;AACnG,SAAK,QAAQ,aAAa,cAAc,iBAAiB,CAAC;AAAA,EAC5D;AAAA,EACA,oBAAoB,SAAS;AAC3B,UAAM,cAAc,iCAAiC,KAAK,gBAAgB,KAAK,aAAa,OAAO;AACnG,SAAK,WAAW,WAAW;AAAA,EAC7B;AAAA,EACA,mBAAmB,aAAa;AAC9B,UAAM,QAAQ;AAAA,MACZ,UAAU,KAAK;AAAA,MACf;AAAA,IACF;AACA,SAAK,QAAQ,QAAQ,KAAK,gBAAgB,KAAK,UAAU,KAAK,CAAC;AAAA,EACjE;AAAA,EACA,wBAAwB,UAAU,OAAO,OAAO;AAC9C,UAAM,YAAY,uCAAuC,KAAK,gBAAgB,QAAQ;AACtF,UAAM,iBAAiB,IAAI,oBAAoB,UAAU,OAAO,KAAK;AACrE,SAAK,QAAQ,WAAW,eAAe,iBAAiB,CAAC;AAAA,EAC3D;AAAA,EACA,yBAAyB,kBAAkB;AACzC,UAAM,OAAO,KAAK,UAAU,MAAM,KAAK,gBAAgB,CAAC;AACxD,SAAK,QAAQ,KAAK,iBAAiB,IAAI;AAAA,EACzC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,6BAA6B,KAAK;AAChC,UAAM,QAAQ,KAAK,iBAAiB,KAAK,GAAG;AAC5C,WAAO,QAAQ,MAAM,CAAC,IAAI;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,0BAA0B,KAAK,OAAO;AACpC,UAAM,WAAW,KAAK,6BAA6B,GAAG;AACtD,WAAO,kBAAkB,oBAAoB,UAAU,KAAK;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,+BAA+B,KAAK,OAAO;AACzC,UAAM,QAAQ,KAAK,mBAAmB,KAAK,GAAG;AAC9C,UAAM,UAAU,OAAO,MAAM,CAAC,CAAC;AAC/B,UAAM,SAAS,MAAM,CAAC,MAAM,SAAY,MAAM,CAAC,IAAI;AACnD,WAAO,iBAAiB,oBAAoB,IAAI,KAAK,MAAM,GAAG,SAAS,KAAK;AAAA,EAC9E;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,kCAAkC,KAAK,OAAO;AAC5C,UAAM,QAAQ,KAAK,iBAAiB,KAAK,GAAG;AAC5C,UAAM,WAAW,OAAO,MAAM,CAAC,CAAC;AAChC,WAAO,oBAAoB,oBAAoB,UAAU,KAAK;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,0BAA0B,OAAO;AAC/B,WAAO,kBAAkB,oBAAoB,KAAK;AAAA,EACpD;AAAA,EACA,8BAA8B,OAAO;AACnC,WAAO,KAAK,MAAM,KAAK;AAAA,EACzB;AAAA,EACM,yBAAyB,eAAe;AAAA;AAC5C,UAAI,cAAc,KAAK,QAAQ,KAAK,YAAY,KAAK;AACnD,iBAAS,WAAW,yCAAyC,cAAc,KAAK,GAAG,EAAE;AACrF;AAAA,MACF;AACA,aAAO,KAAK,WAAW,gBAAgB,cAAc,SAAS,cAAc,OAAO,cAAc,KAAK;AAAA,IACxG;AAAA;AAAA,EACA,uBAAuB,gBAAgB;AACrC,WAAO,KAAK,WAAW,iBAAiB,eAAe,UAAU,eAAe,OAAO,eAAe,KAAK;AAAA,EAC7G;AAAA,EACA,uBAAuB,UAAU,aAAa;AAC5C,UAAM,iBAAiB,cAAc,KAAK,cAAc,OAAO,UAAU,WAAW,IAAI,KAAK,cAAc,OAAO,QAAQ;AAC1H,UAAM,kBAAkB,KAAK,0BAA0B,KAAK,aAAa;AACzE,UAAM,aAAa,KAAK,0BAA0B,cAAc;AAChE,UAAM,eAAe,CAAC;AACtB,UAAM,iBAAiB,CAAC;AACxB,eAAW,QAAQ,cAAY;AAC7B,UAAI,CAAC,gBAAgB,IAAI,QAAQ,GAAG;AAClC,qBAAa,KAAK,QAAQ;AAAA,MAC5B;AAAA,IACF,CAAC;AACD,oBAAgB,QAAQ,cAAY;AAClC,UAAI,CAAC,WAAW,IAAI,QAAQ,GAAG;AAC7B,uBAAe,KAAK,QAAQ;AAAA,MAC9B;AAAA,IACF,CAAC;AACD,WAAO,KAAK,WAAW,yBAAyB,cAAc,cAAc,EAAE,KAAK,MAAM;AACvF,WAAK,gBAAgB;AAAA,IACvB,CAAC;AAAA,EACH;AAAA,EACA,uBAAuB,aAAa;AAMlC,QAAI,KAAK,cAAc,IAAI,YAAY,QAAQ,GAAG;AAChD,WAAK,mBAAmB,YAAY,WAAW;AAAA,IACjD;AAAA,EACF;AAAA,EACA,0BAA0B,SAAS;AACjC,QAAI,gBAAgB,YAAY;AAChC,YAAQ,QAAQ,CAAC,KAAK,UAAU;AAC9B,sBAAgB,cAAc,UAAU,MAAM,eAAe;AAAA,IAC/D,CAAC;AACD,WAAO;AAAA,EACT;AACF;AACA,SAAS,6BAA6B,WAAW;AAC/C,MAAI,iBAAiB,eAAe;AACpC,MAAI,aAAa,MAAM;AACrB,QAAI;AACF,YAAM,SAAS,KAAK,MAAM,SAAS;AACnC,iBAAW,OAAO,WAAW,QAAQ;AACrC,uBAAiB;AAAA,IACnB,SAAS,GAAG;AACV,eAAS,WAAW,kDAAkD,CAAC;AAAA,IACzE;AAAA,EACF;AACA,SAAO;AACT;AAMA,IAAM,0BAAN,MAA8B;AAAA,EAC5B,cAAc;AACZ,SAAK,aAAa,IAAI,iBAAiB;AACvC,SAAK,aAAa,CAAC;AACnB,SAAK,qBAAqB;AAC1B,SAAK,wBAAwB;AAAA,EAC/B;AAAA,EACA,mBAAmB,SAAS;AAAA,EAE5B;AAAA,EACA,oBAAoB,SAAS,OAAO,OAAO;AAAA,EAE3C;AAAA,EACA,oBAAoB,UAAU;AAC5B,SAAK,WAAW,eAAe,QAAQ;AACvC,WAAO,KAAK,WAAW,QAAQ,KAAK;AAAA,EACtC;AAAA,EACA,iBAAiB,UAAU,OAAO,OAAO;AACvC,SAAK,WAAW,QAAQ,IAAI;AAAA,EAC9B;AAAA,EACA,uBAAuB,UAAU;AAC/B,SAAK,WAAW,kBAAkB,QAAQ;AAAA,EAC5C;AAAA,EACA,mBAAmB,UAAU;AAC3B,WAAO,KAAK,WAAW,gBAAgB,IAAI,QAAQ;AAAA,EACrD;AAAA,EACA,gBAAgB,UAAU;AACxB,WAAO,KAAK,WAAW,QAAQ;AAAA,EACjC;AAAA,EACA,2BAA2B;AACzB,WAAO,KAAK,WAAW;AAAA,EACzB;AAAA,EACA,oBAAoB,UAAU;AAC5B,WAAO,KAAK,WAAW,gBAAgB,IAAI,QAAQ;AAAA,EACrD;AAAA,EACA,QAAQ;AACN,SAAK,aAAa,IAAI,iBAAiB;AACvC,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EACA,iBAAiB,MAAM,iBAAiB,eAAe;AAAA,EAEvD;AAAA,EACA,eAAe,aAAa;AAAA,EAE5B;AAAA,EACA,WAAW;AAAA,EAAC;AAAA,EACZ,oBAAoB,gBAAgB;AAAA,EAAC;AAAA,EACrC,mBAAmB,kBAAkB;AAAA,EAErC;AACF;AAkBA,IAAM,0BAAN,MAA8B;AAAA,EAC5B,YAAY,UAAU;AAAA,EAEtB;AAAA,EACA,WAAW;AAAA,EAEX;AACF;AAuBA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,MAAM;AAChB,SAAK,SAAS,KAAK;AACnB,SAAK,UAAU,KAAK;AAAA,EACtB;AAAA,EACA,YAAY,UAAU;AACpB,SAAK,qBAAqB;AAAA,EAC5B;AAAA,EACA,OAAO,UAAU;AACf,SAAK,gBAAgB;AAAA,EACvB;AAAA,EACA,QAAQ,UAAU;AAChB,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,UAAU,UAAU;AAClB,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EACA,QAAQ;AACN,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,KAAK,KAAK;AACR,SAAK,OAAO,GAAG;AAAA,EACjB;AAAA,EACA,kBAAkB;AAChB,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EACA,aAAa;AACX,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,YAAY,KAAK;AACf,SAAK,eAAe,GAAG;AAAA,EACzB;AAAA,EACA,cAAc,KAAK;AACjB,SAAK,iBAAiB,GAAG;AAAA,EAC3B;AACF;AAsBA,IAAI,oBAAoB;AAYxB,SAAS,+BAA+B;AACtC,QAAM,YAAY;AAClB,QAAM,YAAY;AAClB,QAAM,cAAc,YAAY;AAChC,QAAM,eAAe,KAAK,MAAM,cAAc,KAAK,OAAO,CAAC;AAC3D,SAAO,YAAY;AACrB;AAYA,SAAS,wBAAwB;AAC/B,MAAI,sBAAsB,MAAM;AAC9B,wBAAoB,6BAA6B;AAAA,EACnD,OAAO;AACL;AAAA,EACF;AACA,SAAO,OAAO,kBAAkB,SAAS,EAAE;AAC7C;AAwDA,SAAS,YAAY,QAAQ;AAC3B,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAO,CAAC,OAAO,UAAU;AACvB,UAAI,OAAO;AACT,eAAO,KAAK;AAAA,MACd,OAAO;AACL,gBAAQ,KAAK;AAAA,MACf;AAAA,IACF,CAAC;AAAA,EACH,CAAC;AACH;AAoBA,IAAM,cAAc;AACpB,IAAM,YAAY;AAClB,IAAM,0BAA0B,WAAW,QAAQ,SAAS,IAAI,SAAS7C,YAAW,SAAS,WAAW;AACxG,SAAS,eAAe,cAAc,WAAW,eAAe,OAAO;AACrE,aAAW,cAAc,QAAQ,UAAU,SAAS,OAAO;AAC3D,QAAM,WAAW,IAAS,cAAS;AACnC,MAAI,WAAW;AACb,cAAU,QAAQ,QAAQ,CAAC,OAAO,QAAQ,SAAS,IAAI,KAAK,KAAK,CAAC;AAAA,EACpE;AACA,MAAI,eAAe;AACjB,kBAAc,QAAQ,QAAQ,CAAC,OAAO,QAAQ,SAAS,IAAI,KAAK,KAAK,CAAC;AAAA,EACxE;AACA,MAAI,OAAO;AACT,aAAS,IAAI,oBAAoB,KAAK;AAAA,EACxC;AACA,WAAS,IAAI,qBAAqB,uBAAuB;AAMzD,WAAS,IAAI,gCAAgC,YAAY;AACzD,WAAS,IAAI,yBAAyB,YAAY;AAClD,SAAO;AACT;AAIA,IAAM,iBAAN,MAAqB;AAAA,EACnB,YAAYuB,SAAQ,cAAc;AAChC,SAAK,eAAe;AAEpB,SAAK,aAAa;AAElB,SAAK,YAAYA,QAAO,QAAQ,EAAE,WAAW,EAAE,IAAI;AACnD,SAAK,eAAe,YAAY,aAAa,WAAW,SAAS,cAAc,aAAa,WAAW,QAAQ;AAAA,EACjH;AAAA,EACA,IAAI,wCAAwC;AAG1C,WAAO;AAAA,EACT;AAAA,EACA,mBAAmB;AACjB,QAAI,CAAC,KAAK,YAAY;AACpB,eAAS,WAAW,0BAA0B;AAC9C,YAAMrB,eAAc,KAAK,aAAa,MAAW,iBAAY,UAAU,IAAS,iBAAY,eAAe;AAC3G,WAAK,aAAa,IAAI,KAAK,UAAU,UAAU,KAAK,aAAa,MAAMA,YAAW;AAAA,IACpF;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EACA,UAAU,SAAS,MAAM,SAAS,WAAW,eAAe;AAC1D,UAAM,WAAW,sBAAsB;AACvC,UAAM,OAAO,KAAK,iBAAiB;AACnC,UAAM,WAAW,eAAe,KAAK,cAAc,WAAW,eAAe,KAAK,aAAa,KAAK;AACpG,UAAM,cAAc,OAAO,OAAO;AAAA,MAChC,UAAU,KAAK;AAAA,IACjB,GAAG,OAAO;AACV,WAAO,YAAY,cAAY;AAC7B,eAAS,WAAW,QAAQ,OAAO,KAAK,QAAQ,0BAA0B,OAAO;AACjF,aAAO,KAAK,OAAO,EAAE,aAAa,UAAU,CAAC,WAAW,UAAU;AAChE,YAAI,WAAW;AACb,mBAAS,WAAW,QAAQ,OAAO,KAAK,QAAQ,uBAAuB,SAAS;AAChF,mBAAS,IAAI,eAAe,mBAAmB,UAAU,IAAI,GAAG,UAAU,OAAO,CAAC;AAAA,QACpF,OAAO;AACL,mBAAS,WAAW,QAAQ,OAAO,KAAK,QAAQ,6BAA6B,KAAK;AAClF,mBAAS,QAAW,KAAK;AAAA,QAC3B;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,mBAAmB,SAAS,MAAM,SAAS,WAAW,eAAe,uBAAuB;AAC1F,UAAM,WAAW,sBAAsB;AACvC,UAAM,UAAU,CAAC;AACjB,UAAM,mBAAmB,IAAI,SAAS;AACtC,aAAS,WAAW,QAAQ,OAAO,KAAK,QAAQ,sCAAsC,OAAO;AAC7F,UAAM,OAAO,KAAK,iBAAiB;AACnC,UAAM,WAAW,eAAe,KAAK,cAAc,WAAW,eAAe,KAAK,aAAa,KAAK;AACpG,UAAM,cAAc,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,OAAO,GAAG;AAAA,MAC5D,UAAU,KAAK;AAAA,IACjB,CAAC;AACD,UAAM,SAAS,KAAK,OAAO,EAAE,aAAa,QAAQ;AAClD,QAAI,gBAAgB;AACpB,WAAO,GAAG,QAAQ,cAAY;AAC5B,eAAS,WAAW,OAAO,OAAO,IAAI,QAAQ,qBAAqB,QAAQ;AAC3E,cAAQ,KAAK,QAAQ;AACrB,UAAI,0BAA0B,UAAa,QAAQ,WAAW,uBAAuB;AACnF,wBAAgB;AAChB,yBAAiB,QAAQ,OAAO;AAAA,MAClC;AAAA,IACF,CAAC;AACD,WAAO,GAAG,OAAO,MAAM;AACrB,eAAS,WAAW,QAAQ,OAAO,KAAK,QAAQ,aAAa;AAC7D,UAAI,CAAC,eAAe;AAClB,wBAAgB;AAChB,yBAAiB,QAAQ,OAAO;AAAA,MAClC;AAAA,IACF,CAAC;AACD,WAAO,GAAG,SAAS,eAAa;AAC9B,eAAS,WAAW,QAAQ,OAAO,KAAK,QAAQ,uBAAuB,SAAS;AAChF,YAAM,OAAO,mBAAmB,UAAU,IAAI;AAC9C,uBAAiB,OAAO,IAAI,eAAe,MAAM,UAAU,OAAO,CAAC;AAAA,IACrE,CAAC;AACD,WAAO,iBAAiB;AAAA,EAC1B;AAAA;AAAA,EAEA,WAAW,SAAS,WAAW,eAAe;AAC5C,UAAM,WAAW,sBAAsB;AACvC,UAAM,OAAO,KAAK,iBAAiB;AACnC,UAAM,WAAW,eAAe,KAAK,cAAc,WAAW,eAAe,KAAK,aAAa,KAAK;AACpG,UAAM,aAAa,KAAK,OAAO,EAAE,QAAQ;AACzC,QAAI,SAAS;AACb,UAAM,QAAQ,SAAO;AACnB,UAAI,CAAC,QAAQ;AACX,iBAAS;AACT,eAAO,YAAY,GAAG;AACtB,mBAAW,IAAI;AAAA,MACjB;AAAA,IACF;AACA,UAAM,SAAS,IAAI,aAAa;AAAA,MAC9B,QAAQ,SAAO;AACb,YAAI,CAAC,QAAQ;AACX,mBAAS,WAAW,QAAQ,OAAO,YAAY,QAAQ,aAAa,GAAG;AACvE,cAAI;AACF,uBAAW,MAAM,GAAG;AAAA,UACtB,SAAS,GAAG;AAGV,qBAAS,oBAAoB,GAAG;AAChC,qBAAS,UAAU,CAAC;AACpB,kBAAM;AAAA,UACR;AAAA,QACF,OAAO;AACL,mBAAS,WAAW,QAAQ,OAAO,YAAY,QAAQ,+CAAoD,GAAG;AAAA,QAChH;AAAA,MACF;AAAA,MACA,SAAS,MAAM;AACb,iBAAS,WAAW,QAAQ,OAAO,YAAY,QAAQ,8BAA8B;AACrF,cAAM;AAAA,MACR;AAAA,IACF,CAAC;AACD,QAAI,kBAAkB;AACtB,eAAW,GAAG,QAAQ,SAAO;AAC3B,UAAI,CAAC,QAAQ;AACX,iBAAS,WAAW,QAAQ,OAAO,YAAY,QAAQ,cAAc,GAAG;AAExE,YAAI,CAAC,iBAAiB;AACpB,iBAAO,gBAAgB;AACvB,4BAAkB;AAAA,QACpB;AACA,eAAO,cAAc,GAAG;AAAA,MAC1B;AAAA,IACF,CAAC;AACD,eAAW,GAAG,OAAO,MAAM;AACzB,eAAS,WAAW,QAAQ,OAAO,YAAY,QAAQ,SAAS;AAChE,YAAM;AAAA,IACR,CAAC;AACD,eAAW,GAAG,SAAS,eAAa;AAClC,UAAI,CAAC,QAAQ;AACX,gBAAQ,WAAW,QAAQ,OAAO,YAAY,QAAQ,iBAAiB,UAAU,MAAM,YAAY,UAAU,OAAO;AACpH,cAAM,OAAO,mBAAmB,UAAU,IAAI;AAC9C,cAAM,IAAI,eAAe,MAAM,UAAU,OAAO,CAAC;AAAA,MACnD;AAAA,IACF,CAAC;AACD,aAAS,WAAW,gBAAgB,OAAO,YAAY,QAAQ,OAAY,KAAK,aAAa,IAAI,EAAE;AAInG,eAAW,MAAM;AACf,aAAO,WAAW;AAAA,IACpB,GAAG,CAAC;AACJ,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,YAAY;AACV,QAAI,KAAK,YAAY;AACnB,WAAK,WAAW,MAAM;AACtB,WAAK,aAAa;AAAA,IACpB;AAAA,EACF;AACF;AACA,IAAM,SAAS;AAAA,EACb,QAAQ;AAAA,IACN,QAAQ;AAAA,MACN,UAAU;AAAA,QACR,SAAS;AAAA,UACP,kBAAkB;AAAA,UAClB,YAAY;AAAA,UACZ,cAAc;AAAA,UACd,sBAAsB;AAAA,UACtB,qBAAqB;AAAA,UACrB,mBAAmB;AAAA,UACnB,kBAAkB;AAAA,UAClB,cAAc;AAAA,QAChB;AAAA,QACA,QAAQ;AAAA,UACN,WAAW;AAAA,YACT,QAAQ;AAAA,cACN,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,mBAAmB;AAAA,YACjB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,qBAAqB;AAAA,YACnB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,kBAAkB;AAAA,gBAChB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,SAAS;AAAA,kBACP,QAAQ;AAAA,gBACV;AAAA,cACF;AAAA,cACA,gBAAgB;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,SAAS;AAAA,kBACP,QAAQ;AAAA,gBACV;AAAA,cACF;AAAA,cACA,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,gBAAgB;AAAA,gBACd,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,iBAAiB;AAAA,YACf,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,gBAAgB;AAAA,gBACd,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,eAAe;AAAA,gBACb,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,cAAc;AAAA,gBACZ,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,gBAAgB;AAAA,gBACd,QAAQ;AAAA,kBACN,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,KAAK;AAAA,oBACH,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,eAAe;AAAA,gBACb,QAAQ;AAAA,kBACN,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,KAAK;AAAA,oBACH,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,sBAAsB;AAAA,YACpB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,cAAc;AAAA,gBACZ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,QAAQ;AAAA,kBACN,aAAa;AAAA,kBACb,YAAY;AAAA,kBACZ,YAAY;AAAA,kBACZ,aAAa;AAAA,kBACb,YAAY;AAAA,kBACZ,cAAc;AAAA,kBACd,cAAc;AAAA,kBACd,WAAW;AAAA,kBACX,aAAa;AAAA,kBACb,YAAY;AAAA,kBACZ,cAAc;AAAA,kBACd,YAAY;AAAA,kBACZ,aAAa;AAAA,kBACb,WAAW;AAAA,kBACX,eAAe;AAAA,kBACf,eAAe;AAAA,kBACf,aAAa;AAAA,kBACb,aAAa;AAAA,gBACf;AAAA,cACF;AAAA,cACA,OAAO;AAAA,gBACL,QAAQ;AAAA,kBACN,gBAAgB;AAAA,kBAChB,gBAAgB;AAAA,kBAChB,gBAAgB;AAAA,gBAClB;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,sBAAsB;AAAA,YACpB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,qBAAqB;AAAA,YACnB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,0BAA0B;AAAA,YACxB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,wBAAwB;AAAA,YACtB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,uBAAuB;AAAA,YACrB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,iBAAiB;AAAA,gBACf,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,iBAAiB;AAAA,gBACf,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,aAAa;AAAA,YACX,QAAQ;AAAA,cACN,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,oBAAoB;AAAA,gBAClB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,mBAAmB;AAAA,gBACjB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,2BAA2B;AAAA,gBACzB,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,SAAS;AAAA,kBACP,YAAY;AAAA,gBACd;AAAA,cACF;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,SAAS;AAAA,kBACP,WAAW;AAAA,gBACb;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,mBAAmB;AAAA,gBACjB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,mBAAmB;AAAA,gBACjB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,gBAAgB;AAAA,gBACd,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,iBAAiB;AAAA,gBACf,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,iBAAiB;AAAA,gBACf,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,YAC9B,UAAU,CAAC,CAAC,IAAI,EAAE,CAAC;AAAA,YACnB,QAAQ;AAAA,cACN,cAAc;AAAA,gBACZ,QAAQ;AAAA,kBACN,OAAO;AAAA,kBACP,WAAW;AAAA,kBACX,cAAc;AAAA,gBAChB;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,gBAAgB;AAAA,YACd,QAAQ;AAAA,cACN,sBAAsB;AAAA,gBACpB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,8BAA8B;AAAA,gBAC5B,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,YAC9B,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA,UACnB;AAAA,UACA,cAAc;AAAA,YACZ,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,SAAS;AAAA,kBACP,WAAW;AAAA,gBACb;AAAA,cACF;AAAA,cACA,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,gBACJ,SAAS;AAAA,kBACP,WAAW;AAAA,gBACb;AAAA,cACF;AAAA,cACA,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,YAC9B,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC;AAAA,YACjB,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,QAAQ;AAAA,kBACN,QAAQ;AAAA,kBACR,MAAM;AAAA,kBACN,cAAc;AAAA,gBAChB;AAAA,cACF;AAAA,cACA,QAAQ;AAAA,gBACN,QAAQ;AAAA,kBACN,WAAW;AAAA,kBACX,WAAW;AAAA,kBACX,WAAW;AAAA,gBACb;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,cAAc;AAAA,YACZ,QAAQ;AAAA,cACN,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,UAChC;AAAA,UACA,aAAa;AAAA,YACX,QAAQ;AAAA,cACN,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,UAChC;AAAA,UACA,kBAAkB;AAAA,YAChB,QAAQ;AAAA,cACN,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,UAChC;AAAA,UACA,gBAAgB;AAAA,YACd,QAAQ;AAAA,cACN,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,UAChC;AAAA,UACA,eAAe;AAAA,YACb,QAAQ;AAAA,cACN,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,qBAAqB;AAAA,gBACnB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,YAAY,CAAC,CAAC,KAAM,SAAS,CAAC;AAAA,UAChC;AAAA,UACA,qBAAqB;AAAA,YACnB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,iBAAiB;AAAA,gBACf,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,kBAAkB;AAAA,gBAChB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,kBAAkB;AAAA,gBAChB,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,gBAAgB;AAAA,gBACd,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,UAAU;AAAA,gBACR,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,gBAAgB;AAAA,YACd,QAAQ;AAAA,cACN,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,UAAU;AAAA,gBACR,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,kBAAkB;AAAA,oBAChB,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,yBAAyB;AAAA,oBACvB,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,mBAAmB;AAAA,YACjB,QAAQ;AAAA,cACN,YAAY;AAAA,gBACV,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,YAAY;AAAA,gBACV,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,KAAK;AAAA,oBACH,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,UACA,QAAQ;AAAA,YACN,QAAQ;AAAA,cACN,QAAQ;AAAA,gBACN,SAAS;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,OAAO;AAAA,YACL,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,OAAO,CAAC,aAAa,eAAe,eAAe,aAAa,eAAe,WAAW;AAAA,cAC5F;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,aAAa;AAAA,gBACX,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,WAAW;AAAA,YACT,QAAQ;AAAA,cACN,YAAY;AAAA,YACd;AAAA,UACF;AAAA,UACA,WAAW;AAAA,YACT,QAAQ;AAAA,cACN,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,OAAO;AAAA,YACL,QAAQ,CAAC;AAAA,UACX;AAAA,UACA,aAAa;AAAA,YACX,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,YAAY;AAAA,YACV,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,YAAY;AAAA,YACV,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,aAAa;AAAA,YACX,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,YAAY;AAAA,YACV,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,aAAa;AAAA,YACX,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,WAAW;AAAA,YACT,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,aAAa;AAAA,YACX,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,YAAY;AAAA,YACV,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,KAAK;AAAA,YACH,QAAQ;AAAA,cACN,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,WAAW;AAAA,QACT,QAAQ;AAAA,UACN,IAAI;AAAA,YACF,SAAS;AAAA,cACP,kBAAkB;AAAA,cAClB,YAAY;AAAA,cACZ,qBAAqB;AAAA,cACrB,sBAAsB;AAAA,cACtB,cAAc;AAAA,cACd,mBAAmB;AAAA,cACnB,eAAe;AAAA,cACf,cAAc;AAAA,YAChB;AAAA,YACA,QAAQ;AAAA,cACN,mBAAmB;AAAA,gBACjB,QAAQ;AAAA,kBACN,iBAAiB;AAAA,oBACf,SAAS;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,aAAa;AAAA,gBACX,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,SAAS;AAAA,oBACP,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,aAAa;AAAA,gBACX,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,cAAc;AAAA,gBACZ,QAAQ;AAAA,kBACN,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,cAAc;AAAA,gBACZ,QAAQ;AAAA,kBACN,eAAe;AAAA,oBACb,OAAO,CAAC,UAAU,YAAY;AAAA,kBAChC;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,oBAAoB;AAAA,gBAClB,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,OAAO,CAAC,YAAY,WAAW;AAAA,kBACjC;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,QAAQ;AAAA,sBACN,kBAAkB;AAAA,wBAChB,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,UAAU;AAAA,oBACR,QAAQ;AAAA,sBACN,qBAAqB;AAAA,wBACnB,OAAO,CAAC,UAAU;AAAA,sBACpB;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,UAAU;AAAA,wBACR,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,UAAU;AAAA,gBACR,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,SAAS;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,OAAO;AAAA,gBACL,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,OAAO,CAAC,aAAa,gBAAgB,gBAAgB,eAAe,kBAAkB,eAAe,cAAc,kBAAkB,iBAAiB,cAAc,UAAU;AAAA,kBAChL;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,eAAe;AAAA,oBACb,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,YAAY;AAAA,gBACV,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,UAAU;AAAA,gBACR,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,SAAS;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,WAAW;AAAA,gBACT,SAAS;AAAA,kBACP,6BAA6B;AAAA,kBAC7B,6BAA6B;AAAA,gBAC/B;AAAA,gBACA,SAAS;AAAA,kBACP,aAAa;AAAA,oBACX,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,yBAAyB;AAAA,oBAC3B;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,KAAK;AAAA,sBACP;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,eAAe;AAAA,oBACb,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,yBAAyB;AAAA,oBAC3B;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,KAAK;AAAA,sBACP;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,gBAAgB;AAAA,oBACd,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,2BAA2B;AAAA,sBAC3B,0BAA0B;AAAA,sBAC1B,iCAAiC;AAAA,oBACnC;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,OAAO;AAAA,wBACP,MAAM;AAAA,sBACR;AAAA,oBACF,GAAG;AAAA,sBACD,iCAAiC;AAAA,oBACnC,CAAC;AAAA,kBACH;AAAA,kBACA,gBAAgB;AAAA,oBACd,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,4BAA4B;AAAA,sBAC5B,iCAAiC;AAAA,oBACnC;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,UAAU;AAAA,sBACZ;AAAA,oBACF,GAAG;AAAA,sBACD,iCAAiC;AAAA,oBACnC,CAAC;AAAA,kBACH;AAAA,kBACA,mBAAmB;AAAA,oBACjB,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,gBAAgB;AAAA,oBAChB,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,oBAC5B;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,kBAAkB;AAAA,oBAChB,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,sBAC1B,iCAAiC;AAAA,oBACnC;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,GAAG;AAAA,sBACD,iCAAiC;AAAA,oBACnC,CAAC;AAAA,kBACH;AAAA,kBACA,QAAQ;AAAA,oBACN,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,sBAC1B,iCAAiC;AAAA,oBACnC;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,GAAG;AAAA,sBACD,iCAAiC;AAAA,oBACnC,CAAC;AAAA,kBACH;AAAA,kBACA,UAAU;AAAA,oBACR,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,sBAC1B,iCAAiC;AAAA,oBACnC;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,GAAG;AAAA,sBACD,iCAAiC;AAAA,oBACnC,CAAC;AAAA,kBACH;AAAA,kBACA,UAAU;AAAA,oBACR,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,gBAAgB;AAAA,oBAChB,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,sBAC1B,8CAA8C;AAAA,sBAC9C,8CAA8C;AAAA,oBAChD;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,wBACN,qBAAqB;AAAA,0BACnB,MAAM;AAAA,0BACN,MAAM;AAAA,wBACR;AAAA,sBACF;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,qBAAqB;AAAA,oBACnB,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,gBAAgB;AAAA,oBAChB,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,sBAC1B,8CAA8C;AAAA,sBAC9C,8CAA8C;AAAA,oBAChD;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,wBACN,qBAAqB;AAAA,0BACnB,MAAM;AAAA,0BACN,MAAM;AAAA,wBACR;AAAA,sBACF;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,gBAAgB;AAAA,oBACd,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,sBAC1B,8CAA8C;AAAA,sBAC9C,8CAA8C;AAAA,oBAChD;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,wBACN,qBAAqB;AAAA,0BACnB,MAAM;AAAA,0BACN,MAAM;AAAA,wBACR;AAAA,sBACF;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,OAAO;AAAA,oBACL,aAAa;AAAA,oBACb,eAAe;AAAA,oBACf,cAAc;AAAA,oBACd,gBAAgB;AAAA,oBAChB,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,oBAC5B;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,QAAQ;AAAA,oBACN,aAAa;AAAA,oBACb,eAAe;AAAA,oBACf,cAAc;AAAA,oBACd,gBAAgB;AAAA,oBAChB,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,oBAC5B;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,mBAAmB;AAAA,oBACjB,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,sBAC1B,8CAA8C;AAAA,sBAC9C,8CAA8C;AAAA,sBAC9C,iCAAiC;AAAA,oBACnC;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,wBACN,qBAAqB;AAAA,0BACnB,MAAM;AAAA,0BACN,MAAM;AAAA,wBACR;AAAA,sBACF;AAAA,oBACF,GAAG;AAAA,sBACD,iCAAiC;AAAA,oBACnC,CAAC;AAAA,kBACH;AAAA,kBACA,YAAY;AAAA,oBACV,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,oBAC5B;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,kBACA,gBAAgB;AAAA,oBACd,aAAa;AAAA,oBACb,cAAc;AAAA,oBACd,SAAS;AAAA,sBACP,0BAA0B;AAAA,sBAC1B,0BAA0B;AAAA,oBAC5B;AAAA,oBACA,eAAe,CAAC;AAAA,sBACd,qBAAqB;AAAA,wBACnB,MAAM;AAAA,wBACN,MAAM;AAAA,sBACR;AAAA,oBACF,CAAC;AAAA,kBACH;AAAA,gBACF;AAAA,cACF;AAAA,cACA,oBAAoB;AAAA,gBAClB,QAAQ;AAAA,kBACN,qBAAqB;AAAA,oBACnB,OAAO,CAAC,eAAe,UAAU;AAAA,kBACnC;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,sBAAsB;AAAA,gBACpB,QAAQ;AAAA,kBACN,qBAAqB;AAAA,oBACnB,OAAO,CAAC,eAAe,UAAU;AAAA,kBACnC;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,SAAS;AAAA,oBACP,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,uBAAuB;AAAA,gBACrB,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,eAAe;AAAA,oBACb,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,uBAAuB;AAAA,gBACrB,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,uBAAuB;AAAA,gBACrB,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,uBAAuB;AAAA,gBACrB,QAAQ;AAAA,kBACN,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,0BAA0B;AAAA,gBACxB,QAAQ;AAAA,kBACN,qBAAqB;AAAA,oBACnB,OAAO,CAAC,eAAe,kBAAkB,UAAU;AAAA,kBACrD;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,2BAA2B;AAAA,gBACzB,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,OAAO,CAAC,SAAS,SAAS;AAAA,kBAC5B;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,SAAS;AAAA,oBACP,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,yBAAyB;AAAA,gBACvB,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,SAAS;AAAA,oBACP,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,0BAA0B;AAAA,gBACxB,QAAQ;AAAA,kBACN,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,eAAe;AAAA,gBACb,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,gBAAgB;AAAA,gBACd,QAAQ;AAAA,kBACN,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,iBAAiB;AAAA,gBACf,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,iBAAiB;AAAA,gBACf,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,OAAO,CAAC,iBAAiB;AAAA,kBAC3B;AAAA,kBACA,qBAAqB;AAAA,oBACnB,OAAO,CAAC,eAAe,kBAAkB,UAAU;AAAA,kBACrD;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,kBAAkB;AAAA,gBAChB,QAAQ;AAAA,kBACN,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,4BAA4B;AAAA,gBAC1B,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,OAAO,CAAC,4BAA4B;AAAA,kBACtC;AAAA,kBACA,qBAAqB;AAAA,oBACnB,OAAO,CAAC,eAAe,kBAAkB,UAAU;AAAA,kBACrD;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,4BAA4B;AAAA,oBAC1B,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,6BAA6B;AAAA,gBAC3B,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,uBAAuB;AAAA,gBACrB,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,OAAO,CAAC,iBAAiB;AAAA,kBAC3B;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,wBAAwB;AAAA,gBACtB,QAAQ;AAAA,kBACN,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,eAAe;AAAA,oBACb,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,cAAc;AAAA,gBACZ,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,SAAS;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,eAAe;AAAA,gBACb,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,eAAe;AAAA,gBACb,QAAQ;AAAA,kBACN,cAAc;AAAA,oBACZ,OAAO,CAAC,aAAa,cAAc;AAAA,kBACrC;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,SAAS;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,gBAAgB;AAAA,gBACd,QAAQ;AAAA,kBACN,cAAc;AAAA,oBACZ,OAAO,CAAC,gBAAgB,kBAAkB,kBAAkB,kBAAkB,QAAQ;AAAA,kBACxF;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,QAAQ;AAAA,gBACN,QAAQ;AAAA,kBACN,YAAY;AAAA,oBACV,OAAO,CAAC,SAAS,WAAW;AAAA,kBAC9B;AAAA,kBACA,YAAY;AAAA,oBACV,OAAO,CAAC,eAAe,UAAU;AAAA,kBACnC;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,eAAe;AAAA,oBACb,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,iBAAiB;AAAA,oBACf,QAAQ;AAAA,sBACN,WAAW;AAAA,wBACT,MAAM;AAAA,wBACN,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,aAAa;AAAA,oBACX,QAAQ;AAAA,sBACN,WAAW;AAAA,wBACT,OAAO,CAAC,iBAAiB;AAAA,sBAC3B;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,QAAQ;AAAA,wBACN,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,iBAAiB;AAAA,wBACf,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,cAAc;AAAA,gBACZ,QAAQ;AAAA,kBACN,kBAAkB;AAAA,oBAChB,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,aAAa;AAAA,oBACX,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,kBAAkB;AAAA,oBAChB,QAAQ;AAAA,sBACN,WAAW;AAAA,sBACX,KAAK;AAAA,sBACL,QAAQ;AAAA,sBACR,SAAS;AAAA,sBACT,OAAO;AAAA,oBACT;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,0BAA0B;AAAA,gBACxB,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,2BAA2B;AAAA,gBACzB,QAAQ;AAAA,kBACN,eAAe;AAAA,oBACb,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,eAAe;AAAA,oBACb,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,mBAAmB;AAAA,gBACjB,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,oBACJ,SAAS;AAAA,sBACP,+BAA+B;AAAA,oBACjC;AAAA,kBACF;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,SAAS;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,oBAAoB;AAAA,gBAClB,QAAQ;AAAA,kBACN,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,iBAAiB;AAAA,gBACf,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,MAAM;AAAA,oBACJ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,SAAS;AAAA,oBACP,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,SAAS;AAAA,oBACP,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,oBAAoB;AAAA,oBAClB,QAAQ;AAAA,sBACN,cAAc;AAAA,wBACZ,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,gBAAgB;AAAA,wBACd,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,QAAQ;AAAA,oBACN,QAAQ;AAAA,sBACN,YAAY;AAAA,wBACV,OAAO,CAAC,mBAAmB,eAAe,aAAa;AAAA,sBACzD;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,iBAAiB;AAAA,wBACf,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,aAAa;AAAA,wBACX,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,aAAa;AAAA,wBACX,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,iBAAiB;AAAA,oBACf,QAAQ;AAAA,sBACN,IAAI;AAAA,wBACF,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,SAAS;AAAA,wBACP,MAAM;AAAA,wBACN,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,UAAU;AAAA,wBACR,QAAQ;AAAA,0BACN,sBAAsB;AAAA,0BACtB,KAAK;AAAA,0BACL,IAAI;AAAA,wBACN;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,aAAa;AAAA,oBACX,QAAQ;AAAA,sBACN,OAAO;AAAA,wBACL,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,IAAI;AAAA,wBACF,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,OAAO;AAAA,wBACL,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,UAAU;AAAA,wBACR,QAAQ;AAAA,0BACN,sBAAsB;AAAA,0BACtB,WAAW;AAAA,0BACX,oBAAoB;AAAA,0BACpB,cAAc;AAAA,0BACd,uBAAuB;AAAA,0BACvB,OAAO;AAAA,0BACP,WAAW;AAAA,0BACX,gBAAgB;AAAA,0BAChB,IAAI;AAAA,0BACJ,oBAAoB;AAAA,0BACpB,QAAQ;AAAA,wBACV;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,aAAa;AAAA,oBACX,QAAQ;AAAA,sBACN,aAAa;AAAA,wBACX,OAAO,CAAC,OAAO;AAAA,sBACjB;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,IAAI;AAAA,wBACF,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,OAAO;AAAA,wBACL,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,UAAU;AAAA,wBACR,QAAQ;AAAA,0BACN,sBAAsB;AAAA,0BACtB,QAAQ;AAAA,0BACR,SAAS;AAAA,0BACT,YAAY;AAAA,0BACZ,aAAa;AAAA,wBACf;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,OAAO;AAAA,oBACL,QAAQ;AAAA,sBACN,OAAO;AAAA,wBACL,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,WAAW;AAAA,wBACT,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,gBAAgB;AAAA,oBACd,QAAQ;AAAA,sBACN,WAAW;AAAA,wBACT,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,YAAY;AAAA,oBACV,QAAQ;AAAA,sBACN,QAAQ;AAAA,wBACN,MAAM;AAAA,wBACN,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,kBACF;AAAA,kBACA,WAAW;AAAA,oBACT,QAAQ;AAAA,sBACN,uBAAuB;AAAA,sBACvB,WAAW;AAAA,sBACX,YAAY;AAAA,oBACd;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,4BAA4B;AAAA,gBAC1B,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,OAAO,CAAC,iBAAiB;AAAA,kBAC3B;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,cAAc;AAAA,oBACZ,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,aAAa;AAAA,oBACX,QAAQ;AAAA,sBACN,UAAU;AAAA,wBACR,OAAO,CAAC,SAAS,OAAO,KAAK;AAAA,sBAC/B;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,OAAO;AAAA,wBACL,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,KAAK;AAAA,wBACH,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,KAAK;AAAA,wBACH,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,OAAO;AAAA,wBACL,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,OAAO;AAAA,wBACL,QAAQ;AAAA,0BACN,MAAM;AAAA,4BACJ,MAAM;AAAA,4BACN,IAAI;AAAA,0BACN;AAAA,wBACF;AAAA,sBACF;AAAA,sBACA,KAAK;AAAA,wBACH,QAAQ;AAAA,0BACN,OAAO;AAAA,4BACL,MAAM;AAAA,4BACN,IAAI;AAAA,0BACN;AAAA,wBACF;AAAA,sBACF;AAAA,sBACA,KAAK;AAAA,wBACH,QAAQ;AAAA,0BACN,OAAO;AAAA,4BACL,MAAM;AAAA,4BACN,IAAI;AAAA,0BACN;AAAA,wBACF;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,QAAQ;AAAA,gBACN,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,OAAO;AAAA,gBACL,QAAQ;AAAA,kBACN,WAAW;AAAA,oBACT,OAAO,CAAC,UAAU,UAAU,UAAU,WAAW;AAAA,kBACnD;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,QAAQ;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,kBAAkB;AAAA,oBAChB,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,mBAAmB;AAAA,gBACjB,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,iBAAiB;AAAA,oBACf,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,gBACA,QAAQ;AAAA,kBACN,gBAAgB;AAAA,oBACd,QAAQ;AAAA,sBACN,eAAe;AAAA,wBACb,OAAO,CAAC,oBAAoB,aAAa,WAAW,WAAW,yBAAyB,oBAAoB;AAAA,sBAC9G;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,WAAW;AAAA,wBACT,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,kBAAkB;AAAA,wBAChB,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,WAAW;AAAA,wBACT,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,SAAS;AAAA,wBACP,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,SAAS;AAAA,wBACP,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,uBAAuB;AAAA,wBACrB,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,sBACA,oBAAoB;AAAA,wBAClB,MAAM;AAAA,wBACN,IAAI;AAAA,sBACN;AAAA,oBACF;AAAA,oBACA,QAAQ;AAAA,sBACN,aAAa;AAAA,wBACX,QAAQ;AAAA,0BACN,0BAA0B;AAAA,0BAC1B,cAAc;AAAA,wBAChB;AAAA,sBACF;AAAA,oBACF;AAAA,kBACF;AAAA,gBACF;AAAA,cACF;AAAA,cACA,aAAa;AAAA,gBACX,QAAQ;AAAA,kBACN,YAAY;AAAA,oBACV,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,kBAAkB;AAAA,oBAChB,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,gBAAgB;AAAA,gBACd,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,WAAW;AAAA,oBACT,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,kBAAkB;AAAA,oBAChB,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,gBAAgB;AAAA,gBACd,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,kBAAkB;AAAA,oBAChB,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,gBAAgB;AAAA,gBACd,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,kBAAkB;AAAA,oBAChB,MAAM;AAAA,oBACN,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,cACA,iBAAiB;AAAA,gBACf,QAAQ;AAAA,kBACN,UAAU;AAAA,oBACR,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,OAAO;AAAA,oBACL,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,kBACA,gBAAgB;AAAA,oBACd,MAAM;AAAA,oBACN,IAAI;AAAA,kBACN;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,KAAK;AAAA,QACH,SAAS;AAAA,UACP,YAAY;AAAA,UACZ,qBAAqB;AAAA,UACrB,sBAAsB;AAAA,UACtB,cAAc;AAAA,UACd,mBAAmB;AAAA,UACnB,kBAAkB;AAAA,QACpB;AAAA,QACA,QAAQ;AAAA,UACN,MAAM;AAAA,YACJ,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,UACA,MAAM;AAAA,YACJ,QAAQ;AAAA,cACN,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,UAAU;AAAA,YACR,QAAQ;AAAA,cACN,SAAS;AAAA,gBACP,OAAO,CAAC,OAAO,OAAO,QAAQ,UAAU,SAAS,QAAQ;AAAA,cAC3D;AAAA,YACF;AAAA,YACA,QAAQ;AAAA,cACN,KAAK;AAAA,gBACH,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,KAAK;AAAA,gBACH,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,OAAO;AAAA,gBACL,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,QAAQ;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,oBAAoB;AAAA,gBAClB,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,mBAAmB;AAAA,YACjB,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,UACA,iBAAiB;AAAA,YACf,MAAM;AAAA,YACN,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,UACA,aAAa;AAAA,YACX,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,UACA,aAAa;AAAA,YACX,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,UACA,eAAe;AAAA,YACb,MAAM;AAAA,YACN,MAAM;AAAA,YACN,IAAI;AAAA,YACJ,QAAQ;AAAA,UACV;AAAA,UACA,eAAe;AAAA,YACb,QAAQ;AAAA,cACN,4BAA4B;AAAA,cAC5B,UAAU;AAAA,cACV,UAAU;AAAA,cACV,aAAa;AAAA,cACb,YAAY;AAAA,cACZ,WAAW;AAAA,cACX,gBAAgB;AAAA,cAChB,mBAAmB;AAAA,YACrB;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,MAAM;AAAA,QACJ,SAAS;AAAA,UACP,kBAAkB;AAAA,UAClB,YAAY;AAAA,UACZ,qBAAqB;AAAA,UACrB,sBAAsB;AAAA,UACtB,cAAc;AAAA,UACd,mBAAmB;AAAA,QACrB;AAAA,QACA,QAAQ;AAAA,UACN,QAAQ;AAAA,YACN,QAAQ;AAAA,cACN,UAAU;AAAA,gBACR,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,WAAW;AAAA,gBACT,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MACA,KAAK;AAAA,QACH,SAAS;AAAA,UACP,kBAAkB;AAAA,UAClB,YAAY;AAAA,UACZ,qBAAqB;AAAA,UACrB,sBAAsB;AAAA,UACtB,cAAc;AAAA,UACd,mBAAmB;AAAA,QACrB;AAAA,QACA,QAAQ;AAAA,UACN,QAAQ;AAAA,YACN,QAAQ;AAAA,cACN,MAAM;AAAA,gBACJ,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,cACA,SAAS;AAAA,gBACP,MAAM;AAAA,gBACN,MAAM;AAAA,gBACN,IAAI;AAAA,cACN;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;AACA,IAAI,SAAS;AAAA,EACX;AACF;AACA,IAAI,WAAwB,OAAO,OAAO;AAAA,EACxC,WAAW;AAAA,EACX;AAAA,EACA,WAAW;AACb,CAAC;AAmBD,IAAM,qBAAqB;AAAA,EACzB,OAAO;AAAA,EACP,OAAO;AAAA,EACP,UAAU;AAAA,EACV,QAAQ;AACV;AAMA,SAAS,aAAa;AACpB,QAAM,oBAAgC,qBAAS,UAAU,kBAAkB;AAC3E,SAAY,2BAAsB,iBAAiB;AACrD;AAmBA,SAAS,cAAc,cAAc;AACnC,QAAMqB,UAAS,WAAW;AAC1B,SAAO,IAAI,eAAeA,SAAQ,YAAY;AAChD;AAEA,SAAS,yBAAyB;AAChC,SAAO,IAAI,wBAAwB;AACrC;AAmBA,SAAS,YAAY;AACnB,MAAI,QAAQ,IAAI,yBAAyB,OAAO;AAE9C,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEA,SAAS,cAAc;AACrB,SAAO;AACT;AAkBA,SAAS,cAAc,YAAY;AACjC,SAAO,IAAI;AAAA,IAAoB;AAAA;AAAA,IAAgC;AAAA,EAAK;AACtE;AAkBA,IAAM,YAAY;AAKlB,IAAM,mCAAmC;AACzC,IAAM,yBAAyB;AAE/B,IAAM,+BAA+B,KAAK;AAU1C,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAIA,OAIA,SAMA,iBAAiB,kCAKjB,gBAAgB,wBAMhB,aAAa,8BAA8B;AACzC,SAAK,QAAQ;AACb,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,gBAAgB;AACrB,SAAK,aAAa;AAClB,SAAK,gBAAgB;AACrB,SAAK,eAAe;AAEpB,SAAK,kBAAkB,KAAK,IAAI;AAChC,SAAK,MAAM;AAAA,EACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ;AACN,SAAK,gBAAgB;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa;AACX,SAAK,gBAAgB,KAAK;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAc,IAAI;AAEhB,SAAK,OAAO;AAGZ,UAAM,2BAA2B,KAAK,MAAM,KAAK,gBAAgB,KAAK,cAAc,CAAC;AAErF,UAAM,eAAe,KAAK,IAAI,GAAG,KAAK,IAAI,IAAI,KAAK,eAAe;AAElE,UAAM,mBAAmB,KAAK,IAAI,GAAG,2BAA2B,YAAY;AAC5E,QAAI,mBAAmB,GAAG;AACxB,eAAS,WAAW,mBAAmB,gBAAgB,oBAAyB,KAAK,aAAa,2BAAgC,wBAAwB,sBAA2B,YAAY,UAAU;AAAA,IAC7M;AACA,SAAK,eAAe,KAAK,MAAM,kBAAkB,KAAK,SAAS,kBAAkB,MAAM;AACrF,WAAK,kBAAkB,KAAK,IAAI;AAChC,aAAO,GAAG;AAAA,IACZ,CAAC;AAGD,SAAK,iBAAiB,KAAK;AAC3B,QAAI,KAAK,gBAAgB,KAAK,gBAAgB;AAC5C,WAAK,gBAAgB,KAAK;AAAA,IAC5B;AACA,QAAI,KAAK,gBAAgB,KAAK,YAAY;AACxC,WAAK,gBAAgB,KAAK;AAAA,IAC5B;AAAA,EACF;AAAA,EACA,cAAc;AACZ,QAAI,KAAK,iBAAiB,MAAM;AAC9B,WAAK,aAAa,UAAU;AAC5B,WAAK,eAAe;AAAA,IACtB;AAAA,EACF;AAAA,EACA,SAAS;AACP,QAAI,KAAK,iBAAiB,MAAM;AAC9B,WAAK,aAAa,OAAO;AACzB,WAAK,eAAe;AAAA,IACtB;AAAA,EACF;AAAA;AAAA,EAEA,gBAAgB;AACd,YAAQ,KAAK,OAAO,IAAI,OAAO,KAAK;AAAA,EACtC;AACF;AAkBA,IAAM,YAAY;AAElB,IAAM,kBAAkB,KAAK;AAE7B,IAAM,qBAAqB,KAAK;AAiChC,IAAM,mBAAN,MAAuB;AAAA,EACrB,YAAY,OAAO,mBAAmB,aAAa,eAAe,YAAY,yBAAyB,6BAA6B,UAAU;AAC5I,SAAK,QAAQ;AACb,SAAK,cAAc;AACnB,SAAK,gBAAgB;AACrB,SAAK,aAAa;AAClB,SAAK,0BAA0B;AAC/B,SAAK,8BAA8B;AACnC,SAAK,WAAW;AAChB,SAAK,QAAQ;AAMb,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,SAAK,cAAc;AACnB,SAAK,SAAS;AAId,SAAK,gBAAgB;AACrB,SAAK,UAAU,IAAI,mBAAmB,OAAO,iBAAiB;AAAA,EAChE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,YAAY;AACV,WAAO,KAAK,UAAU,KAA0C,KAAK,UAAU,KAAyC,KAAK,OAAO;AAAA,EACtI;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAS;AACP,WAAO,KAAK,UAAU,KAAsC,KAAK,UAAU;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ;AACN,SAAK,gBAAgB;AACrB,QAAI,KAAK,UAAU,GAAqC;AACtD,WAAK,eAAe;AACpB;AAAA,IACF;AACA,SAAK,KAAK;AAAA,EACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,OAAO;AAAA;AACX,UAAI,KAAK,UAAU,GAAG;AACpB,cAAM,KAAK;AAAA,UAAM;AAAA;AAAA,QAAqC;AAAA,MACxD;AAAA,IACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,iBAAiB;AACf,SAAK,QAAQ;AACb,SAAK,QAAQ,MAAM;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,WAAW;AAGT,QAAI,KAAK,OAAO,KAAK,KAAK,cAAc,MAAM;AAC5C,WAAK,YAAY,KAAK,MAAM,kBAAkB,KAAK,aAAa,iBAAiB,MAAM,KAAK,qBAAqB,CAAC;AAAA,IACpH;AAAA,EACF;AAAA;AAAA,EAEA,YAAY,KAAK;AACf,SAAK,gBAAgB;AACrB,SAAK,OAAO,KAAK,GAAG;AAAA,EACtB;AAAA;AAAA,EAEM,uBAAuB;AAAA;AAC3B,UAAI,KAAK,OAAO,GAAG;AAGjB,eAAO,KAAK;AAAA,UAAM;AAAA;AAAA,QAAqC;AAAA,MACzD;AAAA,IACF;AAAA;AAAA;AAAA,EAEA,kBAAkB;AAChB,QAAI,KAAK,WAAW;AAClB,WAAK,UAAU,OAAO;AACtB,WAAK,YAAY;AAAA,IACnB;AAAA,EACF;AAAA;AAAA,EAEA,oBAAoB;AAClB,QAAI,KAAK,aAAa;AACpB,WAAK,YAAY,OAAO;AACxB,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcM,MAAM,YAAY,OAAO;AAAA;AAE7B,WAAK,gBAAgB;AACrB,WAAK,kBAAkB;AACvB,WAAK,QAAQ,OAAO;AAGpB,WAAK;AACL,UAAI,eAAe,GAAqC;AAEtD,aAAK,QAAQ,MAAM;AAAA,MACrB,WAAW,SAAS,MAAM,SAAS,KAAK,oBAAoB;AAE1D,iBAAS,MAAM,SAAS,CAAC;AACzB,iBAAS,iEAAiE;AAC1E,aAAK,QAAQ,WAAW;AAAA,MAC1B,WAAW,SAAS,MAAM,SAAS,KAAK,mBAAmB,KAAK,UAAU,GAAuC;AAO/G,aAAK,wBAAwB,gBAAgB;AAC7C,aAAK,4BAA4B,gBAAgB;AAAA,MACnD;AAEA,UAAI,KAAK,WAAW,MAAM;AACxB,aAAK,SAAS;AACd,aAAK,OAAO,MAAM;AAClB,aAAK,SAAS;AAAA,MAChB;AAGA,WAAK,QAAQ;AAEb,YAAM,KAAK,SAAS,QAAQ,KAAK;AAAA,IACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW;AAAA,EAAC;AAAA,EACZ,OAAO;AACL,SAAK,QAAQ;AACb,UAAM,sBAAsB,KAAK,0BAA0B,KAAK,UAAU;AAE1E,UAAM,aAAa,KAAK;AACxB,YAAQ,IAAI,CAAC,KAAK,wBAAwB,SAAS,GAAG,KAAK,4BAA4B,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,WAAW,aAAa,MAAM;AAKvI,UAAI,KAAK,eAAe,YAAY;AAIlC,aAAK,YAAY,WAAW,aAAa;AAAA,MAC3C;AAAA,IACF,GAAG,WAAS;AACV,0BAAoB,MAAM;AACxB,cAAM,WAAW,IAAI,eAAe,KAAK,SAAS,iCAAiC,MAAM,OAAO;AAChG,eAAO,KAAK,kBAAkB,QAAQ;AAAA,MACxC,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,YAAY,WAAW,eAAe;AACpC,UAAM,sBAAsB,KAAK,0BAA0B,KAAK,UAAU;AAC1E,SAAK,SAAS,KAAK,SAAS,WAAW,aAAa;AACpD,SAAK,OAAO,YAAY,MAAM;AAC5B,0BAAoB,MAAM,KAAK,SAAS,YAAY,CAAC;AAAA,IACvD,CAAC;AACD,SAAK,OAAO,OAAO,MAAM;AACvB,0BAAoB,MAAM;AACxB,aAAK,QAAQ;AACb,aAAK,cAAc,KAAK,MAAM,kBAAkB,KAAK,eAAe,oBAAoB,MAAM;AAC5F,cAAI,KAAK,OAAO,GAAG;AACjB,iBAAK,QAAQ;AAAA,UACf;AACA,iBAAO,QAAQ,QAAQ;AAAA,QACzB,CAAC;AACD,eAAO,KAAK,SAAS,OAAO;AAAA,MAC9B,CAAC;AAAA,IACH,CAAC;AACD,SAAK,OAAO,QAAQ,WAAS;AAC3B,0BAAoB,MAAM;AACxB,eAAO,KAAK,kBAAkB,KAAK;AAAA,MACrC,CAAC;AAAA,IACH,CAAC;AACD,SAAK,OAAO,UAAU,SAAO;AAC3B,0BAAoB,MAAM;AACxB,YAAI,EAAE,KAAK,kBAAkB,GAAG;AAC9B,iBAAO,KAAK,QAAQ,GAAG;AAAA,QACzB,OAAO;AACL,iBAAO,KAAK,OAAO,GAAG;AAAA,QACxB;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EACA,iBAAiB;AACf,SAAK,QAAQ;AACb,SAAK,QAAQ,cAAc,MAAY;AACrC,WAAK,QAAQ;AACb,WAAK,MAAM;AAAA,IACb,EAAC;AAAA,EACH;AAAA;AAAA,EAEA,kBAAkB,OAAO;AACvB,aAAS,WAAW,qBAAqB,KAAK,EAAE;AAChD,SAAK,SAAS;AAKd,WAAO,KAAK,MAAM,GAAqC,KAAK;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,0BAA0B,iBAAiB;AACzC,WAAO,QAAM;AACX,WAAK,MAAM,iBAAiB,MAAM;AAChC,YAAI,KAAK,eAAe,iBAAiB;AACvC,iBAAO,GAAG;AAAA,QACZ,OAAO;AACL,mBAAS,WAAW,uDAAuD;AAC3E,iBAAO,QAAQ,QAAQ;AAAA,QACzB;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF;AACF;AAQA,IAAM,yBAAN,cAAqC,iBAAiB;AAAA,EACpD,YAAY,OAAO,YAAY,iBAAiB,qBAAqB,YAAY,UAAU;AACzF,UAAM,OAAO,oCAAgF,sBAAqD,wBAAyD,YAAY,iBAAiB,qBAAqB,QAAQ;AACrQ,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,SAAS,WAAW,eAAe;AACjC,WAAO,KAAK,WAAW,WAAW,UAAU,WAAW,aAAa;AAAA,EACtE;AAAA,EACA,QAAQ,kBAAkB;AACxB,WAAO,KAAK,OAAO,gBAAgB;AAAA,EACrC;AAAA,EACA,OAAO,kBAAkB;AAEvB,SAAK,QAAQ,MAAM;AACnB,UAAM,cAAc,gBAAgB,KAAK,YAAY,gBAAgB;AACrE,UAAM,WAAW,0BAA0B,gBAAgB;AAC3D,WAAO,KAAK,SAAS,cAAc,aAAa,QAAQ;AAAA,EAC1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,YAAY;AAChB,UAAM,UAAU,CAAC;AACjB,YAAQ,WAAW,qBAAqB,KAAK,UAAU;AACvD,YAAQ,YAAY,SAAS,KAAK,YAAY,UAAU;AACxD,UAAM,SAAS,sBAAsB,KAAK,YAAY,UAAU;AAChE,QAAI,QAAQ;AACV,cAAQ,SAAS;AAAA,IACnB;AACA,SAAK,YAAY,OAAO;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,UAAU;AAChB,UAAM,UAAU,CAAC;AACjB,YAAQ,WAAW,qBAAqB,KAAK,UAAU;AACvD,YAAQ,eAAe;AACvB,SAAK,YAAY,OAAO;AAAA,EAC1B;AACF;AAkBA,IAAM,wBAAN,cAAoC,iBAAiB;AAAA,EACnD,YAAY,OAAO,YAAY,iBAAiB,qBAAqB,YAAY,UAAU;AACzF,UAAM,OAAO,mCAA8E,qBAAmD,wBAAyD,YAAY,iBAAiB,qBAAqB,QAAQ;AACjQ,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,oBAAoB;AACtB,WAAO,KAAK,gBAAgB;AAAA,EAC9B;AAAA;AAAA,EAEA,QAAQ;AACN,SAAK,kBAAkB;AACvB,UAAM,MAAM;AAAA,EACd;AAAA,EACA,WAAW;AACT,QAAI,KAAK,mBAAmB;AAC1B,WAAK,eAAe,CAAC,CAAC;AAAA,IACxB;AAAA,EACF;AAAA,EACA,SAAS,WAAW,eAAe;AACjC,WAAO,KAAK,WAAW,WAAW,SAAS,WAAW,aAAa;AAAA,EACrE;AAAA,EACA,QAAQ,eAAe;AAErB,eAAW,CAAC,CAAC,cAAc,WAAW;AACtC,SAAK,kBAAkB,cAAc;AAErC,eAAW,CAAC,cAAc,gBAAgB,cAAc,aAAa,WAAW,CAAC;AACjF,WAAO,KAAK,SAAS,oBAAoB;AAAA,EAC3C;AAAA,EACA,OAAO,eAAe;AAEpB,eAAW,CAAC,CAAC,cAAc,WAAW;AACtC,SAAK,kBAAkB,cAAc;AAIrC,SAAK,QAAQ,MAAM;AACnB,UAAM,UAAU,iBAAiB,cAAc,cAAc,cAAc,UAAU;AACrF,UAAM,gBAAgB,YAAY,cAAc,UAAU;AAC1D,WAAO,KAAK,SAAS,iBAAiB,eAAe,OAAO;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,iBAAiB;AAGf,UAAM,UAAU,CAAC;AACjB,YAAQ,WAAW,qBAAqB,KAAK,UAAU;AACvD,SAAK,YAAY,OAAO;AAAA,EAC1B;AAAA;AAAA,EAEA,eAAe,WAAW;AACxB,UAAM,UAAU;AAAA,MACd,aAAa,KAAK;AAAA,MAClB,QAAQ,UAAU,IAAI,cAAY,WAAW,KAAK,YAAY,QAAQ,CAAC;AAAA,IACzE;AACA,SAAK,YAAY,OAAO;AAAA,EAC1B;AACF;AAuBA,IAAM,YAAN,MAAgB;AAAC;AAKjB,IAAM,gBAAN,cAA4B,UAAU;AAAA,EACpC,YAAY,iBAAiB,qBAAqB,YAAY,YAAY;AACxE,UAAM;AACN,SAAK,kBAAkB;AACvB,SAAK,sBAAsB;AAC3B,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,oBAAoB;AAClB,QAAI,KAAK,YAAY;AACnB,YAAM,IAAI,eAAe,KAAK,qBAAqB,yCAAyC;AAAA,IAC9F;AAAA,EACF;AAAA;AAAA,EAEA,UAAU,SAAS,YAAY,cAAc,SAAS;AACpD,SAAK,kBAAkB;AACvB,WAAO,QAAQ,IAAI,CAAC,KAAK,gBAAgB,SAAS,GAAG,KAAK,oBAAoB,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,WAAW,aAAa,MAAM;AAC9H,aAAO,KAAK,WAAW,UAAU,SAAS,eAAe,YAAY,YAAY,GAAG,SAAS,WAAW,aAAa;AAAA,IACvH,CAAC,EAAE,MAAM,WAAS;AAChB,UAAI,MAAM,SAAS,iBAAiB;AAClC,YAAI,MAAM,SAAS,KAAK,iBAAiB;AACvC,eAAK,gBAAgB,gBAAgB;AACrC,eAAK,oBAAoB,gBAAgB;AAAA,QAC3C;AACA,cAAM;AAAA,MACR,OAAO;AACL,cAAM,IAAI,eAAe,KAAK,SAAS,MAAM,SAAS,CAAC;AAAA,MACzD;AAAA,IACF,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,mBAAmB,SAAS,YAAY,cAAc,SAAS,uBAAuB;AACpF,SAAK,kBAAkB;AACvB,WAAO,QAAQ,IAAI,CAAC,KAAK,gBAAgB,SAAS,GAAG,KAAK,oBAAoB,SAAS,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,WAAW,aAAa,MAAM;AAC9H,aAAO,KAAK,WAAW,mBAAmB,SAAS,eAAe,YAAY,YAAY,GAAG,SAAS,WAAW,eAAe,qBAAqB;AAAA,IACvJ,CAAC,EAAE,MAAM,WAAS;AAChB,UAAI,MAAM,SAAS,iBAAiB;AAClC,YAAI,MAAM,SAAS,KAAK,iBAAiB;AACvC,eAAK,gBAAgB,gBAAgB;AACrC,eAAK,oBAAoB,gBAAgB;AAAA,QAC3C;AACA,cAAM;AAAA,MACR,OAAO;AACL,cAAM,IAAI,eAAe,KAAK,SAAS,MAAM,SAAS,CAAC;AAAA,MACzD;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,YAAY;AACV,SAAK,aAAa;AAClB,SAAK,WAAW,UAAU;AAAA,EAC5B;AACF;AAGA,SAAS,aAAa,iBAAiB,qBAAqB,YAAY,YAAY;AAClF,SAAO,IAAI,cAAc,iBAAiB,qBAAqB,YAAY,UAAU;AACvF;AACA,SAAe,gBAAgB,WAAW,WAAW;AAAA;AACnD,UAAM,gBAAgB,UAAU,SAAS;AACzC,UAAM,UAAU;AAAA,MACd,QAAQ,UAAU,IAAI,OAAK,WAAW,cAAc,YAAY,CAAC,CAAC;AAAA,IACpE;AACA,UAAM,cAAc,UAAU,UAAU,cAAc,WAAW,YAAY,aAAa,UAAU,GAAG,OAAO;AAAA,EAChH;AAAA;AACA,SAAe,2BAA2B,WAAW,MAAM;AAAA;AACzD,UAAM,gBAAgB,UAAU,SAAS;AACzC,UAAM,UAAU;AAAA,MACd,WAAW,KAAK,IAAI,OAAK,OAAO,cAAc,YAAY,CAAC,CAAC;AAAA,IAC9D;AACA,UAAM,WAAW,MAAM,cAAc,mBAAmB,qBAAqB,cAAc,WAAW,YAAY,aAAa,UAAU,GAAG,SAAS,KAAK,MAAM;AAChK,UAAM,OAAO,oBAAI,IAAI;AACrB,aAAS,QAAQ,WAAS;AACxB,YAAMZ,OAAM,8BAA8B,cAAc,YAAY,KAAK;AACzE,WAAK,IAAIA,KAAI,IAAI,SAAS,GAAGA,IAAG;AAAA,IAClC,CAAC;AACD,UAAM,SAAS,CAAC;AAChB,SAAK,QAAQ,SAAO;AAClB,YAAMA,OAAM,KAAK,IAAI,IAAI,SAAS,CAAC;AACnC,iBAAW,CAAC,CAACA,IAAG;AAChB,aAAO,KAAKA,IAAG;AAAA,IACjB,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AACA,SAAe,6BAA6B,WAAWK,QAAO,YAAY;AAAA;AACxE,QAAI;AACJ,UAAM,gBAAgB,UAAU,SAAS;AACzC,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,IACF,IAAI,6BAA6B,cAAc,YAAY,uBAAuBA,MAAK,GAAG,UAAU;AACpG,QAAI,CAAC,cAAc,WAAW,uCAAuC;AACnE,aAAO,QAAQ;AAAA,IACjB;AACA,UAAM,WAAW,MAAM,cAAc;AAAA,MAAmB;AAAA,MAAuB,cAAc,WAAW;AAAA,MAAY;AAAA,MAAQ;AAAA;AAAA,MAAmC;AAAA,IAAC;AAEhK,UAAM,iBAAiB,SAAS,OAAO,WAAS,CAAC,CAAC,MAAM,MAAM;AAC9D,eAAW,eAAe,WAAW,CAAC;AAItC,UAAM,2BAA2B,KAAK,eAAe,CAAC,EAAE,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG;AACxG,UAAM,iBAAiB,OAAO,KAAK,uBAAuB,EAAE,OAAO,CAAC,aAAa,QAAQ;AACvF,kBAAY,SAAS,GAAG,CAAC,IAAI,wBAAwB,GAAG;AACxD,aAAO;AAAA,IACT,GAAG,CAAC,CAAC;AACL,WAAO;AAAA,EACT;AAAA;AACA,SAAS,yBAAyB,WAAW,OAAO,UAAU;AAC5D,QAAM,gBAAgB,UAAU,SAAS;AACzC,gBAAc,kBAAkB;AAChC,SAAO,IAAI,sBAAsB,OAAO,cAAc,YAAY,cAAc,iBAAiB,cAAc,qBAAqB,cAAc,YAAY,QAAQ;AACxK;AACA,SAAS,yBAAyB,WAAW,OAAO,UAAU;AAC5D,QAAM,gBAAgB,UAAU,SAAS;AACzC,gBAAc,kBAAkB;AAChC,SAAO,IAAI,uBAAuB,OAAO,cAAc,YAAY,cAAc,iBAAiB,cAAc,qBAAqB,cAAc,YAAY,QAAQ;AACzK;AAkBA,IAAM,YAAY;AAMlB,IAAM,4BAA4B;AAKlC,IAAM,0BAA0B,KAAK;AAYrC,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,YAAY,oBAAoB;AAC1C,SAAK,aAAa;AAClB,SAAK,qBAAqB;AAE1B,SAAK,QAAQ;AAMb,SAAK,sBAAsB;AAM3B,SAAK,mBAAmB;AAMxB,SAAK,4BAA4B;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,yBAAyB;AACvB,QAAI,KAAK,wBAAwB,GAAG;AAClC,WAAK;AAAA,QAAgB;AAAA;AAAA,MAAmC;AACxD,WAAK,mBAAmB,KAAK,WAAW,kBAAkB,wBAAyD,yBAAyB,MAAM;AAChJ,aAAK,mBAAmB;AACxB,aAAK,mCAAmC,iCAAiC,0BAA0B,GAAI,WAAgB;AACvH,aAAK;AAAA,UAAgB;AAAA;AAAA,QAAmC;AAIxD,eAAO,QAAQ,QAAQ;AAAA,MACzB,CAAC;AAAA,IACH;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,yBAAyB,OAAO;AAC9B,QAAI,KAAK,UAAU,UAAmC;AACpD,WAAK;AAAA,QAAgB;AAAA;AAAA,MAAmC;AAAA,IAC1D,OAAO;AACL,WAAK;AACL,UAAI,KAAK,uBAAuB,2BAA2B;AACzD,aAAK,sBAAsB;AAC3B,aAAK,mCAAmC,qBAAqB,yBAAyB,8BAAmC,MAAM,SAAS,CAAC,EAAE;AAC3I,aAAK;AAAA,UAAgB;AAAA;AAAA,QAAmC;AAAA,MAC1D;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,IAAI,UAAU;AACZ,SAAK,sBAAsB;AAC3B,SAAK,sBAAsB;AAC3B,QAAI,aAAa,UAAmC;AAGlD,WAAK,4BAA4B;AAAA,IACnC;AACA,SAAK,gBAAgB,QAAQ;AAAA,EAC/B;AAAA,EACA,gBAAgB,UAAU;AACxB,QAAI,aAAa,KAAK,OAAO;AAC3B,WAAK,QAAQ;AACb,WAAK,mBAAmB,QAAQ;AAAA,IAClC;AAAA,EACF;AAAA,EACA,mCAAmC,SAAS;AAC1C,UAAM,UAAU,4CAA4C,OAAO;AAAA;AACnE,QAAI,KAAK,2BAA2B;AAClC,eAAS,OAAO;AAChB,WAAK,4BAA4B;AAAA,IACnC,OAAO;AACL,eAAS,WAAW,OAAO;AAAA,IAC7B;AAAA,EACF;AAAA,EACA,wBAAwB;AACtB,QAAI,KAAK,qBAAqB,MAAM;AAClC,WAAK,iBAAiB,OAAO;AAC7B,WAAK,mBAAmB;AAAA,IAC1B;AAAA,EACF;AACF;AAkBA,IAAM,YAAY;AAElB,IAAM,qBAAqB;AAC3B,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAIA,YACA,WAAW,YAAY,oBAAoB,qBAAqB;AAC9D,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,SAAK,aAAa;AAClB,SAAK,eAAe,CAAC;AAkBrB,SAAK,gBAAgB,CAAC;AAUtB,SAAK,gBAAgB,oBAAI,IAAI;AAK7B,SAAK,gBAAgB,oBAAI,IAAI;AAQ7B,SAAK,wBAAwB,CAAC;AAC9B,SAAK,sBAAsB;AAC3B,SAAK,oBAAoB,YAAY,OAAK;AACxC,iBAAW,iBAAiB,MAAY;AAItC,YAAI,cAAc,IAAI,GAAG;AACvB,mBAAS,WAAW,qDAAqD;AACzE,gBAAM,eAAe,IAAI;AAAA,QAC3B;AAAA,MACF,EAAC;AAAA,IACH,CAAC;AACD,SAAK,qBAAqB,IAAI,mBAAmB,YAAY,kBAAkB;AAAA,EACjF;AACF;AACA,SAAS,eAAe,YAAY,WAAW,YAAY,oBAAoB,qBAAqB;AAClG,SAAO,IAAI,gBAAgB,YAAY,WAAW,YAAY,oBAAoB,mBAAmB;AACvG;AAEA,SAAS,yBAAyB,aAAa;AAC7C,QAAM,kBAAkB,UAAU,WAAW;AAC7C,kBAAgB,cAAc;AAAA,IAAO;AAAA;AAAA,EAAiC;AACtE,SAAO,sBAAsB,eAAe;AAC9C;AACA,SAAe,sBAAsB,iBAAiB;AAAA;AACpD,QAAI,cAAc,eAAe,GAAG;AAClC,iBAAW,wBAAwB,gBAAgB,uBAAuB;AACxE,cAAM;AAAA;AAAA,UAAoC;AAAA,QAAI;AAAA,MAChD;AAAA,IACF;AAAA,EACF;AAAA;AAKA,SAAe,0BAA0B,aAAa;AAAA;AACpD,UAAM,kBAAkB,UAAU,WAAW;AAC7C,oBAAgB,cAAc;AAAA,MAAI;AAAA;AAAA,IAAiC;AACnE,UAAM,uBAAuB,eAAe;AAE5C,oBAAgB,mBAAmB;AAAA,MAAI;AAAA;AAAA,IAAmC;AAAA,EAC5E;AAAA;AACA,SAAe,uBAAuB,iBAAiB;AAAA;AACrD,eAAW,wBAAwB,gBAAgB,uBAAuB;AACxE,YAAM;AAAA;AAAA,QAAoC;AAAA,MAAK;AAAA,IACjD;AAAA,EACF;AAAA;AACA,SAAe,oBAAoB,aAAa;AAAA;AAC9C,UAAM,kBAAkB,UAAU,WAAW;AAC7C,aAAS,WAAW,4BAA4B;AAChD,oBAAgB,cAAc;AAAA,MAAI;AAAA;AAAA,IAA6B;AAC/D,UAAM,uBAAuB,eAAe;AAC5C,oBAAgB,oBAAoB,SAAS;AAG7C,oBAAgB,mBAAmB;AAAA,MAAI;AAAA;AAAA,IAAmC;AAAA,EAC5E;AAAA;AAKA,SAAS,kBAAkB,aAAa,YAAY;AAClD,QAAM,kBAAkB,UAAU,WAAW;AAC7C,MAAI,gBAAgB,cAAc,IAAI,WAAW,QAAQ,GAAG;AAC1D;AAAA,EACF;AAEA,kBAAgB,cAAc,IAAI,WAAW,UAAU,UAAU;AACjE,MAAI,uBAAuB,eAAe,GAAG;AAE3C,qBAAiB,eAAe;AAAA,EAClC,WAAW,kBAAkB,eAAe,EAAE,OAAO,GAAG;AACtD,qBAAiB,iBAAiB,UAAU;AAAA,EAC9C;AACF;AAKA,SAAS,oBAAoB,aAAa,UAAU;AAClD,QAAM,kBAAkB,UAAU,WAAW;AAC7C,QAAM,cAAc,kBAAkB,eAAe;AACrD,kBAAgB,cAAc,OAAO,QAAQ;AAC7C,MAAI,YAAY,OAAO,GAAG;AACxB,uBAAmB,iBAAiB,QAAQ;AAAA,EAC9C;AACA,MAAI,gBAAgB,cAAc,SAAS,GAAG;AAC5C,QAAI,YAAY,OAAO,GAAG;AACxB,kBAAY,SAAS;AAAA,IACvB,WAAW,cAAc,eAAe,GAAG;AAIzC,sBAAgB,mBAAmB;AAAA,QAAI;AAAA;AAAA,MAAmC;AAAA,IAC5E;AAAA,EACF;AACF;AAKA,SAAS,iBAAiB,iBAAiB,YAAY;AACrD,kBAAgB,sBAAsB,2BAA2B,WAAW,QAAQ;AACpF,MAAI,WAAW,YAAY,oBAAoB,IAAI,KAAK,WAAW,gBAAgB,UAAU,gBAAgB,IAAI,CAAC,IAAI,GAAG;AACvH,UAAM,gBAAgB,gBAAgB,aAAa,uBAAuB,WAAW,QAAQ,EAAE;AAC/F,iBAAa,WAAW,kBAAkB,aAAa;AAAA,EACzD;AACA,oBAAkB,eAAe,EAAE,MAAM,UAAU;AACrD;AAMA,SAAS,mBAAmB,iBAAiB,UAAU;AACrD,kBAAgB,sBAAsB,2BAA2B,QAAQ;AACzE,oBAAkB,eAAe,EAAE,QAAQ,QAAQ;AACrD;AACA,SAAS,iBAAiB,iBAAiB;AACzC,kBAAgB,wBAAwB,IAAI,sBAAsB;AAAA,IAChE,wBAAwB,cAAY,gBAAgB,aAAa,uBAAuB,QAAQ;AAAA,IAChG,wBAAwB,cAAY,gBAAgB,cAAc,IAAI,QAAQ,KAAK;AAAA,IACnF,eAAe,MAAM,gBAAgB,UAAU,WAAW;AAAA,EAC5D,CAAC;AACD,oBAAkB,eAAe,EAAE,MAAM;AACzC,kBAAgB,mBAAmB,uBAAuB;AAC5D;AAKA,SAAS,uBAAuB,iBAAiB;AAC/C,SAAO,cAAc,eAAe,KAAK,CAAC,kBAAkB,eAAe,EAAE,UAAU,KAAK,gBAAgB,cAAc,OAAO;AACnI;AACA,SAAS,cAAc,aAAa;AAClC,QAAM,kBAAkB,UAAU,WAAW;AAC7C,SAAO,gBAAgB,cAAc,SAAS;AAChD;AACA,SAAS,wBAAwB,iBAAiB;AAChD,kBAAgB,wBAAwB;AAC1C;AACA,SAAe,uBAAuB,iBAAiB;AAAA;AAErD,oBAAgB,mBAAmB;AAAA,MAAI;AAAA;AAAA,IAAiC;AAAA,EAC1E;AAAA;AACA,SAAe,kBAAkB,iBAAiB;AAAA;AAChD,oBAAgB,cAAc,QAAQ,CAAC,YAAY,aAAa;AAC9D,uBAAiB,iBAAiB,UAAU;AAAA,IAC9C,CAAC;AAAA,EACH;AAAA;AACA,SAAe,mBAAmB,iBAAiB,OAAO;AAAA;AACxD,4BAAwB,eAAe;AAEvC,QAAI,uBAAuB,eAAe,GAAG;AAC3C,sBAAgB,mBAAmB,yBAAyB,KAAK;AACjE,uBAAiB,eAAe;AAAA,IAClC,OAAO;AAIL,sBAAgB,mBAAmB;AAAA,QAAI;AAAA;AAAA,MAAmC;AAAA,IAC5E;AAAA,EACF;AAAA;AACA,SAAe,oBAAoB,iBAAiB,aAAa,iBAAiB;AAAA;AAEhF,oBAAgB,mBAAmB;AAAA,MAAI;AAAA;AAAA,IAAiC;AACxE,QAAI,uBAAuB,qBAAqB,YAAY,UAAU,KAA0C,YAAY,OAAO;AAGjI,UAAI;AACF,cAAM,kBAAkB,iBAAiB,WAAW;AAAA,MACtD,SAAS,GAAG;AACV,iBAAS,WAAW,oCAAoC,YAAY,UAAU,KAAK,GAAG,GAAG,CAAC;AAC1F,cAAM,4BAA4B,iBAAiB,CAAC;AAAA,MACtD;AACA;AAAA,IACF;AACA,QAAI,uBAAuB,qBAAqB;AAC9C,sBAAgB,sBAAsB,qBAAqB,WAAW;AAAA,IACxE,WAAW,uBAAuB,uBAAuB;AACvD,sBAAgB,sBAAsB,sBAAsB,WAAW;AAAA,IACzE,OAAO;AACL,sBAAgB,sBAAsB,mBAAmB,WAAW;AAAA,IACtE;AACA,QAAI,CAAC,gBAAgB,QAAQ,gBAAgB,IAAI,CAAC,GAAG;AACnD,UAAI;AACF,cAAM,4BAA4B,MAAM,uCAAuC,gBAAgB,UAAU;AACzG,YAAI,gBAAgB,UAAU,yBAAyB,KAAK,GAAG;AAG7D,gBAAM,mBAAmB,iBAAiB,eAAe;AAAA,QAC3D;AAAA,MACF,SAAS,GAAG;AACV,iBAAS,WAAW,6BAA6B,CAAC;AAClD,cAAM,4BAA4B,iBAAiB,CAAC;AAAA,MACtD;AAAA,IACF;AAAA,EACF;AAAA;AAUA,SAAe,4BAA4B,iBAAiB,GAAG,IAAI;AAAA;AACjE,QAAI,4BAA4B,CAAC,GAAG;AAClC,sBAAgB,cAAc;AAAA,QAAI;AAAA;AAAA,MAAoC;AAEtE,YAAM,uBAAuB,eAAe;AAC5C,sBAAgB,mBAAmB;AAAA,QAAI;AAAA;AAAA,MAAmC;AAC1E,UAAI,CAAC,IAAI;AAIP,aAAK,MAAM,uCAAuC,gBAAgB,UAAU;AAAA,MAC9E;AAEA,sBAAgB,WAAW,iBAAiB,MAAY;AACtD,iBAAS,WAAW,2BAA2B;AAC/C,cAAM,GAAG;AACT,wBAAgB,cAAc;AAAA,UAAO;AAAA;AAAA,QAAoC;AACzE,cAAM,sBAAsB,eAAe;AAAA,MAC7C,EAAC;AAAA,IACH,OAAO;AACL,YAAM;AAAA,IACR;AAAA,EACF;AAAA;AAKA,SAAS,oBAAoB,iBAAiB,IAAI;AAChD,SAAO,GAAG,EAAE,MAAM,OAAK,4BAA4B,iBAAiB,GAAG,EAAE,CAAC;AAC5E;AAMA,SAAS,mBAAmB,iBAAiB,iBAAiB;AAC5D,QAAM,cAAc,gBAAgB,sBAAsB,kBAAkB,eAAe;AAG3F,cAAY,cAAc,QAAQ,CAAC,QAAQ,aAAa;AACtD,QAAI,OAAO,YAAY,oBAAoB,IAAI,GAAG;AAChD,YAAM,aAAa,gBAAgB,cAAc,IAAI,QAAQ;AAE7D,UAAI,YAAY;AACd,wBAAgB,cAAc,IAAI,UAAU,WAAW,gBAAgB,OAAO,aAAa,eAAe,CAAC;AAAA,MAC7G;AAAA,IACF;AAAA,EACF,CAAC;AAGD,cAAY,iBAAiB,QAAQ,CAAC,UAAU,kBAAkB;AAChE,UAAM,aAAa,gBAAgB,cAAc,IAAI,QAAQ;AAC7D,QAAI,CAAC,YAAY;AAEf;AAAA,IACF;AAGA,oBAAgB,cAAc,IAAI,UAAU,WAAW,gBAAgB,WAAW,mBAAmB,WAAW,eAAe,CAAC;AAGhI,uBAAmB,iBAAiB,QAAQ;AAK5C,UAAM,oBAAoB,IAAI,WAAW,WAAW,QAAQ,UAAU,eAAe,WAAW,cAAc;AAC9G,qBAAiB,iBAAiB,iBAAiB;AAAA,EACrD,CAAC;AACD,SAAO,gBAAgB,aAAa,iBAAiB,WAAW;AAClE;AAEA,SAAe,kBAAkB,iBAAiB,aAAa;AAAA;AAC7D,UAAM,QAAQ,YAAY;AAC1B,eAAW,YAAY,YAAY,WAAW;AAE5C,UAAI,gBAAgB,cAAc,IAAI,QAAQ,GAAG;AAC/C,cAAM,gBAAgB,aAAa,aAAa,UAAU,KAAK;AAC/D,wBAAgB,cAAc,OAAO,QAAQ;AAC7C,wBAAgB,sBAAsB,aAAa,QAAQ;AAAA,MAC7D;AAAA,IACF;AAAA,EACF;AAAA;AASA,SAAe,kBAAkB,aAAa;AAAA;AAC5C,UAAM,kBAAkB,UAAU,WAAW;AAC7C,UAAM,cAAc,kBAAkB,eAAe;AACrD,QAAI,uBAAuB,gBAAgB,cAAc,SAAS,IAAI,gBAAgB,cAAc,gBAAgB,cAAc,SAAS,CAAC,EAAE,UAAU;AACxJ,WAAO,sBAAsB,eAAe,GAAG;AAC7C,UAAI;AACF,cAAM,QAAQ,MAAM,+BAA+B,gBAAgB,YAAY,oBAAoB;AACnG,YAAI,UAAU,MAAM;AAClB,cAAI,gBAAgB,cAAc,WAAW,GAAG;AAC9C,wBAAY,SAAS;AAAA,UACvB;AACA;AAAA,QACF,OAAO;AACL,iCAAuB,MAAM;AAC7B,6BAAmB,iBAAiB,KAAK;AAAA,QAC3C;AAAA,MACF,SAAS,GAAG;AACV,cAAM,4BAA4B,iBAAiB,CAAC;AAAA,MACtD;AAAA,IACF;AACA,QAAI,uBAAuB,eAAe,GAAG;AAC3C,uBAAiB,eAAe;AAAA,IAClC;AAAA,EACF;AAAA;AAKA,SAAS,sBAAsB,iBAAiB;AAC9C,SAAO,cAAc,eAAe,KAAK,gBAAgB,cAAc,SAAS;AAClF;AAKA,SAAS,mBAAmB,iBAAiB,OAAO;AAClD,kBAAgB,cAAc,KAAK,KAAK;AACxC,QAAM,cAAc,kBAAkB,eAAe;AACrD,MAAI,YAAY,OAAO,KAAK,YAAY,mBAAmB;AACzD,gBAAY,eAAe,MAAM,SAAS;AAAA,EAC5C;AACF;AACA,SAAS,uBAAuB,iBAAiB;AAC/C,SAAO,cAAc,eAAe,KAAK,CAAC,kBAAkB,eAAe,EAAE,UAAU,KAAK,gBAAgB,cAAc,SAAS;AACrI;AACA,SAAS,iBAAiB,iBAAiB;AACzC,oBAAkB,eAAe,EAAE,MAAM;AAC3C;AACA,SAAe,kBAAkB,iBAAiB;AAAA;AAChD,sBAAkB,eAAe,EAAE,eAAe;AAAA,EACpD;AAAA;AACA,SAAe,yBAAyB,iBAAiB;AAAA;AACvD,UAAM,cAAc,kBAAkB,eAAe;AAErD,eAAW,SAAS,gBAAgB,eAAe;AACjD,kBAAY,eAAe,MAAM,SAAS;AAAA,IAC5C;AAAA,EACF;AAAA;AACA,SAAe,iBAAiB,iBAAiB,eAAe,SAAS;AAAA;AACvE,UAAM,QAAQ,gBAAgB,cAAc,MAAM;AAClD,UAAM,UAAU,oBAAoB,KAAK,OAAO,eAAe,OAAO;AACtE,UAAM,oBAAoB,iBAAiB,MAAM,gBAAgB,aAAa,qBAAqB,OAAO,CAAC;AAG3G,UAAM,kBAAkB,eAAe;AAAA,EACzC;AAAA;AACA,SAAe,mBAAmB,iBAAiB,OAAO;AAAA;AAGxD,QAAI,SAAS,kBAAkB,eAAe,EAAE,mBAAmB;AAEjE,YAAM,iBAAiB,iBAAiB,KAAK;AAAA,IAC/C;AAGA,QAAI,uBAAuB,eAAe,GAAG;AAC3C,uBAAiB,eAAe;AAAA,IAClC;AAAA,EACF;AAAA;AACA,SAAe,iBAAiB,iBAAiB,OAAO;AAAA;AAGtD,QAAI,sBAAsB,MAAM,IAAI,GAAG;AAGrC,YAAM,QAAQ,gBAAgB,cAAc,MAAM;AAIlD,wBAAkB,eAAe,EAAE,eAAe;AAClD,YAAM,oBAAoB,iBAAiB,MAAM,gBAAgB,aAAa,kBAAkB,MAAM,SAAS,KAAK,CAAC;AAGrH,YAAM,kBAAkB,eAAe;AAAA,IACzC;AAAA,EACF;AAAA;AACA,SAAe,eAAe,aAAa;AAAA;AACzC,UAAM,kBAAkB,UAAU,WAAW;AAC7C,oBAAgB,cAAc;AAAA,MAAI;AAAA;AAAA,IAAuC;AACzE,UAAM,uBAAuB,eAAe;AAC5C,oBAAgB,mBAAmB;AAAA,MAAI;AAAA;AAAA,IAAmC;AAC1E,oBAAgB,cAAc;AAAA,MAAO;AAAA;AAAA,IAAuC;AAC5E,UAAM,sBAAsB,eAAe;AAAA,EAC7C;AAAA;AACA,SAAe,kCAAkC,aAAa,MAAM;AAAA;AAClE,UAAM,kBAAkB,UAAU,WAAW;AAC7C,oBAAgB,WAAW,0BAA0B;AACrD,aAAS,WAAW,sCAAsC;AAC1D,UAAM,cAAc,cAAc,eAAe;AAIjD,oBAAgB,cAAc;AAAA,MAAI;AAAA;AAAA,IAAqC;AACvE,UAAM,uBAAuB,eAAe;AAC5C,QAAI,aAAa;AAEf,sBAAgB,mBAAmB;AAAA,QAAI;AAAA;AAAA,MAAmC;AAAA,IAC5E;AACA,UAAM,gBAAgB,aAAa,uBAAuB,IAAI;AAC9D,oBAAgB,cAAc;AAAA,MAAO;AAAA;AAAA,IAAqC;AAC1E,UAAM,sBAAsB,eAAe;AAAA,EAC7C;AAAA;AAIA,SAAe,6BAA6B,aAAa,WAAW;AAAA;AAClE,UAAM,kBAAkB,UAAU,WAAW;AAC7C,QAAI,WAAW;AACb,sBAAgB,cAAc;AAAA,QAAO;AAAA;AAAA,MAAgC;AACrE,YAAM,sBAAsB,eAAe;AAAA,IAC7C,WAAW,CAAC,WAAW;AACrB,sBAAgB,cAAc;AAAA,QAAI;AAAA;AAAA,MAAgC;AAClE,YAAM,uBAAuB,eAAe;AAC5C,sBAAgB,mBAAmB;AAAA,QAAI;AAAA;AAAA,MAAmC;AAAA,IAC5E;AAAA,EACF;AAAA;AASA,SAAS,kBAAkB,iBAAiB;AAC1C,MAAI,CAAC,gBAAgB,aAAa;AAEhC,oBAAgB,cAAc,yBAAyB,gBAAgB,WAAW,gBAAgB,YAAY;AAAA,MAC5G,aAAa,uBAAuB,KAAK,MAAM,eAAe;AAAA,MAC9D,QAAQ,kBAAkB,KAAK,MAAM,eAAe;AAAA,MACpD,SAAS,mBAAmB,KAAK,MAAM,eAAe;AAAA,MACtD,eAAe,oBAAoB,KAAK,MAAM,eAAe;AAAA,IAC/D,CAAC;AACD,oBAAgB,sBAAsB,KAAK,CAAM,YAAW;AAC1D,UAAI,SAAS;AACX,wBAAgB,YAAY,eAAe;AAC3C,YAAI,uBAAuB,eAAe,GAAG;AAC3C,2BAAiB,eAAe;AAAA,QAClC,OAAO;AACL,0BAAgB,mBAAmB;AAAA,YAAI;AAAA;AAAA,UAAmC;AAAA,QAC5E;AAAA,MACF,OAAO;AACL,cAAM,gBAAgB,YAAY,KAAK;AACvC,gCAAwB,eAAe;AAAA,MACzC;AAAA,IACF,EAAC;AAAA,EACH;AACA,SAAO,gBAAgB;AACzB;AASA,SAAS,kBAAkB,iBAAiB;AAC1C,MAAI,CAAC,gBAAgB,aAAa;AAEhC,oBAAgB,cAAc,yBAAyB,gBAAgB,WAAW,gBAAgB,YAAY;AAAA,MAC5G,aAAa,MAAM,QAAQ,QAAQ;AAAA,MACnC,QAAQ,kBAAkB,KAAK,MAAM,eAAe;AAAA,MACpD,SAAS,mBAAmB,KAAK,MAAM,eAAe;AAAA,MACtD,qBAAqB,yBAAyB,KAAK,MAAM,eAAe;AAAA,MACxE,kBAAkB,iBAAiB,KAAK,MAAM,eAAe;AAAA,IAC/D,CAAC;AACD,oBAAgB,sBAAsB,KAAK,CAAM,YAAW;AAC1D,UAAI,SAAS;AACX,wBAAgB,YAAY,eAAe;AAE3C,cAAM,kBAAkB,eAAe;AAAA,MACzC,OAAO;AACL,cAAM,gBAAgB,YAAY,KAAK;AACvC,YAAI,gBAAgB,cAAc,SAAS,GAAG;AAC5C,mBAAS,WAAW,8BAA8B,gBAAgB,cAAc,MAAM,iBAAiB;AACvG,0BAAgB,gBAAgB,CAAC;AAAA,QACnC;AAAA,MACF;AAAA,IACF,EAAC;AAAA,EACH;AACA,SAAO,gBAAgB;AACzB;AAkBA,IAAM,YAAY;AAYlB,IAAM,mBAAN,MAAM,kBAAiB;AAAA,EACrB,YAAY,YAAY,SAAS,cAAc,IAAI,iBAAiB;AAClE,SAAK,aAAa;AAClB,SAAK,UAAU;AACf,SAAK,eAAe;AACpB,SAAK,KAAK;AACV,SAAK,kBAAkB;AACvB,SAAK,WAAW,IAAI,SAAS;AAC7B,SAAK,OAAO,KAAK,SAAS,QAAQ,KAAK,KAAK,KAAK,SAAS,OAAO;AAIjE,SAAK,SAAS,QAAQ,MAAM,SAAO;AAAA,IAAC,CAAC;AAAA,EACvC;AAAA,EACA,IAAI,UAAU;AACZ,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,kBAAkB,YAAY,SAAS,SAAS,IAAI,iBAAiB;AAC1E,UAAM,aAAa,KAAK,IAAI,IAAI;AAChC,UAAM,YAAY,IAAI,kBAAiB,YAAY,SAAS,YAAY,IAAI,eAAe;AAC3F,cAAU,MAAM,OAAO;AACvB,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS;AACb,SAAK,cAAc,WAAW,MAAM,KAAK,mBAAmB,GAAG,OAAO;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,YAAY;AACV,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO,QAAQ;AACb,QAAI,KAAK,gBAAgB,MAAM;AAC7B,WAAK,aAAa;AAClB,WAAK,SAAS,OAAO,IAAI,eAAe,KAAK,WAAW,yBAAyB,SAAS,OAAO,SAAS,GAAG,CAAC;AAAA,IAChH;AAAA,EACF;AAAA,EACA,qBAAqB;AACnB,SAAK,WAAW,iBAAiB,MAAM;AACrC,UAAI,KAAK,gBAAgB,MAAM;AAC7B,aAAK,aAAa;AAClB,eAAO,KAAK,GAAG,EAAE,KAAK,YAAU;AAC9B,iBAAO,KAAK,SAAS,QAAQ,MAAM;AAAA,QACrC,CAAC;AAAA,MACH,OAAO;AACL,eAAO,QAAQ,QAAQ;AAAA,MACzB;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,eAAe;AACb,QAAI,KAAK,gBAAgB,MAAM;AAC7B,WAAK,gBAAgB,IAAI;AACzB,mBAAa,KAAK,WAAW;AAC7B,WAAK,cAAc;AAAA,IACrB;AAAA,EACF;AACF;AAKA,SAAS,6BAA6B,GAAG,KAAK;AAC5C,WAAS,WAAW,GAAG,GAAG,KAAK,CAAC,EAAE;AAClC,MAAI,4BAA4B,CAAC,GAAG;AAClC,WAAO,IAAI,eAAe,KAAK,aAAa,GAAG,GAAG,KAAK,CAAC,EAAE;AAAA,EAC5D,OAAO;AACL,UAAM;AAAA,EACR;AACF;AAwBA,IAAM,cAAN,MAAM,aAAY;AAAA;AAAA,EAEhB,YAAY,MAAM;AAGhB,QAAI,MAAM;AACR,WAAK,aAAa,CAAC,IAAI,OAAO,KAAK,IAAI,EAAE,KAAK,YAAY,WAAW,GAAG,KAAK,GAAG,GAAG;AAAA,IACrF,OAAO;AACL,WAAK,aAAa,CAAC,IAAI,OAAO,YAAY,WAAW,GAAG,KAAK,GAAG,GAAG;AAAA,IACrE;AACA,SAAK,WAAW,YAAY;AAC5B,SAAK,YAAY,IAAI,UAAU,KAAK,UAAU;AAAA,EAChD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,SAAS,QAAQ;AACtB,WAAO,IAAI,aAAY,OAAO,UAAU;AAAA,EAC1C;AAAA,EACA,IAAI,KAAK;AACP,WAAO,KAAK,SAAS,IAAI,GAAG,KAAK;AAAA,EACnC;AAAA,EACA,IAAI,KAAK;AACP,WAAO,KAAK,SAAS,IAAI,GAAG;AAAA,EAC9B;AAAA,EACA,QAAQ;AACN,WAAO,KAAK,UAAU,OAAO;AAAA,EAC/B;AAAA,EACA,OAAO;AACL,WAAO,KAAK,UAAU,OAAO;AAAA,EAC/B;AAAA,EACA,UAAU;AACR,WAAO,KAAK,UAAU,QAAQ;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,KAAK;AACX,UAAML,OAAM,KAAK,SAAS,IAAI,GAAG;AACjC,WAAOA,OAAM,KAAK,UAAU,QAAQA,IAAG,IAAI;AAAA,EAC7C;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK,UAAU;AAAA,EACxB;AAAA;AAAA,EAEA,QAAQ,IAAI;AACV,SAAK,UAAU,iBAAiB,CAAC,GAAG,MAAM;AACxC,SAAG,CAAC;AACJ,aAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA,EAEA,IAAIA,MAAK;AAEP,UAAM,MAAM,KAAK,OAAOA,KAAI,GAAG;AAC/B,WAAO,IAAI,KAAK,IAAI,SAAS,OAAOA,KAAI,KAAKA,IAAG,GAAG,IAAI,UAAU,OAAOA,MAAK,IAAI,CAAC;AAAA,EACpF;AAAA;AAAA,EAEA,OAAO,KAAK;AACV,UAAMA,OAAM,KAAK,IAAI,GAAG;AACxB,QAAI,CAACA,MAAK;AACR,aAAO;AAAA,IACT;AACA,WAAO,KAAK,KAAK,KAAK,SAAS,OAAO,GAAG,GAAG,KAAK,UAAU,OAAOA,IAAG,CAAC;AAAA,EACxE;AAAA,EACA,QAAQ,OAAO;AACb,QAAI,EAAE,iBAAiB,eAAc;AACnC,aAAO;AAAA,IACT;AACA,QAAI,KAAK,SAAS,MAAM,MAAM;AAC5B,aAAO;AAAA,IACT;AACA,UAAM,SAAS,KAAK,UAAU,YAAY;AAC1C,UAAM,UAAU,MAAM,UAAU,YAAY;AAC5C,WAAO,OAAO,QAAQ,GAAG;AACvB,YAAM,UAAU,OAAO,QAAQ,EAAE;AACjC,YAAM,WAAW,QAAQ,QAAQ,EAAE;AACnC,UAAI,CAAC,QAAQ,QAAQ,QAAQ,GAAG;AAC9B,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,WAAW;AACT,UAAM,aAAa,CAAC;AACpB,SAAK,QAAQ,CAAAA,SAAO;AAClB,iBAAW,KAAKA,KAAI,SAAS,CAAC;AAAA,IAChC,CAAC;AACD,QAAI,WAAW,WAAW,GAAG;AAC3B,aAAO;AAAA,IACT,OAAO;AACL,aAAO,sBAAsB,WAAW,KAAK,MAAM,IAAI;AAAA,IACzD;AAAA,EACF;AAAA,EACA,KAAK,UAAU,WAAW;AACxB,UAAM,SAAS,IAAI,aAAY;AAC/B,WAAO,aAAa,KAAK;AACzB,WAAO,WAAW;AAClB,WAAO,YAAY;AACnB,WAAO;AAAA,EACT;AACF;AAsBA,IAAM,oBAAN,MAAwB;AAAA,EACtB,cAAc;AACZ,SAAK,YAAY,IAAI,UAAU,YAAY,UAAU;AAAA,EACvD;AAAA,EACA,MAAM,QAAQ;AACZ,UAAM,MAAM,OAAO,IAAI;AACvB,UAAM,YAAY,KAAK,UAAU,IAAI,GAAG;AACxC,QAAI,CAAC,WAAW;AACd,WAAK,YAAY,KAAK,UAAU,OAAO,KAAK,MAAM;AAClD;AAAA,IACF;AAEA,QAAI,OAAO,SAAS,KAA4B,UAAU,SAAS,GAA6B;AAC9F,WAAK,YAAY,KAAK,UAAU,OAAO,KAAK,MAAM;AAAA,IACpD,WAAW,OAAO,SAAS,KAA+B,UAAU,SAAS,GAA4B;AACvG,WAAK,YAAY,KAAK,UAAU,OAAO,KAAK;AAAA,QAC1C,MAAM,UAAU;AAAA,QAChB,KAAK,OAAO;AAAA,MACd,CAAC;AAAA,IACH,WAAW,OAAO,SAAS,KAA+B,UAAU,SAAS,GAA6B;AACxG,WAAK,YAAY,KAAK,UAAU,OAAO,KAAK;AAAA,QAC1C,MAAM;AAAA,QACN,KAAK,OAAO;AAAA,MACd,CAAC;AAAA,IACH,WAAW,OAAO,SAAS,KAA+B,UAAU,SAAS,GAA0B;AACrG,WAAK,YAAY,KAAK,UAAU,OAAO,KAAK;AAAA,QAC1C,MAAM;AAAA,QACN,KAAK,OAAO;AAAA,MACd,CAAC;AAAA,IACH,WAAW,OAAO,SAAS,KAA8B,UAAU,SAAS,GAA0B;AACpG,WAAK,YAAY,KAAK,UAAU,OAAO,GAAG;AAAA,IAC5C,WAAW,OAAO,SAAS,KAA8B,UAAU,SAAS,GAA6B;AACvG,WAAK,YAAY,KAAK,UAAU,OAAO,KAAK;AAAA,QAC1C,MAAM;AAAA,QACN,KAAK,UAAU;AAAA,MACjB,CAAC;AAAA,IACH,WAAW,OAAO,SAAS,KAA4B,UAAU,SAAS,GAA4B;AACpG,WAAK,YAAY,KAAK,UAAU,OAAO,KAAK;AAAA,QAC1C,MAAM;AAAA,QACN,KAAK,OAAO;AAAA,MACd,CAAC;AAAA,IACH,OAAO;AAQL,WAAK;AAAA,IACP;AAAA,EACF;AAAA,EACA,aAAa;AACX,UAAM,UAAU,CAAC;AACjB,SAAK,UAAU,iBAAiB,CAAC,KAAK,WAAW;AAC/C,cAAQ,KAAK,MAAM;AAAA,IACrB,CAAC;AACD,WAAO;AAAA,EACT;AACF;AACA,IAAM,eAAN,MAAM,cAAa;AAAA,EACjB,YAAYK,QAAO,MAAM,SAAS,YAAY,aAAa,WAAW,kBAAkB,yBAAyB,kBAAkB;AACjI,SAAK,QAAQA;AACb,SAAK,OAAO;AACZ,SAAK,UAAU;AACf,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,YAAY;AACjB,SAAK,mBAAmB;AACxB,SAAK,0BAA0B;AAC/B,SAAK,mBAAmB;AAAA,EAC1B;AAAA;AAAA,EAEA,OAAO,qBAAqBA,QAAO,WAAW,aAAa,WAAW,kBAAkB;AACtF,UAAM,UAAU,CAAC;AACjB,cAAU,QAAQ,CAAAL,SAAO;AACvB,cAAQ,KAAK;AAAA,QACX,MAAM;AAAA,QACN,KAAAA;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AACD,WAAO,IAAI;AAAA,MAAaK;AAAA,MAAO;AAAA,MAAW,YAAY,SAAS,SAAS;AAAA,MAAG;AAAA,MAAS;AAAA,MAAa;AAAA;AAAA,MAAkC;AAAA;AAAA,MAAoC;AAAA,MAAO;AAAA,IAAgB;AAAA,EAChM;AAAA,EACA,IAAI,mBAAmB;AACrB,WAAO,CAAC,KAAK,YAAY,QAAQ;AAAA,EACnC;AAAA,EACA,QAAQ,OAAO;AACb,QAAI,KAAK,cAAc,MAAM,aAAa,KAAK,qBAAqB,MAAM,oBAAoB,KAAK,qBAAqB,MAAM,oBAAoB,CAAC,KAAK,YAAY,QAAQ,MAAM,WAAW,KAAK,CAAC,YAAY,KAAK,OAAO,MAAM,KAAK,KAAK,CAAC,KAAK,KAAK,QAAQ,MAAM,IAAI,KAAK,CAAC,KAAK,QAAQ,QAAQ,MAAM,OAAO,GAAG;AACjT,aAAO;AAAA,IACT;AACA,UAAM,UAAU,KAAK;AACrB,UAAM,eAAe,MAAM;AAC3B,QAAI,QAAQ,WAAW,aAAa,QAAQ;AAC1C,aAAO;AAAA,IACT;AACA,aAAS,IAAI,GAAG,IAAI,QAAQ,QAAQ,KAAK;AACvC,UAAI,QAAQ,CAAC,EAAE,SAAS,aAAa,CAAC,EAAE,QAAQ,CAAC,QAAQ,CAAC,EAAE,IAAI,QAAQ,aAAa,CAAC,EAAE,GAAG,GAAG;AAC5F,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAsBA,IAAM,qBAAN,MAAyB;AAAA,EACvB,cAAc;AACZ,SAAK,WAAW;AAChB,SAAK,YAAY,CAAC;AAAA,EACpB;AAAA;AAAA,EAEA,qBAAqB;AACnB,WAAO,KAAK,UAAU,KAAK,cAAY,SAAS,qBAAqB,CAAC;AAAA,EACxE;AACF;AACA,SAAS,kBAAkB;AACzB,SAAO,IAAI,iBAAiB;AAC9B;AACA,IAAM,mBAAN,MAAuB;AAAA,EACrB,cAAc;AACZ,SAAK,UAAU,oBAAoB;AACnC,SAAK,cAAc;AACnB,SAAK,2BAA2B,oBAAI,IAAI;AAAA,EAC1C;AAAA,EACA,YAAY;AACV,oBAAgB,MAAM,IAAI,eAAe,KAAK,SAAS,yBAAyB,CAAC;AAAA,EACnF;AACF;AACA,SAAS,sBAAsB;AAC7B,SAAO,IAAI,UAAU,OAAK,cAAc,CAAC,GAAG,WAAW;AACzD;AACA,SAAe,mBAAmB,cAAc,UAAU;AAAA;AACxD,UAAM,mBAAmB,UAAU,YAAY;AAC/C,QAAI,iBAAiB;AACrB,UAAMA,SAAQ,SAAS;AACvB,QAAI,YAAY,iBAAiB,QAAQ,IAAIA,MAAK;AAClD,QAAI,CAAC,WAAW;AACd,kBAAY,IAAI,mBAAmB;AACnC,uBAAiB,SAAS,qBAAqB,IAAI,IAA6E;AAAA,IAClI,WAAW,CAAC,UAAU,mBAAmB,KAAK,SAAS,qBAAqB,GAAG;AAE7E,uBAAiB;AAAA,IACnB;AACA,QAAI;AACF,cAAQ,gBAAgB;AAAA,QACtB,KAAK;AACH,oBAAU,WAAW,MAAM,iBAAiB;AAAA,YAASA;AAAA;AAAA,YAAiC;AAAA,UAAI;AAC1F;AAAA,QACF,KAAK;AACH,oBAAU,WAAW,MAAM,iBAAiB;AAAA,YAASA;AAAA;AAAA,YAAiC;AAAA,UAAK;AAC3F;AAAA,QACF,KAAK;AACH,gBAAM,iBAAiB,yBAAyBA,MAAK;AACrD;AAAA,QACF;AACE;AAAA,MACJ;AAAA,IACF,SAAS,GAAG;AACV,YAAM,iBAAiB,6BAA6B,GAAG,4BAA4B,eAAe,SAAS,KAAK,CAAC,UAAU;AAC3H,eAAS,QAAQ,cAAc;AAC/B;AAAA,IACF;AACA,qBAAiB,QAAQ,IAAIA,QAAO,SAAS;AAC7C,cAAU,UAAU,KAAK,QAAQ;AAEjC,aAAS,uBAAuB,iBAAiB,WAAW;AAC5D,QAAI,UAAU,UAAU;AACtB,YAAM,cAAc,SAAS,eAAe,UAAU,QAAQ;AAC9D,UAAI,aAAa;AACf,kCAA0B,gBAAgB;AAAA,MAC5C;AAAA,IACF;AAAA,EACF;AAAA;AACA,SAAe,qBAAqB,cAAc,UAAU;AAAA;AAC1D,UAAM,mBAAmB,UAAU,YAAY;AAC/C,UAAMA,SAAQ,SAAS;AACvB,QAAI,iBAAiB;AACrB,UAAM,YAAY,iBAAiB,QAAQ,IAAIA,MAAK;AACpD,QAAI,WAAW;AACb,YAAM,IAAI,UAAU,UAAU,QAAQ,QAAQ;AAC9C,UAAI,KAAK,GAAG;AACV,kBAAU,UAAU,OAAO,GAAG,CAAC;AAC/B,YAAI,UAAU,UAAU,WAAW,GAAG;AACpC,2BAAiB,SAAS,qBAAqB,IAAI,IAAiF;AAAA,QACtI,WAAW,CAAC,UAAU,mBAAmB,KAAK,SAAS,qBAAqB,GAAG;AAE7E,2BAAiB;AAAA,QACnB;AAAA,MACF;AAAA,IACF;AACA,YAAQ,gBAAgB;AAAA,MACtB,KAAK;AACH,yBAAiB,QAAQ,OAAOA,MAAK;AACrC,eAAO,iBAAiB;AAAA,UAAWA;AAAA;AAAA,UAAkC;AAAA,QAAI;AAAA,MAC3E,KAAK;AACH,yBAAiB,QAAQ,OAAOA,MAAK;AACrC,eAAO,iBAAiB;AAAA,UAAWA;AAAA;AAAA,UAAkC;AAAA,QAAK;AAAA,MAC5E,KAAK;AACH,eAAO,iBAAiB,0BAA0BA,MAAK;AAAA,MACzD;AACE;AAAA,IACJ;AAAA,EACF;AAAA;AACA,SAAS,0BAA0B,cAAc,WAAW;AAC1D,QAAM,mBAAmB,UAAU,YAAY;AAC/C,MAAI,cAAc;AAClB,aAAW,YAAY,WAAW;AAChC,UAAMA,SAAQ,SAAS;AACvB,UAAM,YAAY,iBAAiB,QAAQ,IAAIA,MAAK;AACpD,QAAI,WAAW;AACb,iBAAW,YAAY,UAAU,WAAW;AAC1C,YAAI,SAAS,eAAe,QAAQ,GAAG;AACrC,wBAAc;AAAA,QAChB;AAAA,MACF;AACA,gBAAU,WAAW;AAAA,IACvB;AAAA,EACF;AACA,MAAI,aAAa;AACf,8BAA0B,gBAAgB;AAAA,EAC5C;AACF;AACA,SAAS,yBAAyB,cAAcA,QAAO,OAAO;AAC5D,QAAM,mBAAmB,UAAU,YAAY;AAC/C,QAAM,YAAY,iBAAiB,QAAQ,IAAIA,MAAK;AACpD,MAAI,WAAW;AACb,eAAW,YAAY,UAAU,WAAW;AAC1C,eAAS,QAAQ,KAAK;AAAA,IACxB;AAAA,EACF;AAGA,mBAAiB,QAAQ,OAAOA,MAAK;AACvC;AACA,SAAS,gCAAgC,cAAc,aAAa;AAClE,QAAM,mBAAmB,UAAU,YAAY;AAC/C,mBAAiB,cAAc;AAC/B,MAAI,cAAc;AAClB,mBAAiB,QAAQ,QAAQ,CAAC,GAAG,cAAc;AACjD,eAAW,YAAY,UAAU,WAAW;AAE1C,UAAI,SAAS,uBAAuB,WAAW,GAAG;AAChD,sBAAc;AAAA,MAChB;AAAA,IACF;AAAA,EACF,CAAC;AACD,MAAI,aAAa;AACf,8BAA0B,gBAAgB;AAAA,EAC5C;AACF;AACA,SAAS,2BAA2B,cAAc,UAAU;AAC1D,QAAM,mBAAmB,UAAU,YAAY;AAC/C,mBAAiB,yBAAyB,IAAI,QAAQ;AAGtD,WAAS,KAAK;AAChB;AACA,SAAS,8BAA8B,cAAc,UAAU;AAC7D,QAAM,mBAAmB,UAAU,YAAY;AAC/C,mBAAiB,yBAAyB,OAAO,QAAQ;AAC3D;AACA,SAAS,gBAAgB,cAAc,OAAO;AAC5C,QAAM,mBAAmB,UAAU,YAAY;AAC/C,QAAM,UAAU,iBAAiB;AAEjC,mBAAiB,UAAU,oBAAoB;AAC/C,UAAQ,QAAQ,CAAC,GAAG,cAAc;AAChC,eAAW,YAAY,UAAU,WAAW;AAC1C,eAAS,QAAQ,KAAK;AAAA,IACxB;AAAA,EACF,CAAC;AACH;AAEA,SAAS,0BAA0B,kBAAkB;AACnD,mBAAiB,yBAAyB,QAAQ,cAAY;AAC5D,aAAS,KAAK;AAAA,EAChB,CAAC;AACH;AACA,IAAI;AAAA,CACH,SAAU+B,qBAAoB;AAE7B,EAAAA,oBAAmB,SAAS,IAAI;AAEhC,EAAAA,oBAAmB,OAAO,IAAI;AAChC,GAAG,uBAAuB,qBAAqB,CAAC,EAAE;AAOlD,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY/B,QAAO,eAAe,SAAS;AACzC,SAAK,QAAQA;AACb,SAAK,gBAAgB;AAKrB,SAAK,qBAAqB;AAC1B,SAAK,OAAO;AACZ,SAAK,cAAc;AACnB,SAAK,UAAU,WAAW,CAAC;AAAA,EAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,MAAM;AACnB,QAAI,CAAC,KAAK,QAAQ,wBAAwB;AAExC,YAAM,aAAa,CAAC;AACpB,iBAAW,aAAa,KAAK,YAAY;AACvC,YAAI,UAAU,SAAS,GAA6B;AAClD,qBAAW,KAAK,SAAS;AAAA,QAC3B;AAAA,MACF;AACA,aAAO,IAAI;AAAA,QAAa,KAAK;AAAA,QAAO,KAAK;AAAA,QAAM,KAAK;AAAA,QAAS;AAAA,QAAY,KAAK;AAAA,QAAa,KAAK;AAAA,QAAW,KAAK;AAAA;AAAA,QAAgD;AAAA,QAAM,KAAK;AAAA,MAAgB;AAAA,IAC7L;AACA,QAAI,cAAc;AAClB,QAAI,CAAC,KAAK,oBAAoB;AAC5B,UAAI,KAAK,wBAAwB,MAAM,KAAK,WAAW,GAAG;AACxD,aAAK,kBAAkB,IAAI;AAC3B,sBAAc;AAAA,MAChB;AAAA,IACF,WAAW,KAAK,iBAAiB,IAAI,GAAG;AACtC,WAAK,cAAc,KAAK,IAAI;AAC5B,oBAAc;AAAA,IAChB;AACA,SAAK,OAAO;AACZ,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,OAAO;AACb,SAAK,cAAc,MAAM,KAAK;AAAA,EAChC;AAAA;AAAA,EAEA,uBAAuB,aAAa;AAClC,SAAK,cAAc;AACnB,QAAI,cAAc;AAClB,QAAI,KAAK,QAAQ,CAAC,KAAK,sBAAsB,KAAK,wBAAwB,KAAK,MAAM,WAAW,GAAG;AACjG,WAAK,kBAAkB,KAAK,IAAI;AAChC,oBAAc;AAAA,IAChB;AACA,WAAO;AAAA,EACT;AAAA,EACA,wBAAwB,MAAM,aAAa;AAEzC,QAAI,CAAC,KAAK,WAAW;AACnB,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,KAAK,qBAAqB,GAAG;AAChC,aAAO;AAAA,IACT;AAGA,UAAM,cAAc,gBAAgB;AAGpC,QAAI,KAAK,QAAQ,yBAAyB,aAAa;AACrD,aAAO;AAAA,IACT;AAGA,WAAO,CAAC,KAAK,KAAK,QAAQ,KAAK,KAAK,oBAAoB,gBAAgB;AAAA,EAC1E;AAAA,EACA,iBAAiB,MAAM;AAKrB,QAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,aAAO;AAAA,IACT;AACA,UAAM,0BAA0B,KAAK,QAAQ,KAAK,KAAK,qBAAqB,KAAK;AACjF,QAAI,KAAK,oBAAoB,yBAAyB;AACpD,aAAO,KAAK,QAAQ,2BAA2B;AAAA,IACjD;AAIA,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB,MAAM;AACtB,WAAO,aAAa,qBAAqB,KAAK,OAAO,KAAK,MAAM,KAAK,aAAa,KAAK,WAAW,KAAK,gBAAgB;AACvH,SAAK,qBAAqB;AAC1B,SAAK,cAAc,KAAK,IAAI;AAAA,EAC9B;AAAA,EACA,uBAAuB;AACrB,WAAO,KAAK,QAAQ,WAAW,mBAAmB;AAAA,EACpD;AACF;AAuBA,IAAM,mBAAN,MAAM,kBAAiB;AAAA,EACrB,YAAY,UAAU,WAAW,WAAW,aAAa;AACvD,SAAK,WAAW;AAChB,SAAK,YAAY;AACjB,SAAK,YAAY;AACjB,SAAK,cAAc;AAAA,EACrB;AAAA,EACA,OAAO,aAAa,UAAU,cAAc;AAC1C,QAAI,YAAY,eAAe;AAC/B,QAAI,cAAc,eAAe;AACjC,eAAW,aAAa,aAAa,YAAY;AAC/C,cAAQ,UAAU,MAAM;AAAA,QACtB,KAAK;AACH,sBAAY,UAAU,IAAI,UAAU,IAAI,GAAG;AAC3C;AAAA,QACF,KAAK;AACH,wBAAc,YAAY,IAAI,UAAU,IAAI,GAAG;AAC/C;AAAA,MAEJ;AAAA,IACF;AACA,WAAO,IAAI,kBAAiB,UAAU,aAAa,WAAW,WAAW,WAAW;AAAA,EACtF;AACF;AAqBA,IAAM,sBAAN,MAA0B;AAAA,EACxB,YAAY,YAAY;AACtB,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,cAAcb,OAAM;AAClB,WAAO,SAAS,KAAK,YAAYA,KAAI;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA,EAIA,kBAAkB,YAAY;AAC5B,QAAI,WAAW,SAAS,QAAQ;AAC9B,aAAO,aAAa,KAAK,YAAY,WAAW,UAAU,KAAK;AAAA,IACjE,OAAO;AACL,aAAO,gBAAgB,cAAc,KAAK,cAAc,WAAW,SAAS,IAAI,GAAG,KAAK,kBAAkB,WAAW,SAAS,QAAQ,CAAC;AAAA,IACzI;AAAA,EACF;AAAA,EACA,kBAAkB,MAAM;AACtB,WAAO,YAAY,IAAI;AAAA,EACzB;AACF;AAKA,IAAM,eAAN,MAAmB;AAAA,EACjB,YAAY,gBAAgB,YAAY,YAAY;AAClD,SAAK,iBAAiB;AACtB,SAAK,aAAa;AAClB,SAAK,aAAa;AAElB,SAAK,UAAU,CAAC;AAEhB,SAAK,YAAY,CAAC;AAElB,SAAK,mBAAmB,oBAAI,IAAI;AAChC,SAAK,WAAW,sBAAsB,cAAc;AAAA,EACtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,SAAS;AACvB,SAAK,SAAS,eAAe,QAAQ;AACrC,QAAI,kBAAkB,KAAK,SAAS;AACpC,QAAI,QAAQ,QAAQ,YAAY;AAC9B,WAAK,QAAQ,KAAK,QAAQ,QAAQ,UAAU;AAAA,IAC9C,WAAW,QAAQ,QAAQ,kBAAkB;AAC3C,WAAK,UAAU,KAAK;AAAA,QAClB,UAAU,QAAQ,QAAQ;AAAA,MAC5B,CAAC;AACD,UAAI,CAAC,QAAQ,QAAQ,iBAAiB,QAAQ;AAC5C,UAAE;AAAA,MACJ;AACA,YAAM,OAAO,aAAa,WAAW,QAAQ,QAAQ,iBAAiB,IAAI;AAC1E,WAAK,iBAAiB,IAAI,KAAK,IAAI,KAAK,SAAS,CAAC,CAAC;AAAA,IACrD,WAAW,QAAQ,QAAQ,UAAU;AACnC,WAAK,UAAU,KAAK,UAAU,SAAS,CAAC,EAAE,WAAW,QAAQ,QAAQ;AACrE,QAAE;AAAA,IACJ;AACA,QAAI,oBAAoB,KAAK,SAAS,iBAAiB;AACrD,WAAK,SAAS,kBAAkB;AAChC,aAAO,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ;AAAA,IACxC;AACA,WAAO;AAAA,EACT;AAAA,EACA,wBAAwB,WAAW;AACjC,UAAM,mBAAmB,oBAAI,IAAI;AACjC,UAAM,kBAAkB,IAAI,oBAAoB,KAAK,UAAU;AAC/D,eAAW,aAAa,WAAW;AACjC,UAAI,UAAU,SAAS,SAAS;AAC9B,cAAM,cAAc,gBAAgB,cAAc,UAAU,SAAS,IAAI;AACzE,mBAAW,aAAa,UAAU,SAAS,SAAS;AAClD,gBAAM,gBAAgB,iBAAiB,IAAI,SAAS,KAAK,eAAe,GAAG,IAAI,WAAW;AAC1F,2BAAiB,IAAI,WAAW,YAAY;AAAA,QAC9C;AAAA,MACF;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIM,WAAW;AAAA;AACf,YAAM,cAAc,MAAM,gCAAgC,KAAK,YAAY,IAAI,oBAAoB,KAAK,UAAU,GAAG,KAAK,WAAW,KAAK,eAAe,EAAE;AAC3J,YAAM,mBAAmB,KAAK,wBAAwB,KAAK,SAAS;AACpE,iBAAW,KAAK,KAAK,SAAS;AAC5B,cAAM,yBAAyB,KAAK,YAAY,GAAG,iBAAiB,IAAI,EAAE,IAAI,CAAC;AAAA,MACjF;AACA,WAAK,SAAS,YAAY;AAC1B,aAAO;AAAA,QACL,UAAU,KAAK;AAAA,QACf,yBAAyB,KAAK;AAAA,QAC9B;AAAA,MACF;AAAA,IACF;AAAA;AACF;AAKA,SAAS,sBAAsB,UAAU;AACvC,SAAO;AAAA,IACL,WAAW;AAAA,IACX,iBAAiB;AAAA,IACjB,aAAa;AAAA,IACb,gBAAgB,SAAS;AAAA,IACzB,YAAY,SAAS;AAAA,EACvB;AACF;AAKA,SAAS,sBAAsB,UAAU;AACvC,SAAO;AAAA,IACL,WAAW;AAAA,IACX,iBAAiB,SAAS;AAAA,IAC1B,aAAa,SAAS;AAAA,IACtB,gBAAgB,SAAS;AAAA,IACzB,YAAY,SAAS;AAAA,EACvB;AACF;AAkBA,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,KAAK;AACf,SAAK,MAAM;AAAA,EACb;AACF;AACA,IAAM,uBAAN,MAA2B;AAAA,EACzB,YAAY,KAAK;AACf,SAAK,MAAM;AAAA,EACb;AACF;AAMA,IAAM,OAAN,MAAW;AAAA,EACT,YAAYa,QACZ,kBAAkB;AAChB,SAAK,QAAQA;AACb,SAAK,mBAAmB;AACxB,SAAK,YAAY;AACjB,SAAK,mBAAmB;AAOxB,SAAK,UAAU;AAEf,SAAK,iBAAiB,eAAe;AAErC,SAAK,cAAc,eAAe;AAClC,SAAK,gBAAgB,mBAAmBA,MAAK;AAC7C,SAAK,cAAc,IAAI,YAAY,KAAK,aAAa;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,kBAAkB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,kBAAkB,YAAY,iBAAiB;AAC7C,UAAM,YAAY,kBAAkB,gBAAgB,YAAY,IAAI,kBAAkB;AACtF,UAAM,iBAAiB,kBAAkB,gBAAgB,cAAc,KAAK;AAC5E,QAAI,iBAAiB,kBAAkB,gBAAgB,cAAc,KAAK;AAC1E,QAAI,iBAAiB;AACrB,QAAI,cAAc;AAUlB,UAAM,iBAAiB,KAAK,MAAM,cAAc,OAA6B,eAAe,SAAS,KAAK,MAAM,QAAQ,eAAe,KAAK,IAAI;AAChJ,UAAM,kBAAkB,KAAK,MAAM,cAAc,OAA4B,eAAe,SAAS,KAAK,MAAM,QAAQ,eAAe,MAAM,IAAI;AACjJ,eAAW,iBAAiB,CAAC,KAAK,UAAU;AAC1C,YAAM,SAAS,eAAe,IAAI,GAAG;AACrC,YAAM,SAAS,aAAa,KAAK,OAAO,KAAK,IAAI,QAAQ;AACzD,YAAM,4BAA4B,SAAS,KAAK,YAAY,IAAI,OAAO,GAAG,IAAI;AAC9E,YAAM,4BAA4B,SAAS,OAAO;AAAA;AAAA,MAGlD,KAAK,YAAY,IAAI,OAAO,GAAG,KAAK,OAAO,wBAAwB;AACnE,UAAI,gBAAgB;AAEpB,UAAI,UAAU,QAAQ;AACpB,cAAM,YAAY,OAAO,KAAK,QAAQ,OAAO,IAAI;AACjD,YAAI,CAAC,WAAW;AACd,cAAI,CAAC,KAAK,4BAA4B,QAAQ,MAAM,GAAG;AACrD,sBAAU,MAAM;AAAA,cACd,MAAM;AAAA,cACN,KAAK;AAAA,YACP,CAAC;AACD,4BAAgB;AAChB,gBAAI,kBAAkB,KAAK,cAAc,QAAQ,cAAc,IAAI,KAAK,mBAAmB,KAAK,cAAc,QAAQ,eAAe,IAAI,GAAG;AAI1I,4BAAc;AAAA,YAChB;AAAA,UACF;AAAA,QACF,WAAW,8BAA8B,2BAA2B;AAClE,oBAAU,MAAM;AAAA,YACd,MAAM;AAAA,YACN,KAAK;AAAA,UACP,CAAC;AACD,0BAAgB;AAAA,QAClB;AAAA,MACF,WAAW,CAAC,UAAU,QAAQ;AAC5B,kBAAU,MAAM;AAAA,UACd,MAAM;AAAA,UACN,KAAK;AAAA,QACP,CAAC;AACD,wBAAgB;AAAA,MAClB,WAAW,UAAU,CAAC,QAAQ;AAC5B,kBAAU,MAAM;AAAA,UACd,MAAM;AAAA,UACN,KAAK;AAAA,QACP,CAAC;AACD,wBAAgB;AAChB,YAAI,kBAAkB,iBAAiB;AAIrC,wBAAc;AAAA,QAChB;AAAA,MACF;AACA,UAAI,eAAe;AACjB,YAAI,QAAQ;AACV,2BAAiB,eAAe,IAAI,MAAM;AAC1C,cAAI,2BAA2B;AAC7B,6BAAiB,eAAe,IAAI,GAAG;AAAA,UACzC,OAAO;AACL,6BAAiB,eAAe,OAAO,GAAG;AAAA,UAC5C;AAAA,QACF,OAAO;AACL,2BAAiB,eAAe,OAAO,GAAG;AAC1C,2BAAiB,eAAe,OAAO,GAAG;AAAA,QAC5C;AAAA,MACF;AAAA,IACF,CAAC;AAED,QAAI,KAAK,MAAM,UAAU,MAAM;AAC7B,aAAO,eAAe,OAAO,KAAK,MAAM,OAAO;AAC7C,cAAM,SAAS,KAAK,MAAM,cAAc,MAA4B,eAAe,KAAK,IAAI,eAAe,MAAM;AACjH,yBAAiB,eAAe,OAAO,OAAO,GAAG;AACjD,yBAAiB,eAAe,OAAO,OAAO,GAAG;AACjD,kBAAU,MAAM;AAAA,UACd,MAAM;AAAA,UACN,KAAK;AAAA,QACP,CAAC;AAAA,MACH;AAAA,IACF;AACA,WAAO;AAAA,MACL,aAAa;AAAA,MACb;AAAA,MACA;AAAA,MACA,aAAa;AAAA,IACf;AAAA,EACF;AAAA,EACA,4BAA4B,QAAQ,QAAQ;AAQ1C,WAAO,OAAO,qBAAqB,OAAO,yBAAyB,CAAC,OAAO;AAAA,EAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,aAAa,YAAY,wBAAwB,cAAc,sBAAsB;AACnF,UAAM,UAAU,KAAK;AACrB,SAAK,cAAc,WAAW;AAC9B,SAAK,cAAc,WAAW;AAE9B,UAAM,UAAU,WAAW,UAAU,WAAW;AAChD,YAAQ,KAAK,CAAC,IAAI,OAAO;AACvB,aAAO,kBAAkB,GAAG,MAAM,GAAG,IAAI,KAAK,KAAK,cAAc,GAAG,KAAK,GAAG,GAAG;AAAA,IACjF,CAAC;AACD,SAAK,kBAAkB,YAAY;AACnC,2BAAuB,yBAAyB,QAAQ,yBAAyB,SAAS,uBAAuB;AACjH,UAAM,eAAe,0BAA0B,CAAC,uBAAuB,KAAK,qBAAqB,IAAI,CAAC;AAGtG,UAAM,SAAS,KAAK,eAAe,SAAS,KAAK,KAAK,WAAW,CAAC;AAClE,UAAM,eAAe,SAAS,IAA2B;AACzD,UAAM,mBAAmB,iBAAiB,KAAK;AAC/C,SAAK,YAAY;AACjB,QAAI,QAAQ,WAAW,KAAK,CAAC,kBAAkB;AAE7C,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF,OAAO;AACL,YAAM,OAAO,IAAI;AAAA,QAAa,KAAK;AAAA,QAAO,WAAW;AAAA,QAAa;AAAA,QAAS;AAAA,QAAS,WAAW;AAAA,QAAa,iBAAiB;AAAA,QAAyB;AAAA;AAAA,QAAgD;AAAA,QAAO,eAAe,aAAa,YAAY,oBAAoB,IAAI,IAAI;AAAA,MAAK;AACtR,aAAO;AAAA,QACL,UAAU;AAAA,QACV;AAAA,MACF;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,aAAa;AAClC,QAAI,KAAK,WAAW,gBAAgB,WAAqC;AAKvE,WAAK,UAAU;AACf,aAAO,KAAK;AAAA,QAAa;AAAA,UACvB,aAAa,KAAK;AAAA,UAClB,WAAW,IAAI,kBAAkB;AAAA,UACjC,aAAa,KAAK;AAAA,UAClB,aAAa;AAAA,QACf;AAAA;AAAA,QAAgC;AAAA,MAAK;AAAA,IACvC,OAAO;AAEL,aAAO;AAAA,QACL,cAAc,CAAC;AAAA,MACjB;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,gBAAgB,KAAK;AAEnB,QAAI,KAAK,iBAAiB,IAAI,GAAG,GAAG;AAClC,aAAO;AAAA,IACT;AAEA,QAAI,CAAC,KAAK,YAAY,IAAI,GAAG,GAAG;AAC9B,aAAO;AAAA,IACT;AAKA,QAAI,KAAK,YAAY,IAAI,GAAG,EAAE,mBAAmB;AAC/C,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,kBAAkB,cAAc;AAC9B,QAAI,cAAc;AAChB,mBAAa,eAAe,QAAQ,SAAO,KAAK,mBAAmB,KAAK,iBAAiB,IAAI,GAAG,CAAC;AACjG,mBAAa,kBAAkB,QAAQ,SAAO;AAAA,MAAC,CAAC;AAChD,mBAAa,iBAAiB,QAAQ,SAAO,KAAK,mBAAmB,KAAK,iBAAiB,OAAO,GAAG,CAAC;AACtG,WAAK,UAAU,aAAa;AAAA,IAC9B;AAAA,EACF;AAAA,EACA,uBAAuB;AAErB,QAAI,CAAC,KAAK,SAAS;AACjB,aAAO,CAAC;AAAA,IACV;AAGA,UAAM,oBAAoB,KAAK;AAC/B,SAAK,iBAAiB,eAAe;AACrC,SAAK,YAAY,QAAQ,CAAAL,SAAO;AAC9B,UAAI,KAAK,gBAAgBA,KAAI,GAAG,GAAG;AACjC,aAAK,iBAAiB,KAAK,eAAe,IAAIA,KAAI,GAAG;AAAA,MACvD;AAAA,IACF,CAAC;AAED,UAAM,UAAU,CAAC;AACjB,sBAAkB,QAAQ,SAAO;AAC/B,UAAI,CAAC,KAAK,eAAe,IAAI,GAAG,GAAG;AACjC,gBAAQ,KAAK,IAAI,qBAAqB,GAAG,CAAC;AAAA,MAC5C;AAAA,IACF,CAAC;AACD,SAAK,eAAe,QAAQ,SAAO;AACjC,UAAI,CAAC,kBAAkB,IAAI,GAAG,GAAG;AAC/B,gBAAQ,KAAK,IAAI,mBAAmB,GAAG,CAAC;AAAA,MAC1C;AAAA,IACF,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBA,8BAA8B,aAAa;AACzC,SAAK,mBAAmB,YAAY;AACpC,SAAK,iBAAiB,eAAe;AACrC,UAAM,aAAa,KAAK,kBAAkB,YAAY,SAAS;AAC/D,WAAO,KAAK;AAAA,MAAa;AAAA;AAAA,MAAyC;AAAA,IAAI;AAAA,EACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,yBAAyB;AACvB,WAAO,aAAa,qBAAqB,KAAK,OAAO,KAAK,aAAa,KAAK,aAAa,KAAK,cAAc,GAAyB,KAAK,gBAAgB;AAAA,EAC5J;AACF;AACA,SAAS,kBAAkB,IAAI,IAAI;AACjC,QAAM,QAAQ,YAAU;AACtB,YAAQ,QAAQ;AAAA,MACd,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AAIH,eAAO;AAAA,MACT,KAAK;AACH,eAAO;AAAA,MACT;AACE,eAAO,KAAK;AAAA,IAChB;AAAA,EACF;AACA,SAAO,MAAM,EAAE,IAAI,MAAM,EAAE;AAC7B;AAkBA,IAAM,YAAY;AAKlB,IAAM,YAAN,MAAgB;AAAA,EACd,YAIAK,QAKA,UAOA,MAAM;AACJ,SAAK,QAAQA;AACb,SAAK,WAAW;AAChB,SAAK,OAAO;AAAA,EACd;AACF;AAEA,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,KAAK;AACf,SAAK,MAAM;AAOX,SAAK,mBAAmB;AAAA,EAC1B;AACF;AAcA,IAAM,iBAAN,MAAqB;AAAA,EACnB,YAAY,YAAY,aAAa,cAErC,mBAAmB,aAAa,+BAA+B;AAC7D,SAAK,aAAa;AAClB,SAAK,cAAc;AACnB,SAAK,eAAe;AACpB,SAAK,oBAAoB;AACzB,SAAK,cAAc;AACnB,SAAK,gCAAgC;AACrC,SAAK,qBAAqB,CAAC;AAC3B,SAAK,oBAAoB,IAAI,UAAU,OAAK,cAAc,CAAC,GAAG,WAAW;AACzE,SAAK,kBAAkB,oBAAI,IAAI;AAU/B,SAAK,2BAA2B,oBAAI,IAAI;AAKxC,SAAK,0BAA0B,IAAI,UAAU,YAAY,UAAU;AAKnE,SAAK,iCAAiC,oBAAI,IAAI;AAC9C,SAAK,oBAAoB,IAAI,aAAa;AAE1C,SAAK,wBAAwB,CAAC;AAE9B,SAAK,yBAAyB,oBAAI,IAAI;AACtC,SAAK,yBAAyB,kBAAkB,cAAc;AAC9D,SAAK,cAAc;AAInB,SAAK,mBAAmB;AAAA,EAC1B;AAAA,EACA,IAAI,kBAAkB;AACpB,WAAO,KAAK,qBAAqB;AAAA,EACnC;AACF;AACA,SAAS,cAAc,YAAY,aAAa,cAEhD,mBAAmB,aAAa,+BAA+B,WAAW;AACxE,QAAM,aAAa,IAAI,eAAe,YAAY,aAAa,cAAc,mBAAmB,aAAa,6BAA6B;AAC1I,MAAI,WAAW;AACb,eAAW,mBAAmB;AAAA,EAChC;AACA,SAAO;AACT;AAMA,SAAe,iBAAiB,YAAYA,QAAO,uBAAuB,MAAM;AAAA;AAC9E,UAAM,iBAAiB,qBAAqB,UAAU;AACtD,QAAI;AACJ,UAAM,YAAY,eAAe,kBAAkB,IAAIA,MAAK;AAC5D,QAAI,WAAW;AAOb,qBAAe,kBAAkB,oBAAoB,UAAU,QAAQ;AACvE,qBAAe,UAAU,KAAK,uBAAuB;AAAA,IACvD,OAAO;AACL,qBAAe,MAAM;AAAA,QAA6B;AAAA,QAAgBA;AAAA,QAAO;AAAA;AAAA,QAAkD;AAAA,MAAI;AAAA,IACjI;AACA,WAAO;AAAA,EACT;AAAA;AAEA,SAAe,yBAAyB,YAAYA,QAAO;AAAA;AACzD,UAAM,iBAAiB,qBAAqB,UAAU;AACtD,UAAM;AAAA,MAA6B;AAAA,MAAgBA;AAAA;AAAA,MAAmC;AAAA;AAAA,MAAkC;AAAA,IAAK;AAAA,EAC/H;AAAA;AACA,SAAe,6BAA6B,gBAAgBA,QAAO,sBAAsB,sBAAsB;AAAA;AAC7G,UAAM,aAAa,MAAM,yBAAyB,eAAe,YAAY,cAAcA,MAAK,CAAC;AACjG,UAAM,WAAW,WAAW;AAK5B,UAAM,SAAS,uBAAuB,eAAe,kBAAkB,oBAAoB,QAAQ,IAAI;AACvG,QAAI;AACJ,QAAI,sBAAsB;AACxB,qBAAe,MAAM,iCAAiC,gBAAgBA,QAAO,UAAU,WAAW,WAAW,WAAW,WAAW;AAAA,IACrI;AACA,QAAI,eAAe,mBAAmB,sBAAsB;AAC1D,wBAAkB,eAAe,aAAa,UAAU;AAAA,IAC1D;AACA,WAAO;AAAA,EACT;AAAA;AAKA,SAAe,iCAAiC,gBAAgBA,QAAO,UAAU,SAAS,aAAa;AAAA;AAIrG,mBAAe,kBAAkB,CAAC,WAAW,SAAS,gBAAgB,gBAAgB,gBAAgB,WAAW,SAAS,WAAW;AACrI,UAAM,cAAc,MAAM;AAAA,MAAuB,eAAe;AAAA,MAAYA;AAAA;AAAA,MAAgC;AAAA,IAAI;AAChH,UAAM,OAAO,IAAI,KAAKA,QAAO,YAAY,UAAU;AACnD,UAAM,iBAAiB,KAAK,kBAAkB,YAAY,SAAS;AACnE,UAAM,0BAA0B,aAAa,8CAA8C,UAAU,WAAW,eAAe,gBAAgB,WAAqC,WAAW;AAC/L,UAAM,aAAa,KAAK;AAAA,MAAa;AAAA;AAAA,MAA6C,eAAe;AAAA,MAAiB;AAAA,IAAuB;AACzI,wBAAoB,gBAAgB,UAAU,WAAW,YAAY;AACrE,UAAM,OAAO,IAAI,UAAUA,QAAO,UAAU,IAAI;AAChD,mBAAe,kBAAkB,IAAIA,QAAO,IAAI;AAChD,QAAI,eAAe,gBAAgB,IAAI,QAAQ,GAAG;AAChD,qBAAe,gBAAgB,IAAI,QAAQ,EAAE,KAAKA,MAAK;AAAA,IACzD,OAAO;AACL,qBAAe,gBAAgB,IAAI,UAAU,CAACA,MAAK,CAAC;AAAA,IACtD;AACA,WAAO,WAAW;AAAA,EACpB;AAAA;AAEA,SAAe,mBAAmB,YAAYA,QAAO,wBAAwB;AAAA;AAC3E,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,YAAY,eAAe,kBAAkB,IAAIA,MAAK;AAG5D,UAAM,UAAU,eAAe,gBAAgB,IAAI,UAAU,QAAQ;AACrE,QAAI,QAAQ,SAAS,GAAG;AACtB,qBAAe,gBAAgB,IAAI,UAAU,UAAU,QAAQ,OAAO,OAAK,CAAC,YAAY,GAAGA,MAAK,CAAC,CAAC;AAClG,qBAAe,kBAAkB,OAAOA,MAAK;AAC7C;AAAA,IACF;AAEA,QAAI,eAAe,iBAAiB;AAGlC,qBAAe,kBAAkB,uBAAuB,UAAU,QAAQ;AAC1E,YAAM,sBAAsB,eAAe,kBAAkB,oBAAoB,UAAU,QAAQ;AACnG,UAAI,CAAC,qBAAqB;AACxB,cAAM;AAAA,UAAwB,eAAe;AAAA,UAAY,UAAU;AAAA;AAAA,UAAsC;AAAA,QAAK,EAAE,KAAK,MAAM;AACzH,yBAAe,kBAAkB,gBAAgB,UAAU,QAAQ;AACnE,cAAI,wBAAwB;AAC1B,gCAAoB,eAAe,aAAa,UAAU,QAAQ;AAAA,UACpE;AACA,iCAAuB,gBAAgB,UAAU,QAAQ;AAAA,QAC3D,CAAC,EAAE,MAAM,wBAAwB;AAAA,MACnC;AAAA,IACF,OAAO;AACL,6BAAuB,gBAAgB,UAAU,QAAQ;AACzD,YAAM;AAAA,QAAwB,eAAe;AAAA,QAAY,UAAU;AAAA;AAAA,QAAsC;AAAA,MAAI;AAAA,IAC/G;AAAA,EACF;AAAA;AAEA,SAAe,2BAA2B,YAAYA,QAAO;AAAA;AAC3D,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,YAAY,eAAe,kBAAkB,IAAIA,MAAK;AAC5D,UAAM,UAAU,eAAe,gBAAgB,IAAI,UAAU,QAAQ;AACrE,QAAI,eAAe,mBAAmB,QAAQ,WAAW,GAAG;AAG1D,qBAAe,kBAAkB,uBAAuB,UAAU,QAAQ;AAC1E,0BAAoB,eAAe,aAAa,UAAU,QAAQ;AAAA,IACpE;AAAA,EACF;AAAA;AAWA,SAAe,gBAAgB,YAAY,OAAO,cAAc;AAAA;AAC9D,UAAM,iBAAiB,+BAA+B,UAAU;AAChE,QAAI;AACF,YAAM,SAAS,MAAM,uBAAuB,eAAe,YAAY,KAAK;AAC5E,qBAAe,kBAAkB,mBAAmB,OAAO,OAAO;AAClE,0BAAoB,gBAAgB,OAAO,SAAS,YAAY;AAChE,YAAM,0CAA0C,gBAAgB,OAAO,OAAO;AAC9E,YAAM,kBAAkB,eAAe,WAAW;AAAA,IACpD,SAAS,GAAG;AAGV,YAAM,QAAQ,6BAA6B,GAAG,yBAAyB;AACvE,mBAAa,OAAO,KAAK;AAAA,IAC3B;AAAA,EACF;AAAA;AAMA,SAAe,2BAA2B,YAAY,aAAa;AAAA;AACjE,UAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAI;AACF,YAAM,UAAU,MAAM,uCAAuC,eAAe,YAAY,WAAW;AAEnG,kBAAY,cAAc,QAAQ,CAAC,cAAc,aAAa;AAC5D,cAAM,kBAAkB,eAAe,+BAA+B,IAAI,QAAQ;AAClF,YAAI,iBAAiB;AAGnB,qBAAW,aAAa,eAAe,OAAO,aAAa,kBAAkB,OAAO,aAAa,iBAAiB,QAAQ,CAAC;AAC3H,cAAI,aAAa,eAAe,OAAO,GAAG;AACxC,4BAAgB,mBAAmB;AAAA,UACrC,WAAW,aAAa,kBAAkB,OAAO,GAAG;AAClD,uBAAW,gBAAgB,gBAAgB;AAAA,UAC7C,WAAW,aAAa,iBAAiB,OAAO,GAAG;AACjD,uBAAW,gBAAgB,gBAAgB;AAC3C,4BAAgB,mBAAmB;AAAA,UACrC,OAAO;AAAA,UAEP;AAAA,QACF;AAAA,MACF,CAAC;AACD,YAAM,0CAA0C,gBAAgB,SAAS,WAAW;AAAA,IACtF,SAAS,OAAO;AACd,YAAM,yBAAyB,KAAK;AAAA,IACtC;AAAA,EACF;AAAA;AAKA,SAAS,iCAAiC,YAAY,aAAa,QAAQ;AACzE,QAAM,iBAAiB,UAAU,UAAU;AAK3C,MAAI,eAAe,mBAAmB,WAAW,KAAyC,CAAC,eAAe,mBAAmB,WAAW,GAA6C;AACnL,UAAM,mBAAmB,CAAC;AAC1B,mBAAe,kBAAkB,QAAQ,CAACA,QAAO,cAAc;AAC7D,YAAM,aAAa,UAAU,KAAK,uBAAuB,WAAW;AACpE,UAAI,WAAW,UAAU;AACvB,yBAAiB,KAAK,WAAW,QAAQ;AAAA,MAC3C;AAAA,IACF,CAAC;AACD,oCAAgC,eAAe,cAAc,WAAW;AACxE,QAAI,iBAAiB,QAAQ;AAC3B,qBAAe,mBAAmB,cAAc,gBAAgB;AAAA,IAClE;AACA,mBAAe,cAAc;AAC7B,QAAI,eAAe,iBAAiB;AAClC,qBAAe,kBAAkB,eAAe,WAAW;AAAA,IAC7D;AAAA,EACF;AACF;AAYA,SAAe,uBAAuB,YAAY,UAAU,KAAK;AAAA;AAC/D,UAAM,iBAAiB,UAAU,UAAU;AAE3C,mBAAe,kBAAkB,iBAAiB,UAAU,YAAY,GAAG;AAC3E,UAAM,kBAAkB,eAAe,+BAA+B,IAAI,QAAQ;AAClF,UAAM,WAAW,mBAAmB,gBAAgB;AACpD,QAAI,UAAU;AAOZ,UAAI,kBAAkB,IAAI,UAAU,YAAY,UAAU;AAI1D,wBAAkB,gBAAgB,OAAO,UAAU,gBAAgB,cAAc,UAAU,gBAAgB,IAAI,CAAC,CAAC;AACjH,YAAM,yBAAyB,eAAe,EAAE,IAAI,QAAQ;AAC5D,YAAM,QAAQ,IAAI;AAAA,QAAY,gBAAgB,IAAI;AAAA;AAAA,QAAuB,oBAAI,IAAI;AAAA;AAAA,QAA0B,IAAI,UAAU,mBAAmB;AAAA,QAAG;AAAA,QAAiB;AAAA,MAAsB;AACtL,YAAM,2BAA2B,gBAAgB,KAAK;AAMtD,qBAAe,0BAA0B,eAAe,wBAAwB,OAAO,QAAQ;AAC/F,qBAAe,+BAA+B,OAAO,QAAQ;AAC7D,mCAA6B,cAAc;AAAA,IAC7C,OAAO;AACL,YAAM;AAAA,QAAwB,eAAe;AAAA,QAAY;AAAA;AAAA,QAAuC;AAAA,MAAK,EAAE,KAAK,MAAM,uBAAuB,gBAAgB,UAAU,GAAG,CAAC,EAAE,MAAM,wBAAwB;AAAA,IACzM;AAAA,EACF;AAAA;AACA,SAAe,+BAA+B,YAAY,qBAAqB;AAAA;AAC7E,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,UAAU,oBAAoB,MAAM;AAC1C,QAAI;AACF,YAAM,UAAU,MAAM,2BAA2B,eAAe,YAAY,mBAAmB;AAK/F;AAAA,QAAoB;AAAA,QAAgB;AAAA;AAAA,QAAmB;AAAA,MAAI;AAC3D,oCAA8B,gBAAgB,OAAO;AACrD,qBAAe,kBAAkB,oBAAoB,SAAS,cAAc;AAC5E,YAAM,0CAA0C,gBAAgB,OAAO;AAAA,IACzE,SAAS,OAAO;AACd,YAAM,yBAAyB,KAAK;AAAA,IACtC;AAAA,EACF;AAAA;AACA,SAAe,4BAA4B,YAAY,SAAS,OAAO;AAAA;AACrE,UAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAI;AACF,YAAM,UAAU,MAAM,sBAAsB,eAAe,YAAY,OAAO;AAK9E,0BAAoB,gBAAgB,SAAS,KAAK;AAClD,oCAA8B,gBAAgB,OAAO;AACrD,qBAAe,kBAAkB,oBAAoB,SAAS,YAAY,KAAK;AAC/E,YAAM,0CAA0C,gBAAgB,OAAO;AAAA,IACzE,SAASgC,QAAO;AACd,YAAM,yBAAyBA,MAAK;AAAA,IACtC;AAAA,EACF;AAAA;AAKA,SAAe,wCAAwC,YAAY,UAAU;AAAA;AAC3E,UAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAI,CAAC,cAAc,eAAe,WAAW,GAAG;AAC9C,eAAS,WAAW,sHAA2H;AAAA,IACjJ;AACA,QAAI;AACF,YAAM,iBAAiB,MAAM,0CAA0C,eAAe,UAAU;AAChG,UAAI,mBAAmB,iBAAiB;AAEtC,iBAAS,QAAQ;AACjB;AAAA,MACF;AACA,YAAM,YAAY,eAAe,uBAAuB,IAAI,cAAc,KAAK,CAAC;AAChF,gBAAU,KAAK,QAAQ;AACvB,qBAAe,uBAAuB,IAAI,gBAAgB,SAAS;AAAA,IACrE,SAAS,GAAG;AACV,YAAM,iBAAiB,6BAA6B,GAAG,2DAA2D;AAClH,eAAS,OAAO,cAAc;AAAA,IAChC;AAAA,EACF;AAAA;AAKA,SAAS,8BAA8B,gBAAgB,SAAS;AAC9D,GAAC,eAAe,uBAAuB,IAAI,OAAO,KAAK,CAAC,GAAG,QAAQ,cAAY;AAC7E,aAAS,QAAQ;AAAA,EACnB,CAAC;AACD,iBAAe,uBAAuB,OAAO,OAAO;AACtD;AAEA,SAAS,wCAAwC,gBAAgB,cAAc;AAC7E,iBAAe,uBAAuB,QAAQ,eAAa;AACzD,cAAU,QAAQ,cAAY;AAC5B,eAAS,OAAO,IAAI,eAAe,KAAK,WAAW,YAAY,CAAC;AAAA,IAClE,CAAC;AAAA,EACH,CAAC;AACD,iBAAe,uBAAuB,MAAM;AAC9C;AACA,SAAS,oBAAoB,gBAAgB,SAAS,UAAU;AAC9D,MAAI,eAAe,eAAe,sBAAsB,eAAe,YAAY,MAAM,CAAC;AAC1F,MAAI,CAAC,cAAc;AACjB,mBAAe,IAAI,UAAU,mBAAmB;AAAA,EAClD;AACA,iBAAe,aAAa,OAAO,SAAS,QAAQ;AACpD,iBAAe,sBAAsB,eAAe,YAAY,MAAM,CAAC,IAAI;AAC7E;AAKA,SAAS,oBAAoB,YAAY,SAAS,OAAO;AACvD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,MAAI,eAAe,eAAe,sBAAsB,eAAe,YAAY,MAAM,CAAC;AAG1F,MAAI,cAAc;AAChB,UAAM,WAAW,aAAa,IAAI,OAAO;AACzC,QAAI,UAAU;AACZ,UAAI,OAAO;AACT,iBAAS,OAAO,KAAK;AAAA,MACvB,OAAO;AACL,iBAAS,QAAQ;AAAA,MACnB;AACA,qBAAe,aAAa,OAAO,OAAO;AAAA,IAC5C;AACA,mBAAe,sBAAsB,eAAe,YAAY,MAAM,CAAC,IAAI;AAAA,EAC7E;AACF;AACA,SAAS,uBAAuB,gBAAgB,UAAU,QAAQ,MAAM;AACtE,iBAAe,kBAAkB,uBAAuB,QAAQ;AAChE,aAAWhC,UAAS,eAAe,gBAAgB,IAAI,QAAQ,GAAG;AAChE,mBAAe,kBAAkB,OAAOA,MAAK;AAC7C,QAAI,OAAO;AACT,qBAAe,mBAAmB,aAAaA,QAAO,KAAK;AAAA,IAC7D;AAAA,EACF;AACA,iBAAe,gBAAgB,OAAO,QAAQ;AAC9C,MAAI,eAAe,iBAAiB;AAClC,UAAM,YAAY,eAAe,kBAAkB,sBAAsB,QAAQ;AACjF,cAAU,QAAQ,cAAY;AAC5B,YAAM,eAAe,eAAe,kBAAkB,YAAY,QAAQ;AAC1E,UAAI,CAAC,cAAc;AAEjB,0BAAkB,gBAAgB,QAAQ;AAAA,MAC5C;AAAA,IACF,CAAC;AAAA,EACH;AACF;AACA,SAAS,kBAAkB,gBAAgB,KAAK;AAC9C,iBAAe,yBAAyB,OAAO,IAAI,KAAK,gBAAgB,CAAC;AAGzE,QAAM,gBAAgB,eAAe,wBAAwB,IAAI,GAAG;AACpE,MAAI,kBAAkB,MAAM;AAE1B;AAAA,EACF;AACA,sBAAoB,eAAe,aAAa,aAAa;AAC7D,iBAAe,0BAA0B,eAAe,wBAAwB,OAAO,GAAG;AAC1F,iBAAe,+BAA+B,OAAO,aAAa;AAClE,+BAA6B,cAAc;AAC7C;AACA,SAAS,oBAAoB,gBAAgB,UAAU,cAAc;AACnE,aAAW,eAAe,cAAc;AACtC,QAAI,uBAAuB,oBAAoB;AAC7C,qBAAe,kBAAkB,aAAa,YAAY,KAAK,QAAQ;AACvE,uBAAiB,gBAAgB,WAAW;AAAA,IAC9C,WAAW,uBAAuB,sBAAsB;AACtD,eAAS,WAAW,kCAAkC,YAAY,GAAG;AACrE,qBAAe,kBAAkB,gBAAgB,YAAY,KAAK,QAAQ;AAC1E,YAAM,eAAe,eAAe,kBAAkB,YAAY,YAAY,GAAG;AACjF,UAAI,CAAC,cAAc;AAEjB,0BAAkB,gBAAgB,YAAY,GAAG;AAAA,MACnD;AAAA,IACF,OAAO;AACL,WAAK;AAAA,IACP;AAAA,EACF;AACF;AACA,SAAS,iBAAiB,gBAAgB,aAAa;AACrD,QAAM,MAAM,YAAY;AACxB,QAAM,YAAY,IAAI,KAAK,gBAAgB;AAC3C,MAAI,CAAC,eAAe,wBAAwB,IAAI,GAAG,KAAK,CAAC,eAAe,yBAAyB,IAAI,SAAS,GAAG;AAC/G,aAAS,WAAW,4BAA4B,GAAG;AACnD,mBAAe,yBAAyB,IAAI,SAAS;AACrD,iCAA6B,cAAc;AAAA,EAC7C;AACF;AASA,SAAS,6BAA6B,gBAAgB;AACpD,SAAO,eAAe,yBAAyB,OAAO,KAAK,eAAe,wBAAwB,OAAO,eAAe,+BAA+B;AACrJ,UAAM,YAAY,eAAe,yBAAyB,OAAO,EAAE,KAAK,EAAE;AAC1E,mBAAe,yBAAyB,OAAO,SAAS;AACxD,UAAM,MAAM,IAAI,YAAY,aAAa,WAAW,SAAS,CAAC;AAC9D,UAAM,gBAAgB,eAAe,uBAAuB,KAAK;AACjE,mBAAe,+BAA+B,IAAI,eAAe,IAAI,gBAAgB,GAAG,CAAC;AACzF,mBAAe,0BAA0B,eAAe,wBAAwB,OAAO,KAAK,aAAa;AACzG,sBAAkB,eAAe,aAAa,IAAI,WAAW,cAAc,gBAAgB,IAAI,IAAI,CAAC,GAAG,eAAe,gCAAoE,eAAe,OAAO,CAAC;AAAA,EACnN;AACF;AACA,SAAe,0CAA0C,YAAY,SAAS,aAAa;AAAA;AACzF,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,WAAW,CAAC;AAClB,UAAM,uBAAuB,CAAC;AAC9B,UAAM,mBAAmB,CAAC;AAC1B,QAAI,eAAe,kBAAkB,QAAQ,GAAG;AAE9C;AAAA,IACF;AACA,mBAAe,kBAAkB,QAAQ,CAAC,GAAG,cAAc;AACzD,uBAAiB,KAAK,eAAe,gBAAgB,WAAW,SAAS,WAAW,EAAE,KAAK,kBAAgB;AACzG,YAAI;AAGJ,YAAI,gBAAgB,aAAa;AAC/B,cAAI,eAAe,iBAAiB;AAIlC,kBAAM,YAAY,eAAe,CAAC,aAAa,aAAa,KAAK,gBAAgB,QAAQ,gBAAgB,SAAS,SAAS,YAAY,cAAc,IAAI,UAAU,QAAQ,OAAO,QAAQ,OAAO,SAAS,SAAS,GAAG;AACtN,2BAAe,kBAAkB,iBAAiB,UAAU,UAAU,YAAY,YAAY,aAAa;AAAA,UAC7G;AAAA,QACF;AAEA,YAAI,CAAC,CAAC,cAAc;AAClB,mBAAS,KAAK,YAAY;AAC1B,gBAAM,aAAa,iBAAiB,aAAa,UAAU,UAAU,YAAY;AACjF,+BAAqB,KAAK,UAAU;AAAA,QACtC;AAAA,MACF,CAAC,CAAC;AAAA,IACJ,CAAC;AACD,UAAM,QAAQ,IAAI,gBAAgB;AAClC,mBAAe,mBAAmB,cAAc,QAAQ;AACxD,UAAM,iCAAiC,eAAe,YAAY,oBAAoB;AAAA,EACxF;AAAA;AACA,SAAe,gBAAgB,gBAAgB,WAAW,SAAS,aAAa;AAAA;AAC9E,QAAI,iBAAiB,UAAU,KAAK,kBAAkB,OAAO;AAC7D,QAAI,eAAe,aAAa;AAI9B,uBAAiB,MAAM;AAAA,QAAuB,eAAe;AAAA,QAAY,UAAU;AAAA;AAAA,QAAgC;AAAA,MAAK,EAAE,KAAK,CAAC;AAAA,QAC9H;AAAA,MACF,MAAM;AACJ,eAAO,UAAU,KAAK,kBAAkB,WAAW,cAAc;AAAA,MACnE,CAAC;AAAA,IACH;AACA,UAAM,eAAe,eAAe,YAAY,cAAc,IAAI,UAAU,QAAQ;AACpF,UAAM,uBAAuB,eAAe,YAAY,iBAAiB,IAAI,UAAU,QAAQ,KAAK;AACpG,UAAM,aAAa,UAAU,KAAK;AAAA,MAAa;AAAA;AAAA,MAA6C,eAAe;AAAA,MAAiB;AAAA,MAAc;AAAA,IAAoB;AAC9J,wBAAoB,gBAAgB,UAAU,UAAU,WAAW,YAAY;AAC/E,WAAO,WAAW;AAAA,EACpB;AAAA;AACA,SAAe,iCAAiC,YAAY,MAAM;AAAA;AAChE,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,cAAc,CAAC,eAAe,YAAY,QAAQ,IAAI;AAC5D,QAAI,aAAa;AACf,eAAS,WAAW,0BAA0B,KAAK,MAAM,CAAC;AAC1D,YAAM,SAAS,MAAM,2BAA2B,eAAe,YAAY,IAAI;AAC/E,qBAAe,cAAc;AAE7B,8CAAwC,gBAAgB,kEAAkE;AAE1H,qBAAe,kBAAkB,iBAAiB,MAAM,OAAO,iBAAiB,OAAO,aAAa;AACpG,YAAM,0CAA0C,gBAAgB,OAAO,iBAAiB;AAAA,IAC1F;AAAA,EACF;AAAA;AACA,SAAS,iCAAiC,YAAY,UAAU;AAC9D,QAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAM,kBAAkB,eAAe,+BAA+B,IAAI,QAAQ;AAClF,MAAI,mBAAmB,gBAAgB,kBAAkB;AACvD,WAAO,eAAe,EAAE,IAAI,gBAAgB,GAAG;AAAA,EACjD,OAAO;AACL,QAAI,SAAS,eAAe;AAC5B,UAAM,UAAU,eAAe,gBAAgB,IAAI,QAAQ;AAC3D,QAAI,CAAC,SAAS;AACZ,aAAO;AAAA,IACT;AACA,eAAWA,UAAS,SAAS;AAC3B,YAAM,YAAY,eAAe,kBAAkB,IAAIA,MAAK;AAC5D,eAAS,OAAO,UAAU,UAAU,KAAK,eAAe;AAAA,IAC1D;AACA,WAAO;AAAA,EACT;AACF;AAKA,SAAe,kCAAkC,YAAY,WAAW;AAAA;AACtE,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,cAAc,MAAM;AAAA,MAAuB,eAAe;AAAA,MAAY,UAAU;AAAA;AAAA,MAAgC;AAAA,IAAI;AAC1H,UAAM,eAAe,UAAU,KAAK,8BAA8B,WAAW;AAC7E,QAAI,eAAe,iBAAiB;AAClC,0BAAoB,gBAAgB,UAAU,UAAU,aAAa,YAAY;AAAA,IACnF;AACA,WAAO;AAAA,EACT;AAAA;AAMA,SAAe,0CAA0C,YAAYZ,kBAAiB;AAAA;AACpF,UAAM,iBAAiB,UAAU,UAAU;AAC3C,WAAO,gCAAgC,eAAe,YAAYA,gBAAe,EAAE,KAAK,aAAW,0CAA0C,gBAAgB,OAAO,CAAC;AAAA,EACvK;AAAA;AAGA,SAAe,0BAA0B,YAAY,SAAS,YAAY,OAAO;AAAA;AAC/E,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,YAAY,MAAM,kCAAkC,eAAe,YAAY,OAAO;AAC5F,QAAI,cAAc,MAAM;AAQtB,eAAS,WAAW,0CAA0C,OAAO;AACrE;AAAA,IACF;AACA,QAAI,eAAe,WAAW;AAI5B,YAAM,kBAAkB,eAAe,WAAW;AAAA,IACpD,WAAW,eAAe,kBAAkB,eAAe,YAAY;AAGrE,0BAAoB,gBAAgB,SAAS,QAAQ,QAAQ,IAAI;AACjE,oCAA8B,gBAAgB,OAAO;AACrD,kDAA4C,eAAe,YAAY,OAAO;AAAA,IAChF,OAAO;AACL,WAAK;AAAA,IACP;AACA,UAAM,0CAA0C,gBAAgB,SAAS;AAAA,EAC3E;AAAA;AAGA,SAAe,4BAA4B,YAAY,WAAW;AAAA;AAChE,UAAM,iBAAiB,UAAU,UAAU;AAC3C,yBAAqB,cAAc;AACnC,mCAA+B,cAAc;AAC7C,QAAI,cAAc,QAAQ,eAAe,qBAAqB,MAAM;AAOlE,YAAM,gBAAgB,eAAe,kBAAkB,yBAAyB;AAChF,YAAM,gBAAgB,MAAM,uCAAuC,gBAAgB,cAAc,QAAQ,CAAC;AAC1G,qBAAe,mBAAmB;AAClC,YAAM,6BAA6B,eAAe,aAAa,IAAI;AACnE,iBAAW,cAAc,eAAe;AACtC,0BAAkB,eAAe,aAAa,UAAU;AAAA,MAC1D;AAAA,IACF,WAAW,cAAc,SAAS,eAAe,qBAAqB,OAAO;AAC3E,YAAM,gBAAgB,CAAC;AACvB,UAAI,IAAI,QAAQ,QAAQ;AACxB,qBAAe,gBAAgB,QAAQ,CAAC,GAAG,aAAa;AACtD,YAAI,eAAe,kBAAkB,mBAAmB,QAAQ,GAAG;AACjE,wBAAc,KAAK,QAAQ;AAAA,QAC7B,OAAO;AACL,cAAI,EAAE,KAAK,MAAM;AACf,mCAAuB,gBAAgB,QAAQ;AAC/C,mBAAO;AAAA,cAAwB,eAAe;AAAA,cAAY;AAAA;AAAA,cAAsC;AAAA,YAAI;AAAA,UACtG,CAAC;AAAA,QACH;AACA,4BAAoB,eAAe,aAAa,QAAQ;AAAA,MAC1D,CAAC;AACD,YAAM;AACN,YAAM,uCAAuC,gBAAgB,aAAa;AAC1E,0BAAoB,cAAc;AAClC,qBAAe,mBAAmB;AAClC,YAAM,6BAA6B,eAAe,aAAa,KAAK;AAAA,IACtE;AAAA,EACF;AAAA;AAEA,SAAS,oBAAoB,YAAY;AACvC,QAAM,iBAAiB,UAAU,UAAU;AAC3C,iBAAe,+BAA+B,QAAQ,CAAC,GAAG,aAAa;AACrE,wBAAoB,eAAe,aAAa,QAAQ;AAAA,EAC1D,CAAC;AACD,iBAAe,kBAAkB,oBAAoB;AACrD,iBAAe,iCAAiC,oBAAI,IAAI;AACxD,iBAAe,0BAA0B,IAAI,UAAU,YAAY,UAAU;AAC/E;AAYA,SAAe,uCAAuC,YAAY,SAAS,qBAAqB;AAAA;AAC9F,UAAM,iBAAiB,UAAU,UAAU;AAC3C,UAAM,gBAAgB,CAAC;AACvB,UAAM,mBAAmB,CAAC;AAC1B,eAAW,YAAY,SAAS;AAC9B,UAAI;AACJ,YAAM,UAAU,eAAe,gBAAgB,IAAI,QAAQ;AAC3D,UAAI,WAAW,QAAQ,WAAW,GAAG;AAKnC,qBAAa,MAAM,yBAAyB,eAAe,YAAY,cAAc,QAAQ,CAAC,CAAC,CAAC;AAChG,mBAAWY,UAAS,SAAS;AAC3B,gBAAM,YAAY,eAAe,kBAAkB,IAAIA,MAAK;AAC5D,gBAAM,aAAa,MAAM,kCAAkC,gBAAgB,SAAS;AACpF,cAAI,WAAW,UAAU;AACvB,6BAAiB,KAAK,WAAW,QAAQ;AAAA,UAC3C;AAAA,QACF;AAAA,MACF,OAAO;AAGL,cAAM,SAAS,MAAM,0BAA0B,eAAe,YAAY,QAAQ;AAClF,qBAAa,MAAM,yBAAyB,eAAe,YAAY,MAAM;AAC7E,cAAM;AAAA,UAAiC;AAAA,UAAgB,wBAAwB,MAAM;AAAA,UAAG;AAAA;AAAA,UAAsB;AAAA,UAAO,WAAW;AAAA,QAAW;AAAA,MAC7I;AACA,oBAAc,KAAK,UAAU;AAAA,IAC/B;AACA,mBAAe,mBAAmB,cAAc,gBAAgB;AAChE,WAAO;AAAA,EACT;AAAA;AAYA,SAAS,wBAAwB,QAAQ;AACvC,SAAO,SAAS,OAAO,MAAM,OAAO,iBAAiB,OAAO,SAAS,OAAO,SAAS,OAAO,OAAO,KAA2B,OAAO,SAAS,OAAO,KAAK;AAC5J;AAGA,SAAS,2BAA2B,YAAY;AAC9C,QAAM,iBAAiB,UAAU,UAAU;AAC3C,SAAO,2BAA2B,eAAe,UAAU;AAC7D;AAGA,SAAe,2BAA2B,YAAY,UAAU,OAAO,OAAO;AAAA;AAC5E,UAAM,iBAAiB,UAAU,UAAU;AAC3C,QAAI,eAAe,kBAAkB;AAGnC,eAAS,WAAW,+CAA+C;AACnE;AAAA,IACF;AACA,UAAMA,SAAQ,eAAe,gBAAgB,IAAI,QAAQ;AACzD,QAAIA,UAASA,OAAM,SAAS,GAAG;AAC7B,cAAQ,OAAO;AAAA,QACb,KAAK;AAAA,QACL,KAAK,eACH;AACE,gBAAM,UAAU,MAAM,gCAAgC,eAAe,YAAY,qBAAqBA,OAAM,CAAC,CAAC,CAAC;AAC/G,gBAAM,yBAAyB,YAAY,6CAA6C,UAAU,UAAU,WAAW,WAAW,iBAAiB;AACnJ,gBAAM,0CAA0C,gBAAgB,SAAS,sBAAsB;AAC/F;AAAA,QACF;AAAA,QACF,KAAK,YACH;AACE,gBAAM;AAAA,YAAwB,eAAe;AAAA,YAAY;AAAA;AAAA,YAAuC;AAAA,UAAI;AACpG,iCAAuB,gBAAgB,UAAU,KAAK;AACtD;AAAA,QACF;AAAA,QACF;AACE,eAAK;AAAA,MACT;AAAA,IACF;AAAA,EACF;AAAA;AAEA,SAAe,mCAAmC,YAAY,OAAO,SAAS;AAAA;AAC5E,UAAM,iBAAiB,qBAAqB,UAAU;AACtD,QAAI,CAAC,eAAe,kBAAkB;AACpC;AAAA,IACF;AACA,eAAW,YAAY,OAAO;AAG5B,YAAM,sCAAsC,eAAe,gBAAgB,IAAI,QAAQ,KAAK,eAAe,kBAAkB,oBAAoB,QAAQ;AACzJ,UAAI,qCAAqC;AACvC,iBAAS,WAAW,qCAAqC,QAAQ;AACjE;AAAA,MACF;AACA,YAAM,SAAS,MAAM,0BAA0B,eAAe,YAAY,QAAQ;AAClF,YAAM,aAAa,MAAM,yBAAyB,eAAe,YAAY,MAAM;AACnF,YAAM;AAAA,QAAiC;AAAA,QAAgB,wBAAwB,MAAM;AAAA,QAAG,WAAW;AAAA;AAAA,QAAsB;AAAA,QAAO,WAAW;AAAA,MAAW;AACtJ,wBAAkB,eAAe,aAAa,UAAU;AAAA,IAC1D;AACA,eAAW,YAAY,SAAS;AAG9B,UAAI,CAAC,eAAe,gBAAgB,IAAI,QAAQ,GAAG;AACjD;AAAA,MACF;AAEA,YAAM;AAAA,QAAwB,eAAe;AAAA,QAAY;AAAA;AAAA,QAAuC;AAAA,MAAK,EAAE,KAAK,MAAM;AAChH,4BAAoB,eAAe,aAAa,QAAQ;AACxD,+BAAuB,gBAAgB,QAAQ;AAAA,MACjD,CAAC,EAAE,MAAM,wBAAwB;AAAA,IACnC;AAAA,EACF;AAAA;AACA,SAAS,qBAAqB,YAAY;AACxC,QAAM,iBAAiB,UAAU,UAAU;AAC3C,iBAAe,YAAY,aAAa,mBAAmB,2BAA2B,KAAK,MAAM,cAAc;AAC/G,iBAAe,YAAY,aAAa,yBAAyB,iCAAiC,KAAK,MAAM,cAAc;AAC3H,iBAAe,YAAY,aAAa,eAAe,uBAAuB,KAAK,MAAM,cAAc;AACvG,iBAAe,mBAAmB,gBAAgB,0BAA0B,KAAK,MAAM,eAAe,YAAY;AAClH,iBAAe,mBAAmB,eAAe,yBAAyB,KAAK,MAAM,eAAe,YAAY;AAChH,SAAO;AACT;AACA,SAAS,+BAA+B,YAAY;AAClD,QAAM,iBAAiB,UAAU,UAAU;AAC3C,iBAAe,YAAY,aAAa,uBAAuB,+BAA+B,KAAK,MAAM,cAAc;AACvH,iBAAe,YAAY,aAAa,oBAAoB,4BAA4B,KAAK,MAAM,cAAc;AACjH,SAAO;AACT;AASA,SAAS,qBAAqB,YAAY,cAAc,MAAM;AAC5D,QAAM,iBAAiB,UAAU,UAAU;AAE3C,iBAAe,gBAAgB,cAAc,IAAI,EAAE,KAAK,sBAAoB;AAC1E,mBAAe,kBAAkB,mBAAmB,gBAAgB;AAAA,EACtE,CAAC;AACH;AAEA,SAAe,eAAe,YAAY,QAAQ,MAAM;AAAA;AACtD,QAAI;AACF,YAAM,WAAW,MAAM,OAAO,YAAY;AAC1C,YAAM,OAAO,MAAM,yBAAyB,WAAW,YAAY,QAAQ;AAC3E,UAAI,MAAM;AACR,cAAM,OAAO,MAAM;AACnB,aAAK,cAAc,sBAAsB,QAAQ,CAAC;AAClD,eAAO,QAAQ,QAAQ,oBAAI,IAAI,CAAC;AAAA,MAClC;AACA,WAAK,gBAAgB,sBAAsB,QAAQ,CAAC;AACpD,YAAM,SAAS,IAAI,aAAa,UAAU,WAAW,YAAY,OAAO,UAAU;AAClF,UAAI,UAAU,MAAM,OAAO,YAAY;AACvC,aAAO,SAAS;AACd;AACA,cAAM,WAAW,MAAM,OAAO,gBAAgB,OAAO;AACrD,YAAI,UAAU;AACZ,eAAK,gBAAgB,QAAQ;AAAA,QAC/B;AACA,kBAAU,MAAM,OAAO,YAAY;AAAA,MACrC;AACA,YAAM,SAAS,MAAM,OAAO,SAAS;AACrC,YAAM;AAAA,QAA0C;AAAA,QAAY,OAAO;AAAA;AAAA,QAA8B;AAAA,MAAS;AAE1G,YAAM,qBAAqB,WAAW,YAAY,QAAQ;AAC1D,WAAK,cAAc,OAAO,QAAQ;AAClC,aAAO,QAAQ,QAAQ,OAAO,uBAAuB;AAAA,IACvD,SAAS,GAAG;AACV,cAAQ,WAAW,8BAA8B,CAAC,EAAE;AACpD,WAAK,UAAU,CAAC;AAChB,aAAO,QAAQ,QAAQ,oBAAI,IAAI,CAAC;AAAA,IAClC;AAAA,EACF;AAAA;AAsBA,IAAM,iCAAN,MAAqC;AAAA,EACnC,cAAc;AACZ,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACM,WAAW,KAAK;AAAA;AACpB,WAAK,aAAa,cAAc,IAAI,aAAa,UAAU;AAC3D,WAAK,oBAAoB,KAAK,wBAAwB,GAAG;AACzD,WAAK,cAAc,KAAK,kBAAkB,GAAG;AAC7C,YAAM,KAAK,YAAY,MAAM;AAC7B,WAAK,aAAa,KAAK,iBAAiB,GAAG;AAC3C,WAAK,cAAc,KAAK,iCAAiC,KAAK,KAAK,UAAU;AAC7E,WAAK,2BAA2B,KAAK,+BAA+B,KAAK,KAAK,UAAU;AAAA,IAC1F;AAAA;AAAA,EACA,iCAAiC,KAAK,YAAY;AAChD,WAAO;AAAA,EACT;AAAA,EACA,+BAA+B,KAAK,YAAY;AAC9C,WAAO;AAAA,EACT;AAAA,EACA,iBAAiB,KAAK;AACpB,WAAO,cAAc,KAAK,aAAa,IAAI,YAAY,GAAG,IAAI,aAAa,KAAK,UAAU;AAAA,EAC5F;AAAA,EACA,kBAAkB,KAAK;AACrB,WAAO,IAAI,kBAAkB,oBAAoB,SAAS,KAAK,UAAU;AAAA,EAC3E;AAAA,EACA,wBAAwB,KAAK;AAC3B,WAAO,IAAI,wBAAwB;AAAA,EACrC;AAAA,EACM,YAAY;AAAA;AAChB,UAAI,IAAI;AACR,OAAC,KAAK,KAAK,iBAAiB,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK;AACrE,OAAC,KAAK,KAAK,8BAA8B,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK;AAClF,WAAK,kBAAkB,SAAS;AAChC,YAAM,KAAK,YAAY,SAAS;AAAA,IAClC;AAAA;AACF;AACA,IAAM,sCAAN,cAAkD,+BAA+B;AAAA,EAC/E,YAAY,gBAAgB;AAC1B,UAAM;AACN,SAAK,iBAAiB;AAAA,EACxB;AAAA,EACA,iCAAiC,KAAK,YAAY;AAChD,eAAW,KAAK,YAAY,6BAA6B,iBAAiB;AAC1E,UAAM,mBAAmB,KAAK,YAAY,kBAAkB;AAC5D,WAAO,IAAI,aAAa,kBAAkB,IAAI,YAAY,UAAU;AAAA,EACtE;AAAA,EACA,kBAAkB,KAAK;AACrB,UAAM,YAAY,KAAK,mBAAmB,SAAY,UAAU,cAAc,KAAK,cAAc,IAAI,UAAU;AAC/G,WAAO,IAAI,kBAAkB,OAAK,kBAAkB,QAAQ,GAAG,SAAS,GAAG,KAAK,UAAU;AAAA,EAC5F;AACF;AAIA,IAAM,oCAAN,MAAM,2CAA0C,+BAA+B;AAAA,EAC7E,YAAY,yBAAyB,gBAAgB,gBAAgB;AACnE,UAAM;AACN,SAAK,0BAA0B;AAC/B,SAAK,iBAAiB;AACtB,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACM,WAAW,KAAK;AAAA;AACpB,YAAM,+DAAM,mBAAN,MAAiB,GAAG;AAC1B,YAAM,KAAK,wBAAwB,WAAW,MAAM,GAAG;AAEvD,YAAM,+BAA+B,KAAK,wBAAwB,UAAU;AAC5E,YAAM,kBAAkB,KAAK,wBAAwB,WAAW;AAGhE,YAAM,KAAK,YAAY,wBAAwB,MAAM;AACnD,YAAI,KAAK,eAAe,CAAC,KAAK,YAAY,SAAS;AACjD,eAAK,YAAY,MAAM;AAAA,QACzB;AACA,YAAI,KAAK,4BAA4B,CAAC,KAAK,yBAAyB,SAAS;AAC3E,eAAK,yBAAyB,MAAM;AAAA,QACtC;AACA,eAAO,QAAQ,QAAQ;AAAA,MACzB,CAAC;AAAA,IACH;AAAA;AAAA,EACA,iBAAiB,KAAK;AACpB,WAAO,cAAc,KAAK,aAAa,IAAI,YAAY,GAAG,IAAI,aAAa,KAAK,UAAU;AAAA,EAC5F;AAAA,EACA,iCAAiC,KAAK,YAAY;AAChD,UAAM,mBAAmB,KAAK,YAAY,kBAAkB;AAC5D,WAAO,IAAI,aAAa,kBAAkB,IAAI,YAAY,UAAU;AAAA,EACtE;AAAA,EACA,+BAA+B,KAAK,YAAY;AAC9C,UAAM,kBAAkB,IAAI,gBAAgB,YAAY,KAAK,WAAW;AACxE,WAAO,IAAI,yBAAyB,IAAI,YAAY,eAAe;AAAA,EACrE;AAAA,EACA,kBAAkB,KAAK;AACrB,UAAM,iBAAiB,uBAAuB,IAAI,aAAa,YAAY,IAAI,aAAa,cAAc;AAC1G,UAAM,YAAY,KAAK,mBAAmB,SAAY,UAAU,cAAc,KAAK,cAAc,IAAI,UAAU;AAC/G,WAAO,IAAI,qBAAqB,KAAK,iBAAiB,gBAAgB,IAAI,UAAU,WAAW,IAAI,YAAY,UAAU,GAAG,YAAY,GAAG,KAAK,YAAY,KAAK,mBAAmB,CAAC,CAAC,KAAK,cAAc;AAAA,EAC3M;AAAA,EACA,wBAAwB,KAAK;AAC3B,WAAO,IAAI,wBAAwB;AAAA,EACrC;AACF;AASA,IAAM,mCAAN,MAAM,0CAAyC,kCAAkC;AAAA,EAC/E,YAAY,yBAAyB,gBAAgB;AACnD;AAAA,MAAM;AAAA,MAAyB;AAAA;AAAA,MAAqC;AAAA,IAAK;AACzE,SAAK,0BAA0B;AAC/B,SAAK,iBAAiB;AACtB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACM,WAAW,KAAK;AAAA;AACpB,YAAM,8DAAM,mBAAN,MAAiB,GAAG;AAC1B,YAAM,aAAa,KAAK,wBAAwB;AAChD,UAAI,KAAK,6BAA6B,6BAA6B;AACjE,aAAK,kBAAkB,aAAa;AAAA,UAClC,iBAAiB,0BAA0B,KAAK,MAAM,UAAU;AAAA,UAChE,kBAAkB,2BAA2B,KAAK,MAAM,UAAU;AAAA,UAClE,0BAA0B,mCAAmC,KAAK,MAAM,UAAU;AAAA,UAClF,kBAAkB,2BAA2B,KAAK,MAAM,UAAU;AAAA,UAClE,iCAAiC,0CAA0C,KAAK,MAAM,UAAU;AAAA,QAClG;AACA,cAAM,KAAK,kBAAkB,MAAM;AAAA,MACrC;AAGA,YAAM,KAAK,YAAY,wBAAwB,CAAM,cAAa;AAChE,cAAM,4BAA4B,KAAK,wBAAwB,YAAY,SAAS;AACpF,YAAI,KAAK,aAAa;AACpB,cAAI,aAAa,CAAC,KAAK,YAAY,SAAS;AAC1C,iBAAK,YAAY,MAAM;AAAA,UACzB,WAAW,CAAC,WAAW;AACrB,iBAAK,YAAY,KAAK;AAAA,UACxB;AAAA,QACF;AACA,YAAI,KAAK,0BAA0B;AACjC,cAAI,aAAa,CAAC,KAAK,yBAAyB,SAAS;AACvD,iBAAK,yBAAyB,MAAM;AAAA,UACtC,WAAW,CAAC,WAAW;AACrB,iBAAK,yBAAyB,KAAK;AAAA,UACrC;AAAA,QACF;AAAA,MACF,EAAC;AAAA,IACH;AAAA;AAAA,EACA,wBAAwB,KAAK;AAC3B,UAAM6B,UAAS,UAAU;AACzB,QAAI,CAAC,4BAA4B,YAAYA,OAAM,GAAG;AACpD,YAAM,IAAI,eAAe,KAAK,eAAe,iFAAiF;AAAA,IAChI;AACA,UAAM,iBAAiB,uBAAuB,IAAI,aAAa,YAAY,IAAI,aAAa,cAAc;AAC1G,WAAO,IAAI,4BAA4BA,SAAQ,IAAI,YAAY,gBAAgB,IAAI,UAAU,IAAI,WAAW;AAAA,EAC9G;AACF;AAKA,IAAM,0BAAN,MAA8B;AAAA,EACtB,WAAW,0BAA0B,KAAK;AAAA;AAC9C,UAAI,KAAK,YAAY;AAGnB;AAAA,MACF;AACA,WAAK,aAAa,yBAAyB;AAC3C,WAAK,oBAAoB,yBAAyB;AAClD,WAAK,YAAY,KAAK,gBAAgB,GAAG;AACzC,WAAK,cAAc,KAAK,kBAAkB,GAAG;AAC7C,WAAK,eAAe,KAAK,mBAAmB,GAAG;AAC/C,WAAK,aAAa,KAAK;AAAA,QAAiB;AAAA;AAAA,QAAyB,CAAC,yBAAyB;AAAA,MAAe;AAC1G,WAAK,kBAAkB,qBAAqB,iBAAe;AAAA,QAAiC,KAAK;AAAA,QAAY;AAAA,QAAa;AAAA;AAAA,MAA2C;AACrK,WAAK,YAAY,aAAa,yBAAyB,iCAAiC,KAAK,MAAM,KAAK,UAAU;AAClH,YAAM,6BAA6B,KAAK,aAAa,KAAK,WAAW,eAAe;AAAA,IACtF;AAAA;AAAA,EACA,mBAAmB,KAAK;AACtB,WAAO,gBAAgB;AAAA,EACzB;AAAA,EACA,gBAAgB,KAAK;AACnB,UAAM,aAAa,cAAc,IAAI,aAAa,UAAU;AAC5D,UAAM,aAAa,cAAc,IAAI,YAAY;AACjD,WAAO,aAAa,IAAI,iBAAiB,IAAI,qBAAqB,YAAY,UAAU;AAAA,EAC1F;AAAA,EACA,kBAAkB,KAAK;AACrB,WAAO,eAAe,KAAK,YAAY,KAAK,WAAW,IAAI,YAAY,iBAAe;AAAA,MAAiC,KAAK;AAAA,MAAY;AAAA,MAAa;AAAA;AAAA,IAAqC,GAAG,uBAAuB,CAAC;AAAA,EACvN;AAAA,EACA,iBAAiB,KAAK,gBAAgB;AACpC,WAAO,cAAc,KAAK,YAAY,KAAK,aAAa,KAAK,cAAc,KAAK,mBAAmB,IAAI,aAAa,IAAI,+BAA+B,cAAc;AAAA,EACvK;AAAA,EACM,YAAY;AAAA;AAChB,UAAI,IAAI;AACR,YAAM,oBAAoB,KAAK,WAAW;AAC1C,OAAC,KAAK,KAAK,eAAe,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU;AACxE,OAAC,KAAK,KAAK,kBAAkB,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU;AAAA,IAC7E;AAAA;AACF;AAuBA,IAAM,yBAAyB;AAO/B,SAAS,yBAAyB,QAAQ,eAAe,wBAAwB;AAC/E,MAAI,WAAW;AAKf,QAAM,SAAS;AAAA;AAAA,IAEP,OAAO;AAAA;AACX,YAAI,WAAW,OAAO,YAAY;AAChC,gBAAM,SAAS;AAAA,YACb,OAAO,OAAO,MAAM,UAAU,WAAW,YAAY;AAAA,YACrD,MAAM;AAAA,UACR;AACA,sBAAY;AACZ,iBAAO;AAAA,QACT;AACA,eAAO;AAAA,UACL,MAAM;AAAA,QACR;AAAA,MACF;AAAA;AAAA,IACM,SAAS;AAAA;AAAA,MAAC;AAAA;AAAA,IAChB,cAAc;AAAA,IAAC;AAAA,IACf,QAAQ,QAAQ,QAAQ;AAAA,EAC1B;AACA,SAAO;AACT;AAkBA,SAAS,yBAAyB,cAAc,cAAc,UAAU;AACtE,MAAI,CAAC,UAAU;AACb,UAAM,IAAI,eAAe,KAAK,kBAAkB,YAAY,YAAY,qCAAqC,YAAY,GAAG;AAAA,EAC9H;AACF;AAKA,SAAS,0BAA0B,aAAa,WAAW,aAAa,WAAW;AACjF,MAAI,cAAc,QAAQ,cAAc,MAAM;AAC5C,UAAM,IAAI,eAAe,KAAK,kBAAkB,GAAG,WAAW,QAAQ,WAAW,2BAA2B;AAAA,EAC9G;AACF;AAKA,SAAS,qBAAqB,MAAM;AAClC,MAAI,CAAC,YAAY,cAAc,IAAI,GAAG;AACpC,UAAM,IAAI,eAAe,KAAK,kBAAkB,6FAA6F,IAAI,QAAQ,KAAK,MAAM,GAAG;AAAA,EACzK;AACF;AAKA,SAAS,uBAAuB,MAAM;AACpC,MAAI,YAAY,cAAc,IAAI,GAAG;AACnC,UAAM,IAAI,eAAe,KAAK,kBAAkB,gGAAgG,IAAI,QAAQ,KAAK,MAAM,GAAG;AAAA,EAC5K;AACF;AAKA,SAAS,cAAc,OAAO;AAC5B,SAAO,OAAO,UAAU,YAAY,UAAU,SAAS,OAAO,eAAe,KAAK,MAAM,OAAO,aAAa,OAAO,eAAe,KAAK,MAAM;AAC/I;AAEA,SAAS,iBAAiB,OAAO;AAC/B,MAAI,UAAU,QAAW;AACvB,WAAO;AAAA,EACT,WAAW,UAAU,MAAM;AACzB,WAAO;AAAA,EACT,WAAW,OAAO,UAAU,UAAU;AACpC,QAAI,MAAM,SAAS,IAAI;AACrB,cAAQ,GAAG,MAAM,UAAU,GAAG,EAAE,CAAC;AAAA,IACnC;AACA,WAAO,KAAK,UAAU,KAAK;AAAA,EAC7B,WAAW,OAAO,UAAU,YAAY,OAAO,UAAU,WAAW;AAClE,WAAO,KAAK;AAAA,EACd,WAAW,OAAO,UAAU,UAAU;AACpC,QAAI,iBAAiB,OAAO;AAC1B,aAAO;AAAA,IACT,OAAO;AACL,YAAM,mBAAmB,uBAAuB,KAAK;AACrD,UAAI,kBAAkB;AACpB,eAAO,YAAY,gBAAgB;AAAA,MACrC,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF,WAAW,OAAO,UAAU,YAAY;AACtC,WAAO;AAAA,EACT,OAAO;AACL,WAAO,KAAK;AAAA,EACd;AACF;AAEA,SAAS,uBAAuB,OAAO;AACrC,MAAI,MAAM,aAAa;AACrB,WAAO,MAAM,YAAY;AAAA,EAC3B;AACA,SAAO;AACT;AASA,SAAS,KAAK,KAEd,aAAa;AACX,MAAI,eAAe,KAAK;AAGtB,UAAM,IAAI;AAAA,EACZ;AACA,MAAI,EAAE,eAAe,cAAc;AACjC,QAAI,YAAY,SAAS,IAAI,YAAY,MAAM;AAC7C,YAAM,IAAI,eAAe,KAAK,kBAAkB,qGAA0G;AAAA,IAC5J,OAAO;AACL,YAAM,cAAc,iBAAiB,GAAG;AACxC,YAAM,IAAI,eAAe,KAAK,kBAAkB,kBAAkB,YAAY,IAAI,kBAAkB,WAAW,EAAE;AAAA,IACnH;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,uBAAuB,cAAc,GAAG;AAC/C,MAAI,KAAK,GAAG;AACV,UAAM,IAAI,eAAe,KAAK,kBAAkB,YAAY,YAAY,8CAA8C,CAAC,GAAG;AAAA,EAC5H;AACF;AAqBA,SAAS,mBAAmB,QAAQ,cAAc;AAChD,MAAI,EAAE,kBAAkB,aAAa;AACnC,UAAM,IAAI,eAAe,KAAK,kBAAkB,wEAAwE,iBAAiB,MAAM,CAAC,EAAE;AAAA,EACpJ;AACA,SAAO,yBAAyB,QAAQ,YAAY;AACtD;AAuBA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,UAAU;AACpB,SAAK,WAAW;AAKhB,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,KAAK,OAAO;AACV,QAAI,KAAK,SAAS,MAAM;AACtB,WAAK,cAAc,KAAK,SAAS,MAAM,KAAK;AAAA,IAC9C;AAAA,EACF;AAAA,EACA,MAAM,OAAO;AACX,QAAI,KAAK,SAAS,OAAO;AACvB,WAAK,cAAc,KAAK,SAAS,OAAO,KAAK;AAAA,IAC/C,OAAO;AACL,eAAS,wCAAwC,MAAM,SAAS,CAAC;AAAA,IACnE;AAAA,EACF;AAAA,EACA,OAAO;AACL,SAAK,QAAQ;AAAA,EACf;AAAA,EACA,cAAc,cAAc,OAAO;AACjC,QAAI,CAAC,KAAK,OAAO;AACf,iBAAW,MAAM;AACf,YAAI,CAAC,KAAK,OAAO;AACf,uBAAa,KAAK;AAAA,QACpB;AAAA,MACF,GAAG,CAAC;AAAA,IACN;AAAA,EACF;AACF;AAsBA,IAAM,qBAAN,MAAyB;AAAA,EACvB,YAAY,SAEZ,YAAY;AACV,SAAK,UAAU;AACf,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,mBAAmB;AACjB,WAAO,cAAc,KAAK;AAAA,EAC5B;AACF;AAwBA,IAAM,mBAAN,MAAuB;AAAA,EACrB,YACA,QAAQ,YAAY;AAClB,SAAK,SAAS;AACd,SAAK,aAAa;AAElB,SAAK,WAAW,IAAI,SAAS;AAK7B,SAAK,SAAS,IAAI,WAAW;AAC7B,SAAK,cAAc,eAAe;AAElC,SAAK,gBAAgB,EAAE,KAAK,aAAW;AACrC,UAAI,WAAW,QAAQ,iBAAiB,GAAG;AACzC,aAAK,SAAS,QAAQ,QAAQ,QAAQ,QAAQ;AAAA,MAChD,OAAO;AACL,aAAK,SAAS,OAAO,IAAI,MAAM;AAAA,eACxB,KAAK,UAAU,YAAY,QAAQ,YAAY,SAAS,SAAS,QAAQ,OAAO,CAAC,EAAE,CAAC;AAAA,MAC7F;AAAA,IACF,GAAG,WAAS,KAAK,SAAS,OAAO,KAAK,CAAC;AAAA,EACzC;AAAA,EACA,QAAQ;AACN,WAAO,KAAK,OAAO,OAAO;AAAA,EAC5B;AAAA,EACM,cAAc;AAAA;AAClB,aAAO,KAAK,SAAS;AAAA,IACvB;AAAA;AAAA,EACM,cAAc;AAAA;AAElB,YAAM,KAAK,YAAY;AACvB,aAAO,KAAK,gBAAgB;AAAA,IAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWM,kBAAkB;AAAA;AACtB,YAAM,eAAe,MAAM,KAAK,WAAW;AAC3C,UAAI,iBAAiB,MAAM;AACzB,eAAO;AAAA,MACT;AACA,YAAM,eAAe,KAAK,YAAY,OAAO,YAAY;AACzD,YAAM,SAAS,OAAO,YAAY;AAClC,UAAI,MAAM,MAAM,GAAG;AACjB,aAAK,WAAW,kBAAkB,YAAY,uBAAuB;AAAA,MACvE;AACA,YAAM,aAAa,MAAM,KAAK,eAAe,MAAM;AACnD,aAAO,IAAI,mBAAmB,KAAK,MAAM,UAAU,GAAG,aAAa,SAAS,MAAM;AAAA,IACpF;AAAA;AAAA;AAAA,EAEA,qBAAqB;AACnB,WAAO,KAAK,OAAO,UAAU,OAAK,MAAM,IAAI,WAAW,CAAC,CAAC;AAAA,EAC3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,aAAa;AAAA;AACjB,aAAO,KAAK,mBAAmB,IAAI,GAAG;AACpC,cAAM,OAAO,MAAM,KAAK,qBAAqB;AAC7C,YAAI,MAAM;AACR;AAAA,QACF;AAAA,MACF;AAGA,UAAI,KAAK,OAAO,WAAW,GAAG;AAC5B,eAAO;AAAA,MACT;AACA,YAAM,WAAW,KAAK,mBAAmB;AAGzC,UAAI,WAAW,GAAG;AAChB,aAAK,WAAW,6DAA6D;AAAA,MAC/E;AACA,YAAM,SAAS,KAAK,OAAO,MAAM,GAAG,QAAQ;AAE5C,WAAK,SAAS,KAAK,OAAO,MAAM,QAAQ;AACxC,aAAO;AAAA,IACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOM,eAAe,QAAQ;AAAA;AAC3B,aAAO,KAAK,OAAO,SAAS,QAAQ;AAClC,cAAM,OAAO,MAAM,KAAK,qBAAqB;AAC7C,YAAI,MAAM;AACR,eAAK,WAAW,kDAAkD;AAAA,QACpE;AAAA,MACF;AACA,YAAM,SAAS,KAAK,YAAY,OAAO,KAAK,OAAO,MAAM,GAAG,MAAM,CAAC;AAEnE,WAAK,SAAS,KAAK,OAAO,MAAM,MAAM;AACtC,aAAO;AAAA,IACT;AAAA;AAAA,EACA,WAAW,SAAS;AAElB,SAAK,OAAO,OAAO;AACnB,UAAM,IAAI,MAAM,0BAA0B,OAAO,EAAE;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,uBAAuB;AAAA;AAC3B,YAAM,SAAS,MAAM,KAAK,OAAO,KAAK;AACtC,UAAI,CAAC,OAAO,MAAM;AAChB,cAAM,YAAY,IAAI,WAAW,KAAK,OAAO,SAAS,OAAO,MAAM,MAAM;AACzE,kBAAU,IAAI,KAAK,MAAM;AACzB,kBAAU,IAAI,OAAO,OAAO,KAAK,OAAO,MAAM;AAC9C,aAAK,SAAS;AAAA,MAChB;AACA,aAAO,OAAO;AAAA,IAChB;AAAA;AACF;AACA,SAAS,gBAAgB,QAAQ,YAAY;AAC3C,SAAO,IAAI,iBAAiB,QAAQ,UAAU;AAChD;AAsBA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,WAAW;AACrB,SAAK,YAAY;AAEjB,SAAK,eAAe,oBAAI,IAAI;AAC5B,SAAK,YAAY,CAAC;AAClB,SAAK,YAAY;AAKjB,SAAK,uBAAuB;AAO5B,SAAK,cAAc,oBAAI,IAAI;AAAA,EAC7B;AAAA,EACM,OAAO,MAAM;AAAA;AACjB,WAAK,sBAAsB;AAC3B,UAAI,KAAK,UAAU,SAAS,GAAG;AAC7B,aAAK,uBAAuB,IAAI,eAAe,KAAK,kBAAkB,4EAA4E;AAClJ,cAAM,KAAK;AAAA,MACb;AACA,YAAM,OAAO,MAAM,2BAA2B,KAAK,WAAW,IAAI;AAClE,WAAK,QAAQ,CAAAlC,SAAO,KAAK,cAAcA,IAAG,CAAC;AAC3C,aAAO;AAAA,IACT;AAAA;AAAA,EACA,IAAI,KAAK,MAAM;AACb,SAAK,MAAM,KAAK,WAAW,KAAK,KAAK,aAAa,GAAG,CAAC,CAAC;AACvD,SAAK,YAAY,IAAI,IAAI,SAAS,CAAC;AAAA,EACrC;AAAA,EACA,OAAO,KAAK,MAAM;AAChB,QAAI;AACF,WAAK,MAAM,KAAK,WAAW,KAAK,KAAK,sBAAsB,GAAG,CAAC,CAAC;AAAA,IAClE,SAAS,GAAG;AACV,WAAK,uBAAuB;AAAA,IAC9B;AACA,SAAK,YAAY,IAAI,IAAI,SAAS,CAAC;AAAA,EACrC;AAAA,EACA,OAAO,KAAK;AACV,SAAK,MAAM,IAAI,eAAe,KAAK,KAAK,aAAa,GAAG,CAAC,CAAC;AAC1D,SAAK,YAAY,IAAI,IAAI,SAAS,CAAC;AAAA,EACrC;AAAA,EACM,SAAS;AAAA;AACb,WAAK,sBAAsB;AAC3B,UAAI,KAAK,sBAAsB;AAC7B,cAAM,KAAK;AAAA,MACb;AACA,YAAM,YAAY,KAAK;AAEvB,WAAK,UAAU,QAAQ,cAAY;AACjC,kBAAU,OAAO,SAAS,IAAI,SAAS,CAAC;AAAA,MAC1C,CAAC;AAGD,gBAAU,QAAQ,CAAC,GAAG,SAAS;AAC7B,cAAM,MAAM,YAAY,SAAS,IAAI;AACrC,aAAK,UAAU,KAAK,IAAI,eAAe,KAAK,KAAK,aAAa,GAAG,CAAC,CAAC;AAAA,MACrE,CAAC;AACD,YAAM,gBAAgB,KAAK,WAAW,KAAK,SAAS;AACpD,WAAK,YAAY;AAAA,IACnB;AAAA;AAAA,EACA,cAAcA,MAAK;AACjB,QAAI;AACJ,QAAIA,KAAI,gBAAgB,GAAG;AACzB,mBAAaA,KAAI;AAAA,IACnB,WAAWA,KAAI,aAAa,GAAG;AAE7B,mBAAa,gBAAgB,IAAI;AAAA,IACnC,OAAO;AACL,YAAM,KAAK;AAAA,IACb;AACA,UAAM,kBAAkB,KAAK,aAAa,IAAIA,KAAI,IAAI,SAAS,CAAC;AAChE,QAAI,iBAAiB;AACnB,UAAI,CAAC,WAAW,QAAQ,eAAe,GAAG;AAExC,cAAM,IAAI,eAAe,KAAK,SAAS,6CAA6C;AAAA,MACtF;AAAA,IACF,OAAO;AACL,WAAK,aAAa,IAAIA,KAAI,IAAI,SAAS,GAAG,UAAU;AAAA,IACtD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,aAAa,KAAK;AAChB,UAAMV,WAAU,KAAK,aAAa,IAAI,IAAI,SAAS,CAAC;AACpD,QAAI,CAAC,KAAK,YAAY,IAAI,IAAI,SAAS,CAAC,KAAKA,UAAS;AACpD,UAAIA,SAAQ,QAAQ,gBAAgB,IAAI,CAAC,GAAG;AAC1C,eAAO,aAAa,OAAO,KAAK;AAAA,MAClC,OAAO;AACL,eAAO,aAAa,WAAWA,QAAO;AAAA,MACxC;AAAA,IACF,OAAO;AACL,aAAO,aAAa,KAAK;AAAA,IAC3B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,sBAAsB,KAAK;AACzB,UAAMA,WAAU,KAAK,aAAa,IAAI,IAAI,SAAS,CAAC;AAGpD,QAAI,CAAC,KAAK,YAAY,IAAI,IAAI,SAAS,CAAC,KAAKA,UAAS;AACpD,UAAIA,SAAQ,QAAQ,gBAAgB,IAAI,CAAC,GAAG;AAU1C,cAAM,IAAI,eAAe,KAAK,kBAAkB,6CAA6C;AAAA,MAC/F;AAEA,aAAO,aAAa,WAAWA,QAAO;AAAA,IACxC,OAAO;AAGL,aAAO,aAAa,OAAO,IAAI;AAAA,IACjC;AAAA,EACF;AAAA,EACA,MAAM,UAAU;AACd,SAAK,sBAAsB;AAC3B,SAAK,UAAU,KAAK,QAAQ;AAAA,EAC9B;AAAA,EACA,wBAAwB;AAAA,EAAC;AAC3B;AAsBA,IAAM,oBAAN,MAAwB;AAAA,EACtB,YAAY,YAAY,WAAW,SAAS,gBAAgB,UAAU;AACpE,SAAK,aAAa;AAClB,SAAK,YAAY;AACjB,SAAK,UAAU;AACf,SAAK,iBAAiB;AACtB,SAAK,WAAW;AAChB,SAAK,oBAAoB,QAAQ;AACjC,SAAK,UAAU,IAAI;AAAA,MAAmB,KAAK;AAAA,MAAY;AAAA;AAAA,IAAkD;AAAA,EAC3G;AAAA;AAAA,EAEA,MAAM;AACJ,SAAK,qBAAqB;AAC1B,SAAK,eAAe;AAAA,EACtB;AAAA,EACA,iBAAiB;AACf,SAAK,QAAQ,cAAc,MAAY;AACrC,YAAM,cAAc,IAAI,cAAc,KAAK,SAAS;AACpD,YAAM,cAAc,KAAK,qBAAqB,WAAW;AACzD,UAAI,aAAa;AACf,oBAAY,KAAK,YAAU;AACzB,eAAK,WAAW,iBAAiB,MAAM;AACrC,mBAAO,YAAY,OAAO,EAAE,KAAK,MAAM;AACrC,mBAAK,SAAS,QAAQ,MAAM;AAAA,YAC9B,CAAC,EAAE,MAAM,iBAAe;AACtB,mBAAK,uBAAuB,WAAW;AAAA,YACzC,CAAC;AAAA,UACH,CAAC;AAAA,QACH,CAAC,EAAE,MAAM,sBAAoB;AAC3B,eAAK,uBAAuB,gBAAgB;AAAA,QAC9C,CAAC;AAAA,MACH;AAAA,IACF,EAAC;AAAA,EACH;AAAA,EACA,qBAAqB,aAAa;AAChC,QAAI;AACF,YAAM,cAAc,KAAK,eAAe,WAAW;AACnD,UAAI,kBAAkB,WAAW,KAAK,CAAC,YAAY,SAAS,CAAC,YAAY,MAAM;AAC7E,aAAK,SAAS,OAAO,MAAM,4CAA4C,CAAC;AACxE,eAAO;AAAA,MACT;AACA,aAAO;AAAA,IACT,SAAS,OAAO;AAEd,WAAK,SAAS,OAAO,KAAK;AAC1B,aAAO;AAAA,IACT;AAAA,EACF;AAAA,EACA,uBAAuB,OAAO;AAC5B,QAAI,KAAK,oBAAoB,KAAK,KAAK,4BAA4B,KAAK,GAAG;AACzE,WAAK,qBAAqB;AAC1B,WAAK,WAAW,iBAAiB,MAAM;AACrC,aAAK,eAAe;AACpB,eAAO,QAAQ,QAAQ;AAAA,MACzB,CAAC;AAAA,IACH,OAAO;AACL,WAAK,SAAS,OAAO,KAAK;AAAA,IAC5B;AAAA,EACF;AAAA,EACA,4BAA4B,OAAO;AACjC,QAAI,MAAM,SAAS,iBAAiB;AAGlC,YAAM,OAAO,MAAM;AACnB,aAAO,SAAS,aAAa,SAAS,yBAAyB,SAAS,oBAAoB,CAAC,iBAAiB,IAAI;AAAA,IACpH;AACA,WAAO;AAAA,EACT;AACF;AAkBA,IAAM,YAAY;AAClB,IAAM,mCAAmC;AAEzC,IAAM,8BAA8B;AACpC,IAAM,wBAAwB;AAC9B,IAAM,+BAA+B;AAMrC,IAAM,kBAAN,MAAsB;AAAA,EACpB,YAAY,iBAAiB,qBAS7B,YAAY,cAAc;AACxB,SAAK,kBAAkB;AACvB,SAAK,sBAAsB;AAC3B,SAAK,aAAa;AAClB,SAAK,eAAe;AACpB,SAAK,OAAO,KAAK;AACjB,SAAK,WAAW,OAAO,MAAM;AAC7B,SAAK,yBAAyB,MAAM,QAAQ,QAAQ;AACpD,SAAK,6BAA6B,MAAM,QAAQ,QAAQ;AACxD,SAAK,gBAAgB,MAAM,YAAY,CAAM,SAAQ;AACnD,eAAS,WAAW,kBAAkB,KAAK,GAAG;AAC9C,YAAM,KAAK,uBAAuB,IAAI;AACtC,WAAK,OAAO;AAAA,IACd,EAAC;AACD,SAAK,oBAAoB,MAAM,YAAY,sBAAoB;AAC7D,eAAS,WAAW,iCAAiC,gBAAgB;AACrE,aAAO,KAAK,2BAA2B,kBAAkB,KAAK,IAAI;AAAA,IACpE,CAAC;AAAA,EACH;AAAA,EACA,IAAI,gBAAgB;AAClB,WAAO;AAAA,MACL,YAAY,KAAK;AAAA,MACjB,cAAc,KAAK;AAAA,MACnB,UAAU,KAAK;AAAA,MACf,iBAAiB,KAAK;AAAA,MACtB,qBAAqB,KAAK;AAAA,MAC1B,aAAa,KAAK;AAAA,MAClB,+BAA+B;AAAA,IACjC;AAAA,EACF;AAAA,EACA,4BAA4B,UAAU;AACpC,SAAK,yBAAyB;AAAA,EAChC;AAAA,EACA,+BAA+B,UAAU;AACvC,SAAK,6BAA6B;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB;AACpB,QAAI,KAAK,WAAW,gBAAgB;AAClC,YAAM,IAAI,eAAe,KAAK,qBAAqB,yCAAyC;AAAA,IAC9F;AAAA,EACF;AAAA,EACA,YAAY;AACV,SAAK,WAAW,oBAAoB;AACpC,UAAM,WAAW,IAAI,SAAS;AAC9B,SAAK,WAAW,oCAAoC,MAAY;AAC9D,UAAI;AACF,YAAI,KAAK,mBAAmB;AAC1B,gBAAM,KAAK,kBAAkB,UAAU;AAAA,QACzC;AACA,YAAI,KAAK,oBAAoB;AAC3B,gBAAM,KAAK,mBAAmB,UAAU;AAAA,QAC1C;AAIA,aAAK,gBAAgB,SAAS;AAC9B,aAAK,oBAAoB,SAAS;AAClC,iBAAS,QAAQ;AAAA,MACnB,SAAS,GAAG;AACV,cAAM,iBAAiB,6BAA6B,GAAG,gCAAgC;AACvF,iBAAS,OAAO,cAAc;AAAA,MAChC;AAAA,IACF,EAAC;AACD,WAAO,SAAS;AAAA,EAClB;AACF;AACA,SAAe,4BAA4B,QAAQ,0BAA0B;AAAA;AAC3E,WAAO,WAAW,0BAA0B;AAC5C,aAAS,WAAW,uCAAuC;AAC3D,UAAM,gBAAgB,OAAO;AAC7B,UAAM,yBAAyB,WAAW,aAAa;AACvD,QAAI,cAAc,cAAc;AAChC,WAAO,4BAA4B,CAAM,SAAQ;AAC/C,UAAI,CAAC,YAAY,QAAQ,IAAI,GAAG;AAC9B,cAAM,2BAA2B,yBAAyB,YAAY,IAAI;AAC1E,sBAAc;AAAA,MAChB;AAAA,IACF,EAAC;AAGD,6BAAyB,YAAY,2BAA2B,MAAM,OAAO,UAAU,CAAC;AACxF,WAAO,qBAAqB;AAAA,EAC9B;AAAA;AACA,SAAe,2BAA2B,QAAQ,yBAAyB;AAAA;AACzE,WAAO,WAAW,0BAA0B;AAC5C,UAAM,2BAA2B,MAAM,wBAAwB,MAAM;AACrE,aAAS,WAAW,sCAAsC;AAC1D,UAAM,wBAAwB,WAAW,0BAA0B,OAAO,aAAa;AAGvF,WAAO,4BAA4B,UAAQ,kCAAkC,wBAAwB,aAAa,IAAI,CAAC;AACvH,WAAO,+BAA+B,CAAC,GAAG,SAAS,kCAAkC,wBAAwB,aAAa,IAAI,CAAC;AAC/H,WAAO,oBAAoB;AAAA,EAC7B;AAAA;AAKA,SAAS,8BAA8B,OAAO;AAC5C,MAAI,MAAM,SAAS,iBAAiB;AAClC,WAAO,MAAM,SAAS,KAAK,uBAAuB,MAAM,SAAS,KAAK;AAAA,EACxE,WAAW,OAAO,iBAAiB,eAAe,iBAAiB,cAAc;AAQ/E;AAAA;AAAA;AAAA;AAAA,MAIE,MAAM,SAAS,gCAAgC,MAAM,SAAS;AAAA;AAAA,MAG9D,MAAM,SAAS;AAAA;AAAA,EAEnB;AACA,SAAO;AACT;AACA,SAAe,wBAAwB,QAAQ;AAAA;AAC7C,QAAI,CAAC,OAAO,oBAAoB;AAC9B,UAAI,OAAO,kCAAkC;AAC3C,iBAAS,WAAW,8CAA8C;AAClE,YAAI;AACF,gBAAM,4BAA4B,QAAQ,OAAO,iCAAiC,QAAQ;AAAA,QAC5F,SAAS,GAAG;AACV,gBAAM,QAAQ;AACd,cAAI,CAAC,8BAA8B,KAAK,GAAG;AACzC,kBAAM;AAAA,UACR;AACA,kBAAQ,oEAAyE,KAAK;AACtF,gBAAM,4BAA4B,QAAQ,IAAI,+BAA+B,CAAC;AAAA,QAChF;AAAA,MACF,OAAO;AACL,iBAAS,WAAW,wCAAwC;AAC5D,cAAM,4BAA4B,QAAQ,IAAI,+BAA+B,CAAC;AAAA,MAChF;AAAA,IACF;AACA,WAAO,OAAO;AAAA,EAChB;AAAA;AACA,SAAe,uBAAuB,QAAQ;AAAA;AAC5C,QAAI,CAAC,OAAO,mBAAmB;AAC7B,UAAI,OAAO,kCAAkC;AAC3C,iBAAS,WAAW,6CAA6C;AACjE,cAAM,2BAA2B,QAAQ,OAAO,iCAAiC,OAAO;AAAA,MAC1F,OAAO;AACL,iBAAS,WAAW,uCAAuC;AAC3D,cAAM,2BAA2B,QAAQ,IAAI,wBAAwB,CAAC;AAAA,MACxE;AAAA,IACF;AACA,WAAO,OAAO;AAAA,EAChB;AAAA;AACA,SAAS,eAAe,QAAQ;AAC9B,SAAO,wBAAwB,MAAM,EAAE,KAAK,OAAK,EAAE,WAAW;AAChE;AACA,SAAS,cAAc,QAAQ;AAC7B,SAAO,wBAAwB,MAAM,EAAE,KAAK,OAAK,EAAE,UAAU;AAC/D;AACA,SAAS,eAAe,QAAQ;AAC9B,SAAO,uBAAuB,MAAM,EAAE,KAAK,OAAK,EAAE,WAAW;AAC/D;AACA,SAAS,cAAc,QAAQ;AAC7B,SAAO,uBAAuB,MAAM,EAAE,KAAK,OAAK,EAAE,UAAU;AAC9D;AACA,SAAS,aAAa,QAAQ;AAC5B,SAAO,uBAAuB,MAAM,EAAE,KAAK,OAAK,EAAE,SAAS;AAC7D;AACA,SAAe,gBAAgB,QAAQ;AAAA;AACrC,UAAM,0BAA0B,MAAM,uBAAuB,MAAM;AACnE,UAAM,eAAe,wBAAwB;AAC7C,iBAAa,WAAW,iBAAiB,KAAK,MAAM,wBAAwB,UAAU;AACtF,iBAAa,aAAa,mBAAmB,KAAK,MAAM,wBAAwB,UAAU;AAC1F,iBAAa,2BAA2B,yBAAyB,KAAK,MAAM,wBAAwB,UAAU;AAC9G,iBAAa,4BAA4B,2BAA2B,KAAK,MAAM,wBAAwB,UAAU;AACjH,WAAO;AAAA,EACT;AAAA;AAEA,SAAS,6BAA6B,QAAQ;AAC5C,SAAO,OAAO,WAAW,QAAQ,MAAY;AAC3C,UAAM,cAAc,MAAM,eAAe,MAAM;AAC/C,UAAM,cAAc,MAAM,eAAe,MAAM;AAC/C,gBAAY,kBAAkB,IAAI;AAClC,WAAO,yBAAyB,WAAW;AAAA,EAC7C,EAAC;AACH;AAEA,SAAS,8BAA8B,QAAQ;AAC7C,SAAO,OAAO,WAAW,QAAQ,MAAY;AAC3C,UAAM,cAAc,MAAM,eAAe,MAAM;AAC/C,UAAM,cAAc,MAAM,eAAe,MAAM;AAC/C,gBAAY,kBAAkB,KAAK;AACnC,WAAO,0BAA0B,WAAW;AAAA,EAC9C,EAAC;AACH;AAMA,SAAS,oCAAoC,QAAQ;AACnD,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,aAAa,MAAM,cAAc,MAAM;AAC7C,WAAO,wCAAwC,YAAY,QAAQ;AAAA,EACrE,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAS,sBAAsB,QAAQe,QAAO,SAAS,UAAU;AAC/D,QAAM,kBAAkB,IAAI,cAAc,QAAQ;AAClD,QAAM,WAAW,IAAI,cAAcA,QAAO,iBAAiB,OAAO;AAClE,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,eAAe,MAAM,gBAAgB,MAAM;AACjD,WAAO,mBAAmB,cAAc,QAAQ;AAAA,EAClD,EAAC;AACD,SAAO,MAAM;AACX,oBAAgB,KAAK;AACrB,WAAO,WAAW,iBAAiB,MAAY;AAC7C,YAAM,eAAe,MAAM,gBAAgB,MAAM;AACjD,aAAO,qBAAqB,cAAc,QAAQ;AAAA,IACpD,EAAC;AAAA,EACH;AACF;AACA,SAAS,yCAAyC,QAAQ,QAAQ;AAChE,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,aAAa,MAAM,cAAc,MAAM;AAC7C,WAAO,sBAAsB,YAAY,QAAQ,QAAQ;AAAA,EAC3D,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAS,8CAA8C,QAAQ,KAAK,UAAU,CAAC,GAAG;AAChF,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,eAAe,MAAM,gBAAgB,MAAM;AACjD,WAAO,gCAAgC,cAAc,OAAO,YAAY,KAAK,SAAS,QAAQ;AAAA,EAChG,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAS,0CAA0C,QAAQA,QAAO;AAChE,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,aAAa,MAAM,cAAc,MAAM;AAC7C,WAAO,sBAAsB,YAAYA,QAAO,QAAQ;AAAA,EAC1D,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAS,+CAA+C,QAAQA,QAAO,UAAU,CAAC,GAAG;AACnF,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,eAAe,MAAM,gBAAgB,MAAM;AACjD,WAAO,gCAAgC,cAAc,OAAO,YAAYA,QAAO,SAAS,QAAQ;AAAA,EAClG,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAS,iCAAiC,QAAQA,QAAO,YAAY;AACnE,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAI7C,QAAI;AAEF,YAAM,YAAY,MAAM,aAAa,MAAM;AAC3C,eAAS,QAAQ,6BAA6B,WAAWA,QAAO,UAAU,CAAC;AAAA,IAC7E,SAAS,GAAG;AACV,eAAS,OAAO,CAAC;AAAA,IACnB;AAAA,EACF,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAS,qBAAqB,QAAQ,WAAW;AAC/C,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,aAAa,MAAM,cAAc,MAAM;AAC7C,WAAO,gBAAgB,YAAY,WAAW,QAAQ;AAAA,EACxD,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAS,0CAA0C,QAAQ,UAAU;AACnE,QAAM,kBAAkB,IAAI,cAAc,QAAQ;AAClD,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,eAAe,MAAM,gBAAgB,MAAM;AACjD,WAAO,2BAA2B,cAAc,eAAe;AAAA,EACjE,EAAC;AACD,SAAO,MAAM;AACX,oBAAgB,KAAK;AACrB,WAAO,WAAW,iBAAiB,MAAY;AAC7C,YAAM,eAAe,MAAM,gBAAgB,MAAM;AACjD,aAAO,8BAA8B,cAAc,eAAe;AAAA,IACpE,EAAC;AAAA,EACH;AACF;AAgBA,SAAS,2BAA2B,QAAQ,gBAAgB,SAAS;AACnE,QAAM,WAAW,IAAI,SAAS;AAC9B,SAAO,WAAW,iBAAiB,MAAY;AAC7C,UAAM,YAAY,MAAM,aAAa,MAAM;AAC3C,QAAI,kBAAkB,OAAO,YAAY,WAAW,SAAS,gBAAgB,QAAQ,EAAE,IAAI;AAAA,EAC7F,EAAC;AACD,SAAO,SAAS;AAClB;AACA,SAAe,sBAAsB,YAAY,QAAQ,QAAQ;AAAA;AAC/D,QAAI;AACF,YAAM,WAAW,MAAM,uBAAuB,YAAY,MAAM;AAChE,UAAI,SAAS,gBAAgB,GAAG;AAC9B,eAAO,QAAQ,QAAQ;AAAA,MACzB,WAAW,SAAS,aAAa,GAAG;AAClC,eAAO,QAAQ,IAAI;AAAA,MACrB,OAAO;AACL,eAAO,OAAO,IAAI,eAAe,KAAK,aAAa,gMAA+M,CAAC;AAAA,MACrQ;AAAA,IACF,SAAS,GAAG;AACV,YAAM,iBAAiB,6BAA6B,GAAG,2BAA2B,MAAM,aAAa;AACrG,aAAO,OAAO,cAAc;AAAA,IAC9B;AAAA,EACF;AAAA;AAKA,SAAS,gCAAgC,cAAc,YAAY,KAAK,SAAS,QAAQ;AACvF,QAAM,kBAAkB,IAAI,cAAc;AAAA,IACxC,MAAM,UAAQ;AAGZ,iBAAW,iBAAiB,MAAM,qBAAqB,cAAc,QAAQ,CAAC;AAC9E,YAAM,SAAS,KAAK,KAAK,IAAI,GAAG;AAChC,UAAI,CAAC,UAAU,KAAK,WAAW;AAQ7B,eAAO,OAAO,IAAI,eAAe,KAAK,aAAa,uDAAuD,CAAC;AAAA,MAC7G,WAAW,UAAU,KAAK,aAAa,WAAW,QAAQ,WAAW,UAAU;AAC7E,eAAO,OAAO,IAAI,eAAe,KAAK,aAAa,2KAA0L,CAAC;AAAA,MAChP,OAAO;AACL,eAAO,QAAQ,IAAI;AAAA,MACrB;AAAA,IACF;AAAA,IACA,OAAO,OAAK,OAAO,OAAO,CAAC;AAAA,EAC7B,CAAC;AACD,QAAM,WAAW,IAAI,cAAc,gBAAgB,IAAI,IAAI,GAAG,iBAAiB;AAAA,IAC7E,wBAAwB;AAAA,IACxB,uBAAuB;AAAA,EACzB,CAAC;AACD,SAAO,mBAAmB,cAAc,QAAQ;AAClD;AACA,SAAe,sBAAsB,YAAYA,QAAO,QAAQ;AAAA;AAC9D,QAAI;AACF,YAAM,cAAc,MAAM;AAAA,QAAuB;AAAA,QAAYA;AAAA;AAAA,QAAgC;AAAA,MAAI;AACjG,YAAM,OAAO,IAAI,KAAKA,QAAO,YAAY,UAAU;AACnD,YAAM,iBAAiB,KAAK,kBAAkB,YAAY,SAAS;AACnE,YAAM,aAAa,KAAK;AAAA,QAAa;AAAA;AAAA,QAA6C;AAAA,MAAK;AACvF,aAAO,QAAQ,WAAW,QAAQ;AAAA,IACpC,SAAS,GAAG;AACV,YAAM,iBAAiB,6BAA6B,GAAG,4BAA4BA,MAAK,gBAAgB;AACxG,aAAO,OAAO,cAAc;AAAA,IAC9B;AAAA,EACF;AAAA;AAKA,SAAS,gCAAgC,cAAc,YAAYA,QAAO,SAAS,QAAQ;AACzF,QAAM,kBAAkB,IAAI,cAAc;AAAA,IACxC,MAAM,cAAY;AAGhB,iBAAW,iBAAiB,MAAM,qBAAqB,cAAc,QAAQ,CAAC;AAC9E,UAAI,SAAS,aAAa,QAAQ,WAAW,UAAU;AACrD,eAAO,OAAO,IAAI,eAAe,KAAK,aAAa,8KAA6L,CAAC;AAAA,MACnP,OAAO;AACL,eAAO,QAAQ,QAAQ;AAAA,MACzB;AAAA,IACF;AAAA,IACA,OAAO,OAAK,OAAO,OAAO,CAAC;AAAA,EAC7B,CAAC;AACD,QAAM,WAAW,IAAI,cAAcA,QAAO,iBAAiB;AAAA,IACzD,wBAAwB;AAAA,IACxB,uBAAuB;AAAA,EACzB,CAAC;AACD,SAAO,mBAAmB,cAAc,QAAQ;AAClD;AACA,SAAS,0BAA0B,QAAQ,YAAY,MAAM,YAAY;AACvE,QAAM,SAAS,mBAAmB,MAAM,cAAc,UAAU,CAAC;AACjE,SAAO,WAAW,iBAAiB,MAAY;AAC7C,yBAAqB,MAAM,cAAc,MAAM,GAAG,QAAQ,UAAU;AAAA,EACtE,EAAC;AACH;AACA,SAAS,6BAA6B,QAAQ,WAAW;AACvD,SAAO,OAAO,WAAW,QAAQ,MAAS;AAAG,mCAAwB,MAAM,cAAc,MAAM,GAAG,SAAS;AAAA,IAAC;AAC9G;AACA,SAAS,mBAAmB,MAAM,YAAY;AAC5C,MAAI;AACJ,MAAI,OAAO,SAAS,UAAU;AAC5B,cAAU,eAAe,EAAE,OAAO,IAAI;AAAA,EACxC,OAAO;AACL,cAAU;AAAA,EACZ;AACA,SAAO,gBAAgB,mBAAmB,OAAO,GAAG,UAAU;AAChE;AACA,SAAS,qCAAqC,QAAQ,SAAS;AAC7D,SAAO,OAAO,WAAW,QAAQ,MAAY;AAC3C,WAAO,gCAAgC,MAAM,cAAc,MAAM,GAAG,OAAO;AAAA,EAC7E,EAAC;AACH;AACA,SAAS,0DAA0D,QAAQ,WAAW;AACpF,SAAO,OAAO,WAAW,QAAQ,MAAY;AAC3C,WAAO,sCAAsC,MAAM,cAAc,MAAM,GAAG,SAAS;AAAA,EACrF,EAAC;AACH;AACA,SAAS,qCAAqC,QAAQ;AACpD,SAAO,OAAO,WAAW,QAAQ,MAAY;AAC3C,WAAO,gCAAgC,MAAM,cAAc,MAAM,CAAC;AAAA,EACpE,EAAC;AACH;AAqBA,SAAS,wBAAwB,UAAU,UAAU;AACnD,SAAO,SAAS,mBAAmB,SAAS;AAC9C;AAKA,SAAS,wBAAwB,SAAS;AACxC,QAAM,QAAQ,CAAC;AACf,MAAI,QAAQ,mBAAmB,QAAW;AACxC,UAAM,iBAAiB,QAAQ;AAAA,EACjC;AACA,SAAO;AACT;AAkBA,IAAM,YAAY;AAKlB,IAAM,qBAAqB,oBAAI,IAAI;AAKnC,SAAS,iBAAiB,WAAW;AACnC,QAAM,YAAY,mBAAmB,IAAI,SAAS;AAClD,MAAI,WAAW;AACb,aAAS,WAAW,oBAAoB;AACxC,uBAAmB,OAAO,SAAS;AACnC,cAAU,UAAU;AAAA,EACtB;AACF;AACA,SAAS,iBAAiB,YAAY,OAAO,gBAAgB,UAAU;AACrE,SAAO,IAAI,aAAa,YAAY,OAAO,gBAAgB,SAAS,MAAM,SAAS,KAAK,SAAS,8BAA8B,SAAS,mCAAmC,wBAAwB,SAAS,8BAA8B,GAAG,SAAS,eAAe;AACvQ;AAmBA,IAAM,eAAe;AACrB,IAAM,cAAc;AAKpB,IAAM,mCAAmC;AAIzC,IAAM,mCAAmC;AAEzC,IAAM,mCAAmC;AAMzC,IAAM,wBAAN,MAA4B;AAAA,EAC1B,YAAY,UAAU;AACpB,QAAI,IAAI;AACR,QAAI,SAAS,SAAS,QAAW;AAC/B,UAAI,SAAS,QAAQ,QAAW;AAC9B,cAAM,IAAI,eAAe,KAAK,kBAAkB,oDAAoD;AAAA,MACtG;AACA,WAAK,OAAO;AACZ,WAAK,MAAM;AAAA,IACb,OAAO;AACL,WAAK,OAAO,SAAS;AACrB,WAAK,OAAO,KAAK,SAAS,SAAS,QAAQ,OAAO,SAAS,KAAK;AAAA,IAClE;AACA,SAAK,cAAc,SAAS;AAC5B,SAAK,4BAA4B,CAAC,CAAC,SAAS;AAC5C,SAAK,aAAa,SAAS;AAC3B,QAAI,SAAS,mBAAmB,QAAW;AACzC,WAAK,iBAAiB;AAAA,IACxB,OAAO;AACL,UAAI,SAAS,mBAAmB,2BAA2B,SAAS,iBAAiB,8BAA8B;AACjH,cAAM,IAAI,eAAe,KAAK,kBAAkB,mCAAmC,4BAA4B,EAAE;AAAA,MACnH,OAAO;AACL,aAAK,iBAAiB,SAAS;AAAA,MACjC;AAAA,IACF;AACA,8BAA0B,gCAAgC,SAAS,8BAA8B,qCAAqC,SAAS,iCAAiC;AAChL,SAAK,+BAA+B,CAAC,CAAC,SAAS;AAC/C,QAAI,KAAK,8BAA8B;AACrC,WAAK,oCAAoC;AAAA,IAC3C,WAAW,SAAS,sCAAsC,QAAW;AACnE,WAAK,oCAAoC;AAAA,IAC3C,OAAO;AAIL,WAAK,oCAAoC,CAAC,CAAC,SAAS;AAAA,IACtD;AACA,SAAK,iCAAiC,yBAAyB,KAAK,SAAS,oCAAoC,QAAQ,OAAO,SAAS,KAAK,CAAC,CAAC;AAChJ,+BAA2B,KAAK,8BAA8B;AAC9D,SAAK,kBAAkB,CAAC,CAAC,SAAS;AAAA,EACpC;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,KAAK,SAAS,MAAM,QAAQ,KAAK,QAAQ,MAAM,OAAO,KAAK,gBAAgB,MAAM,eAAe,KAAK,mBAAmB,MAAM,kBAAkB,KAAK,iCAAiC,MAAM,gCAAgC,KAAK,sCAAsC,MAAM,qCAAqC,wBAAwB,KAAK,gCAAgC,MAAM,8BAA8B,KAAK,KAAK,8BAA8B,MAAM,6BAA6B,KAAK,oBAAoB,MAAM;AAAA,EACtgB;AACF;AACA,SAAS,2BAA2B,SAAS;AAC3C,MAAI,QAAQ,mBAAmB,QAAW;AACxC,QAAI,MAAM,QAAQ,cAAc,GAAG;AACjC,YAAM,IAAI,eAAe,KAAK,kBAAkB,iCAAsC,QAAQ,cAAc,oBAAoB;AAAA,IAClI;AACA,QAAI,QAAQ,iBAAiB,kCAAkC;AAC7D,YAAM,IAAI,eAAe,KAAK,kBAAkB,iCAAiC,QAAQ,cAAc,8BAAmC,gCAAgC,GAAG;AAAA,IAC/K;AACA,QAAI,QAAQ,iBAAiB,kCAAkC;AAC7D,YAAM,IAAI,eAAe,KAAK,kBAAkB,iCAAiC,QAAQ,cAAc,8BAAmC,gCAAgC,GAAG;AAAA,IAC/K;AAAA,EACF;AACF;AAuBA,IAAM,cAAN,MAAkB;AAAA;AAAA,EAEhB,YAAY,kBAAkB,sBAAsB,aAAa,MAAM;AACrE,SAAK,mBAAmB;AACxB,SAAK,uBAAuB;AAC5B,SAAK,cAAc;AACnB,SAAK,OAAO;AAIZ,SAAK,OAAO;AACZ,SAAK,kBAAkB;AACvB,SAAK,YAAY,IAAI,sBAAsB,CAAC,CAAC;AAC7C,SAAK,kBAAkB;AAAA,EACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,MAAM;AACR,QAAI,CAAC,KAAK,MAAM;AACd,YAAM,IAAI,eAAe,KAAK,qBAAqB,8EAAmF;AAAA,IACxI;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,eAAe;AACjB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,IAAI,cAAc;AAChB,WAAO,KAAK,mBAAmB;AAAA,EACjC;AAAA,EACA,aAAa,UAAU;AACrB,QAAI,KAAK,iBAAiB;AACxB,YAAM,IAAI,eAAe,KAAK,qBAAqB,oKAA8K;AAAA,IACnO;AACA,SAAK,YAAY,IAAI,sBAAsB,QAAQ;AACnD,QAAI,SAAS,gBAAgB,QAAW;AACtC,WAAK,mBAAmB,4BAA4B,SAAS,WAAW;AAAA,IAC1E;AAAA,EACF;AAAA,EACA,eAAe;AACb,WAAO,KAAK;AAAA,EACd;AAAA,EACA,kBAAkB;AAChB,SAAK,kBAAkB;AACvB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,UAAU;AACR,QAAI,CAAC,KAAK,gBAAgB;AACxB,WAAK,iBAAiB,KAAK,WAAW;AAAA,IACxC;AACA,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAEA,SAAS;AACP,WAAO;AAAA,MACL,KAAK,KAAK;AAAA,MACV,YAAY,KAAK;AAAA,MACjB,UAAU,KAAK;AAAA,IACjB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,aAAa;AACX,qBAAiB,IAAI;AACrB,WAAO,QAAQ,QAAQ;AAAA,EACzB;AACF;AAcA,SAAS,yBAAyB,WAAW,MAAM,MAAM,UAAU,CAAC,GAAG;AACrE,MAAI;AACJ,cAAY,KAAK,WAAW,WAAW;AACvC,QAAM,WAAW,UAAU,aAAa;AACxC,QAAM,iBAAiB,GAAG,IAAI,IAAI,IAAI;AACtC,MAAI,SAAS,SAAS,gBAAgB,SAAS,SAAS,gBAAgB;AACtE,YAAQ,kGAAuG;AAAA,EACjH;AACA,YAAU,aAAa,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,QAAQ,GAAG;AAAA,IAChE,MAAM;AAAA,IACN,KAAK;AAAA,EACP,CAAC,CAAC;AACF,MAAI,QAAQ,eAAe;AACzB,QAAI;AACJ,QAAI;AACJ,QAAI,OAAO,QAAQ,kBAAkB,UAAU;AAC7C,cAAQ,QAAQ;AAChB,aAAO,KAAK;AAAA,IACd,OAAO;AAGL,cAAQ,oBAAoB,QAAQ,gBAAgB,KAAK,UAAU,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,SAAS;AAClI,YAAM,MAAM,QAAQ,cAAc,OAAO,QAAQ,cAAc;AAC/D,UAAI,CAAC,KAAK;AACR,cAAM,IAAI,eAAe,KAAK,kBAAkB,sDAAsD;AAAA,MACxG;AACA,aAAO,IAAI,KAAK,GAAG;AAAA,IACrB;AACA,cAAU,mBAAmB,IAAI,gCAAgC,IAAI,WAAW,OAAO,IAAI,CAAC;AAAA,EAC9F;AACF;AAsBA,IAAM,QAAN,MAAM,OAAM;AAAA;AAAA;AAAA,EAGV,YAAY,WAIZ,WAAW,QAAQ;AACjB,SAAK,YAAY;AACjB,SAAK,SAAS;AAEd,SAAK,OAAO;AACZ,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,cAAc,WAAW;AACvB,WAAO,IAAI,OAAM,KAAK,WAAW,WAAW,KAAK,MAAM;AAAA,EACzD;AACF;AAMA,IAAM,oBAAN,MAAM,mBAAkB;AAAA;AAAA,EAEtB,YAAY,WAIZ,WAAW,MAAM;AACf,SAAK,YAAY;AACjB,SAAK,OAAO;AAEZ,SAAK,OAAO;AACZ,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,IAAI,QAAQ;AACV,WAAO,KAAK,KAAK;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,KAAK;AACP,WAAO,KAAK,KAAK,KAAK,YAAY;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACT,WAAO,KAAK,KAAK,KAAK,gBAAgB;AAAA,EACxC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,SAAS;AACX,WAAO,IAAI,oBAAoB,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,QAAQ,CAAC;AAAA,EACzF;AAAA,EACA,cAAc,WAAW;AACvB,WAAO,IAAI,mBAAkB,KAAK,WAAW,WAAW,KAAK,IAAI;AAAA,EACnE;AACF;AAKA,IAAM,sBAAN,MAAM,6BAA4B,MAAM;AAAA;AAAA,EAEtC,YAAY,WAAW,WAAW,OAAO;AACvC,UAAM,WAAW,WAAW,gBAAgB,KAAK,CAAC;AAClD,SAAK,QAAQ;AAEb,SAAK,OAAO;AAAA,EACd;AAAA;AAAA,EAEA,IAAI,KAAK;AACP,WAAO,KAAK,OAAO,KAAK,YAAY;AAAA,EACtC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,OAAO;AACT,WAAO,KAAK,OAAO,KAAK,gBAAgB;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,SAAS;AACX,UAAM,aAAa,KAAK,MAAM,QAAQ;AACtC,QAAI,WAAW,QAAQ,GAAG;AACxB,aAAO;AAAA,IACT,OAAO;AACL,aAAO,IAAI;AAAA,QAAkB,KAAK;AAAA;AAAA,QAA2B;AAAA,QAAM,IAAI,YAAY,UAAU;AAAA,MAAC;AAAA,IAChG;AAAA,EACF;AAAA,EACA,cAAc,WAAW;AACvB,WAAO,IAAI,qBAAoB,KAAK,WAAW,WAAW,KAAK,KAAK;AAAA,EACtE;AACF;AACA,SAAS,WAAW,QAAQ,SAAS,cAAc;AACjD,WAAS,mBAAmB,MAAM;AAClC,2BAAyB,cAAc,QAAQ,IAAI;AACnD,MAAI,kBAAkB,aAAa;AACjC,UAAM,eAAe,aAAa,WAAW,MAAM,GAAG,YAAY;AAClE,2BAAuB,YAAY;AACnC,WAAO,IAAI;AAAA,MAAoB;AAAA;AAAA,MAAwB;AAAA,MAAM;AAAA,IAAY;AAAA,EAC3E,OAAO;AACL,QAAI,EAAE,kBAAkB,sBAAsB,EAAE,kBAAkB,sBAAsB;AACtF,YAAM,IAAI,eAAe,KAAK,kBAAkB,+GAAoH;AAAA,IACtK;AACA,UAAM,eAAe,OAAO,MAAM,MAAM,aAAa,WAAW,MAAM,GAAG,YAAY,CAAC;AACtF,2BAAuB,YAAY;AACnC,WAAO,IAAI;AAAA,MAAoB,OAAO;AAAA;AAAA,MAA2B;AAAA,MAAM;AAAA,IAAY;AAAA,EACrF;AACF;AAcA,SAAS,gBAAgB,WAAW,cAAc;AAChD,cAAY,KAAK,WAAW,WAAW;AACvC,2BAAyB,mBAAmB,iBAAiB,YAAY;AACzE,MAAI,aAAa,QAAQ,GAAG,KAAK,GAAG;AAClC,UAAM,IAAI,eAAe,KAAK,kBAAkB,0BAA0B,YAAY,8EAAmF;AAAA,EAC3K;AACA,SAAO,IAAI;AAAA,IAAM;AAAA;AAAA,IAA2B;AAAA,IAAM,2BAA2B,YAAY;AAAA,EAAC;AAC5F;AACA,SAAS,IAAI,QAAQ,SAAS,cAAc;AAC1C,WAAS,mBAAmB,MAAM;AAGlC,MAAI,UAAU,WAAW,GAAG;AAC1B,WAAO,OAAO,MAAM;AAAA,EACtB;AACA,2BAAyB,OAAO,QAAQ,IAAI;AAC5C,MAAI,kBAAkB,aAAa;AACjC,UAAM,eAAe,aAAa,WAAW,MAAM,GAAG,YAAY;AAClE,yBAAqB,YAAY;AACjC,WAAO,IAAI;AAAA,MAAkB;AAAA;AAAA,MAAwB;AAAA,MAAM,IAAI,YAAY,YAAY;AAAA,IAAC;AAAA,EAC1F,OAAO;AACL,QAAI,EAAE,kBAAkB,sBAAsB,EAAE,kBAAkB,sBAAsB;AACtF,YAAM,IAAI,eAAe,KAAK,kBAAkB,+GAAoH;AAAA,IACtK;AACA,UAAM,eAAe,OAAO,MAAM,MAAM,aAAa,WAAW,MAAM,GAAG,YAAY,CAAC;AACtF,yBAAqB,YAAY;AACjC,WAAO,IAAI,kBAAkB,OAAO,WAAW,kBAAkB,sBAAsB,OAAO,YAAY,MAAM,IAAI,YAAY,YAAY,CAAC;AAAA,EAC/I;AACF;AASA,SAAS,SAAS,MAAM,OAAO;AAC7B,SAAO,mBAAmB,IAAI;AAC9B,UAAQ,mBAAmB,KAAK;AAChC,OAAK,gBAAgB,qBAAqB,gBAAgB,yBAAyB,iBAAiB,qBAAqB,iBAAiB,sBAAsB;AAC9J,WAAO,KAAK,cAAc,MAAM,aAAa,KAAK,SAAS,MAAM,QAAQ,KAAK,cAAc,MAAM;AAAA,EACpG;AACA,SAAO;AACT;AAUA,SAAS,WAAW,MAAM,OAAO;AAC/B,SAAO,mBAAmB,IAAI;AAC9B,UAAQ,mBAAmB,KAAK;AAChC,MAAI,gBAAgB,SAAS,iBAAiB,OAAO;AACnD,WAAO,KAAK,cAAc,MAAM,aAAa,YAAY,KAAK,QAAQ,MAAM,MAAM,KAAK,KAAK,cAAc,MAAM;AAAA,EAClH;AACA,SAAO;AACT;AAkBA,IAAM,UAAU;AAChB,IAAM,iBAAN,MAAqB;AAAA,EACnB,cAAc;AAEZ,SAAK,OAAO,QAAQ,QAAQ;AAG5B,SAAK,eAAe,CAAC;AAGrB,SAAK,kBAAkB;AAGvB,SAAK,oBAAoB,CAAC;AAE1B,SAAK,UAAU;AAGf,SAAK,sBAAsB;AAE3B,SAAK,yBAAyB;AAE9B,SAAK,iBAAiB,CAAC;AAEvB,SAAK,UAAU,IAAI;AAAA,MAAmB;AAAA,MAAM;AAAA;AAAA,IAAiD;AAI7F,SAAK,oBAAoB,MAAM;AAC7B,WAAK,QAAQ,YAAY;AAAA,IAC3B;AAAA,EACF;AAAA,EACA,IAAI,iBAAiB;AACnB,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,IAAI;AAEnB,SAAK,QAAQ,EAAE;AAAA,EACjB;AAAA,EACA,oCAAoC,IAAI;AACtC,SAAK,gBAAgB;AAErB,SAAK,gBAAgB,EAAE;AAAA,EACzB;AAAA,EACA,oBAAoB,oBAAoB;AACtC,QAAI,CAAC,KAAK,iBAAiB;AACzB,WAAK,kBAAkB;AACvB,WAAK,yBAAyB,sBAAsB;AAAA,IACtD;AAAA,EACF;AAAA,EACA,QAAQ,IAAI;AACV,SAAK,gBAAgB;AACrB,QAAI,KAAK,iBAAiB;AAExB,aAAO,IAAI,QAAQ,MAAM;AAAA,MAAC,CAAC;AAAA,IAC7B;AAIA,UAAM,OAAO,IAAI,SAAS;AAC1B,WAAO,KAAK,gBAAgB,MAAM;AAChC,UAAI,KAAK,mBAAmB,KAAK,wBAAwB;AAEvD,eAAO,QAAQ,QAAQ;AAAA,MACzB;AACA,SAAG,EAAE,KAAK,KAAK,SAAS,KAAK,MAAM;AACnC,aAAO,KAAK;AAAA,IACd,CAAC,EAAE,KAAK,MAAM,KAAK,OAAO;AAAA,EAC5B;AAAA,EACA,iBAAiB,IAAI;AACnB,SAAK,iBAAiB,MAAM;AAC1B,WAAK,aAAa,KAAK,EAAE;AACzB,aAAO,KAAK,YAAY;AAAA,IAC1B,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAKM,cAAc;AAAA;AAClB,UAAI,KAAK,aAAa,WAAW,GAAG;AAClC;AAAA,MACF;AACA,UAAI;AACF,cAAM,KAAK,aAAa,CAAC,EAAE;AAC3B,aAAK,aAAa,MAAM;AACxB,aAAK,QAAQ,MAAM;AAAA,MACrB,SAAS,GAAG;AACV,YAAI,4BAA4B,CAAC,GAAG;AAClC,mBAAS,SAAS,4CAA4C,CAAC;AAAA,QACjE,OAAO;AACL,gBAAM;AAAA,QACR;AAAA,MACF;AACA,UAAI,KAAK,aAAa,SAAS,GAAG;AAWhC,aAAK,QAAQ,cAAc,MAAM,KAAK,YAAY,CAAC;AAAA,MACrD;AAAA,IACF;AAAA;AAAA,EACA,gBAAgB,IAAI;AAClB,UAAM,UAAU,KAAK,KAAK,KAAK,MAAM;AACnC,WAAK,sBAAsB;AAC3B,aAAO,GAAG,EAAE,MAAM,WAAS;AACzB,aAAK,UAAU;AACf,aAAK,sBAAsB;AAC3B,cAAM,UAAU,kBAAkB,KAAK;AACvC,iBAAS,8BAA8B,OAAO;AAI9C,cAAM;AAAA,MACR,CAAC,EAAE,KAAK,YAAU;AAChB,aAAK,sBAAsB;AAC3B,eAAO;AAAA,MACT,CAAC;AAAA,IACH,CAAC;AACD,SAAK,OAAO;AACZ,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB,SAAS,SAAS,IAAI;AACtC,SAAK,gBAAgB;AAErB,QAAI,KAAK,eAAe,QAAQ,OAAO,IAAI,IAAI;AAC7C,gBAAU;AAAA,IACZ;AACA,UAAM,YAAY,iBAAiB,kBAAkB,MAAM,SAAS,SAAS,IAAI,eAAa,KAAK,uBAAuB,SAAS,CAAC;AACpI,SAAK,kBAAkB,KAAK,SAAS;AACrC,WAAO;AAAA,EACT;AAAA,EACA,kBAAkB;AAChB,QAAI,KAAK,SAAS;AAChB,WAAK;AAAA,IACP;AAAA,EACF;AAAA,EACA,4BAA4B;AAAA,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKvB,QAAQ;AAAA;AAKZ,UAAI;AACJ,SAAG;AACD,sBAAc,KAAK;AACnB,cAAM;AAAA,MACR,SAAS,gBAAgB,KAAK;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,yBAAyB,SAAS;AAChC,eAAW,MAAM,KAAK,mBAAmB;AACvC,UAAI,GAAG,YAAY,SAAS;AAC1B,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,6BAA6B,aAAa;AAExC,WAAO,KAAK,MAAM,EAAE,KAAK,MAAM;AAG7B,WAAK,kBAAkB,KAAK,CAAC,GAAG,MAAM,EAAE,eAAe,EAAE,YAAY;AACrE,iBAAW,MAAM,KAAK,mBAAmB;AACvC,WAAG,UAAU;AACb,YAAI,gBAAgB,SAA2B,GAAG,YAAY,aAAa;AACzE;AAAA,QACF;AAAA,MACF;AACA,aAAO,KAAK,MAAM;AAAA,IACpB,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA,EAIA,qBAAqB,SAAS;AAC5B,SAAK,eAAe,KAAK,OAAO;AAAA,EAClC;AAAA;AAAA,EAEA,uBAAuB,IAAI;AAEzB,UAAM,QAAQ,KAAK,kBAAkB,QAAQ,EAAE;AAE/C,SAAK,kBAAkB,OAAO,OAAO,CAAC;AAAA,EACxC;AACF;AACA,SAAS,gBAAgB;AACvB,SAAO,IAAI,eAAe;AAC5B;AAMA,SAAS,kBAAkB,OAAO;AAChC,MAAI,UAAU,MAAM,WAAW;AAC/B,MAAI,MAAM,OAAO;AACf,QAAI,MAAM,MAAM,SAAS,MAAM,OAAO,GAAG;AACvC,gBAAU,MAAM;AAAA,IAClB,OAAO;AACL,gBAAU,MAAM,UAAU,OAAO,MAAM;AAAA,IACzC;AAAA,EACF;AACA,SAAO;AACT;AAwBA,IAAM,iBAAN,MAAqB;AAAA,EACnB,cAAc;AACZ,SAAK,oBAAoB,CAAC;AAC1B,SAAK,0BAA0B,IAAI,SAAS;AAC5C,SAAK,gBAAgB;AAAA,MACnB,WAAW;AAAA,MACX,YAAY;AAAA,MACZ,gBAAgB;AAAA,MAChB,aAAa;AAAA,MACb,iBAAiB;AAAA,IACnB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,WAAW,MAAM,OAAO,UAAU;AAChC,SAAK,oBAAoB;AAAA,MACvB;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,YAAY;AAChB,WAAO,KAAK,wBAAwB,QAAQ,MAAM,UAAU;AAAA,EAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,KAAK,aAAa,YAAY;AAC5B,WAAO,KAAK,wBAAwB,QAAQ,KAAK,aAAa,UAAU;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,UAAU;AACtB,SAAK,gBAAgB,QAAQ;AAC7B,QAAI,KAAK,kBAAkB,UAAU;AACnC,WAAK,kBAAkB,SAAS;AAAA,IAClC;AACA,SAAK,wBAAwB,QAAQ,QAAQ;AAAA,EAC/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,UAAU,OAAO;AACf,SAAK,cAAc,YAAY;AAC/B,QAAI,KAAK,kBAAkB,MAAM;AAC/B,WAAK,kBAAkB,KAAK,KAAK,aAAa;AAAA,IAChD;AACA,QAAI,KAAK,kBAAkB,OAAO;AAChC,WAAK,kBAAkB,MAAM,KAAK;AAAA,IACpC;AACA,SAAK,wBAAwB,OAAO,KAAK;AAAA,EAC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,gBAAgB,UAAU;AACxB,SAAK,gBAAgB;AACrB,QAAI,KAAK,kBAAkB,MAAM;AAC/B,WAAK,kBAAkB,KAAK,QAAQ;AAAA,IACtC;AAAA,EACF;AACF;AAuBA,IAAM,uBAAuB;AAM7B,IAAM,YAAN,cAAwB,YAAY;AAAA;AAAA,EAElC,YAAY,yBAAyB,6BAA6B,YAAY,KAAK;AACjF,UAAM,yBAAyB,6BAA6B,YAAY,GAAG;AAI3E,SAAK,OAAO;AACZ,SAAK,SAAS,cAAc;AAC5B,SAAK,mBAAmB,QAAQ,QAAQ,QAAQ,SAAS,SAAS,IAAI,SAAS;AAAA,EACjF;AAAA,EACA,aAAa;AACX,QAAI,CAAC,KAAK,kBAAkB;AAG1B,yBAAmB,IAAI;AAAA,IACzB;AACA,WAAO,KAAK,iBAAiB,UAAU;AAAA,EACzC;AACF;AAaA,SAAS,oBAAoB,KAAK,UAAU,YAAY;AACtD,MAAI,CAAC,YAAY;AACf,iBAAa;AAAA,EACf;AACA,QAAM,WAAW,aAAa,KAAK,WAAW;AAC9C,MAAI,SAAS,cAAc,UAAU,GAAG;AACtC,UAAM,mBAAmB,SAAS,aAAa;AAAA,MAC7C,YAAY;AAAA,IACd,CAAC;AACD,UAAM,kBAAkB,SAAS,WAAW,UAAU;AACtD,QAAI,UAAU,iBAAiB,QAAQ,GAAG;AACxC,aAAO;AAAA,IACT,OAAO;AACL,YAAM,IAAI,eAAe,KAAK,qBAAqB,kPAAiQ;AAAA,IACtT;AAAA,EACF;AACA,MAAI,SAAS,mBAAmB,UAAa,SAAS,eAAe,QAAW;AAC9E,UAAM,IAAI,eAAe,KAAK,kBAAkB,wJAA6J;AAAA,EAC/M;AACA,MAAI,SAAS,mBAAmB,UAAa,SAAS,mBAAmB,wBAAwB,SAAS,iBAAiB,8BAA8B;AACvJ,UAAM,IAAI,eAAe,KAAK,kBAAkB,mCAAmC,4BAA4B,EAAE;AAAA,EACnH;AACA,SAAO,SAAS,WAAW;AAAA,IACzB,SAAS;AAAA,IACT,oBAAoB;AAAA,EACtB,CAAC;AACH;AACA,SAAS,aAAa,iBAAiB,oBAAoB;AACzD,QAAM,MAAM,OAAO,oBAAoB,WAAW,kBAAkB,OAAO;AAC3E,QAAM,aAAa,OAAO,oBAAoB,WAAW,kBAAkB,sBAAsB;AACjG,QAAM,KAAK,aAAa,KAAK,WAAW,EAAE,aAAa;AAAA,IACrD,YAAY;AAAA,EACd,CAAC;AACD,MAAI,CAAC,GAAG,cAAc;AACpB,UAAM,WAAW,kCAAkC,WAAW;AAC9D,QAAI,UAAU;AACZ,+BAAyB,IAAI,GAAG,QAAQ;AAAA,IAC1C;AAAA,EACF;AACA,SAAO;AACT;AAIA,SAAS,0BAA0B,WAAW;AAC5C,MAAI,CAAC,UAAU,kBAAkB;AAC/B,uBAAmB,SAAS;AAAA,EAC9B;AACA,YAAU,iBAAiB,oBAAoB;AAC/C,SAAO,UAAU;AACnB;AACA,SAAS,mBAAmB,WAAW;AACrC,MAAI,IAAI,IAAI;AACZ,QAAM,WAAW,UAAU,gBAAgB;AAC3C,QAAM,eAAe,iBAAiB,UAAU,eAAe,KAAK,UAAU,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,QAAQ,UAAU,IAAI,UAAU,iBAAiB,QAAQ;AACrL,YAAU,mBAAmB,IAAI,gBAAgB,UAAU,kBAAkB,UAAU,sBAAsB,UAAU,QAAQ,YAAY;AAC3I,QAAM,KAAK,SAAS,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,gCAAgC,KAAK,SAAS,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,2BAA2B;AACnM,cAAU,iBAAiB,mCAAmC;AAAA,MAC5D,cAAc,SAAS,WAAW;AAAA,MAClC,UAAU,SAAS,WAAW;AAAA,MAC9B,SAAS,SAAS,WAAW;AAAA,IAC/B;AAAA,EACF;AACF;AA8BA,SAAS,2BAA2B,WAAW,qBAAqB;AAClE,cAAY,KAAK,WAAW,SAAS;AACrC,uBAAqB,SAAS;AAC9B,QAAM,SAAS,0BAA0B,SAAS;AAClD,MAAI,OAAO,kCAAkC;AAC3C,UAAM,IAAI,eAAe,KAAK,qBAAqB,iCAAiC;AAAA,EACtF;AACA,UAAQ,+GAAoH;AAC5H,QAAM,WAAW,UAAU,gBAAgB;AAC3C,QAAM,0BAA0B,IAAI,wBAAwB;AAC5D,QAAM,2BAA2B,IAAI,kCAAkC,yBAAyB,SAAS,gBAAgB,wBAAwB,QAAQ,wBAAwB,SAAS,SAAS,oBAAoB,cAAc;AACrO,SAAO,wBAAwB,QAAQ,yBAAyB,wBAAwB;AAC1F;AA2BA,SAAS,mCAAmC,WAAW;AACrD,cAAY,KAAK,WAAW,SAAS;AACrC,uBAAqB,SAAS;AAC9B,QAAM,SAAS,0BAA0B,SAAS;AAClD,MAAI,OAAO,kCAAkC;AAC3C,UAAM,IAAI,eAAe,KAAK,qBAAqB,iCAAiC;AAAA,EACtF;AACA,UAAQ,uHAA4H;AACpI,QAAM,WAAW,UAAU,gBAAgB;AAC3C,QAAM,0BAA0B,IAAI,wBAAwB;AAC5D,QAAM,2BAA2B,IAAI,iCAAiC,yBAAyB,SAAS,cAAc;AACtH,SAAO,wBAAwB,QAAQ,yBAAyB,wBAAwB;AAC1F;AAOA,SAAS,wBAAwB,QAAQ,yBAAyB,0BAA0B;AAC1F,QAAM,oBAAoB,IAAI,SAAS;AACvC,SAAO,OAAO,WAAW,QAAQ,MAAY;AAC3C,QAAI;AACF,YAAM,4BAA4B,QAAQ,wBAAwB;AAClE,YAAM,2BAA2B,QAAQ,uBAAuB;AAChE,wBAAkB,QAAQ;AAAA,IAC5B,SAAS,GAAG;AACV,YAAM,QAAQ;AACd,UAAI,CAAC,8BAA8B,KAAK,GAAG;AACzC,cAAM;AAAA,MACR;AACA,cAAQ,mEAAwE,KAAK;AACrF,wBAAkB,OAAO,KAAK;AAAA,IAChC;AAAA,EACF,EAAC,EAAE,KAAK,MAAM,kBAAkB,OAAO;AACzC;AAuBA,SAAS,0BAA0B,WAAW;AAC5C,MAAI,UAAU,gBAAgB,CAAC,UAAU,aAAa;AACpD,UAAM,IAAI,eAAe,KAAK,qBAAqB,uGAA4G;AAAA,EACjK;AACA,QAAM,WAAW,IAAI,SAAS;AAC9B,YAAU,OAAO,oCAAoC,MAAY;AAC/D,QAAI;AACF,YAAM,0BAA0B,uBAAuB,UAAU,aAAa,UAAU,eAAe,CAAC;AACxG,eAAS,QAAQ;AAAA,IACnB,SAAS,GAAG;AACV,eAAS,OAAO,CAAC;AAAA,IACnB;AAAA,EACF,EAAC;AACD,SAAO,SAAS;AAClB;AAiBA,SAAS,qBAAqB,WAAW;AACvC,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,oCAAoC,MAAM;AACnD;AAOA,SAAS,cAAc,WAAW;AAChC,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,6BAA6B,MAAM;AAC5C;AASA,SAAS,eAAe,WAAW;AACjC,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,8BAA8B,MAAM;AAC7C;AAuBA,SAAS,UAAU,WAAW;AAC5B,yBAAuB,UAAU,KAAK,aAAa,UAAU,YAAY,QAAQ;AACjF,SAAO,UAAU,QAAQ;AAC3B;AAYA,SAAS,WAAW,WAAW,YAAY;AACzC,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,aAAa,IAAI,eAAe;AACtC,4BAA0B,QAAQ,UAAU,aAAa,YAAY,UAAU;AAC/E,SAAO;AACT;AAaA,SAAS,WAAW,WAAWb,OAAM;AACnC,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,6BAA6B,QAAQA,KAAI,EAAE,KAAK,CAAAsB,gBAAc;AACnE,QAAI,CAACA,aAAY;AACf,aAAO;AAAA,IACT;AACA,WAAO,IAAI,MAAM,WAAW,MAAMA,YAAW,KAAK;AAAA,EACpD,CAAC;AACH;AACA,SAAS,qBAAqB,WAAW;AACvC,MAAI,UAAU,gBAAgB,UAAU,aAAa;AACnD,UAAM,IAAI,eAAe,KAAK,qBAAqB,sKAAgL;AAAA,EACrO;AACF;AAkBA,SAAS,kBAAkB,SAAS,kBAAkB,MAAM;AAC1D,gBAAc,WAAa;AAC3B,qBAAmB,IAAI,UAAU,aAAa,CAAC,WAAW;AAAA,IACxD,oBAAoB;AAAA,IACpB,SAAS;AAAA,EACX,MAAM;AACJ,UAAM,MAAM,UAAU,YAAY,KAAK,EAAE,aAAa;AACtD,UAAM,oBAAoB,IAAI,UAAU,IAAI,gCAAgC,UAAU,YAAY,eAAe,CAAC,GAAG,IAAI,8BAA8B,UAAU,YAAY,oBAAoB,CAAC,GAAG,kBAAkB,KAAK,UAAU,GAAG,GAAG;AAC5O,eAAW,OAAO,OAAO;AAAA,MACvB;AAAA,IACF,GAAG,QAAQ;AACX,sBAAkB,aAAa,QAAQ;AACvC,WAAO;AAAA,EACT,GAAG,QAAQ,EAAE,qBAAqB,IAAI,CAAC;AACvC,kBAAgB,MAAM,WAAW,OAAO;AAExC,kBAAgB,MAAM,WAAW,SAAS;AAC5C;AAqBA,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,OAAO,eAAe,WAAW;AAC3C,SAAK,QAAQ;AACb,SAAK,gBAAgB;AACrB,SAAK,YAAY;AAAA,EACnB;AACF;AAsBA,IAAM,iBAAN,MAAqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOnB,YAAY,gBAAgB,SAAS,oBAAoB;AACvD,SAAK,qBAAqB;AAE1B,SAAK,OAAO;AACZ,SAAK,gBAAgB;AAAA,EACvB;AACF;AAIA,IAAM,yBAAN,MAA6B;AAAA;AAAA,EAE3B,YAAYT,QAAO,iBAAiB,OAAO;AACzC,SAAK,kBAAkB;AACvB,SAAK,QAAQ;AAEb,SAAK,OAAO;AACZ,SAAK,QAAQA;AAAA,EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,OAAO;AACL,WAAO,KAAK,gBAAgB,iBAAiB,KAAK,KAAK;AAAA,EACzD;AACF;AAqBA,IAAM,QAAN,MAAM,OAAM;AAAA;AAAA,EAEV,YAAY,YAAY;AACtB,SAAK,cAAc;AAAA,EACrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,iBAAiB,QAAQ;AAC9B,QAAI;AACF,aAAO,IAAI,OAAM,WAAW,iBAAiB,MAAM,CAAC;AAAA,IACtD,SAAS,GAAG;AACV,YAAM,IAAI,eAAe,KAAK,kBAAkB,kDAAkD,CAAC;AAAA,IACrG;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAO,eAAe,OAAO;AAC3B,WAAO,IAAI,OAAM,WAAW,eAAe,KAAK,CAAC;AAAA,EACnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW;AACT,WAAO,KAAK,YAAY,SAAS;AAAA,EACnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe;AACb,WAAO,KAAK,YAAY,aAAa;AAAA,EACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW;AACT,WAAO,mBAAmB,KAAK,SAAS,IAAI;AAAA,EAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,OAAO;AACb,WAAO,KAAK,YAAY,QAAQ,MAAM,WAAW;AAAA,EACnD;AACF;AA0BA,IAAM,YAAN,MAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOd,eAAe,YAAY;AACzB,aAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,EAAE,GAAG;AAC1C,UAAI,WAAW,CAAC,EAAE,WAAW,GAAG;AAC9B,cAAM,IAAI,eAAe,KAAK,kBAAkB,yEAA8E;AAAA,MAChI;AAAA,IACF;AACA,SAAK,gBAAgB,IAAI,YAAY,UAAU;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,OAAO;AACb,WAAO,KAAK,cAAc,QAAQ,MAAM,aAAa;AAAA,EACvD;AACF;AAKA,SAAS,aAAa;AACpB,SAAO,IAAI,UAAU,iBAAiB;AACxC;AAsBA,IAAM,aAAN,MAAiB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKf,YAAY,aAAa;AACvB,SAAK,cAAc;AAAA,EACrB;AACF;AAyBA,IAAM,WAAN,MAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOb,YAAY,UAAU,WAAW;AAC/B,QAAI,CAAC,SAAS,QAAQ,KAAK,WAAW,OAAO,WAAW,IAAI;AAC1D,YAAM,IAAI,eAAe,KAAK,kBAAkB,4DAA4D,QAAQ;AAAA,IACtH;AACA,QAAI,CAAC,SAAS,SAAS,KAAK,YAAY,QAAQ,YAAY,KAAK;AAC/D,YAAM,IAAI,eAAe,KAAK,kBAAkB,+DAA+D,SAAS;AAAA,IAC1H;AACA,SAAK,OAAO;AACZ,SAAK,QAAQ;AAAA,EACf;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,WAAW;AACb,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,YAAY;AACd,WAAO,KAAK;AAAA,EACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,OAAO;AACb,WAAO,KAAK,SAAS,MAAM,QAAQ,KAAK,UAAU,MAAM;AAAA,EAC1D;AAAA;AAAA,EAEA,SAAS;AACP,WAAO;AAAA,MACL,UAAU,KAAK;AAAA,MACf,WAAW,KAAK;AAAA,IAClB;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,WAAW,OAAO;AAChB,WAAO,oBAAoB,KAAK,MAAM,MAAM,IAAI,KAAK,oBAAoB,KAAK,OAAO,MAAM,KAAK;AAAA,EAClG;AACF;AAwBA,IAAM,cAAN,MAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKhB,YAAY,QAAQ;AAElB,SAAK,WAAW,UAAU,CAAC,GAAG,IAAI,OAAK,CAAC;AAAA,EAC1C;AAAA;AAAA;AAAA;AAAA,EAIA,UAAU;AACR,WAAO,KAAK,QAAQ,IAAI,OAAK,CAAC;AAAA,EAChC;AAAA;AAAA;AAAA;AAAA,EAIA,QAAQ,OAAO;AACb,WAAO,sBAAsB,KAAK,SAAS,MAAM,OAAO;AAAA,EAC1D;AACF;AAkBA,IAAM,uBAAuB;AAE7B,IAAM,gBAAN,MAAoB;AAAA,EAClB,YAAY,MAAM,WAAW,iBAAiB;AAC5C,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACA,WAAW,KAAK,cAAc;AAC5B,QAAI,KAAK,cAAc,MAAM;AAC3B,aAAO,IAAI,cAAc,KAAK,KAAK,MAAM,KAAK,WAAW,cAAc,KAAK,eAAe;AAAA,IAC7F,OAAO;AACL,aAAO,IAAI,YAAY,KAAK,KAAK,MAAM,cAAc,KAAK,eAAe;AAAA,IAC3E;AAAA,EACF;AACF;AAEA,IAAM,mBAAN,MAAuB;AAAA,EACrB,YAAY,MAEZ,WAAW,iBAAiB;AAC1B,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,kBAAkB;AAAA,EACzB;AAAA,EACA,WAAW,KAAK,cAAc;AAC5B,WAAO,IAAI,cAAc,KAAK,KAAK,MAAM,KAAK,WAAW,cAAc,KAAK,eAAe;AAAA,EAC7F;AACF;AACA,SAAS,QAAQ,YAAY;AAC3B,UAAQ,YAAY;AAAA,IAClB,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT;AACE,YAAM,KAAK;AAAA,EACf;AACF;AAEA,IAAM,mBAAN,MAAM,kBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBrB,YAAY,UAAU,YAAY,YAAY,2BAA2B,iBAAiB,WAAW;AACnG,SAAK,WAAW;AAChB,SAAK,aAAa;AAClB,SAAK,aAAa;AAClB,SAAK,4BAA4B;AAGjC,QAAI,oBAAoB,QAAW;AACjC,WAAK,aAAa;AAAA,IACpB;AACA,SAAK,kBAAkB,mBAAmB,CAAC;AAC3C,SAAK,YAAY,aAAa,CAAC;AAAA,EACjC;AAAA,EACA,IAAI,OAAO;AACT,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA,EACA,IAAI,aAAa;AACf,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA,EAEA,YAAY,eAAe;AACzB,WAAO,IAAI,kBAAiB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,GAAG,aAAa,GAAG,KAAK,YAAY,KAAK,YAAY,KAAK,2BAA2B,KAAK,iBAAiB,KAAK,SAAS;AAAA,EACpM;AAAA,EACA,qBAAqB,OAAO;AAC1B,QAAI;AACJ,UAAM,aAAa,KAAK,KAAK,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,MAAM,KAAK;AACtF,UAAM,UAAU,KAAK,YAAY;AAAA,MAC/B,MAAM;AAAA,MACN,cAAc;AAAA,IAChB,CAAC;AACD,YAAQ,oBAAoB,KAAK;AACjC,WAAO;AAAA,EACT;AAAA,EACA,yBAAyB,OAAO;AAC9B,QAAI;AACJ,UAAM,aAAa,KAAK,KAAK,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,MAAM,KAAK;AACtF,UAAM,UAAU,KAAK,YAAY;AAAA,MAC/B,MAAM;AAAA,MACN,cAAc;AAAA,IAChB,CAAC;AACD,YAAQ,aAAa;AACrB,WAAO;AAAA,EACT;AAAA,EACA,qBAAqB,OAAO;AAG1B,WAAO,KAAK,YAAY;AAAA,MACtB,MAAM;AAAA,MACN,cAAc;AAAA,IAChB,CAAC;AAAA,EACH;AAAA,EACA,YAAY,QAAQ;AAClB,WAAO,YAAY,QAAQ,KAAK,SAAS,YAAY,KAAK,SAAS,gBAAgB,OAAO,KAAK,MAAM,KAAK,SAAS,SAAS;AAAA,EAC9H;AAAA;AAAA,EAEA,SAAS,WAAW;AAClB,WAAO,KAAK,UAAU,KAAK,WAAS,UAAU,WAAW,KAAK,CAAC,MAAM,UAAa,KAAK,gBAAgB,KAAK,eAAa,UAAU,WAAW,UAAU,KAAK,CAAC,MAAM;AAAA,EACtK;AAAA,EACA,eAAe;AAGb,QAAI,CAAC,KAAK,MAAM;AACd;AAAA,IACF;AACA,aAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ,KAAK;AACzC,WAAK,oBAAoB,KAAK,KAAK,IAAI,CAAC,CAAC;AAAA,IAC3C;AAAA,EACF;AAAA,EACA,oBAAoB,SAAS;AAC3B,QAAI,QAAQ,WAAW,GAAG;AACxB,YAAM,KAAK,YAAY,mCAAmC;AAAA,IAC5D;AACA,QAAI,QAAQ,KAAK,UAAU,KAAK,qBAAqB,KAAK,OAAO,GAAG;AAClE,YAAM,KAAK,YAAY,gDAAgD;AAAA,IACzE;AAAA,EACF;AACF;AAKA,IAAM,iBAAN,MAAqB;AAAA,EACnB,YAAY,YAAY,2BAA2B,YAAY;AAC7D,SAAK,aAAa;AAClB,SAAK,4BAA4B;AACjC,SAAK,aAAa,cAAc,cAAc,UAAU;AAAA,EAC1D;AAAA;AAAA,EAEA,cAAc,YAAY,YAAY,WAAW,eAAe,OAAO;AACrE,WAAO,IAAI,iBAAiB;AAAA,MAC1B;AAAA,MACA;AAAA,MACA;AAAA,MACA,MAAM,YAAY,UAAU;AAAA,MAC5B,cAAc;AAAA,MACd;AAAA,IACF,GAAG,KAAK,YAAY,KAAK,YAAY,KAAK,yBAAyB;AAAA,EACrE;AACF;AACA,SAAS,kBAAkB,WAAW;AACpC,QAAM,WAAW,UAAU,gBAAgB;AAC3C,QAAM,aAAa,cAAc,UAAU,WAAW;AACtD,SAAO,IAAI,eAAe,UAAU,aAAa,CAAC,CAAC,SAAS,2BAA2B,UAAU;AACnG;AAEA,SAAS,aAAa,gBAAgB,YAAY,WAAW,OAAO,cAAc,UAAU,CAAC,GAAG;AAC9F,QAAM,UAAU,eAAe,cAAc,QAAQ,SAAS,QAAQ,cAAc,IAAkC,GAA4B,YAAY,WAAW,YAAY;AACrL,sBAAoB,uCAAuC,SAAS,KAAK;AACzE,QAAM,aAAa,YAAY,OAAO,OAAO;AAC7C,MAAI;AACJ,MAAI;AACJ,MAAI,QAAQ,OAAO;AACjB,gBAAY,IAAI,UAAU,QAAQ,SAAS;AAC3C,sBAAkB,QAAQ;AAAA,EAC5B,WAAW,QAAQ,aAAa;AAC9B,UAAM,sBAAsB,CAAC;AAC7B,eAAW,qBAAqB,QAAQ,aAAa;AACnD,YAAM,YAAY,wBAAwB,YAAY,mBAAmB,SAAS;AAClF,UAAI,CAAC,QAAQ,SAAS,SAAS,GAAG;AAChC,cAAM,IAAI,eAAe,KAAK,kBAAkB,UAAU,SAAS,qEAAqE;AAAA,MAC1I;AACA,UAAI,CAAC,kBAAkB,qBAAqB,SAAS,GAAG;AACtD,4BAAoB,KAAK,SAAS;AAAA,MACpC;AAAA,IACF;AACA,gBAAY,IAAI,UAAU,mBAAmB;AAC7C,sBAAkB,QAAQ,gBAAgB,OAAO,eAAa,UAAU,OAAO,UAAU,KAAK,CAAC;AAAA,EACjG,OAAO;AACL,gBAAY;AACZ,sBAAkB,QAAQ;AAAA,EAC5B;AACA,SAAO,IAAI,cAAc,IAAI,YAAY,UAAU,GAAG,WAAW,eAAe;AAClF;AACA,IAAM,uBAAN,MAAM,8BAA6B,WAAW;AAAA,EAC5C,kBAAkB,SAAS;AACzB,QAAI,QAAQ,eAAe,GAAiC;AAG1D,cAAQ,UAAU,KAAK,QAAQ,IAAI;AAAA,IACrC,WAAW,QAAQ,eAAe,GAA+B;AAC/D,YAAM,QAAQ,YAAY,GAAG,KAAK,WAAW,yDAA8D;AAAA,IAC7G,OAAO;AAEL,YAAM,QAAQ,YAAY,GAAG,KAAK,WAAW,2DAAgE;AAAA,IAC/G;AACA,WAAO;AAAA,EACT;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,iBAAiB;AAAA,EAC1B;AACF;AAiBA,SAAS,2BAA2B,YAAY,SAAS,cAAc;AACrE,SAAO,IAAI,iBAAiB;AAAA,IAC1B,YAAY;AAAA,IACZ,WAAW,QAAQ,SAAS;AAAA,IAC5B,YAAY,WAAW;AAAA,IACvB;AAAA,EACF,GAAG,QAAQ,YAAY,QAAQ,YAAY,QAAQ,yBAAyB;AAC9E;AACA,IAAM,gCAAN,MAAM,uCAAsC,WAAW;AAAA,EACrD,kBAAkB,SAAS;AACzB,WAAO,IAAI,eAAe,QAAQ,MAAM,IAAI,yBAAyB,CAAC;AAAA,EACxE;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,iBAAiB;AAAA,EAC1B;AACF;AACA,IAAM,2BAAN,MAAM,kCAAiC,WAAW;AAAA,EAChD,YAAY,YAAY,WAAW;AACjC,UAAM,UAAU;AAChB,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,kBAAkB,SAAS;AACzB,UAAM,eAAe;AAAA,MAA2B;AAAA,MAAM;AAAA;AAAA,MAAmB;AAAA,IAAI;AAC7E,UAAM,iBAAiB,KAAK,UAAU,IAAI,aAAW,UAAU,SAAS,YAAY,CAAC;AACrF,UAAMiC,cAAa,IAAI,6BAA6B,cAAc;AAClE,WAAO,IAAI,eAAe,QAAQ,MAAMA,WAAU;AAAA,EACpD;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,iBAAiB,6BAA4B,UAAU,KAAK,WAAW,MAAM,SAAS;AAAA,EAC/F;AACF;AACA,IAAM,4BAAN,MAAM,mCAAkC,WAAW;AAAA,EACjD,YAAY,YAAY,WAAW;AACjC,UAAM,UAAU;AAChB,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,kBAAkB,SAAS;AACzB,UAAM,eAAe;AAAA,MAA2B;AAAA,MAAM;AAAA;AAAA,MAAmB;AAAA,IAAI;AAC7E,UAAM,iBAAiB,KAAK,UAAU,IAAI,aAAW,UAAU,SAAS,YAAY,CAAC;AACrF,UAAMA,cAAa,IAAI,8BAA8B,cAAc;AACnE,WAAO,IAAI,eAAe,QAAQ,MAAMA,WAAU;AAAA,EACpD;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,iBAAiB,8BAA6B,UAAU,KAAK,WAAW,MAAM,SAAS;AAAA,EAChG;AACF;AACA,IAAM,iCAAN,MAAM,wCAAuC,WAAW;AAAA,EACtD,YAAY,YAAY,UAAU;AAChC,UAAM,UAAU;AAChB,SAAK,WAAW;AAAA,EAClB;AAAA,EACA,kBAAkB,SAAS;AACzB,UAAM,mBAAmB,IAAI,mCAAmC,QAAQ,YAAY,SAAS,QAAQ,YAAY,KAAK,QAAQ,CAAC;AAC/H,WAAO,IAAI,eAAe,QAAQ,MAAM,gBAAgB;AAAA,EAC1D;AAAA,EACA,QAAQ,OAAO;AACb,WAAO,iBAAiB,mCAAkC,KAAK,aAAa,MAAM;AAAA,EACpF;AACF;AAEA,SAAS,gBAAgB,gBAAgB,YAAY,WAAW,OAAO;AACrE,QAAM,UAAU,eAAe,cAAc,GAA+B,YAAY,SAAS;AACjG,sBAAoB,uCAAuC,SAAS,KAAK;AACzE,QAAM,iBAAiB,CAAC;AACxB,QAAM,aAAa,YAAY,MAAM;AACrC,UAAQ,OAAO,CAAC,KAAK,UAAU;AAC7B,UAAM,OAAO,gCAAgC,YAAY,KAAK,SAAS;AAGvE,YAAQ,mBAAmB,KAAK;AAChC,UAAM,eAAe,QAAQ,yBAAyB,IAAI;AAC1D,QAAI,iBAAiB,sBAAsB;AAEzC,qBAAe,KAAK,IAAI;AAAA,IAC1B,OAAO;AACL,YAAM,cAAc,UAAU,OAAO,YAAY;AACjD,UAAI,eAAe,MAAM;AACvB,uBAAe,KAAK,IAAI;AACxB,mBAAW,IAAI,MAAM,WAAW;AAAA,MAClC;AAAA,IACF;AAAA,EACF,CAAC;AACD,QAAM,OAAO,IAAI,UAAU,cAAc;AACzC,SAAO,IAAI,iBAAiB,YAAY,MAAM,QAAQ,eAAe;AACvE;AAEA,SAAS,mBAAmB,gBAAgB,YAAY,WAAW,OAAO,OAAO,qBAAqB;AACpG,QAAM,UAAU,eAAe,cAAc,GAA+B,YAAY,SAAS;AACjG,QAAM,OAAO,CAAC,wBAAwB,YAAY,OAAO,SAAS,CAAC;AACnE,QAAM,SAAS,CAAC,KAAK;AACrB,MAAI,oBAAoB,SAAS,MAAM,GAAG;AACxC,UAAM,IAAI,eAAe,KAAK,kBAAkB,YAAY,UAAU,uGAA4G;AAAA,EACpL;AACA,WAAS,IAAI,GAAG,IAAI,oBAAoB,QAAQ,KAAK,GAAG;AACtD,SAAK,KAAK,wBAAwB,YAAY,oBAAoB,CAAC,CAAC,CAAC;AACrE,WAAO,KAAK,oBAAoB,IAAI,CAAC,CAAC;AAAA,EACxC;AACA,QAAM,iBAAiB,CAAC;AACxB,QAAM,aAAa,YAAY,MAAM;AAGrC,WAAS,IAAI,KAAK,SAAS,GAAG,KAAK,GAAG,EAAE,GAAG;AACzC,QAAI,CAAC,kBAAkB,gBAAgB,KAAK,CAAC,CAAC,GAAG;AAC/C,YAAM,OAAO,KAAK,CAAC;AACnB,UAAIxC,SAAQ,OAAO,CAAC;AAGpB,MAAAA,SAAQ,mBAAmBA,MAAK;AAChC,YAAM,eAAe,QAAQ,yBAAyB,IAAI;AAC1D,UAAIA,kBAAiB,sBAAsB;AAEzC,uBAAe,KAAK,IAAI;AAAA,MAC1B,OAAO;AACL,cAAM,cAAc,UAAUA,QAAO,YAAY;AACjD,YAAI,eAAe,MAAM;AACvB,yBAAe,KAAK,IAAI;AACxB,qBAAW,IAAI,MAAM,WAAW;AAAA,QAClC;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,QAAM,OAAO,IAAI,UAAU,cAAc;AACzC,SAAO,IAAI,iBAAiB,YAAY,MAAM,QAAQ,eAAe;AACvE;AAQA,SAAS,gBAAgB,gBAAgB,YAAY,OAAO,cAAc,OAAO;AAC/E,QAAM,UAAU,eAAe,cAAc,cAAc,IAAuC,GAAiC,UAAU;AAC7I,QAAM,SAAS,UAAU,OAAO,OAAO;AACvC,SAAO;AACT;AAUA,SAAS,UAAU,OAAO,SAAS;AAGjC,UAAQ,mBAAmB,KAAK;AAChC,MAAI,oBAAoB,KAAK,GAAG;AAC9B,wBAAoB,4BAA4B,SAAS,KAAK;AAC9D,WAAO,YAAY,OAAO,OAAO;AAAA,EACnC,WAAW,iBAAiB,YAAY;AAMtC,4BAAwB,OAAO,OAAO;AACtC,WAAO;AAAA,EACT,WAAW,UAAU,UAAa,QAAQ,2BAA2B;AAInE,WAAO;AAAA,EACT,OAAO;AAGL,QAAI,QAAQ,MAAM;AAChB,cAAQ,UAAU,KAAK,QAAQ,IAAI;AAAA,IACrC;AACA,QAAI,iBAAiB,OAAO;AAO1B,UAAI,QAAQ,SAAS,gBAAgB,QAAQ,eAAe,GAAsC;AAChG,cAAM,QAAQ,YAAY,iCAAiC;AAAA,MAC7D;AACA,aAAO,WAAW,OAAO,OAAO;AAAA,IAClC,OAAO;AACL,aAAO,iBAAiB,OAAO,OAAO;AAAA,IACxC;AAAA,EACF;AACF;AACA,SAAS,YAAY,KAAK,SAAS;AACjC,QAAM,SAAS,CAAC;AAChB,MAAI,QAAQ,GAAG,GAAG;AAGhB,QAAI,QAAQ,QAAQ,QAAQ,KAAK,SAAS,GAAG;AAC3C,cAAQ,UAAU,KAAK,QAAQ,IAAI;AAAA,IACrC;AAAA,EACF,OAAO;AACL,YAAQ,KAAK,CAAC,KAAK,QAAQ;AACzB,YAAM,cAAc,UAAU,KAAK,QAAQ,qBAAqB,GAAG,CAAC;AACpE,UAAI,eAAe,MAAM;AACvB,eAAO,GAAG,IAAI;AAAA,MAChB;AAAA,IACF,CAAC;AAAA,EACH;AACA,SAAO;AAAA,IACL,UAAU;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;AACA,SAAS,WAAW,OAAO,SAAS;AAClC,QAAM,SAAS,CAAC;AAChB,MAAI,aAAa;AACjB,aAAW,SAAS,OAAO;AACzB,QAAI,cAAc,UAAU,OAAO,QAAQ,qBAAqB,UAAU,CAAC;AAC3E,QAAI,eAAe,MAAM;AAGvB,oBAAc;AAAA,QACZ,WAAW;AAAA,MACb;AAAA,IACF;AACA,WAAO,KAAK,WAAW;AACvB;AAAA,EACF;AACA,SAAO;AAAA,IACL,YAAY;AAAA,MACV;AAAA,IACF;AAAA,EACF;AACF;AAKA,SAAS,wBAAwB,OAAO,SAAS;AAE/C,MAAI,CAAC,QAAQ,QAAQ,UAAU,GAAG;AAChC,UAAM,QAAQ,YAAY,GAAG,MAAM,WAAW,6CAA6C;AAAA,EAC7F;AACA,MAAI,CAAC,QAAQ,MAAM;AACjB,UAAM,QAAQ,YAAY,GAAG,MAAM,WAAW,6CAA6C;AAAA,EAC7F;AACA,QAAM,iBAAiB,MAAM,kBAAkB,OAAO;AACtD,MAAI,gBAAgB;AAClB,YAAQ,gBAAgB,KAAK,cAAc;AAAA,EAC7C;AACF;AAMA,SAAS,iBAAiB,OAAO,SAAS;AACxC,UAAQ,mBAAmB,KAAK;AAChC,MAAI,UAAU,MAAM;AAClB,WAAO;AAAA,MACL,WAAW;AAAA,IACb;AAAA,EACF,WAAW,OAAO,UAAU,UAAU;AACpC,WAAO,SAAS,QAAQ,YAAY,KAAK;AAAA,EAC3C,WAAW,OAAO,UAAU,WAAW;AACrC,WAAO;AAAA,MACL,cAAc;AAAA,IAChB;AAAA,EACF,WAAW,OAAO,UAAU,UAAU;AACpC,WAAO;AAAA,MACL,aAAa;AAAA,IACf;AAAA,EACF,WAAW,iBAAiB,MAAM;AAChC,UAAM,YAAY,UAAU,SAAS,KAAK;AAC1C,WAAO;AAAA,MACL,gBAAgB,YAAY,QAAQ,YAAY,SAAS;AAAA,IAC3D;AAAA,EACF,WAAW,iBAAiB,WAAW;AAIrC,UAAM,YAAY,IAAI,UAAU,MAAM,SAAS,KAAK,MAAM,MAAM,cAAc,GAAI,IAAI,GAAI;AAC1F,WAAO;AAAA,MACL,gBAAgB,YAAY,QAAQ,YAAY,SAAS;AAAA,IAC3D;AAAA,EACF,WAAW,iBAAiB,UAAU;AACpC,WAAO;AAAA,MACL,eAAe;AAAA,QACb,UAAU,MAAM;AAAA,QAChB,WAAW,MAAM;AAAA,MACnB;AAAA,IACF;AAAA,EACF,WAAW,iBAAiB,OAAO;AACjC,WAAO;AAAA,MACL,YAAY,QAAQ,QAAQ,YAAY,MAAM,WAAW;AAAA,IAC3D;AAAA,EACF,WAAW,iBAAiB,mBAAmB;AAC7C,UAAM,SAAS,QAAQ;AACvB,UAAM,UAAU,MAAM,UAAU;AAChC,QAAI,CAAC,QAAQ,QAAQ,MAAM,GAAG;AAC5B,YAAM,QAAQ,YAAY,sCAA2C,QAAQ,SAAS,IAAI,QAAQ,QAAQ,+BAAoC,OAAO,SAAS,IAAI,OAAO,QAAQ,EAAE;AAAA,IACrL;AACA,WAAO;AAAA,MACL,gBAAgB,eAAe,MAAM,UAAU,eAAe,QAAQ,YAAY,MAAM,KAAK,IAAI;AAAA,IACnG;AAAA,EACF,WAAW,iBAAiB,aAAa;AACvC,WAAO,iBAAiB,OAAO,OAAO;AAAA,EACxC,OAAO;AACL,UAAM,QAAQ,YAAY,4BAA4B,iBAAiB,KAAK,CAAC,EAAE;AAAA,EACjF;AACF;AAIA,SAAS,iBAAiB,OAAO,SAAS;AACxC,QAAM,WAAW;AAAA,IACf,QAAQ;AAAA,MACN,CAAC,QAAQ,GAAG;AAAA,QACV,aAAa;AAAA,MACf;AAAA,MACA,CAAC,sBAAsB,GAAG;AAAA,QACxB,YAAY;AAAA,UACV,QAAQ,MAAM,QAAQ,EAAE,IAAI,CAAAA,WAAS;AACnC,gBAAI,OAAOA,WAAU,UAAU;AAC7B,oBAAM,QAAQ,YAAY,gDAAgD;AAAA,YAC5E;AACA,mBAAO,SAAS,QAAQ,YAAYA,MAAK;AAAA,UAC3C,CAAC;AAAA,QACH;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACA,SAAO;AAAA,IACL;AAAA,EACF;AACF;AAQA,SAAS,oBAAoB,OAAO;AAClC,SAAO,OAAO,UAAU,YAAY,UAAU,QAAQ,EAAE,iBAAiB,UAAU,EAAE,iBAAiB,SAAS,EAAE,iBAAiB,cAAc,EAAE,iBAAiB,aAAa,EAAE,iBAAiB,UAAU,EAAE,iBAAiB,sBAAsB,EAAE,iBAAiB,eAAe,EAAE,iBAAiB;AAC7S;AACA,SAAS,oBAAoB,SAAS,SAAS,OAAO;AACpD,MAAI,CAAC,oBAAoB,KAAK,KAAK,CAAC,cAAc,KAAK,GAAG;AACxD,UAAM,cAAc,iBAAiB,KAAK;AAC1C,QAAI,gBAAgB,aAAa;AAE/B,YAAM,QAAQ,YAAY,UAAU,kBAAkB;AAAA,IACxD,OAAO;AACL,YAAM,QAAQ,YAAY,UAAU,MAAM,WAAW;AAAA,IACvD;AAAA,EACF;AACF;AAIA,SAAS,wBAAwB,YAAY,MAAM,WAAW;AAG5D,SAAO,mBAAmB,IAAI;AAC9B,MAAI,gBAAgB,WAAW;AAC7B,WAAO,KAAK;AAAA,EACd,WAAW,OAAO,SAAS,UAAU;AACnC,WAAO,gCAAgC,YAAY,IAAI;AAAA,EACzD,OAAO;AACL,UAAM,UAAU;AAChB,UAAM;AAAA,MAAY;AAAA,MAAS;AAAA;AAAA,MAA+B;AAAA;AAAA,MAAkB;AAAA,MAAW;AAAA,IAAS;AAAA,EAClG;AACF;AAIA,IAAM,sBAAsB,IAAI,OAAO,eAAe;AAUtD,SAAS,gCAAgC,YAAY,MAAM,WAAW;AACpE,QAAM,QAAQ,KAAK,OAAO,mBAAmB;AAC7C,MAAI,SAAS,GAAG;AACd,UAAM;AAAA,MAAY,uBAAuB,IAAI;AAAA,MAA6D;AAAA;AAAA,MAA+B;AAAA;AAAA,MAAkB;AAAA,MAAW;AAAA,IAAS;AAAA,EACjL;AACA,MAAI;AACF,WAAO,IAAI,UAAU,GAAG,KAAK,MAAM,GAAG,CAAC,EAAE;AAAA,EAC3C,SAAS,GAAG;AACV,UAAM;AAAA,MAAY,uBAAuB,IAAI;AAAA,MAAkF;AAAA;AAAA,MAA+B;AAAA;AAAA,MAAkB;AAAA,MAAW;AAAA,IAAS;AAAA,EACtM;AACF;AACA,SAAS,YAAY,QAAQ,YAAY,cAAc,MAAM,WAAW;AACtE,QAAM,UAAU,QAAQ,CAAC,KAAK,QAAQ;AACtC,QAAM,cAAc,cAAc;AAClC,MAAI,UAAU,YAAY,UAAU;AACpC,MAAI,cAAc;AAChB,eAAW;AAAA,EACb;AACA,aAAW;AACX,MAAI,cAAc;AAClB,MAAI,WAAW,aAAa;AAC1B,mBAAe;AACf,QAAI,SAAS;AACX,qBAAe,aAAa,IAAI;AAAA,IAClC;AACA,QAAI,aAAa;AACf,qBAAe,gBAAgB,SAAS;AAAA,IAC1C;AACA,mBAAe;AAAA,EACjB;AACA,SAAO,IAAI,eAAe,KAAK,kBAAkB,UAAU,SAAS,WAAW;AACjF;AAEA,SAAS,kBAAkB,UAAU,QAAQ;AAC3C,SAAO,SAAS,KAAK,OAAK,EAAE,QAAQ,MAAM,CAAC;AAC7C;AA2BA,IAAM,qBAAN,MAAyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMvB,YAAY,YAAY,iBAAiB,MAAM,WAAW,YAAY;AACpE,SAAK,aAAa;AAClB,SAAK,kBAAkB;AACvB,SAAK,OAAO;AACZ,SAAK,YAAY;AACjB,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA,EAEA,IAAI,KAAK;AACP,WAAO,KAAK,KAAK,KAAK,YAAY;AAAA,EACpC;AAAA;AAAA;AAAA;AAAA,EAIA,IAAI,MAAM;AACR,WAAO,IAAI,kBAAkB,KAAK,YAAY,KAAK,YAAY,KAAK,IAAI;AAAA,EAC1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,SAAS;AACP,WAAO,KAAK,cAAc;AAAA,EAC5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,OAAO;AACL,QAAI,CAAC,KAAK,WAAW;AACnB,aAAO;AAAA,IACT,WAAW,KAAK,YAAY;AAG1B,YAAM,WAAW,IAAI;AAAA,QAAwB,KAAK;AAAA,QAAY,KAAK;AAAA,QAAiB,KAAK;AAAA,QAAM,KAAK;AAAA;AAAA,QAA2B;AAAA,MAAI;AACnI,aAAO,KAAK,WAAW,cAAc,QAAQ;AAAA,IAC/C,OAAO;AACL,aAAO,KAAK,gBAAgB,aAAa,KAAK,UAAU,KAAK,KAAK;AAAA,IACpE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,IAAI,WAAW;AACb,QAAI,KAAK,WAAW;AAClB,YAAM,QAAQ,KAAK,UAAU,KAAK,MAAM,sBAAsB,wBAAwB,SAAS,CAAC;AAChG,UAAI,UAAU,MAAM;AAClB,eAAO,KAAK,gBAAgB,aAAa,KAAK;AAAA,MAChD;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAYA,IAAM,0BAAN,cAAsC,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOvD,OAAO;AACL,WAAO,MAAM,KAAK;AAAA,EACpB;AACF;AAIA,SAAS,sBAAsB,YAAY,KAAK;AAC9C,MAAI,OAAO,QAAQ,UAAU;AAC3B,WAAO,gCAAgC,YAAY,GAAG;AAAA,EACxD,WAAW,eAAe,WAAW;AACnC,WAAO,IAAI;AAAA,EACb,OAAO;AACL,WAAO,IAAI,UAAU;AAAA,EACvB;AACF;AAkBA,SAAS,yCAAyCO,QAAO;AACvD,MAAIA,OAAM,cAAc,OAA4BA,OAAM,gBAAgB,WAAW,GAAG;AACtF,UAAM,IAAI,eAAe,KAAK,eAAe,wEAAwE;AAAA,EACvH;AACF;AAKA,IAAM,sBAAN,MAA0B;AAAC;AAS3B,IAAM,kBAAN,cAA8B,oBAAoB;AAAC;AACnD,SAAS,MAAMA,QAAO,oBAAoB,4BAA4B;AACpE,MAAI,mBAAmB,CAAC;AACxB,MAAI,2BAA2B,qBAAqB;AAClD,qBAAiB,KAAK,eAAe;AAAA,EACvC;AACA,qBAAmB,iBAAiB,OAAO,0BAA0B;AACrE,+BAA6B,gBAAgB;AAC7C,aAAW,cAAc,kBAAkB;AACzC,IAAAA,SAAQ,WAAW,OAAOA,MAAK;AAAA,EACjC;AACA,SAAOA;AACT;AAQA,IAAM,6BAAN,MAAM,oCAAmC,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIvD,YAAY,QAAQ,KAAK,QAAQ;AAC/B,UAAM;AACN,SAAK,SAAS;AACd,SAAK,MAAM;AACX,SAAK,SAAS;AAEd,SAAK,OAAO;AAAA,EACd;AAAA,EACA,OAAO,QAAQ,QAAQ,KAAK,QAAQ;AAClC,WAAO,IAAI,4BAA2B,QAAQ,KAAK,MAAM;AAAA,EAC3D;AAAA,EACA,OAAOA,QAAO;AACZ,UAAM,SAAS,KAAK,OAAOA,MAAK;AAChC,2BAAuBA,OAAM,QAAQ,MAAM;AAC3C,WAAO,IAAI,MAAMA,OAAM,WAAWA,OAAM,WAAW,qBAAqBA,OAAM,QAAQ,MAAM,CAAC;AAAA,EAC/F;AAAA,EACA,OAAOA,QAAO;AACZ,UAAM,SAAS,kBAAkBA,OAAM,SAAS;AAChD,UAAM,SAAS,eAAeA,OAAM,QAAQ,SAAS,QAAQA,OAAM,UAAU,aAAa,KAAK,QAAQ,KAAK,KAAK,KAAK,MAAM;AAC5H,WAAO;AAAA,EACT;AACF;AAYA,SAAS,MAAM,WAAW,OAAO,OAAO;AACtC,QAAM,KAAK;AACX,QAAM,QAAQ,sBAAsB,SAAS,SAAS;AACtD,SAAO,2BAA2B,QAAQ,OAAO,IAAI,KAAK;AAC5D;AASA,IAAM,iCAAN,MAAM,wCAAuC,oBAAoB;AAAA;AAAA;AAAA;AAAA,EAI/D,YACA,MAAM,mBAAmB;AACvB,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,oBAAoB;AAAA,EAC3B;AAAA,EACA,OAAO,QAAQ,MAAM,mBAAmB;AACtC,WAAO,IAAI,gCAA+B,MAAM,iBAAiB;AAAA,EACnE;AAAA,EACA,OAAOA,QAAO;AACZ,UAAM,gBAAgB,KAAK,kBAAkB,IAAI,qBAAmB;AAClE,aAAO,gBAAgB,OAAOA,MAAK;AAAA,IACrC,CAAC,EAAE,OAAO,kBAAgB,aAAa,WAAW,EAAE,SAAS,CAAC;AAC9D,QAAI,cAAc,WAAW,GAAG;AAC9B,aAAO,cAAc,CAAC;AAAA,IACxB;AACA,WAAO,gBAAgB,OAAO,eAAe,KAAK,aAAa,CAAC;AAAA,EAClE;AAAA,EACA,OAAOA,QAAO;AACZ,UAAM,eAAe,KAAK,OAAOA,MAAK;AACtC,QAAI,aAAa,WAAW,EAAE,WAAW,GAAG;AAG1C,aAAOA;AAAA,IACT;AACA,sBAAkBA,OAAM,QAAQ,YAAY;AAC5C,WAAO,IAAI,MAAMA,OAAM,WAAWA,OAAM,WAAW,qBAAqBA,OAAM,QAAQ,YAAY,CAAC;AAAA,EACrG;AAAA,EACA,uBAAuB;AACrB,WAAO,KAAK;AAAA,EACd;AAAA,EACA,eAAe;AACb,WAAO,KAAK,SAAS,QAAQ,QAAoC;AAAA,EACnE;AACF;AAWA,SAAS,MAAM,kBAAkB;AAE/B,mBAAiB,QAAQ,qBAAmB,8BAA8B,MAAM,eAAe,CAAC;AAChG,SAAO,+BAA+B,QAAQ,MAAiC,gBAAgB;AACjG;AAWA,SAAS,OAAO,kBAAkB;AAEhC,mBAAiB,QAAQ,qBAAmB,8BAA8B,OAAO,eAAe,CAAC;AACjG,SAAO,+BAA+B,QAAQ,OAAmC,gBAAgB;AACnG;AAUA,IAAM,yBAAN,MAAM,gCAA+B,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAInD,YAAY,QAAQ,YAAY;AAC9B,UAAM;AACN,SAAK,SAAS;AACd,SAAK,aAAa;AAElB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,OAAO,QAAQ,QAAQ,YAAY;AACjC,WAAO,IAAI,wBAAuB,QAAQ,UAAU;AAAA,EACtD;AAAA,EACA,OAAOA,QAAO;AACZ,UAAMN,WAAU,gBAAgBM,OAAM,QAAQ,KAAK,QAAQ,KAAK,UAAU;AAC1E,WAAO,IAAI,MAAMA,OAAM,WAAWA,OAAM,WAAW,sBAAsBA,OAAM,QAAQN,QAAO,CAAC;AAAA,EACjG;AACF;AAaA,SAAS,QAAQ,WAAW,eAAe,OAAO;AAChD,QAAM,YAAY;AAClB,QAAM,OAAO,sBAAsB,WAAW,SAAS;AACvD,SAAO,uBAAuB,QAAQ,MAAM,SAAS;AACvD;AAQA,IAAM,uBAAN,MAAM,8BAA6B,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIjD,YACA,MAAM,QAAQ,YAAY;AACxB,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,SAAS;AACd,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,OAAO,QAAQ,MAAM,QAAQ,YAAY;AACvC,WAAO,IAAI,sBAAqB,MAAM,QAAQ,UAAU;AAAA,EAC1D;AAAA,EACA,OAAOM,QAAO;AACZ,WAAO,IAAI,MAAMA,OAAM,WAAWA,OAAM,WAAW,eAAeA,OAAM,QAAQ,KAAK,QAAQ,KAAK,UAAU,CAAC;AAAA,EAC/G;AACF;AAQA,SAAS,MAAMH,QAAO;AACpB,yBAAuB,SAASA,MAAK;AACrC,SAAO,qBAAqB;AAAA,IAAQ;AAAA,IAASA;AAAA,IAAO;AAAA;AAAA,EAAyB;AAC/E;AAWA,SAAS,YAAYA,QAAO;AAC1B,yBAAuB,eAAeA,MAAK;AAC3C,SAAO,qBAAqB;AAAA,IAAQ;AAAA,IAAeA;AAAA,IAAO;AAAA;AAAA,EAAwB;AACpF;AAQA,IAAM,yBAAN,MAAM,gCAA+B,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAInD,YACA,MAAM,cAAc,YAAY;AAC9B,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,eAAe;AACpB,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,OAAO,QAAQ,MAAM,cAAc,YAAY;AAC7C,WAAO,IAAI,wBAAuB,MAAM,cAAc,UAAU;AAAA,EAClE;AAAA,EACA,OAAOG,QAAO;AACZ,UAAM,QAAQ,6BAA6BA,QAAO,KAAK,MAAM,KAAK,cAAc,KAAK,UAAU;AAC/F,WAAO,IAAI,MAAMA,OAAM,WAAWA,OAAM,WAAW,iBAAiBA,OAAM,QAAQ,KAAK,CAAC;AAAA,EAC1F;AACF;AACA,SAAS,WAAW,aAAa;AAC/B,SAAO,uBAAuB;AAAA,IAAQ;AAAA,IAAW;AAAA;AAAA,IAA2B;AAAA,EAAI;AAClF;AACA,SAAS,cAAc,aAAa;AAClC,SAAO,uBAAuB;AAAA,IAAQ;AAAA,IAAc;AAAA;AAAA,IAA2B;AAAA,EAAK;AACtF;AAQA,IAAM,uBAAN,MAAM,8BAA6B,gBAAgB;AAAA;AAAA;AAAA;AAAA,EAIjD,YACA,MAAM,cAAc,YAAY;AAC9B,UAAM;AACN,SAAK,OAAO;AACZ,SAAK,eAAe;AACpB,SAAK,aAAa;AAAA,EACpB;AAAA,EACA,OAAO,QAAQ,MAAM,cAAc,YAAY;AAC7C,WAAO,IAAI,sBAAqB,MAAM,cAAc,UAAU;AAAA,EAChE;AAAA,EACA,OAAOA,QAAO;AACZ,UAAM,QAAQ,6BAA6BA,QAAO,KAAK,MAAM,KAAK,cAAc,KAAK,UAAU;AAC/F,WAAO,IAAI,MAAMA,OAAM,WAAWA,OAAM,WAAW,eAAeA,OAAM,QAAQ,KAAK,CAAC;AAAA,EACxF;AACF;AACA,SAAS,aAAa,aAAa;AACjC,SAAO,qBAAqB;AAAA,IAAQ;AAAA,IAAa;AAAA;AAAA,IAA2B;AAAA,EAAK;AACnF;AACA,SAAS,SAAS,aAAa;AAC7B,SAAO,qBAAqB;AAAA,IAAQ;AAAA,IAAS;AAAA;AAAA,IAA2B;AAAA,EAAI;AAC9E;AAEA,SAAS,6BAA6BA,QAAO,YAAY,aAAa,WAAW;AAC/E,cAAY,CAAC,IAAI,mBAAmB,YAAY,CAAC,CAAC;AAClD,MAAI,YAAY,CAAC,aAAa,oBAAoB;AAChD,WAAO,0BAA0BA,OAAM,QAAQA,OAAM,UAAU,aAAa,YAAY,YAAY,CAAC,EAAE,WAAW,SAAS;AAAA,EAC7H,OAAO;AACL,UAAM,SAAS,kBAAkBA,OAAM,SAAS;AAChD,WAAO,wBAAwBA,OAAM,QAAQA,OAAM,UAAU,aAAa,QAAQ,YAAY,aAAa,SAAS;AAAA,EACtH;AACF;AACA,SAAS,eAAeA,QAAO,YAAY,YAAY,YAAY,WAAW,IAAI,OAAO;AACvF,MAAI;AACJ,MAAI,UAAU,WAAW,GAAG;AAC1B,QAAI,OAAO,oBAAkD,OAAO,sBAAwD;AAC1H,YAAM,IAAI,eAAe,KAAK,kBAAkB,qCAAqC,EAAE,4BAA4B;AAAA,IACrH,WAAW,OAAO,QAA0B,OAAO,UAAgC;AACjF,wCAAkC,OAAO,EAAE;AAC3C,YAAM,gBAAgB,CAAC;AACvB,iBAAW,cAAc,OAAO;AAC9B,sBAAc,KAAK,qBAAqB,YAAYA,QAAO,UAAU,CAAC;AAAA,MACxE;AACA,mBAAa;AAAA,QACX,YAAY;AAAA,UACV,QAAQ;AAAA,QACV;AAAA,MACF;AAAA,IACF,OAAO;AACL,mBAAa,qBAAqB,YAAYA,QAAO,KAAK;AAAA,IAC5D;AAAA,EACF,OAAO;AACL,QAAI,OAAO,QAA0B,OAAO,YAAkC,OAAO,sBAAwD;AAC3I,wCAAkC,OAAO,EAAE;AAAA,IAC7C;AACA,iBAAa;AAAA,MAAgB;AAAA,MAAY;AAAA,MAAY;AAAA;AAAA,MAAyB,OAAO,QAA0B,OAAO;AAAA;AAAA,IAA8B;AAAA,EACtJ;AACA,QAAM,SAAS,YAAY,OAAO,WAAW,IAAI,UAAU;AAC3D,SAAO;AACT;AACA,SAAS,gBAAgBA,QAAO,WAAW,WAAW;AACpD,MAAIA,OAAM,YAAY,MAAM;AAC1B,UAAM,IAAI,eAAe,KAAK,kBAAkB,sFAA2F;AAAA,EAC7I;AACA,MAAIA,OAAM,UAAU,MAAM;AACxB,UAAM,IAAI,eAAe,KAAK,kBAAkB,mFAAwF;AAAA,EAC1I;AACA,QAAMN,WAAU,IAAI,QAAQ,WAAW,SAAS;AAChD,SAAOA;AACT;AAYA,SAAS,0BAA0BM,QAAO,YAAY,YAAYL,MAAK,WAAW;AAChF,MAAI,CAACA,MAAK;AACR,UAAM,IAAI,eAAe,KAAK,WAAW,uDAA4D,UAAU,KAAK;AAAA,EACtH;AACA,QAAM,aAAa,CAAC;AAQpB,aAAWD,YAAW,uBAAuBM,MAAK,GAAG;AACnD,QAAIN,SAAQ,MAAM,WAAW,GAAG;AAC9B,iBAAW,KAAK,SAAS,YAAYC,KAAI,GAAG,CAAC;AAAA,IAC/C,OAAO;AACL,YAAM,QAAQA,KAAI,KAAK,MAAMD,SAAQ,KAAK;AAC1C,UAAI,kBAAkB,KAAK,GAAG;AAC5B,cAAM,IAAI,eAAe,KAAK,kBAAkB,iGAAsGA,SAAQ,QAAQ,yHAA8H;AAAA,MACtS,WAAW,UAAU,MAAM;AACzB,mBAAW,KAAK,KAAK;AAAA,MACvB,OAAO;AACL,cAAM,QAAQA,SAAQ,MAAM,gBAAgB;AAC5C,cAAM,IAAI,eAAe,KAAK,kBAAkB,+FAAoG,KAAK,yCAA8C;AAAA,MACzM;AAAA,IACF;AAAA,EACF;AACA,SAAO,IAAI,MAAM,YAAY,SAAS;AACxC;AAIA,SAAS,wBAAwBM,QAAO,YAAY,YAAY,YAAY,QAAQ,WAAW;AAE7F,QAAMN,WAAUM,OAAM;AACtB,MAAI,OAAO,SAASN,SAAQ,QAAQ;AAClC,UAAM,IAAI,eAAe,KAAK,kBAAkB,kCAAkC,UAAU,2FAAqG;AAAA,EACnM;AACA,QAAM,aAAa,CAAC;AACpB,WAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACtC,UAAM,WAAW,OAAO,CAAC;AACzB,UAAM,mBAAmBA,SAAQ,CAAC;AAClC,QAAI,iBAAiB,MAAM,WAAW,GAAG;AACvC,UAAI,OAAO,aAAa,UAAU;AAChC,cAAM,IAAI,eAAe,KAAK,kBAAkB,uDAA4D,UAAU,iBAAiB,OAAO,QAAQ,EAAE;AAAA,MAC1J;AACA,UAAI,CAAC,uBAAuBM,MAAK,KAAK,SAAS,QAAQ,GAAG,MAAM,IAAI;AAClE,cAAM,IAAI,eAAe,KAAK,kBAAkB,+FAAoG,UAAU,wCAA6C,QAAQ,qBAAqB;AAAA,MAC1O;AACA,YAAM,OAAOA,OAAM,KAAK,MAAM,aAAa,WAAW,QAAQ,CAAC;AAC/D,UAAI,CAAC,YAAY,cAAc,IAAI,GAAG;AACpC,cAAM,IAAI,eAAe,KAAK,kBAAkB,qGAA0G,UAAU,iDAAsD,IAAI,yDAA8D;AAAA,MAC9R;AACA,YAAM,MAAM,IAAI,YAAY,IAAI;AAChC,iBAAW,KAAK,SAAS,YAAY,GAAG,CAAC;AAAA,IAC3C,OAAO;AACL,YAAM,UAAU,gBAAgB,YAAY,YAAY,QAAQ;AAChE,iBAAW,KAAK,OAAO;AAAA,IACzB;AAAA,EACF;AACA,SAAO,IAAI,MAAM,YAAY,SAAS;AACxC;AAMA,SAAS,qBAAqB,YAAYA,QAAO,iBAAiB;AAChE,oBAAkB,mBAAmB,eAAe;AACpD,MAAI,OAAO,oBAAoB,UAAU;AACvC,QAAI,oBAAoB,IAAI;AAC1B,YAAM,IAAI,eAAe,KAAK,kBAAkB,mHAAwH;AAAA,IAC1K;AACA,QAAI,CAAC,uBAAuBA,MAAK,KAAK,gBAAgB,QAAQ,GAAG,MAAM,IAAI;AACzE,YAAM,IAAI,eAAe,KAAK,kBAAkB,yGAAmH,eAAe,6BAA6B;AAAA,IACjN;AACA,UAAM,OAAOA,OAAM,KAAK,MAAM,aAAa,WAAW,eAAe,CAAC;AACtE,QAAI,CAAC,YAAY,cAAc,IAAI,GAAG;AACpC,YAAM,IAAI,eAAe,KAAK,kBAAkB,kIAA4I,IAAI,sDAAsD,KAAK,MAAM,IAAI;AAAA,IACvQ;AACA,WAAO,SAAS,YAAY,IAAI,YAAY,IAAI,CAAC;AAAA,EACnD,WAAW,2BAA2B,mBAAmB;AACvD,WAAO,SAAS,YAAY,gBAAgB,IAAI;AAAA,EAClD,OAAO;AACL,UAAM,IAAI,eAAe,KAAK,kBAAkB,uHAAiI,iBAAiB,eAAe,CAAC,GAAG;AAAA,EACvN;AACF;AAKA,SAAS,kCAAkC,OAAO,UAAU;AAC1D,MAAI,CAAC,MAAM,QAAQ,KAAK,KAAK,MAAM,WAAW,GAAG;AAC/C,UAAM,IAAI,eAAe,KAAK,kBAAkB,qDAA0D,SAAS,SAAS,CAAC,YAAY;AAAA,EAC3I;AACF;AAWA,SAAS,eAAe,IAAI;AAC1B,UAAQ,IAAI;AAAA,IACV,KAAK;AACH,aAAO;AAAA,QAAC;AAAA,QAA+B;AAAA;AAAA,MAA8B;AAAA,IACvE,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,QAAC;AAAA;AAAA,MAA8B;AAAA,IACxC,KAAK;AACH,aAAO;AAAA,QAAC;AAAA,QAAwD;AAAA,QAAwB;AAAA,QAAgC;AAAA;AAAA,MAA6B;AAAA,IACvJ;AACE,aAAO,CAAC;AAAA,EACZ;AACF;AACA,SAAS,uBAAuBA,QAAO,aAAa;AAClD,QAAM,gBAAgB,oBAAoBA,OAAM,SAAS,eAAe,YAAY,EAAE,CAAC;AACvF,MAAI,kBAAkB,MAAM;AAE1B,QAAI,kBAAkB,YAAY,IAAI;AACpC,YAAM,IAAI,eAAe,KAAK,kBAAkB,gDAAqD,YAAY,GAAG,SAAS,CAAC,WAAW;AAAA,IAC3I,OAAO;AACL,YAAM,IAAI,eAAe,KAAK,kBAAkB,kCAAkC,YAAY,GAAG,SAAS,CAAC,mBAAwB,cAAc,SAAS,CAAC,YAAY;AAAA,IACzK;AAAA,EACF;AACF;AACA,SAAS,kBAAkBA,QAAO,QAAQ;AACxC,MAAI,YAAYA;AAChB,QAAM,aAAa,OAAO,oBAAoB;AAC9C,aAAW,aAAa,YAAY;AAClC,2BAAuB,WAAW,SAAS;AAC3C,gBAAY,qBAAqB,WAAW,SAAS;AAAA,EACvD;AACF;AAGA,SAAS,oBAAoB,SAAS,WAAW;AAC/C,aAAW,UAAU,SAAS;AAC5B,eAAW,eAAe,OAAO,oBAAoB,GAAG;AACtD,UAAI,UAAU,QAAQ,YAAY,EAAE,KAAK,GAAG;AAC1C,eAAO,YAAY;AAAA,MACrB;AAAA,IACF;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,8BAA8B,cAAc,iBAAiB;AACpE,MAAI,EAAE,2BAA2B,+BAA+B,EAAE,2BAA2B,iCAAiC;AAC5H,UAAM,IAAI,eAAe,KAAK,kBAAkB,YAAY,YAAY,iGAAiG;AAAA,EAC3K;AACF;AACA,SAAS,6BAA6B,iBAAiB;AACrD,QAAM,uBAAuB,gBAAgB,OAAO,YAAU,kBAAkB,8BAA8B,EAAE;AAChH,QAAM,mBAAmB,gBAAgB,OAAO,YAAU,kBAAkB,0BAA0B,EAAE;AACxG,MAAI,uBAAuB,KAAK,uBAAuB,KAAK,mBAAmB,GAAG;AAChF,UAAM,IAAI,eAAe,KAAK,kBAAkB,8QAAkS;AAAA,EACpV;AACF;AAwBA,IAAM,yBAAN,MAA6B;AAAA,EAC3B,aAAa,OAAO,0BAA0B,QAAQ;AACpD,YAAQ,UAAU,KAAK,GAAG;AAAA,MACxB,KAAK;AACH,eAAO;AAAA,MACT,KAAK;AACH,eAAO,MAAM;AAAA,MACf,KAAK;AACH,eAAO,gBAAgB,MAAM,gBAAgB,MAAM,WAAW;AAAA,MAChE,KAAK;AACH,eAAO,KAAK,iBAAiB,MAAM,cAAc;AAAA,MACnD,KAAK;AACH,eAAO,KAAK,uBAAuB,OAAO,uBAAuB;AAAA,MACnE,KAAK;AACH,eAAO,MAAM;AAAA,MACf,KAAK;AACH,eAAO,KAAK,aAAa,oBAAoB,MAAM,UAAU,CAAC;AAAA,MAChE,KAAK;AACH,eAAO,KAAK,iBAAiB,MAAM,cAAc;AAAA,MACnD,KAAK;AACH,eAAO,KAAK,gBAAgB,MAAM,aAAa;AAAA,MACjD,KAAK;AACH,eAAO,KAAK,aAAa,MAAM,YAAY,uBAAuB;AAAA,MACpE,KAAK;AACH,eAAO,KAAK,cAAc,MAAM,UAAU,uBAAuB;AAAA,MACnE,KAAK;AACH,eAAO,KAAK,mBAAmB,MAAM,QAAQ;AAAA,MAC/C;AACE,cAAM,KAAK;AAAA,IACf;AAAA,EACF;AAAA,EACA,cAAc,UAAU,yBAAyB;AAC/C,WAAO,KAAK,iBAAiB,SAAS,QAAQ,uBAAuB;AAAA,EACvE;AAAA;AAAA;AAAA;AAAA,EAIA,iBAAiB,QAAQ,0BAA0B,QAAQ;AACzD,UAAM,SAAS,CAAC;AAChB,YAAQ,QAAQ,CAAC,KAAK,UAAU;AAC9B,aAAO,GAAG,IAAI,KAAK,aAAa,OAAO,uBAAuB;AAAA,IAChE,CAAC;AACD,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAIA,mBAAmB,UAAU;AAC3B,QAAI,IAAI,IAAI;AACZ,UAAM,UAAU,MAAM,MAAM,KAAK,SAAS,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,sBAAsB,EAAE,gBAAgB,QAAQ,OAAO,SAAS,SAAS,GAAG,YAAY,QAAQ,OAAO,SAAS,SAAS,GAAG,IAAI,WAAS;AACjO,aAAO,gBAAgB,MAAM,WAAW;AAAA,IAC1C,CAAC;AACD,WAAO,IAAI,YAAY,MAAM;AAAA,EAC/B;AAAA,EACA,gBAAgB,OAAO;AACrB,WAAO,IAAI,SAAS,gBAAgB,MAAM,QAAQ,GAAG,gBAAgB,MAAM,SAAS,CAAC;AAAA,EACvF;AAAA,EACA,aAAa,YAAY,yBAAyB;AAChD,YAAQ,WAAW,UAAU,CAAC,GAAG,IAAI,WAAS,KAAK,aAAa,OAAO,uBAAuB,CAAC;AAAA,EACjG;AAAA,EACA,uBAAuB,OAAO,yBAAyB;AACrD,YAAQ,yBAAyB;AAAA,MAC/B,KAAK;AACH,cAAM,gBAAgB,iBAAiB,KAAK;AAC5C,YAAI,iBAAiB,MAAM;AACzB,iBAAO;AAAA,QACT;AACA,eAAO,KAAK,aAAa,eAAe,uBAAuB;AAAA,MACjE,KAAK;AACH,eAAO,KAAK,iBAAiB,kBAAkB,KAAK,CAAC;AAAA,MACvD;AACE,eAAO;AAAA,IACX;AAAA,EACF;AAAA,EACA,iBAAiB,OAAO;AACtB,UAAM,kBAAkB,mBAAmB,KAAK;AAChD,WAAO,IAAI,UAAU,gBAAgB,SAAS,gBAAgB,KAAK;AAAA,EACrE;AAAA,EACA,mBAAmBb,OAAM,oBAAoB;AAC3C,UAAM,eAAe,aAAa,WAAWA,KAAI;AACjD,eAAW,oBAAoB,YAAY,CAAC;AAC5C,UAAM,aAAa,IAAI,WAAW,aAAa,IAAI,CAAC,GAAG,aAAa,IAAI,CAAC,CAAC;AAC1E,UAAM,MAAM,IAAI,YAAY,aAAa,SAAS,CAAC,CAAC;AACpD,QAAI,CAAC,WAAW,QAAQ,kBAAkB,GAAG;AAE3C,eAAS,YAAY,GAAG,+DAAyE,WAAW,SAAS,IAAI,WAAW,QAAQ,wFAAkG,mBAAmB,SAAS,IAAI,mBAAmB,QAAQ,YAAiB;AAAA,IAC5T;AACA,WAAO;AAAA,EACT;AACF;AA2BA,SAAS,4BAA4B,WAAW,OAAO,SAAS;AAC9D,MAAI;AACJ,MAAI,WAAW;AACb,QAAI,YAAY,QAAQ,SAAS,QAAQ,cAAc;AAIrD,uBAAiB,UAAU,YAAY,OAAO,OAAO;AAAA,IACvD,OAAO;AACL,uBAAiB,UAAU,YAAY,KAAK;AAAA,IAC9C;AAAA,EACF,OAAO;AACL,qBAAiB;AAAA,EACnB;AACA,SAAO;AACT;AACA,IAAM,qBAAN,cAAiC,uBAAuB;AAAA,EACtD,YAAY,WAAW;AACrB,UAAM;AACN,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,aAAa,OAAO;AAClB,WAAO,IAAI,MAAM,KAAK;AAAA,EACxB;AAAA,EACA,iBAAiBA,OAAM;AACrB,UAAM,MAAM,KAAK,mBAAmBA,OAAM,KAAK,UAAU,WAAW;AACpE,WAAO,IAAI;AAAA,MAAkB,KAAK;AAAA;AAAA,MAA2B;AAAA,MAAM;AAAA,IAAG;AAAA,EACxE;AACF;AAuBA,SAAS,IAAI,OAAO;AAClB,SAAO,IAAI,eAAe,OAAO,wBAAwB,OAAO,KAAK,CAAC;AACxE;AAMA,SAAS,QAAQ,OAAO;AACtB,SAAO,IAAI,eAAe,OAAO,wBAAwB,WAAW,KAAK,CAAC;AAC5E;AAKA,SAAS,QAAQ;AACf,SAAO,IAAI,eAAe,OAAO;AACnC;AAOA,SAAS,oBAAoB,MAAM,OAAO;AACxC,MAAI,IAAI;AACR,SAAO,gBAAgB,kBAAkB,iBAAiB,kBAAkB,KAAK,kBAAkB,MAAM,mBAAmB,KAAK,KAAK,wBAAwB,QAAQ,OAAO,SAAS,SAAS,GAAG,gBAAgB,SAAS,KAAK,MAAM,wBAAwB,QAAQ,OAAO,SAAS,SAAS,GAAG,gBAAgB;AACpT;AAaA,SAAS,4BAA4B,MAAM,OAAO;AAChD,SAAO,WAAW,KAAK,OAAO,MAAM,KAAK,KAAK,UAAU,KAAK,KAAK,GAAG,MAAM,KAAK,CAAC;AACnF;AAkBA,SAAS,kBAAkB,KAAK;AAC9B,SAAO,qBAAqB,KAAK,CAAC,QAAQ,SAAS,UAAU,CAAC;AAChE;AAKA,SAAS,qBAAqB,KAAK,SAAS;AAC1C,MAAI,OAAO,QAAQ,YAAY,QAAQ,MAAM;AAC3C,WAAO;AAAA,EACT;AACA,QAAM,SAAS;AACf,aAAW,UAAU,SAAS;AAC5B,QAAI,UAAU,UAAU,OAAO,OAAO,MAAM,MAAM,YAAY;AAC5D,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;AAqBA,IAAM,mBAAN,MAAuB;AAAA;AAAA,EAErB,YAAY,kBAAkB,WAAW;AACvC,SAAK,mBAAmB;AACxB,SAAK,YAAY;AAAA,EACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QAAQ,OAAO;AACb,WAAO,KAAK,qBAAqB,MAAM,oBAAoB,KAAK,cAAc,MAAM;AAAA,EACtF;AACF;AAUA,IAAM,mBAAN,cAA+B,mBAAmB;AAAA;AAAA,EAEhD,YAAY,YAAY,gBAAgB,KAAK,UAAU,UAAU,WAAW;AAC1E,UAAM,YAAY,gBAAgB,KAAK,UAAU,SAAS;AAC1D,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,WAAW;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAIA,SAAS;AACP,WAAO,MAAM,OAAO;AAAA,EACtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,KAAK,UAAU,CAAC,GAAG;AACjB,QAAI,CAAC,KAAK,WAAW;AACnB,aAAO;AAAA,IACT,WAAW,KAAK,YAAY;AAG1B,YAAM,WAAW,IAAI;AAAA,QAAsB,KAAK;AAAA,QAAY,KAAK;AAAA,QAAiB,KAAK;AAAA,QAAM,KAAK;AAAA,QAAW,KAAK;AAAA;AAAA,QAA0B;AAAA,MAAI;AAChJ,aAAO,KAAK,WAAW,cAAc,UAAU,OAAO;AAAA,IACxD,OAAO;AACL,aAAO,KAAK,gBAAgB,aAAa,KAAK,UAAU,KAAK,OAAO,QAAQ,gBAAgB;AAAA,IAC9F;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAmBA,IAAI,WAAW,UAAU,CAAC,GAAG;AAC3B,QAAI,KAAK,WAAW;AAClB,YAAM,QAAQ,KAAK,UAAU,KAAK,MAAM,sBAAsB,wBAAwB,SAAS,CAAC;AAChG,UAAI,UAAU,MAAM;AAClB,eAAO,KAAK,gBAAgB,aAAa,OAAO,QAAQ,gBAAgB;AAAA,MAC1E;AAAA,IACF;AACA,WAAO;AAAA,EACT;AACF;AAYA,IAAM,wBAAN,cAAoC,iBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAcnD,KAAK,UAAU,CAAC,GAAG;AACjB,WAAO,MAAM,KAAK,OAAO;AAAA,EAC3B;AACF;AAQA,IAAM,gBAAN,MAAoB;AAAA;AAAA,EAElB,YAAY,YAAY,iBAAiBa,QAAO,WAAW;AACzD,SAAK,aAAa;AAClB,SAAK,kBAAkB;AACvB,SAAK,YAAY;AACjB,SAAK,WAAW,IAAI,iBAAiB,UAAU,kBAAkB,UAAU,SAAS;AACpF,SAAK,QAAQA;AAAA,EACf;AAAA;AAAA,EAEA,IAAI,OAAO;AACT,UAAM,SAAS,CAAC;AAChB,SAAK,QAAQ,CAAAL,SAAO,OAAO,KAAKA,IAAG,CAAC;AACpC,WAAO;AAAA,EACT;AAAA;AAAA,EAEA,IAAI,OAAO;AACT,WAAO,KAAK,UAAU,KAAK;AAAA,EAC7B;AAAA;AAAA,EAEA,IAAI,QAAQ;AACV,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,QAAQ,UAAU,SAAS;AACzB,SAAK,UAAU,KAAK,QAAQ,CAAAA,SAAO;AACjC,eAAS,KAAK,SAAS,IAAI,sBAAsB,KAAK,YAAY,KAAK,iBAAiBA,KAAI,KAAKA,MAAK,IAAI,iBAAiB,KAAK,UAAU,YAAY,IAAIA,KAAI,GAAG,GAAG,KAAK,UAAU,SAAS,GAAG,KAAK,MAAM,SAAS,CAAC;AAAA,IACtN,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,WAAW,UAAU,CAAC,GAAG;AACvB,UAAM,yBAAyB,CAAC,CAAC,QAAQ;AACzC,QAAI,0BAA0B,KAAK,UAAU,yBAAyB;AACpE,YAAM,IAAI,eAAe,KAAK,kBAAkB,6HAAkI;AAAA,IACpL;AACA,QAAI,CAAC,KAAK,kBAAkB,KAAK,yCAAyC,wBAAwB;AAChG,WAAK,iBAAiB,oBAAoB,MAAM,sBAAsB;AACtE,WAAK,uCAAuC;AAAA,IAC9C;AACA,WAAO,KAAK;AAAA,EACd;AACF;AAEA,SAAS,oBAAoB,eAAe,wBAAwB;AAClE,MAAI,cAAc,UAAU,QAAQ,QAAQ,GAAG;AAC7C,QAAI,QAAQ;AACZ,WAAO,cAAc,UAAU,WAAW,IAAI,YAAU;AACtD,YAAMA,OAAM,IAAI,sBAAsB,cAAc,YAAY,cAAc,iBAAiB,OAAO,IAAI,KAAK,OAAO,KAAK,IAAI,iBAAiB,cAAc,UAAU,YAAY,IAAI,OAAO,IAAI,GAAG,GAAG,cAAc,UAAU,SAAS,GAAG,cAAc,MAAM,SAAS;AAC1Q,aAAO;AACP,aAAO;AAAA,QACL,MAAM;AAAA,QACN,KAAAA;AAAA,QACA,UAAU;AAAA,QACV,UAAU;AAAA,MACZ;AAAA,IACF,CAAC;AAAA,EACH,OAAO;AAGL,QAAI,eAAe,cAAc,UAAU;AAC3C,WAAO,cAAc,UAAU,WAAW;AAAA,MAAO,YAAU,0BAA0B,OAAO,SAAS;AAAA;AAAA,IAA2B,EAAE,IAAI,YAAU;AAC9I,YAAMA,OAAM,IAAI,sBAAsB,cAAc,YAAY,cAAc,iBAAiB,OAAO,IAAI,KAAK,OAAO,KAAK,IAAI,iBAAiB,cAAc,UAAU,YAAY,IAAI,OAAO,IAAI,GAAG,GAAG,cAAc,UAAU,SAAS,GAAG,cAAc,MAAM,SAAS;AAC1Q,UAAI,WAAW;AACf,UAAI,WAAW;AACf,UAAI,OAAO,SAAS,GAA0B;AAC5C,mBAAW,aAAa,QAAQ,OAAO,IAAI,GAAG;AAC9C,uBAAe,aAAa,OAAO,OAAO,IAAI,GAAG;AAAA,MACnD;AACA,UAAI,OAAO,SAAS,GAA4B;AAC9C,uBAAe,aAAa,IAAI,OAAO,GAAG;AAC1C,mBAAW,aAAa,QAAQ,OAAO,IAAI,GAAG;AAAA,MAChD;AACA,aAAO;AAAA,QACL,MAAM,iBAAiB,OAAO,IAAI;AAAA,QAClC,KAAAA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,IACF,CAAC;AAAA,EACH;AACF;AACA,SAAS,iBAAiB,MAAM;AAC9B,UAAQ,MAAM;AAAA,IACZ,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AAAA,IACL,KAAK;AACH,aAAO;AAAA,IACT,KAAK;AACH,aAAO;AAAA,IACT;AACE,aAAO,KAAK;AAAA,EAChB;AACF;AAUA,SAAS,cAAc,MAAM,OAAO;AAClC,MAAI,gBAAgB,oBAAoB,iBAAiB,kBAAkB;AACzE,WAAO,KAAK,eAAe,MAAM,cAAc,KAAK,KAAK,QAAQ,MAAM,IAAI,MAAM,KAAK,cAAc,OAAO,MAAM,cAAc,OAAO,KAAK,UAAU,QAAQ,MAAM,SAAS,MAAM,KAAK,eAAe,MAAM;AAAA,EAC9M,WAAW,gBAAgB,iBAAiB,iBAAiB,eAAe;AAC1E,WAAO,KAAK,eAAe,MAAM,cAAc,WAAW,KAAK,OAAO,MAAM,KAAK,KAAK,KAAK,SAAS,QAAQ,MAAM,QAAQ,KAAK,KAAK,UAAU,QAAQ,MAAM,SAAS;AAAA,EACvK;AACA,SAAO;AACT;AA8BA,SAAS,OAAO,WAAW;AACzB,cAAY,KAAK,WAAW,iBAAiB;AAC7C,QAAM,YAAY,KAAK,UAAU,WAAW,SAAS;AACrD,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,8CAA8C,QAAQ,UAAU,IAAI,EAAE,KAAK,cAAY,qBAAqB,WAAW,WAAW,QAAQ,CAAC;AACpJ;AACA,IAAM,oBAAN,cAAgC,uBAAuB;AAAA,EACrD,YAAY,WAAW;AACrB,UAAM;AACN,SAAK,YAAY;AAAA,EACnB;AAAA,EACA,aAAa,OAAO;AAClB,WAAO,IAAI,MAAM,KAAK;AAAA,EACxB;AAAA,EACA,iBAAiBR,OAAM;AACrB,UAAM,MAAM,KAAK,mBAAmBA,OAAM,KAAK,UAAU,WAAW;AACpE,WAAO,IAAI;AAAA,MAAkB,KAAK;AAAA;AAAA,MAA2B;AAAA,MAAM;AAAA,IAAG;AAAA,EACxE;AACF;AAQA,SAAS,gBAAgB,WAAW;AAClC,cAAY,KAAK,WAAW,iBAAiB;AAC7C,QAAM,YAAY,KAAK,UAAU,WAAW,SAAS;AACrD,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,iBAAiB,IAAI,kBAAkB,SAAS;AACtD,SAAO,yCAAyC,QAAQ,UAAU,IAAI,EAAE,KAAK,CAAAQ,SAAO,IAAI,iBAAiB,WAAW,gBAAgB,UAAU,MAAMA,MAAK,IAAI;AAAA,IAAiBA,SAAQ,QAAQA,KAAI;AAAA;AAAA,IAAmC;AAAA,EAAI,GAAG,UAAU,SAAS,CAAC;AAClQ;AAQA,SAAS,iBAAiB,WAAW;AACnC,cAAY,KAAK,WAAW,iBAAiB;AAC7C,QAAM,YAAY,KAAK,UAAU,WAAW,SAAS;AACrD,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,8CAA8C,QAAQ,UAAU,MAAM;AAAA,IAC3E,QAAQ;AAAA,EACV,CAAC,EAAE,KAAK,cAAY,qBAAqB,WAAW,WAAW,QAAQ,CAAC;AAC1E;AAWA,SAAS,QAAQK,QAAO;AACtB,EAAAA,SAAQ,KAAKA,QAAO,KAAK;AACzB,QAAM,YAAY,KAAKA,OAAM,WAAW,SAAS;AACjD,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,iBAAiB,IAAI,kBAAkB,SAAS;AACtD,2CAAyCA,OAAM,MAAM;AACrD,SAAO,+CAA+C,QAAQA,OAAM,MAAM,EAAE,KAAK,cAAY,IAAI,cAAc,WAAW,gBAAgBA,QAAO,QAAQ,CAAC;AAC5J;AAQA,SAAS,iBAAiBA,QAAO;AAC/B,EAAAA,SAAQ,KAAKA,QAAO,KAAK;AACzB,QAAM,YAAY,KAAKA,OAAM,WAAW,SAAS;AACjD,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,iBAAiB,IAAI,kBAAkB,SAAS;AACtD,SAAO,0CAA0C,QAAQA,OAAM,MAAM,EAAE,KAAK,cAAY,IAAI,cAAc,WAAW,gBAAgBA,QAAO,QAAQ,CAAC;AACvJ;AAOA,SAAS,kBAAkBA,QAAO;AAChC,EAAAA,SAAQ,KAAKA,QAAO,KAAK;AACzB,QAAM,YAAY,KAAKA,OAAM,WAAW,SAAS;AACjD,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,iBAAiB,IAAI,kBAAkB,SAAS;AACtD,SAAO,+CAA+C,QAAQA,OAAM,QAAQ;AAAA,IAC1E,QAAQ;AAAA,EACV,CAAC,EAAE,KAAK,cAAY,IAAI,cAAc,WAAW,gBAAgBA,QAAO,QAAQ,CAAC;AACnF;AACA,SAAS,OAAO,WAAW,MAAM,SAAS;AACxC,cAAY,KAAK,WAAW,iBAAiB;AAC7C,QAAM,YAAY,KAAK,UAAU,WAAW,SAAS;AACrD,QAAM,iBAAiB,4BAA4B,UAAU,WAAW,MAAM,OAAO;AACrF,QAAM,aAAa,kBAAkB,SAAS;AAC9C,QAAM,SAAS,aAAa,YAAY,UAAU,UAAU,MAAM,gBAAgB,UAAU,cAAc,MAAM,OAAO;AACvH,QAAM,WAAW,OAAO,WAAW,UAAU,MAAM,aAAa,KAAK,CAAC;AACtE,SAAO,aAAa,WAAW,CAAC,QAAQ,CAAC;AAC3C;AACA,SAAS,UAAU,WAAW,mBAAmB,UAAU,qBAAqB;AAC9E,cAAY,KAAK,WAAW,iBAAiB;AAC7C,QAAM,YAAY,KAAK,UAAU,WAAW,SAAS;AACrD,QAAM,aAAa,kBAAkB,SAAS;AAG9C,sBAAoB,mBAAmB,iBAAiB;AACxD,MAAI;AACJ,MAAI,OAAO,sBAAsB,YAAY,6BAA6B,WAAW;AACnF,aAAS,mBAAmB,YAAY,aAAa,UAAU,MAAM,mBAAmB,OAAO,mBAAmB;AAAA,EACpH,OAAO;AACL,aAAS,gBAAgB,YAAY,aAAa,UAAU,MAAM,iBAAiB;AAAA,EACrF;AACA,QAAM,WAAW,OAAO,WAAW,UAAU,MAAM,aAAa,OAAO,IAAI,CAAC;AAC5E,SAAO,aAAa,WAAW,CAAC,QAAQ,CAAC;AAC3C;AAQA,SAAS,UAAU,WAAW;AAC5B,QAAM,YAAY,KAAK,UAAU,WAAW,SAAS;AACrD,QAAM,YAAY,CAAC,IAAI,eAAe,UAAU,MAAM,aAAa,KAAK,CAAC,CAAC;AAC1E,SAAO,aAAa,WAAW,SAAS;AAC1C;AAWA,SAAS,OAAO,WAAW,MAAM;AAC/B,QAAM,YAAY,KAAK,UAAU,WAAW,SAAS;AACrD,QAAM,SAAS,IAAI,SAAS;AAC5B,QAAM,iBAAiB,4BAA4B,UAAU,WAAW,IAAI;AAC5E,QAAM,aAAa,kBAAkB,UAAU,SAAS;AACxD,QAAM,SAAS,aAAa,YAAY,UAAU,OAAO,MAAM,gBAAgB,UAAU,cAAc,MAAM,CAAC,CAAC;AAC/G,QAAM,WAAW,OAAO,WAAW,OAAO,MAAM,aAAa,OAAO,KAAK,CAAC;AAC1E,SAAO,aAAa,WAAW,CAAC,QAAQ,CAAC,EAAE,KAAK,MAAM,MAAM;AAC9D;AACA,SAAS,WAAW,cAAc,MAAM;AACtC,MAAI,IAAI,IAAI;AACZ,cAAY,mBAAmB,SAAS;AACxC,MAAI,UAAU;AAAA,IACZ,wBAAwB;AAAA,IACxB,QAAQ;AAAA,EACV;AACA,MAAI,UAAU;AACd,MAAI,OAAO,KAAK,OAAO,MAAM,YAAY,CAAC,kBAAkB,KAAK,OAAO,CAAC,GAAG;AAC1E,cAAU,KAAK,OAAO;AACtB;AAAA,EACF;AACA,QAAM,kBAAkB;AAAA,IACtB,wBAAwB,QAAQ;AAAA,IAChC,QAAQ,QAAQ;AAAA,EAClB;AACA,MAAI,kBAAkB,KAAK,OAAO,CAAC,GAAG;AACpC,UAAM,eAAe,KAAK,OAAO;AACjC,SAAK,OAAO,KAAK,KAAK,aAAa,UAAU,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,YAAY;AAClG,SAAK,UAAU,CAAC,KAAK,KAAK,aAAa,WAAW,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,YAAY;AACvG,SAAK,UAAU,CAAC,KAAK,KAAK,aAAa,cAAc,QAAQ,OAAO,SAAS,SAAS,GAAG,KAAK,YAAY;AAAA,EAC5G;AACA,MAAI;AACJ,MAAI;AACJ,MAAI;AACJ,MAAI,qBAAqB,mBAAmB;AAC1C,gBAAY,KAAK,UAAU,WAAW,SAAS;AAC/C,oBAAgB,gBAAgB,UAAU,KAAK,IAAI;AACnD,eAAW;AAAA,MACT,MAAM,cAAY;AAChB,YAAI,KAAK,OAAO,GAAG;AACjB,eAAK,OAAO,EAAE,qBAAqB,WAAW,WAAW,QAAQ,CAAC;AAAA,QACpE;AAAA,MACF;AAAA,MACA,OAAO,KAAK,UAAU,CAAC;AAAA,MACvB,UAAU,KAAK,UAAU,CAAC;AAAA,IAC5B;AAAA,EACF,OAAO;AACL,UAAMA,SAAQ,KAAK,WAAW,KAAK;AACnC,gBAAY,KAAKA,OAAM,WAAW,SAAS;AAC3C,oBAAgBA,OAAM;AACtB,UAAM,iBAAiB,IAAI,kBAAkB,SAAS;AACtD,eAAW;AAAA,MACT,MAAM,cAAY;AAChB,YAAI,KAAK,OAAO,GAAG;AACjB,eAAK,OAAO,EAAE,IAAI,cAAc,WAAW,gBAAgBA,QAAO,QAAQ,CAAC;AAAA,QAC7E;AAAA,MACF;AAAA,MACA,OAAO,KAAK,UAAU,CAAC;AAAA,MACvB,UAAU,KAAK,UAAU,CAAC;AAAA,IAC5B;AACA,6CAAyC,UAAU,MAAM;AAAA,EAC3D;AACA,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,sBAAsB,QAAQ,eAAe,iBAAiB,QAAQ;AAC/E;AACA,SAAS,kBAAkB,WAAW,KAAK;AACzC,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,WAAW,kBAAkB,GAAG,IAAI,MAAM;AAAA,IAC9C,MAAM;AAAA,EACR;AACA,SAAO,0CAA0C,QAAQ,QAAQ;AACnE;AAKA,SAAS,aAAa,WAAW,WAAW;AAC1C,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,qBAAqB,QAAQ,SAAS;AAC/C;AAKA,SAAS,qBAAqB,WAAW,KAAK,UAAU;AACtD,QAAML,OAAM,SAAS,KAAK,IAAI,IAAI,IAAI;AACtC,QAAM,iBAAiB,IAAI,kBAAkB,SAAS;AACtD,SAAO,IAAI,iBAAiB,WAAW,gBAAgB,IAAI,MAAMA,MAAK,IAAI,iBAAiB,SAAS,kBAAkB,SAAS,SAAS,GAAG,IAAI,SAAS;AAC1J;AAuCA,SAAS,mBAAmBK,QAAO;AACjC,QAAM,iBAAiB;AAAA,IACrB,OAAO,MAAM;AAAA,EACf;AACA,SAAO,uBAAuBA,QAAO,cAAc;AACrD;AAkCA,SAAS,uBAAuBA,QAAO,eAAe;AACpD,QAAM,YAAY,KAAKA,OAAM,WAAW,SAAS;AACjD,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,qBAAqB,WAAW,eAAe,CAAC,WAAW,UAAU;AACzE,WAAO,IAAI,cAAc,OAAO,UAAU,eAAe,UAAU,kBAAkB;AAAA,EACvF,CAAC;AAED,SAAO,iCAAiC,QAAQA,OAAM,QAAQ,kBAAkB,EAAE,KAAK,qBAAmB,gCAAgC,WAAWA,QAAO,eAAe,CAAC;AAC9K;AAQA,SAAS,gCAAgC,WAAWA,QAAO,iBAAiB;AAC1E,QAAM,iBAAiB,IAAI,kBAAkB,SAAS;AACtD,QAAM,gBAAgB,IAAI,uBAAuBA,QAAO,gBAAgB,eAAe;AACvF,SAAO;AACT;AAkBA,IAAM,uBAAN,MAA2B;AAAA,EACzB,YAAY,UAAU;AACpB,SAAK,OAAO;AACZ,SAAK,2BAA2B,IAAI,wBAAwB;AAC5D,QAAI,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,kBAAkB;AACjF,WAAK,4BAA4B,SAAS,iBAAiB;AAAA,IAC7D,OAAO;AACL,WAAK,4BAA4B,IAAI,+BAA+B;AAAA,IACtE;AAAA,EACF;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AACF;AACA,IAAM,2BAAN,MAA+B;AAAA,EAC7B,YAAY,UAAU;AACpB,SAAK,OAAO;AACZ,QAAI;AACJ,QAAI,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,YAAY;AAC3E,eAAS,WAAW,YAAY,QAAQ;AACxC,mBAAa,SAAS;AAAA,IACxB,OAAO;AACL,mBAAa,2BAA2B,MAAS;AACjD,iBAAW,YAAY,QAAQ;AAAA,IACjC;AACA,SAAK,2BAA2B,WAAW;AAC3C,SAAK,4BAA4B,WAAW;AAAA,EAC9C;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AACF;AACA,IAAM,kCAAN,MAAsC;AAAA,EACpC,cAAc;AACZ,SAAK,OAAO;AACZ,SAAK,4BAA4B,IAAI,+BAA+B;AAAA,EACtE;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AACF;AACA,IAAM,gCAAN,MAAoC;AAAA,EAClC,YAAY,WAAW;AACrB,SAAK,OAAO;AACZ,SAAK,4BAA4B,IAAI,oCAAoC,SAAS;AAAA,EACpF;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AACF;AAKA,SAAS,8BAA8B;AACrC,SAAO,IAAI,gCAAgC;AAC7C;AAQA,SAAS,0BAA0B,UAAU;AAC3C,SAAO,IAAI,8BAA8B,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,cAAc;AACtH;AAKA,SAAS,iBAAiB,UAAU;AAClC,SAAO,IAAI,qBAAqB,QAAQ;AAC1C;AAOA,SAAS,qBAAqB,UAAU;AACtC,SAAO,IAAI,yBAAyB,QAAQ;AAC9C;AACA,IAAM,uBAAN,MAA2B;AAAA,EACzB,YAAY,gBAAgB;AAC1B,SAAK,iBAAiB;AACtB,SAAK,OAAO;AAAA,EACd;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,UAAU;AACpB,SAAK,2BAA2B,IAAI,wBAAwB;AAC5D,SAAK,4BAA4B,IAAI,kCAAkC,KAAK,0BAA0B,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,gBAAgB,KAAK,cAAc;AAAA,EACxM;AACF;AACA,IAAM,sBAAN,MAA0B;AAAA,EACxB,cAAc;AACZ,SAAK,OAAO;AAAA,EACd;AAAA,EACA,SAAS;AACP,WAAO;AAAA,MACL,MAAM,KAAK;AAAA,IACb;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAIA,YAAY,UAAU;AACpB,SAAK,2BAA2B,IAAI,wBAAwB;AAC5D,SAAK,4BAA4B,IAAI,iCAAiC,KAAK,0BAA0B,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,cAAc;AAAA,EAClL;AACF;AAMA,SAAS,2BAA2B,UAAU;AAC5C,SAAO,IAAI,qBAAqB,aAAa,QAAQ,aAAa,SAAS,SAAS,SAAS,cAAc;AAC7G;AAIA,SAAS,+BAA+B;AACtC,SAAO,IAAI,oBAAoB;AACjC;AAkBA,IAAM,8BAA8B;AAAA,EAClC,aAAa;AACf;AACA,SAAS,2BAA2B,SAAS;AAC3C,MAAI,QAAQ,cAAc,GAAG;AAC3B,UAAM,IAAI,eAAe,KAAK,kBAAkB,iCAAiC;AAAA,EACnF;AACF;AA0BA,IAAM,aAAN,MAAiB;AAAA;AAAA,EAEf,YAAY,YAAY,gBAAgB;AACtC,SAAK,aAAa;AAClB,SAAK,iBAAiB;AACtB,SAAK,aAAa,CAAC;AACnB,SAAK,aAAa;AAClB,SAAK,cAAc,kBAAkB,UAAU;AAAA,EACjD;AAAA,EACA,IAAI,aAAa,MAAM,SAAS;AAC9B,SAAK,oBAAoB;AACzB,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAC1D,UAAM,iBAAiB,4BAA4B,IAAI,WAAW,MAAM,OAAO;AAC/E,UAAM,SAAS,aAAa,KAAK,aAAa,kBAAkB,IAAI,MAAM,gBAAgB,IAAI,cAAc,MAAM,OAAO;AACzH,SAAK,WAAW,KAAK,OAAO,WAAW,IAAI,MAAM,aAAa,KAAK,CAAC,CAAC;AACrE,WAAO;AAAA,EACT;AAAA,EACA,OAAO,aAAa,mBAAmB,UAAU,qBAAqB;AACpE,SAAK,oBAAoB;AACzB,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAG1D,wBAAoB,mBAAmB,iBAAiB;AACxD,QAAI;AACJ,QAAI,OAAO,sBAAsB,YAAY,6BAA6B,WAAW;AACnF,eAAS,mBAAmB,KAAK,aAAa,qBAAqB,IAAI,MAAM,mBAAmB,OAAO,mBAAmB;AAAA,IAC5H,OAAO;AACL,eAAS,gBAAgB,KAAK,aAAa,qBAAqB,IAAI,MAAM,iBAAiB;AAAA,IAC7F;AACA,SAAK,WAAW,KAAK,OAAO,WAAW,IAAI,MAAM,aAAa,OAAO,IAAI,CAAC,CAAC;AAC3E,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,aAAa;AAClB,SAAK,oBAAoB;AACzB,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAC1D,SAAK,aAAa,KAAK,WAAW,OAAO,IAAI,eAAe,IAAI,MAAM,aAAa,KAAK,CAAC,CAAC;AAC1F,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAaA,SAAS;AACP,SAAK,oBAAoB;AACzB,SAAK,aAAa;AAClB,QAAI,KAAK,WAAW,SAAS,GAAG;AAC9B,aAAO,KAAK,eAAe,KAAK,UAAU;AAAA,IAC5C;AACA,WAAO,QAAQ,QAAQ;AAAA,EACzB;AAAA,EACA,sBAAsB;AACpB,QAAI,KAAK,YAAY;AACnB,YAAM,IAAI,eAAe,KAAK,qBAAqB,qEAA0E;AAAA,IAC/H;AAAA,EACF;AACF;AACA,SAAS,kBAAkB,aAAa,WAAW;AACjD,gBAAc,mBAAmB,WAAW;AAC5C,MAAI,YAAY,cAAc,WAAW;AACvC,UAAM,IAAI,eAAe,KAAK,kBAAkB,qEAAqE;AAAA,EACvH,OAAO;AACL,WAAO;AAAA,EACT;AACF;AA2BA,IAAM,gBAAN,MAAoB;AAAA;AAAA,EAElB,YAAY,YAAY,cAAc;AACpC,SAAK,aAAa;AAClB,SAAK,eAAe;AACpB,SAAK,cAAc,kBAAkB,UAAU;AAAA,EACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACf,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAC1D,UAAM,iBAAiB,IAAI,mBAAmB,KAAK,UAAU;AAC7D,WAAO,KAAK,aAAa,OAAO,CAAC,IAAI,IAAI,CAAC,EAAE,KAAK,UAAQ;AACvD,UAAI,CAAC,QAAQ,KAAK,WAAW,GAAG;AAC9B,eAAO,KAAK;AAAA,MACd;AACA,YAAML,OAAM,KAAK,CAAC;AAClB,UAAIA,KAAI,gBAAgB,GAAG;AACzB,eAAO,IAAI,mBAAmB,KAAK,YAAY,gBAAgBA,KAAI,KAAKA,MAAK,IAAI,SAAS;AAAA,MAC5F,WAAWA,KAAI,aAAa,GAAG;AAC7B,eAAO,IAAI,mBAAmB,KAAK,YAAY,gBAAgB,IAAI,MAAM,MAAM,IAAI,SAAS;AAAA,MAC9F,OAAO;AACL,cAAM,KAAK;AAAA,MACb;AAAA,IACF,CAAC;AAAA,EACH;AAAA,EACA,IAAI,aAAa,OAAO,SAAS;AAC/B,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAC1D,UAAM,iBAAiB,4BAA4B,IAAI,WAAW,OAAO,OAAO;AAChF,UAAM,SAAS,aAAa,KAAK,aAAa,mBAAmB,IAAI,MAAM,gBAAgB,IAAI,cAAc,MAAM,OAAO;AAC1H,SAAK,aAAa,IAAI,IAAI,MAAM,MAAM;AACtC,WAAO;AAAA,EACT;AAAA,EACA,OAAO,aAAa,mBAAmB,UAAU,qBAAqB;AACpE,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAG1D,wBAAoB,mBAAmB,iBAAiB;AACxD,QAAI;AACJ,QAAI,OAAO,sBAAsB,YAAY,6BAA6B,WAAW;AACnF,eAAS,mBAAmB,KAAK,aAAa,sBAAsB,IAAI,MAAM,mBAAmB,OAAO,mBAAmB;AAAA,IAC7H,OAAO;AACL,eAAS,gBAAgB,KAAK,aAAa,sBAAsB,IAAI,MAAM,iBAAiB;AAAA,IAC9F;AACA,SAAK,aAAa,OAAO,IAAI,MAAM,MAAM;AACzC,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAO,aAAa;AAClB,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAC1D,SAAK,aAAa,OAAO,IAAI,IAAI;AACjC,WAAO;AAAA,EACT;AACF;AAyBA,IAAM,cAAN,cAA0B,cAAc;AAAA;AAAA;AAAA;AAAA,EAItC,YAAY,YAAY,cAAc;AACpC,UAAM,YAAY,YAAY;AAC9B,SAAK,aAAa;AAAA,EACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,IAAI,aAAa;AACf,UAAM,MAAM,kBAAkB,aAAa,KAAK,UAAU;AAC1D,UAAM,iBAAiB,IAAI,kBAAkB,KAAK,UAAU;AAC5D,WAAO,MAAM,IAAI,WAAW,EAAE,KAAK,0BAAwB,IAAI,iBAAiB,KAAK,YAAY,gBAAgB,IAAI,MAAM,qBAAqB,WAAW,IAAI;AAAA;AAAA,MAAyC;AAAA;AAAA,MAAuB;AAAA,IAAK,GAAG,IAAI,SAAS,CAAC;AAAA,EACvP;AACF;AAoBA,SAAS,eAAe,WAAW,gBAAgB,SAAS;AAC1D,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,sBAAsB,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,2BAA2B,GAAG,OAAO;AACjG,6BAA2B,mBAAmB;AAC9C,QAAM,SAAS,0BAA0B,SAAS;AAClD,SAAO,2BAA2B,QAAQ,yBAAuB,eAAe,IAAI,YAAY,WAAW,mBAAmB,CAAC,GAAG,mBAAmB;AACvJ;AAsBA,SAAS,cAAc;AACrB,SAAO,IAAI,qBAAqB,aAAa;AAC/C;AAKA,SAAS,kBAAkB;AACzB,SAAO,IAAI,8BAA8B,iBAAiB;AAC5D;AAaA,SAAS,cAAc,UAAU;AAG/B,SAAO,IAAI,yBAAyB,cAAc,QAAQ;AAC5D;AAYA,SAAS,eAAe,UAAU;AAGhC,SAAO,IAAI,0BAA0B,eAAe,QAAQ;AAC9D;AAoBA,SAAS,UAAU,GAAG;AACpB,SAAO,IAAI,+BAA+B,aAAa,CAAC;AAC1D;AAQA,SAAS,OAAO,QAAQ;AACtB,SAAO,IAAI,YAAY,MAAM;AAC/B;AA6BA,SAAS,WAAW,WAAW;AAC7B,cAAY,KAAK,WAAW,SAAS;AACrC,4BAA0B,SAAS;AACnC,SAAO,IAAI,WAAW,WAAW,eAAa,aAAa,WAAW,SAAS,CAAC;AAClF;AAkBA,SAAS,sBAAsB,WAAW,qBAAqB;AAC7D,MAAI;AACJ,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,SAAS,0BAA0B,SAAS;AAClD,MAAI,CAAC,OAAO,sCAAsC,KAAK,OAAO,sCAAsC,QAAQ,OAAO,SAAS,SAAS,GAAG,kBAAkB,UAAU;AAGlK,YAAQ,oDAAoD;AAC5D,WAAO,QAAQ,QAAQ;AAAA,EACzB;AACA,QAAM,gBAAgB,aAAa,mBAAmB;AACtD,SAAO,qCAAqC,QAAQ,aAAa;AACnE;AACA,SAAS,aAAa,qBAAqB;AACzC,QAAM,qBAAqB,OAAO,wBAAwB,WAAW,aAAa,mBAAmB,IAAI;AACzG,QAAM,gBAAgB,CAAC;AACvB,MAAI,MAAM,QAAQ,mBAAmB,OAAO,GAAG;AAC7C,eAAW,SAAS,mBAAmB,SAAS;AAC9C,YAAMP,mBAAkB,aAAa,OAAO,iBAAiB;AAC7D,YAAM,WAAW,CAAC;AAClB,UAAI,MAAM,QAAQ,MAAM,MAAM,GAAG;AAC/B,mBAAW,SAAS,MAAM,QAAQ;AAChC,gBAAM,kBAAkB,aAAa,OAAO,WAAW;AACvD,gBAAM,YAAY,gCAAgC,yBAAyB,eAAe;AAC1F,cAAI,MAAM,gBAAgB,YAAY;AACpC,qBAAS,KAAK,IAAI;AAAA,cAAa;AAAA,cAAW;AAAA;AAAA,YAA0B,CAAC;AAAA,UACvE,WAAW,MAAM,UAAU,aAAa;AACtC,qBAAS,KAAK,IAAI;AAAA,cAAa;AAAA,cAAW;AAAA;AAAA,YAA2B,CAAC;AAAA,UACxE,WAAW,MAAM,UAAU,cAAc;AACvC,qBAAS,KAAK,IAAI;AAAA,cAAa;AAAA,cAAW;AAAA;AAAA,YAA4B,CAAC;AAAA,UACzE;AAAA,QACF;AAAA,MACF;AACA,oBAAc,KAAK,IAAI,WAAW,WAAW,YAAYA,kBAAiB,UAAU,WAAW,MAAM,CAAC,CAAC;AAAA,IACzG;AAAA,EACF;AACA,SAAO;AACT;AACA,SAAS,aAAa,MAAM;AAC1B,MAAI;AACF,WAAO,KAAK,MAAM,IAAI;AAAA,EACxB,SAAS,GAAG;AACV,UAAM,IAAI,eAAe,KAAK,kBAAkB,4BAA4B,MAAM,QAAQ,MAAM,SAAS,SAAS,EAAE,QAAQ;AAAA,EAC9H;AACF;AACA,SAAS,aAAa,MAAM,UAAU;AACpC,MAAI,OAAO,KAAK,QAAQ,MAAM,UAAU;AACtC,UAAM,IAAI,eAAe,KAAK,kBAAkB,+BAA+B,QAAQ;AAAA,EACzF;AACA,SAAO,KAAK,QAAQ;AACtB;AAwBA,IAAM,8BAAN,MAAkC;AAAA;AAAA,EAEhC,YAAY,SAAS;AACnB,SAAK,UAAU;AAEf,SAAK,OAAO;AAAA,EACd;AACF;AAQA,SAAS,+BAA+B,WAAW;AACjD,MAAI;AACJ,cAAY,KAAK,WAAW,SAAS;AACrC,QAAM,iBAAiB,uCAAuC,IAAI,SAAS;AAC3E,MAAI,gBAAgB;AAClB,WAAO;AAAA,EACT;AACA,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,KAAK,OAAO,sCAAsC,QAAQ,OAAO,SAAS,SAAS,GAAG,kBAAkB,cAAc;AAC1H,WAAO;AAAA,EACT;AACA,QAAM,WAAW,IAAI,4BAA4B,MAAM;AACvD,yCAAuC,IAAI,WAAW,QAAQ;AAC9D,SAAO;AACT;AAQA,SAAS,uCAAuC,cAAc;AAC5D,6CAA2C,cAAc,IAAI;AAC/D;AAMA,SAAS,wCAAwC,cAAc;AAC7D,6CAA2C,cAAc,KAAK;AAChE;AAOA,SAAS,gCAAgC,cAAc;AACrD,eAAa,QAAQ,oBAAoB;AACzC,QAAM,UAAU,qCAAqC,aAAa,OAAO;AACzE,UAAQ,KAAK,OAAK,SAAS,iDAAiD,CAAC,EAAE,MAAM,WAAS,QAAQ,gDAAgD,KAAK,CAAC;AAC9J;AACA,SAAS,2CAA2C,cAAc,WAAW;AAC3E,eAAa,QAAQ,oBAAoB;AACzC,QAAM,UAAU,0DAA0D,aAAa,SAAS,SAAS;AACzG,UAAQ,KAAK,OAAK,SAAS,0DAA+D,SAAS,YAAY,CAAC,EAAE,MAAM,WAAS,QAAQ,0DAA+D,SAAS,WAAW,KAAK,CAAC;AACpO;AASA,IAAM,yCAAyC,oBAAI,QAAQ;AA+B3D,SAAS,iCAAiCY,QAAO;AAC/C,MAAI;AACJ,QAAM,YAAY,KAAKA,OAAM,WAAW,SAAS;AACjD,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,cAAc,KAAK,OAAO,uBAAuB,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU;AACrG,MAAI,eAAe,QAAW;AAC5B,WAAO;AAAA,EACT;AACA,SAAO,cAAc,YAAY,cAAcA,OAAM,MAAM,CAAC,EAAE;AAChE;AAeA,SAAS,2DAA2DA,QAAO,eAAe;AACxF,MAAI;AACJ,QAAM,aAAa,WAAW,eAAe,CAAC,WAAW,UAAU;AACjE,WAAO,IAAI,cAAc,OAAO,UAAU,eAAe,UAAU,kBAAkB;AAAA,EACvF,CAAC;AACD,QAAM,YAAY,KAAKA,OAAM,WAAW,SAAS;AACjD,QAAM,SAAS,0BAA0B,SAAS;AAClD,QAAM,cAAc,KAAK,OAAO,uBAAuB,QAAQ,OAAO,SAAS,SAAS,GAAG,UAAU;AACrG,MAAI,eAAe,QAAW;AAC5B,WAAO;AAAA,EACT;AACA,SAAO;AAAA,IAA6B;AAAA,IAAY,uBAAuBA,OAAM,MAAM;AAAA,IAAG;AAAA;AAAA,IAA+B;AAAA,EAAI,EAAE;AAC7H;AAyBA,IAAM,eAAN,MAAmB;AAAA,EACjB,cAAc;AACZ,UAAM,IAAI,MAAM,+CAA+C;AAAA,EACjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,OAAO,0BAA0B,UAAU;AACzC,WAAO,oBAAoB,SAAS,0BAA0B,QAAQ;AAAA,EACxE;AACF;AAIA,IAAM,sBAAN,MAAM,qBAAoB;AAAA,EACxB,cAAc;AACZ,SAAK,uCAAuC,oBAAI,IAAI;AAAA,EACtD;AAAA,EACA,WAAW,WAAW;AACpB,QAAI,CAAC,6BAA6B;AAChC,oCAA8B,IAAI,qBAAoB;AACtD,yBAAmB,2BAA2B;AAAA,IAChD;AACA,WAAO;AAAA,EACT;AAAA,EACA,gCAAgC,MAAM;AACpC,SAAK,qCAAqC,QAAQ,cAAY,SAAS,IAAI,CAAC;AAAA,EAC9E;AAAA,EACA,0BAA0B,UAAU;AAClC,UAAM,KAAK,OAAO;AAClB,UAAM,YAAY,KAAK;AACvB,cAAU,IAAI,IAAI,QAAQ;AAC1B,WAAO,MAAM,UAAU,OAAO,EAAE;AAAA,EAClC;AACF;AACA,IAAI,8BAA8B;AAkBlC,kBAAkB,MAAM;",
  "names": ["exports", "Status", "LogVerbosity", "Propagate", "exports", "module", "exports", "exports", "exports", "Metadata", "exports", "exports", "exports", "exports", "exports", "name", "exports", "ConnectivityState", "exports", "exports", "exports", "PickResultType", "exports", "exports", "exports", "name", "exports", "exports", "exports", "exports", "module", "ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "once", "name", "exports", "exports", "metadata", "exports", "metadata", "_a", "_b", "_c", "credentials", "getCall", "exports", "credentials", "metadata", "exports", "name", "loadPackageDefinition", "exports", "module", "INFINITY", "Symbol", "exports", "module", "params", "offset", "exports", "i", "exports", "module", "exports", "module", "exports", "exports", "module", "size", "exports", "module", "toNumber", "exports", "isInteger", "Buffer", "name", "i", "exports", "module", "create", "exports", "module", "exports", "module", "create_array", "create", "buffer", "exports", "module", "exports", "module", "self", "err", "exports", "exports", "module", "exports", "exports", "module", "exports", "module", "inquire", "exports", "isAbsolute", "path", "normalize", "exports", "exports", "module", "fromJSON", "name", "exports", "module", "name", "fromJSON", "self", "exports", "module", "fromJSON", "name", "nested", "define", "exports", "module", "name", "fromJSON", "exports", "module", "name", "fromJSON", "require_service", "exports", "module", "name", "fromJSON", "exports", "module", "exports", "module", "field", "exports", "module", "exports", "exports", "name", "exports", "module", "name", "fromJSON", "nested", "exports", "module", "fromJSON", "self", "filename", "process", "resolved", "i", "source", "exports", "module", "name", "dst", "path", "value", "exports", "module", "name", "opt", "exports", "module", "name", "fromJSON", "exports", "module", "exports", "module", "exports", "module", "exports", "module", "name", "token", "value", "exports", "module", "name", "exports", "module", "exports", "module", "exports", "module", "require_descriptor", "exports", "module", "nested", "name", "exports", "module", "exports", "module", "require_type", "exports", "module", "require_util", "exports", "exports", "module", "Long", "MIN_VALUE", "MAX_VALUE", "toNumber", "and", "or", "toBytes", "fromBytes", "require_src", "exports", "IdempotencyLevel", "name", "fromJSON", "exports", "channels", "subchannels", "sockets", "name", "exports", "credentials", "exports", "exports", "_a", "hostPort", "exports", "ReadState", "exports", "name", "_a", "exports", "exports", "credentials", "exports", "global", "exports", "exports", "CompressionAlgorithms", "exports", "exports", "exports", "exports", "exports", "credentials", "_a", "_b", "code", "details", "exports", "credentials", "exports", "credentials", "count", "exports", "exports", "credentials", "exports", "credentials", "exports", "limit", "err", "_a", "exports", "exports", "name", "port", "count", "_a", "_b", "exports", "exports", "exports", "_a", "exports", "exports", "exports", "exports", "_a", "exports", "require_src", "exports", "SDK_VERSION", "version", "credentials", "name", "collectionGroup", "collection", "process", "count", "fieldsMap", "value", "orderBy", "doc", "filter", "limit", "startAt", "endAt", "query", "sum", "serverTransformResults", "documentMap", "RpcCode", "Bytes", "_a", "protos", "where", "namedQuery", "documentId", "global", "typeOrder", "expandedFilters", "target", "fieldIndexes", "key", "canonicalId", "path", "fromVersion", "toVersion", "indexStateStore", "mutationsStore", "documentTargetStore", "globalTargetStore", "writeSentinelKey", "collectionParentsStore", "indexConfigurationStore", "documentOverlayStore", "window", "keys", "ListenerDataSource", "error", "arrayUnion"]
}
